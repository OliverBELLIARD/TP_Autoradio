
TP_Autoradio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c29c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  0800c42c  0800c42c  0000d42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c96c  0800c96c  0000e074  2**0
                  CONTENTS
  4 .ARM          00000008  0800c96c  0800c96c  0000d96c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c974  0800c974  0000e074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c974  0800c974  0000d974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c978  0800c978  0000d978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800c97c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006024  20000074  0800c9f0  0000e074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006098  0800c9f0  0000e098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002446d  00000000  00000000  0000e0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054ca  00000000  00000000  00032511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e90  00000000  00000000  000379e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017b1  00000000  00000000  00039870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cf89  00000000  00000000  0003b021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000268b2  00000000  00000000  00067faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105aec  00000000  00000000  0008e85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00194348  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008850  00000000  00000000  0019438c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0019cbdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c414 	.word	0x0800c414

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800c414 	.word	0x0800c414

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000566:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <MX_DMA_Init+0x48>)
 8000568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800056a:	4a0f      	ldr	r2, [pc, #60]	@ (80005a8 <MX_DMA_Init+0x48>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6493      	str	r3, [r2, #72]	@ 0x48
 8000572:	4b0d      	ldr	r3, [pc, #52]	@ (80005a8 <MX_DMA_Init+0x48>)
 8000574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2105      	movs	r1, #5
 8000582:	2010      	movs	r0, #16
 8000584:	f001 fdc2 	bl	800210c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000588:	2010      	movs	r0, #16
 800058a:	f001 fddb 	bl	8002144 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2105      	movs	r1, #5
 8000592:	2011      	movs	r0, #17
 8000594:	f001 fdba 	bl	800210c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000598:	2011      	movs	r0, #17
 800059a:	f001 fdd3 	bl	8002144 <HAL_NVIC_EnableIRQ>

}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40021000 	.word	0x40021000

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000094 	.word	0x20000094
 80005dc:	20000134 	.word	0x20000134

080005e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <MX_FREERTOS_Init+0x30>)
 80005e8:	1d3c      	adds	r4, r7, #4
 80005ea:	461d      	mov	r5, r3
 80005ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f008 fcd4 	bl	8008faa <osThreadCreate>
 8000602:	4603      	mov	r3, r0
 8000604:	4a03      	ldr	r2, [pc, #12]	@ (8000614 <MX_FREERTOS_Init+0x34>)
 8000606:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000608:	bf00      	nop
 800060a:	3720      	adds	r7, #32
 800060c:	46bd      	mov	sp, r7
 800060e:	bdb0      	pop	{r4, r5, r7, pc}
 8000610:	0800c438 	.word	0x0800c438
 8000614:	20000090 	.word	0x20000090

08000618 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000620:	2001      	movs	r0, #1
 8000622:	f008 fd0e 	bl	8009042 <osDelay>
 8000626:	e7fb      	b.n	8000620 <StartDefaultTask+0x8>

08000628 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	@ 0x28
 800062c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063e:	4b35      	ldr	r3, [pc, #212]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	4a34      	ldr	r2, [pc, #208]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000644:	f043 0304 	orr.w	r3, r3, #4
 8000648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800064a:	4b32      	ldr	r3, [pc, #200]	@ (8000714 <MX_GPIO_Init+0xec>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	f003 0304 	and.w	r3, r3, #4
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000656:	4b2f      	ldr	r3, [pc, #188]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	4a2e      	ldr	r2, [pc, #184]	@ (8000714 <MX_GPIO_Init+0xec>)
 800065c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000662:	4b2c      	ldr	r3, [pc, #176]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b29      	ldr	r3, [pc, #164]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000672:	4a28      	ldr	r2, [pc, #160]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067a:	4b26      	ldr	r3, [pc, #152]	@ (8000714 <MX_GPIO_Init+0xec>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000686:	4b23      	ldr	r3, [pc, #140]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068a:	4a22      	ldr	r2, [pc, #136]	@ (8000714 <MX_GPIO_Init+0xec>)
 800068c:	f043 0302 	orr.w	r3, r3, #2
 8000690:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000692:	4b20      	ldr	r3, [pc, #128]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000696:	f003 0302 	and.w	r3, r3, #2
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VU_nRESET_Pin|LD2_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2121      	movs	r1, #33	@ 0x21
 80006a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a6:	f002 f97b 	bl	80029a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2180      	movs	r1, #128	@ 0x80
 80006ae:	481a      	ldr	r0, [pc, #104]	@ (8000718 <MX_GPIO_Init+0xf0>)
 80006b0:	f002 f976 	bl	80029a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006ba:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4619      	mov	r1, r3
 80006ca:	4814      	ldr	r0, [pc, #80]	@ (800071c <MX_GPIO_Init+0xf4>)
 80006cc:	f001 ffbe 	bl	800264c <HAL_GPIO_Init>

  /*Configure GPIO pins : VU_nRESET_Pin LD2_Pin */
  GPIO_InitStruct.Pin = VU_nRESET_Pin|LD2_Pin;
 80006d0:	2321      	movs	r3, #33	@ 0x21
 80006d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	4619      	mov	r1, r3
 80006e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ea:	f001 ffaf 	bl	800264c <HAL_GPIO_Init>

  /*Configure GPIO pin : VU_nCS_Pin */
  GPIO_InitStruct.Pin = VU_nCS_Pin;
 80006ee:	2380      	movs	r3, #128	@ 0x80
 80006f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2300      	movs	r3, #0
 80006fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VU_nCS_GPIO_Port, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	4804      	ldr	r0, [pc, #16]	@ (8000718 <MX_GPIO_Init+0xf0>)
 8000706:	f001 ffa1 	bl	800264c <HAL_GPIO_Init>

}
 800070a:	bf00      	nop
 800070c:	3728      	adds	r7, #40	@ 0x28
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000
 8000718:	48000400 	.word	0x48000400
 800071c:	48000800 	.word	0x48000800

08000720 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000724:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	@ (8000798 <MX_I2C2_Init+0x78>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 800072a:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <MX_I2C2_Init+0x74>)
 800072c:	4a1b      	ldr	r2, [pc, #108]	@ (800079c <MX_I2C2_Init+0x7c>)
 800072e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000738:	2201      	movs	r2, #1
 800073a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <MX_I2C2_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000742:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <MX_I2C2_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074e:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800075a:	480e      	ldr	r0, [pc, #56]	@ (8000794 <MX_I2C2_Init+0x74>)
 800075c:	f002 f952 	bl	8002a04 <HAL_I2C_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000766:	f000 fab7 	bl	8000cd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800076a:	2100      	movs	r1, #0
 800076c:	4809      	ldr	r0, [pc, #36]	@ (8000794 <MX_I2C2_Init+0x74>)
 800076e:	f002 fed5 	bl	800351c <HAL_I2CEx_ConfigAnalogFilter>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000778:	f000 faae 	bl	8000cd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800077c:	2100      	movs	r1, #0
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000780:	f002 ff17 	bl	80035b2 <HAL_I2CEx_ConfigDigitalFilter>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800078a:	f000 faa5 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000334 	.word	0x20000334
 8000798:	40005800 	.word	0x40005800
 800079c:	10d19ce4 	.word	0x10d19ce4

080007a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b0ac      	sub	sp, #176	@ 0xb0
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	2288      	movs	r2, #136	@ 0x88
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f00a fe97 	bl	800b4f4 <memset>
  if(i2cHandle->Instance==I2C2)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a21      	ldr	r2, [pc, #132]	@ (8000850 <HAL_I2C_MspInit+0xb0>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d13b      	bne.n	8000848 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80007d0:	2380      	movs	r3, #128	@ 0x80
 80007d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4618      	mov	r0, r3
 80007de:	f003 fdcb 	bl	8004378 <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80007e8:	f000 fa76 	bl	8000cd8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ec:	4b19      	ldr	r3, [pc, #100]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 80007ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f0:	4a18      	ldr	r2, [pc, #96]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 80007f2:	f043 0302 	orr.w	r3, r3, #2
 80007f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f8:	4b16      	ldr	r3, [pc, #88]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 80007fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fc:	f003 0302 	and.w	r3, r3, #2
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000804:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000808:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800080c:	2312      	movs	r3, #18
 800080e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800081e:	2304      	movs	r3, #4
 8000820:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000828:	4619      	mov	r1, r3
 800082a:	480b      	ldr	r0, [pc, #44]	@ (8000858 <HAL_I2C_MspInit+0xb8>)
 800082c:	f001 ff0e 	bl	800264c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000830:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 8000832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000834:	4a07      	ldr	r2, [pc, #28]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 8000836:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800083a:	6593      	str	r3, [r2, #88]	@ 0x58
 800083c:	4b05      	ldr	r3, [pc, #20]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 800083e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000840:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000848:	bf00      	nop
 800084a:	37b0      	adds	r7, #176	@ 0xb0
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40005800 	.word	0x40005800
 8000854:	40021000 	.word	0x40021000
 8000858:	48000400 	.word	0x48000400

0800085c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000860:	f3bf 8f4f 	dsb	sy
}
 8000864:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <__NVIC_SystemReset+0x24>)
 8000868:	68db      	ldr	r3, [r3, #12]
 800086a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800086e:	4904      	ldr	r1, [pc, #16]	@ (8000880 <__NVIC_SystemReset+0x24>)
 8000870:	4b04      	ldr	r3, [pc, #16]	@ (8000884 <__NVIC_SystemReset+0x28>)
 8000872:	4313      	orrs	r3, r2
 8000874:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000876:	f3bf 8f4f 	dsb	sy
}
 800087a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <__NVIC_SystemReset+0x20>
 8000880:	e000ed00 	.word	0xe000ed00
 8000884:	05fa0004 	.word	0x05fa0004

08000888 <__io_putchar>:
 * @brief Transmit a character over UART.
 * @param ch: Character to transmit.
 * @retval int: The transmitted character.
 */
int __io_putchar(int ch)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000890:	1d39      	adds	r1, r7, #4
 8000892:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000896:	2201      	movs	r2, #1
 8000898:	4803      	ldr	r0, [pc, #12]	@ (80008a8 <__io_putchar+0x20>)
 800089a:	f006 ffcb 	bl	8007834 <HAL_UART_Transmit>

	return ch;
 800089e:	687b      	ldr	r3, [r7, #4]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000be4 	.word	0x20000be4

080008ac <Error_Handler_xTaskCreate>:
/**
 * @brief  Gestion d'erreurs de création de tâche.
 * @param	BaseType_t	Retour de xTaskCreate.
 */
void Error_Handler_xTaskCreate(BaseType_t r)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	/* Vérification si la tâche a été créée avec succès */
	if (pdPASS == r) {
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d010      	beq.n	80008dc <Error_Handler_xTaskCreate+0x30>
		/* Si la tâche est créée avec succès, démarrer le scheduler */
#if (LOGS)
		printf("Tâche crée avec succès\r\n");
#endif
	} else if (errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY == r) {
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80008c0:	d105      	bne.n	80008ce <Error_Handler_xTaskCreate+0x22>
		printf("Erreur: Mémoire insuffisante\r\n");
 80008c2:	4808      	ldr	r0, [pc, #32]	@ (80008e4 <Error_Handler_xTaskCreate+0x38>)
 80008c4:	f00a fd02 	bl	800b2cc <puts>
		Error_Handler();
 80008c8:	f000 fa06 	bl	8000cd8 <Error_Handler>
		/* Cas improbable : code d'erreur non prévu pour xTaskCreate */
		printf("Erreur inconnue lors de la création de la tâche\r\n");
		Error_Handler();  	// Gestion d'erreur générique
		NVIC_SystemReset(); // Réinitialiser le microcontrôleur
	}
}
 80008cc:	e006      	b.n	80008dc <Error_Handler_xTaskCreate+0x30>
		printf("Erreur inconnue lors de la création de la tâche\r\n");
 80008ce:	4806      	ldr	r0, [pc, #24]	@ (80008e8 <Error_Handler_xTaskCreate+0x3c>)
 80008d0:	f00a fcfc 	bl	800b2cc <puts>
		Error_Handler();  	// Gestion d'erreur générique
 80008d4:	f000 fa00 	bl	8000cd8 <Error_Handler>
		NVIC_SystemReset(); // Réinitialiser le microcontrôleur
 80008d8:	f7ff ffc0 	bl	800085c <__NVIC_SystemReset>
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	0800c454 	.word	0x0800c454
 80008e8:	0800c474 	.word	0x0800c474

080008ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a04      	ldr	r2, [pc, #16]	@ (800090c <HAL_UART_RxCpltCallback+0x20>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d101      	bne.n	8000902 <HAL_UART_RxCpltCallback+0x16>
	{
		shell_uart_receive_irq_cb();	// Function giving the semaphore!
 80008fe:	f001 f933 	bl	8001b68 <shell_uart_receive_irq_cb>
	}
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40004400 	.word	0x40004400

08000910 <task_LED>:

//////////////////////////////////////////////////////////////////////
// TASKS
////////////////////////////////////////////////////////////////////

void task_LED (void * pvParameters) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	int duree = (int) pvParameters;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	60fb      	str	r3, [r7, #12]
#if (LOGS)
	printf("Task %s created\r\n", pcTaskGetName(xTaskGetCurrentTaskHandle()));
#endif
	for (;;)
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800091c:	2120      	movs	r1, #32
 800091e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000922:	f002 f855 	bl	80029d0 <HAL_GPIO_TogglePin>
		vTaskDelay( duree / portTICK_PERIOD_MS );  // Délai de duree en ms
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	4618      	mov	r0, r3
 800092a:	f009 f8e7 	bl	8009afc <vTaskDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800092e:	bf00      	nop
 8000930:	e7f4      	b.n	800091c <task_LED+0xc>
	...

08000934 <task_shell>:
	}
}

void task_shell(void * unused)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
#if (LOGS)
	printf("Task %s created\r\n", pcTaskGetName(xTaskGetCurrentTaskHandle()));
#endif

	shell_init();	// Shell initialization
 800093c:	f001 f9a0 	bl	8001c80 <shell_init>

	// Creation of all commands
	shell_add('f', fonction, "Une fonction inutile");
 8000940:	4a0f      	ldr	r2, [pc, #60]	@ (8000980 <task_shell+0x4c>)
 8000942:	4910      	ldr	r1, [pc, #64]	@ (8000984 <task_shell+0x50>)
 8000944:	2066      	movs	r0, #102	@ 0x66
 8000946:	f001 f9d3 	bl	8001cf0 <shell_add>
	shell_add('a', addition, "Effectue une somme");
 800094a:	4a0f      	ldr	r2, [pc, #60]	@ (8000988 <task_shell+0x54>)
 800094c:	490f      	ldr	r1, [pc, #60]	@ (800098c <task_shell+0x58>)
 800094e:	2061      	movs	r0, #97	@ 0x61
 8000950:	f001 f9ce 	bl	8001cf0 <shell_add>
	shell_add('c', calcul, "Opération entre 2 nombres");
 8000954:	4a0e      	ldr	r2, [pc, #56]	@ (8000990 <task_shell+0x5c>)
 8000956:	490f      	ldr	r1, [pc, #60]	@ (8000994 <task_shell+0x60>)
 8000958:	2063      	movs	r0, #99	@ 0x63
 800095a:	f001 f9c9 	bl	8001cf0 <shell_add>
	shell_add('t', GPIOExpander_toggle_LED, "Change l'état des LED avec les id");
 800095e:	4a0e      	ldr	r2, [pc, #56]	@ (8000998 <task_shell+0x64>)
 8000960:	490e      	ldr	r1, [pc, #56]	@ (800099c <task_shell+0x68>)
 8000962:	2074      	movs	r0, #116	@ 0x74
 8000964:	f001 f9c4 	bl	8001cf0 <shell_add>
	shell_add('s', GPIOExpander_set_LED, "Allume une LED avec son id");
 8000968:	4a0d      	ldr	r2, [pc, #52]	@ (80009a0 <task_shell+0x6c>)
 800096a:	490e      	ldr	r1, [pc, #56]	@ (80009a4 <task_shell+0x70>)
 800096c:	2073      	movs	r0, #115	@ 0x73
 800096e:	f001 f9bf 	bl	8001cf0 <shell_add>

	shell_run();	// boucle infinie
 8000972:	f001 fa69 	bl	8001e48 <shell_run>
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	0800c4a8 	.word	0x0800c4a8
 8000984:	08001941 	.word	0x08001941
 8000988:	0800c4c0 	.word	0x0800c4c0
 800098c:	08001a85 	.word	0x08001a85
 8000990:	0800c4d4 	.word	0x0800c4d4
 8000994:	08001989 	.word	0x08001989
 8000998:	0800c4f0 	.word	0x0800c4f0
 800099c:	08001af1 	.word	0x08001af1
 80009a0:	0800c514 	.word	0x0800c514
 80009a4:	08001b39 	.word	0x08001b39

080009a8 <test_chenillard>:

void test_chenillard(int delay)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	int i = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]

	for (;;)
	{
		MCP23S17_Set_LEDs(~(1 << i%8 | ((1 << i%8) << 8)));
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	2201      	movs	r2, #1
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	b21a      	sxth	r2, r3
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	f003 0307 	and.w	r3, r3, #7
 80009c8:	2101      	movs	r1, #1
 80009ca:	fa01 f303 	lsl.w	r3, r1, r3
 80009ce:	021b      	lsls	r3, r3, #8
 80009d0:	b21b      	sxth	r3, r3
 80009d2:	4313      	orrs	r3, r2
 80009d4:	b21b      	sxth	r3, r3
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	43db      	mvns	r3, r3
 80009da:	b29b      	uxth	r3, r3
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 fed3 	bl	8001788 <MCP23S17_Set_LEDs>
		i++;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	3301      	adds	r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
		vTaskDelay( delay / portTICK_PERIOD_MS );  // Délai de duree en Dms
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f009 f886 	bl	8009afc <vTaskDelay>
		MCP23S17_Set_LEDs(~(1 << i%8 | ((1 << i%8) << 8)));
 80009f0:	bf00      	nop
 80009f2:	e7df      	b.n	80009b4 <test_chenillard+0xc>

080009f4 <task_GPIO_expander>:
	}
}

void task_GPIO_expander (void * unused) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	MCP23S17_level_L(30);
	MCP23S17_level_R(50);
	 */

	// Simple test of the array of leds with an animation
	test_chenillard(100);
 80009fc:	2064      	movs	r0, #100	@ 0x64
 80009fe:	f7ff ffd3 	bl	80009a8 <test_chenillard>

	for (;;)
	{
		vTaskDelay(1);  // Délai de duree en ms
 8000a02:	2001      	movs	r0, #1
 8000a04:	f009 f87a 	bl	8009afc <vTaskDelay>
 8000a08:	e7fb      	b.n	8000a02 <task_GPIO_expander+0xe>

08000a0a <GenerateTriangleWave>:
 * @param buffer: Pointer to the buffer to hold the waveform.
 * @param length: Number of samples in the waveform.
 * @param amplitude: Peak amplitude of the waveform.
 */
void GenerateTriangleWave(uint16_t* buffer, uint16_t length, uint16_t amplitude)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	b085      	sub	sp, #20
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
 8000a12:	460b      	mov	r3, r1
 8000a14:	807b      	strh	r3, [r7, #2]
 8000a16:	4613      	mov	r3, r2
 8000a18:	803b      	strh	r3, [r7, #0]
	uint16_t step = (2 * amplitude) / length;
 8000a1a:	883b      	ldrh	r3, [r7, #0]
 8000a1c:	005a      	lsls	r2, r3, #1
 8000a1e:	887b      	ldrh	r3, [r7, #2]
 8000a20:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a24:	813b      	strh	r3, [r7, #8]
	uint16_t value = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	81fb      	strh	r3, [r7, #14]
	int8_t direction = 1;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	737b      	strb	r3, [r7, #13]

	for (uint16_t i = 0; i < length; i++) {
 8000a2e:	2300      	movs	r3, #0
 8000a30:	817b      	strh	r3, [r7, #10]
 8000a32:	e022      	b.n	8000a7a <GenerateTriangleWave+0x70>
		buffer[i] = value;
 8000a34:	897b      	ldrh	r3, [r7, #10]
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	89fa      	ldrh	r2, [r7, #14]
 8000a3e:	801a      	strh	r2, [r3, #0]
		value += step * direction;
 8000a40:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	893a      	ldrh	r2, [r7, #8]
 8000a48:	fb12 f303 	smulbb	r3, r2, r3
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	89fb      	ldrh	r3, [r7, #14]
 8000a50:	4413      	add	r3, r2
 8000a52:	81fb      	strh	r3, [r7, #14]

		if (value >= amplitude) {
 8000a54:	89fa      	ldrh	r2, [r7, #14]
 8000a56:	883b      	ldrh	r3, [r7, #0]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d304      	bcc.n	8000a66 <GenerateTriangleWave+0x5c>
			value = amplitude;
 8000a5c:	883b      	ldrh	r3, [r7, #0]
 8000a5e:	81fb      	strh	r3, [r7, #14]
			direction = -1; // Start decreasing
 8000a60:	23ff      	movs	r3, #255	@ 0xff
 8000a62:	737b      	strb	r3, [r7, #13]
 8000a64:	e006      	b.n	8000a74 <GenerateTriangleWave+0x6a>
		} else if (value <= 0) {
 8000a66:	89fb      	ldrh	r3, [r7, #14]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d103      	bne.n	8000a74 <GenerateTriangleWave+0x6a>
			value = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	81fb      	strh	r3, [r7, #14]
			direction = 1; // Start increasing
 8000a70:	2301      	movs	r3, #1
 8000a72:	737b      	strb	r3, [r7, #13]
	for (uint16_t i = 0; i < length; i++) {
 8000a74:	897b      	ldrh	r3, [r7, #10]
 8000a76:	3301      	adds	r3, #1
 8000a78:	817b      	strh	r3, [r7, #10]
 8000a7a:	897a      	ldrh	r2, [r7, #10]
 8000a7c:	887b      	ldrh	r3, [r7, #2]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d3d8      	bcc.n	8000a34 <GenerateTriangleWave+0x2a>
		}
	}
}
 8000a82:	bf00      	nop
 8000a84:	bf00      	nop
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a96:	f001 fa41 	bl	8001f1c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a9a:	f000 f88f 	bl	8000bbc <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000a9e:	f000 f8de 	bl	8000c5e <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000aa2:	f7ff fdc1 	bl	8000628 <MX_GPIO_Init>
	MX_DMA_Init();
 8000aa6:	f7ff fd5b 	bl	8000560 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000aaa:	f000 fcbb 	bl	8001424 <MX_USART2_UART_Init>
	MX_I2C2_Init();
 8000aae:	f7ff fe37 	bl	8000720 <MX_I2C2_Init>
	MX_SPI3_Init();
 8000ab2:	f000 fa5b 	bl	8000f6c <MX_SPI3_Init>
	MX_SAI2_Init();
 8000ab6:	f000 f915 	bl	8000ce4 <MX_SAI2_Init>
	/* USER CODE BEGIN 2 */
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 8000aba:	4b32      	ldr	r3, [pc, #200]	@ (8000b84 <main+0xf4>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b30      	ldr	r3, [pc, #192]	@ (8000b84 <main+0xf4>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000ac8:	601a      	str	r2, [r3, #0]

	SGTL5000_Init();
 8000aca:	f000 feeb 	bl	80018a4 <SGTL5000_Init>
	// Initialize GPIO expander
	MCP23S17_Init();
 8000ace:	f000 fdd3 	bl	8001678 <MCP23S17_Init>

	// Generate the triangular waveform
	GenerateTriangleWave(triangleWave, TRIANGLE_SAMPLES, 0x7FFF); // 16-bit amplitude (0x7FFF)
 8000ad2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000ad6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ada:	482b      	ldr	r0, [pc, #172]	@ (8000b88 <main+0xf8>)
 8000adc:	f7ff ff95 	bl	8000a0a <GenerateTriangleWave>

	// Start SAI DMA transmission
	if (HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)triangleWave, TRIANGLE_SAMPLES) != HAL_OK) {
 8000ae0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ae4:	4928      	ldr	r1, [pc, #160]	@ (8000b88 <main+0xf8>)
 8000ae6:	4827      	ldr	r0, [pc, #156]	@ (8000b84 <main+0xf4>)
 8000ae8:	f005 f96a 	bl	8005dc0 <HAL_SAI_Transmit_DMA>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d004      	beq.n	8000afc <main+0x6c>
		printf("Error: Failed to start SAI DMA transmission\r\n");
 8000af2:	4826      	ldr	r0, [pc, #152]	@ (8000b8c <main+0xfc>)
 8000af4:	f00a fbea 	bl	800b2cc <puts>
		Error_Handler();
 8000af8:	f000 f8ee 	bl	8000cd8 <Error_Handler>
	}

	HAL_SAI_Receive_DMA(&hsai_BlockA2, rxSAI, SAI_BUFFER_LENGTH);
 8000afc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b00:	4923      	ldr	r1, [pc, #140]	@ (8000b90 <main+0x100>)
 8000b02:	4820      	ldr	r0, [pc, #128]	@ (8000b84 <main+0xf4>)
 8000b04:	f005 fa0c 	bl	8005f20 <HAL_SAI_Receive_DMA>

	// Test printf
	printf("******* TP Autoradio *******\r\n");
 8000b08:	4822      	ldr	r0, [pc, #136]	@ (8000b94 <main+0x104>)
 8000b0a:	f00a fbdf 	bl	800b2cc <puts>

	// Create the task, storing the handle.
	Error_Handler_xTaskCreate(
 8000b0e:	4b22      	ldr	r3, [pc, #136]	@ (8000b98 <main+0x108>)
 8000b10:	9301      	str	r3, [sp, #4]
 8000b12:	2302      	movs	r3, #2
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000b1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b1e:	491f      	ldr	r1, [pc, #124]	@ (8000b9c <main+0x10c>)
 8000b20:	481f      	ldr	r0, [pc, #124]	@ (8000ba0 <main+0x110>)
 8000b22:	f008 fe9b 	bl	800985c <xTaskCreate>
 8000b26:	4603      	mov	r3, r0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff febf 	bl	80008ac <Error_Handler_xTaskCreate>
					(void *) 500, // 500 ms
					TASK_MCP23S17_PRIORITY, // Priority at which the task is created.
					&h_task_GPIOExpander)); // Used to pass out the created task's handle.

	// Turn on LED2 (Green)
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b2e:	2120      	movs	r1, #32
 8000b30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b34:	f001 ff4c 	bl	80029d0 <HAL_GPIO_TogglePin>

	// Create the task, storing the handle.
	Error_Handler_xTaskCreate(
 8000b38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba4 <main+0x114>)
 8000b3a:	9301      	str	r3, [sp, #4]
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	23c8      	movs	r3, #200	@ 0xc8
 8000b42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b46:	4918      	ldr	r1, [pc, #96]	@ (8000ba8 <main+0x118>)
 8000b48:	4818      	ldr	r0, [pc, #96]	@ (8000bac <main+0x11c>)
 8000b4a:	f008 fe87 	bl	800985c <xTaskCreate>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff feab 	bl	80008ac <Error_Handler_xTaskCreate>
					STACK_DEPTH, // Stack size in words, not bytes.
					(void *) DELAY_LED_TOGGLE, // Parameter passed into the task.
					1,// Priority at which the task is created.
					&h_task_LED)); // Used to pass out the created task's handle.
	// Shell task
	Error_Handler_xTaskCreate(
 8000b56:	4b16      	ldr	r3, [pc, #88]	@ (8000bb0 <main+0x120>)
 8000b58:	9301      	str	r3, [sp, #4]
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b64:	4913      	ldr	r1, [pc, #76]	@ (8000bb4 <main+0x124>)
 8000b66:	4814      	ldr	r0, [pc, #80]	@ (8000bb8 <main+0x128>)
 8000b68:	f008 fe78 	bl	800985c <xTaskCreate>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fe9c 	bl	80008ac <Error_Handler_xTaskCreate>
					NULL,
					TASK_SHELL_PRIORITY,
					&h_task_shell));

	// OS Start
	vTaskStartScheduler();
 8000b74:	f008 fff8 	bl	8009b68 <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 8000b78:	f7ff fd32 	bl	80005e0 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8000b7c:	f008 fa0e 	bl	8008f9c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <main+0xf0>
 8000b84:	20000994 	.word	0x20000994
 8000b88:	20000794 	.word	0x20000794
 8000b8c:	0800c530 	.word	0x0800c530
 8000b90:	20000394 	.word	0x20000394
 8000b94:	0800c560 	.word	0x0800c560
 8000b98:	20000390 	.word	0x20000390
 8000b9c:	0800c580 	.word	0x0800c580
 8000ba0:	080009f5 	.word	0x080009f5
 8000ba4:	20000388 	.word	0x20000388
 8000ba8:	0800c590 	.word	0x0800c590
 8000bac:	08000911 	.word	0x08000911
 8000bb0:	2000038c 	.word	0x2000038c
 8000bb4:	0800c598 	.word	0x0800c598
 8000bb8:	08000935 	.word	0x08000935

08000bbc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b096      	sub	sp, #88	@ 0x58
 8000bc0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	2244      	movs	r2, #68	@ 0x44
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f00a fc92 	bl	800b4f4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bde:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000be2:	f002 fd41 	bl	8003668 <HAL_PWREx_ControlVoltageScaling>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000bec:	f000 f874 	bl	8000cd8 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bf8:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bfa:	2310      	movs	r3, #16
 8000bfc:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c02:	2302      	movs	r3, #2
 8000c04:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000c06:	2301      	movs	r3, #1
 8000c08:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000c0a:	230a      	movs	r3, #10
 8000c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c0e:	2307      	movs	r3, #7
 8000c10:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c12:	2302      	movs	r3, #2
 8000c14:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c16:	2302      	movs	r3, #2
 8000c18:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f002 fd78 	bl	8003714 <HAL_RCC_OscConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SystemClock_Config+0x72>
	{
		Error_Handler();
 8000c2a:	f000 f855 	bl	8000cd8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2e:	230f      	movs	r3, #15
 8000c30:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c32:	2303      	movs	r3, #3
 8000c34:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c42:	463b      	mov	r3, r7
 8000c44:	2104      	movs	r1, #4
 8000c46:	4618      	mov	r0, r3
 8000c48:	f003 f940 	bl	8003ecc <HAL_RCC_ClockConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000c52:	f000 f841 	bl	8000cd8 <Error_Handler>
	}
}
 8000c56:	bf00      	nop
 8000c58:	3758      	adds	r7, #88	@ 0x58
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b0a2      	sub	sp, #136	@ 0x88
 8000c62:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c64:	463b      	mov	r3, r7
 8000c66:	2288      	movs	r2, #136	@ 0x88
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f00a fc42 	bl	800b4f4 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000c70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c74:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	66bb      	str	r3, [r7, #104]	@ 0x68
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 8000c82:	230d      	movs	r3, #13
 8000c84:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8000c86:	2311      	movs	r3, #17
 8000c88:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000c92:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c96:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c98:	463b      	mov	r3, r7
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f003 fb6c 	bl	8004378 <HAL_RCCEx_PeriphCLKConfig>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <PeriphCommonClock_Config+0x4c>
	{
		Error_Handler();
 8000ca6:	f000 f817 	bl	8000cd8 <Error_Handler>
	}
}
 8000caa:	bf00      	nop
 8000cac:	3788      	adds	r7, #136	@ 0x88
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a04      	ldr	r2, [pc, #16]	@ (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d101      	bne.n	8000cca <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000cc6:	f001 f949 	bl	8001f5c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40001000 	.word	0x40001000

08000cd8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <Error_Handler+0x8>

08000ce4 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8000ce8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d94 <MX_SAI2_Init+0xb0>)
 8000cea:	4a2b      	ldr	r2, [pc, #172]	@ (8000d98 <MX_SAI2_Init+0xb4>)
 8000cec:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000cee:	4b29      	ldr	r3, [pc, #164]	@ (8000d94 <MX_SAI2_Init+0xb0>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000cf4:	4b27      	ldr	r3, [pc, #156]	@ (8000d94 <MX_SAI2_Init+0xb0>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000cfa:	4b26      	ldr	r3, [pc, #152]	@ (8000d94 <MX_SAI2_Init+0xb0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d00:	4b24      	ldr	r3, [pc, #144]	@ (8000d94 <MX_SAI2_Init+0xb0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d06:	4b23      	ldr	r3, [pc, #140]	@ (8000d94 <MX_SAI2_Init+0xb0>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000d0c:	4b21      	ldr	r3, [pc, #132]	@ (8000d94 <MX_SAI2_Init+0xb0>)
 8000d0e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000d12:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d14:	4b1f      	ldr	r3, [pc, #124]	@ (8000d94 <MX_SAI2_Init+0xb0>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d94 <MX_SAI2_Init+0xb0>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d20:	4b1c      	ldr	r3, [pc, #112]	@ (8000d94 <MX_SAI2_Init+0xb0>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d26:	4b1b      	ldr	r3, [pc, #108]	@ (8000d94 <MX_SAI2_Init+0xb0>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	4818      	ldr	r0, [pc, #96]	@ (8000d94 <MX_SAI2_Init+0xb0>)
 8000d34:	f004 fe3a 	bl	80059ac <HAL_SAI_InitProtocol>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
 8000d3e:	f7ff ffcb 	bl	8000cd8 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000d42:	4b16      	ldr	r3, [pc, #88]	@ (8000d9c <MX_SAI2_Init+0xb8>)
 8000d44:	4a16      	ldr	r2, [pc, #88]	@ (8000da0 <MX_SAI2_Init+0xbc>)
 8000d46:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000d48:	4b14      	ldr	r3, [pc, #80]	@ (8000d9c <MX_SAI2_Init+0xb8>)
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000d4e:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <MX_SAI2_Init+0xb8>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d54:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <MX_SAI2_Init+0xb8>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <MX_SAI2_Init+0xb8>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d60:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <MX_SAI2_Init+0xb8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d66:	4b0d      	ldr	r3, [pc, #52]	@ (8000d9c <MX_SAI2_Init+0xb8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <MX_SAI2_Init+0xb8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d72:	4b0a      	ldr	r3, [pc, #40]	@ (8000d9c <MX_SAI2_Init+0xb8>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000d78:	2302      	movs	r3, #2
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4807      	ldr	r0, [pc, #28]	@ (8000d9c <MX_SAI2_Init+0xb8>)
 8000d80:	f004 fe14 	bl	80059ac <HAL_SAI_InitProtocol>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 8000d8a:	f7ff ffa5 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000994 	.word	0x20000994
 8000d98:	40015804 	.word	0x40015804
 8000d9c:	20000a18 	.word	0x20000a18
 8000da0:	40015824 	.word	0x40015824

08000da4 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	@ 0x28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a64      	ldr	r2, [pc, #400]	@ (8000f44 <HAL_SAI_MspInit+0x1a0>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d15e      	bne.n	8000e74 <HAL_SAI_MspInit+0xd0>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8000db6:	4b64      	ldr	r3, [pc, #400]	@ (8000f48 <HAL_SAI_MspInit+0x1a4>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d113      	bne.n	8000de6 <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000dbe:	4b63      	ldr	r3, [pc, #396]	@ (8000f4c <HAL_SAI_MspInit+0x1a8>)
 8000dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dc2:	4a62      	ldr	r2, [pc, #392]	@ (8000f4c <HAL_SAI_MspInit+0x1a8>)
 8000dc4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000dc8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dca:	4b60      	ldr	r3, [pc, #384]	@ (8000f4c <HAL_SAI_MspInit+0x1a8>)
 8000dcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2105      	movs	r1, #5
 8000dda:	204b      	movs	r0, #75	@ 0x4b
 8000ddc:	f001 f996 	bl	800210c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000de0:	204b      	movs	r0, #75	@ 0x4b
 8000de2:	f001 f9af 	bl	8002144 <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 8000de6:	4b58      	ldr	r3, [pc, #352]	@ (8000f48 <HAL_SAI_MspInit+0x1a4>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	3301      	adds	r3, #1
 8000dec:	4a56      	ldr	r2, [pc, #344]	@ (8000f48 <HAL_SAI_MspInit+0x1a4>)
 8000dee:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000df0:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000e02:	230d      	movs	r3, #13
 8000e04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4850      	ldr	r0, [pc, #320]	@ (8000f50 <HAL_SAI_MspInit+0x1ac>)
 8000e0e:	f001 fc1d 	bl	800264c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000e12:	4b50      	ldr	r3, [pc, #320]	@ (8000f54 <HAL_SAI_MspInit+0x1b0>)
 8000e14:	4a50      	ldr	r2, [pc, #320]	@ (8000f58 <HAL_SAI_MspInit+0x1b4>)
 8000e16:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000e18:	4b4e      	ldr	r3, [pc, #312]	@ (8000f54 <HAL_SAI_MspInit+0x1b0>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e1e:	4b4d      	ldr	r3, [pc, #308]	@ (8000f54 <HAL_SAI_MspInit+0x1b0>)
 8000e20:	2210      	movs	r2, #16
 8000e22:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e24:	4b4b      	ldr	r3, [pc, #300]	@ (8000f54 <HAL_SAI_MspInit+0x1b0>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000e2a:	4b4a      	ldr	r3, [pc, #296]	@ (8000f54 <HAL_SAI_MspInit+0x1b0>)
 8000e2c:	2280      	movs	r2, #128	@ 0x80
 8000e2e:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e30:	4b48      	ldr	r3, [pc, #288]	@ (8000f54 <HAL_SAI_MspInit+0x1b0>)
 8000e32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e36:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e38:	4b46      	ldr	r3, [pc, #280]	@ (8000f54 <HAL_SAI_MspInit+0x1b0>)
 8000e3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e3e:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000e40:	4b44      	ldr	r3, [pc, #272]	@ (8000f54 <HAL_SAI_MspInit+0x1b0>)
 8000e42:	2220      	movs	r2, #32
 8000e44:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8000e46:	4b43      	ldr	r3, [pc, #268]	@ (8000f54 <HAL_SAI_MspInit+0x1b0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000e4c:	4841      	ldr	r0, [pc, #260]	@ (8000f54 <HAL_SAI_MspInit+0x1b0>)
 8000e4e:	f001 f987 	bl	8002160 <HAL_DMA_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8000e58:	f7ff ff3e 	bl	8000cd8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a3d      	ldr	r2, [pc, #244]	@ (8000f54 <HAL_SAI_MspInit+0x1b0>)
 8000e60:	671a      	str	r2, [r3, #112]	@ 0x70
 8000e62:	4a3c      	ldr	r2, [pc, #240]	@ (8000f54 <HAL_SAI_MspInit+0x1b0>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a3a      	ldr	r2, [pc, #232]	@ (8000f54 <HAL_SAI_MspInit+0x1b0>)
 8000e6c:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000e6e:	4a39      	ldr	r2, [pc, #228]	@ (8000f54 <HAL_SAI_MspInit+0x1b0>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a38      	ldr	r2, [pc, #224]	@ (8000f5c <HAL_SAI_MspInit+0x1b8>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d15e      	bne.n	8000f3c <HAL_SAI_MspInit+0x198>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8000e7e:	4b32      	ldr	r3, [pc, #200]	@ (8000f48 <HAL_SAI_MspInit+0x1a4>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d113      	bne.n	8000eae <HAL_SAI_MspInit+0x10a>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000e86:	4b31      	ldr	r3, [pc, #196]	@ (8000f4c <HAL_SAI_MspInit+0x1a8>)
 8000e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e8a:	4a30      	ldr	r2, [pc, #192]	@ (8000f4c <HAL_SAI_MspInit+0x1a8>)
 8000e8c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e90:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e92:	4b2e      	ldr	r3, [pc, #184]	@ (8000f4c <HAL_SAI_MspInit+0x1a8>)
 8000e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2105      	movs	r1, #5
 8000ea2:	204b      	movs	r0, #75	@ 0x4b
 8000ea4:	f001 f932 	bl	800210c <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000ea8:	204b      	movs	r0, #75	@ 0x4b
 8000eaa:	f001 f94b 	bl	8002144 <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8000eae:	4b26      	ldr	r3, [pc, #152]	@ (8000f48 <HAL_SAI_MspInit+0x1a4>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	4a24      	ldr	r2, [pc, #144]	@ (8000f48 <HAL_SAI_MspInit+0x1a4>)
 8000eb6:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000eb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000eca:	230d      	movs	r3, #13
 8000ecc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4822      	ldr	r0, [pc, #136]	@ (8000f60 <HAL_SAI_MspInit+0x1bc>)
 8000ed6:	f001 fbb9 	bl	800264c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 8000eda:	4b22      	ldr	r3, [pc, #136]	@ (8000f64 <HAL_SAI_MspInit+0x1c0>)
 8000edc:	4a22      	ldr	r2, [pc, #136]	@ (8000f68 <HAL_SAI_MspInit+0x1c4>)
 8000ede:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 8000ee0:	4b20      	ldr	r3, [pc, #128]	@ (8000f64 <HAL_SAI_MspInit+0x1c0>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ee6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f64 <HAL_SAI_MspInit+0x1c0>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eec:	4b1d      	ldr	r3, [pc, #116]	@ (8000f64 <HAL_SAI_MspInit+0x1c0>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f64 <HAL_SAI_MspInit+0x1c0>)
 8000ef4:	2280      	movs	r2, #128	@ 0x80
 8000ef6:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f64 <HAL_SAI_MspInit+0x1c0>)
 8000efa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000efe:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f00:	4b18      	ldr	r3, [pc, #96]	@ (8000f64 <HAL_SAI_MspInit+0x1c0>)
 8000f02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f06:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8000f08:	4b16      	ldr	r3, [pc, #88]	@ (8000f64 <HAL_SAI_MspInit+0x1c0>)
 8000f0a:	2220      	movs	r2, #32
 8000f0c:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8000f0e:	4b15      	ldr	r3, [pc, #84]	@ (8000f64 <HAL_SAI_MspInit+0x1c0>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8000f14:	4813      	ldr	r0, [pc, #76]	@ (8000f64 <HAL_SAI_MspInit+0x1c0>)
 8000f16:	f001 f923 	bl	8002160 <HAL_DMA_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 8000f20:	f7ff feda 	bl	8000cd8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a0f      	ldr	r2, [pc, #60]	@ (8000f64 <HAL_SAI_MspInit+0x1c0>)
 8000f28:	671a      	str	r2, [r3, #112]	@ 0x70
 8000f2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f64 <HAL_SAI_MspInit+0x1c0>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a0c      	ldr	r2, [pc, #48]	@ (8000f64 <HAL_SAI_MspInit+0x1c0>)
 8000f34:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000f36:	4a0b      	ldr	r2, [pc, #44]	@ (8000f64 <HAL_SAI_MspInit+0x1c0>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 8000f3c:	bf00      	nop
 8000f3e:	3728      	adds	r7, #40	@ 0x28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40015804 	.word	0x40015804
 8000f48:	20000b2c 	.word	0x20000b2c
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	48000400 	.word	0x48000400
 8000f54:	20000a9c 	.word	0x20000a9c
 8000f58:	4002006c 	.word	0x4002006c
 8000f5c:	40015824 	.word	0x40015824
 8000f60:	48000800 	.word	0x48000800
 8000f64:	20000ae4 	.word	0x20000ae4
 8000f68:	40020080 	.word	0x40020080

08000f6c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000f70:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe0 <MX_SPI3_Init+0x74>)
 8000f72:	4a1c      	ldr	r2, [pc, #112]	@ (8000fe4 <MX_SPI3_Init+0x78>)
 8000f74:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f76:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe0 <MX_SPI3_Init+0x74>)
 8000f78:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f7c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f7e:	4b18      	ldr	r3, [pc, #96]	@ (8000fe0 <MX_SPI3_Init+0x74>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f84:	4b16      	ldr	r3, [pc, #88]	@ (8000fe0 <MX_SPI3_Init+0x74>)
 8000f86:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000f8a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f8c:	4b14      	ldr	r3, [pc, #80]	@ (8000fe0 <MX_SPI3_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f92:	4b13      	ldr	r3, [pc, #76]	@ (8000fe0 <MX_SPI3_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f98:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <MX_SPI3_Init+0x74>)
 8000f9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f9e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <MX_SPI3_Init+0x74>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <MX_SPI3_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <MX_SPI3_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe0 <MX_SPI3_Init+0x74>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	@ (8000fe0 <MX_SPI3_Init+0x74>)
 8000fba:	2207      	movs	r2, #7
 8000fbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <MX_SPI3_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <MX_SPI3_Init+0x74>)
 8000fc6:	2208      	movs	r2, #8
 8000fc8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000fca:	4805      	ldr	r0, [pc, #20]	@ (8000fe0 <MX_SPI3_Init+0x74>)
 8000fcc:	f005 fc8c 	bl	80068e8 <HAL_SPI_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000fd6:	f7ff fe7f 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000b30 	.word	0x20000b30
 8000fe4:	40003c00 	.word	0x40003c00

08000fe8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	@ 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a29      	ldr	r2, [pc, #164]	@ (80010ac <HAL_SPI_MspInit+0xc4>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d14c      	bne.n	80010a4 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800100a:	4b29      	ldr	r3, [pc, #164]	@ (80010b0 <HAL_SPI_MspInit+0xc8>)
 800100c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800100e:	4a28      	ldr	r2, [pc, #160]	@ (80010b0 <HAL_SPI_MspInit+0xc8>)
 8001010:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001014:	6593      	str	r3, [r2, #88]	@ 0x58
 8001016:	4b26      	ldr	r3, [pc, #152]	@ (80010b0 <HAL_SPI_MspInit+0xc8>)
 8001018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800101a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001022:	4b23      	ldr	r3, [pc, #140]	@ (80010b0 <HAL_SPI_MspInit+0xc8>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001026:	4a22      	ldr	r2, [pc, #136]	@ (80010b0 <HAL_SPI_MspInit+0xc8>)
 8001028:	f043 0304 	orr.w	r3, r3, #4
 800102c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800102e:	4b20      	ldr	r3, [pc, #128]	@ (80010b0 <HAL_SPI_MspInit+0xc8>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001032:	f003 0304 	and.w	r3, r3, #4
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103a:	4b1d      	ldr	r3, [pc, #116]	@ (80010b0 <HAL_SPI_MspInit+0xc8>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103e:	4a1c      	ldr	r2, [pc, #112]	@ (80010b0 <HAL_SPI_MspInit+0xc8>)
 8001040:	f043 0302 	orr.w	r3, r3, #2
 8001044:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001046:	4b1a      	ldr	r3, [pc, #104]	@ (80010b0 <HAL_SPI_MspInit+0xc8>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = VU_SCK_Pin|VU_MISO_Pin;
 8001052:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001064:	2306      	movs	r3, #6
 8001066:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	4811      	ldr	r0, [pc, #68]	@ (80010b4 <HAL_SPI_MspInit+0xcc>)
 8001070:	f001 faec 	bl	800264c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VU_MOSI_Pin;
 8001074:	2320      	movs	r3, #32
 8001076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	2302      	movs	r3, #2
 800107a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001080:	2303      	movs	r3, #3
 8001082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001084:	2306      	movs	r3, #6
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(VU_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4619      	mov	r1, r3
 800108e:	480a      	ldr	r0, [pc, #40]	@ (80010b8 <HAL_SPI_MspInit+0xd0>)
 8001090:	f001 fadc 	bl	800264c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8001094:	2200      	movs	r2, #0
 8001096:	2105      	movs	r1, #5
 8001098:	2033      	movs	r0, #51	@ 0x33
 800109a:	f001 f837 	bl	800210c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800109e:	2033      	movs	r0, #51	@ 0x33
 80010a0:	f001 f850 	bl	8002144 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80010a4:	bf00      	nop
 80010a6:	3728      	adds	r7, #40	@ 0x28
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40003c00 	.word	0x40003c00
 80010b0:	40021000 	.word	0x40021000
 80010b4:	48000800 	.word	0x48000800
 80010b8:	48000400 	.word	0x48000400

080010bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	4b11      	ldr	r3, [pc, #68]	@ (8001108 <HAL_MspInit+0x4c>)
 80010c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010c6:	4a10      	ldr	r2, [pc, #64]	@ (8001108 <HAL_MspInit+0x4c>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80010ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001108 <HAL_MspInit+0x4c>)
 80010d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <HAL_MspInit+0x4c>)
 80010dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010de:	4a0a      	ldr	r2, [pc, #40]	@ (8001108 <HAL_MspInit+0x4c>)
 80010e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80010e6:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <HAL_MspInit+0x4c>)
 80010e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	210f      	movs	r1, #15
 80010f6:	f06f 0001 	mvn.w	r0, #1
 80010fa:	f001 f807 	bl	800210c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40021000 	.word	0x40021000

0800110c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08e      	sub	sp, #56	@ 0x38
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001114:	2300      	movs	r3, #0
 8001116:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800111a:	4b34      	ldr	r3, [pc, #208]	@ (80011ec <HAL_InitTick+0xe0>)
 800111c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800111e:	4a33      	ldr	r2, [pc, #204]	@ (80011ec <HAL_InitTick+0xe0>)
 8001120:	f043 0310 	orr.w	r3, r3, #16
 8001124:	6593      	str	r3, [r2, #88]	@ 0x58
 8001126:	4b31      	ldr	r3, [pc, #196]	@ (80011ec <HAL_InitTick+0xe0>)
 8001128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001132:	f107 0210 	add.w	r2, r7, #16
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f003 f889 	bl	8004254 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001142:	6a3b      	ldr	r3, [r7, #32]
 8001144:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001148:	2b00      	cmp	r3, #0
 800114a:	d103      	bne.n	8001154 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800114c:	f003 f856 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 8001150:	6378      	str	r0, [r7, #52]	@ 0x34
 8001152:	e004      	b.n	800115e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001154:	f003 f852 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 8001158:	4603      	mov	r3, r0
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800115e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001160:	4a23      	ldr	r2, [pc, #140]	@ (80011f0 <HAL_InitTick+0xe4>)
 8001162:	fba2 2303 	umull	r2, r3, r2, r3
 8001166:	0c9b      	lsrs	r3, r3, #18
 8001168:	3b01      	subs	r3, #1
 800116a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800116c:	4b21      	ldr	r3, [pc, #132]	@ (80011f4 <HAL_InitTick+0xe8>)
 800116e:	4a22      	ldr	r2, [pc, #136]	@ (80011f8 <HAL_InitTick+0xec>)
 8001170:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001172:	4b20      	ldr	r3, [pc, #128]	@ (80011f4 <HAL_InitTick+0xe8>)
 8001174:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001178:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800117a:	4a1e      	ldr	r2, [pc, #120]	@ (80011f4 <HAL_InitTick+0xe8>)
 800117c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800117e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001180:	4b1c      	ldr	r3, [pc, #112]	@ (80011f4 <HAL_InitTick+0xe8>)
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001186:	4b1b      	ldr	r3, [pc, #108]	@ (80011f4 <HAL_InitTick+0xe8>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118c:	4b19      	ldr	r3, [pc, #100]	@ (80011f4 <HAL_InitTick+0xe8>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001192:	4818      	ldr	r0, [pc, #96]	@ (80011f4 <HAL_InitTick+0xe8>)
 8001194:	f006 f83a 	bl	800720c <HAL_TIM_Base_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800119e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d11b      	bne.n	80011de <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80011a6:	4813      	ldr	r0, [pc, #76]	@ (80011f4 <HAL_InitTick+0xe8>)
 80011a8:	f006 f892 	bl	80072d0 <HAL_TIM_Base_Start_IT>
 80011ac:	4603      	mov	r3, r0
 80011ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80011b2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d111      	bne.n	80011de <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011ba:	2036      	movs	r0, #54	@ 0x36
 80011bc:	f000 ffc2 	bl	8002144 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b0f      	cmp	r3, #15
 80011c4:	d808      	bhi.n	80011d8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80011c6:	2200      	movs	r2, #0
 80011c8:	6879      	ldr	r1, [r7, #4]
 80011ca:	2036      	movs	r0, #54	@ 0x36
 80011cc:	f000 ff9e 	bl	800210c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011d0:	4a0a      	ldr	r2, [pc, #40]	@ (80011fc <HAL_InitTick+0xf0>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	e002      	b.n	80011de <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80011de:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3738      	adds	r7, #56	@ 0x38
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000
 80011f0:	431bde83 	.word	0x431bde83
 80011f4:	20000b94 	.word	0x20000b94
 80011f8:	40001000 	.word	0x40001000
 80011fc:	2000000c 	.word	0x2000000c

08001200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <NMI_Handler+0x4>

08001208 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <HardFault_Handler+0x4>

08001210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <MemManage_Handler+0x4>

08001218 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <BusFault_Handler+0x4>

08001220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <UsageFault_Handler+0x4>

08001228 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 800123c:	4802      	ldr	r0, [pc, #8]	@ (8001248 <DMA1_Channel6_IRQHandler+0x10>)
 800123e:	f001 f926 	bl	800248e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000a9c 	.word	0x20000a9c

0800124c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8001250:	4802      	ldr	r0, [pc, #8]	@ (800125c <DMA1_Channel7_IRQHandler+0x10>)
 8001252:	f001 f91c 	bl	800248e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000ae4 	.word	0x20000ae4

08001260 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001264:	4802      	ldr	r0, [pc, #8]	@ (8001270 <USART2_IRQHandler+0x10>)
 8001266:	f006 fbbb 	bl	80079e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000be4 	.word	0x20000be4

08001274 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001278:	4802      	ldr	r0, [pc, #8]	@ (8001284 <SPI3_IRQHandler+0x10>)
 800127a:	f005 fd4f 	bl	8006d1c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000b30 	.word	0x20000b30

08001288 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800128c:	4802      	ldr	r0, [pc, #8]	@ (8001298 <TIM6_DAC_IRQHandler+0x10>)
 800128e:	f006 f88f 	bl	80073b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000b94 	.word	0x20000b94

0800129c <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 80012a0:	4803      	ldr	r0, [pc, #12]	@ (80012b0 <SAI2_IRQHandler+0x14>)
 80012a2:	f004 fecb 	bl	800603c <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 80012a6:	4803      	ldr	r0, [pc, #12]	@ (80012b4 <SAI2_IRQHandler+0x18>)
 80012a8:	f004 fec8 	bl	800603c <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000994 	.word	0x20000994
 80012b4:	20000a18 	.word	0x20000a18

080012b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	e00a      	b.n	80012e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012ca:	f3af 8000 	nop.w
 80012ce:	4601      	mov	r1, r0
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	1c5a      	adds	r2, r3, #1
 80012d4:	60ba      	str	r2, [r7, #8]
 80012d6:	b2ca      	uxtb	r2, r1
 80012d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	3301      	adds	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	dbf0      	blt.n	80012ca <_read+0x12>
  }

  return len;
 80012e8:	687b      	ldr	r3, [r7, #4]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	60f8      	str	r0, [r7, #12]
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	e009      	b.n	8001318 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	1c5a      	adds	r2, r3, #1
 8001308:	60ba      	str	r2, [r7, #8]
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fabb 	bl	8000888 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	3301      	adds	r3, #1
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	429a      	cmp	r2, r3
 800131e:	dbf1      	blt.n	8001304 <_write+0x12>
  }
  return len;
 8001320:	687b      	ldr	r3, [r7, #4]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <_close>:

int _close(int file)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001332:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001352:	605a      	str	r2, [r3, #4]
  return 0;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <_isatty>:

int _isatty(int file)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800139c:	4a14      	ldr	r2, [pc, #80]	@ (80013f0 <_sbrk+0x5c>)
 800139e:	4b15      	ldr	r3, [pc, #84]	@ (80013f4 <_sbrk+0x60>)
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a8:	4b13      	ldr	r3, [pc, #76]	@ (80013f8 <_sbrk+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d102      	bne.n	80013b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b0:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <_sbrk+0x64>)
 80013b2:	4a12      	ldr	r2, [pc, #72]	@ (80013fc <_sbrk+0x68>)
 80013b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013b6:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <_sbrk+0x64>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d207      	bcs.n	80013d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c4:	f00a f93a 	bl	800b63c <__errno>
 80013c8:	4603      	mov	r3, r0
 80013ca:	220c      	movs	r2, #12
 80013cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013d2:	e009      	b.n	80013e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d4:	4b08      	ldr	r3, [pc, #32]	@ (80013f8 <_sbrk+0x64>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013da:	4b07      	ldr	r3, [pc, #28]	@ (80013f8 <_sbrk+0x64>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	4a05      	ldr	r2, [pc, #20]	@ (80013f8 <_sbrk+0x64>)
 80013e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013e6:	68fb      	ldr	r3, [r7, #12]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20018000 	.word	0x20018000
 80013f4:	00000400 	.word	0x00000400
 80013f8:	20000be0 	.word	0x20000be0
 80013fc:	20006098 	.word	0x20006098

08001400 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001404:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <SystemInit+0x20>)
 8001406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800140a:	4a05      	ldr	r2, [pc, #20]	@ (8001420 <SystemInit+0x20>)
 800140c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001410:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001428:	4b14      	ldr	r3, [pc, #80]	@ (800147c <MX_USART2_UART_Init+0x58>)
 800142a:	4a15      	ldr	r2, [pc, #84]	@ (8001480 <MX_USART2_UART_Init+0x5c>)
 800142c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800142e:	4b13      	ldr	r3, [pc, #76]	@ (800147c <MX_USART2_UART_Init+0x58>)
 8001430:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001434:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001436:	4b11      	ldr	r3, [pc, #68]	@ (800147c <MX_USART2_UART_Init+0x58>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800143c:	4b0f      	ldr	r3, [pc, #60]	@ (800147c <MX_USART2_UART_Init+0x58>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001442:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <MX_USART2_UART_Init+0x58>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001448:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <MX_USART2_UART_Init+0x58>)
 800144a:	220c      	movs	r2, #12
 800144c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144e:	4b0b      	ldr	r3, [pc, #44]	@ (800147c <MX_USART2_UART_Init+0x58>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001454:	4b09      	ldr	r3, [pc, #36]	@ (800147c <MX_USART2_UART_Init+0x58>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800145a:	4b08      	ldr	r3, [pc, #32]	@ (800147c <MX_USART2_UART_Init+0x58>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001460:	4b06      	ldr	r3, [pc, #24]	@ (800147c <MX_USART2_UART_Init+0x58>)
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001466:	4805      	ldr	r0, [pc, #20]	@ (800147c <MX_USART2_UART_Init+0x58>)
 8001468:	f006 f996 	bl	8007798 <HAL_UART_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001472:	f7ff fc31 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000be4 	.word	0x20000be4
 8001480:	40004400 	.word	0x40004400

08001484 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b0ac      	sub	sp, #176	@ 0xb0
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2288      	movs	r2, #136	@ 0x88
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f00a f825 	bl	800b4f4 <memset>
  if(uartHandle->Instance==USART2)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a25      	ldr	r2, [pc, #148]	@ (8001544 <HAL_UART_MspInit+0xc0>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d143      	bne.n	800153c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014b4:	2302      	movs	r3, #2
 80014b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4618      	mov	r0, r3
 80014c2:	f002 ff59 	bl	8004378 <HAL_RCCEx_PeriphCLKConfig>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014cc:	f7ff fc04 	bl	8000cd8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001548 <HAL_UART_MspInit+0xc4>)
 80014d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001548 <HAL_UART_MspInit+0xc4>)
 80014d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014da:	6593      	str	r3, [r2, #88]	@ 0x58
 80014dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <HAL_UART_MspInit+0xc4>)
 80014de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e8:	4b17      	ldr	r3, [pc, #92]	@ (8001548 <HAL_UART_MspInit+0xc4>)
 80014ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ec:	4a16      	ldr	r2, [pc, #88]	@ (8001548 <HAL_UART_MspInit+0xc4>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f4:	4b14      	ldr	r3, [pc, #80]	@ (8001548 <HAL_UART_MspInit+0xc4>)
 80014f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001500:	230c      	movs	r3, #12
 8001502:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001512:	2303      	movs	r3, #3
 8001514:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001518:	2307      	movs	r3, #7
 800151a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001522:	4619      	mov	r1, r3
 8001524:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001528:	f001 f890 	bl	800264c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800152c:	2200      	movs	r2, #0
 800152e:	2105      	movs	r1, #5
 8001530:	2026      	movs	r0, #38	@ 0x26
 8001532:	f000 fdeb 	bl	800210c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001536:	2026      	movs	r0, #38	@ 0x26
 8001538:	f000 fe04 	bl	8002144 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800153c:	bf00      	nop
 800153e:	37b0      	adds	r7, #176	@ 0xb0
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40004400 	.word	0x40004400
 8001548:	40021000 	.word	0x40021000

0800154c <Reset_Handler>:
 800154c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001584 <LoopForever+0x2>
 8001550:	f7ff ff56 	bl	8001400 <SystemInit>
 8001554:	480c      	ldr	r0, [pc, #48]	@ (8001588 <LoopForever+0x6>)
 8001556:	490d      	ldr	r1, [pc, #52]	@ (800158c <LoopForever+0xa>)
 8001558:	4a0d      	ldr	r2, [pc, #52]	@ (8001590 <LoopForever+0xe>)
 800155a:	2300      	movs	r3, #0
 800155c:	e002      	b.n	8001564 <LoopCopyDataInit>

0800155e <CopyDataInit>:
 800155e:	58d4      	ldr	r4, [r2, r3]
 8001560:	50c4      	str	r4, [r0, r3]
 8001562:	3304      	adds	r3, #4

08001564 <LoopCopyDataInit>:
 8001564:	18c4      	adds	r4, r0, r3
 8001566:	428c      	cmp	r4, r1
 8001568:	d3f9      	bcc.n	800155e <CopyDataInit>
 800156a:	4a0a      	ldr	r2, [pc, #40]	@ (8001594 <LoopForever+0x12>)
 800156c:	4c0a      	ldr	r4, [pc, #40]	@ (8001598 <LoopForever+0x16>)
 800156e:	2300      	movs	r3, #0
 8001570:	e001      	b.n	8001576 <LoopFillZerobss>

08001572 <FillZerobss>:
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	3204      	adds	r2, #4

08001576 <LoopFillZerobss>:
 8001576:	42a2      	cmp	r2, r4
 8001578:	d3fb      	bcc.n	8001572 <FillZerobss>
 800157a:	f00a f865 	bl	800b648 <__libc_init_array>
 800157e:	f7ff fa87 	bl	8000a90 <main>

08001582 <LoopForever>:
 8001582:	e7fe      	b.n	8001582 <LoopForever>
 8001584:	20018000 	.word	0x20018000
 8001588:	20000000 	.word	0x20000000
 800158c:	20000074 	.word	0x20000074
 8001590:	0800c97c 	.word	0x0800c97c
 8001594:	20000074 	.word	0x20000074
 8001598:	20006098 	.word	0x20006098

0800159c <ADC1_2_IRQHandler>:
 800159c:	e7fe      	b.n	800159c <ADC1_2_IRQHandler>
	...

080015a0 <MCP23S17_WriteRegister>:
h_MCP23S17_t hMCP23S17;


// Function to write to a register of MCP23S17 with error handling
void MCP23S17_WriteRegister(uint8_t reg, uint8_t data)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	460a      	mov	r2, r1
 80015aa:	71fb      	strb	r3, [r7, #7]
 80015ac:	4613      	mov	r3, r2
 80015ae:	71bb      	strb	r3, [r7, #6]
	uint8_t control_byte = MCP23S17_CONTROL_BYTE(MCP23S17_CONTROL_ADDR, VU_WRITE); // Address = 0b000
 80015b0:	2340      	movs	r3, #64	@ 0x40
 80015b2:	73bb      	strb	r3, [r7, #14]

	uint8_t buffer[2] = {reg, data};
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	733b      	strb	r3, [r7, #12]
 80015b8:	79bb      	ldrb	r3, [r7, #6]
 80015ba:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status;

	// Assert chip select
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 80015bc:	2200      	movs	r2, #0
 80015be:	2180      	movs	r1, #128	@ 0x80
 80015c0:	4820      	ldr	r0, [pc, #128]	@ (8001644 <MCP23S17_WriteRegister+0xa4>)
 80015c2:	f001 f9ed 	bl	80029a0 <HAL_GPIO_WritePin>

	// Transmit control byte
	status = HAL_SPI_Transmit(hMCP23S17.hspi, &control_byte, 1, HAL_MAX_DELAY);
 80015c6:	4b20      	ldr	r3, [pc, #128]	@ (8001648 <MCP23S17_WriteRegister+0xa8>)
 80015c8:	6818      	ldr	r0, [r3, #0]
 80015ca:	f107 010e 	add.w	r1, r7, #14
 80015ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015d2:	2201      	movs	r2, #1
 80015d4:	f005 fa2b 	bl	8006a2e <HAL_SPI_Transmit>
 80015d8:	4603      	mov	r3, r0
 80015da:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00c      	beq.n	80015fc <MCP23S17_WriteRegister+0x5c>
		HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET); // Deassert chip select
 80015e2:	2201      	movs	r2, #1
 80015e4:	2180      	movs	r1, #128	@ 0x80
 80015e6:	4817      	ldr	r0, [pc, #92]	@ (8001644 <MCP23S17_WriteRegister+0xa4>)
 80015e8:	f001 f9da 	bl	80029a0 <HAL_GPIO_WritePin>
		printf("Error: Failed to transmit control byte (HAL_SPI_Transmit returned %d)\r\n", status);
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	4619      	mov	r1, r3
 80015f0:	4816      	ldr	r0, [pc, #88]	@ (800164c <MCP23S17_WriteRegister+0xac>)
 80015f2:	f009 fe03 	bl	800b1fc <iprintf>
		Error_Handler(); // Handle the error
 80015f6:	f7ff fb6f 	bl	8000cd8 <Error_Handler>
		return; // Prevent further execution
 80015fa:	e01f      	b.n	800163c <MCP23S17_WriteRegister+0x9c>
#if (LOGS)
	printf("SPI3 control transmission status: %d\r\n", status);
#endif

	// Transmit register address and data
	status = HAL_SPI_Transmit(hMCP23S17.hspi, buffer, 2, HAL_MAX_DELAY);
 80015fc:	4b12      	ldr	r3, [pc, #72]	@ (8001648 <MCP23S17_WriteRegister+0xa8>)
 80015fe:	6818      	ldr	r0, [r3, #0]
 8001600:	f107 010c 	add.w	r1, r7, #12
 8001604:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001608:	2202      	movs	r2, #2
 800160a:	f005 fa10 	bl	8006a2e <HAL_SPI_Transmit>
 800160e:	4603      	mov	r3, r0
 8001610:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00c      	beq.n	8001632 <MCP23S17_WriteRegister+0x92>
		HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET); // Deassert chip select
 8001618:	2201      	movs	r2, #1
 800161a:	2180      	movs	r1, #128	@ 0x80
 800161c:	4809      	ldr	r0, [pc, #36]	@ (8001644 <MCP23S17_WriteRegister+0xa4>)
 800161e:	f001 f9bf 	bl	80029a0 <HAL_GPIO_WritePin>
		printf("Error: Failed to transmit register data (HAL_SPI_Transmit returned %d)\r\n", status);
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	4619      	mov	r1, r3
 8001626:	480a      	ldr	r0, [pc, #40]	@ (8001650 <MCP23S17_WriteRegister+0xb0>)
 8001628:	f009 fde8 	bl	800b1fc <iprintf>
		Error_Handler(); // Handle the error
 800162c:	f7ff fb54 	bl	8000cd8 <Error_Handler>
		return; // Prevent further execution
 8001630:	e004      	b.n	800163c <MCP23S17_WriteRegister+0x9c>
#if (LOGS)
	printf("SPI3 data Ox%X transmission to register 0x%X status: %d\r\n", data, reg, status);
#endif

	// Deassert chip select
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 8001632:	2201      	movs	r2, #1
 8001634:	2180      	movs	r1, #128	@ 0x80
 8001636:	4803      	ldr	r0, [pc, #12]	@ (8001644 <MCP23S17_WriteRegister+0xa4>)
 8001638:	f001 f9b2 	bl	80029a0 <HAL_GPIO_WritePin>
}
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	48000400 	.word	0x48000400
 8001648:	20000c6c 	.word	0x20000c6c
 800164c:	0800c5a0 	.word	0x0800c5a0
 8001650:	0800c5e8 	.word	0x0800c5e8

08001654 <MCP23S17_Update_LEDs>:

void MCP23S17_Update_LEDs()
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	MCP23S17_WriteRegister(MCP23S17_OLATA, hMCP23S17.GPA);
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <MCP23S17_Update_LEDs+0x20>)
 800165a:	791b      	ldrb	r3, [r3, #4]
 800165c:	4619      	mov	r1, r3
 800165e:	2014      	movs	r0, #20
 8001660:	f7ff ff9e 	bl	80015a0 <MCP23S17_WriteRegister>
	MCP23S17_WriteRegister(MCP23S17_OLATB, hMCP23S17.GPB);
 8001664:	4b03      	ldr	r3, [pc, #12]	@ (8001674 <MCP23S17_Update_LEDs+0x20>)
 8001666:	795b      	ldrb	r3, [r3, #5]
 8001668:	4619      	mov	r1, r3
 800166a:	2015      	movs	r0, #21
 800166c:	f7ff ff98 	bl	80015a0 <MCP23S17_WriteRegister>
}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000c6c 	.word	0x20000c6c

08001678 <MCP23S17_Init>:

void MCP23S17_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	hMCP23S17.hspi = &hspi3;
 800167c:	4b12      	ldr	r3, [pc, #72]	@ (80016c8 <MCP23S17_Init+0x50>)
 800167e:	4a13      	ldr	r2, [pc, #76]	@ (80016cc <MCP23S17_Init+0x54>)
 8001680:	601a      	str	r2, [r3, #0]

	HAL_SPI_Init(hMCP23S17.hspi);
 8001682:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <MCP23S17_Init+0x50>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f005 f92e 	bl	80068e8 <HAL_SPI_Init>

	// nRESET to base state
	HAL_GPIO_WritePin(VU_nRESET_GPIO_Port, VU_nRESET_Pin, GPIO_PIN_SET);
 800168c:	2201      	movs	r2, #1
 800168e:	2101      	movs	r1, #1
 8001690:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001694:	f001 f984 	bl	80029a0 <HAL_GPIO_WritePin>

	// nCS to reset state
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 8001698:	2201      	movs	r2, #1
 800169a:	2180      	movs	r1, #128	@ 0x80
 800169c:	480c      	ldr	r0, [pc, #48]	@ (80016d0 <MCP23S17_Init+0x58>)
 800169e:	f001 f97f 	bl	80029a0 <HAL_GPIO_WritePin>

	// Set all GPIOA and GPIOB pins as outputs
	MCP23S17_WriteRegister(MCP23S17_IODIRA, MCP23S17_ALL_ON); // GPA as output
 80016a2:	2100      	movs	r1, #0
 80016a4:	2000      	movs	r0, #0
 80016a6:	f7ff ff7b 	bl	80015a0 <MCP23S17_WriteRegister>
	MCP23S17_WriteRegister(MCP23S17_IODIRB, MCP23S17_ALL_ON); // GPB as output
 80016aa:	2100      	movs	r1, #0
 80016ac:	2001      	movs	r0, #1
 80016ae:	f7ff ff77 	bl	80015a0 <MCP23S17_WriteRegister>

	hMCP23S17.GPA = 0xFF;	// All LEDs on GPIOA OFF
 80016b2:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <MCP23S17_Init+0x50>)
 80016b4:	22ff      	movs	r2, #255	@ 0xff
 80016b6:	711a      	strb	r2, [r3, #4]
	hMCP23S17.GPB = 0xFF;	// All LEDs on GPIOB OFF
 80016b8:	4b03      	ldr	r3, [pc, #12]	@ (80016c8 <MCP23S17_Init+0x50>)
 80016ba:	22ff      	movs	r2, #255	@ 0xff
 80016bc:	715a      	strb	r2, [r3, #5]

	MCP23S17_Update_LEDs();
 80016be:	f7ff ffc9 	bl	8001654 <MCP23S17_Update_LEDs>
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000c6c 	.word	0x20000c6c
 80016cc:	20000b30 	.word	0x20000b30
 80016d0:	48000400 	.word	0x48000400

080016d4 <MCP23S17_Set_LED_id>:

void MCP23S17_Set_LED_id(uint8_t led)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
	if (led > 7)
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	2b07      	cmp	r3, #7
 80016e2:	d90e      	bls.n	8001702 <MCP23S17_Set_LED_id+0x2e>
	{
		hMCP23S17.GPB = ~(1 << led%8);
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	2201      	movs	r2, #1
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <MCP23S17_Set_LED_id+0x54>)
 80016f8:	715a      	strb	r2, [r3, #5]
		hMCP23S17.GPA = 0xFF; // All LEDs on GPIOA OFF
 80016fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <MCP23S17_Set_LED_id+0x54>)
 80016fc:	22ff      	movs	r2, #255	@ 0xff
 80016fe:	711a      	strb	r2, [r3, #4]
 8001700:	e00b      	b.n	800171a <MCP23S17_Set_LED_id+0x46>
	}
	else
	{
		hMCP23S17.GPA = ~(1 << led);
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	2201      	movs	r2, #1
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	b2db      	uxtb	r3, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	b2da      	uxtb	r2, r3
 8001710:	4b05      	ldr	r3, [pc, #20]	@ (8001728 <MCP23S17_Set_LED_id+0x54>)
 8001712:	711a      	strb	r2, [r3, #4]
		hMCP23S17.GPB = 0xFF; // All LEDs on GPIOB OFF
 8001714:	4b04      	ldr	r3, [pc, #16]	@ (8001728 <MCP23S17_Set_LED_id+0x54>)
 8001716:	22ff      	movs	r2, #255	@ 0xff
 8001718:	715a      	strb	r2, [r3, #5]
	}

	MCP23S17_Update_LEDs();
 800171a:	f7ff ff9b 	bl	8001654 <MCP23S17_Update_LEDs>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000c6c 	.word	0x20000c6c

0800172c <MCP23S17_Toggle_LED_id>:

void MCP23S17_Toggle_LED_id(uint8_t led)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
	if (led > 7)
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	2b07      	cmp	r3, #7
 800173a:	d90f      	bls.n	800175c <MCP23S17_Toggle_LED_id+0x30>
	{
		hMCP23S17.GPB = (hMCP23S17.GPB & ~(1 << led%8)) | (~hMCP23S17.GPB & (1 << led%8));
 800173c:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <MCP23S17_Toggle_LED_id+0x58>)
 800173e:	795b      	ldrb	r3, [r3, #5]
 8001740:	b25a      	sxtb	r2, r3
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	2101      	movs	r1, #1
 800174a:	fa01 f303 	lsl.w	r3, r1, r3
 800174e:	b25b      	sxtb	r3, r3
 8001750:	4053      	eors	r3, r2
 8001752:	b25b      	sxtb	r3, r3
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4b0b      	ldr	r3, [pc, #44]	@ (8001784 <MCP23S17_Toggle_LED_id+0x58>)
 8001758:	715a      	strb	r2, [r3, #5]
 800175a:	e00c      	b.n	8001776 <MCP23S17_Toggle_LED_id+0x4a>
	}
	else
	{
		hMCP23S17.GPA = (hMCP23S17.GPA & ~(1 << led)) | (~hMCP23S17.GPA & (1 << led));
 800175c:	4b09      	ldr	r3, [pc, #36]	@ (8001784 <MCP23S17_Toggle_LED_id+0x58>)
 800175e:	791b      	ldrb	r3, [r3, #4]
 8001760:	b25a      	sxtb	r2, r3
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	2101      	movs	r1, #1
 8001766:	fa01 f303 	lsl.w	r3, r1, r3
 800176a:	b25b      	sxtb	r3, r3
 800176c:	4053      	eors	r3, r2
 800176e:	b25b      	sxtb	r3, r3
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4b04      	ldr	r3, [pc, #16]	@ (8001784 <MCP23S17_Toggle_LED_id+0x58>)
 8001774:	711a      	strb	r2, [r3, #4]
	}

	MCP23S17_Update_LEDs();
 8001776:	f7ff ff6d 	bl	8001654 <MCP23S17_Update_LEDs>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000c6c 	.word	0x20000c6c

08001788 <MCP23S17_Set_LEDs>:

void MCP23S17_Set_LEDs(uint16_t leds)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	80fb      	strh	r3, [r7, #6]
	hMCP23S17.GPB = (0xFF00 & leds) >> 8;
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	0a1b      	lsrs	r3, r3, #8
 8001796:	b29b      	uxth	r3, r3
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <MCP23S17_Set_LEDs+0x2c>)
 800179c:	715a      	strb	r2, [r3, #5]
	hMCP23S17.GPA = 0xFF & leds;
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	4b04      	ldr	r3, [pc, #16]	@ (80017b4 <MCP23S17_Set_LEDs+0x2c>)
 80017a4:	711a      	strb	r2, [r3, #4]

	MCP23S17_Update_LEDs();
 80017a6:	f7ff ff55 	bl	8001654 <MCP23S17_Update_LEDs>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000c6c 	.word	0x20000c6c

080017b8 <SGTL5000_ErrorHandler>:
/**
 * @brief Error handler for SGTL5000 operations.
 * @param message: Error message to display.
 */
void SGTL5000_ErrorHandler(const char* message)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
    printf("SGTL5000 Error: %s\r\n", message);
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	4804      	ldr	r0, [pc, #16]	@ (80017d4 <SGTL5000_ErrorHandler+0x1c>)
 80017c4:	f009 fd1a 	bl	800b1fc <iprintf>
    Error_Handler(); // Use HAL's Error_Handler or customize as needed
 80017c8:	f7ff fa86 	bl	8000cd8 <Error_Handler>
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	0800c634 	.word	0x0800c634

080017d8 <SGTL5000_ReadRegister>:
 * @param address: Register address to read from.
 * @param pData: Pointer to data buffer for storing the read data.
 * @param length: Number of bytes to read.
 */
void SGTL5000_ReadRegister(uint16_t address, uint8_t* pData, uint16_t length)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af04      	add	r7, sp, #16
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	80fb      	strh	r3, [r7, #6]
 80017e4:	4613      	mov	r3, r2
 80017e6:	80bb      	strh	r3, [r7, #4]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hSGTL5000.hi2c, SGTL5000_CODEC,
 80017e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001828 <SGTL5000_ReadRegister+0x50>)
 80017ea:	6818      	ldr	r0, [r3, #0]
 80017ec:	88fa      	ldrh	r2, [r7, #6]
 80017ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017f2:	9302      	str	r3, [sp, #8]
 80017f4:	88bb      	ldrh	r3, [r7, #4]
 80017f6:	9301      	str	r3, [sp, #4]
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	2302      	movs	r3, #2
 80017fe:	2114      	movs	r1, #20
 8001800:	f001 fab0 	bl	8002d64 <HAL_I2C_Mem_Read>
 8001804:	4603      	mov	r3, r0
 8001806:	73fb      	strb	r3, [r7, #15]
    		address, SGTL5000_MEM_SIZE, pData, length, HAL_MAX_DELAY);

    if (status != HAL_OK) {
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d007      	beq.n	800181e <SGTL5000_ReadRegister+0x46>
        printf("Error: Failed to read from address 0x%04X\r\n", address);
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	4619      	mov	r1, r3
 8001812:	4806      	ldr	r0, [pc, #24]	@ (800182c <SGTL5000_ReadRegister+0x54>)
 8001814:	f009 fcf2 	bl	800b1fc <iprintf>
        SGTL5000_ErrorHandler("ReadRegister failed");
 8001818:	4805      	ldr	r0, [pc, #20]	@ (8001830 <SGTL5000_ReadRegister+0x58>)
 800181a:	f7ff ffcd 	bl	80017b8 <SGTL5000_ErrorHandler>
    }
}
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000c74 	.word	0x20000c74
 800182c:	0800c64c 	.word	0x0800c64c
 8001830:	0800c678 	.word	0x0800c678

08001834 <SGTL5000_WriteRegister>:
 * @brief Writes data to a register of SGTL5000 with error management.
 * @param address: Register address to write to.
 * @param value: Data value to write to the register.
 */
void SGTL5000_WriteRegister(uint16_t address, uint16_t value)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af04      	add	r7, sp, #16
 800183a:	4603      	mov	r3, r0
 800183c:	460a      	mov	r2, r1
 800183e:	80fb      	strh	r3, [r7, #6]
 8001840:	4613      	mov	r3, r2
 8001842:	80bb      	strh	r3, [r7, #4]
    uint8_t data[2] = { (uint8_t)(value >> 8), (uint8_t)(value & 0xFF) };
 8001844:	88bb      	ldrh	r3, [r7, #4]
 8001846:	0a1b      	lsrs	r3, r3, #8
 8001848:	b29b      	uxth	r3, r3
 800184a:	b2db      	uxtb	r3, r3
 800184c:	733b      	strb	r3, [r7, #12]
 800184e:	88bb      	ldrh	r3, [r7, #4]
 8001850:	b2db      	uxtb	r3, r3
 8001852:	737b      	strb	r3, [r7, #13]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(hSGTL5000.hi2c, SGTL5000_CODEC,
 8001854:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <SGTL5000_WriteRegister+0x64>)
 8001856:	6818      	ldr	r0, [r3, #0]
 8001858:	88fa      	ldrh	r2, [r7, #6]
 800185a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800185e:	9302      	str	r3, [sp, #8]
 8001860:	2302      	movs	r3, #2
 8001862:	9301      	str	r3, [sp, #4]
 8001864:	f107 030c 	add.w	r3, r7, #12
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2302      	movs	r3, #2
 800186c:	2114      	movs	r1, #20
 800186e:	f001 f965 	bl	8002b3c <HAL_I2C_Mem_Write>
 8001872:	4603      	mov	r3, r0
 8001874:	73fb      	strb	r3, [r7, #15]
    		address, SGTL5000_MEM_SIZE, data, 2, HAL_MAX_DELAY);

    if (status != HAL_OK) {
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d008      	beq.n	800188e <SGTL5000_WriteRegister+0x5a>
        printf("Error: Failed to write 0x%04X to address 0x%04X\r\n", value, address);
 800187c:	88bb      	ldrh	r3, [r7, #4]
 800187e:	88fa      	ldrh	r2, [r7, #6]
 8001880:	4619      	mov	r1, r3
 8001882:	4806      	ldr	r0, [pc, #24]	@ (800189c <SGTL5000_WriteRegister+0x68>)
 8001884:	f009 fcba 	bl	800b1fc <iprintf>
        SGTL5000_ErrorHandler("WriteRegister failed");
 8001888:	4805      	ldr	r0, [pc, #20]	@ (80018a0 <SGTL5000_WriteRegister+0x6c>)
 800188a:	f7ff ff95 	bl	80017b8 <SGTL5000_ErrorHandler>
    }
}
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000c74 	.word	0x20000c74
 800189c:	0800c68c 	.word	0x0800c68c
 80018a0:	0800c6c0 	.word	0x0800c6c0

080018a4 <SGTL5000_Init>:

/**
 * @brief Initializes the SGTL5000 codec.
 */
void SGTL5000_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
    hSGTL5000.hi2c = &hi2c2;
 80018aa:	4b22      	ldr	r3, [pc, #136]	@ (8001934 <SGTL5000_Init+0x90>)
 80018ac:	4a22      	ldr	r2, [pc, #136]	@ (8001938 <SGTL5000_Init+0x94>)
 80018ae:	601a      	str	r2, [r3, #0]

    uint8_t chip_id_data[2];
    SGTL5000_ReadRegister(SGTL5000_CHIP_ID, chip_id_data, SGTL5000_MEM_SIZE);
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	2202      	movs	r2, #2
 80018b4:	4619      	mov	r1, r3
 80018b6:	2000      	movs	r0, #0
 80018b8:	f7ff ff8e 	bl	80017d8 <SGTL5000_ReadRegister>
    hSGTL5000.chip_id = (chip_id_data[0] << 8) | chip_id_data[1];
 80018bc:	793b      	ldrb	r3, [r7, #4]
 80018be:	021b      	lsls	r3, r3, #8
 80018c0:	b21a      	sxth	r2, r3
 80018c2:	797b      	ldrb	r3, [r7, #5]
 80018c4:	b21b      	sxth	r3, r3
 80018c6:	4313      	orrs	r3, r2
 80018c8:	b21b      	sxth	r3, r3
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	4b19      	ldr	r3, [pc, #100]	@ (8001934 <SGTL5000_Init+0x90>)
 80018ce:	809a      	strh	r2, [r3, #4]

    if (hSGTL5000.chip_id != 0xA011) { // Example CHIP_ID, replace with actual expected ID
 80018d0:	4b18      	ldr	r3, [pc, #96]	@ (8001934 <SGTL5000_Init+0x90>)
 80018d2:	889b      	ldrh	r3, [r3, #4]
 80018d4:	f24a 0211 	movw	r2, #40977	@ 0xa011
 80018d8:	4293      	cmp	r3, r2
 80018da:	d002      	beq.n	80018e2 <SGTL5000_Init+0x3e>
        SGTL5000_ErrorHandler("Invalid CHIP_ID detected");
 80018dc:	4817      	ldr	r0, [pc, #92]	@ (800193c <SGTL5000_Init+0x98>)
 80018de:	f7ff ff6b 	bl	80017b8 <SGTL5000_ErrorHandler>
    }

    // Initialize registers
    SGTL5000_WriteRegister(CHIP_LINREG_CTRL, 0x0008);     // Configure VDDD level to 1.2V
 80018e2:	2108      	movs	r1, #8
 80018e4:	2022      	movs	r0, #34	@ 0x22
 80018e6:	f7ff ffa5 	bl	8001834 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(CHIP_ANA_POWER, 0x7260);       // Power up internal linear regulator
 80018ea:	f247 2160 	movw	r1, #29280	@ 0x7260
 80018ee:	2030      	movs	r0, #48	@ 0x30
 80018f0:	f7ff ffa0 	bl	8001834 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(CHIP_REF_CTRL, 0x004E);        // Set reference voltage
 80018f4:	214e      	movs	r1, #78	@ 0x4e
 80018f6:	2028      	movs	r0, #40	@ 0x28
 80018f8:	f7ff ff9c 	bl	8001834 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(CHIP_LINE_OUT_CTRL, 0x0322);   // Configure line-out reference and bias
 80018fc:	f240 3122 	movw	r1, #802	@ 0x322
 8001900:	202c      	movs	r0, #44	@ 0x2c
 8001902:	f7ff ff97 	bl	8001834 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(CHIP_SHORT_CTRL, 0x1106);      // Enable short circuit detect
 8001906:	f241 1106 	movw	r1, #4358	@ 0x1106
 800190a:	202e      	movs	r0, #46	@ 0x2e
 800190c:	f7ff ff92 	bl	8001834 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(CHIP_ANA_CTRL, 0x0133);        // Enable analog controls
 8001910:	f240 1133 	movw	r1, #307	@ 0x133
 8001914:	2034      	movs	r0, #52	@ 0x34
 8001916:	f7ff ff8d 	bl	8001834 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(CHIP_DIG_POWER, 0x0073);       // Power up digital blocks
 800191a:	2173      	movs	r1, #115	@ 0x73
 800191c:	2002      	movs	r0, #2
 800191e:	f7ff ff89 	bl	8001834 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(CHIP_LINE_OUT_VOL, 0x0505);    // Set line-out volume
 8001922:	f240 5105 	movw	r1, #1285	@ 0x505
 8001926:	202a      	movs	r0, #42	@ 0x2a
 8001928:	f7ff ff84 	bl	8001834 <SGTL5000_WriteRegister>

#if (LOGS)
    printf("SGTL5000 initialized successfully, CHIP_ID: 0x%04X\r\n", hSGTL5000.chip_id);
#endif
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000c74 	.word	0x20000c74
 8001938:	20000334 	.word	0x20000334
 800193c:	0800c6d8 	.word	0x0800c6d8

08001940 <fonction>:

#include "../drivers/MCP23S17.h"


int fonction(int argc, char ** argv)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
	if (argc > 1)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b01      	cmp	r3, #1
 800194e:	dd14      	ble.n	800197a <fonction+0x3a>
	{
		for (int i = 0; i < argc; i++)
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	e00d      	b.n	8001972 <fonction+0x32>
		{
			printf("Paramètre [%d] = %s\r\n", i+1, argv[i]);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1c59      	adds	r1, r3, #1
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	4413      	add	r3, r2
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	461a      	mov	r2, r3
 8001966:	4807      	ldr	r0, [pc, #28]	@ (8001984 <fonction+0x44>)
 8001968:	f009 fc48 	bl	800b1fc <iprintf>
		for (int i = 0; i < argc; i++)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	3301      	adds	r3, #1
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	429a      	cmp	r2, r3
 8001978:	dbed      	blt.n	8001956 <fonction+0x16>
		}
	}

	return 0;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	0800c6f4 	.word	0x0800c6f4

08001988 <calcul>:

int calcul(int argc, char ** argv)
{
 8001988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
	if (argc >= 4)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b03      	cmp	r3, #3
 8001996:	dd68      	ble.n	8001a6a <calcul+0xe2>
	{
		switch(argv[2][0])
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	3308      	adds	r3, #8
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b78      	cmp	r3, #120	@ 0x78
 80019a2:	d03f      	beq.n	8001a24 <calcul+0x9c>
 80019a4:	2b78      	cmp	r3, #120	@ 0x78
 80019a6:	dc59      	bgt.n	8001a5c <calcul+0xd4>
 80019a8:	2b2d      	cmp	r3, #45	@ 0x2d
 80019aa:	d020      	beq.n	80019ee <calcul+0x66>
 80019ac:	2b2d      	cmp	r3, #45	@ 0x2d
 80019ae:	dc55      	bgt.n	8001a5c <calcul+0xd4>
 80019b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80019b2:	d037      	beq.n	8001a24 <calcul+0x9c>
 80019b4:	2b2b      	cmp	r3, #43	@ 0x2b
 80019b6:	d151      	bne.n	8001a5c <calcul+0xd4>
		{
		case '+':
			printf("%s + %s = %d\r\n", argv[1], argv[3], atoi(argv[1])+atoi(argv[3]));
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	3304      	adds	r3, #4
 80019bc:	681c      	ldr	r4, [r3, #0]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	330c      	adds	r3, #12
 80019c2:	681d      	ldr	r5, [r3, #0]
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	3304      	adds	r3, #4
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f009 facc 	bl	800af68 <atoi>
 80019d0:	4606      	mov	r6, r0
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	330c      	adds	r3, #12
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f009 fac5 	bl	800af68 <atoi>
 80019de:	4603      	mov	r3, r0
 80019e0:	4433      	add	r3, r6
 80019e2:	462a      	mov	r2, r5
 80019e4:	4621      	mov	r1, r4
 80019e6:	4823      	ldr	r0, [pc, #140]	@ (8001a74 <calcul+0xec>)
 80019e8:	f009 fc08 	bl	800b1fc <iprintf>
			break;
 80019ec:	e03d      	b.n	8001a6a <calcul+0xe2>
		case '-':
			printf("%s - %s = %d\r\n", argv[1], argv[3], atoi(argv[1])-atoi(argv[3]));
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	3304      	adds	r3, #4
 80019f2:	681c      	ldr	r4, [r3, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	330c      	adds	r3, #12
 80019f8:	681d      	ldr	r5, [r3, #0]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	3304      	adds	r3, #4
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f009 fab1 	bl	800af68 <atoi>
 8001a06:	4606      	mov	r6, r0
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	330c      	adds	r3, #12
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f009 faaa 	bl	800af68 <atoi>
 8001a14:	4603      	mov	r3, r0
 8001a16:	1af3      	subs	r3, r6, r3
 8001a18:	462a      	mov	r2, r5
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	4816      	ldr	r0, [pc, #88]	@ (8001a78 <calcul+0xf0>)
 8001a1e:	f009 fbed 	bl	800b1fc <iprintf>
			break;
 8001a22:	e022      	b.n	8001a6a <calcul+0xe2>
		case '*':
		case 'x':
			printf("%s * %s = %d\r\n", argv[1], argv[3], atoi(argv[1])*atoi(argv[3]));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	3304      	adds	r3, #4
 8001a28:	681c      	ldr	r4, [r3, #0]
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	330c      	adds	r3, #12
 8001a2e:	681d      	ldr	r5, [r3, #0]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	3304      	adds	r3, #4
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f009 fa96 	bl	800af68 <atoi>
 8001a3c:	4606      	mov	r6, r0
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	330c      	adds	r3, #12
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f009 fa8f 	bl	800af68 <atoi>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	fb06 f303 	mul.w	r3, r6, r3
 8001a50:	462a      	mov	r2, r5
 8001a52:	4621      	mov	r1, r4
 8001a54:	4809      	ldr	r0, [pc, #36]	@ (8001a7c <calcul+0xf4>)
 8001a56:	f009 fbd1 	bl	800b1fc <iprintf>
			break;
 8001a5a:	e006      	b.n	8001a6a <calcul+0xe2>
		default:
			printf("Opération '%s' non supporté!\r\n", argv[2]);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	3308      	adds	r3, #8
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4619      	mov	r1, r3
 8001a64:	4806      	ldr	r0, [pc, #24]	@ (8001a80 <calcul+0xf8>)
 8001a66:	f009 fbc9 	bl	800b1fc <iprintf>
		}
	}

	return 0;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a74:	0800c70c 	.word	0x0800c70c
 8001a78:	0800c71c 	.word	0x0800c71c
 8001a7c:	0800c72c 	.word	0x0800c72c
 8001a80:	0800c73c 	.word	0x0800c73c

08001a84 <addition>:

int addition(int argc, char ** argv)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
	if (argc > 1)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	dd24      	ble.n	8001ade <addition+0x5a>
	{
		int somme = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]
		for (int i = 1; i < argc; i++)
 8001a98:	2301      	movs	r3, #1
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	e017      	b.n	8001ace <addition+0x4a>
		{
			printf(" + %s", argv[i]);
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	480f      	ldr	r0, [pc, #60]	@ (8001ae8 <addition+0x64>)
 8001aac:	f009 fba6 	bl	800b1fc <iprintf>
			somme = somme + atoi(argv[i]);
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f009 fa54 	bl	800af68 <atoi>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]
		for (int i = 1; i < argc; i++)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	3301      	adds	r3, #1
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	dbe3      	blt.n	8001a9e <addition+0x1a>
		}

		printf(" = %d\r\n", somme);
 8001ad6:	68f9      	ldr	r1, [r7, #12]
 8001ad8:	4804      	ldr	r0, [pc, #16]	@ (8001aec <addition+0x68>)
 8001ada:	f009 fb8f 	bl	800b1fc <iprintf>
	}
	return 0;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	0800c760 	.word	0x0800c760
 8001aec:	0800c768 	.word	0x0800c768

08001af0 <GPIOExpander_toggle_LED>:

int GPIOExpander_toggle_LED(int argc, char ** argv)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
	if (argc > 1)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	dd16      	ble.n	8001b2e <GPIOExpander_toggle_LED+0x3e>
	{
		for (int i = 1; i < argc; i++)
 8001b00:	2301      	movs	r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	e00f      	b.n	8001b26 <GPIOExpander_toggle_LED+0x36>
		{
			MCP23S17_Toggle_LED_id(atoi(argv[i]));
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f009 fa29 	bl	800af68 <atoi>
 8001b16:	4603      	mov	r3, r0
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fe06 	bl	800172c <MCP23S17_Toggle_LED_id>
		for (int i = 1; i < argc; i++)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	3301      	adds	r3, #1
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	dbeb      	blt.n	8001b06 <GPIOExpander_toggle_LED+0x16>
		}
	}

	return 0;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <GPIOExpander_set_LED>:

int GPIOExpander_set_LED(int argc, char ** argv)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
	if (argc > 1)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	dd0a      	ble.n	8001b5e <GPIOExpander_set_LED+0x26>
	{
		MCP23S17_Set_LED_id(atoi(argv[1]));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	3304      	adds	r3, #4
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f009 fa0a 	bl	800af68 <atoi>
 8001b54:	4603      	mov	r3, r0
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fdbb 	bl	80016d4 <MCP23S17_Set_LED_id>
	}

	return 0;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <shell_uart_receive_irq_cb>:
static char print_buffer[BUFFER_SIZE];
static SemaphoreHandle_t sem_uart_read = NULL;


void shell_uart_receive_irq_cb(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]

	xSemaphoreGiveFromISR(sem_uart_read, &pxHigherPriorityTaskWoken);
 8001b72:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba0 <shell_uart_receive_irq_cb+0x38>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	1d3a      	adds	r2, r7, #4
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f007 fbee 	bl	800935c <xQueueGiveFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d007      	beq.n	8001b96 <shell_uart_receive_irq_cb+0x2e>
 8001b86:	4b07      	ldr	r3, [pc, #28]	@ (8001ba4 <shell_uart_receive_irq_cb+0x3c>)
 8001b88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	f3bf 8f4f 	dsb	sy
 8001b92:	f3bf 8f6f 	isb	sy
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000fa8 	.word	0x20000fa8
 8001ba4:	e000ed04 	.word	0xe000ed04

08001ba8 <uart_read>:

static char uart_read() {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
	char c;

	HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t*)(&c), 1);
 8001bae:	1dfb      	adds	r3, r7, #7
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4807      	ldr	r0, [pc, #28]	@ (8001bd4 <uart_read+0x2c>)
 8001bb6:	f005 fec7 	bl	8007948 <HAL_UART_Receive_IT>
	// il faut mettre la tâche shell dans l'état bloqué, jusqu'à l'interruption de réception de caractère
	// prendre un sémaphore vide par exemple
	xSemaphoreTake(sem_uart_read, portMAX_DELAY);
 8001bba:	4b07      	ldr	r3, [pc, #28]	@ (8001bd8 <uart_read+0x30>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f007 fc5a 	bl	800947c <xQueueSemaphoreTake>

	return c;
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000be4 	.word	0x20000be4
 8001bd8:	20000fa8 	.word	0x20000fa8

08001bdc <uart_write>:

static int uart_write(char * s, uint16_t size) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
 8001be8:	887a      	ldrh	r2, [r7, #2]
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4803      	ldr	r0, [pc, #12]	@ (8001c00 <uart_write+0x24>)
 8001bf2:	f005 fe1f 	bl	8007834 <HAL_UART_Transmit>
	return size;
 8001bf6:	887b      	ldrh	r3, [r7, #2]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000be4 	.word	0x20000be4

08001c04 <sh_help>:

static int sh_help(int argc, char ** argv) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af02      	add	r7, sp, #8
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	e022      	b.n	8001c5a <sh_help+0x56>
		int size;
		size = snprintf (print_buffer, BUFFER_SIZE, "%c: %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 8001c14:	4916      	ldr	r1, [pc, #88]	@ (8001c70 <sh_help+0x6c>)
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	4912      	ldr	r1, [pc, #72]	@ (8001c70 <sh_help+0x6c>)
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	4413      	add	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	440b      	add	r3, r1
 8001c34:	3308      	adds	r3, #8
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c74 <sh_help+0x70>)
 8001c3e:	2128      	movs	r1, #40	@ 0x28
 8001c40:	480d      	ldr	r0, [pc, #52]	@ (8001c78 <sh_help+0x74>)
 8001c42:	f009 fb4b 	bl	800b2dc <sniprintf>
 8001c46:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	480a      	ldr	r0, [pc, #40]	@ (8001c78 <sh_help+0x74>)
 8001c50:	f7ff ffc4 	bl	8001bdc <uart_write>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	3301      	adds	r3, #1
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b08      	ldr	r3, [pc, #32]	@ (8001c7c <sh_help+0x78>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	dbd7      	blt.n	8001c14 <sh_help+0x10>
	}

	return 0;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000c80 	.word	0x20000c80
 8001c74:	0800c770 	.word	0x0800c770
 8001c78:	20000f80 	.word	0x20000f80
 8001c7c:	20000c7c 	.word	0x20000c7c

08001c80 <shell_init>:

void shell_init() {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
	int size = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	607b      	str	r3, [r7, #4]

	size = snprintf (print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8001c8a:	4a13      	ldr	r2, [pc, #76]	@ (8001cd8 <shell_init+0x58>)
 8001c8c:	2128      	movs	r1, #40	@ 0x28
 8001c8e:	4813      	ldr	r0, [pc, #76]	@ (8001cdc <shell_init+0x5c>)
 8001c90:	f009 fb24 	bl	800b2dc <sniprintf>
 8001c94:	6078      	str	r0, [r7, #4]
	uart_write(print_buffer, size);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	480f      	ldr	r0, [pc, #60]	@ (8001cdc <shell_init+0x5c>)
 8001c9e:	f7ff ff9d 	bl	8001bdc <uart_write>

	sem_uart_read = xSemaphoreCreateBinary();
 8001ca2:	2203      	movs	r2, #3
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	f007 fafe 	bl	80092a8 <xQueueGenericCreate>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4a0c      	ldr	r2, [pc, #48]	@ (8001ce0 <shell_init+0x60>)
 8001cb0:	6013      	str	r3, [r2, #0]
	if (sem_uart_read == NULL)
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce0 <shell_init+0x60>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d104      	bne.n	8001cc4 <shell_init+0x44>
	{
		printf("Error semaphore shell\r\n");
 8001cba:	480a      	ldr	r0, [pc, #40]	@ (8001ce4 <shell_init+0x64>)
 8001cbc:	f009 fb06 	bl	800b2cc <puts>
		while(1);
 8001cc0:	bf00      	nop
 8001cc2:	e7fd      	b.n	8001cc0 <shell_init+0x40>
	}

	shell_add('h', sh_help, "Help");
 8001cc4:	4a08      	ldr	r2, [pc, #32]	@ (8001ce8 <shell_init+0x68>)
 8001cc6:	4909      	ldr	r1, [pc, #36]	@ (8001cec <shell_init+0x6c>)
 8001cc8:	2068      	movs	r0, #104	@ 0x68
 8001cca:	f000 f811 	bl	8001cf0 <shell_add>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	0800c77c 	.word	0x0800c77c
 8001cdc:	20000f80 	.word	0x20000f80
 8001ce0:	20000fa8 	.word	0x20000fa8
 8001ce4:	0800c7a4 	.word	0x0800c7a4
 8001ce8:	0800c7bc 	.word	0x0800c7bc
 8001cec:	08001c05 	.word	0x08001c05

08001cf0 <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
 8001cfc:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8001cfe:	4b19      	ldr	r3, [pc, #100]	@ (8001d64 <shell_add+0x74>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d04:	dc26      	bgt.n	8001d54 <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 8001d06:	4b17      	ldr	r3, [pc, #92]	@ (8001d64 <shell_add+0x74>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	4917      	ldr	r1, [pc, #92]	@ (8001d68 <shell_add+0x78>)
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4413      	add	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	440b      	add	r3, r1
 8001d16:	7bfa      	ldrb	r2, [r7, #15]
 8001d18:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 8001d1a:	4b12      	ldr	r3, [pc, #72]	@ (8001d64 <shell_add+0x74>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	4912      	ldr	r1, [pc, #72]	@ (8001d68 <shell_add+0x78>)
 8001d20:	4613      	mov	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4413      	add	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	440b      	add	r3, r1
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 8001d30:	4b0c      	ldr	r3, [pc, #48]	@ (8001d64 <shell_add+0x74>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	490c      	ldr	r1, [pc, #48]	@ (8001d68 <shell_add+0x78>)
 8001d36:	4613      	mov	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	440b      	add	r3, r1
 8001d40:	3308      	adds	r3, #8
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 8001d46:	4b07      	ldr	r3, [pc, #28]	@ (8001d64 <shell_add+0x74>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	4a05      	ldr	r2, [pc, #20]	@ (8001d64 <shell_add+0x74>)
 8001d4e:	6013      	str	r3, [r2, #0]
		return 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	e001      	b.n	8001d58 <shell_add+0x68>
	}

	return -1;
 8001d54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	20000c7c 	.word	0x20000c7c
 8001d68:	20000c80 	.word	0x20000c80

08001d6c <shell_exec>:

static int shell_exec(char * buf) {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b090      	sub	sp, #64	@ 0x40
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	int i;

	char c = buf[0];
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d80:	e040      	b.n	8001e04 <shell_exec+0x98>
		if (shell_func_list[i].c == c) {
 8001d82:	492d      	ldr	r1, [pc, #180]	@ (8001e38 <shell_exec+0xcc>)
 8001d84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001d86:	4613      	mov	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4413      	add	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	440b      	add	r3, r1
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d131      	bne.n	8001dfe <shell_exec+0x92>
			argc = 1;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001da6:	e013      	b.n	8001dd0 <shell_exec+0x64>
				if(*p == ' ') {
 8001da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b20      	cmp	r3, #32
 8001dae:	d10c      	bne.n	8001dca <shell_exec+0x5e>
					*p = '\0';
 8001db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001db2:	2200      	movs	r2, #0
 8001db4:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 8001db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001db8:	1c5a      	adds	r2, r3, #1
 8001dba:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001dbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001dbe:	3201      	adds	r2, #1
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	3340      	adds	r3, #64	@ 0x40
 8001dc4:	443b      	add	r3, r7
 8001dc6:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8001dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dcc:	3301      	adds	r3, #1
 8001dce:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d002      	beq.n	8001dde <shell_exec+0x72>
 8001dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dda:	2b07      	cmp	r3, #7
 8001ddc:	dde4      	ble.n	8001da8 <shell_exec+0x3c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 8001dde:	4916      	ldr	r1, [pc, #88]	@ (8001e38 <shell_exec+0xcc>)
 8001de0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001de2:	4613      	mov	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	440b      	add	r3, r1
 8001dec:	3304      	adds	r3, #4
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f107 020c 	add.w	r2, r7, #12
 8001df4:	4611      	mov	r1, r2
 8001df6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001df8:	4798      	blx	r3
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	e017      	b.n	8001e2e <shell_exec+0xc2>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001dfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e00:	3301      	adds	r3, #1
 8001e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e04:	4b0d      	ldr	r3, [pc, #52]	@ (8001e3c <shell_exec+0xd0>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	dbb9      	blt.n	8001d82 <shell_exec+0x16>
		}
	}

	int size;
	size = snprintf (print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8001e0e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e12:	4a0b      	ldr	r2, [pc, #44]	@ (8001e40 <shell_exec+0xd4>)
 8001e14:	2128      	movs	r1, #40	@ 0x28
 8001e16:	480b      	ldr	r0, [pc, #44]	@ (8001e44 <shell_exec+0xd8>)
 8001e18:	f009 fa60 	bl	800b2dc <sniprintf>
 8001e1c:	62f8      	str	r0, [r7, #44]	@ 0x2c
	uart_write(print_buffer, size);
 8001e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	4619      	mov	r1, r3
 8001e24:	4807      	ldr	r0, [pc, #28]	@ (8001e44 <shell_exec+0xd8>)
 8001e26:	f7ff fed9 	bl	8001bdc <uart_write>
	return -1;
 8001e2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3740      	adds	r7, #64	@ 0x40
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000c80 	.word	0x20000c80
 8001e3c:	20000c7c 	.word	0x20000c7c
 8001e40:	0800c7c4 	.word	0x0800c7c4
 8001e44:	20000f80 	.word	0x20000f80

08001e48 <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run() {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
	int reading = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	60bb      	str	r3, [r7, #8]

	static char cmd_buffer[BUFFER_SIZE];

	while (1) {
		uart_write(prompt, 2);
 8001e56:	2102      	movs	r1, #2
 8001e58:	482a      	ldr	r0, [pc, #168]	@ (8001f04 <shell_run+0xbc>)
 8001e5a:	f7ff febf 	bl	8001bdc <uart_write>
		reading = 1;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	60fb      	str	r3, [r7, #12]

		while(reading) {
 8001e62:	e047      	b.n	8001ef4 <shell_run+0xac>
			char c = uart_read();
 8001e64:	f7ff fea0 	bl	8001ba8 <uart_read>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	70fb      	strb	r3, [r7, #3]
			int size;

			switch (c) {
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d025      	beq.n	8001ebe <shell_run+0x76>
 8001e72:	2b0d      	cmp	r3, #13
 8001e74:	d12e      	bne.n	8001ed4 <shell_run+0x8c>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (print_buffer, BUFFER_SIZE, "\r\n");
 8001e76:	4a24      	ldr	r2, [pc, #144]	@ (8001f08 <shell_run+0xc0>)
 8001e78:	2128      	movs	r1, #40	@ 0x28
 8001e7a:	4824      	ldr	r0, [pc, #144]	@ (8001f0c <shell_run+0xc4>)
 8001e7c:	f009 fa2e 	bl	800b2dc <sniprintf>
 8001e80:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	4619      	mov	r1, r3
 8001e88:	4820      	ldr	r0, [pc, #128]	@ (8001f0c <shell_run+0xc4>)
 8001e8a:	f7ff fea7 	bl	8001bdc <uart_write>
				cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	1c5a      	adds	r2, r3, #1
 8001e92:	60ba      	str	r2, [r7, #8]
 8001e94:	4a1e      	ldr	r2, [pc, #120]	@ (8001f10 <shell_run+0xc8>)
 8001e96:	2100      	movs	r1, #0
 8001e98:	54d1      	strb	r1, [r2, r3]
				size = snprintf (print_buffer, BUFFER_SIZE, ":%s\r\n", cmd_buffer);
 8001e9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001f10 <shell_run+0xc8>)
 8001e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8001f14 <shell_run+0xcc>)
 8001e9e:	2128      	movs	r1, #40	@ 0x28
 8001ea0:	481a      	ldr	r0, [pc, #104]	@ (8001f0c <shell_run+0xc4>)
 8001ea2:	f009 fa1b 	bl	800b2dc <sniprintf>
 8001ea6:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	4619      	mov	r1, r3
 8001eae:	4817      	ldr	r0, [pc, #92]	@ (8001f0c <shell_run+0xc4>)
 8001eb0:	f7ff fe94 	bl	8001bdc <uart_write>
				reading = 0;        //exit read loop
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
				pos = 0;            //reset buffer
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60bb      	str	r3, [r7, #8]
				break;
 8001ebc:	e01a      	b.n	8001ef4 <shell_run+0xac>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	dd16      	ble.n	8001ef2 <shell_run+0xaa>
					pos--;          //remove it in buffer
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	60bb      	str	r3, [r7, #8]

					uart_write(backspace, 3);	// delete the char on the terminal
 8001eca:	2103      	movs	r1, #3
 8001ecc:	4812      	ldr	r0, [pc, #72]	@ (8001f18 <shell_run+0xd0>)
 8001ece:	f7ff fe85 	bl	8001bdc <uart_write>
				}
				break;
 8001ed2:	e00e      	b.n	8001ef2 <shell_run+0xaa>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2b27      	cmp	r3, #39	@ 0x27
 8001ed8:	dc0c      	bgt.n	8001ef4 <shell_run+0xac>
					uart_write(&c, 1);
 8001eda:	1cfb      	adds	r3, r7, #3
 8001edc:	2101      	movs	r1, #1
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fe7c 	bl	8001bdc <uart_write>
					cmd_buffer[pos++] = c; //store
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	60ba      	str	r2, [r7, #8]
 8001eea:	78f9      	ldrb	r1, [r7, #3]
 8001eec:	4a08      	ldr	r2, [pc, #32]	@ (8001f10 <shell_run+0xc8>)
 8001eee:	54d1      	strb	r1, [r2, r3]
 8001ef0:	e000      	b.n	8001ef4 <shell_run+0xac>
				break;
 8001ef2:	bf00      	nop
		while(reading) {
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1b4      	bne.n	8001e64 <shell_run+0x1c>
				}
			}
		}
		shell_exec(cmd_buffer);
 8001efa:	4805      	ldr	r0, [pc, #20]	@ (8001f10 <shell_run+0xc8>)
 8001efc:	f7ff ff36 	bl	8001d6c <shell_exec>
		uart_write(prompt, 2);
 8001f00:	e7a9      	b.n	8001e56 <shell_run+0xe>
 8001f02:	bf00      	nop
 8001f04:	20000008 	.word	0x20000008
 8001f08:	0800c7dc 	.word	0x0800c7dc
 8001f0c:	20000f80 	.word	0x20000f80
 8001f10:	20000fac 	.word	0x20000fac
 8001f14:	0800c7e0 	.word	0x0800c7e0
 8001f18:	20000004 	.word	0x20000004

08001f1c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f22:	2300      	movs	r3, #0
 8001f24:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f26:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <HAL_Init+0x3c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a0b      	ldr	r2, [pc, #44]	@ (8001f58 <HAL_Init+0x3c>)
 8001f2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f30:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f32:	2003      	movs	r0, #3
 8001f34:	f000 f8df 	bl	80020f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f38:	200f      	movs	r0, #15
 8001f3a:	f7ff f8e7 	bl	800110c <HAL_InitTick>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	71fb      	strb	r3, [r7, #7]
 8001f48:	e001      	b.n	8001f4e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f4a:	f7ff f8b7 	bl	80010bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40022000 	.word	0x40022000

08001f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f60:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <HAL_IncTick+0x20>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <HAL_IncTick+0x24>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	4a04      	ldr	r2, [pc, #16]	@ (8001f80 <HAL_IncTick+0x24>)
 8001f6e:	6013      	str	r3, [r2, #0]
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	20000010 	.word	0x20000010
 8001f80:	20000fd4 	.word	0x20000fd4

08001f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return uwTick;
 8001f88:	4b03      	ldr	r3, [pc, #12]	@ (8001f98 <HAL_GetTick+0x14>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	20000fd4 	.word	0x20000fd4

08001f9c <__NVIC_SetPriorityGrouping>:
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fac:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fce:	4a04      	ldr	r2, [pc, #16]	@ (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	60d3      	str	r3, [r2, #12]
}
 8001fd4:	bf00      	nop
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <__NVIC_GetPriorityGrouping>:
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe8:	4b04      	ldr	r3, [pc, #16]	@ (8001ffc <__NVIC_GetPriorityGrouping+0x18>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	0a1b      	lsrs	r3, r3, #8
 8001fee:	f003 0307 	and.w	r3, r3, #7
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_EnableIRQ>:
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	2b00      	cmp	r3, #0
 8002010:	db0b      	blt.n	800202a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	f003 021f 	and.w	r2, r3, #31
 8002018:	4907      	ldr	r1, [pc, #28]	@ (8002038 <__NVIC_EnableIRQ+0x38>)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	2001      	movs	r0, #1
 8002022:	fa00 f202 	lsl.w	r2, r0, r2
 8002026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000e100 	.word	0xe000e100

0800203c <__NVIC_SetPriority>:
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	6039      	str	r1, [r7, #0]
 8002046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204c:	2b00      	cmp	r3, #0
 800204e:	db0a      	blt.n	8002066 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	b2da      	uxtb	r2, r3
 8002054:	490c      	ldr	r1, [pc, #48]	@ (8002088 <__NVIC_SetPriority+0x4c>)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	0112      	lsls	r2, r2, #4
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	440b      	add	r3, r1
 8002060:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002064:	e00a      	b.n	800207c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	b2da      	uxtb	r2, r3
 800206a:	4908      	ldr	r1, [pc, #32]	@ (800208c <__NVIC_SetPriority+0x50>)
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	3b04      	subs	r3, #4
 8002074:	0112      	lsls	r2, r2, #4
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	440b      	add	r3, r1
 800207a:	761a      	strb	r2, [r3, #24]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000e100 	.word	0xe000e100
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <NVIC_EncodePriority>:
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	@ 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f1c3 0307 	rsb	r3, r3, #7
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	bf28      	it	cs
 80020ae:	2304      	movcs	r3, #4
 80020b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3304      	adds	r3, #4
 80020b6:	2b06      	cmp	r3, #6
 80020b8:	d902      	bls.n	80020c0 <NVIC_EncodePriority+0x30>
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3b03      	subs	r3, #3
 80020be:	e000      	b.n	80020c2 <NVIC_EncodePriority+0x32>
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43da      	mvns	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	401a      	ands	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
 80020e2:	43d9      	mvns	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	4313      	orrs	r3, r2
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3724      	adds	r7, #36	@ 0x24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff ff4c 	bl	8001f9c <__NVIC_SetPriorityGrouping>
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
 8002118:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800211e:	f7ff ff61 	bl	8001fe4 <__NVIC_GetPriorityGrouping>
 8002122:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	68b9      	ldr	r1, [r7, #8]
 8002128:	6978      	ldr	r0, [r7, #20]
 800212a:	f7ff ffb1 	bl	8002090 <NVIC_EncodePriority>
 800212e:	4602      	mov	r2, r0
 8002130:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002134:	4611      	mov	r1, r2
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff ff80 	bl	800203c <__NVIC_SetPriority>
}
 800213c:	bf00      	nop
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff ff54 	bl	8002000 <__NVIC_EnableIRQ>
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e098      	b.n	80022a4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	4b4d      	ldr	r3, [pc, #308]	@ (80022b0 <HAL_DMA_Init+0x150>)
 800217a:	429a      	cmp	r2, r3
 800217c:	d80f      	bhi.n	800219e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	4b4b      	ldr	r3, [pc, #300]	@ (80022b4 <HAL_DMA_Init+0x154>)
 8002186:	4413      	add	r3, r2
 8002188:	4a4b      	ldr	r2, [pc, #300]	@ (80022b8 <HAL_DMA_Init+0x158>)
 800218a:	fba2 2303 	umull	r2, r3, r2, r3
 800218e:	091b      	lsrs	r3, r3, #4
 8002190:	009a      	lsls	r2, r3, #2
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a48      	ldr	r2, [pc, #288]	@ (80022bc <HAL_DMA_Init+0x15c>)
 800219a:	641a      	str	r2, [r3, #64]	@ 0x40
 800219c:	e00e      	b.n	80021bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	4b46      	ldr	r3, [pc, #280]	@ (80022c0 <HAL_DMA_Init+0x160>)
 80021a6:	4413      	add	r3, r2
 80021a8:	4a43      	ldr	r2, [pc, #268]	@ (80022b8 <HAL_DMA_Init+0x158>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	091b      	lsrs	r3, r3, #4
 80021b0:	009a      	lsls	r2, r3, #2
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a42      	ldr	r2, [pc, #264]	@ (80022c4 <HAL_DMA_Init+0x164>)
 80021ba:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2202      	movs	r2, #2
 80021c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80021d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80021e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	4313      	orrs	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002216:	d039      	beq.n	800228c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221c:	4a27      	ldr	r2, [pc, #156]	@ (80022bc <HAL_DMA_Init+0x15c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d11a      	bne.n	8002258 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002222:	4b29      	ldr	r3, [pc, #164]	@ (80022c8 <HAL_DMA_Init+0x168>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222a:	f003 031c 	and.w	r3, r3, #28
 800222e:	210f      	movs	r1, #15
 8002230:	fa01 f303 	lsl.w	r3, r1, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	4924      	ldr	r1, [pc, #144]	@ (80022c8 <HAL_DMA_Init+0x168>)
 8002238:	4013      	ands	r3, r2
 800223a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800223c:	4b22      	ldr	r3, [pc, #136]	@ (80022c8 <HAL_DMA_Init+0x168>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6859      	ldr	r1, [r3, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002248:	f003 031c 	and.w	r3, r3, #28
 800224c:	fa01 f303 	lsl.w	r3, r1, r3
 8002250:	491d      	ldr	r1, [pc, #116]	@ (80022c8 <HAL_DMA_Init+0x168>)
 8002252:	4313      	orrs	r3, r2
 8002254:	600b      	str	r3, [r1, #0]
 8002256:	e019      	b.n	800228c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002258:	4b1c      	ldr	r3, [pc, #112]	@ (80022cc <HAL_DMA_Init+0x16c>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002260:	f003 031c 	and.w	r3, r3, #28
 8002264:	210f      	movs	r1, #15
 8002266:	fa01 f303 	lsl.w	r3, r1, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	4917      	ldr	r1, [pc, #92]	@ (80022cc <HAL_DMA_Init+0x16c>)
 800226e:	4013      	ands	r3, r2
 8002270:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002272:	4b16      	ldr	r3, [pc, #88]	@ (80022cc <HAL_DMA_Init+0x16c>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6859      	ldr	r1, [r3, #4]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227e:	f003 031c 	and.w	r3, r3, #28
 8002282:	fa01 f303 	lsl.w	r3, r1, r3
 8002286:	4911      	ldr	r1, [pc, #68]	@ (80022cc <HAL_DMA_Init+0x16c>)
 8002288:	4313      	orrs	r3, r2
 800228a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	40020407 	.word	0x40020407
 80022b4:	bffdfff8 	.word	0xbffdfff8
 80022b8:	cccccccd 	.word	0xcccccccd
 80022bc:	40020000 	.word	0x40020000
 80022c0:	bffdfbf8 	.word	0xbffdfbf8
 80022c4:	40020400 	.word	0x40020400
 80022c8:	400200a8 	.word	0x400200a8
 80022cc:	400204a8 	.word	0x400204a8

080022d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d101      	bne.n	80022f0 <HAL_DMA_Start_IT+0x20>
 80022ec:	2302      	movs	r3, #2
 80022ee:	e04b      	b.n	8002388 <HAL_DMA_Start_IT+0xb8>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b01      	cmp	r3, #1
 8002302:	d13a      	bne.n	800237a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2202      	movs	r2, #2
 8002308:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0201 	bic.w	r2, r2, #1
 8002320:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	68b9      	ldr	r1, [r7, #8]
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 f95f 	bl	80025ec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002332:	2b00      	cmp	r3, #0
 8002334:	d008      	beq.n	8002348 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f042 020e 	orr.w	r2, r2, #14
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	e00f      	b.n	8002368 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 0204 	bic.w	r2, r2, #4
 8002356:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 020a 	orr.w	r2, r2, #10
 8002366:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0201 	orr.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	e005      	b.n	8002386 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002382:	2302      	movs	r3, #2
 8002384:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002386:	7dfb      	ldrb	r3, [r7, #23]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d008      	beq.n	80023ba <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2204      	movs	r2, #4
 80023ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e022      	b.n	8002400 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 020e 	bic.w	r2, r2, #14
 80023c8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0201 	bic.w	r2, r2, #1
 80023d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023de:	f003 021c 	and.w	r2, r3, #28
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e6:	2101      	movs	r1, #1
 80023e8:	fa01 f202 	lsl.w	r2, r1, r2
 80023ec:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002414:	2300      	movs	r3, #0
 8002416:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d005      	beq.n	8002430 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2204      	movs	r2, #4
 8002428:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	73fb      	strb	r3, [r7, #15]
 800242e:	e029      	b.n	8002484 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 020e 	bic.w	r2, r2, #14
 800243e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0201 	bic.w	r2, r2, #1
 800244e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002454:	f003 021c 	and.w	r2, r3, #28
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245c:	2101      	movs	r1, #1
 800245e:	fa01 f202 	lsl.w	r2, r1, r2
 8002462:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	4798      	blx	r3
    }
  }
  return status;
 8002484:	7bfb      	ldrb	r3, [r7, #15]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b084      	sub	sp, #16
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024aa:	f003 031c 	and.w	r3, r3, #28
 80024ae:	2204      	movs	r2, #4
 80024b0:	409a      	lsls	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d026      	beq.n	8002508 <HAL_DMA_IRQHandler+0x7a>
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d021      	beq.n	8002508 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0320 	and.w	r3, r3, #32
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d107      	bne.n	80024e2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0204 	bic.w	r2, r2, #4
 80024e0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e6:	f003 021c 	and.w	r2, r3, #28
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ee:	2104      	movs	r1, #4
 80024f0:	fa01 f202 	lsl.w	r2, r1, r2
 80024f4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d071      	beq.n	80025e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002506:	e06c      	b.n	80025e2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250c:	f003 031c 	and.w	r3, r3, #28
 8002510:	2202      	movs	r2, #2
 8002512:	409a      	lsls	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4013      	ands	r3, r2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d02e      	beq.n	800257a <HAL_DMA_IRQHandler+0xec>
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d029      	beq.n	800257a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0320 	and.w	r3, r3, #32
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10b      	bne.n	800254c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 020a 	bic.w	r2, r2, #10
 8002542:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002550:	f003 021c 	and.w	r2, r3, #28
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002558:	2102      	movs	r1, #2
 800255a:	fa01 f202 	lsl.w	r2, r1, r2
 800255e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256c:	2b00      	cmp	r3, #0
 800256e:	d038      	beq.n	80025e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002578:	e033      	b.n	80025e2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257e:	f003 031c 	and.w	r3, r3, #28
 8002582:	2208      	movs	r2, #8
 8002584:	409a      	lsls	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4013      	ands	r3, r2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d02a      	beq.n	80025e4 <HAL_DMA_IRQHandler+0x156>
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b00      	cmp	r3, #0
 8002596:	d025      	beq.n	80025e4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 020e 	bic.w	r2, r2, #14
 80025a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ac:	f003 021c 	and.w	r2, r3, #28
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b4:	2101      	movs	r1, #1
 80025b6:	fa01 f202 	lsl.w	r2, r1, r2
 80025ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d004      	beq.n	80025e4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80025e2:	bf00      	nop
 80025e4:	bf00      	nop
}
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fe:	f003 021c 	and.w	r2, r3, #28
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002606:	2101      	movs	r1, #1
 8002608:	fa01 f202 	lsl.w	r2, r1, r2
 800260c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b10      	cmp	r3, #16
 800261c:	d108      	bne.n	8002630 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800262e:	e007      	b.n	8002640 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	60da      	str	r2, [r3, #12]
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800264c:	b480      	push	{r7}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800265a:	e17f      	b.n	800295c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	2101      	movs	r1, #1
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	fa01 f303 	lsl.w	r3, r1, r3
 8002668:	4013      	ands	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 8171 	beq.w	8002956 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	2b01      	cmp	r3, #1
 800267e:	d005      	beq.n	800268c <HAL_GPIO_Init+0x40>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 0303 	and.w	r3, r3, #3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d130      	bne.n	80026ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	2203      	movs	r2, #3
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4013      	ands	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026c2:	2201      	movs	r2, #1
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4013      	ands	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	091b      	lsrs	r3, r3, #4
 80026d8:	f003 0201 	and.w	r2, r3, #1
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	d118      	bne.n	800272c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002700:	2201      	movs	r2, #1
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4013      	ands	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	08db      	lsrs	r3, r3, #3
 8002716:	f003 0201 	and.w	r2, r3, #1
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	2b03      	cmp	r3, #3
 8002736:	d017      	beq.n	8002768 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	2203      	movs	r2, #3
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d123      	bne.n	80027bc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	08da      	lsrs	r2, r3, #3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3208      	adds	r2, #8
 800277c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002780:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	220f      	movs	r2, #15
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4013      	ands	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	691a      	ldr	r2, [r3, #16]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	08da      	lsrs	r2, r3, #3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3208      	adds	r2, #8
 80027b6:	6939      	ldr	r1, [r7, #16]
 80027b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	2203      	movs	r2, #3
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0203 	and.w	r2, r3, #3
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 80ac 	beq.w	8002956 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fe:	4b5f      	ldr	r3, [pc, #380]	@ (800297c <HAL_GPIO_Init+0x330>)
 8002800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002802:	4a5e      	ldr	r2, [pc, #376]	@ (800297c <HAL_GPIO_Init+0x330>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6613      	str	r3, [r2, #96]	@ 0x60
 800280a:	4b5c      	ldr	r3, [pc, #368]	@ (800297c <HAL_GPIO_Init+0x330>)
 800280c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002816:	4a5a      	ldr	r2, [pc, #360]	@ (8002980 <HAL_GPIO_Init+0x334>)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	089b      	lsrs	r3, r3, #2
 800281c:	3302      	adds	r3, #2
 800281e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002822:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	220f      	movs	r2, #15
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4013      	ands	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002840:	d025      	beq.n	800288e <HAL_GPIO_Init+0x242>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a4f      	ldr	r2, [pc, #316]	@ (8002984 <HAL_GPIO_Init+0x338>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d01f      	beq.n	800288a <HAL_GPIO_Init+0x23e>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a4e      	ldr	r2, [pc, #312]	@ (8002988 <HAL_GPIO_Init+0x33c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d019      	beq.n	8002886 <HAL_GPIO_Init+0x23a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a4d      	ldr	r2, [pc, #308]	@ (800298c <HAL_GPIO_Init+0x340>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d013      	beq.n	8002882 <HAL_GPIO_Init+0x236>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a4c      	ldr	r2, [pc, #304]	@ (8002990 <HAL_GPIO_Init+0x344>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d00d      	beq.n	800287e <HAL_GPIO_Init+0x232>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a4b      	ldr	r2, [pc, #300]	@ (8002994 <HAL_GPIO_Init+0x348>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d007      	beq.n	800287a <HAL_GPIO_Init+0x22e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a4a      	ldr	r2, [pc, #296]	@ (8002998 <HAL_GPIO_Init+0x34c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d101      	bne.n	8002876 <HAL_GPIO_Init+0x22a>
 8002872:	2306      	movs	r3, #6
 8002874:	e00c      	b.n	8002890 <HAL_GPIO_Init+0x244>
 8002876:	2307      	movs	r3, #7
 8002878:	e00a      	b.n	8002890 <HAL_GPIO_Init+0x244>
 800287a:	2305      	movs	r3, #5
 800287c:	e008      	b.n	8002890 <HAL_GPIO_Init+0x244>
 800287e:	2304      	movs	r3, #4
 8002880:	e006      	b.n	8002890 <HAL_GPIO_Init+0x244>
 8002882:	2303      	movs	r3, #3
 8002884:	e004      	b.n	8002890 <HAL_GPIO_Init+0x244>
 8002886:	2302      	movs	r3, #2
 8002888:	e002      	b.n	8002890 <HAL_GPIO_Init+0x244>
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <HAL_GPIO_Init+0x244>
 800288e:	2300      	movs	r3, #0
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	f002 0203 	and.w	r2, r2, #3
 8002896:	0092      	lsls	r2, r2, #2
 8002898:	4093      	lsls	r3, r2
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028a0:	4937      	ldr	r1, [pc, #220]	@ (8002980 <HAL_GPIO_Init+0x334>)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	089b      	lsrs	r3, r3, #2
 80028a6:	3302      	adds	r3, #2
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028ae:	4b3b      	ldr	r3, [pc, #236]	@ (800299c <HAL_GPIO_Init+0x350>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	43db      	mvns	r3, r3
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4013      	ands	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028d2:	4a32      	ldr	r2, [pc, #200]	@ (800299c <HAL_GPIO_Init+0x350>)
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028d8:	4b30      	ldr	r3, [pc, #192]	@ (800299c <HAL_GPIO_Init+0x350>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	43db      	mvns	r3, r3
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4013      	ands	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028fc:	4a27      	ldr	r2, [pc, #156]	@ (800299c <HAL_GPIO_Init+0x350>)
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002902:	4b26      	ldr	r3, [pc, #152]	@ (800299c <HAL_GPIO_Init+0x350>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	43db      	mvns	r3, r3
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4013      	ands	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002926:	4a1d      	ldr	r2, [pc, #116]	@ (800299c <HAL_GPIO_Init+0x350>)
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800292c:	4b1b      	ldr	r3, [pc, #108]	@ (800299c <HAL_GPIO_Init+0x350>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	43db      	mvns	r3, r3
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4013      	ands	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002950:	4a12      	ldr	r2, [pc, #72]	@ (800299c <HAL_GPIO_Init+0x350>)
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	3301      	adds	r3, #1
 800295a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	fa22 f303 	lsr.w	r3, r2, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	f47f ae78 	bne.w	800265c <HAL_GPIO_Init+0x10>
  }
}
 800296c:	bf00      	nop
 800296e:	bf00      	nop
 8002970:	371c      	adds	r7, #28
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	40021000 	.word	0x40021000
 8002980:	40010000 	.word	0x40010000
 8002984:	48000400 	.word	0x48000400
 8002988:	48000800 	.word	0x48000800
 800298c:	48000c00 	.word	0x48000c00
 8002990:	48001000 	.word	0x48001000
 8002994:	48001400 	.word	0x48001400
 8002998:	48001800 	.word	0x48001800
 800299c:	40010400 	.word	0x40010400

080029a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	807b      	strh	r3, [r7, #2]
 80029ac:	4613      	mov	r3, r2
 80029ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029b0:	787b      	ldrb	r3, [r7, #1]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029b6:	887a      	ldrh	r2, [r7, #2]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029bc:	e002      	b.n	80029c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029be:	887a      	ldrh	r2, [r7, #2]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029e2:	887a      	ldrh	r2, [r7, #2]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4013      	ands	r3, r2
 80029e8:	041a      	lsls	r2, r3, #16
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	43d9      	mvns	r1, r3
 80029ee:	887b      	ldrh	r3, [r7, #2]
 80029f0:	400b      	ands	r3, r1
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	619a      	str	r2, [r3, #24]
}
 80029f8:	bf00      	nop
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e08d      	b.n	8002b32 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7fd feb8 	bl	80007a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2224      	movs	r2, #36	@ 0x24
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0201 	bic.w	r2, r2, #1
 8002a46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d107      	bne.n	8002a7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	e006      	b.n	8002a8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002a8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d108      	bne.n	8002aa6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002aa2:	605a      	str	r2, [r3, #4]
 8002aa4:	e007      	b.n	8002ab6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ab4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ac4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ac8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ad8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69d9      	ldr	r1, [r3, #28]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a1a      	ldr	r2, [r3, #32]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
	...

08002b3c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af02      	add	r7, sp, #8
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	4608      	mov	r0, r1
 8002b46:	4611      	mov	r1, r2
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	817b      	strh	r3, [r7, #10]
 8002b4e:	460b      	mov	r3, r1
 8002b50:	813b      	strh	r3, [r7, #8]
 8002b52:	4613      	mov	r3, r2
 8002b54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b20      	cmp	r3, #32
 8002b60:	f040 80f9 	bne.w	8002d56 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <HAL_I2C_Mem_Write+0x34>
 8002b6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d105      	bne.n	8002b7c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b76:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e0ed      	b.n	8002d58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_I2C_Mem_Write+0x4e>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e0e6      	b.n	8002d58 <HAL_I2C_Mem_Write+0x21c>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b92:	f7ff f9f7 	bl	8001f84 <HAL_GetTick>
 8002b96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	2319      	movs	r3, #25
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 fac3 	bl	8003130 <I2C_WaitOnFlagUntilTimeout>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0d1      	b.n	8002d58 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2221      	movs	r2, #33	@ 0x21
 8002bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2240      	movs	r2, #64	@ 0x40
 8002bc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a3a      	ldr	r2, [r7, #32]
 8002bce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002bd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bdc:	88f8      	ldrh	r0, [r7, #6]
 8002bde:	893a      	ldrh	r2, [r7, #8]
 8002be0:	8979      	ldrh	r1, [r7, #10]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	9301      	str	r3, [sp, #4]
 8002be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	4603      	mov	r3, r0
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 f9d3 	bl	8002f98 <I2C_RequestMemoryWrite>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d005      	beq.n	8002c04 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e0a9      	b.n	8002d58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	2bff      	cmp	r3, #255	@ 0xff
 8002c0c:	d90e      	bls.n	8002c2c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	22ff      	movs	r2, #255	@ 0xff
 8002c12:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	8979      	ldrh	r1, [r7, #10]
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 fc47 	bl	80034b8 <I2C_TransferConfig>
 8002c2a:	e00f      	b.n	8002c4c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	8979      	ldrh	r1, [r7, #10]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 fc36 	bl	80034b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 fac6 	bl	80031e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e07b      	b.n	8002d58 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c64:	781a      	ldrb	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d034      	beq.n	8002d04 <HAL_I2C_Mem_Write+0x1c8>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d130      	bne.n	8002d04 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2180      	movs	r1, #128	@ 0x80
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 fa3f 	bl	8003130 <I2C_WaitOnFlagUntilTimeout>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e04d      	b.n	8002d58 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	2bff      	cmp	r3, #255	@ 0xff
 8002cc4:	d90e      	bls.n	8002ce4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	22ff      	movs	r2, #255	@ 0xff
 8002cca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	8979      	ldrh	r1, [r7, #10]
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 fbeb 	bl	80034b8 <I2C_TransferConfig>
 8002ce2:	e00f      	b.n	8002d04 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	8979      	ldrh	r1, [r7, #10]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 fbda 	bl	80034b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d19e      	bne.n	8002c4c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 faac 	bl	8003270 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e01a      	b.n	8002d58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2220      	movs	r2, #32
 8002d28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6859      	ldr	r1, [r3, #4]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	4b0a      	ldr	r3, [pc, #40]	@ (8002d60 <HAL_I2C_Mem_Write+0x224>)
 8002d36:	400b      	ands	r3, r1
 8002d38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	e000      	b.n	8002d58 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002d56:	2302      	movs	r3, #2
  }
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	fe00e800 	.word	0xfe00e800

08002d64 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b088      	sub	sp, #32
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	4608      	mov	r0, r1
 8002d6e:	4611      	mov	r1, r2
 8002d70:	461a      	mov	r2, r3
 8002d72:	4603      	mov	r3, r0
 8002d74:	817b      	strh	r3, [r7, #10]
 8002d76:	460b      	mov	r3, r1
 8002d78:	813b      	strh	r3, [r7, #8]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b20      	cmp	r3, #32
 8002d88:	f040 80fd 	bne.w	8002f86 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <HAL_I2C_Mem_Read+0x34>
 8002d92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d105      	bne.n	8002da4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d9e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0f1      	b.n	8002f88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d101      	bne.n	8002db2 <HAL_I2C_Mem_Read+0x4e>
 8002dae:	2302      	movs	r3, #2
 8002db0:	e0ea      	b.n	8002f88 <HAL_I2C_Mem_Read+0x224>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dba:	f7ff f8e3 	bl	8001f84 <HAL_GetTick>
 8002dbe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	2319      	movs	r3, #25
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 f9af 	bl	8003130 <I2C_WaitOnFlagUntilTimeout>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0d5      	b.n	8002f88 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2222      	movs	r2, #34	@ 0x22
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2240      	movs	r2, #64	@ 0x40
 8002de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a3a      	ldr	r2, [r7, #32]
 8002df6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002dfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e04:	88f8      	ldrh	r0, [r7, #6]
 8002e06:	893a      	ldrh	r2, [r7, #8]
 8002e08:	8979      	ldrh	r1, [r7, #10]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	9301      	str	r3, [sp, #4]
 8002e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	4603      	mov	r3, r0
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 f913 	bl	8003040 <I2C_RequestMemoryRead>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0ad      	b.n	8002f88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2bff      	cmp	r3, #255	@ 0xff
 8002e34:	d90e      	bls.n	8002e54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	8979      	ldrh	r1, [r7, #10]
 8002e44:	4b52      	ldr	r3, [pc, #328]	@ (8002f90 <HAL_I2C_Mem_Read+0x22c>)
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 fb33 	bl	80034b8 <I2C_TransferConfig>
 8002e52:	e00f      	b.n	8002e74 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	8979      	ldrh	r1, [r7, #10]
 8002e66:	4b4a      	ldr	r3, [pc, #296]	@ (8002f90 <HAL_I2C_Mem_Read+0x22c>)
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 fb22 	bl	80034b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2104      	movs	r1, #4
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 f956 	bl	8003130 <I2C_WaitOnFlagUntilTimeout>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e07c      	b.n	8002f88 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d034      	beq.n	8002f34 <HAL_I2C_Mem_Read+0x1d0>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d130      	bne.n	8002f34 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2180      	movs	r1, #128	@ 0x80
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f927 	bl	8003130 <I2C_WaitOnFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e04d      	b.n	8002f88 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2bff      	cmp	r3, #255	@ 0xff
 8002ef4:	d90e      	bls.n	8002f14 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	8979      	ldrh	r1, [r7, #10]
 8002f04:	2300      	movs	r3, #0
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 fad3 	bl	80034b8 <I2C_TransferConfig>
 8002f12:	e00f      	b.n	8002f34 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	8979      	ldrh	r1, [r7, #10]
 8002f26:	2300      	movs	r3, #0
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 fac2 	bl	80034b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d19a      	bne.n	8002e74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 f994 	bl	8003270 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e01a      	b.n	8002f88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2220      	movs	r2, #32
 8002f58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6859      	ldr	r1, [r3, #4]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	4b0b      	ldr	r3, [pc, #44]	@ (8002f94 <HAL_I2C_Mem_Read+0x230>)
 8002f66:	400b      	ands	r3, r1
 8002f68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e000      	b.n	8002f88 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002f86:	2302      	movs	r3, #2
  }
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	80002400 	.word	0x80002400
 8002f94:	fe00e800 	.word	0xfe00e800

08002f98 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af02      	add	r7, sp, #8
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	4608      	mov	r0, r1
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	817b      	strh	r3, [r7, #10]
 8002faa:	460b      	mov	r3, r1
 8002fac:	813b      	strh	r3, [r7, #8]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002fb2:	88fb      	ldrh	r3, [r7, #6]
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	8979      	ldrh	r1, [r7, #10]
 8002fb8:	4b20      	ldr	r3, [pc, #128]	@ (800303c <I2C_RequestMemoryWrite+0xa4>)
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 fa79 	bl	80034b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fc6:	69fa      	ldr	r2, [r7, #28]
 8002fc8:	69b9      	ldr	r1, [r7, #24]
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 f909 	bl	80031e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e02c      	b.n	8003034 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d105      	bne.n	8002fec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fe0:	893b      	ldrh	r3, [r7, #8]
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002fea:	e015      	b.n	8003018 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002fec:	893b      	ldrh	r3, [r7, #8]
 8002fee:	0a1b      	lsrs	r3, r3, #8
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ffa:	69fa      	ldr	r2, [r7, #28]
 8002ffc:	69b9      	ldr	r1, [r7, #24]
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 f8ef 	bl	80031e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e012      	b.n	8003034 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800300e:	893b      	ldrh	r3, [r7, #8]
 8003010:	b2da      	uxtb	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	2200      	movs	r2, #0
 8003020:	2180      	movs	r1, #128	@ 0x80
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 f884 	bl	8003130 <I2C_WaitOnFlagUntilTimeout>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	80002000 	.word	0x80002000

08003040 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af02      	add	r7, sp, #8
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	4608      	mov	r0, r1
 800304a:	4611      	mov	r1, r2
 800304c:	461a      	mov	r2, r3
 800304e:	4603      	mov	r3, r0
 8003050:	817b      	strh	r3, [r7, #10]
 8003052:	460b      	mov	r3, r1
 8003054:	813b      	strh	r3, [r7, #8]
 8003056:	4613      	mov	r3, r2
 8003058:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	b2da      	uxtb	r2, r3
 800305e:	8979      	ldrh	r1, [r7, #10]
 8003060:	4b20      	ldr	r3, [pc, #128]	@ (80030e4 <I2C_RequestMemoryRead+0xa4>)
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	2300      	movs	r3, #0
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 fa26 	bl	80034b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800306c:	69fa      	ldr	r2, [r7, #28]
 800306e:	69b9      	ldr	r1, [r7, #24]
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 f8b6 	bl	80031e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e02c      	b.n	80030da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003080:	88fb      	ldrh	r3, [r7, #6]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d105      	bne.n	8003092 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003086:	893b      	ldrh	r3, [r7, #8]
 8003088:	b2da      	uxtb	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003090:	e015      	b.n	80030be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003092:	893b      	ldrh	r3, [r7, #8]
 8003094:	0a1b      	lsrs	r3, r3, #8
 8003096:	b29b      	uxth	r3, r3
 8003098:	b2da      	uxtb	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030a0:	69fa      	ldr	r2, [r7, #28]
 80030a2:	69b9      	ldr	r1, [r7, #24]
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 f89c 	bl	80031e2 <I2C_WaitOnTXISFlagUntilTimeout>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e012      	b.n	80030da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030b4:	893b      	ldrh	r3, [r7, #8]
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	2200      	movs	r2, #0
 80030c6:	2140      	movs	r1, #64	@ 0x40
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 f831 	bl	8003130 <I2C_WaitOnFlagUntilTimeout>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	80002000 	.word	0x80002000

080030e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d103      	bne.n	8003106 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2200      	movs	r2, #0
 8003104:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b01      	cmp	r3, #1
 8003112:	d007      	beq.n	8003124 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699a      	ldr	r2, [r3, #24]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	619a      	str	r2, [r3, #24]
  }
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	603b      	str	r3, [r7, #0]
 800313c:	4613      	mov	r3, r2
 800313e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003140:	e03b      	b.n	80031ba <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	6839      	ldr	r1, [r7, #0]
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f8d6 	bl	80032f8 <I2C_IsErrorOccurred>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e041      	b.n	80031da <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800315c:	d02d      	beq.n	80031ba <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315e:	f7fe ff11 	bl	8001f84 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	429a      	cmp	r2, r3
 800316c:	d302      	bcc.n	8003174 <I2C_WaitOnFlagUntilTimeout+0x44>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d122      	bne.n	80031ba <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	699a      	ldr	r2, [r3, #24]
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	4013      	ands	r3, r2
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	429a      	cmp	r2, r3
 8003182:	bf0c      	ite	eq
 8003184:	2301      	moveq	r3, #1
 8003186:	2300      	movne	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	461a      	mov	r2, r3
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	429a      	cmp	r2, r3
 8003190:	d113      	bne.n	80031ba <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003196:	f043 0220 	orr.w	r2, r3, #32
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2220      	movs	r2, #32
 80031a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e00f      	b.n	80031da <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	699a      	ldr	r2, [r3, #24]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	4013      	ands	r3, r2
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	bf0c      	ite	eq
 80031ca:	2301      	moveq	r3, #1
 80031cc:	2300      	movne	r3, #0
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	461a      	mov	r2, r3
 80031d2:	79fb      	ldrb	r3, [r7, #7]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d0b4      	beq.n	8003142 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b084      	sub	sp, #16
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	60f8      	str	r0, [r7, #12]
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031ee:	e033      	b.n	8003258 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	68b9      	ldr	r1, [r7, #8]
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 f87f 	bl	80032f8 <I2C_IsErrorOccurred>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e031      	b.n	8003268 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800320a:	d025      	beq.n	8003258 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800320c:	f7fe feba 	bl	8001f84 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	429a      	cmp	r2, r3
 800321a:	d302      	bcc.n	8003222 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d11a      	bne.n	8003258 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b02      	cmp	r3, #2
 800322e:	d013      	beq.n	8003258 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003234:	f043 0220 	orr.w	r2, r3, #32
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e007      	b.n	8003268 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b02      	cmp	r3, #2
 8003264:	d1c4      	bne.n	80031f0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800327c:	e02f      	b.n	80032de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	68b9      	ldr	r1, [r7, #8]
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 f838 	bl	80032f8 <I2C_IsErrorOccurred>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e02d      	b.n	80032ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003292:	f7fe fe77 	bl	8001f84 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d302      	bcc.n	80032a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d11a      	bne.n	80032de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	f003 0320 	and.w	r3, r3, #32
 80032b2:	2b20      	cmp	r3, #32
 80032b4:	d013      	beq.n	80032de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ba:	f043 0220 	orr.w	r2, r3, #32
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2220      	movs	r2, #32
 80032c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e007      	b.n	80032ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	f003 0320 	and.w	r3, r3, #32
 80032e8:	2b20      	cmp	r3, #32
 80032ea:	d1c8      	bne.n	800327e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
	...

080032f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08a      	sub	sp, #40	@ 0x28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003312:	2300      	movs	r3, #0
 8003314:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	f003 0310 	and.w	r3, r3, #16
 8003320:	2b00      	cmp	r3, #0
 8003322:	d068      	beq.n	80033f6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2210      	movs	r2, #16
 800332a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800332c:	e049      	b.n	80033c2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003334:	d045      	beq.n	80033c2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003336:	f7fe fe25 	bl	8001f84 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	429a      	cmp	r2, r3
 8003344:	d302      	bcc.n	800334c <I2C_IsErrorOccurred+0x54>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d13a      	bne.n	80033c2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003356:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800335e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800336a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800336e:	d121      	bne.n	80033b4 <I2C_IsErrorOccurred+0xbc>
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003376:	d01d      	beq.n	80033b4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003378:	7cfb      	ldrb	r3, [r7, #19]
 800337a:	2b20      	cmp	r3, #32
 800337c:	d01a      	beq.n	80033b4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800338c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800338e:	f7fe fdf9 	bl	8001f84 <HAL_GetTick>
 8003392:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003394:	e00e      	b.n	80033b4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003396:	f7fe fdf5 	bl	8001f84 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b19      	cmp	r3, #25
 80033a2:	d907      	bls.n	80033b4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	f043 0320 	orr.w	r3, r3, #32
 80033aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80033b2:	e006      	b.n	80033c2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	f003 0320 	and.w	r3, r3, #32
 80033be:	2b20      	cmp	r3, #32
 80033c0:	d1e9      	bne.n	8003396 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	f003 0320 	and.w	r3, r3, #32
 80033cc:	2b20      	cmp	r3, #32
 80033ce:	d003      	beq.n	80033d8 <I2C_IsErrorOccurred+0xe0>
 80033d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0aa      	beq.n	800332e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80033d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d103      	bne.n	80033e8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2220      	movs	r2, #32
 80033e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	f043 0304 	orr.w	r3, r3, #4
 80033ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00b      	beq.n	8003420 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	f043 0301 	orr.w	r3, r3, #1
 800340e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003418:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00b      	beq.n	8003442 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	f043 0308 	orr.w	r3, r3, #8
 8003430:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800343a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00b      	beq.n	8003464 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	f043 0302 	orr.w	r3, r3, #2
 8003452:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800345c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003464:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003468:	2b00      	cmp	r3, #0
 800346a:	d01c      	beq.n	80034a6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f7ff fe3b 	bl	80030e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6859      	ldr	r1, [r3, #4]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	4b0d      	ldr	r3, [pc, #52]	@ (80034b4 <I2C_IsErrorOccurred+0x1bc>)
 800347e:	400b      	ands	r3, r1
 8003480:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	431a      	orrs	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2220      	movs	r2, #32
 8003492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80034a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3728      	adds	r7, #40	@ 0x28
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	fe00e800 	.word	0xfe00e800

080034b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	607b      	str	r3, [r7, #4]
 80034c2:	460b      	mov	r3, r1
 80034c4:	817b      	strh	r3, [r7, #10]
 80034c6:	4613      	mov	r3, r2
 80034c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034ca:	897b      	ldrh	r3, [r7, #10]
 80034cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034d0:	7a7b      	ldrb	r3, [r7, #9]
 80034d2:	041b      	lsls	r3, r3, #16
 80034d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	0d5b      	lsrs	r3, r3, #21
 80034f2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80034f6:	4b08      	ldr	r3, [pc, #32]	@ (8003518 <I2C_TransferConfig+0x60>)
 80034f8:	430b      	orrs	r3, r1
 80034fa:	43db      	mvns	r3, r3
 80034fc:	ea02 0103 	and.w	r1, r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	430a      	orrs	r2, r1
 8003508:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800350a:	bf00      	nop
 800350c:	371c      	adds	r7, #28
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	03ff63ff 	.word	0x03ff63ff

0800351c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b20      	cmp	r3, #32
 8003530:	d138      	bne.n	80035a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800353c:	2302      	movs	r3, #2
 800353e:	e032      	b.n	80035a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2224      	movs	r2, #36	@ 0x24
 800354c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0201 	bic.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800356e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6819      	ldr	r1, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0201 	orr.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035a0:	2300      	movs	r3, #0
 80035a2:	e000      	b.n	80035a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035a4:	2302      	movs	r3, #2
  }
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b085      	sub	sp, #20
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b20      	cmp	r3, #32
 80035c6:	d139      	bne.n	800363c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e033      	b.n	800363e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2224      	movs	r2, #36	@ 0x24
 80035e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0201 	bic.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003604:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	021b      	lsls	r3, r3, #8
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4313      	orrs	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0201 	orr.w	r2, r2, #1
 8003626:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	e000      	b.n	800363e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800363c:	2302      	movs	r3, #2
  }
}
 800363e:	4618      	mov	r0, r3
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
	...

0800364c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003650:	4b04      	ldr	r3, [pc, #16]	@ (8003664 <HAL_PWREx_GetVoltageRange+0x18>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003658:	4618      	mov	r0, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	40007000 	.word	0x40007000

08003668 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003676:	d130      	bne.n	80036da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003678:	4b23      	ldr	r3, [pc, #140]	@ (8003708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003684:	d038      	beq.n	80036f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003686:	4b20      	ldr	r3, [pc, #128]	@ (8003708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800368e:	4a1e      	ldr	r2, [pc, #120]	@ (8003708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003690:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003694:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003696:	4b1d      	ldr	r3, [pc, #116]	@ (800370c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2232      	movs	r2, #50	@ 0x32
 800369c:	fb02 f303 	mul.w	r3, r2, r3
 80036a0:	4a1b      	ldr	r2, [pc, #108]	@ (8003710 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80036a2:	fba2 2303 	umull	r2, r3, r2, r3
 80036a6:	0c9b      	lsrs	r3, r3, #18
 80036a8:	3301      	adds	r3, #1
 80036aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036ac:	e002      	b.n	80036b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	3b01      	subs	r3, #1
 80036b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036b4:	4b14      	ldr	r3, [pc, #80]	@ (8003708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036c0:	d102      	bne.n	80036c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1f2      	bne.n	80036ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036d4:	d110      	bne.n	80036f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e00f      	b.n	80036fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036da:	4b0b      	ldr	r3, [pc, #44]	@ (8003708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80036e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036e6:	d007      	beq.n	80036f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036e8:	4b07      	ldr	r3, [pc, #28]	@ (8003708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80036f0:	4a05      	ldr	r2, [pc, #20]	@ (8003708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40007000 	.word	0x40007000
 800370c:	20000000 	.word	0x20000000
 8003710:	431bde83 	.word	0x431bde83

08003714 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e3ca      	b.n	8003ebc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003726:	4b97      	ldr	r3, [pc, #604]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 030c 	and.w	r3, r3, #12
 800372e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003730:	4b94      	ldr	r3, [pc, #592]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0310 	and.w	r3, r3, #16
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 80e4 	beq.w	8003910 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d007      	beq.n	800375e <HAL_RCC_OscConfig+0x4a>
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	2b0c      	cmp	r3, #12
 8003752:	f040 808b 	bne.w	800386c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2b01      	cmp	r3, #1
 800375a:	f040 8087 	bne.w	800386c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800375e:	4b89      	ldr	r3, [pc, #548]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d005      	beq.n	8003776 <HAL_RCC_OscConfig+0x62>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e3a2      	b.n	8003ebc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1a      	ldr	r2, [r3, #32]
 800377a:	4b82      	ldr	r3, [pc, #520]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0308 	and.w	r3, r3, #8
 8003782:	2b00      	cmp	r3, #0
 8003784:	d004      	beq.n	8003790 <HAL_RCC_OscConfig+0x7c>
 8003786:	4b7f      	ldr	r3, [pc, #508]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800378e:	e005      	b.n	800379c <HAL_RCC_OscConfig+0x88>
 8003790:	4b7c      	ldr	r3, [pc, #496]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 8003792:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003796:	091b      	lsrs	r3, r3, #4
 8003798:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800379c:	4293      	cmp	r3, r2
 800379e:	d223      	bcs.n	80037e8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 fd87 	bl	80042b8 <RCC_SetFlashLatencyFromMSIRange>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e383      	b.n	8003ebc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037b4:	4b73      	ldr	r3, [pc, #460]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a72      	ldr	r2, [pc, #456]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 80037ba:	f043 0308 	orr.w	r3, r3, #8
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	4b70      	ldr	r3, [pc, #448]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	496d      	ldr	r1, [pc, #436]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037d2:	4b6c      	ldr	r3, [pc, #432]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	021b      	lsls	r3, r3, #8
 80037e0:	4968      	ldr	r1, [pc, #416]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	604b      	str	r3, [r1, #4]
 80037e6:	e025      	b.n	8003834 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037e8:	4b66      	ldr	r3, [pc, #408]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a65      	ldr	r2, [pc, #404]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 80037ee:	f043 0308 	orr.w	r3, r3, #8
 80037f2:	6013      	str	r3, [r2, #0]
 80037f4:	4b63      	ldr	r3, [pc, #396]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	4960      	ldr	r1, [pc, #384]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 8003802:	4313      	orrs	r3, r2
 8003804:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003806:	4b5f      	ldr	r3, [pc, #380]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	021b      	lsls	r3, r3, #8
 8003814:	495b      	ldr	r1, [pc, #364]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 8003816:	4313      	orrs	r3, r2
 8003818:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d109      	bne.n	8003834 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	4618      	mov	r0, r3
 8003826:	f000 fd47 	bl	80042b8 <RCC_SetFlashLatencyFromMSIRange>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e343      	b.n	8003ebc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003834:	f000 fc4a 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 8003838:	4602      	mov	r2, r0
 800383a:	4b52      	ldr	r3, [pc, #328]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	091b      	lsrs	r3, r3, #4
 8003840:	f003 030f 	and.w	r3, r3, #15
 8003844:	4950      	ldr	r1, [pc, #320]	@ (8003988 <HAL_RCC_OscConfig+0x274>)
 8003846:	5ccb      	ldrb	r3, [r1, r3]
 8003848:	f003 031f 	and.w	r3, r3, #31
 800384c:	fa22 f303 	lsr.w	r3, r2, r3
 8003850:	4a4e      	ldr	r2, [pc, #312]	@ (800398c <HAL_RCC_OscConfig+0x278>)
 8003852:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003854:	4b4e      	ldr	r3, [pc, #312]	@ (8003990 <HAL_RCC_OscConfig+0x27c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f7fd fc57 	bl	800110c <HAL_InitTick>
 800385e:	4603      	mov	r3, r0
 8003860:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003862:	7bfb      	ldrb	r3, [r7, #15]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d052      	beq.n	800390e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003868:	7bfb      	ldrb	r3, [r7, #15]
 800386a:	e327      	b.n	8003ebc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d032      	beq.n	80038da <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003874:	4b43      	ldr	r3, [pc, #268]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a42      	ldr	r2, [pc, #264]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003880:	f7fe fb80 	bl	8001f84 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003888:	f7fe fb7c 	bl	8001f84 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e310      	b.n	8003ebc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800389a:	4b3a      	ldr	r3, [pc, #232]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038a6:	4b37      	ldr	r3, [pc, #220]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a36      	ldr	r2, [pc, #216]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 80038ac:	f043 0308 	orr.w	r3, r3, #8
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	4b34      	ldr	r3, [pc, #208]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	4931      	ldr	r1, [pc, #196]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038c4:	4b2f      	ldr	r3, [pc, #188]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	021b      	lsls	r3, r3, #8
 80038d2:	492c      	ldr	r1, [pc, #176]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	604b      	str	r3, [r1, #4]
 80038d8:	e01a      	b.n	8003910 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038da:	4b2a      	ldr	r3, [pc, #168]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a29      	ldr	r2, [pc, #164]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 80038e0:	f023 0301 	bic.w	r3, r3, #1
 80038e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038e6:	f7fe fb4d 	bl	8001f84 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038ee:	f7fe fb49 	bl	8001f84 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e2dd      	b.n	8003ebc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003900:	4b20      	ldr	r3, [pc, #128]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1f0      	bne.n	80038ee <HAL_RCC_OscConfig+0x1da>
 800390c:	e000      	b.n	8003910 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800390e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b00      	cmp	r3, #0
 800391a:	d074      	beq.n	8003a06 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	2b08      	cmp	r3, #8
 8003920:	d005      	beq.n	800392e <HAL_RCC_OscConfig+0x21a>
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	2b0c      	cmp	r3, #12
 8003926:	d10e      	bne.n	8003946 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	2b03      	cmp	r3, #3
 800392c:	d10b      	bne.n	8003946 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800392e:	4b15      	ldr	r3, [pc, #84]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d064      	beq.n	8003a04 <HAL_RCC_OscConfig+0x2f0>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d160      	bne.n	8003a04 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e2ba      	b.n	8003ebc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800394e:	d106      	bne.n	800395e <HAL_RCC_OscConfig+0x24a>
 8003950:	4b0c      	ldr	r3, [pc, #48]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a0b      	ldr	r2, [pc, #44]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 8003956:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	e026      	b.n	80039ac <HAL_RCC_OscConfig+0x298>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003966:	d115      	bne.n	8003994 <HAL_RCC_OscConfig+0x280>
 8003968:	4b06      	ldr	r3, [pc, #24]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a05      	ldr	r2, [pc, #20]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 800396e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003972:	6013      	str	r3, [r2, #0]
 8003974:	4b03      	ldr	r3, [pc, #12]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a02      	ldr	r2, [pc, #8]	@ (8003984 <HAL_RCC_OscConfig+0x270>)
 800397a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	e014      	b.n	80039ac <HAL_RCC_OscConfig+0x298>
 8003982:	bf00      	nop
 8003984:	40021000 	.word	0x40021000
 8003988:	0800c7f0 	.word	0x0800c7f0
 800398c:	20000000 	.word	0x20000000
 8003990:	2000000c 	.word	0x2000000c
 8003994:	4ba0      	ldr	r3, [pc, #640]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a9f      	ldr	r2, [pc, #636]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 800399a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800399e:	6013      	str	r3, [r2, #0]
 80039a0:	4b9d      	ldr	r3, [pc, #628]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a9c      	ldr	r2, [pc, #624]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 80039a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d013      	beq.n	80039dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b4:	f7fe fae6 	bl	8001f84 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039bc:	f7fe fae2 	bl	8001f84 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b64      	cmp	r3, #100	@ 0x64
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e276      	b.n	8003ebc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ce:	4b92      	ldr	r3, [pc, #584]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0f0      	beq.n	80039bc <HAL_RCC_OscConfig+0x2a8>
 80039da:	e014      	b.n	8003a06 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039dc:	f7fe fad2 	bl	8001f84 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039e4:	f7fe face 	bl	8001f84 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b64      	cmp	r3, #100	@ 0x64
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e262      	b.n	8003ebc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039f6:	4b88      	ldr	r3, [pc, #544]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCC_OscConfig+0x2d0>
 8003a02:	e000      	b.n	8003a06 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d060      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d005      	beq.n	8003a24 <HAL_RCC_OscConfig+0x310>
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	2b0c      	cmp	r3, #12
 8003a1c:	d119      	bne.n	8003a52 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d116      	bne.n	8003a52 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a24:	4b7c      	ldr	r3, [pc, #496]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_RCC_OscConfig+0x328>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e23f      	b.n	8003ebc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a3c:	4b76      	ldr	r3, [pc, #472]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	061b      	lsls	r3, r3, #24
 8003a4a:	4973      	ldr	r1, [pc, #460]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a50:	e040      	b.n	8003ad4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d023      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a5a:	4b6f      	ldr	r3, [pc, #444]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a6e      	ldr	r2, [pc, #440]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003a60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a66:	f7fe fa8d 	bl	8001f84 <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a6c:	e008      	b.n	8003a80 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a6e:	f7fe fa89 	bl	8001f84 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e21d      	b.n	8003ebc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a80:	4b65      	ldr	r3, [pc, #404]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0f0      	beq.n	8003a6e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a8c:	4b62      	ldr	r3, [pc, #392]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	061b      	lsls	r3, r3, #24
 8003a9a:	495f      	ldr	r1, [pc, #380]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	604b      	str	r3, [r1, #4]
 8003aa0:	e018      	b.n	8003ad4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aa2:	4b5d      	ldr	r3, [pc, #372]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a5c      	ldr	r2, [pc, #368]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003aa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aae:	f7fe fa69 	bl	8001f84 <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ab6:	f7fe fa65 	bl	8001f84 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e1f9      	b.n	8003ebc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ac8:	4b53      	ldr	r3, [pc, #332]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1f0      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0308 	and.w	r3, r3, #8
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d03c      	beq.n	8003b5a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d01c      	beq.n	8003b22 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ae8:	4b4b      	ldr	r3, [pc, #300]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003aee:	4a4a      	ldr	r2, [pc, #296]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af8:	f7fe fa44 	bl	8001f84 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b00:	f7fe fa40 	bl	8001f84 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e1d4      	b.n	8003ebc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b12:	4b41      	ldr	r3, [pc, #260]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003b14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0ef      	beq.n	8003b00 <HAL_RCC_OscConfig+0x3ec>
 8003b20:	e01b      	b.n	8003b5a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b22:	4b3d      	ldr	r3, [pc, #244]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b28:	4a3b      	ldr	r2, [pc, #236]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003b2a:	f023 0301 	bic.w	r3, r3, #1
 8003b2e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b32:	f7fe fa27 	bl	8001f84 <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b38:	e008      	b.n	8003b4c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b3a:	f7fe fa23 	bl	8001f84 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e1b7      	b.n	8003ebc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b4c:	4b32      	ldr	r3, [pc, #200]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1ef      	bne.n	8003b3a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 80a6 	beq.w	8003cb4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10d      	bne.n	8003b94 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b78:	4b27      	ldr	r3, [pc, #156]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b7c:	4a26      	ldr	r2, [pc, #152]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003b7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b82:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b84:	4b24      	ldr	r3, [pc, #144]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b8c:	60bb      	str	r3, [r7, #8]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b90:	2301      	movs	r3, #1
 8003b92:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b94:	4b21      	ldr	r3, [pc, #132]	@ (8003c1c <HAL_RCC_OscConfig+0x508>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d118      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8003c1c <HAL_RCC_OscConfig+0x508>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8003c1c <HAL_RCC_OscConfig+0x508>)
 8003ba6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003baa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bac:	f7fe f9ea 	bl	8001f84 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb4:	f7fe f9e6 	bl	8001f84 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e17a      	b.n	8003ebc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bc6:	4b15      	ldr	r3, [pc, #84]	@ (8003c1c <HAL_RCC_OscConfig+0x508>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f0      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d108      	bne.n	8003bec <HAL_RCC_OscConfig+0x4d8>
 8003bda:	4b0f      	ldr	r3, [pc, #60]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be0:	4a0d      	ldr	r2, [pc, #52]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bea:	e029      	b.n	8003c40 <HAL_RCC_OscConfig+0x52c>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	2b05      	cmp	r3, #5
 8003bf2:	d115      	bne.n	8003c20 <HAL_RCC_OscConfig+0x50c>
 8003bf4:	4b08      	ldr	r3, [pc, #32]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bfa:	4a07      	ldr	r2, [pc, #28]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003bfc:	f043 0304 	orr.w	r3, r3, #4
 8003c00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c04:	4b04      	ldr	r3, [pc, #16]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c0a:	4a03      	ldr	r2, [pc, #12]	@ (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c14:	e014      	b.n	8003c40 <HAL_RCC_OscConfig+0x52c>
 8003c16:	bf00      	nop
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	40007000 	.word	0x40007000
 8003c20:	4b9c      	ldr	r3, [pc, #624]	@ (8003e94 <HAL_RCC_OscConfig+0x780>)
 8003c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c26:	4a9b      	ldr	r2, [pc, #620]	@ (8003e94 <HAL_RCC_OscConfig+0x780>)
 8003c28:	f023 0301 	bic.w	r3, r3, #1
 8003c2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c30:	4b98      	ldr	r3, [pc, #608]	@ (8003e94 <HAL_RCC_OscConfig+0x780>)
 8003c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c36:	4a97      	ldr	r2, [pc, #604]	@ (8003e94 <HAL_RCC_OscConfig+0x780>)
 8003c38:	f023 0304 	bic.w	r3, r3, #4
 8003c3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d016      	beq.n	8003c76 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c48:	f7fe f99c 	bl	8001f84 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c4e:	e00a      	b.n	8003c66 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c50:	f7fe f998 	bl	8001f84 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e12a      	b.n	8003ebc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c66:	4b8b      	ldr	r3, [pc, #556]	@ (8003e94 <HAL_RCC_OscConfig+0x780>)
 8003c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0ed      	beq.n	8003c50 <HAL_RCC_OscConfig+0x53c>
 8003c74:	e015      	b.n	8003ca2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c76:	f7fe f985 	bl	8001f84 <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c7c:	e00a      	b.n	8003c94 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7e:	f7fe f981 	bl	8001f84 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e113      	b.n	8003ebc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c94:	4b7f      	ldr	r3, [pc, #508]	@ (8003e94 <HAL_RCC_OscConfig+0x780>)
 8003c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1ed      	bne.n	8003c7e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ca2:	7ffb      	ldrb	r3, [r7, #31]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d105      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca8:	4b7a      	ldr	r3, [pc, #488]	@ (8003e94 <HAL_RCC_OscConfig+0x780>)
 8003caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cac:	4a79      	ldr	r2, [pc, #484]	@ (8003e94 <HAL_RCC_OscConfig+0x780>)
 8003cae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cb2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80fe 	beq.w	8003eba <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	f040 80d0 	bne.w	8003e68 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003cc8:	4b72      	ldr	r3, [pc, #456]	@ (8003e94 <HAL_RCC_OscConfig+0x780>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f003 0203 	and.w	r2, r3, #3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d130      	bne.n	8003d3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d127      	bne.n	8003d3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cf8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d11f      	bne.n	8003d3e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003d08:	2a07      	cmp	r2, #7
 8003d0a:	bf14      	ite	ne
 8003d0c:	2201      	movne	r2, #1
 8003d0e:	2200      	moveq	r2, #0
 8003d10:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d113      	bne.n	8003d3e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d20:	085b      	lsrs	r3, r3, #1
 8003d22:	3b01      	subs	r3, #1
 8003d24:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d109      	bne.n	8003d3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d34:	085b      	lsrs	r3, r3, #1
 8003d36:	3b01      	subs	r3, #1
 8003d38:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d06e      	beq.n	8003e1c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	2b0c      	cmp	r3, #12
 8003d42:	d069      	beq.n	8003e18 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d44:	4b53      	ldr	r3, [pc, #332]	@ (8003e94 <HAL_RCC_OscConfig+0x780>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d105      	bne.n	8003d5c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d50:	4b50      	ldr	r3, [pc, #320]	@ (8003e94 <HAL_RCC_OscConfig+0x780>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e0ad      	b.n	8003ebc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d60:	4b4c      	ldr	r3, [pc, #304]	@ (8003e94 <HAL_RCC_OscConfig+0x780>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a4b      	ldr	r2, [pc, #300]	@ (8003e94 <HAL_RCC_OscConfig+0x780>)
 8003d66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d6a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d6c:	f7fe f90a 	bl	8001f84 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d74:	f7fe f906 	bl	8001f84 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e09a      	b.n	8003ebc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d86:	4b43      	ldr	r3, [pc, #268]	@ (8003e94 <HAL_RCC_OscConfig+0x780>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f0      	bne.n	8003d74 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d92:	4b40      	ldr	r3, [pc, #256]	@ (8003e94 <HAL_RCC_OscConfig+0x780>)
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	4b40      	ldr	r3, [pc, #256]	@ (8003e98 <HAL_RCC_OscConfig+0x784>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003da2:	3a01      	subs	r2, #1
 8003da4:	0112      	lsls	r2, r2, #4
 8003da6:	4311      	orrs	r1, r2
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003dac:	0212      	lsls	r2, r2, #8
 8003dae:	4311      	orrs	r1, r2
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003db4:	0852      	lsrs	r2, r2, #1
 8003db6:	3a01      	subs	r2, #1
 8003db8:	0552      	lsls	r2, r2, #21
 8003dba:	4311      	orrs	r1, r2
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003dc0:	0852      	lsrs	r2, r2, #1
 8003dc2:	3a01      	subs	r2, #1
 8003dc4:	0652      	lsls	r2, r2, #25
 8003dc6:	4311      	orrs	r1, r2
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003dcc:	0912      	lsrs	r2, r2, #4
 8003dce:	0452      	lsls	r2, r2, #17
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	4930      	ldr	r1, [pc, #192]	@ (8003e94 <HAL_RCC_OscConfig+0x780>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003dd8:	4b2e      	ldr	r3, [pc, #184]	@ (8003e94 <HAL_RCC_OscConfig+0x780>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a2d      	ldr	r2, [pc, #180]	@ (8003e94 <HAL_RCC_OscConfig+0x780>)
 8003dde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003de2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003de4:	4b2b      	ldr	r3, [pc, #172]	@ (8003e94 <HAL_RCC_OscConfig+0x780>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	4a2a      	ldr	r2, [pc, #168]	@ (8003e94 <HAL_RCC_OscConfig+0x780>)
 8003dea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003df0:	f7fe f8c8 	bl	8001f84 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df8:	f7fe f8c4 	bl	8001f84 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e058      	b.n	8003ebc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e0a:	4b22      	ldr	r3, [pc, #136]	@ (8003e94 <HAL_RCC_OscConfig+0x780>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0f0      	beq.n	8003df8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e16:	e050      	b.n	8003eba <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e04f      	b.n	8003ebc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8003e94 <HAL_RCC_OscConfig+0x780>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d148      	bne.n	8003eba <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e28:	4b1a      	ldr	r3, [pc, #104]	@ (8003e94 <HAL_RCC_OscConfig+0x780>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a19      	ldr	r2, [pc, #100]	@ (8003e94 <HAL_RCC_OscConfig+0x780>)
 8003e2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e34:	4b17      	ldr	r3, [pc, #92]	@ (8003e94 <HAL_RCC_OscConfig+0x780>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	4a16      	ldr	r2, [pc, #88]	@ (8003e94 <HAL_RCC_OscConfig+0x780>)
 8003e3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e40:	f7fe f8a0 	bl	8001f84 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e48:	f7fe f89c 	bl	8001f84 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e030      	b.n	8003ebc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8003e94 <HAL_RCC_OscConfig+0x780>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0f0      	beq.n	8003e48 <HAL_RCC_OscConfig+0x734>
 8003e66:	e028      	b.n	8003eba <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	2b0c      	cmp	r3, #12
 8003e6c:	d023      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6e:	4b09      	ldr	r3, [pc, #36]	@ (8003e94 <HAL_RCC_OscConfig+0x780>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a08      	ldr	r2, [pc, #32]	@ (8003e94 <HAL_RCC_OscConfig+0x780>)
 8003e74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7a:	f7fe f883 	bl	8001f84 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e80:	e00c      	b.n	8003e9c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e82:	f7fe f87f 	bl	8001f84 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d905      	bls.n	8003e9c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e013      	b.n	8003ebc <HAL_RCC_OscConfig+0x7a8>
 8003e94:	40021000 	.word	0x40021000
 8003e98:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e9c:	4b09      	ldr	r3, [pc, #36]	@ (8003ec4 <HAL_RCC_OscConfig+0x7b0>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1ec      	bne.n	8003e82 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003ea8:	4b06      	ldr	r3, [pc, #24]	@ (8003ec4 <HAL_RCC_OscConfig+0x7b0>)
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	4905      	ldr	r1, [pc, #20]	@ (8003ec4 <HAL_RCC_OscConfig+0x7b0>)
 8003eae:	4b06      	ldr	r3, [pc, #24]	@ (8003ec8 <HAL_RCC_OscConfig+0x7b4>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	60cb      	str	r3, [r1, #12]
 8003eb4:	e001      	b.n	8003eba <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e000      	b.n	8003ebc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3720      	adds	r7, #32
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	feeefffc 	.word	0xfeeefffc

08003ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e0e7      	b.n	80040b0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ee0:	4b75      	ldr	r3, [pc, #468]	@ (80040b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d910      	bls.n	8003f10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eee:	4b72      	ldr	r3, [pc, #456]	@ (80040b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f023 0207 	bic.w	r2, r3, #7
 8003ef6:	4970      	ldr	r1, [pc, #448]	@ (80040b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003efe:	4b6e      	ldr	r3, [pc, #440]	@ (80040b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d001      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0cf      	b.n	80040b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d010      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	4b66      	ldr	r3, [pc, #408]	@ (80040bc <HAL_RCC_ClockConfig+0x1f0>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d908      	bls.n	8003f3e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f2c:	4b63      	ldr	r3, [pc, #396]	@ (80040bc <HAL_RCC_ClockConfig+0x1f0>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	4960      	ldr	r1, [pc, #384]	@ (80040bc <HAL_RCC_ClockConfig+0x1f0>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d04c      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2b03      	cmp	r3, #3
 8003f50:	d107      	bne.n	8003f62 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f52:	4b5a      	ldr	r3, [pc, #360]	@ (80040bc <HAL_RCC_ClockConfig+0x1f0>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d121      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e0a6      	b.n	80040b0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d107      	bne.n	8003f7a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f6a:	4b54      	ldr	r3, [pc, #336]	@ (80040bc <HAL_RCC_ClockConfig+0x1f0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d115      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e09a      	b.n	80040b0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d107      	bne.n	8003f92 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f82:	4b4e      	ldr	r3, [pc, #312]	@ (80040bc <HAL_RCC_ClockConfig+0x1f0>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d109      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e08e      	b.n	80040b0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f92:	4b4a      	ldr	r3, [pc, #296]	@ (80040bc <HAL_RCC_ClockConfig+0x1f0>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e086      	b.n	80040b0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fa2:	4b46      	ldr	r3, [pc, #280]	@ (80040bc <HAL_RCC_ClockConfig+0x1f0>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f023 0203 	bic.w	r2, r3, #3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	4943      	ldr	r1, [pc, #268]	@ (80040bc <HAL_RCC_ClockConfig+0x1f0>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fb4:	f7fd ffe6 	bl	8001f84 <HAL_GetTick>
 8003fb8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fba:	e00a      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fbc:	f7fd ffe2 	bl	8001f84 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e06e      	b.n	80040b0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd2:	4b3a      	ldr	r3, [pc, #232]	@ (80040bc <HAL_RCC_ClockConfig+0x1f0>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 020c 	and.w	r2, r3, #12
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d1eb      	bne.n	8003fbc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d010      	beq.n	8004012 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	4b31      	ldr	r3, [pc, #196]	@ (80040bc <HAL_RCC_ClockConfig+0x1f0>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d208      	bcs.n	8004012 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004000:	4b2e      	ldr	r3, [pc, #184]	@ (80040bc <HAL_RCC_ClockConfig+0x1f0>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	492b      	ldr	r1, [pc, #172]	@ (80040bc <HAL_RCC_ClockConfig+0x1f0>)
 800400e:	4313      	orrs	r3, r2
 8004010:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004012:	4b29      	ldr	r3, [pc, #164]	@ (80040b8 <HAL_RCC_ClockConfig+0x1ec>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	429a      	cmp	r2, r3
 800401e:	d210      	bcs.n	8004042 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004020:	4b25      	ldr	r3, [pc, #148]	@ (80040b8 <HAL_RCC_ClockConfig+0x1ec>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f023 0207 	bic.w	r2, r3, #7
 8004028:	4923      	ldr	r1, [pc, #140]	@ (80040b8 <HAL_RCC_ClockConfig+0x1ec>)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	4313      	orrs	r3, r2
 800402e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004030:	4b21      	ldr	r3, [pc, #132]	@ (80040b8 <HAL_RCC_ClockConfig+0x1ec>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	429a      	cmp	r2, r3
 800403c:	d001      	beq.n	8004042 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e036      	b.n	80040b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0304 	and.w	r3, r3, #4
 800404a:	2b00      	cmp	r3, #0
 800404c:	d008      	beq.n	8004060 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800404e:	4b1b      	ldr	r3, [pc, #108]	@ (80040bc <HAL_RCC_ClockConfig+0x1f0>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	4918      	ldr	r1, [pc, #96]	@ (80040bc <HAL_RCC_ClockConfig+0x1f0>)
 800405c:	4313      	orrs	r3, r2
 800405e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b00      	cmp	r3, #0
 800406a:	d009      	beq.n	8004080 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800406c:	4b13      	ldr	r3, [pc, #76]	@ (80040bc <HAL_RCC_ClockConfig+0x1f0>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	4910      	ldr	r1, [pc, #64]	@ (80040bc <HAL_RCC_ClockConfig+0x1f0>)
 800407c:	4313      	orrs	r3, r2
 800407e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004080:	f000 f824 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 8004084:	4602      	mov	r2, r0
 8004086:	4b0d      	ldr	r3, [pc, #52]	@ (80040bc <HAL_RCC_ClockConfig+0x1f0>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	091b      	lsrs	r3, r3, #4
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	490b      	ldr	r1, [pc, #44]	@ (80040c0 <HAL_RCC_ClockConfig+0x1f4>)
 8004092:	5ccb      	ldrb	r3, [r1, r3]
 8004094:	f003 031f 	and.w	r3, r3, #31
 8004098:	fa22 f303 	lsr.w	r3, r2, r3
 800409c:	4a09      	ldr	r2, [pc, #36]	@ (80040c4 <HAL_RCC_ClockConfig+0x1f8>)
 800409e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80040a0:	4b09      	ldr	r3, [pc, #36]	@ (80040c8 <HAL_RCC_ClockConfig+0x1fc>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fd f831 	bl	800110c <HAL_InitTick>
 80040aa:	4603      	mov	r3, r0
 80040ac:	72fb      	strb	r3, [r7, #11]

  return status;
 80040ae:	7afb      	ldrb	r3, [r7, #11]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40022000 	.word	0x40022000
 80040bc:	40021000 	.word	0x40021000
 80040c0:	0800c7f0 	.word	0x0800c7f0
 80040c4:	20000000 	.word	0x20000000
 80040c8:	2000000c 	.word	0x2000000c

080040cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b089      	sub	sp, #36	@ 0x24
 80040d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80040d2:	2300      	movs	r3, #0
 80040d4:	61fb      	str	r3, [r7, #28]
 80040d6:	2300      	movs	r3, #0
 80040d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040da:	4b3e      	ldr	r3, [pc, #248]	@ (80041d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 030c 	and.w	r3, r3, #12
 80040e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040e4:	4b3b      	ldr	r3, [pc, #236]	@ (80041d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f003 0303 	and.w	r3, r3, #3
 80040ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d005      	beq.n	8004100 <HAL_RCC_GetSysClockFreq+0x34>
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	2b0c      	cmp	r3, #12
 80040f8:	d121      	bne.n	800413e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d11e      	bne.n	800413e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004100:	4b34      	ldr	r3, [pc, #208]	@ (80041d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b00      	cmp	r3, #0
 800410a:	d107      	bne.n	800411c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800410c:	4b31      	ldr	r3, [pc, #196]	@ (80041d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800410e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004112:	0a1b      	lsrs	r3, r3, #8
 8004114:	f003 030f 	and.w	r3, r3, #15
 8004118:	61fb      	str	r3, [r7, #28]
 800411a:	e005      	b.n	8004128 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800411c:	4b2d      	ldr	r3, [pc, #180]	@ (80041d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	091b      	lsrs	r3, r3, #4
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004128:	4a2b      	ldr	r2, [pc, #172]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004130:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10d      	bne.n	8004154 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800413c:	e00a      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	2b04      	cmp	r3, #4
 8004142:	d102      	bne.n	800414a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004144:	4b25      	ldr	r3, [pc, #148]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x110>)
 8004146:	61bb      	str	r3, [r7, #24]
 8004148:	e004      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	2b08      	cmp	r3, #8
 800414e:	d101      	bne.n	8004154 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004150:	4b23      	ldr	r3, [pc, #140]	@ (80041e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004152:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	2b0c      	cmp	r3, #12
 8004158:	d134      	bne.n	80041c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800415a:	4b1e      	ldr	r3, [pc, #120]	@ (80041d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	2b02      	cmp	r3, #2
 8004168:	d003      	beq.n	8004172 <HAL_RCC_GetSysClockFreq+0xa6>
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b03      	cmp	r3, #3
 800416e:	d003      	beq.n	8004178 <HAL_RCC_GetSysClockFreq+0xac>
 8004170:	e005      	b.n	800417e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004172:	4b1a      	ldr	r3, [pc, #104]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x110>)
 8004174:	617b      	str	r3, [r7, #20]
      break;
 8004176:	e005      	b.n	8004184 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004178:	4b19      	ldr	r3, [pc, #100]	@ (80041e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800417a:	617b      	str	r3, [r7, #20]
      break;
 800417c:	e002      	b.n	8004184 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	617b      	str	r3, [r7, #20]
      break;
 8004182:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004184:	4b13      	ldr	r3, [pc, #76]	@ (80041d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	091b      	lsrs	r3, r3, #4
 800418a:	f003 0307 	and.w	r3, r3, #7
 800418e:	3301      	adds	r3, #1
 8004190:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004192:	4b10      	ldr	r3, [pc, #64]	@ (80041d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	0a1b      	lsrs	r3, r3, #8
 8004198:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	fb03 f202 	mul.w	r2, r3, r2
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041aa:	4b0a      	ldr	r3, [pc, #40]	@ (80041d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	0e5b      	lsrs	r3, r3, #25
 80041b0:	f003 0303 	and.w	r3, r3, #3
 80041b4:	3301      	adds	r3, #1
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80041c4:	69bb      	ldr	r3, [r7, #24]
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3724      	adds	r7, #36	@ 0x24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	40021000 	.word	0x40021000
 80041d8:	0800c808 	.word	0x0800c808
 80041dc:	00f42400 	.word	0x00f42400
 80041e0:	007a1200 	.word	0x007a1200

080041e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041e8:	4b03      	ldr	r3, [pc, #12]	@ (80041f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041ea:	681b      	ldr	r3, [r3, #0]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	20000000 	.word	0x20000000

080041fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004200:	f7ff fff0 	bl	80041e4 <HAL_RCC_GetHCLKFreq>
 8004204:	4602      	mov	r2, r0
 8004206:	4b06      	ldr	r3, [pc, #24]	@ (8004220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	0a1b      	lsrs	r3, r3, #8
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	4904      	ldr	r1, [pc, #16]	@ (8004224 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004212:	5ccb      	ldrb	r3, [r1, r3]
 8004214:	f003 031f 	and.w	r3, r3, #31
 8004218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800421c:	4618      	mov	r0, r3
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40021000 	.word	0x40021000
 8004224:	0800c800 	.word	0x0800c800

08004228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800422c:	f7ff ffda 	bl	80041e4 <HAL_RCC_GetHCLKFreq>
 8004230:	4602      	mov	r2, r0
 8004232:	4b06      	ldr	r3, [pc, #24]	@ (800424c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	0adb      	lsrs	r3, r3, #11
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	4904      	ldr	r1, [pc, #16]	@ (8004250 <HAL_RCC_GetPCLK2Freq+0x28>)
 800423e:	5ccb      	ldrb	r3, [r1, r3]
 8004240:	f003 031f 	and.w	r3, r3, #31
 8004244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004248:	4618      	mov	r0, r3
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40021000 	.word	0x40021000
 8004250:	0800c800 	.word	0x0800c800

08004254 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	220f      	movs	r2, #15
 8004262:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004264:	4b12      	ldr	r3, [pc, #72]	@ (80042b0 <HAL_RCC_GetClockConfig+0x5c>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 0203 	and.w	r2, r3, #3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004270:	4b0f      	ldr	r3, [pc, #60]	@ (80042b0 <HAL_RCC_GetClockConfig+0x5c>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800427c:	4b0c      	ldr	r3, [pc, #48]	@ (80042b0 <HAL_RCC_GetClockConfig+0x5c>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004288:	4b09      	ldr	r3, [pc, #36]	@ (80042b0 <HAL_RCC_GetClockConfig+0x5c>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	08db      	lsrs	r3, r3, #3
 800428e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004296:	4b07      	ldr	r3, [pc, #28]	@ (80042b4 <HAL_RCC_GetClockConfig+0x60>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0207 	and.w	r2, r3, #7
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	601a      	str	r2, [r3, #0]
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40021000 	.word	0x40021000
 80042b4:	40022000 	.word	0x40022000

080042b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80042c0:	2300      	movs	r3, #0
 80042c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80042c4:	4b2a      	ldr	r3, [pc, #168]	@ (8004370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80042d0:	f7ff f9bc 	bl	800364c <HAL_PWREx_GetVoltageRange>
 80042d4:	6178      	str	r0, [r7, #20]
 80042d6:	e014      	b.n	8004302 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042d8:	4b25      	ldr	r3, [pc, #148]	@ (8004370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042dc:	4a24      	ldr	r2, [pc, #144]	@ (8004370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80042e4:	4b22      	ldr	r3, [pc, #136]	@ (8004370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80042f0:	f7ff f9ac 	bl	800364c <HAL_PWREx_GetVoltageRange>
 80042f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80042f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004300:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004308:	d10b      	bne.n	8004322 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b80      	cmp	r3, #128	@ 0x80
 800430e:	d919      	bls.n	8004344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2ba0      	cmp	r3, #160	@ 0xa0
 8004314:	d902      	bls.n	800431c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004316:	2302      	movs	r3, #2
 8004318:	613b      	str	r3, [r7, #16]
 800431a:	e013      	b.n	8004344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800431c:	2301      	movs	r3, #1
 800431e:	613b      	str	r3, [r7, #16]
 8004320:	e010      	b.n	8004344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b80      	cmp	r3, #128	@ 0x80
 8004326:	d902      	bls.n	800432e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004328:	2303      	movs	r3, #3
 800432a:	613b      	str	r3, [r7, #16]
 800432c:	e00a      	b.n	8004344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b80      	cmp	r3, #128	@ 0x80
 8004332:	d102      	bne.n	800433a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004334:	2302      	movs	r3, #2
 8004336:	613b      	str	r3, [r7, #16]
 8004338:	e004      	b.n	8004344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b70      	cmp	r3, #112	@ 0x70
 800433e:	d101      	bne.n	8004344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004340:	2301      	movs	r3, #1
 8004342:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004344:	4b0b      	ldr	r3, [pc, #44]	@ (8004374 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f023 0207 	bic.w	r2, r3, #7
 800434c:	4909      	ldr	r1, [pc, #36]	@ (8004374 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	4313      	orrs	r3, r2
 8004352:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004354:	4b07      	ldr	r3, [pc, #28]	@ (8004374 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	429a      	cmp	r2, r3
 8004360:	d001      	beq.n	8004366 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e000      	b.n	8004368 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40021000 	.word	0x40021000
 8004374:	40022000 	.word	0x40022000

08004378 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004380:	2300      	movs	r3, #0
 8004382:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004384:	2300      	movs	r3, #0
 8004386:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004390:	2b00      	cmp	r3, #0
 8004392:	d041      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004398:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800439c:	d02a      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800439e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80043a2:	d824      	bhi.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80043a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80043a8:	d008      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80043aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80043ae:	d81e      	bhi.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80043b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043b8:	d010      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80043ba:	e018      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043bc:	4b86      	ldr	r3, [pc, #536]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	4a85      	ldr	r2, [pc, #532]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043c6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043c8:	e015      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	3304      	adds	r3, #4
 80043ce:	2100      	movs	r1, #0
 80043d0:	4618      	mov	r0, r3
 80043d2:	f001 f829 	bl	8005428 <RCCEx_PLLSAI1_Config>
 80043d6:	4603      	mov	r3, r0
 80043d8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043da:	e00c      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3320      	adds	r3, #32
 80043e0:	2100      	movs	r1, #0
 80043e2:	4618      	mov	r0, r3
 80043e4:	f001 f914 	bl	8005610 <RCCEx_PLLSAI2_Config>
 80043e8:	4603      	mov	r3, r0
 80043ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043ec:	e003      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	74fb      	strb	r3, [r7, #19]
      break;
 80043f2:	e000      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80043f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043f6:	7cfb      	ldrb	r3, [r7, #19]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10b      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043fc:	4b76      	ldr	r3, [pc, #472]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004402:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800440a:	4973      	ldr	r1, [pc, #460]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800440c:	4313      	orrs	r3, r2
 800440e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004412:	e001      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004414:	7cfb      	ldrb	r3, [r7, #19]
 8004416:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d041      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004428:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800442c:	d02a      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800442e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004432:	d824      	bhi.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004434:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004438:	d008      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800443a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800443e:	d81e      	bhi.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004444:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004448:	d010      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800444a:	e018      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800444c:	4b62      	ldr	r3, [pc, #392]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	4a61      	ldr	r2, [pc, #388]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004452:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004456:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004458:	e015      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3304      	adds	r3, #4
 800445e:	2100      	movs	r1, #0
 8004460:	4618      	mov	r0, r3
 8004462:	f000 ffe1 	bl	8005428 <RCCEx_PLLSAI1_Config>
 8004466:	4603      	mov	r3, r0
 8004468:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800446a:	e00c      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3320      	adds	r3, #32
 8004470:	2100      	movs	r1, #0
 8004472:	4618      	mov	r0, r3
 8004474:	f001 f8cc 	bl	8005610 <RCCEx_PLLSAI2_Config>
 8004478:	4603      	mov	r3, r0
 800447a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800447c:	e003      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	74fb      	strb	r3, [r7, #19]
      break;
 8004482:	e000      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004484:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004486:	7cfb      	ldrb	r3, [r7, #19]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10b      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800448c:	4b52      	ldr	r3, [pc, #328]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800448e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004492:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800449a:	494f      	ldr	r1, [pc, #316]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800449c:	4313      	orrs	r3, r2
 800449e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80044a2:	e001      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a4:	7cfb      	ldrb	r3, [r7, #19]
 80044a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 80a0 	beq.w	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044b6:	2300      	movs	r3, #0
 80044b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044ba:	4b47      	ldr	r3, [pc, #284]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x152>
 80044c6:	2301      	movs	r3, #1
 80044c8:	e000      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80044ca:	2300      	movs	r3, #0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00d      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044d0:	4b41      	ldr	r3, [pc, #260]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d4:	4a40      	ldr	r2, [pc, #256]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044da:	6593      	str	r3, [r2, #88]	@ 0x58
 80044dc:	4b3e      	ldr	r3, [pc, #248]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044e4:	60bb      	str	r3, [r7, #8]
 80044e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044e8:	2301      	movs	r3, #1
 80044ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044ec:	4b3b      	ldr	r3, [pc, #236]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a3a      	ldr	r2, [pc, #232]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044f8:	f7fd fd44 	bl	8001f84 <HAL_GetTick>
 80044fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044fe:	e009      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004500:	f7fd fd40 	bl	8001f84 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d902      	bls.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	74fb      	strb	r3, [r7, #19]
        break;
 8004512:	e005      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004514:	4b31      	ldr	r3, [pc, #196]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0ef      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004520:	7cfb      	ldrb	r3, [r7, #19]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d15c      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004526:	4b2c      	ldr	r3, [pc, #176]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800452c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004530:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d01f      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	429a      	cmp	r2, r3
 8004542:	d019      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004544:	4b24      	ldr	r3, [pc, #144]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800454a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800454e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004550:	4b21      	ldr	r3, [pc, #132]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004556:	4a20      	ldr	r2, [pc, #128]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800455c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004560:	4b1d      	ldr	r3, [pc, #116]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004566:	4a1c      	ldr	r2, [pc, #112]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004568:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800456c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004570:	4a19      	ldr	r2, [pc, #100]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d016      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004582:	f7fd fcff 	bl	8001f84 <HAL_GetTick>
 8004586:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004588:	e00b      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800458a:	f7fd fcfb 	bl	8001f84 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004598:	4293      	cmp	r3, r2
 800459a:	d902      	bls.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	74fb      	strb	r3, [r7, #19]
            break;
 80045a0:	e006      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045a2:	4b0d      	ldr	r3, [pc, #52]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0ec      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80045b0:	7cfb      	ldrb	r3, [r7, #19]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10c      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045b6:	4b08      	ldr	r3, [pc, #32]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045c6:	4904      	ldr	r1, [pc, #16]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80045ce:	e009      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045d0:	7cfb      	ldrb	r3, [r7, #19]
 80045d2:	74bb      	strb	r3, [r7, #18]
 80045d4:	e006      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80045d6:	bf00      	nop
 80045d8:	40021000 	.word	0x40021000
 80045dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e0:	7cfb      	ldrb	r3, [r7, #19]
 80045e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045e4:	7c7b      	ldrb	r3, [r7, #17]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d105      	bne.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ea:	4b9e      	ldr	r3, [pc, #632]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ee:	4a9d      	ldr	r2, [pc, #628]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045f4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004602:	4b98      	ldr	r3, [pc, #608]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004608:	f023 0203 	bic.w	r2, r3, #3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004610:	4994      	ldr	r1, [pc, #592]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004624:	4b8f      	ldr	r3, [pc, #572]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800462a:	f023 020c 	bic.w	r2, r3, #12
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004632:	498c      	ldr	r1, [pc, #560]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0304 	and.w	r3, r3, #4
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004646:	4b87      	ldr	r3, [pc, #540]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800464c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004654:	4983      	ldr	r1, [pc, #524]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0308 	and.w	r3, r3, #8
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00a      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004668:	4b7e      	ldr	r3, [pc, #504]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800466a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800466e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004676:	497b      	ldr	r1, [pc, #492]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004678:	4313      	orrs	r3, r2
 800467a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0310 	and.w	r3, r3, #16
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800468a:	4b76      	ldr	r3, [pc, #472]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800468c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004690:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004698:	4972      	ldr	r1, [pc, #456]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800469a:	4313      	orrs	r3, r2
 800469c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00a      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046ac:	4b6d      	ldr	r3, [pc, #436]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ba:	496a      	ldr	r1, [pc, #424]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046ce:	4b65      	ldr	r3, [pc, #404]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046dc:	4961      	ldr	r1, [pc, #388]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00a      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046f0:	4b5c      	ldr	r3, [pc, #368]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046fe:	4959      	ldr	r1, [pc, #356]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004700:	4313      	orrs	r3, r2
 8004702:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004712:	4b54      	ldr	r3, [pc, #336]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004718:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004720:	4950      	ldr	r1, [pc, #320]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00a      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004734:	4b4b      	ldr	r3, [pc, #300]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800473a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004742:	4948      	ldr	r1, [pc, #288]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004744:	4313      	orrs	r3, r2
 8004746:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004756:	4b43      	ldr	r3, [pc, #268]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800475c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004764:	493f      	ldr	r1, [pc, #252]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004766:	4313      	orrs	r3, r2
 8004768:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d028      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004778:	4b3a      	ldr	r3, [pc, #232]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800477a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800477e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004786:	4937      	ldr	r1, [pc, #220]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004788:	4313      	orrs	r3, r2
 800478a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004792:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004796:	d106      	bne.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004798:	4b32      	ldr	r3, [pc, #200]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	4a31      	ldr	r2, [pc, #196]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047a2:	60d3      	str	r3, [r2, #12]
 80047a4:	e011      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80047ae:	d10c      	bne.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3304      	adds	r3, #4
 80047b4:	2101      	movs	r1, #1
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 fe36 	bl	8005428 <RCCEx_PLLSAI1_Config>
 80047bc:	4603      	mov	r3, r0
 80047be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80047c0:	7cfb      	ldrb	r3, [r7, #19]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80047c6:	7cfb      	ldrb	r3, [r7, #19]
 80047c8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d028      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047d6:	4b23      	ldr	r3, [pc, #140]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047dc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e4:	491f      	ldr	r1, [pc, #124]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047f4:	d106      	bne.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	4a1a      	ldr	r2, [pc, #104]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004800:	60d3      	str	r3, [r2, #12]
 8004802:	e011      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004808:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800480c:	d10c      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3304      	adds	r3, #4
 8004812:	2101      	movs	r1, #1
 8004814:	4618      	mov	r0, r3
 8004816:	f000 fe07 	bl	8005428 <RCCEx_PLLSAI1_Config>
 800481a:	4603      	mov	r3, r0
 800481c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800481e:	7cfb      	ldrb	r3, [r7, #19]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004824:	7cfb      	ldrb	r3, [r7, #19]
 8004826:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d02b      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004834:	4b0b      	ldr	r3, [pc, #44]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800483a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004842:	4908      	ldr	r1, [pc, #32]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004844:	4313      	orrs	r3, r2
 8004846:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800484e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004852:	d109      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004854:	4b03      	ldr	r3, [pc, #12]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	4a02      	ldr	r2, [pc, #8]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800485a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800485e:	60d3      	str	r3, [r2, #12]
 8004860:	e014      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004862:	bf00      	nop
 8004864:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800486c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004870:	d10c      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	3304      	adds	r3, #4
 8004876:	2101      	movs	r1, #1
 8004878:	4618      	mov	r0, r3
 800487a:	f000 fdd5 	bl	8005428 <RCCEx_PLLSAI1_Config>
 800487e:	4603      	mov	r3, r0
 8004880:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004882:	7cfb      	ldrb	r3, [r7, #19]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004888:	7cfb      	ldrb	r3, [r7, #19]
 800488a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d02f      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004898:	4b2b      	ldr	r3, [pc, #172]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800489a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048a6:	4928      	ldr	r1, [pc, #160]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048b6:	d10d      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3304      	adds	r3, #4
 80048bc:	2102      	movs	r1, #2
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 fdb2 	bl	8005428 <RCCEx_PLLSAI1_Config>
 80048c4:	4603      	mov	r3, r0
 80048c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048c8:	7cfb      	ldrb	r3, [r7, #19]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d014      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80048ce:	7cfb      	ldrb	r3, [r7, #19]
 80048d0:	74bb      	strb	r3, [r7, #18]
 80048d2:	e011      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048dc:	d10c      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	3320      	adds	r3, #32
 80048e2:	2102      	movs	r1, #2
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 fe93 	bl	8005610 <RCCEx_PLLSAI2_Config>
 80048ea:	4603      	mov	r3, r0
 80048ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048ee:	7cfb      	ldrb	r3, [r7, #19]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80048f4:	7cfb      	ldrb	r3, [r7, #19]
 80048f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00a      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004904:	4b10      	ldr	r3, [pc, #64]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800490a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004912:	490d      	ldr	r1, [pc, #52]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004914:	4313      	orrs	r3, r2
 8004916:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00b      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004926:	4b08      	ldr	r3, [pc, #32]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800492c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004936:	4904      	ldr	r1, [pc, #16]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004938:	4313      	orrs	r3, r2
 800493a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800493e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004940:	4618      	mov	r0, r3
 8004942:	3718      	adds	r7, #24
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40021000 	.word	0x40021000

0800494c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b088      	sub	sp, #32
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800495e:	d13e      	bne.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004960:	4bb2      	ldr	r3, [pc, #712]	@ (8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004966:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800496a:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004972:	d028      	beq.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800497a:	f200 8542 	bhi.w	8005402 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004984:	d005      	beq.n	8004992 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800498c:	d00e      	beq.n	80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800498e:	f000 bd38 	b.w	8005402 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004992:	4ba6      	ldr	r3, [pc, #664]	@ (8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b02      	cmp	r3, #2
 800499e:	f040 8532 	bne.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 80049a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049a6:	61fb      	str	r3, [r7, #28]
      break;
 80049a8:	f000 bd2d 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80049ac:	4b9f      	ldr	r3, [pc, #636]	@ (8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80049ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	f040 8527 	bne.w	800540a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 80049bc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80049c0:	61fb      	str	r3, [r7, #28]
      break;
 80049c2:	f000 bd22 	b.w	800540a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80049c6:	4b99      	ldr	r3, [pc, #612]	@ (8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049d2:	f040 851c 	bne.w	800540e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 80049d6:	4b96      	ldr	r3, [pc, #600]	@ (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80049d8:	61fb      	str	r3, [r7, #28]
      break;
 80049da:	f000 bd18 	b.w	800540e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049de:	4b93      	ldr	r3, [pc, #588]	@ (8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2b03      	cmp	r3, #3
 80049ec:	d036      	beq.n	8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b03      	cmp	r3, #3
 80049f2:	d840      	bhi.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d003      	beq.n	8004a02 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d020      	beq.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004a00:	e039      	b.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004a02:	4b8a      	ldr	r3, [pc, #552]	@ (8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d116      	bne.n	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004a0e:	4b87      	ldr	r3, [pc, #540]	@ (8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0308 	and.w	r3, r3, #8
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d005      	beq.n	8004a26 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8004a1a:	4b84      	ldr	r3, [pc, #528]	@ (8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	091b      	lsrs	r3, r3, #4
 8004a20:	f003 030f 	and.w	r3, r3, #15
 8004a24:	e005      	b.n	8004a32 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8004a26:	4b81      	ldr	r3, [pc, #516]	@ (8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a2c:	0a1b      	lsrs	r3, r3, #8
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	4a80      	ldr	r2, [pc, #512]	@ (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8004a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a38:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004a3a:	e01f      	b.n	8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	61bb      	str	r3, [r7, #24]
      break;
 8004a40:	e01c      	b.n	8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a42:	4b7a      	ldr	r3, [pc, #488]	@ (8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a4e:	d102      	bne.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8004a50:	4b79      	ldr	r3, [pc, #484]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004a52:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004a54:	e012      	b.n	8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	61bb      	str	r3, [r7, #24]
      break;
 8004a5a:	e00f      	b.n	8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004a5c:	4b73      	ldr	r3, [pc, #460]	@ (8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a68:	d102      	bne.n	8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8004a6a:	4b74      	ldr	r3, [pc, #464]	@ (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004a6c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004a6e:	e005      	b.n	8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004a70:	2300      	movs	r3, #0
 8004a72:	61bb      	str	r3, [r7, #24]
      break;
 8004a74:	e002      	b.n	8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61bb      	str	r3, [r7, #24]
      break;
 8004a7a:	bf00      	nop
    }

    switch(PeriphClk)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004a82:	f000 80dd 	beq.w	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004a8c:	f200 84c1 	bhi.w	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a96:	f000 80d3 	beq.w	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004aa0:	f200 84b7 	bhi.w	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aaa:	f000 835f 	beq.w	800516c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ab4:	f200 84ad 	bhi.w	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004abe:	f000 847e 	beq.w	80053be <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ac8:	f200 84a3 	bhi.w	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ad2:	f000 82cd 	beq.w	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004adc:	f200 8499 	bhi.w	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ae6:	f000 80ab 	beq.w	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004af0:	f200 848f 	bhi.w	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004afa:	f000 8090 	beq.w	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b04:	f200 8485 	bhi.w	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b0e:	d07f      	beq.n	8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b16:	f200 847c 	bhi.w	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b20:	f000 8403 	beq.w	800532a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b2a:	f200 8472 	bhi.w	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b34:	f000 83af 	beq.w	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b3e:	f200 8468 	bhi.w	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b48:	f000 8379 	beq.w	800523e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b52:	f200 845e 	bhi.w	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b80      	cmp	r3, #128	@ 0x80
 8004b5a:	f000 8344 	beq.w	80051e6 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b80      	cmp	r3, #128	@ 0x80
 8004b62:	f200 8456 	bhi.w	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b20      	cmp	r3, #32
 8004b6a:	d84b      	bhi.n	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 844f 	beq.w	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3b01      	subs	r3, #1
 8004b78:	2b1f      	cmp	r3, #31
 8004b7a:	f200 844a 	bhi.w	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8004b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b84:	08004d6d 	.word	0x08004d6d
 8004b88:	08004ddb 	.word	0x08004ddb
 8004b8c:	08005413 	.word	0x08005413
 8004b90:	08004e6f 	.word	0x08004e6f
 8004b94:	08005413 	.word	0x08005413
 8004b98:	08005413 	.word	0x08005413
 8004b9c:	08005413 	.word	0x08005413
 8004ba0:	08004ef5 	.word	0x08004ef5
 8004ba4:	08005413 	.word	0x08005413
 8004ba8:	08005413 	.word	0x08005413
 8004bac:	08005413 	.word	0x08005413
 8004bb0:	08005413 	.word	0x08005413
 8004bb4:	08005413 	.word	0x08005413
 8004bb8:	08005413 	.word	0x08005413
 8004bbc:	08005413 	.word	0x08005413
 8004bc0:	08004f6d 	.word	0x08004f6d
 8004bc4:	08005413 	.word	0x08005413
 8004bc8:	08005413 	.word	0x08005413
 8004bcc:	08005413 	.word	0x08005413
 8004bd0:	08005413 	.word	0x08005413
 8004bd4:	08005413 	.word	0x08005413
 8004bd8:	08005413 	.word	0x08005413
 8004bdc:	08005413 	.word	0x08005413
 8004be0:	08005413 	.word	0x08005413
 8004be4:	08005413 	.word	0x08005413
 8004be8:	08005413 	.word	0x08005413
 8004bec:	08005413 	.word	0x08005413
 8004bf0:	08005413 	.word	0x08005413
 8004bf4:	08005413 	.word	0x08005413
 8004bf8:	08005413 	.word	0x08005413
 8004bfc:	08005413 	.word	0x08005413
 8004c00:	08004fef 	.word	0x08004fef
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b40      	cmp	r3, #64	@ 0x40
 8004c08:	f000 82c1 	beq.w	800518e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004c0c:	f000 bc01 	b.w	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004c10:	69b9      	ldr	r1, [r7, #24]
 8004c12:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004c16:	f000 fdd9 	bl	80057cc <RCCEx_GetSAIxPeriphCLKFreq>
 8004c1a:	61f8      	str	r0, [r7, #28]
      break;
 8004c1c:	e3fa      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8004c1e:	69b9      	ldr	r1, [r7, #24]
 8004c20:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004c24:	f000 fdd2 	bl	80057cc <RCCEx_GetSAIxPeriphCLKFreq>
 8004c28:	61f8      	str	r0, [r7, #28]
      break;
 8004c2a:	e3f3      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004c2c:	40021000 	.word	0x40021000
 8004c30:	0003d090 	.word	0x0003d090
 8004c34:	0800c808 	.word	0x0800c808
 8004c38:	00f42400 	.word	0x00f42400
 8004c3c:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004c40:	4ba9      	ldr	r3, [pc, #676]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c46:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004c4a:	613b      	str	r3, [r7, #16]
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004c52:	d00c      	beq.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004c5a:	d87f      	bhi.n	8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c62:	d04e      	beq.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c6a:	d01d      	beq.n	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8004c6c:	e076      	b.n	8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004c6e:	4b9e      	ldr	r3, [pc, #632]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d172      	bne.n	8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004c7a:	4b9b      	ldr	r3, [pc, #620]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d005      	beq.n	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8004c86:	4b98      	ldr	r3, [pc, #608]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	091b      	lsrs	r3, r3, #4
 8004c8c:	f003 030f 	and.w	r3, r3, #15
 8004c90:	e005      	b.n	8004c9e <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8004c92:	4b95      	ldr	r3, [pc, #596]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c98:	0a1b      	lsrs	r3, r3, #8
 8004c9a:	f003 030f 	and.w	r3, r3, #15
 8004c9e:	4a93      	ldr	r2, [pc, #588]	@ (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8004ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ca4:	61fb      	str	r3, [r7, #28]
          break;
 8004ca6:	e05b      	b.n	8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004ca8:	4b8f      	ldr	r3, [pc, #572]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004cb4:	d156      	bne.n	8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004cb6:	4b8c      	ldr	r3, [pc, #560]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cc2:	d14f      	bne.n	8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004cc4:	4b88      	ldr	r3, [pc, #544]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	0a1b      	lsrs	r3, r3, #8
 8004cca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cce:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	fb03 f202 	mul.w	r2, r3, r2
 8004cd8:	4b83      	ldr	r3, [pc, #524]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	091b      	lsrs	r3, r3, #4
 8004cde:	f003 0307 	and.w	r3, r3, #7
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004cea:	4b7f      	ldr	r3, [pc, #508]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	0d5b      	lsrs	r3, r3, #21
 8004cf0:	f003 0303 	and.w	r3, r3, #3
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfe:	61fb      	str	r3, [r7, #28]
          break;
 8004d00:	e030      	b.n	8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004d02:	4b79      	ldr	r3, [pc, #484]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d0e:	d12b      	bne.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004d10:	4b75      	ldr	r3, [pc, #468]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d1c:	d124      	bne.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004d1e:	4b72      	ldr	r3, [pc, #456]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	0a1b      	lsrs	r3, r3, #8
 8004d24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d28:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	fb03 f202 	mul.w	r2, r3, r2
 8004d32:	4b6d      	ldr	r3, [pc, #436]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	091b      	lsrs	r3, r3, #4
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d42:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004d44:	4b68      	ldr	r3, [pc, #416]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	0d5b      	lsrs	r3, r3, #21
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	3301      	adds	r3, #1
 8004d50:	005b      	lsls	r3, r3, #1
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d58:	61fb      	str	r3, [r7, #28]
          break;
 8004d5a:	e005      	b.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8004d5c:	bf00      	nop
 8004d5e:	e359      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004d60:	bf00      	nop
 8004d62:	e357      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004d64:	bf00      	nop
 8004d66:	e355      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004d68:	bf00      	nop
        break;
 8004d6a:	e353      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004d6c:	4b5e      	ldr	r3, [pc, #376]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	613b      	str	r3, [r7, #16]
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	2b03      	cmp	r3, #3
 8004d7c:	d827      	bhi.n	8004dce <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8004d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8004d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d84:	08004d95 	.word	0x08004d95
 8004d88:	08004d9d 	.word	0x08004d9d
 8004d8c:	08004da5 	.word	0x08004da5
 8004d90:	08004db9 	.word	0x08004db9
          frequency = HAL_RCC_GetPCLK2Freq();
 8004d94:	f7ff fa48 	bl	8004228 <HAL_RCC_GetPCLK2Freq>
 8004d98:	61f8      	str	r0, [r7, #28]
          break;
 8004d9a:	e01d      	b.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004d9c:	f7ff f996 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 8004da0:	61f8      	str	r0, [r7, #28]
          break;
 8004da2:	e019      	b.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004da4:	4b50      	ldr	r3, [pc, #320]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004db0:	d10f      	bne.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8004db2:	4b4f      	ldr	r3, [pc, #316]	@ (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004db4:	61fb      	str	r3, [r7, #28]
          break;
 8004db6:	e00c      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004db8:	4b4b      	ldr	r3, [pc, #300]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d107      	bne.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8004dc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dca:	61fb      	str	r3, [r7, #28]
          break;
 8004dcc:	e003      	b.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8004dce:	bf00      	nop
 8004dd0:	e320      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004dd2:	bf00      	nop
 8004dd4:	e31e      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004dd6:	bf00      	nop
        break;
 8004dd8:	e31c      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004dda:	4b43      	ldr	r3, [pc, #268]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004de0:	f003 030c 	and.w	r3, r3, #12
 8004de4:	613b      	str	r3, [r7, #16]
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	2b0c      	cmp	r3, #12
 8004dea:	d83a      	bhi.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8004dec:	a201      	add	r2, pc, #4	@ (adr r2, 8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8004dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df2:	bf00      	nop
 8004df4:	08004e29 	.word	0x08004e29
 8004df8:	08004e63 	.word	0x08004e63
 8004dfc:	08004e63 	.word	0x08004e63
 8004e00:	08004e63 	.word	0x08004e63
 8004e04:	08004e31 	.word	0x08004e31
 8004e08:	08004e63 	.word	0x08004e63
 8004e0c:	08004e63 	.word	0x08004e63
 8004e10:	08004e63 	.word	0x08004e63
 8004e14:	08004e39 	.word	0x08004e39
 8004e18:	08004e63 	.word	0x08004e63
 8004e1c:	08004e63 	.word	0x08004e63
 8004e20:	08004e63 	.word	0x08004e63
 8004e24:	08004e4d 	.word	0x08004e4d
          frequency = HAL_RCC_GetPCLK1Freq();
 8004e28:	f7ff f9e8 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 8004e2c:	61f8      	str	r0, [r7, #28]
          break;
 8004e2e:	e01d      	b.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8004e30:	f7ff f94c 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 8004e34:	61f8      	str	r0, [r7, #28]
          break;
 8004e36:	e019      	b.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e38:	4b2b      	ldr	r3, [pc, #172]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e44:	d10f      	bne.n	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8004e46:	4b2a      	ldr	r3, [pc, #168]	@ (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004e48:	61fb      	str	r3, [r7, #28]
          break;
 8004e4a:	e00c      	b.n	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004e4c:	4b26      	ldr	r3, [pc, #152]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d107      	bne.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8004e5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e5e:	61fb      	str	r3, [r7, #28]
          break;
 8004e60:	e003      	b.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8004e62:	bf00      	nop
 8004e64:	e2d6      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004e66:	bf00      	nop
 8004e68:	e2d4      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004e6a:	bf00      	nop
        break;
 8004e6c:	e2d2      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e74:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e78:	613b      	str	r3, [r7, #16]
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	2b30      	cmp	r3, #48	@ 0x30
 8004e7e:	d021      	beq.n	8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	2b30      	cmp	r3, #48	@ 0x30
 8004e84:	d829      	bhi.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	2b20      	cmp	r3, #32
 8004e8a:	d011      	beq.n	8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	2b20      	cmp	r3, #32
 8004e90:	d823      	bhi.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	2b10      	cmp	r3, #16
 8004e9c:	d004      	beq.n	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8004e9e:	e01c      	b.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004ea0:	f7ff f9ac 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 8004ea4:	61f8      	str	r0, [r7, #28]
          break;
 8004ea6:	e01d      	b.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8004ea8:	f7ff f910 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 8004eac:	61f8      	str	r0, [r7, #28]
          break;
 8004eae:	e019      	b.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ebc:	d10f      	bne.n	8004ede <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8004ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004ec0:	61fb      	str	r3, [r7, #28]
          break;
 8004ec2:	e00c      	b.n	8004ede <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004ec4:	4b08      	ldr	r3, [pc, #32]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d107      	bne.n	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8004ed2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ed6:	61fb      	str	r3, [r7, #28]
          break;
 8004ed8:	e003      	b.n	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8004eda:	bf00      	nop
 8004edc:	e29a      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004ede:	bf00      	nop
 8004ee0:	e298      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004ee2:	bf00      	nop
        break;
 8004ee4:	e296      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004ee6:	bf00      	nop
 8004ee8:	40021000 	.word	0x40021000
 8004eec:	0800c808 	.word	0x0800c808
 8004ef0:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004ef4:	4b9b      	ldr	r3, [pc, #620]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004efa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004efe:	613b      	str	r3, [r7, #16]
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f04:	d021      	beq.n	8004f4a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f0a:	d829      	bhi.n	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	2b80      	cmp	r3, #128	@ 0x80
 8004f10:	d011      	beq.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	2b80      	cmp	r3, #128	@ 0x80
 8004f16:	d823      	bhi.n	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	2b40      	cmp	r3, #64	@ 0x40
 8004f22:	d004      	beq.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8004f24:	e01c      	b.n	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004f26:	f7ff f969 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 8004f2a:	61f8      	str	r0, [r7, #28]
          break;
 8004f2c:	e01d      	b.n	8004f6a <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8004f2e:	f7ff f8cd 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 8004f32:	61f8      	str	r0, [r7, #28]
          break;
 8004f34:	e019      	b.n	8004f6a <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f36:	4b8b      	ldr	r3, [pc, #556]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f42:	d10f      	bne.n	8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8004f44:	4b88      	ldr	r3, [pc, #544]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004f46:	61fb      	str	r3, [r7, #28]
          break;
 8004f48:	e00c      	b.n	8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004f4a:	4b86      	ldr	r3, [pc, #536]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d107      	bne.n	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8004f58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f5c:	61fb      	str	r3, [r7, #28]
          break;
 8004f5e:	e003      	b.n	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8004f60:	bf00      	nop
 8004f62:	e257      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004f64:	bf00      	nop
 8004f66:	e255      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004f68:	bf00      	nop
        break;
 8004f6a:	e253      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004f6c:	4b7d      	ldr	r3, [pc, #500]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f76:	613b      	str	r3, [r7, #16]
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f7e:	d025      	beq.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f86:	d82c      	bhi.n	8004fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f8e:	d013      	beq.n	8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f96:	d824      	bhi.n	8004fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d004      	beq.n	8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fa4:	d004      	beq.n	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8004fa6:	e01c      	b.n	8004fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004fa8:	f7ff f928 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 8004fac:	61f8      	str	r0, [r7, #28]
          break;
 8004fae:	e01d      	b.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004fb0:	f7ff f88c 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 8004fb4:	61f8      	str	r0, [r7, #28]
          break;
 8004fb6:	e019      	b.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004fb8:	4b6a      	ldr	r3, [pc, #424]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fc4:	d10f      	bne.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8004fc6:	4b68      	ldr	r3, [pc, #416]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004fc8:	61fb      	str	r3, [r7, #28]
          break;
 8004fca:	e00c      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004fcc:	4b65      	ldr	r3, [pc, #404]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d107      	bne.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8004fda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fde:	61fb      	str	r3, [r7, #28]
          break;
 8004fe0:	e003      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8004fe2:	bf00      	nop
 8004fe4:	e216      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004fe6:	bf00      	nop
 8004fe8:	e214      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004fea:	bf00      	nop
        break;
 8004fec:	e212      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004fee:	4b5d      	ldr	r3, [pc, #372]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ff8:	613b      	str	r3, [r7, #16]
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005000:	d025      	beq.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005008:	d82c      	bhi.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005010:	d013      	beq.n	800503a <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005018:	d824      	bhi.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d004      	beq.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005026:	d004      	beq.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8005028:	e01c      	b.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 800502a:	f7ff f8e7 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 800502e:	61f8      	str	r0, [r7, #28]
          break;
 8005030:	e01d      	b.n	800506e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8005032:	f7ff f84b 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 8005036:	61f8      	str	r0, [r7, #28]
          break;
 8005038:	e019      	b.n	800506e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800503a:	4b4a      	ldr	r3, [pc, #296]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005042:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005046:	d10f      	bne.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8005048:	4b47      	ldr	r3, [pc, #284]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800504a:	61fb      	str	r3, [r7, #28]
          break;
 800504c:	e00c      	b.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800504e:	4b45      	ldr	r3, [pc, #276]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b02      	cmp	r3, #2
 800505a:	d107      	bne.n	800506c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 800505c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005060:	61fb      	str	r3, [r7, #28]
          break;
 8005062:	e003      	b.n	800506c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8005064:	bf00      	nop
 8005066:	e1d5      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005068:	bf00      	nop
 800506a:	e1d3      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800506c:	bf00      	nop
        break;
 800506e:	e1d1      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005070:	4b3c      	ldr	r3, [pc, #240]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005076:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800507a:	613b      	str	r3, [r7, #16]
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005082:	d00c      	beq.n	800509e <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800508a:	d864      	bhi.n	8005156 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005092:	d008      	beq.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800509a:	d030      	beq.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 800509c:	e05b      	b.n	8005156 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 800509e:	f7ff f815 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 80050a2:	61f8      	str	r0, [r7, #28]
          break;
 80050a4:	e05c      	b.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80050a6:	4b2f      	ldr	r3, [pc, #188]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050b2:	d152      	bne.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 80050b4:	4b2b      	ldr	r3, [pc, #172]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d04c      	beq.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80050c0:	4b28      	ldr	r3, [pc, #160]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	0a1b      	lsrs	r3, r3, #8
 80050c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050ca:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	fb03 f202 	mul.w	r2, r3, r2
 80050d4:	4b23      	ldr	r3, [pc, #140]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	091b      	lsrs	r3, r3, #4
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	3301      	adds	r3, #1
 80050e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80050e6:	4b1f      	ldr	r3, [pc, #124]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	0e5b      	lsrs	r3, r3, #25
 80050ec:	f003 0303 	and.w	r3, r3, #3
 80050f0:	3301      	adds	r3, #1
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fa:	61fb      	str	r3, [r7, #28]
          break;
 80050fc:	e02d      	b.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 80050fe:	4b19      	ldr	r3, [pc, #100]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005106:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800510a:	d128      	bne.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800510c:	4b15      	ldr	r3, [pc, #84]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d022      	beq.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005118:	4b12      	ldr	r3, [pc, #72]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	0a1b      	lsrs	r3, r3, #8
 800511e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005122:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	fb03 f202 	mul.w	r2, r3, r2
 800512c:	4b0d      	ldr	r3, [pc, #52]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	091b      	lsrs	r3, r3, #4
 8005132:	f003 0307 	and.w	r3, r3, #7
 8005136:	3301      	adds	r3, #1
 8005138:	fbb2 f3f3 	udiv	r3, r2, r3
 800513c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800513e:	4b09      	ldr	r3, [pc, #36]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	0e5b      	lsrs	r3, r3, #25
 8005144:	f003 0303 	and.w	r3, r3, #3
 8005148:	3301      	adds	r3, #1
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005152:	61fb      	str	r3, [r7, #28]
          break;
 8005154:	e003      	b.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8005156:	bf00      	nop
 8005158:	e15c      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800515a:	bf00      	nop
 800515c:	e15a      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800515e:	bf00      	nop
        break;
 8005160:	e158      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8005162:	bf00      	nop
 8005164:	40021000 	.word	0x40021000
 8005168:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800516c:	4b9d      	ldr	r3, [pc, #628]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800516e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005172:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005176:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d103      	bne.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 800517e:	f7ff f853 	bl	8004228 <HAL_RCC_GetPCLK2Freq>
 8005182:	61f8      	str	r0, [r7, #28]
        break;
 8005184:	e146      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8005186:	f7fe ffa1 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 800518a:	61f8      	str	r0, [r7, #28]
        break;
 800518c:	e142      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800518e:	4b95      	ldr	r3, [pc, #596]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005194:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005198:	613b      	str	r3, [r7, #16]
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051a0:	d013      	beq.n	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051a8:	d819      	bhi.n	80051de <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d004      	beq.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051b6:	d004      	beq.n	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 80051b8:	e011      	b.n	80051de <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 80051ba:	f7ff f81f 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 80051be:	61f8      	str	r0, [r7, #28]
          break;
 80051c0:	e010      	b.n	80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 80051c2:	f7fe ff83 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 80051c6:	61f8      	str	r0, [r7, #28]
          break;
 80051c8:	e00c      	b.n	80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80051ca:	4b86      	ldr	r3, [pc, #536]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051d6:	d104      	bne.n	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 80051d8:	4b83      	ldr	r3, [pc, #524]	@ (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80051da:	61fb      	str	r3, [r7, #28]
          break;
 80051dc:	e001      	b.n	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 80051de:	bf00      	nop
 80051e0:	e118      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80051e2:	bf00      	nop
        break;
 80051e4:	e116      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80051e6:	4b7f      	ldr	r3, [pc, #508]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80051e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80051f0:	613b      	str	r3, [r7, #16]
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051f8:	d013      	beq.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005200:	d819      	bhi.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d004      	beq.n	8005212 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800520e:	d004      	beq.n	800521a <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8005210:	e011      	b.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005212:	f7fe fff3 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 8005216:	61f8      	str	r0, [r7, #28]
          break;
 8005218:	e010      	b.n	800523c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800521a:	f7fe ff57 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 800521e:	61f8      	str	r0, [r7, #28]
          break;
 8005220:	e00c      	b.n	800523c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005222:	4b70      	ldr	r3, [pc, #448]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800522a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800522e:	d104      	bne.n	800523a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8005230:	4b6d      	ldr	r3, [pc, #436]	@ (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005232:	61fb      	str	r3, [r7, #28]
          break;
 8005234:	e001      	b.n	800523a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8005236:	bf00      	nop
 8005238:	e0ec      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800523a:	bf00      	nop
        break;
 800523c:	e0ea      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800523e:	4b69      	ldr	r3, [pc, #420]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005244:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005248:	613b      	str	r3, [r7, #16]
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005250:	d013      	beq.n	800527a <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005258:	d819      	bhi.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d004      	beq.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005266:	d004      	beq.n	8005272 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8005268:	e011      	b.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 800526a:	f7fe ffc7 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 800526e:	61f8      	str	r0, [r7, #28]
          break;
 8005270:	e010      	b.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8005272:	f7fe ff2b 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 8005276:	61f8      	str	r0, [r7, #28]
          break;
 8005278:	e00c      	b.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800527a:	4b5a      	ldr	r3, [pc, #360]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005282:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005286:	d104      	bne.n	8005292 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8005288:	4b57      	ldr	r3, [pc, #348]	@ (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800528a:	61fb      	str	r3, [r7, #28]
          break;
 800528c:	e001      	b.n	8005292 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 800528e:	bf00      	nop
 8005290:	e0c0      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005292:	bf00      	nop
        break;
 8005294:	e0be      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005296:	4b53      	ldr	r3, [pc, #332]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800529c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80052a0:	613b      	str	r3, [r7, #16]
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80052a8:	d02c      	beq.n	8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80052b0:	d833      	bhi.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80052b8:	d01a      	beq.n	80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80052c0:	d82b      	bhi.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d004      	beq.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80052ce:	d004      	beq.n	80052da <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 80052d0:	e023      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 80052d2:	f7fe ff93 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 80052d6:	61f8      	str	r0, [r7, #28]
          break;
 80052d8:	e026      	b.n	8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80052da:	4b42      	ldr	r3, [pc, #264]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80052dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d11a      	bne.n	800531e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 80052e8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80052ec:	61fb      	str	r3, [r7, #28]
          break;
 80052ee:	e016      	b.n	800531e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80052f0:	4b3c      	ldr	r3, [pc, #240]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052fc:	d111      	bne.n	8005322 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 80052fe:	4b3a      	ldr	r3, [pc, #232]	@ (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005300:	61fb      	str	r3, [r7, #28]
          break;
 8005302:	e00e      	b.n	8005322 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005304:	4b37      	ldr	r3, [pc, #220]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b02      	cmp	r3, #2
 8005310:	d109      	bne.n	8005326 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8005312:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005316:	61fb      	str	r3, [r7, #28]
          break;
 8005318:	e005      	b.n	8005326 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 800531a:	bf00      	nop
 800531c:	e07a      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800531e:	bf00      	nop
 8005320:	e078      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005322:	bf00      	nop
 8005324:	e076      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005326:	bf00      	nop
        break;
 8005328:	e074      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800532a:	4b2e      	ldr	r3, [pc, #184]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800532c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005330:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005334:	613b      	str	r3, [r7, #16]
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800533c:	d02c      	beq.n	8005398 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005344:	d833      	bhi.n	80053ae <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800534c:	d01a      	beq.n	8005384 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005354:	d82b      	bhi.n	80053ae <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d004      	beq.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005362:	d004      	beq.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8005364:	e023      	b.n	80053ae <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005366:	f7fe ff49 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 800536a:	61f8      	str	r0, [r7, #28]
          break;
 800536c:	e026      	b.n	80053bc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800536e:	4b1d      	ldr	r3, [pc, #116]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005370:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b02      	cmp	r3, #2
 800537a:	d11a      	bne.n	80053b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 800537c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005380:	61fb      	str	r3, [r7, #28]
          break;
 8005382:	e016      	b.n	80053b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005384:	4b17      	ldr	r3, [pc, #92]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800538c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005390:	d111      	bne.n	80053b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8005392:	4b15      	ldr	r3, [pc, #84]	@ (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005394:	61fb      	str	r3, [r7, #28]
          break;
 8005396:	e00e      	b.n	80053b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005398:	4b12      	ldr	r3, [pc, #72]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800539a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d109      	bne.n	80053ba <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 80053a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053aa:	61fb      	str	r3, [r7, #28]
          break;
 80053ac:	e005      	b.n	80053ba <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 80053ae:	bf00      	nop
 80053b0:	e030      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80053b2:	bf00      	nop
 80053b4:	e02e      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80053b6:	bf00      	nop
 80053b8:	e02c      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80053ba:	bf00      	nop
        break;
 80053bc:	e02a      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 80053be:	4b09      	ldr	r3, [pc, #36]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80053c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053c4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80053c8:	613b      	str	r3, [r7, #16]
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d004      	beq.n	80053da <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053d6:	d009      	beq.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 80053d8:	e012      	b.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 80053da:	f7fe ff0f 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 80053de:	61f8      	str	r0, [r7, #28]
          break;
 80053e0:	e00e      	b.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 80053e2:	bf00      	nop
 80053e4:	40021000 	.word	0x40021000
 80053e8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80053ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005420 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053f8:	d101      	bne.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 80053fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80053fc:	61fb      	str	r3, [r7, #28]
          break;
 80053fe:	bf00      	nop
        break;
 8005400:	e008      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8005402:	bf00      	nop
 8005404:	e006      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8005406:	bf00      	nop
 8005408:	e004      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800540a:	bf00      	nop
 800540c:	e002      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800540e:	bf00      	nop
 8005410:	e000      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8005412:	bf00      	nop
    }
  }

  return(frequency);
 8005414:	69fb      	ldr	r3, [r7, #28]
}
 8005416:	4618      	mov	r0, r3
 8005418:	3720      	adds	r7, #32
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	40021000 	.word	0x40021000
 8005424:	00f42400 	.word	0x00f42400

08005428 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005436:	4b75      	ldr	r3, [pc, #468]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f003 0303 	and.w	r3, r3, #3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d018      	beq.n	8005474 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005442:	4b72      	ldr	r3, [pc, #456]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f003 0203 	and.w	r2, r3, #3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	429a      	cmp	r2, r3
 8005450:	d10d      	bne.n	800546e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
       ||
 8005456:	2b00      	cmp	r3, #0
 8005458:	d009      	beq.n	800546e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800545a:	4b6c      	ldr	r3, [pc, #432]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	091b      	lsrs	r3, r3, #4
 8005460:	f003 0307 	and.w	r3, r3, #7
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
       ||
 800546a:	429a      	cmp	r2, r3
 800546c:	d047      	beq.n	80054fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	73fb      	strb	r3, [r7, #15]
 8005472:	e044      	b.n	80054fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2b03      	cmp	r3, #3
 800547a:	d018      	beq.n	80054ae <RCCEx_PLLSAI1_Config+0x86>
 800547c:	2b03      	cmp	r3, #3
 800547e:	d825      	bhi.n	80054cc <RCCEx_PLLSAI1_Config+0xa4>
 8005480:	2b01      	cmp	r3, #1
 8005482:	d002      	beq.n	800548a <RCCEx_PLLSAI1_Config+0x62>
 8005484:	2b02      	cmp	r3, #2
 8005486:	d009      	beq.n	800549c <RCCEx_PLLSAI1_Config+0x74>
 8005488:	e020      	b.n	80054cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800548a:	4b60      	ldr	r3, [pc, #384]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d11d      	bne.n	80054d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800549a:	e01a      	b.n	80054d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800549c:	4b5b      	ldr	r3, [pc, #364]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d116      	bne.n	80054d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054ac:	e013      	b.n	80054d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054ae:	4b57      	ldr	r3, [pc, #348]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10f      	bne.n	80054da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054ba:	4b54      	ldr	r3, [pc, #336]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d109      	bne.n	80054da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054ca:	e006      	b.n	80054da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	73fb      	strb	r3, [r7, #15]
      break;
 80054d0:	e004      	b.n	80054dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054d2:	bf00      	nop
 80054d4:	e002      	b.n	80054dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054d6:	bf00      	nop
 80054d8:	e000      	b.n	80054dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054da:	bf00      	nop
    }

    if(status == HAL_OK)
 80054dc:	7bfb      	ldrb	r3, [r7, #15]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10d      	bne.n	80054fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80054e2:	4b4a      	ldr	r3, [pc, #296]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6819      	ldr	r1, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	011b      	lsls	r3, r3, #4
 80054f6:	430b      	orrs	r3, r1
 80054f8:	4944      	ldr	r1, [pc, #272]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80054fe:	7bfb      	ldrb	r3, [r7, #15]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d17d      	bne.n	8005600 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005504:	4b41      	ldr	r3, [pc, #260]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a40      	ldr	r2, [pc, #256]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 800550a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800550e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005510:	f7fc fd38 	bl	8001f84 <HAL_GetTick>
 8005514:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005516:	e009      	b.n	800552c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005518:	f7fc fd34 	bl	8001f84 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d902      	bls.n	800552c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	73fb      	strb	r3, [r7, #15]
        break;
 800552a:	e005      	b.n	8005538 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800552c:	4b37      	ldr	r3, [pc, #220]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1ef      	bne.n	8005518 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005538:	7bfb      	ldrb	r3, [r7, #15]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d160      	bne.n	8005600 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d111      	bne.n	8005568 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005544:	4b31      	ldr	r3, [pc, #196]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800554c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	6892      	ldr	r2, [r2, #8]
 8005554:	0211      	lsls	r1, r2, #8
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	68d2      	ldr	r2, [r2, #12]
 800555a:	0912      	lsrs	r2, r2, #4
 800555c:	0452      	lsls	r2, r2, #17
 800555e:	430a      	orrs	r2, r1
 8005560:	492a      	ldr	r1, [pc, #168]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005562:	4313      	orrs	r3, r2
 8005564:	610b      	str	r3, [r1, #16]
 8005566:	e027      	b.n	80055b8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d112      	bne.n	8005594 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800556e:	4b27      	ldr	r3, [pc, #156]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005576:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	6892      	ldr	r2, [r2, #8]
 800557e:	0211      	lsls	r1, r2, #8
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6912      	ldr	r2, [r2, #16]
 8005584:	0852      	lsrs	r2, r2, #1
 8005586:	3a01      	subs	r2, #1
 8005588:	0552      	lsls	r2, r2, #21
 800558a:	430a      	orrs	r2, r1
 800558c:	491f      	ldr	r1, [pc, #124]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 800558e:	4313      	orrs	r3, r2
 8005590:	610b      	str	r3, [r1, #16]
 8005592:	e011      	b.n	80055b8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005594:	4b1d      	ldr	r3, [pc, #116]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800559c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	6892      	ldr	r2, [r2, #8]
 80055a4:	0211      	lsls	r1, r2, #8
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6952      	ldr	r2, [r2, #20]
 80055aa:	0852      	lsrs	r2, r2, #1
 80055ac:	3a01      	subs	r2, #1
 80055ae:	0652      	lsls	r2, r2, #25
 80055b0:	430a      	orrs	r2, r1
 80055b2:	4916      	ldr	r1, [pc, #88]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80055b8:	4b14      	ldr	r3, [pc, #80]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a13      	ldr	r2, [pc, #76]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80055c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c4:	f7fc fcde 	bl	8001f84 <HAL_GetTick>
 80055c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055ca:	e009      	b.n	80055e0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055cc:	f7fc fcda 	bl	8001f84 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d902      	bls.n	80055e0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	73fb      	strb	r3, [r7, #15]
          break;
 80055de:	e005      	b.n	80055ec <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055e0:	4b0a      	ldr	r3, [pc, #40]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d0ef      	beq.n	80055cc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d106      	bne.n	8005600 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80055f2:	4b06      	ldr	r3, [pc, #24]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f4:	691a      	ldr	r2, [r3, #16]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	4904      	ldr	r1, [pc, #16]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005600:	7bfb      	ldrb	r3, [r7, #15]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	40021000 	.word	0x40021000

08005610 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800561e:	4b6a      	ldr	r3, [pc, #424]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d018      	beq.n	800565c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800562a:	4b67      	ldr	r3, [pc, #412]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f003 0203 	and.w	r2, r3, #3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	429a      	cmp	r2, r3
 8005638:	d10d      	bne.n	8005656 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
       ||
 800563e:	2b00      	cmp	r3, #0
 8005640:	d009      	beq.n	8005656 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005642:	4b61      	ldr	r3, [pc, #388]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	091b      	lsrs	r3, r3, #4
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
       ||
 8005652:	429a      	cmp	r2, r3
 8005654:	d047      	beq.n	80056e6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	73fb      	strb	r3, [r7, #15]
 800565a:	e044      	b.n	80056e6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2b03      	cmp	r3, #3
 8005662:	d018      	beq.n	8005696 <RCCEx_PLLSAI2_Config+0x86>
 8005664:	2b03      	cmp	r3, #3
 8005666:	d825      	bhi.n	80056b4 <RCCEx_PLLSAI2_Config+0xa4>
 8005668:	2b01      	cmp	r3, #1
 800566a:	d002      	beq.n	8005672 <RCCEx_PLLSAI2_Config+0x62>
 800566c:	2b02      	cmp	r3, #2
 800566e:	d009      	beq.n	8005684 <RCCEx_PLLSAI2_Config+0x74>
 8005670:	e020      	b.n	80056b4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005672:	4b55      	ldr	r3, [pc, #340]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d11d      	bne.n	80056ba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005682:	e01a      	b.n	80056ba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005684:	4b50      	ldr	r3, [pc, #320]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800568c:	2b00      	cmp	r3, #0
 800568e:	d116      	bne.n	80056be <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005694:	e013      	b.n	80056be <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005696:	4b4c      	ldr	r3, [pc, #304]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10f      	bne.n	80056c2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056a2:	4b49      	ldr	r3, [pc, #292]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d109      	bne.n	80056c2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056b2:	e006      	b.n	80056c2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	73fb      	strb	r3, [r7, #15]
      break;
 80056b8:	e004      	b.n	80056c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056ba:	bf00      	nop
 80056bc:	e002      	b.n	80056c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056be:	bf00      	nop
 80056c0:	e000      	b.n	80056c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80056c4:	7bfb      	ldrb	r3, [r7, #15]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10d      	bne.n	80056e6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056ca:	4b3f      	ldr	r3, [pc, #252]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6819      	ldr	r1, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	3b01      	subs	r3, #1
 80056dc:	011b      	lsls	r3, r3, #4
 80056de:	430b      	orrs	r3, r1
 80056e0:	4939      	ldr	r1, [pc, #228]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80056e6:	7bfb      	ldrb	r3, [r7, #15]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d167      	bne.n	80057bc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80056ec:	4b36      	ldr	r3, [pc, #216]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a35      	ldr	r2, [pc, #212]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056f8:	f7fc fc44 	bl	8001f84 <HAL_GetTick>
 80056fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80056fe:	e009      	b.n	8005714 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005700:	f7fc fc40 	bl	8001f84 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d902      	bls.n	8005714 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	73fb      	strb	r3, [r7, #15]
        break;
 8005712:	e005      	b.n	8005720 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005714:	4b2c      	ldr	r3, [pc, #176]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1ef      	bne.n	8005700 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005720:	7bfb      	ldrb	r3, [r7, #15]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d14a      	bne.n	80057bc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d111      	bne.n	8005750 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800572c:	4b26      	ldr	r3, [pc, #152]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005734:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	6892      	ldr	r2, [r2, #8]
 800573c:	0211      	lsls	r1, r2, #8
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	68d2      	ldr	r2, [r2, #12]
 8005742:	0912      	lsrs	r2, r2, #4
 8005744:	0452      	lsls	r2, r2, #17
 8005746:	430a      	orrs	r2, r1
 8005748:	491f      	ldr	r1, [pc, #124]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800574a:	4313      	orrs	r3, r2
 800574c:	614b      	str	r3, [r1, #20]
 800574e:	e011      	b.n	8005774 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005750:	4b1d      	ldr	r3, [pc, #116]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005758:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	6892      	ldr	r2, [r2, #8]
 8005760:	0211      	lsls	r1, r2, #8
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6912      	ldr	r2, [r2, #16]
 8005766:	0852      	lsrs	r2, r2, #1
 8005768:	3a01      	subs	r2, #1
 800576a:	0652      	lsls	r2, r2, #25
 800576c:	430a      	orrs	r2, r1
 800576e:	4916      	ldr	r1, [pc, #88]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005770:	4313      	orrs	r3, r2
 8005772:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005774:	4b14      	ldr	r3, [pc, #80]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a13      	ldr	r2, [pc, #76]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800577a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800577e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005780:	f7fc fc00 	bl	8001f84 <HAL_GetTick>
 8005784:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005786:	e009      	b.n	800579c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005788:	f7fc fbfc 	bl	8001f84 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b02      	cmp	r3, #2
 8005794:	d902      	bls.n	800579c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	73fb      	strb	r3, [r7, #15]
          break;
 800579a:	e005      	b.n	80057a8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800579c:	4b0a      	ldr	r3, [pc, #40]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d0ef      	beq.n	8005788 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d106      	bne.n	80057bc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80057ae:	4b06      	ldr	r3, [pc, #24]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b0:	695a      	ldr	r2, [r3, #20]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	4904      	ldr	r1, [pc, #16]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	40021000 	.word	0x40021000

080057cc <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b089      	sub	sp, #36	@ 0x24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80057d6:	2300      	movs	r3, #0
 80057d8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80057de:	2300      	movs	r3, #0
 80057e0:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057e8:	d10c      	bne.n	8005804 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80057ea:	4b6e      	ldr	r3, [pc, #440]	@ (80059a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80057ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057f0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80057f4:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80057fc:	d112      	bne.n	8005824 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80057fe:	4b6a      	ldr	r3, [pc, #424]	@ (80059a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8005800:	61fb      	str	r3, [r7, #28]
 8005802:	e00f      	b.n	8005824 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800580a:	d10b      	bne.n	8005824 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800580c:	4b65      	ldr	r3, [pc, #404]	@ (80059a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800580e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005812:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8005816:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800581e:	d101      	bne.n	8005824 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8005820:	4b61      	ldr	r3, [pc, #388]	@ (80059a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8005822:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	2b00      	cmp	r3, #0
 8005828:	f040 80b4 	bne.w	8005994 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005836:	d003      	beq.n	8005840 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800583e:	d135      	bne.n	80058ac <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005840:	4b58      	ldr	r3, [pc, #352]	@ (80059a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005848:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800584c:	f040 80a1 	bne.w	8005992 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8005850:	4b54      	ldr	r3, [pc, #336]	@ (80059a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 809a 	beq.w	8005992 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800585e:	4b51      	ldr	r3, [pc, #324]	@ (80059a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	091b      	lsrs	r3, r3, #4
 8005864:	f003 0307 	and.w	r3, r3, #7
 8005868:	3301      	adds	r3, #1
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005870:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005872:	4b4c      	ldr	r3, [pc, #304]	@ (80059a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	0a1b      	lsrs	r3, r3, #8
 8005878:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800587c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10a      	bne.n	800589a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005884:	4b47      	ldr	r3, [pc, #284]	@ (80059a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d002      	beq.n	8005896 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8005890:	2311      	movs	r3, #17
 8005892:	617b      	str	r3, [r7, #20]
 8005894:	e001      	b.n	800589a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8005896:	2307      	movs	r3, #7
 8005898:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	fb03 f202 	mul.w	r2, r3, r2
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a8:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80058aa:	e072      	b.n	8005992 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d133      	bne.n	800591a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80058b2:	4b3c      	ldr	r3, [pc, #240]	@ (80059a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058be:	d169      	bne.n	8005994 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80058c0:	4b38      	ldr	r3, [pc, #224]	@ (80059a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d063      	beq.n	8005994 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80058cc:	4b35      	ldr	r3, [pc, #212]	@ (80059a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	091b      	lsrs	r3, r3, #4
 80058d2:	f003 0307 	and.w	r3, r3, #7
 80058d6:	3301      	adds	r3, #1
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	fbb2 f3f3 	udiv	r3, r2, r3
 80058de:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80058e0:	4b30      	ldr	r3, [pc, #192]	@ (80059a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	0a1b      	lsrs	r3, r3, #8
 80058e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058ea:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10a      	bne.n	8005908 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80058f2:	4b2c      	ldr	r3, [pc, #176]	@ (80059a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d002      	beq.n	8005904 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 80058fe:	2311      	movs	r3, #17
 8005900:	617b      	str	r3, [r7, #20]
 8005902:	e001      	b.n	8005908 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8005904:	2307      	movs	r3, #7
 8005906:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	fb03 f202 	mul.w	r2, r3, r2
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	fbb2 f3f3 	udiv	r3, r2, r3
 8005916:	61fb      	str	r3, [r7, #28]
 8005918:	e03c      	b.n	8005994 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005920:	d003      	beq.n	800592a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005928:	d134      	bne.n	8005994 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800592a:	4b1e      	ldr	r3, [pc, #120]	@ (80059a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005932:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005936:	d12d      	bne.n	8005994 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005938:	4b1a      	ldr	r3, [pc, #104]	@ (80059a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d027      	beq.n	8005994 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005944:	4b17      	ldr	r3, [pc, #92]	@ (80059a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	091b      	lsrs	r3, r3, #4
 800594a:	f003 0307 	and.w	r3, r3, #7
 800594e:	3301      	adds	r3, #1
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	fbb2 f3f3 	udiv	r3, r2, r3
 8005956:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005958:	4b12      	ldr	r3, [pc, #72]	@ (80059a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	0a1b      	lsrs	r3, r3, #8
 800595e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005962:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10a      	bne.n	8005980 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800596a:	4b0e      	ldr	r3, [pc, #56]	@ (80059a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d002      	beq.n	800597c <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8005976:	2311      	movs	r3, #17
 8005978:	617b      	str	r3, [r7, #20]
 800597a:	e001      	b.n	8005980 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 800597c:	2307      	movs	r3, #7
 800597e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	fb03 f202 	mul.w	r2, r3, r2
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	fbb2 f3f3 	udiv	r3, r2, r3
 800598e:	61fb      	str	r3, [r7, #28]
 8005990:	e000      	b.n	8005994 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005992:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8005994:	69fb      	ldr	r3, [r7, #28]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3724      	adds	r7, #36	@ 0x24
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	40021000 	.word	0x40021000
 80059a8:	001fff68 	.word	0x001fff68

080059ac <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
 80059b8:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d904      	bls.n	80059ca <HAL_SAI_InitProtocol+0x1e>
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	3b03      	subs	r3, #3
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d812      	bhi.n	80059ee <HAL_SAI_InitProtocol+0x42>
 80059c8:	e008      	b.n	80059dc <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	68b9      	ldr	r1, [r7, #8]
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f000 fd09 	bl	80063e8 <SAI_InitI2S>
 80059d6:	4603      	mov	r3, r0
 80059d8:	75fb      	strb	r3, [r7, #23]
      break;
 80059da:	e00b      	b.n	80059f4 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	68b9      	ldr	r1, [r7, #8]
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 fdb2 	bl	800654c <SAI_InitPCM>
 80059e8:	4603      	mov	r3, r0
 80059ea:	75fb      	strb	r3, [r7, #23]
      break;
 80059ec:	e002      	b.n	80059f4 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	75fb      	strb	r3, [r7, #23]
      break;
 80059f2:	bf00      	nop
  }

  if (status == HAL_OK)
 80059f4:	7dfb      	ldrb	r3, [r7, #23]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d104      	bne.n	8005a04 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f000 f808 	bl	8005a10 <HAL_SAI_Init>
 8005a00:	4603      	mov	r3, r0
 8005a02:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b088      	sub	sp, #32
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e155      	b.n	8005cce <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d106      	bne.n	8005a3c <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7fb f9b4 	bl	8000da4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 fe3f 	bl	80066c0 <SAI_Disable>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e140      	b.n	8005cce <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d00c      	beq.n	8005a76 <HAL_SAI_Init+0x66>
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d80d      	bhi.n	8005a7c <HAL_SAI_Init+0x6c>
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d002      	beq.n	8005a6a <HAL_SAI_Init+0x5a>
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d003      	beq.n	8005a70 <HAL_SAI_Init+0x60>
 8005a68:	e008      	b.n	8005a7c <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	61fb      	str	r3, [r7, #28]
      break;
 8005a6e:	e008      	b.n	8005a82 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005a70:	2310      	movs	r3, #16
 8005a72:	61fb      	str	r3, [r7, #28]
      break;
 8005a74:	e005      	b.n	8005a82 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005a76:	2320      	movs	r3, #32
 8005a78:	61fb      	str	r3, [r7, #28]
      break;
 8005a7a:	e002      	b.n	8005a82 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	61fb      	str	r3, [r7, #28]
      break;
 8005a80:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	d81d      	bhi.n	8005ac6 <HAL_SAI_Init+0xb6>
 8005a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a90 <HAL_SAI_Init+0x80>)
 8005a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a90:	08005aa1 	.word	0x08005aa1
 8005a94:	08005aa7 	.word	0x08005aa7
 8005a98:	08005aaf 	.word	0x08005aaf
 8005a9c:	08005ab7 	.word	0x08005ab7
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	617b      	str	r3, [r7, #20]
      break;
 8005aa4:	e012      	b.n	8005acc <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005aa6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005aaa:	617b      	str	r3, [r7, #20]
      break;
 8005aac:	e00e      	b.n	8005acc <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005aae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005ab2:	617b      	str	r3, [r7, #20]
      break;
 8005ab4:	e00a      	b.n	8005acc <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005ab6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005aba:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	f043 0301 	orr.w	r3, r3, #1
 8005ac2:	61fb      	str	r3, [r7, #28]
      break;
 8005ac4:	e002      	b.n	8005acc <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	617b      	str	r3, [r7, #20]
      break;
 8005aca:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a81      	ldr	r2, [pc, #516]	@ (8005cd8 <HAL_SAI_Init+0x2c8>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d004      	beq.n	8005ae0 <HAL_SAI_Init+0xd0>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a80      	ldr	r2, [pc, #512]	@ (8005cdc <HAL_SAI_Init+0x2cc>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d103      	bne.n	8005ae8 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8005ae0:	4a7f      	ldr	r2, [pc, #508]	@ (8005ce0 <HAL_SAI_Init+0x2d0>)
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	6013      	str	r3, [r2, #0]
 8005ae6:	e002      	b.n	8005aee <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005ae8:	4a7e      	ldr	r2, [pc, #504]	@ (8005ce4 <HAL_SAI_Init+0x2d4>)
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d041      	beq.n	8005b7a <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a77      	ldr	r2, [pc, #476]	@ (8005cd8 <HAL_SAI_Init+0x2c8>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d004      	beq.n	8005b0a <HAL_SAI_Init+0xfa>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a75      	ldr	r2, [pc, #468]	@ (8005cdc <HAL_SAI_Init+0x2cc>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d105      	bne.n	8005b16 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005b0a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005b0e:	f7fe ff1d 	bl	800494c <HAL_RCCEx_GetPeriphCLKFreq>
 8005b12:	6138      	str	r0, [r7, #16]
 8005b14:	e004      	b.n	8005b20 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005b16:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005b1a:	f7fe ff17 	bl	800494c <HAL_RCCEx_GetPeriphCLKFreq>
 8005b1e:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	4613      	mov	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	025b      	lsls	r3, r3, #9
 8005b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b36:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4a6b      	ldr	r2, [pc, #428]	@ (8005ce8 <HAL_SAI_Init+0x2d8>)
 8005b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b40:	08da      	lsrs	r2, r3, #3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8005b46:	68f9      	ldr	r1, [r7, #12]
 8005b48:	4b67      	ldr	r3, [pc, #412]	@ (8005ce8 <HAL_SAI_Init+0x2d8>)
 8005b4a:	fba3 2301 	umull	r2, r3, r3, r1
 8005b4e:	08da      	lsrs	r2, r3, #3
 8005b50:	4613      	mov	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	1aca      	subs	r2, r1, r3
 8005b5a:	2a08      	cmp	r2, #8
 8005b5c:	d904      	bls.n	8005b68 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	1c5a      	adds	r2, r3, #1
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b6c:	2b04      	cmp	r3, #4
 8005b6e:	d104      	bne.n	8005b7a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	085a      	lsrs	r2, r3, #1
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <HAL_SAI_Init+0x17a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d109      	bne.n	8005b9e <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d101      	bne.n	8005b96 <HAL_SAI_Init+0x186>
 8005b92:	2300      	movs	r3, #0
 8005b94:	e001      	b.n	8005b9a <HAL_SAI_Init+0x18a>
 8005b96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b9a:	61bb      	str	r3, [r7, #24]
 8005b9c:	e008      	b.n	8005bb0 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d102      	bne.n	8005bac <HAL_SAI_Init+0x19c>
 8005ba6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005baa:	e000      	b.n	8005bae <HAL_SAI_Init+0x19e>
 8005bac:	2300      	movs	r3, #0
 8005bae:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6819      	ldr	r1, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	4b4c      	ldr	r3, [pc, #304]	@ (8005cec <HAL_SAI_Init+0x2dc>)
 8005bbc:	400b      	ands	r3, r1
 8005bbe:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6819      	ldr	r1, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bce:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005bd4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 8005be8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005bf4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	051b      	lsls	r3, r3, #20
 8005bfc:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	6812      	ldr	r2, [r2, #0]
 8005c10:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005c14:	f023 030f 	bic.w	r3, r3, #15
 8005c18:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6859      	ldr	r1, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	699a      	ldr	r2, [r3, #24]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6899      	ldr	r1, [r3, #8]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	4b2b      	ldr	r3, [pc, #172]	@ (8005cf0 <HAL_SAI_Init+0x2e0>)
 8005c44:	400b      	ands	r3, r1
 8005c46:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6899      	ldr	r1, [r3, #8]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c52:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005c58:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8005c5e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8005c64:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005c6e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68d9      	ldr	r1, [r3, #12]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8005c86:	400b      	ands	r3, r1
 8005c88:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68d9      	ldr	r1, [r3, #12]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c98:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c9e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005ca0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	021b      	lsls	r3, r3, #8
 8005caa:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3720      	adds	r7, #32
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	40015404 	.word	0x40015404
 8005cdc:	40015424 	.word	0x40015424
 8005ce0:	40015400 	.word	0x40015400
 8005ce4:	40015800 	.word	0x40015800
 8005ce8:	cccccccd 	.word	0xcccccccd
 8005cec:	ff05c010 	.word	0xff05c010
 8005cf0:	fff88000 	.word	0xfff88000

08005cf4 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d101      	bne.n	8005d0e <HAL_SAI_Abort+0x1a>
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	e053      	b.n	8005db6 <HAL_SAI_Abort+0xc2>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fcd2 	bl	80066c0 <SAI_Disable>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d001      	beq.n	8005d26 <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d34:	d125      	bne.n	8005d82 <HAL_SAI_Abort+0x8e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005d44:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b12      	cmp	r3, #18
 8005d50:	d108      	bne.n	8005d64 <HAL_SAI_Abort+0x70>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d004      	beq.n	8005d64 <HAL_SAI_Abort+0x70>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fc fb16 	bl	8002390 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b22      	cmp	r3, #34	@ 0x22
 8005d6e:	d108      	bne.n	8005d82 <HAL_SAI_Abort+0x8e>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d004      	beq.n	8005d82 <HAL_SAI_Abort+0x8e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7fc fb07 	bl	8002390 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2200      	movs	r2, #0
 8005d88:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d92:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f042 0208 	orr.w	r2, r2, #8
 8005da2:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
	...

08005dc0 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8005dce:	f7fc f8d9 	bl	8001f84 <HAL_GetTick>
 8005dd2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d002      	beq.n	8005de0 <HAL_SAI_Transmit_DMA+0x20>
 8005dda:	88fb      	ldrh	r3, [r7, #6]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d101      	bne.n	8005de4 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e093      	b.n	8005f0c <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	f040 808c 	bne.w	8005f0a <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d101      	bne.n	8005e00 <HAL_SAI_Transmit_DMA+0x40>
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	e085      	b.n	8005f0c <HAL_SAI_Transmit_DMA+0x14c>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	88fa      	ldrh	r2, [r7, #6]
 8005e12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	88fa      	ldrh	r2, [r7, #6]
 8005e1a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2212      	movs	r2, #18
 8005e2a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e32:	4a38      	ldr	r2, [pc, #224]	@ (8005f14 <HAL_SAI_Transmit_DMA+0x154>)
 8005e34:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e3a:	4a37      	ldr	r2, [pc, #220]	@ (8005f18 <HAL_SAI_Transmit_DMA+0x158>)
 8005e3c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e42:	4a36      	ldr	r2, [pc, #216]	@ (8005f1c <HAL_SAI_Transmit_DMA+0x15c>)
 8005e44:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e56:	4619      	mov	r1, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	331c      	adds	r3, #28
 8005e5e:	461a      	mov	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005e66:	f7fc fa33 	bl	80022d0 <HAL_DMA_Start_IT>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d005      	beq.n	8005e7c <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e047      	b.n	8005f0c <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f000 fbe6 	bl	8006650 <SAI_InterruptFlag>
 8005e84:	4601      	mov	r1, r0
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	691a      	ldr	r2, [r3, #16]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	430a      	orrs	r2, r1
 8005e92:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005ea2:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005ea4:	e015      	b.n	8005ed2 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8005ea6:	f7fc f86d 	bl	8001f84 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005eb4:	d90d      	bls.n	8005ed2 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ebc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e01c      	b.n	8005f0c <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0e2      	beq.n	8005ea6 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d107      	bne.n	8005efe <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005efc:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	e000      	b.n	8005f0c <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 8005f0a:	2302      	movs	r3, #2
  }
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3718      	adds	r7, #24
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	08006793 	.word	0x08006793
 8005f18:	08006735 	.word	0x08006735
 8005f1c:	08006829 	.word	0x08006829

08005f20 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d002      	beq.n	8005f3a <HAL_SAI_Receive_DMA+0x1a>
 8005f34:	88fb      	ldrh	r3, [r7, #6]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e074      	b.n	8006028 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d16d      	bne.n	8006026 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d101      	bne.n	8005f58 <HAL_SAI_Receive_DMA+0x38>
 8005f54:	2302      	movs	r3, #2
 8005f56:	e067      	b.n	8006028 <HAL_SAI_Receive_DMA+0x108>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	88fa      	ldrh	r2, [r7, #6]
 8005f6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	88fa      	ldrh	r2, [r7, #6]
 8005f72:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2222      	movs	r2, #34	@ 0x22
 8005f82:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f8a:	4a29      	ldr	r2, [pc, #164]	@ (8006030 <HAL_SAI_Receive_DMA+0x110>)
 8005f8c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f92:	4a28      	ldr	r2, [pc, #160]	@ (8006034 <HAL_SAI_Receive_DMA+0x114>)
 8005f94:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f9a:	4a27      	ldr	r2, [pc, #156]	@ (8006038 <HAL_SAI_Receive_DMA+0x118>)
 8005f9c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	331c      	adds	r3, #28
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005fbe:	f7fc f987 	bl	80022d0 <HAL_DMA_Start_IT>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d005      	beq.n	8005fd4 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e029      	b.n	8006028 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f000 fb3a 	bl	8006650 <SAI_InterruptFlag>
 8005fdc:	4601      	mov	r1, r0
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	691a      	ldr	r2, [r3, #16]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005ffa:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d107      	bne.n	800601a <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006018:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006022:	2300      	movs	r3, #0
 8006024:	e000      	b.n	8006028 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8006026:	2302      	movs	r3, #2
  }
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	0800680d 	.word	0x0800680d
 8006034:	080067af 	.word	0x080067af
 8006038:	08006829 	.word	0x08006829

0800603c <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 8192 	beq.w	8006376 <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f003 0308 	and.w	r3, r3, #8
 8006070:	2b00      	cmp	r3, #0
 8006072:	d009      	beq.n	8006088 <HAL_SAI_IRQHandler+0x4c>
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	f003 0308 	and.w	r3, r3, #8
 800607a:	2b00      	cmp	r3, #0
 800607c:	d004      	beq.n	8006088 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	4798      	blx	r3
 8006086:	e176      	b.n	8006376 <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d01e      	beq.n	80060d0 <HAL_SAI_IRQHandler+0x94>
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	2b00      	cmp	r3, #0
 800609a:	d019      	beq.n	80060d0 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2201      	movs	r2, #1
 80060a2:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b22      	cmp	r3, #34	@ 0x22
 80060ae:	d101      	bne.n	80060b4 <HAL_SAI_IRQHandler+0x78>
 80060b0:	2301      	movs	r3, #1
 80060b2:	e000      	b.n	80060b6 <HAL_SAI_IRQHandler+0x7a>
 80060b4:	2302      	movs	r3, #2
 80060b6:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	431a      	orrs	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f983 	bl	80063d4 <HAL_SAI_ErrorCallback>
 80060ce:	e152      	b.n	8006376 <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d011      	beq.n	80060fe <HAL_SAI_IRQHandler+0xc2>
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	f003 0302 	and.w	r3, r3, #2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00c      	beq.n	80060fe <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2202      	movs	r2, #2
 80060ea:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 8140 	beq.w	8006376 <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060fa:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 80060fc:	e13b      	b.n	8006376 <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f003 0320 	and.w	r3, r3, #32
 8006104:	2b00      	cmp	r3, #0
 8006106:	d055      	beq.n	80061b4 <HAL_SAI_IRQHandler+0x178>
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	f003 0320 	and.w	r3, r3, #32
 800610e:	2b00      	cmp	r3, #0
 8006110:	d050      	beq.n	80061b4 <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2220      	movs	r2, #32
 8006118:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006120:	f043 0204 	orr.w	r2, r3, #4
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d038      	beq.n	80061a6 <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006138:	2b00      	cmp	r3, #0
 800613a:	d016      	beq.n	800616a <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006140:	4a8f      	ldr	r2, [pc, #572]	@ (8006380 <HAL_SAI_IRQHandler+0x344>)
 8006142:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006148:	4618      	mov	r0, r3
 800614a:	f7fc f95f 	bl	800240c <HAL_DMA_Abort_IT>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00a      	beq.n	800616a <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800615a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f935 	bl	80063d4 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 80fc 	beq.w	800636c <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006178:	4a81      	ldr	r2, [pc, #516]	@ (8006380 <HAL_SAI_IRQHandler+0x344>)
 800617a:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006180:	4618      	mov	r0, r3
 8006182:	f7fc f943 	bl	800240c <HAL_DMA_Abort_IT>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 80ef 	beq.w	800636c <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006194:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f918 	bl	80063d4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80061a4:	e0e2      	b.n	800636c <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f7ff fda4 	bl	8005cf4 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f911 	bl	80063d4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80061b2:	e0db      	b.n	800636c <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d055      	beq.n	800626a <HAL_SAI_IRQHandler+0x22e>
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d050      	beq.n	800626a <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2240      	movs	r2, #64	@ 0x40
 80061ce:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061d6:	f043 0208 	orr.w	r2, r3, #8
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d038      	beq.n	800625c <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d016      	beq.n	8006220 <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061f6:	4a62      	ldr	r2, [pc, #392]	@ (8006380 <HAL_SAI_IRQHandler+0x344>)
 80061f8:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fc f904 	bl	800240c <HAL_DMA_Abort_IT>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006210:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f8da 	bl	80063d4 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 80a3 	beq.w	8006370 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800622e:	4a54      	ldr	r2, [pc, #336]	@ (8006380 <HAL_SAI_IRQHandler+0x344>)
 8006230:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006236:	4618      	mov	r0, r3
 8006238:	f7fc f8e8 	bl	800240c <HAL_DMA_Abort_IT>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 8096 	beq.w	8006370 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800624a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 f8bd 	bl	80063d4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800625a:	e089      	b.n	8006370 <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f7ff fd49 	bl	8005cf4 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f8b6 	bl	80063d4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006268:	e082      	b.n	8006370 <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f003 0304 	and.w	r3, r3, #4
 8006270:	2b00      	cmp	r3, #0
 8006272:	d061      	beq.n	8006338 <HAL_SAI_IRQHandler+0x2fc>
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	f003 0304 	and.w	r3, r3, #4
 800627a:	2b00      	cmp	r3, #0
 800627c:	d05c      	beq.n	8006338 <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2204      	movs	r2, #4
 8006284:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800628c:	f043 0220 	orr.w	r2, r3, #32
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d036      	beq.n	800630e <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d016      	beq.n	80062d6 <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062ac:	4a34      	ldr	r2, [pc, #208]	@ (8006380 <HAL_SAI_IRQHandler+0x344>)
 80062ae:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7fc f8a9 	bl	800240c <HAL_DMA_Abort_IT>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00a      	beq.n	80062d6 <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062c6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f87f 	bl	80063d4 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d04a      	beq.n	8006374 <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062e2:	4a27      	ldr	r2, [pc, #156]	@ (8006380 <HAL_SAI_IRQHandler+0x344>)
 80062e4:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7fc f88e 	bl	800240c <HAL_DMA_Abort_IT>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d03e      	beq.n	8006374 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062fc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f864 	bl	80063d4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800630c:	e032      	b.n	8006374 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2200      	movs	r2, #0
 8006314:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800631e:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 f84f 	bl	80063d4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006336:	e01d      	b.n	8006374 <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	f003 0310 	and.w	r3, r3, #16
 800633e:	2b00      	cmp	r3, #0
 8006340:	d019      	beq.n	8006376 <HAL_SAI_IRQHandler+0x33a>
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	f003 0310 	and.w	r3, r3, #16
 8006348:	2b00      	cmp	r3, #0
 800634a:	d014      	beq.n	8006376 <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2210      	movs	r2, #16
 8006352:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800635a:	f043 0210 	orr.w	r2, r3, #16
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f835 	bl	80063d4 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 800636a:	e004      	b.n	8006376 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800636c:	bf00      	nop
 800636e:	e002      	b.n	8006376 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006370:	bf00      	nop
 8006372:	e000      	b.n	8006376 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006374:	bf00      	nop
}
 8006376:	bf00      	nop
 8006378:	3718      	adds	r7, #24
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	0800687b 	.word	0x0800687b

08006384 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b087      	sub	sp, #28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
 80063f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <SAI_InitI2S+0x2e>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	2b02      	cmp	r3, #2
 8006414:	d103      	bne.n	800641e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800641c:	e002      	b.n	8006424 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2201      	movs	r2, #1
 8006422:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800642a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006432:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	d001      	beq.n	800644e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e077      	b.n	800653e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d107      	bne.n	8006464 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8006460:	651a      	str	r2, [r3, #80]	@ 0x50
 8006462:	e006      	b.n	8006472 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800646a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b03      	cmp	r3, #3
 8006476:	d84f      	bhi.n	8006518 <SAI_InitI2S+0x130>
 8006478:	a201      	add	r2, pc, #4	@ (adr r2, 8006480 <SAI_InitI2S+0x98>)
 800647a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800647e:	bf00      	nop
 8006480:	08006491 	.word	0x08006491
 8006484:	080064b3 	.word	0x080064b3
 8006488:	080064d5 	.word	0x080064d5
 800648c:	080064f7 	.word	0x080064f7
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2280      	movs	r2, #128	@ 0x80
 8006494:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	085b      	lsrs	r3, r3, #1
 800649a:	015a      	lsls	r2, r3, #5
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	085b      	lsrs	r3, r3, #1
 80064a4:	011a      	lsls	r2, r3, #4
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2240      	movs	r2, #64	@ 0x40
 80064ae:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80064b0:	e035      	b.n	800651e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2280      	movs	r2, #128	@ 0x80
 80064b6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	085b      	lsrs	r3, r3, #1
 80064bc:	019a      	lsls	r2, r3, #6
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	085b      	lsrs	r3, r3, #1
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2280      	movs	r2, #128	@ 0x80
 80064d0:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80064d2:	e024      	b.n	800651e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	22c0      	movs	r2, #192	@ 0xc0
 80064d8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	085b      	lsrs	r3, r3, #1
 80064de:	019a      	lsls	r2, r3, #6
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	085b      	lsrs	r3, r3, #1
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2280      	movs	r2, #128	@ 0x80
 80064f2:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80064f4:	e013      	b.n	800651e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	22e0      	movs	r2, #224	@ 0xe0
 80064fa:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	085b      	lsrs	r3, r3, #1
 8006500:	019a      	lsls	r2, r3, #6
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	085b      	lsrs	r3, r3, #1
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2280      	movs	r2, #128	@ 0x80
 8006514:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8006516:	e002      	b.n	800651e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	75fb      	strb	r3, [r7, #23]
      break;
 800651c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2b02      	cmp	r3, #2
 8006522:	d10b      	bne.n	800653c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d102      	bne.n	8006530 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2210      	movs	r2, #16
 800652e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b02      	cmp	r3, #2
 8006534:	d102      	bne.n	800653c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2208      	movs	r2, #8
 800653a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 800653c:	7dfb      	ldrb	r3, [r7, #23]
}
 800653e:	4618      	mov	r0, r3
 8006540:	371c      	adds	r7, #28
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop

0800654c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800654c:	b480      	push	{r7}
 800654e:	b087      	sub	sp, #28
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
 8006558:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800655a:	2300      	movs	r3, #0
 800655c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <SAI_InitPCM+0x2e>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	2b02      	cmp	r3, #2
 8006578:	d103      	bne.n	8006582 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2201      	movs	r2, #1
 800657e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006580:	e002      	b.n	8006588 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006594:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800659c:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80065b0:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	2b04      	cmp	r3, #4
 80065b6:	d103      	bne.n	80065c0 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2201      	movs	r2, #1
 80065bc:	645a      	str	r2, [r3, #68]	@ 0x44
 80065be:	e002      	b.n	80065c6 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	220d      	movs	r2, #13
 80065c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b03      	cmp	r3, #3
 80065ca:	d837      	bhi.n	800663c <SAI_InitPCM+0xf0>
 80065cc:	a201      	add	r2, pc, #4	@ (adr r2, 80065d4 <SAI_InitPCM+0x88>)
 80065ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d2:	bf00      	nop
 80065d4:	080065e5 	.word	0x080065e5
 80065d8:	080065fb 	.word	0x080065fb
 80065dc:	08006611 	.word	0x08006611
 80065e0:	08006627 	.word	0x08006627
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2280      	movs	r2, #128	@ 0x80
 80065e8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	011a      	lsls	r2, r3, #4
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2240      	movs	r2, #64	@ 0x40
 80065f6:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80065f8:	e023      	b.n	8006642 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2280      	movs	r2, #128	@ 0x80
 80065fe:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2280      	movs	r2, #128	@ 0x80
 800660c:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800660e:	e018      	b.n	8006642 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	22c0      	movs	r2, #192	@ 0xc0
 8006614:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	015a      	lsls	r2, r3, #5
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2280      	movs	r2, #128	@ 0x80
 8006622:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8006624:	e00d      	b.n	8006642 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	22e0      	movs	r2, #224	@ 0xe0
 800662a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2280      	movs	r2, #128	@ 0x80
 8006638:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800663a:	e002      	b.n	8006642 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	75fb      	strb	r3, [r7, #23]
      break;
 8006640:	bf00      	nop
  }

  return status;
 8006642:	7dfb      	ldrb	r3, [r7, #23]
}
 8006644:	4618      	mov	r0, r3
 8006646:	371c      	adds	r7, #28
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	460b      	mov	r3, r1
 800665a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800665c:	2301      	movs	r3, #1
 800665e:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8006660:	78fb      	ldrb	r3, [r7, #3]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d103      	bne.n	800666e <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f043 0308 	orr.w	r3, r3, #8
 800666c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006672:	2b08      	cmp	r3, #8
 8006674:	d10b      	bne.n	800668e <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800667a:	2b03      	cmp	r3, #3
 800667c:	d003      	beq.n	8006686 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d103      	bne.n	800668e <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f043 0310 	orr.w	r3, r3, #16
 800668c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	2b03      	cmp	r3, #3
 8006694:	d003      	beq.n	800669e <SAI_InterruptFlag+0x4e>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	2b02      	cmp	r3, #2
 800669c:	d104      	bne.n	80066a8 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80066a4:	60fb      	str	r3, [r7, #12]
 80066a6:	e003      	b.n	80066b0 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f043 0304 	orr.w	r3, r3, #4
 80066ae:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80066b0:	68fb      	ldr	r3, [r7, #12]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
	...

080066c0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80066c8:	4b18      	ldr	r3, [pc, #96]	@ (800672c <SAI_Disable+0x6c>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a18      	ldr	r2, [pc, #96]	@ (8006730 <SAI_Disable+0x70>)
 80066ce:	fba2 2303 	umull	r2, r3, r2, r3
 80066d2:	0b1b      	lsrs	r3, r3, #12
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80066d8:	2300      	movs	r3, #0
 80066da:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80066ea:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10a      	bne.n	8006708 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066f8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	72fb      	strb	r3, [r7, #11]
      break;
 8006706:	e009      	b.n	800671c <SAI_Disable+0x5c>
    }
    count--;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	3b01      	subs	r3, #1
 800670c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1e7      	bne.n	80066ec <SAI_Disable+0x2c>

  return status;
 800671c:	7afb      	ldrb	r3, [r7, #11]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3714      	adds	r7, #20
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	20000000 	.word	0x20000000
 8006730:	95cbec1b 	.word	0x95cbec1b

08006734 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006740:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	69db      	ldr	r3, [r3, #28]
 8006746:	2b20      	cmp	r3, #32
 8006748:	d01c      	beq.n	8006784 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006760:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006762:	2100      	movs	r1, #0
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f7ff ff73 	bl	8006650 <SAI_InterruptFlag>
 800676a:	4603      	mov	r3, r0
 800676c:	43d9      	mvns	r1, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	691a      	ldr	r2, [r3, #16]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	400a      	ands	r2, r1
 800677a:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f7ff fdfd 	bl	8006384 <HAL_SAI_TxCpltCallback>
#endif
}
 800678a:	bf00      	nop
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b084      	sub	sp, #16
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800679e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f7ff fdf9 	bl	8006398 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 80067a6:	bf00      	nop
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b084      	sub	sp, #16
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ba:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	69db      	ldr	r3, [r3, #28]
 80067c0:	2b20      	cmp	r3, #32
 80067c2:	d01c      	beq.n	80067fe <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80067d2:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80067dc:	2100      	movs	r1, #0
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f7ff ff36 	bl	8006650 <SAI_InterruptFlag>
 80067e4:	4603      	mov	r3, r0
 80067e6:	43d9      	mvns	r1, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	691a      	ldr	r2, [r3, #16]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	400a      	ands	r2, r1
 80067f4:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f7ff fdd4 	bl	80063ac <HAL_SAI_RxCpltCallback>
#endif
}
 8006804:	bf00      	nop
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006818:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f7ff fdd0 	bl	80063c0 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8006820:	bf00      	nop
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006834:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800683c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006854:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f7ff ff32 	bl	80066c0 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f7ff fdb1 	bl	80063d4 <HAL_SAI_ErrorCallback>
#endif
}
 8006872:	bf00      	nop
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b084      	sub	sp, #16
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006886:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006896:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2200      	movs	r2, #0
 800689e:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80068a8:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068b0:	2b20      	cmp	r3, #32
 80068b2:	d00a      	beq.n	80068ca <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f7ff ff03 	bl	80066c0 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f042 0208 	orr.w	r2, r2, #8
 80068c8:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f7ff fd7a 	bl	80063d4 <HAL_SAI_ErrorCallback>
#endif
}
 80068e0:	bf00      	nop
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d101      	bne.n	80068fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e095      	b.n	8006a26 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d108      	bne.n	8006914 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800690a:	d009      	beq.n	8006920 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	61da      	str	r2, [r3, #28]
 8006912:	e005      	b.n	8006920 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d106      	bne.n	8006940 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7fa fb54 	bl	8000fe8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006956:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006960:	d902      	bls.n	8006968 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006962:	2300      	movs	r3, #0
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	e002      	b.n	800696e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006968:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800696c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006976:	d007      	beq.n	8006988 <HAL_SPI_Init+0xa0>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006980:	d002      	beq.n	8006988 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006998:	431a      	orrs	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	431a      	orrs	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	f003 0301 	and.w	r3, r3, #1
 80069ac:	431a      	orrs	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069b6:	431a      	orrs	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	69db      	ldr	r3, [r3, #28]
 80069bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069c0:	431a      	orrs	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069ca:	ea42 0103 	orr.w	r1, r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	0c1b      	lsrs	r3, r3, #16
 80069e4:	f003 0204 	and.w	r2, r3, #4
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ec:	f003 0310 	and.w	r3, r3, #16
 80069f0:	431a      	orrs	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069f6:	f003 0308 	and.w	r3, r3, #8
 80069fa:	431a      	orrs	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006a04:	ea42 0103 	orr.w	r1, r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b088      	sub	sp, #32
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	60f8      	str	r0, [r7, #12]
 8006a36:	60b9      	str	r1, [r7, #8]
 8006a38:	603b      	str	r3, [r7, #0]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a3e:	f7fb faa1 	bl	8001f84 <HAL_GetTick>
 8006a42:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006a44:	88fb      	ldrh	r3, [r7, #6]
 8006a46:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d001      	beq.n	8006a58 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006a54:	2302      	movs	r3, #2
 8006a56:	e15c      	b.n	8006d12 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d002      	beq.n	8006a64 <HAL_SPI_Transmit+0x36>
 8006a5e:	88fb      	ldrh	r3, [r7, #6]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e154      	b.n	8006d12 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d101      	bne.n	8006a76 <HAL_SPI_Transmit+0x48>
 8006a72:	2302      	movs	r3, #2
 8006a74:	e14d      	b.n	8006d12 <HAL_SPI_Transmit+0x2e4>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2203      	movs	r2, #3
 8006a82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	88fa      	ldrh	r2, [r7, #6]
 8006a96:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	88fa      	ldrh	r2, [r7, #6]
 8006a9c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ac8:	d10f      	bne.n	8006aea <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ad8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ae8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006af4:	2b40      	cmp	r3, #64	@ 0x40
 8006af6:	d007      	beq.n	8006b08 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b10:	d952      	bls.n	8006bb8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d002      	beq.n	8006b20 <HAL_SPI_Transmit+0xf2>
 8006b1a:	8b7b      	ldrh	r3, [r7, #26]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d145      	bne.n	8006bac <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b24:	881a      	ldrh	r2, [r3, #0]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b30:	1c9a      	adds	r2, r3, #2
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006b44:	e032      	b.n	8006bac <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	f003 0302 	and.w	r3, r3, #2
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d112      	bne.n	8006b7a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b58:	881a      	ldrh	r2, [r3, #0]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b64:	1c9a      	adds	r2, r3, #2
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	3b01      	subs	r3, #1
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006b78:	e018      	b.n	8006bac <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b7a:	f7fb fa03 	bl	8001f84 <HAL_GetTick>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d803      	bhi.n	8006b92 <HAL_SPI_Transmit+0x164>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b90:	d102      	bne.n	8006b98 <HAL_SPI_Transmit+0x16a>
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d109      	bne.n	8006bac <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e0b2      	b.n	8006d12 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1c7      	bne.n	8006b46 <HAL_SPI_Transmit+0x118>
 8006bb6:	e083      	b.n	8006cc0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d002      	beq.n	8006bc6 <HAL_SPI_Transmit+0x198>
 8006bc0:	8b7b      	ldrh	r3, [r7, #26]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d177      	bne.n	8006cb6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d912      	bls.n	8006bf6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd4:	881a      	ldrh	r2, [r3, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be0:	1c9a      	adds	r2, r3, #2
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	3b02      	subs	r3, #2
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006bf4:	e05f      	b.n	8006cb6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	330c      	adds	r3, #12
 8006c00:	7812      	ldrb	r2, [r2, #0]
 8006c02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c08:	1c5a      	adds	r2, r3, #1
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	3b01      	subs	r3, #1
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006c1c:	e04b      	b.n	8006cb6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d12b      	bne.n	8006c84 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d912      	bls.n	8006c5c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c3a:	881a      	ldrh	r2, [r3, #0]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c46:	1c9a      	adds	r2, r3, #2
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	3b02      	subs	r3, #2
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006c5a:	e02c      	b.n	8006cb6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	330c      	adds	r3, #12
 8006c66:	7812      	ldrb	r2, [r2, #0]
 8006c68:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006c82:	e018      	b.n	8006cb6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c84:	f7fb f97e 	bl	8001f84 <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	683a      	ldr	r2, [r7, #0]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d803      	bhi.n	8006c9c <HAL_SPI_Transmit+0x26e>
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c9a:	d102      	bne.n	8006ca2 <HAL_SPI_Transmit+0x274>
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d109      	bne.n	8006cb6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	e02d      	b.n	8006d12 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1ae      	bne.n	8006c1e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cc0:	69fa      	ldr	r2, [r7, #28]
 8006cc2:	6839      	ldr	r1, [r7, #0]
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	f000 fa5b 	bl	8007180 <SPI_EndRxTxTransaction>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d002      	beq.n	8006cd6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2220      	movs	r2, #32
 8006cd4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10a      	bne.n	8006cf4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cde:	2300      	movs	r3, #0
 8006ce0:	617b      	str	r3, [r7, #20]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	617b      	str	r3, [r7, #20]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	617b      	str	r3, [r7, #20]
 8006cf2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d001      	beq.n	8006d10 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e000      	b.n	8006d12 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8006d10:	2300      	movs	r3, #0
  }
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3720      	adds	r7, #32
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
	...

08006d1c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b088      	sub	sp, #32
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10e      	bne.n	8006d5c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d009      	beq.n	8006d5c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d004      	beq.n	8006d5c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	4798      	blx	r3
    return;
 8006d5a:	e0ce      	b.n	8006efa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d009      	beq.n	8006d7a <HAL_SPI_IRQHandler+0x5e>
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d004      	beq.n	8006d7a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	4798      	blx	r3
    return;
 8006d78:	e0bf      	b.n	8006efa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	f003 0320 	and.w	r3, r3, #32
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10a      	bne.n	8006d9a <HAL_SPI_IRQHandler+0x7e>
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d105      	bne.n	8006d9a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f000 80b0 	beq.w	8006efa <HAL_SPI_IRQHandler+0x1de>
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	f003 0320 	and.w	r3, r3, #32
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 80aa 	beq.w	8006efa <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d023      	beq.n	8006df8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	2b03      	cmp	r3, #3
 8006dba:	d011      	beq.n	8006de0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dc0:	f043 0204 	orr.w	r2, r3, #4
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dc8:	2300      	movs	r3, #0
 8006dca:	617b      	str	r3, [r7, #20]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	617b      	str	r3, [r7, #20]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	617b      	str	r3, [r7, #20]
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	e00b      	b.n	8006df8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006de0:	2300      	movs	r3, #0
 8006de2:	613b      	str	r3, [r7, #16]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	613b      	str	r3, [r7, #16]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	613b      	str	r3, [r7, #16]
 8006df4:	693b      	ldr	r3, [r7, #16]
        return;
 8006df6:	e080      	b.n	8006efa <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	f003 0320 	and.w	r3, r3, #32
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d014      	beq.n	8006e2c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e06:	f043 0201 	orr.w	r2, r3, #1
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006e0e:	2300      	movs	r3, #0
 8006e10:	60fb      	str	r3, [r7, #12]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	60fb      	str	r3, [r7, #12]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00c      	beq.n	8006e50 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e3a:	f043 0208 	orr.w	r2, r3, #8
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006e42:	2300      	movs	r3, #0
 8006e44:	60bb      	str	r3, [r7, #8]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	60bb      	str	r3, [r7, #8]
 8006e4e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d04f      	beq.n	8006ef8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006e66:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	f003 0302 	and.w	r3, r3, #2
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d104      	bne.n	8006e84 <HAL_SPI_IRQHandler+0x168>
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	f003 0301 	and.w	r3, r3, #1
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d034      	beq.n	8006eee <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	685a      	ldr	r2, [r3, #4]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f022 0203 	bic.w	r2, r2, #3
 8006e92:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d011      	beq.n	8006ec0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ea0:	4a17      	ldr	r2, [pc, #92]	@ (8006f00 <HAL_SPI_IRQHandler+0x1e4>)
 8006ea2:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7fb faaf 	bl	800240c <HAL_DMA_Abort_IT>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d005      	beq.n	8006ec0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eb8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d016      	beq.n	8006ef6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ecc:	4a0c      	ldr	r2, [pc, #48]	@ (8006f00 <HAL_SPI_IRQHandler+0x1e4>)
 8006ece:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7fb fa99 	bl	800240c <HAL_DMA_Abort_IT>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00a      	beq.n	8006ef6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ee4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8006eec:	e003      	b.n	8006ef6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f808 	bl	8006f04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006ef4:	e000      	b.n	8006ef8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006ef6:	bf00      	nop
    return;
 8006ef8:	bf00      	nop
  }
}
 8006efa:	3720      	adds	r7, #32
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	08006f19 	.word	0x08006f19

08006f04 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f24:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2200      	movs	r2, #0
 8006f32:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f7ff ffe5 	bl	8006f04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f3a:	bf00      	nop
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
	...

08006f44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b088      	sub	sp, #32
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	603b      	str	r3, [r7, #0]
 8006f50:	4613      	mov	r3, r2
 8006f52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f54:	f7fb f816 	bl	8001f84 <HAL_GetTick>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f5c:	1a9b      	subs	r3, r3, r2
 8006f5e:	683a      	ldr	r2, [r7, #0]
 8006f60:	4413      	add	r3, r2
 8006f62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f64:	f7fb f80e 	bl	8001f84 <HAL_GetTick>
 8006f68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f6a:	4b39      	ldr	r3, [pc, #228]	@ (8007050 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	015b      	lsls	r3, r3, #5
 8006f70:	0d1b      	lsrs	r3, r3, #20
 8006f72:	69fa      	ldr	r2, [r7, #28]
 8006f74:	fb02 f303 	mul.w	r3, r2, r3
 8006f78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f7a:	e054      	b.n	8007026 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f82:	d050      	beq.n	8007026 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f84:	f7fa fffe 	bl	8001f84 <HAL_GetTick>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	69fa      	ldr	r2, [r7, #28]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d902      	bls.n	8006f9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d13d      	bne.n	8007016 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	685a      	ldr	r2, [r3, #4]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006fa8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fb2:	d111      	bne.n	8006fd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fbc:	d004      	beq.n	8006fc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fc6:	d107      	bne.n	8006fd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fe0:	d10f      	bne.n	8007002 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ff0:	601a      	str	r2, [r3, #0]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007000:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2201      	movs	r2, #1
 8007006:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e017      	b.n	8007046 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d101      	bne.n	8007020 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800701c:	2300      	movs	r3, #0
 800701e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	3b01      	subs	r3, #1
 8007024:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	689a      	ldr	r2, [r3, #8]
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	4013      	ands	r3, r2
 8007030:	68ba      	ldr	r2, [r7, #8]
 8007032:	429a      	cmp	r2, r3
 8007034:	bf0c      	ite	eq
 8007036:	2301      	moveq	r3, #1
 8007038:	2300      	movne	r3, #0
 800703a:	b2db      	uxtb	r3, r3
 800703c:	461a      	mov	r2, r3
 800703e:	79fb      	ldrb	r3, [r7, #7]
 8007040:	429a      	cmp	r2, r3
 8007042:	d19b      	bne.n	8006f7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3720      	adds	r7, #32
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	20000000 	.word	0x20000000

08007054 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b08a      	sub	sp, #40	@ 0x28
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
 8007060:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007062:	2300      	movs	r3, #0
 8007064:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007066:	f7fa ff8d 	bl	8001f84 <HAL_GetTick>
 800706a:	4602      	mov	r2, r0
 800706c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706e:	1a9b      	subs	r3, r3, r2
 8007070:	683a      	ldr	r2, [r7, #0]
 8007072:	4413      	add	r3, r2
 8007074:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007076:	f7fa ff85 	bl	8001f84 <HAL_GetTick>
 800707a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	330c      	adds	r3, #12
 8007082:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007084:	4b3d      	ldr	r3, [pc, #244]	@ (800717c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	4613      	mov	r3, r2
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4413      	add	r3, r2
 800708e:	00da      	lsls	r2, r3, #3
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	0d1b      	lsrs	r3, r3, #20
 8007094:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007096:	fb02 f303 	mul.w	r3, r2, r3
 800709a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800709c:	e060      	b.n	8007160 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80070a4:	d107      	bne.n	80070b6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d104      	bne.n	80070b6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80070b4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070bc:	d050      	beq.n	8007160 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80070be:	f7fa ff61 	bl	8001f84 <HAL_GetTick>
 80070c2:	4602      	mov	r2, r0
 80070c4:	6a3b      	ldr	r3, [r7, #32]
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d902      	bls.n	80070d4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80070ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d13d      	bne.n	8007150 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80070e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070ec:	d111      	bne.n	8007112 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070f6:	d004      	beq.n	8007102 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007100:	d107      	bne.n	8007112 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007110:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007116:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800711a:	d10f      	bne.n	800713c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800712a:	601a      	str	r2, [r3, #0]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800713a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e010      	b.n	8007172 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d101      	bne.n	800715a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007156:	2300      	movs	r3, #0
 8007158:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	3b01      	subs	r3, #1
 800715e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	689a      	ldr	r2, [r3, #8]
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	4013      	ands	r3, r2
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	429a      	cmp	r2, r3
 800716e:	d196      	bne.n	800709e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3728      	adds	r7, #40	@ 0x28
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	20000000 	.word	0x20000000

08007180 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af02      	add	r7, sp, #8
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	2200      	movs	r2, #0
 8007194:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f7ff ff5b 	bl	8007054 <SPI_WaitFifoStateUntilTimeout>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d007      	beq.n	80071b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071a8:	f043 0220 	orr.w	r2, r3, #32
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e027      	b.n	8007204 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	2200      	movs	r2, #0
 80071bc:	2180      	movs	r1, #128	@ 0x80
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f7ff fec0 	bl	8006f44 <SPI_WaitFlagStateUntilTimeout>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d007      	beq.n	80071da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071ce:	f043 0220 	orr.w	r2, r3, #32
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e014      	b.n	8007204 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f7ff ff34 	bl	8007054 <SPI_WaitFifoStateUntilTimeout>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d007      	beq.n	8007202 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071f6:	f043 0220 	orr.w	r2, r3, #32
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e000      	b.n	8007204 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e049      	b.n	80072b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d106      	bne.n	8007238 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 f841 	bl	80072ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2202      	movs	r2, #2
 800723c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	3304      	adds	r3, #4
 8007248:	4619      	mov	r1, r3
 800724a:	4610      	mov	r0, r2
 800724c:	f000 f9e0 	bl	8007610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3708      	adds	r7, #8
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b083      	sub	sp, #12
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80072c2:	bf00      	nop
 80072c4:	370c      	adds	r7, #12
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
	...

080072d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d001      	beq.n	80072e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e04f      	b.n	8007388 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2202      	movs	r2, #2
 80072ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68da      	ldr	r2, [r3, #12]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f042 0201 	orr.w	r2, r2, #1
 80072fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a23      	ldr	r2, [pc, #140]	@ (8007394 <HAL_TIM_Base_Start_IT+0xc4>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d01d      	beq.n	8007346 <HAL_TIM_Base_Start_IT+0x76>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007312:	d018      	beq.n	8007346 <HAL_TIM_Base_Start_IT+0x76>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a1f      	ldr	r2, [pc, #124]	@ (8007398 <HAL_TIM_Base_Start_IT+0xc8>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d013      	beq.n	8007346 <HAL_TIM_Base_Start_IT+0x76>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a1e      	ldr	r2, [pc, #120]	@ (800739c <HAL_TIM_Base_Start_IT+0xcc>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d00e      	beq.n	8007346 <HAL_TIM_Base_Start_IT+0x76>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a1c      	ldr	r2, [pc, #112]	@ (80073a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d009      	beq.n	8007346 <HAL_TIM_Base_Start_IT+0x76>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a1b      	ldr	r2, [pc, #108]	@ (80073a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d004      	beq.n	8007346 <HAL_TIM_Base_Start_IT+0x76>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a19      	ldr	r2, [pc, #100]	@ (80073a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d115      	bne.n	8007372 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	689a      	ldr	r2, [r3, #8]
 800734c:	4b17      	ldr	r3, [pc, #92]	@ (80073ac <HAL_TIM_Base_Start_IT+0xdc>)
 800734e:	4013      	ands	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2b06      	cmp	r3, #6
 8007356:	d015      	beq.n	8007384 <HAL_TIM_Base_Start_IT+0xb4>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800735e:	d011      	beq.n	8007384 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f042 0201 	orr.w	r2, r2, #1
 800736e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007370:	e008      	b.n	8007384 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f042 0201 	orr.w	r2, r2, #1
 8007380:	601a      	str	r2, [r3, #0]
 8007382:	e000      	b.n	8007386 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007384:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3714      	adds	r7, #20
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	40012c00 	.word	0x40012c00
 8007398:	40000400 	.word	0x40000400
 800739c:	40000800 	.word	0x40000800
 80073a0:	40000c00 	.word	0x40000c00
 80073a4:	40013400 	.word	0x40013400
 80073a8:	40014000 	.word	0x40014000
 80073ac:	00010007 	.word	0x00010007

080073b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	f003 0302 	and.w	r3, r3, #2
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d020      	beq.n	8007414 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f003 0302 	and.w	r3, r3, #2
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d01b      	beq.n	8007414 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f06f 0202 	mvn.w	r2, #2
 80073e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	f003 0303 	and.w	r3, r3, #3
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d003      	beq.n	8007402 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f8e9 	bl	80075d2 <HAL_TIM_IC_CaptureCallback>
 8007400:	e005      	b.n	800740e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f8db 	bl	80075be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f8ec 	bl	80075e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	f003 0304 	and.w	r3, r3, #4
 800741a:	2b00      	cmp	r3, #0
 800741c:	d020      	beq.n	8007460 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f003 0304 	and.w	r3, r3, #4
 8007424:	2b00      	cmp	r3, #0
 8007426:	d01b      	beq.n	8007460 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f06f 0204 	mvn.w	r2, #4
 8007430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2202      	movs	r2, #2
 8007436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	699b      	ldr	r3, [r3, #24]
 800743e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f8c3 	bl	80075d2 <HAL_TIM_IC_CaptureCallback>
 800744c:	e005      	b.n	800745a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f8b5 	bl	80075be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 f8c6 	bl	80075e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	f003 0308 	and.w	r3, r3, #8
 8007466:	2b00      	cmp	r3, #0
 8007468:	d020      	beq.n	80074ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f003 0308 	and.w	r3, r3, #8
 8007470:	2b00      	cmp	r3, #0
 8007472:	d01b      	beq.n	80074ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f06f 0208 	mvn.w	r2, #8
 800747c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2204      	movs	r2, #4
 8007482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	69db      	ldr	r3, [r3, #28]
 800748a:	f003 0303 	and.w	r3, r3, #3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d003      	beq.n	800749a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f89d 	bl	80075d2 <HAL_TIM_IC_CaptureCallback>
 8007498:	e005      	b.n	80074a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f88f 	bl	80075be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 f8a0 	bl	80075e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	f003 0310 	and.w	r3, r3, #16
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d020      	beq.n	80074f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f003 0310 	and.w	r3, r3, #16
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d01b      	beq.n	80074f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f06f 0210 	mvn.w	r2, #16
 80074c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2208      	movs	r2, #8
 80074ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	69db      	ldr	r3, [r3, #28]
 80074d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d003      	beq.n	80074e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f877 	bl	80075d2 <HAL_TIM_IC_CaptureCallback>
 80074e4:	e005      	b.n	80074f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f869 	bl	80075be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f87a 	bl	80075e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00c      	beq.n	800751c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f003 0301 	and.w	r3, r3, #1
 8007508:	2b00      	cmp	r3, #0
 800750a:	d007      	beq.n	800751c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f06f 0201 	mvn.w	r2, #1
 8007514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f7f9 fbcc 	bl	8000cb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007522:	2b00      	cmp	r3, #0
 8007524:	d104      	bne.n	8007530 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00c      	beq.n	800754a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007536:	2b00      	cmp	r3, #0
 8007538:	d007      	beq.n	800754a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 f913 	bl	8007770 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00c      	beq.n	800756e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800755a:	2b00      	cmp	r3, #0
 800755c:	d007      	beq.n	800756e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f90b 	bl	8007784 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00c      	beq.n	8007592 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800757e:	2b00      	cmp	r3, #0
 8007580:	d007      	beq.n	8007592 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800758a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f834 	bl	80075fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	f003 0320 	and.w	r3, r3, #32
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00c      	beq.n	80075b6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f003 0320 	and.w	r3, r3, #32
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d007      	beq.n	80075b6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f06f 0220 	mvn.w	r2, #32
 80075ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f8d3 	bl	800775c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075b6:	bf00      	nop
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075be:	b480      	push	{r7}
 80075c0:	b083      	sub	sp, #12
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075c6:	bf00      	nop
 80075c8:	370c      	adds	r7, #12
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075d2:	b480      	push	{r7}
 80075d4:	b083      	sub	sp, #12
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075da:	bf00      	nop
 80075dc:	370c      	adds	r7, #12
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr

080075e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b083      	sub	sp, #12
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075ee:	bf00      	nop
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b083      	sub	sp, #12
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007602:	bf00      	nop
 8007604:	370c      	adds	r7, #12
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
	...

08007610 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a46      	ldr	r2, [pc, #280]	@ (800773c <TIM_Base_SetConfig+0x12c>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d013      	beq.n	8007650 <TIM_Base_SetConfig+0x40>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800762e:	d00f      	beq.n	8007650 <TIM_Base_SetConfig+0x40>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a43      	ldr	r2, [pc, #268]	@ (8007740 <TIM_Base_SetConfig+0x130>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d00b      	beq.n	8007650 <TIM_Base_SetConfig+0x40>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a42      	ldr	r2, [pc, #264]	@ (8007744 <TIM_Base_SetConfig+0x134>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d007      	beq.n	8007650 <TIM_Base_SetConfig+0x40>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a41      	ldr	r2, [pc, #260]	@ (8007748 <TIM_Base_SetConfig+0x138>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d003      	beq.n	8007650 <TIM_Base_SetConfig+0x40>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a40      	ldr	r2, [pc, #256]	@ (800774c <TIM_Base_SetConfig+0x13c>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d108      	bne.n	8007662 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	4313      	orrs	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a35      	ldr	r2, [pc, #212]	@ (800773c <TIM_Base_SetConfig+0x12c>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d01f      	beq.n	80076aa <TIM_Base_SetConfig+0x9a>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007670:	d01b      	beq.n	80076aa <TIM_Base_SetConfig+0x9a>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a32      	ldr	r2, [pc, #200]	@ (8007740 <TIM_Base_SetConfig+0x130>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d017      	beq.n	80076aa <TIM_Base_SetConfig+0x9a>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a31      	ldr	r2, [pc, #196]	@ (8007744 <TIM_Base_SetConfig+0x134>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d013      	beq.n	80076aa <TIM_Base_SetConfig+0x9a>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a30      	ldr	r2, [pc, #192]	@ (8007748 <TIM_Base_SetConfig+0x138>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d00f      	beq.n	80076aa <TIM_Base_SetConfig+0x9a>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a2f      	ldr	r2, [pc, #188]	@ (800774c <TIM_Base_SetConfig+0x13c>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d00b      	beq.n	80076aa <TIM_Base_SetConfig+0x9a>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a2e      	ldr	r2, [pc, #184]	@ (8007750 <TIM_Base_SetConfig+0x140>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d007      	beq.n	80076aa <TIM_Base_SetConfig+0x9a>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a2d      	ldr	r2, [pc, #180]	@ (8007754 <TIM_Base_SetConfig+0x144>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d003      	beq.n	80076aa <TIM_Base_SetConfig+0x9a>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a2c      	ldr	r2, [pc, #176]	@ (8007758 <TIM_Base_SetConfig+0x148>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d108      	bne.n	80076bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	689a      	ldr	r2, [r3, #8]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a16      	ldr	r2, [pc, #88]	@ (800773c <TIM_Base_SetConfig+0x12c>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d00f      	beq.n	8007708 <TIM_Base_SetConfig+0xf8>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a18      	ldr	r2, [pc, #96]	@ (800774c <TIM_Base_SetConfig+0x13c>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d00b      	beq.n	8007708 <TIM_Base_SetConfig+0xf8>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a17      	ldr	r2, [pc, #92]	@ (8007750 <TIM_Base_SetConfig+0x140>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d007      	beq.n	8007708 <TIM_Base_SetConfig+0xf8>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a16      	ldr	r2, [pc, #88]	@ (8007754 <TIM_Base_SetConfig+0x144>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d003      	beq.n	8007708 <TIM_Base_SetConfig+0xf8>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a15      	ldr	r2, [pc, #84]	@ (8007758 <TIM_Base_SetConfig+0x148>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d103      	bne.n	8007710 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	691a      	ldr	r2, [r3, #16]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	2b01      	cmp	r3, #1
 8007720:	d105      	bne.n	800772e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	f023 0201 	bic.w	r2, r3, #1
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	611a      	str	r2, [r3, #16]
  }
}
 800772e:	bf00      	nop
 8007730:	3714      	adds	r7, #20
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	40012c00 	.word	0x40012c00
 8007740:	40000400 	.word	0x40000400
 8007744:	40000800 	.word	0x40000800
 8007748:	40000c00 	.word	0x40000c00
 800774c:	40013400 	.word	0x40013400
 8007750:	40014000 	.word	0x40014000
 8007754:	40014400 	.word	0x40014400
 8007758:	40014800 	.word	0x40014800

0800775c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007778:	bf00      	nop
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d101      	bne.n	80077aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e040      	b.n	800782c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d106      	bne.n	80077c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7f9 fe62 	bl	8001484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2224      	movs	r2, #36	@ 0x24
 80077c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f022 0201 	bic.w	r2, r2, #1
 80077d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d002      	beq.n	80077e4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fedc 	bl	800859c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fc21 	bl	800802c <UART_SetConfig>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d101      	bne.n	80077f4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e01b      	b.n	800782c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	685a      	ldr	r2, [r3, #4]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007802:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689a      	ldr	r2, [r3, #8]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007812:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f042 0201 	orr.w	r2, r2, #1
 8007822:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 ff5b 	bl	80086e0 <UART_CheckIdleState>
 800782a:	4603      	mov	r3, r0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b08a      	sub	sp, #40	@ 0x28
 8007838:	af02      	add	r7, sp, #8
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	603b      	str	r3, [r7, #0]
 8007840:	4613      	mov	r3, r2
 8007842:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007848:	2b20      	cmp	r3, #32
 800784a:	d177      	bne.n	800793c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d002      	beq.n	8007858 <HAL_UART_Transmit+0x24>
 8007852:	88fb      	ldrh	r3, [r7, #6]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d101      	bne.n	800785c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e070      	b.n	800793e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2221      	movs	r2, #33	@ 0x21
 8007868:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800786a:	f7fa fb8b 	bl	8001f84 <HAL_GetTick>
 800786e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	88fa      	ldrh	r2, [r7, #6]
 8007874:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	88fa      	ldrh	r2, [r7, #6]
 800787c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007888:	d108      	bne.n	800789c <HAL_UART_Transmit+0x68>
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d104      	bne.n	800789c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007892:	2300      	movs	r3, #0
 8007894:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	61bb      	str	r3, [r7, #24]
 800789a:	e003      	b.n	80078a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078a0:	2300      	movs	r3, #0
 80078a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80078a4:	e02f      	b.n	8007906 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	2200      	movs	r2, #0
 80078ae:	2180      	movs	r1, #128	@ 0x80
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f000 ffbd 	bl	8008830 <UART_WaitOnFlagUntilTimeout>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d004      	beq.n	80078c6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2220      	movs	r2, #32
 80078c0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80078c2:	2303      	movs	r3, #3
 80078c4:	e03b      	b.n	800793e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10b      	bne.n	80078e4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	881a      	ldrh	r2, [r3, #0]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078d8:	b292      	uxth	r2, r2
 80078da:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	3302      	adds	r3, #2
 80078e0:	61bb      	str	r3, [r7, #24]
 80078e2:	e007      	b.n	80078f4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	781a      	ldrb	r2, [r3, #0]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	3301      	adds	r3, #1
 80078f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	3b01      	subs	r3, #1
 80078fe:	b29a      	uxth	r2, r3
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800790c:	b29b      	uxth	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1c9      	bne.n	80078a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	9300      	str	r3, [sp, #0]
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	2200      	movs	r2, #0
 800791a:	2140      	movs	r1, #64	@ 0x40
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f000 ff87 	bl	8008830 <UART_WaitOnFlagUntilTimeout>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d004      	beq.n	8007932 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2220      	movs	r2, #32
 800792c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e005      	b.n	800793e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2220      	movs	r2, #32
 8007936:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007938:	2300      	movs	r3, #0
 800793a:	e000      	b.n	800793e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800793c:	2302      	movs	r3, #2
  }
}
 800793e:	4618      	mov	r0, r3
 8007940:	3720      	adds	r7, #32
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
	...

08007948 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b08a      	sub	sp, #40	@ 0x28
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	4613      	mov	r3, r2
 8007954:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800795c:	2b20      	cmp	r3, #32
 800795e:	d137      	bne.n	80079d0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d002      	beq.n	800796c <HAL_UART_Receive_IT+0x24>
 8007966:	88fb      	ldrh	r3, [r7, #6]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d101      	bne.n	8007970 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e030      	b.n	80079d2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2200      	movs	r2, #0
 8007974:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a18      	ldr	r2, [pc, #96]	@ (80079dc <HAL_UART_Receive_IT+0x94>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d01f      	beq.n	80079c0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800798a:	2b00      	cmp	r3, #0
 800798c:	d018      	beq.n	80079c0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	e853 3f00 	ldrex	r3, [r3]
 800799a:	613b      	str	r3, [r7, #16]
   return(result);
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80079a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	461a      	mov	r2, r3
 80079aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ac:	623b      	str	r3, [r7, #32]
 80079ae:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b0:	69f9      	ldr	r1, [r7, #28]
 80079b2:	6a3a      	ldr	r2, [r7, #32]
 80079b4:	e841 2300 	strex	r3, r2, [r1]
 80079b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1e6      	bne.n	800798e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80079c0:	88fb      	ldrh	r3, [r7, #6]
 80079c2:	461a      	mov	r2, r3
 80079c4:	68b9      	ldr	r1, [r7, #8]
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f000 ffa0 	bl	800890c <UART_Start_Receive_IT>
 80079cc:	4603      	mov	r3, r0
 80079ce:	e000      	b.n	80079d2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80079d0:	2302      	movs	r3, #2
  }
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3728      	adds	r7, #40	@ 0x28
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	40008000 	.word	0x40008000

080079e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b0ba      	sub	sp, #232	@ 0xe8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	69db      	ldr	r3, [r3, #28]
 80079ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007a06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007a0a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007a0e:	4013      	ands	r3, r2
 8007a10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007a14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d115      	bne.n	8007a48 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a20:	f003 0320 	and.w	r3, r3, #32
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00f      	beq.n	8007a48 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a2c:	f003 0320 	and.w	r3, r3, #32
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d009      	beq.n	8007a48 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f000 82ca 	beq.w	8007fd2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	4798      	blx	r3
      }
      return;
 8007a46:	e2c4      	b.n	8007fd2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007a48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f000 8117 	beq.w	8007c80 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007a52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a56:	f003 0301 	and.w	r3, r3, #1
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d106      	bne.n	8007a6c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007a5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007a62:	4b85      	ldr	r3, [pc, #532]	@ (8007c78 <HAL_UART_IRQHandler+0x298>)
 8007a64:	4013      	ands	r3, r2
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f000 810a 	beq.w	8007c80 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a70:	f003 0301 	and.w	r3, r3, #1
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d011      	beq.n	8007a9c <HAL_UART_IRQHandler+0xbc>
 8007a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00b      	beq.n	8007a9c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a92:	f043 0201 	orr.w	r2, r3, #1
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aa0:	f003 0302 	and.w	r3, r3, #2
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d011      	beq.n	8007acc <HAL_UART_IRQHandler+0xec>
 8007aa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007aac:	f003 0301 	and.w	r3, r3, #1
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00b      	beq.n	8007acc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2202      	movs	r2, #2
 8007aba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ac2:	f043 0204 	orr.w	r2, r3, #4
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ad0:	f003 0304 	and.w	r3, r3, #4
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d011      	beq.n	8007afc <HAL_UART_IRQHandler+0x11c>
 8007ad8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007adc:	f003 0301 	and.w	r3, r3, #1
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00b      	beq.n	8007afc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2204      	movs	r2, #4
 8007aea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007af2:	f043 0202 	orr.w	r2, r3, #2
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b00:	f003 0308 	and.w	r3, r3, #8
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d017      	beq.n	8007b38 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b0c:	f003 0320 	and.w	r3, r3, #32
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d105      	bne.n	8007b20 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007b14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b18:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00b      	beq.n	8007b38 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2208      	movs	r2, #8
 8007b26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b2e:	f043 0208 	orr.w	r2, r3, #8
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d012      	beq.n	8007b6a <HAL_UART_IRQHandler+0x18a>
 8007b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00c      	beq.n	8007b6a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b60:	f043 0220 	orr.w	r2, r3, #32
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f000 8230 	beq.w	8007fd6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b7a:	f003 0320 	and.w	r3, r3, #32
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00d      	beq.n	8007b9e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b86:	f003 0320 	and.w	r3, r3, #32
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d007      	beq.n	8007b9e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d003      	beq.n	8007b9e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ba4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bb2:	2b40      	cmp	r3, #64	@ 0x40
 8007bb4:	d005      	beq.n	8007bc2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007bb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007bba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d04f      	beq.n	8007c62 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 ff68 	bl	8008a98 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bd2:	2b40      	cmp	r3, #64	@ 0x40
 8007bd4:	d141      	bne.n	8007c5a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	3308      	adds	r3, #8
 8007bdc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007be4:	e853 3f00 	ldrex	r3, [r3]
 8007be8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007bec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007bf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	3308      	adds	r3, #8
 8007bfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007c02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007c06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007c0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007c12:	e841 2300 	strex	r3, r2, [r1]
 8007c16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007c1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1d9      	bne.n	8007bd6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d013      	beq.n	8007c52 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c2e:	4a13      	ldr	r2, [pc, #76]	@ (8007c7c <HAL_UART_IRQHandler+0x29c>)
 8007c30:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fa fbe8 	bl	800240c <HAL_DMA_Abort_IT>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d017      	beq.n	8007c72 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007c4c:	4610      	mov	r0, r2
 8007c4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c50:	e00f      	b.n	8007c72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f9d4 	bl	8008000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c58:	e00b      	b.n	8007c72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f9d0 	bl	8008000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c60:	e007      	b.n	8007c72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f9cc 	bl	8008000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007c70:	e1b1      	b.n	8007fd6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c72:	bf00      	nop
    return;
 8007c74:	e1af      	b.n	8007fd6 <HAL_UART_IRQHandler+0x5f6>
 8007c76:	bf00      	nop
 8007c78:	04000120 	.word	0x04000120
 8007c7c:	08008b61 	.word	0x08008b61

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	f040 816a 	bne.w	8007f5e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c8e:	f003 0310 	and.w	r3, r3, #16
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f000 8163 	beq.w	8007f5e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c9c:	f003 0310 	and.w	r3, r3, #16
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f000 815c 	beq.w	8007f5e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2210      	movs	r2, #16
 8007cac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cb8:	2b40      	cmp	r3, #64	@ 0x40
 8007cba:	f040 80d4 	bne.w	8007e66 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007cca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f000 80ad 	beq.w	8007e2e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007cda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	f080 80a5 	bcs.w	8007e2e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007cea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 0320 	and.w	r3, r3, #32
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f040 8086 	bne.w	8007e0c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007d0c:	e853 3f00 	ldrex	r3, [r3]
 8007d10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007d14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	461a      	mov	r2, r3
 8007d26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007d2e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d32:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007d36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007d3a:	e841 2300 	strex	r3, r2, [r1]
 8007d3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007d42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d1da      	bne.n	8007d00 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	3308      	adds	r3, #8
 8007d50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007d54:	e853 3f00 	ldrex	r3, [r3]
 8007d58:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007d5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d5c:	f023 0301 	bic.w	r3, r3, #1
 8007d60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	3308      	adds	r3, #8
 8007d6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007d6e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007d72:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d74:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007d76:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007d7a:	e841 2300 	strex	r3, r2, [r1]
 8007d7e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007d80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1e1      	bne.n	8007d4a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	3308      	adds	r3, #8
 8007d8c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d90:	e853 3f00 	ldrex	r3, [r3]
 8007d94:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007d96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	3308      	adds	r3, #8
 8007da6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007daa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007dac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007db0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007db2:	e841 2300 	strex	r3, r2, [r1]
 8007db6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007db8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1e3      	bne.n	8007d86 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2220      	movs	r2, #32
 8007dc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dd4:	e853 3f00 	ldrex	r3, [r3]
 8007dd8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007dda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ddc:	f023 0310 	bic.w	r3, r3, #16
 8007de0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	461a      	mov	r2, r3
 8007dea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007dee:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007df0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007df4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007df6:	e841 2300 	strex	r3, r2, [r1]
 8007dfa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007dfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1e4      	bne.n	8007dcc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7fa fac2 	bl	8002390 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2202      	movs	r2, #2
 8007e10:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	4619      	mov	r1, r3
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f8f4 	bl	8008014 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007e2c:	e0d5      	b.n	8007fda <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007e34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	f040 80ce 	bne.w	8007fda <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 0320 	and.w	r3, r3, #32
 8007e4a:	2b20      	cmp	r3, #32
 8007e4c:	f040 80c5 	bne.w	8007fda <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2202      	movs	r2, #2
 8007e54:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f8d8 	bl	8008014 <HAL_UARTEx_RxEventCallback>
      return;
 8007e64:	e0b9      	b.n	8007fda <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	1ad3      	subs	r3, r2, r3
 8007e76:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f000 80ab 	beq.w	8007fde <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8007e88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f000 80a6 	beq.w	8007fde <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e9a:	e853 3f00 	ldrex	r3, [r3]
 8007e9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ea2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ea6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	461a      	mov	r2, r3
 8007eb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007eb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007eb6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007eba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ebc:	e841 2300 	strex	r3, r2, [r1]
 8007ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1e4      	bne.n	8007e92 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	3308      	adds	r3, #8
 8007ece:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed2:	e853 3f00 	ldrex	r3, [r3]
 8007ed6:	623b      	str	r3, [r7, #32]
   return(result);
 8007ed8:	6a3b      	ldr	r3, [r7, #32]
 8007eda:	f023 0301 	bic.w	r3, r3, #1
 8007ede:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	3308      	adds	r3, #8
 8007ee8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007eec:	633a      	str	r2, [r7, #48]	@ 0x30
 8007eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ef2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ef4:	e841 2300 	strex	r3, r2, [r1]
 8007ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d1e3      	bne.n	8007ec8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2220      	movs	r2, #32
 8007f04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	e853 3f00 	ldrex	r3, [r3]
 8007f20:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f023 0310 	bic.w	r3, r3, #16
 8007f28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	461a      	mov	r2, r3
 8007f32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007f36:	61fb      	str	r3, [r7, #28]
 8007f38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3a:	69b9      	ldr	r1, [r7, #24]
 8007f3c:	69fa      	ldr	r2, [r7, #28]
 8007f3e:	e841 2300 	strex	r3, r2, [r1]
 8007f42:	617b      	str	r3, [r7, #20]
   return(result);
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1e4      	bne.n	8007f14 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2202      	movs	r2, #2
 8007f4e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f54:	4619      	mov	r1, r3
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f85c 	bl	8008014 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f5c:	e03f      	b.n	8007fde <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00e      	beq.n	8007f88 <HAL_UART_IRQHandler+0x5a8>
 8007f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d008      	beq.n	8007f88 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007f7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 ffe9 	bl	8008f58 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f86:	e02d      	b.n	8007fe4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00e      	beq.n	8007fb2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d008      	beq.n	8007fb2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d01c      	beq.n	8007fe2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	4798      	blx	r3
    }
    return;
 8007fb0:	e017      	b.n	8007fe2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d012      	beq.n	8007fe4 <HAL_UART_IRQHandler+0x604>
 8007fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00c      	beq.n	8007fe4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 fdde 	bl	8008b8c <UART_EndTransmit_IT>
    return;
 8007fd0:	e008      	b.n	8007fe4 <HAL_UART_IRQHandler+0x604>
      return;
 8007fd2:	bf00      	nop
 8007fd4:	e006      	b.n	8007fe4 <HAL_UART_IRQHandler+0x604>
    return;
 8007fd6:	bf00      	nop
 8007fd8:	e004      	b.n	8007fe4 <HAL_UART_IRQHandler+0x604>
      return;
 8007fda:	bf00      	nop
 8007fdc:	e002      	b.n	8007fe4 <HAL_UART_IRQHandler+0x604>
      return;
 8007fde:	bf00      	nop
 8007fe0:	e000      	b.n	8007fe4 <HAL_UART_IRQHandler+0x604>
    return;
 8007fe2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007fe4:	37e8      	adds	r7, #232	@ 0xe8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop

08007fec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008008:	bf00      	nop
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	460b      	mov	r3, r1
 800801e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008020:	bf00      	nop
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800802c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008030:	b08a      	sub	sp, #40	@ 0x28
 8008032:	af00      	add	r7, sp, #0
 8008034:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008036:	2300      	movs	r3, #0
 8008038:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	689a      	ldr	r2, [r3, #8]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	431a      	orrs	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	695b      	ldr	r3, [r3, #20]
 800804a:	431a      	orrs	r2, r3
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	69db      	ldr	r3, [r3, #28]
 8008050:	4313      	orrs	r3, r2
 8008052:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	4ba4      	ldr	r3, [pc, #656]	@ (80082ec <UART_SetConfig+0x2c0>)
 800805c:	4013      	ands	r3, r2
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	6812      	ldr	r2, [r2, #0]
 8008062:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008064:	430b      	orrs	r3, r1
 8008066:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	68da      	ldr	r2, [r3, #12]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	430a      	orrs	r2, r1
 800807c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	699b      	ldr	r3, [r3, #24]
 8008082:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a99      	ldr	r2, [pc, #612]	@ (80082f0 <UART_SetConfig+0x2c4>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d004      	beq.n	8008098 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008094:	4313      	orrs	r3, r2
 8008096:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080a8:	430a      	orrs	r2, r1
 80080aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a90      	ldr	r2, [pc, #576]	@ (80082f4 <UART_SetConfig+0x2c8>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d126      	bne.n	8008104 <UART_SetConfig+0xd8>
 80080b6:	4b90      	ldr	r3, [pc, #576]	@ (80082f8 <UART_SetConfig+0x2cc>)
 80080b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080bc:	f003 0303 	and.w	r3, r3, #3
 80080c0:	2b03      	cmp	r3, #3
 80080c2:	d81b      	bhi.n	80080fc <UART_SetConfig+0xd0>
 80080c4:	a201      	add	r2, pc, #4	@ (adr r2, 80080cc <UART_SetConfig+0xa0>)
 80080c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ca:	bf00      	nop
 80080cc:	080080dd 	.word	0x080080dd
 80080d0:	080080ed 	.word	0x080080ed
 80080d4:	080080e5 	.word	0x080080e5
 80080d8:	080080f5 	.word	0x080080f5
 80080dc:	2301      	movs	r3, #1
 80080de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080e2:	e116      	b.n	8008312 <UART_SetConfig+0x2e6>
 80080e4:	2302      	movs	r3, #2
 80080e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080ea:	e112      	b.n	8008312 <UART_SetConfig+0x2e6>
 80080ec:	2304      	movs	r3, #4
 80080ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080f2:	e10e      	b.n	8008312 <UART_SetConfig+0x2e6>
 80080f4:	2308      	movs	r3, #8
 80080f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080fa:	e10a      	b.n	8008312 <UART_SetConfig+0x2e6>
 80080fc:	2310      	movs	r3, #16
 80080fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008102:	e106      	b.n	8008312 <UART_SetConfig+0x2e6>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a7c      	ldr	r2, [pc, #496]	@ (80082fc <UART_SetConfig+0x2d0>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d138      	bne.n	8008180 <UART_SetConfig+0x154>
 800810e:	4b7a      	ldr	r3, [pc, #488]	@ (80082f8 <UART_SetConfig+0x2cc>)
 8008110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008114:	f003 030c 	and.w	r3, r3, #12
 8008118:	2b0c      	cmp	r3, #12
 800811a:	d82d      	bhi.n	8008178 <UART_SetConfig+0x14c>
 800811c:	a201      	add	r2, pc, #4	@ (adr r2, 8008124 <UART_SetConfig+0xf8>)
 800811e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008122:	bf00      	nop
 8008124:	08008159 	.word	0x08008159
 8008128:	08008179 	.word	0x08008179
 800812c:	08008179 	.word	0x08008179
 8008130:	08008179 	.word	0x08008179
 8008134:	08008169 	.word	0x08008169
 8008138:	08008179 	.word	0x08008179
 800813c:	08008179 	.word	0x08008179
 8008140:	08008179 	.word	0x08008179
 8008144:	08008161 	.word	0x08008161
 8008148:	08008179 	.word	0x08008179
 800814c:	08008179 	.word	0x08008179
 8008150:	08008179 	.word	0x08008179
 8008154:	08008171 	.word	0x08008171
 8008158:	2300      	movs	r3, #0
 800815a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800815e:	e0d8      	b.n	8008312 <UART_SetConfig+0x2e6>
 8008160:	2302      	movs	r3, #2
 8008162:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008166:	e0d4      	b.n	8008312 <UART_SetConfig+0x2e6>
 8008168:	2304      	movs	r3, #4
 800816a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800816e:	e0d0      	b.n	8008312 <UART_SetConfig+0x2e6>
 8008170:	2308      	movs	r3, #8
 8008172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008176:	e0cc      	b.n	8008312 <UART_SetConfig+0x2e6>
 8008178:	2310      	movs	r3, #16
 800817a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800817e:	e0c8      	b.n	8008312 <UART_SetConfig+0x2e6>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a5e      	ldr	r2, [pc, #376]	@ (8008300 <UART_SetConfig+0x2d4>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d125      	bne.n	80081d6 <UART_SetConfig+0x1aa>
 800818a:	4b5b      	ldr	r3, [pc, #364]	@ (80082f8 <UART_SetConfig+0x2cc>)
 800818c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008190:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008194:	2b30      	cmp	r3, #48	@ 0x30
 8008196:	d016      	beq.n	80081c6 <UART_SetConfig+0x19a>
 8008198:	2b30      	cmp	r3, #48	@ 0x30
 800819a:	d818      	bhi.n	80081ce <UART_SetConfig+0x1a2>
 800819c:	2b20      	cmp	r3, #32
 800819e:	d00a      	beq.n	80081b6 <UART_SetConfig+0x18a>
 80081a0:	2b20      	cmp	r3, #32
 80081a2:	d814      	bhi.n	80081ce <UART_SetConfig+0x1a2>
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d002      	beq.n	80081ae <UART_SetConfig+0x182>
 80081a8:	2b10      	cmp	r3, #16
 80081aa:	d008      	beq.n	80081be <UART_SetConfig+0x192>
 80081ac:	e00f      	b.n	80081ce <UART_SetConfig+0x1a2>
 80081ae:	2300      	movs	r3, #0
 80081b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80081b4:	e0ad      	b.n	8008312 <UART_SetConfig+0x2e6>
 80081b6:	2302      	movs	r3, #2
 80081b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80081bc:	e0a9      	b.n	8008312 <UART_SetConfig+0x2e6>
 80081be:	2304      	movs	r3, #4
 80081c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80081c4:	e0a5      	b.n	8008312 <UART_SetConfig+0x2e6>
 80081c6:	2308      	movs	r3, #8
 80081c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80081cc:	e0a1      	b.n	8008312 <UART_SetConfig+0x2e6>
 80081ce:	2310      	movs	r3, #16
 80081d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80081d4:	e09d      	b.n	8008312 <UART_SetConfig+0x2e6>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a4a      	ldr	r2, [pc, #296]	@ (8008304 <UART_SetConfig+0x2d8>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d125      	bne.n	800822c <UART_SetConfig+0x200>
 80081e0:	4b45      	ldr	r3, [pc, #276]	@ (80082f8 <UART_SetConfig+0x2cc>)
 80081e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80081ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80081ec:	d016      	beq.n	800821c <UART_SetConfig+0x1f0>
 80081ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80081f0:	d818      	bhi.n	8008224 <UART_SetConfig+0x1f8>
 80081f2:	2b80      	cmp	r3, #128	@ 0x80
 80081f4:	d00a      	beq.n	800820c <UART_SetConfig+0x1e0>
 80081f6:	2b80      	cmp	r3, #128	@ 0x80
 80081f8:	d814      	bhi.n	8008224 <UART_SetConfig+0x1f8>
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d002      	beq.n	8008204 <UART_SetConfig+0x1d8>
 80081fe:	2b40      	cmp	r3, #64	@ 0x40
 8008200:	d008      	beq.n	8008214 <UART_SetConfig+0x1e8>
 8008202:	e00f      	b.n	8008224 <UART_SetConfig+0x1f8>
 8008204:	2300      	movs	r3, #0
 8008206:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800820a:	e082      	b.n	8008312 <UART_SetConfig+0x2e6>
 800820c:	2302      	movs	r3, #2
 800820e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008212:	e07e      	b.n	8008312 <UART_SetConfig+0x2e6>
 8008214:	2304      	movs	r3, #4
 8008216:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800821a:	e07a      	b.n	8008312 <UART_SetConfig+0x2e6>
 800821c:	2308      	movs	r3, #8
 800821e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008222:	e076      	b.n	8008312 <UART_SetConfig+0x2e6>
 8008224:	2310      	movs	r3, #16
 8008226:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800822a:	e072      	b.n	8008312 <UART_SetConfig+0x2e6>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a35      	ldr	r2, [pc, #212]	@ (8008308 <UART_SetConfig+0x2dc>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d12a      	bne.n	800828c <UART_SetConfig+0x260>
 8008236:	4b30      	ldr	r3, [pc, #192]	@ (80082f8 <UART_SetConfig+0x2cc>)
 8008238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800823c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008240:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008244:	d01a      	beq.n	800827c <UART_SetConfig+0x250>
 8008246:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800824a:	d81b      	bhi.n	8008284 <UART_SetConfig+0x258>
 800824c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008250:	d00c      	beq.n	800826c <UART_SetConfig+0x240>
 8008252:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008256:	d815      	bhi.n	8008284 <UART_SetConfig+0x258>
 8008258:	2b00      	cmp	r3, #0
 800825a:	d003      	beq.n	8008264 <UART_SetConfig+0x238>
 800825c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008260:	d008      	beq.n	8008274 <UART_SetConfig+0x248>
 8008262:	e00f      	b.n	8008284 <UART_SetConfig+0x258>
 8008264:	2300      	movs	r3, #0
 8008266:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800826a:	e052      	b.n	8008312 <UART_SetConfig+0x2e6>
 800826c:	2302      	movs	r3, #2
 800826e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008272:	e04e      	b.n	8008312 <UART_SetConfig+0x2e6>
 8008274:	2304      	movs	r3, #4
 8008276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800827a:	e04a      	b.n	8008312 <UART_SetConfig+0x2e6>
 800827c:	2308      	movs	r3, #8
 800827e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008282:	e046      	b.n	8008312 <UART_SetConfig+0x2e6>
 8008284:	2310      	movs	r3, #16
 8008286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800828a:	e042      	b.n	8008312 <UART_SetConfig+0x2e6>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a17      	ldr	r2, [pc, #92]	@ (80082f0 <UART_SetConfig+0x2c4>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d13a      	bne.n	800830c <UART_SetConfig+0x2e0>
 8008296:	4b18      	ldr	r3, [pc, #96]	@ (80082f8 <UART_SetConfig+0x2cc>)
 8008298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800829c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80082a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80082a4:	d01a      	beq.n	80082dc <UART_SetConfig+0x2b0>
 80082a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80082aa:	d81b      	bhi.n	80082e4 <UART_SetConfig+0x2b8>
 80082ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082b0:	d00c      	beq.n	80082cc <UART_SetConfig+0x2a0>
 80082b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082b6:	d815      	bhi.n	80082e4 <UART_SetConfig+0x2b8>
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d003      	beq.n	80082c4 <UART_SetConfig+0x298>
 80082bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082c0:	d008      	beq.n	80082d4 <UART_SetConfig+0x2a8>
 80082c2:	e00f      	b.n	80082e4 <UART_SetConfig+0x2b8>
 80082c4:	2300      	movs	r3, #0
 80082c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082ca:	e022      	b.n	8008312 <UART_SetConfig+0x2e6>
 80082cc:	2302      	movs	r3, #2
 80082ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082d2:	e01e      	b.n	8008312 <UART_SetConfig+0x2e6>
 80082d4:	2304      	movs	r3, #4
 80082d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082da:	e01a      	b.n	8008312 <UART_SetConfig+0x2e6>
 80082dc:	2308      	movs	r3, #8
 80082de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082e2:	e016      	b.n	8008312 <UART_SetConfig+0x2e6>
 80082e4:	2310      	movs	r3, #16
 80082e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082ea:	e012      	b.n	8008312 <UART_SetConfig+0x2e6>
 80082ec:	efff69f3 	.word	0xefff69f3
 80082f0:	40008000 	.word	0x40008000
 80082f4:	40013800 	.word	0x40013800
 80082f8:	40021000 	.word	0x40021000
 80082fc:	40004400 	.word	0x40004400
 8008300:	40004800 	.word	0x40004800
 8008304:	40004c00 	.word	0x40004c00
 8008308:	40005000 	.word	0x40005000
 800830c:	2310      	movs	r3, #16
 800830e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a9f      	ldr	r2, [pc, #636]	@ (8008594 <UART_SetConfig+0x568>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d17a      	bne.n	8008412 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800831c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008320:	2b08      	cmp	r3, #8
 8008322:	d824      	bhi.n	800836e <UART_SetConfig+0x342>
 8008324:	a201      	add	r2, pc, #4	@ (adr r2, 800832c <UART_SetConfig+0x300>)
 8008326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832a:	bf00      	nop
 800832c:	08008351 	.word	0x08008351
 8008330:	0800836f 	.word	0x0800836f
 8008334:	08008359 	.word	0x08008359
 8008338:	0800836f 	.word	0x0800836f
 800833c:	0800835f 	.word	0x0800835f
 8008340:	0800836f 	.word	0x0800836f
 8008344:	0800836f 	.word	0x0800836f
 8008348:	0800836f 	.word	0x0800836f
 800834c:	08008367 	.word	0x08008367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008350:	f7fb ff54 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 8008354:	61f8      	str	r0, [r7, #28]
        break;
 8008356:	e010      	b.n	800837a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008358:	4b8f      	ldr	r3, [pc, #572]	@ (8008598 <UART_SetConfig+0x56c>)
 800835a:	61fb      	str	r3, [r7, #28]
        break;
 800835c:	e00d      	b.n	800837a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800835e:	f7fb feb5 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 8008362:	61f8      	str	r0, [r7, #28]
        break;
 8008364:	e009      	b.n	800837a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008366:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800836a:	61fb      	str	r3, [r7, #28]
        break;
 800836c:	e005      	b.n	800837a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800836e:	2300      	movs	r3, #0
 8008370:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008378:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	2b00      	cmp	r3, #0
 800837e:	f000 80fb 	beq.w	8008578 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	685a      	ldr	r2, [r3, #4]
 8008386:	4613      	mov	r3, r2
 8008388:	005b      	lsls	r3, r3, #1
 800838a:	4413      	add	r3, r2
 800838c:	69fa      	ldr	r2, [r7, #28]
 800838e:	429a      	cmp	r2, r3
 8008390:	d305      	bcc.n	800839e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008398:	69fa      	ldr	r2, [r7, #28]
 800839a:	429a      	cmp	r2, r3
 800839c:	d903      	bls.n	80083a6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80083a4:	e0e8      	b.n	8008578 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	2200      	movs	r2, #0
 80083aa:	461c      	mov	r4, r3
 80083ac:	4615      	mov	r5, r2
 80083ae:	f04f 0200 	mov.w	r2, #0
 80083b2:	f04f 0300 	mov.w	r3, #0
 80083b6:	022b      	lsls	r3, r5, #8
 80083b8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80083bc:	0222      	lsls	r2, r4, #8
 80083be:	68f9      	ldr	r1, [r7, #12]
 80083c0:	6849      	ldr	r1, [r1, #4]
 80083c2:	0849      	lsrs	r1, r1, #1
 80083c4:	2000      	movs	r0, #0
 80083c6:	4688      	mov	r8, r1
 80083c8:	4681      	mov	r9, r0
 80083ca:	eb12 0a08 	adds.w	sl, r2, r8
 80083ce:	eb43 0b09 	adc.w	fp, r3, r9
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	603b      	str	r3, [r7, #0]
 80083da:	607a      	str	r2, [r7, #4]
 80083dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083e0:	4650      	mov	r0, sl
 80083e2:	4659      	mov	r1, fp
 80083e4:	f7f7 ff44 	bl	8000270 <__aeabi_uldivmod>
 80083e8:	4602      	mov	r2, r0
 80083ea:	460b      	mov	r3, r1
 80083ec:	4613      	mov	r3, r2
 80083ee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083f6:	d308      	bcc.n	800840a <UART_SetConfig+0x3de>
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083fe:	d204      	bcs.n	800840a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	69ba      	ldr	r2, [r7, #24]
 8008406:	60da      	str	r2, [r3, #12]
 8008408:	e0b6      	b.n	8008578 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008410:	e0b2      	b.n	8008578 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	69db      	ldr	r3, [r3, #28]
 8008416:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800841a:	d15e      	bne.n	80084da <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800841c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008420:	2b08      	cmp	r3, #8
 8008422:	d828      	bhi.n	8008476 <UART_SetConfig+0x44a>
 8008424:	a201      	add	r2, pc, #4	@ (adr r2, 800842c <UART_SetConfig+0x400>)
 8008426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842a:	bf00      	nop
 800842c:	08008451 	.word	0x08008451
 8008430:	08008459 	.word	0x08008459
 8008434:	08008461 	.word	0x08008461
 8008438:	08008477 	.word	0x08008477
 800843c:	08008467 	.word	0x08008467
 8008440:	08008477 	.word	0x08008477
 8008444:	08008477 	.word	0x08008477
 8008448:	08008477 	.word	0x08008477
 800844c:	0800846f 	.word	0x0800846f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008450:	f7fb fed4 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 8008454:	61f8      	str	r0, [r7, #28]
        break;
 8008456:	e014      	b.n	8008482 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008458:	f7fb fee6 	bl	8004228 <HAL_RCC_GetPCLK2Freq>
 800845c:	61f8      	str	r0, [r7, #28]
        break;
 800845e:	e010      	b.n	8008482 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008460:	4b4d      	ldr	r3, [pc, #308]	@ (8008598 <UART_SetConfig+0x56c>)
 8008462:	61fb      	str	r3, [r7, #28]
        break;
 8008464:	e00d      	b.n	8008482 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008466:	f7fb fe31 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 800846a:	61f8      	str	r0, [r7, #28]
        break;
 800846c:	e009      	b.n	8008482 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800846e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008472:	61fb      	str	r3, [r7, #28]
        break;
 8008474:	e005      	b.n	8008482 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008476:	2300      	movs	r3, #0
 8008478:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008480:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d077      	beq.n	8008578 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	005a      	lsls	r2, r3, #1
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	085b      	lsrs	r3, r3, #1
 8008492:	441a      	add	r2, r3
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	fbb2 f3f3 	udiv	r3, r2, r3
 800849c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	2b0f      	cmp	r3, #15
 80084a2:	d916      	bls.n	80084d2 <UART_SetConfig+0x4a6>
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084aa:	d212      	bcs.n	80084d2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	f023 030f 	bic.w	r3, r3, #15
 80084b4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	085b      	lsrs	r3, r3, #1
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	f003 0307 	and.w	r3, r3, #7
 80084c0:	b29a      	uxth	r2, r3
 80084c2:	8afb      	ldrh	r3, [r7, #22]
 80084c4:	4313      	orrs	r3, r2
 80084c6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	8afa      	ldrh	r2, [r7, #22]
 80084ce:	60da      	str	r2, [r3, #12]
 80084d0:	e052      	b.n	8008578 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80084d8:	e04e      	b.n	8008578 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80084da:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80084de:	2b08      	cmp	r3, #8
 80084e0:	d827      	bhi.n	8008532 <UART_SetConfig+0x506>
 80084e2:	a201      	add	r2, pc, #4	@ (adr r2, 80084e8 <UART_SetConfig+0x4bc>)
 80084e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e8:	0800850d 	.word	0x0800850d
 80084ec:	08008515 	.word	0x08008515
 80084f0:	0800851d 	.word	0x0800851d
 80084f4:	08008533 	.word	0x08008533
 80084f8:	08008523 	.word	0x08008523
 80084fc:	08008533 	.word	0x08008533
 8008500:	08008533 	.word	0x08008533
 8008504:	08008533 	.word	0x08008533
 8008508:	0800852b 	.word	0x0800852b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800850c:	f7fb fe76 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 8008510:	61f8      	str	r0, [r7, #28]
        break;
 8008512:	e014      	b.n	800853e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008514:	f7fb fe88 	bl	8004228 <HAL_RCC_GetPCLK2Freq>
 8008518:	61f8      	str	r0, [r7, #28]
        break;
 800851a:	e010      	b.n	800853e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800851c:	4b1e      	ldr	r3, [pc, #120]	@ (8008598 <UART_SetConfig+0x56c>)
 800851e:	61fb      	str	r3, [r7, #28]
        break;
 8008520:	e00d      	b.n	800853e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008522:	f7fb fdd3 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 8008526:	61f8      	str	r0, [r7, #28]
        break;
 8008528:	e009      	b.n	800853e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800852a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800852e:	61fb      	str	r3, [r7, #28]
        break;
 8008530:	e005      	b.n	800853e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008532:	2300      	movs	r3, #0
 8008534:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800853c:	bf00      	nop
    }

    if (pclk != 0U)
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d019      	beq.n	8008578 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	085a      	lsrs	r2, r3, #1
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	441a      	add	r2, r3
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	fbb2 f3f3 	udiv	r3, r2, r3
 8008556:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	2b0f      	cmp	r3, #15
 800855c:	d909      	bls.n	8008572 <UART_SetConfig+0x546>
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008564:	d205      	bcs.n	8008572 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	b29a      	uxth	r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	60da      	str	r2, [r3, #12]
 8008570:	e002      	b.n	8008578 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2200      	movs	r2, #0
 800857c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2200      	movs	r2, #0
 8008582:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008584:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008588:	4618      	mov	r0, r3
 800858a:	3728      	adds	r7, #40	@ 0x28
 800858c:	46bd      	mov	sp, r7
 800858e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008592:	bf00      	nop
 8008594:	40008000 	.word	0x40008000
 8008598:	00f42400 	.word	0x00f42400

0800859c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085a8:	f003 0308 	and.w	r3, r3, #8
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00a      	beq.n	80085c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	430a      	orrs	r2, r1
 80085c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ca:	f003 0301 	and.w	r3, r3, #1
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00a      	beq.n	80085e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	430a      	orrs	r2, r1
 80085e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ec:	f003 0302 	and.w	r3, r3, #2
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00a      	beq.n	800860a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	430a      	orrs	r2, r1
 8008608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800860e:	f003 0304 	and.w	r3, r3, #4
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00a      	beq.n	800862c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	430a      	orrs	r2, r1
 800862a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008630:	f003 0310 	and.w	r3, r3, #16
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00a      	beq.n	800864e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	430a      	orrs	r2, r1
 800864c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008652:	f003 0320 	and.w	r3, r3, #32
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00a      	beq.n	8008670 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	430a      	orrs	r2, r1
 800866e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008678:	2b00      	cmp	r3, #0
 800867a:	d01a      	beq.n	80086b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	430a      	orrs	r2, r1
 8008690:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008696:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800869a:	d10a      	bne.n	80086b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	430a      	orrs	r2, r1
 80086b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00a      	beq.n	80086d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	430a      	orrs	r2, r1
 80086d2:	605a      	str	r2, [r3, #4]
  }
}
 80086d4:	bf00      	nop
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b098      	sub	sp, #96	@ 0x60
 80086e4:	af02      	add	r7, sp, #8
 80086e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80086f0:	f7f9 fc48 	bl	8001f84 <HAL_GetTick>
 80086f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 0308 	and.w	r3, r3, #8
 8008700:	2b08      	cmp	r3, #8
 8008702:	d12e      	bne.n	8008762 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008704:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008708:	9300      	str	r3, [sp, #0]
 800870a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800870c:	2200      	movs	r2, #0
 800870e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 f88c 	bl	8008830 <UART_WaitOnFlagUntilTimeout>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d021      	beq.n	8008762 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008726:	e853 3f00 	ldrex	r3, [r3]
 800872a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800872c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800872e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008732:	653b      	str	r3, [r7, #80]	@ 0x50
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	461a      	mov	r2, r3
 800873a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800873c:	647b      	str	r3, [r7, #68]	@ 0x44
 800873e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008740:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008742:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008744:	e841 2300 	strex	r3, r2, [r1]
 8008748:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800874a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1e6      	bne.n	800871e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2220      	movs	r2, #32
 8008754:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800875e:	2303      	movs	r3, #3
 8008760:	e062      	b.n	8008828 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 0304 	and.w	r3, r3, #4
 800876c:	2b04      	cmp	r3, #4
 800876e:	d149      	bne.n	8008804 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008770:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008774:	9300      	str	r3, [sp, #0]
 8008776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008778:	2200      	movs	r2, #0
 800877a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f856 	bl	8008830 <UART_WaitOnFlagUntilTimeout>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d03c      	beq.n	8008804 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008792:	e853 3f00 	ldrex	r3, [r3]
 8008796:	623b      	str	r3, [r7, #32]
   return(result);
 8008798:	6a3b      	ldr	r3, [r7, #32]
 800879a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800879e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	461a      	mov	r2, r3
 80087a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80087aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087b0:	e841 2300 	strex	r3, r2, [r1]
 80087b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80087b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1e6      	bne.n	800878a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	3308      	adds	r3, #8
 80087c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	e853 3f00 	ldrex	r3, [r3]
 80087ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f023 0301 	bic.w	r3, r3, #1
 80087d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	3308      	adds	r3, #8
 80087da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087dc:	61fa      	str	r2, [r7, #28]
 80087de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e0:	69b9      	ldr	r1, [r7, #24]
 80087e2:	69fa      	ldr	r2, [r7, #28]
 80087e4:	e841 2300 	strex	r3, r2, [r1]
 80087e8:	617b      	str	r3, [r7, #20]
   return(result);
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1e5      	bne.n	80087bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2220      	movs	r2, #32
 80087f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008800:	2303      	movs	r3, #3
 8008802:	e011      	b.n	8008828 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2220      	movs	r2, #32
 8008808:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2220      	movs	r2, #32
 800880e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	3758      	adds	r7, #88	@ 0x58
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	603b      	str	r3, [r7, #0]
 800883c:	4613      	mov	r3, r2
 800883e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008840:	e04f      	b.n	80088e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008848:	d04b      	beq.n	80088e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800884a:	f7f9 fb9b 	bl	8001f84 <HAL_GetTick>
 800884e:	4602      	mov	r2, r0
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	69ba      	ldr	r2, [r7, #24]
 8008856:	429a      	cmp	r2, r3
 8008858:	d302      	bcc.n	8008860 <UART_WaitOnFlagUntilTimeout+0x30>
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d101      	bne.n	8008864 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008860:	2303      	movs	r3, #3
 8008862:	e04e      	b.n	8008902 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 0304 	and.w	r3, r3, #4
 800886e:	2b00      	cmp	r3, #0
 8008870:	d037      	beq.n	80088e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	2b80      	cmp	r3, #128	@ 0x80
 8008876:	d034      	beq.n	80088e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	2b40      	cmp	r3, #64	@ 0x40
 800887c:	d031      	beq.n	80088e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	69db      	ldr	r3, [r3, #28]
 8008884:	f003 0308 	and.w	r3, r3, #8
 8008888:	2b08      	cmp	r3, #8
 800888a:	d110      	bne.n	80088ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2208      	movs	r2, #8
 8008892:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f000 f8ff 	bl	8008a98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2208      	movs	r2, #8
 800889e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e029      	b.n	8008902 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	69db      	ldr	r3, [r3, #28]
 80088b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088bc:	d111      	bne.n	80088e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80088c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f000 f8e5 	bl	8008a98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2220      	movs	r2, #32
 80088d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80088de:	2303      	movs	r3, #3
 80088e0:	e00f      	b.n	8008902 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	69da      	ldr	r2, [r3, #28]
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	4013      	ands	r3, r2
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	bf0c      	ite	eq
 80088f2:	2301      	moveq	r3, #1
 80088f4:	2300      	movne	r3, #0
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	461a      	mov	r2, r3
 80088fa:	79fb      	ldrb	r3, [r7, #7]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d0a0      	beq.n	8008842 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008900:	2300      	movs	r3, #0
}
 8008902:	4618      	mov	r0, r3
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
	...

0800890c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800890c:	b480      	push	{r7}
 800890e:	b097      	sub	sp, #92	@ 0x5c
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	4613      	mov	r3, r2
 8008918:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	68ba      	ldr	r2, [r7, #8]
 800891e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	88fa      	ldrh	r2, [r7, #6]
 8008924:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	88fa      	ldrh	r2, [r7, #6]
 800892c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800893e:	d10e      	bne.n	800895e <UART_Start_Receive_IT+0x52>
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d105      	bne.n	8008954 <UART_Start_Receive_IT+0x48>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800894e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008952:	e02d      	b.n	80089b0 <UART_Start_Receive_IT+0xa4>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	22ff      	movs	r2, #255	@ 0xff
 8008958:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800895c:	e028      	b.n	80089b0 <UART_Start_Receive_IT+0xa4>
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10d      	bne.n	8008982 <UART_Start_Receive_IT+0x76>
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d104      	bne.n	8008978 <UART_Start_Receive_IT+0x6c>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	22ff      	movs	r2, #255	@ 0xff
 8008972:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008976:	e01b      	b.n	80089b0 <UART_Start_Receive_IT+0xa4>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	227f      	movs	r2, #127	@ 0x7f
 800897c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008980:	e016      	b.n	80089b0 <UART_Start_Receive_IT+0xa4>
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800898a:	d10d      	bne.n	80089a8 <UART_Start_Receive_IT+0x9c>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d104      	bne.n	800899e <UART_Start_Receive_IT+0x92>
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	227f      	movs	r2, #127	@ 0x7f
 8008998:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800899c:	e008      	b.n	80089b0 <UART_Start_Receive_IT+0xa4>
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	223f      	movs	r2, #63	@ 0x3f
 80089a2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80089a6:	e003      	b.n	80089b0 <UART_Start_Receive_IT+0xa4>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2222      	movs	r2, #34	@ 0x22
 80089bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	3308      	adds	r3, #8
 80089c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089ca:	e853 3f00 	ldrex	r3, [r3]
 80089ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80089d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d2:	f043 0301 	orr.w	r3, r3, #1
 80089d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	3308      	adds	r3, #8
 80089de:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80089e0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80089e2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80089e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089e8:	e841 2300 	strex	r3, r2, [r1]
 80089ec:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80089ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1e5      	bne.n	80089c0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089fc:	d107      	bne.n	8008a0e <UART_Start_Receive_IT+0x102>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d103      	bne.n	8008a0e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	4a21      	ldr	r2, [pc, #132]	@ (8008a90 <UART_Start_Receive_IT+0x184>)
 8008a0a:	669a      	str	r2, [r3, #104]	@ 0x68
 8008a0c:	e002      	b.n	8008a14 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	4a20      	ldr	r2, [pc, #128]	@ (8008a94 <UART_Start_Receive_IT+0x188>)
 8008a12:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d019      	beq.n	8008a50 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a24:	e853 3f00 	ldrex	r3, [r3]
 8008a28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a2c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008a30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	461a      	mov	r2, r3
 8008a38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a3c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008a40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a42:	e841 2300 	strex	r3, r2, [r1]
 8008a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1e6      	bne.n	8008a1c <UART_Start_Receive_IT+0x110>
 8008a4e:	e018      	b.n	8008a82 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	e853 3f00 	ldrex	r3, [r3]
 8008a5c:	613b      	str	r3, [r7, #16]
   return(result);
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	f043 0320 	orr.w	r3, r3, #32
 8008a64:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a6e:	623b      	str	r3, [r7, #32]
 8008a70:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a72:	69f9      	ldr	r1, [r7, #28]
 8008a74:	6a3a      	ldr	r2, [r7, #32]
 8008a76:	e841 2300 	strex	r3, r2, [r1]
 8008a7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1e6      	bne.n	8008a50 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	375c      	adds	r7, #92	@ 0x5c
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr
 8008a90:	08008d9d 	.word	0x08008d9d
 8008a94:	08008be1 	.word	0x08008be1

08008a98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b095      	sub	sp, #84	@ 0x54
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aa8:	e853 3f00 	ldrex	r3, [r3]
 8008aac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ab4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	461a      	mov	r2, r3
 8008abc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008abe:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ac0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ac4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ac6:	e841 2300 	strex	r3, r2, [r1]
 8008aca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1e6      	bne.n	8008aa0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	3308      	adds	r3, #8
 8008ad8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ada:	6a3b      	ldr	r3, [r7, #32]
 8008adc:	e853 3f00 	ldrex	r3, [r3]
 8008ae0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	f023 0301 	bic.w	r3, r3, #1
 8008ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	3308      	adds	r3, #8
 8008af0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008af2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008af4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008af8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008afa:	e841 2300 	strex	r3, r2, [r1]
 8008afe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1e5      	bne.n	8008ad2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d118      	bne.n	8008b40 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	e853 3f00 	ldrex	r3, [r3]
 8008b1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	f023 0310 	bic.w	r3, r3, #16
 8008b22:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	461a      	mov	r2, r3
 8008b2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b2c:	61bb      	str	r3, [r7, #24]
 8008b2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b30:	6979      	ldr	r1, [r7, #20]
 8008b32:	69ba      	ldr	r2, [r7, #24]
 8008b34:	e841 2300 	strex	r3, r2, [r1]
 8008b38:	613b      	str	r3, [r7, #16]
   return(result);
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d1e6      	bne.n	8008b0e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2220      	movs	r2, #32
 8008b44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008b54:	bf00      	nop
 8008b56:	3754      	adds	r7, #84	@ 0x54
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f7ff fa3e 	bl	8008000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b84:	bf00      	nop
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b088      	sub	sp, #32
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	e853 3f00 	ldrex	r3, [r3]
 8008ba0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ba8:	61fb      	str	r3, [r7, #28]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	461a      	mov	r2, r3
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	61bb      	str	r3, [r7, #24]
 8008bb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb6:	6979      	ldr	r1, [r7, #20]
 8008bb8:	69ba      	ldr	r2, [r7, #24]
 8008bba:	e841 2300 	strex	r3, r2, [r1]
 8008bbe:	613b      	str	r3, [r7, #16]
   return(result);
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d1e6      	bne.n	8008b94 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2220      	movs	r2, #32
 8008bca:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7ff fa0a 	bl	8007fec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bd8:	bf00      	nop
 8008bda:	3720      	adds	r7, #32
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b09c      	sub	sp, #112	@ 0x70
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008bee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bf8:	2b22      	cmp	r3, #34	@ 0x22
 8008bfa:	f040 80be 	bne.w	8008d7a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008c04:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c08:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008c0c:	b2d9      	uxtb	r1, r3
 8008c0e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008c12:	b2da      	uxtb	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c18:	400a      	ands	r2, r1
 8008c1a:	b2d2      	uxtb	r2, r2
 8008c1c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c22:	1c5a      	adds	r2, r3, #1
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	3b01      	subs	r3, #1
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	f040 80a3 	bne.w	8008d8e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c50:	e853 3f00 	ldrex	r3, [r3]
 8008c54:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008c56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	461a      	mov	r2, r3
 8008c64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c66:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008c68:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008c6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c6e:	e841 2300 	strex	r3, r2, [r1]
 8008c72:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008c74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1e6      	bne.n	8008c48 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	3308      	adds	r3, #8
 8008c80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c84:	e853 3f00 	ldrex	r3, [r3]
 8008c88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c8c:	f023 0301 	bic.w	r3, r3, #1
 8008c90:	667b      	str	r3, [r7, #100]	@ 0x64
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	3308      	adds	r3, #8
 8008c98:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008c9a:	647a      	str	r2, [r7, #68]	@ 0x44
 8008c9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ca0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ca2:	e841 2300 	strex	r3, r2, [r1]
 8008ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d1e5      	bne.n	8008c7a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2220      	movs	r2, #32
 8008cb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a34      	ldr	r2, [pc, #208]	@ (8008d98 <UART_RxISR_8BIT+0x1b8>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d01f      	beq.n	8008d0c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d018      	beq.n	8008d0c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce2:	e853 3f00 	ldrex	r3, [r3]
 8008ce6:	623b      	str	r3, [r7, #32]
   return(result);
 8008ce8:	6a3b      	ldr	r3, [r7, #32]
 8008cea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008cee:	663b      	str	r3, [r7, #96]	@ 0x60
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008cf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8008cfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008cfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d00:	e841 2300 	strex	r3, r2, [r1]
 8008d04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1e6      	bne.n	8008cda <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d12e      	bne.n	8008d72 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	e853 3f00 	ldrex	r3, [r3]
 8008d26:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f023 0310 	bic.w	r3, r3, #16
 8008d2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	461a      	mov	r2, r3
 8008d36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d38:	61fb      	str	r3, [r7, #28]
 8008d3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3c:	69b9      	ldr	r1, [r7, #24]
 8008d3e:	69fa      	ldr	r2, [r7, #28]
 8008d40:	e841 2300 	strex	r3, r2, [r1]
 8008d44:	617b      	str	r3, [r7, #20]
   return(result);
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d1e6      	bne.n	8008d1a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	69db      	ldr	r3, [r3, #28]
 8008d52:	f003 0310 	and.w	r3, r3, #16
 8008d56:	2b10      	cmp	r3, #16
 8008d58:	d103      	bne.n	8008d62 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2210      	movs	r2, #16
 8008d60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008d68:	4619      	mov	r1, r3
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f7ff f952 	bl	8008014 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d70:	e00d      	b.n	8008d8e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f7f7 fdba 	bl	80008ec <HAL_UART_RxCpltCallback>
}
 8008d78:	e009      	b.n	8008d8e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	8b1b      	ldrh	r3, [r3, #24]
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f042 0208 	orr.w	r2, r2, #8
 8008d8a:	b292      	uxth	r2, r2
 8008d8c:	831a      	strh	r2, [r3, #24]
}
 8008d8e:	bf00      	nop
 8008d90:	3770      	adds	r7, #112	@ 0x70
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	40008000 	.word	0x40008000

08008d9c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b09c      	sub	sp, #112	@ 0x70
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008daa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008db4:	2b22      	cmp	r3, #34	@ 0x22
 8008db6:	f040 80be 	bne.w	8008f36 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008dc0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dc8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008dca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008dce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008dd2:	4013      	ands	r3, r2
 8008dd4:	b29a      	uxth	r2, r3
 8008dd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008dd8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dde:	1c9a      	adds	r2, r3, #2
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	3b01      	subs	r3, #1
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f040 80a3 	bne.w	8008f4a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e0c:	e853 3f00 	ldrex	r3, [r3]
 8008e10:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008e12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e18:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	461a      	mov	r2, r3
 8008e20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e22:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e24:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e26:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008e28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008e2a:	e841 2300 	strex	r3, r2, [r1]
 8008e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008e30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d1e6      	bne.n	8008e04 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	3308      	adds	r3, #8
 8008e3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e40:	e853 3f00 	ldrex	r3, [r3]
 8008e44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e48:	f023 0301 	bic.w	r3, r3, #1
 8008e4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	3308      	adds	r3, #8
 8008e54:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008e56:	643a      	str	r2, [r7, #64]	@ 0x40
 8008e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e5e:	e841 2300 	strex	r3, r2, [r1]
 8008e62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1e5      	bne.n	8008e36 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2220      	movs	r2, #32
 8008e6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a34      	ldr	r2, [pc, #208]	@ (8008f54 <UART_RxISR_16BIT+0x1b8>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d01f      	beq.n	8008ec8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d018      	beq.n	8008ec8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9c:	6a3b      	ldr	r3, [r7, #32]
 8008e9e:	e853 3f00 	ldrex	r3, [r3]
 8008ea2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008eaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008eb6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008eba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ebc:	e841 2300 	strex	r3, r2, [r1]
 8008ec0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d1e6      	bne.n	8008e96 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d12e      	bne.n	8008f2e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	e853 3f00 	ldrex	r3, [r3]
 8008ee2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	f023 0310 	bic.w	r3, r3, #16
 8008eea:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008ef4:	61bb      	str	r3, [r7, #24]
 8008ef6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef8:	6979      	ldr	r1, [r7, #20]
 8008efa:	69ba      	ldr	r2, [r7, #24]
 8008efc:	e841 2300 	strex	r3, r2, [r1]
 8008f00:	613b      	str	r3, [r7, #16]
   return(result);
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d1e6      	bne.n	8008ed6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	69db      	ldr	r3, [r3, #28]
 8008f0e:	f003 0310 	and.w	r3, r3, #16
 8008f12:	2b10      	cmp	r3, #16
 8008f14:	d103      	bne.n	8008f1e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2210      	movs	r2, #16
 8008f1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008f24:	4619      	mov	r1, r3
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f7ff f874 	bl	8008014 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f2c:	e00d      	b.n	8008f4a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f7f7 fcdc 	bl	80008ec <HAL_UART_RxCpltCallback>
}
 8008f34:	e009      	b.n	8008f4a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	8b1b      	ldrh	r3, [r3, #24]
 8008f3c:	b29a      	uxth	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f042 0208 	orr.w	r2, r2, #8
 8008f46:	b292      	uxth	r2, r2
 8008f48:	831a      	strh	r2, [r3, #24]
}
 8008f4a:	bf00      	nop
 8008f4c:	3770      	adds	r7, #112	@ 0x70
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	40008000 	.word	0x40008000

08008f58 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008f60:	bf00      	nop
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	4603      	mov	r3, r0
 8008f74:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008f76:	2300      	movs	r3, #0
 8008f78:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008f7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f7e:	2b84      	cmp	r3, #132	@ 0x84
 8008f80:	d005      	beq.n	8008f8e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008f82:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	4413      	add	r3, r2
 8008f8a:	3303      	adds	r3, #3
 8008f8c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3714      	adds	r7, #20
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008fa0:	f000 fde2 	bl	8009b68 <vTaskStartScheduler>
  
  return osOK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008faa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fac:	b089      	sub	sp, #36	@ 0x24
 8008fae:	af04      	add	r7, sp, #16
 8008fb0:	6078      	str	r0, [r7, #4]
 8008fb2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	695b      	ldr	r3, [r3, #20]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d020      	beq.n	8008ffe <osThreadCreate+0x54>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d01c      	beq.n	8008ffe <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685c      	ldr	r4, [r3, #4]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	691e      	ldr	r6, [r3, #16]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7ff ffc8 	bl	8008f6c <makeFreeRtosPriority>
 8008fdc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	695b      	ldr	r3, [r3, #20]
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008fe6:	9202      	str	r2, [sp, #8]
 8008fe8:	9301      	str	r3, [sp, #4]
 8008fea:	9100      	str	r1, [sp, #0]
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	4632      	mov	r2, r6
 8008ff0:	4629      	mov	r1, r5
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	f000 fbd2 	bl	800979c <xTaskCreateStatic>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	60fb      	str	r3, [r7, #12]
 8008ffc:	e01c      	b.n	8009038 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	685c      	ldr	r4, [r3, #4]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800900a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009012:	4618      	mov	r0, r3
 8009014:	f7ff ffaa 	bl	8008f6c <makeFreeRtosPriority>
 8009018:	4602      	mov	r2, r0
 800901a:	f107 030c 	add.w	r3, r7, #12
 800901e:	9301      	str	r3, [sp, #4]
 8009020:	9200      	str	r2, [sp, #0]
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	4632      	mov	r2, r6
 8009026:	4629      	mov	r1, r5
 8009028:	4620      	mov	r0, r4
 800902a:	f000 fc17 	bl	800985c <xTaskCreate>
 800902e:	4603      	mov	r3, r0
 8009030:	2b01      	cmp	r3, #1
 8009032:	d001      	beq.n	8009038 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009034:	2300      	movs	r3, #0
 8009036:	e000      	b.n	800903a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009038:	68fb      	ldr	r3, [r7, #12]
}
 800903a:	4618      	mov	r0, r3
 800903c:	3714      	adds	r7, #20
 800903e:	46bd      	mov	sp, r7
 8009040:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009042 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b084      	sub	sp, #16
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d001      	beq.n	8009058 <osDelay+0x16>
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	e000      	b.n	800905a <osDelay+0x18>
 8009058:	2301      	movs	r3, #1
 800905a:	4618      	mov	r0, r3
 800905c:	f000 fd4e 	bl	8009afc <vTaskDelay>
  
  return osOK;
 8009060:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009062:	4618      	mov	r0, r3
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800906a:	b480      	push	{r7}
 800906c:	b083      	sub	sp, #12
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f103 0208 	add.w	r2, r3, #8
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009082:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f103 0208 	add.w	r2, r3, #8
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f103 0208 	add.w	r2, r3, #8
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800909e:	bf00      	nop
 80090a0:	370c      	adds	r7, #12
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr

080090aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80090aa:	b480      	push	{r7}
 80090ac:	b083      	sub	sp, #12
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80090b8:	bf00      	nop
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	689a      	ldr	r2, [r3, #8]
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	683a      	ldr	r2, [r7, #0]
 80090e8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	683a      	ldr	r2, [r7, #0]
 80090ee:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	1c5a      	adds	r2, r3, #1
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	601a      	str	r2, [r3, #0]
}
 8009100:	bf00      	nop
 8009102:	3714      	adds	r7, #20
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800910c:	b480      	push	{r7}
 800910e:	b085      	sub	sp, #20
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009122:	d103      	bne.n	800912c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	60fb      	str	r3, [r7, #12]
 800912a:	e00c      	b.n	8009146 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	3308      	adds	r3, #8
 8009130:	60fb      	str	r3, [r7, #12]
 8009132:	e002      	b.n	800913a <vListInsert+0x2e>
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	60fb      	str	r3, [r7, #12]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68ba      	ldr	r2, [r7, #8]
 8009142:	429a      	cmp	r2, r3
 8009144:	d2f6      	bcs.n	8009134 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	685a      	ldr	r2, [r3, #4]
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	683a      	ldr	r2, [r7, #0]
 8009154:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	1c5a      	adds	r2, r3, #1
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	601a      	str	r2, [r3, #0]
}
 8009172:	bf00      	nop
 8009174:	3714      	adds	r7, #20
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800917e:	b480      	push	{r7}
 8009180:	b085      	sub	sp, #20
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	691b      	ldr	r3, [r3, #16]
 800918a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	6892      	ldr	r2, [r2, #8]
 8009194:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	6852      	ldr	r2, [r2, #4]
 800919e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d103      	bne.n	80091b2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	689a      	ldr	r2, [r3, #8]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	1e5a      	subs	r2, r3, #1
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3714      	adds	r7, #20
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr
	...

080091d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10b      	bne.n	8009200 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80091e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ec:	f383 8811 	msr	BASEPRI, r3
 80091f0:	f3bf 8f6f 	isb	sy
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80091fa:	bf00      	nop
 80091fc:	bf00      	nop
 80091fe:	e7fd      	b.n	80091fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009200:	f001 fba2 	bl	800a948 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800920c:	68f9      	ldr	r1, [r7, #12]
 800920e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009210:	fb01 f303 	mul.w	r3, r1, r3
 8009214:	441a      	add	r2, r3
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2200      	movs	r2, #0
 800921e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009230:	3b01      	subs	r3, #1
 8009232:	68f9      	ldr	r1, [r7, #12]
 8009234:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009236:	fb01 f303 	mul.w	r3, r1, r3
 800923a:	441a      	add	r2, r3
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	22ff      	movs	r2, #255	@ 0xff
 8009244:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	22ff      	movs	r2, #255	@ 0xff
 800924c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d114      	bne.n	8009280 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d01a      	beq.n	8009294 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	3310      	adds	r3, #16
 8009262:	4618      	mov	r0, r3
 8009264:	f000 feda 	bl	800a01c <xTaskRemoveFromEventList>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d012      	beq.n	8009294 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800926e:	4b0d      	ldr	r3, [pc, #52]	@ (80092a4 <xQueueGenericReset+0xd0>)
 8009270:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009274:	601a      	str	r2, [r3, #0]
 8009276:	f3bf 8f4f 	dsb	sy
 800927a:	f3bf 8f6f 	isb	sy
 800927e:	e009      	b.n	8009294 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	3310      	adds	r3, #16
 8009284:	4618      	mov	r0, r3
 8009286:	f7ff fef0 	bl	800906a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	3324      	adds	r3, #36	@ 0x24
 800928e:	4618      	mov	r0, r3
 8009290:	f7ff feeb 	bl	800906a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009294:	f001 fb8a 	bl	800a9ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009298:	2301      	movs	r3, #1
}
 800929a:	4618      	mov	r0, r3
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	e000ed04 	.word	0xe000ed04

080092a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b08a      	sub	sp, #40	@ 0x28
 80092ac:	af02      	add	r7, sp, #8
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	4613      	mov	r3, r2
 80092b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d10b      	bne.n	80092d4 <xQueueGenericCreate+0x2c>
	__asm volatile
 80092bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092c0:	f383 8811 	msr	BASEPRI, r3
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	613b      	str	r3, [r7, #16]
}
 80092ce:	bf00      	nop
 80092d0:	bf00      	nop
 80092d2:	e7fd      	b.n	80092d0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	68ba      	ldr	r2, [r7, #8]
 80092d8:	fb02 f303 	mul.w	r3, r2, r3
 80092dc:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	3348      	adds	r3, #72	@ 0x48
 80092e2:	4618      	mov	r0, r3
 80092e4:	f001 fc52 	bl	800ab8c <pvPortMalloc>
 80092e8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80092ea:	69bb      	ldr	r3, [r7, #24]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d011      	beq.n	8009314 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	3348      	adds	r3, #72	@ 0x48
 80092f8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009302:	79fa      	ldrb	r2, [r7, #7]
 8009304:	69bb      	ldr	r3, [r7, #24]
 8009306:	9300      	str	r3, [sp, #0]
 8009308:	4613      	mov	r3, r2
 800930a:	697a      	ldr	r2, [r7, #20]
 800930c:	68b9      	ldr	r1, [r7, #8]
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f000 f805 	bl	800931e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009314:	69bb      	ldr	r3, [r7, #24]
	}
 8009316:	4618      	mov	r0, r3
 8009318:	3720      	adds	r7, #32
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b084      	sub	sp, #16
 8009322:	af00      	add	r7, sp, #0
 8009324:	60f8      	str	r0, [r7, #12]
 8009326:	60b9      	str	r1, [r7, #8]
 8009328:	607a      	str	r2, [r7, #4]
 800932a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d103      	bne.n	800933a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	69ba      	ldr	r2, [r7, #24]
 8009336:	601a      	str	r2, [r3, #0]
 8009338:	e002      	b.n	8009340 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	68fa      	ldr	r2, [r7, #12]
 8009344:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	68ba      	ldr	r2, [r7, #8]
 800934a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800934c:	2101      	movs	r1, #1
 800934e:	69b8      	ldr	r0, [r7, #24]
 8009350:	f7ff ff40 	bl	80091d4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009354:	bf00      	nop
 8009356:	3710      	adds	r7, #16
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b08e      	sub	sp, #56	@ 0x38
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800936a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936c:	2b00      	cmp	r3, #0
 800936e:	d10b      	bne.n	8009388 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8009370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009374:	f383 8811 	msr	BASEPRI, r3
 8009378:	f3bf 8f6f 	isb	sy
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	623b      	str	r3, [r7, #32]
}
 8009382:	bf00      	nop
 8009384:	bf00      	nop
 8009386:	e7fd      	b.n	8009384 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800938c:	2b00      	cmp	r3, #0
 800938e:	d00b      	beq.n	80093a8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8009390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009394:	f383 8811 	msr	BASEPRI, r3
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	f3bf 8f4f 	dsb	sy
 80093a0:	61fb      	str	r3, [r7, #28]
}
 80093a2:	bf00      	nop
 80093a4:	bf00      	nop
 80093a6:	e7fd      	b.n	80093a4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80093a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d103      	bne.n	80093b8 <xQueueGiveFromISR+0x5c>
 80093b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d101      	bne.n	80093bc <xQueueGiveFromISR+0x60>
 80093b8:	2301      	movs	r3, #1
 80093ba:	e000      	b.n	80093be <xQueueGiveFromISR+0x62>
 80093bc:	2300      	movs	r3, #0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d10b      	bne.n	80093da <xQueueGiveFromISR+0x7e>
	__asm volatile
 80093c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093c6:	f383 8811 	msr	BASEPRI, r3
 80093ca:	f3bf 8f6f 	isb	sy
 80093ce:	f3bf 8f4f 	dsb	sy
 80093d2:	61bb      	str	r3, [r7, #24]
}
 80093d4:	bf00      	nop
 80093d6:	bf00      	nop
 80093d8:	e7fd      	b.n	80093d6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80093da:	f001 fb95 	bl	800ab08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80093de:	f3ef 8211 	mrs	r2, BASEPRI
 80093e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e6:	f383 8811 	msr	BASEPRI, r3
 80093ea:	f3bf 8f6f 	isb	sy
 80093ee:	f3bf 8f4f 	dsb	sy
 80093f2:	617a      	str	r2, [r7, #20]
 80093f4:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80093f6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80093f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093fe:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009404:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009406:	429a      	cmp	r2, r3
 8009408:	d22b      	bcs.n	8009462 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800940a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009410:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009416:	1c5a      	adds	r2, r3, #1
 8009418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800941a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800941c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009420:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009424:	d112      	bne.n	800944c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800942a:	2b00      	cmp	r3, #0
 800942c:	d016      	beq.n	800945c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800942e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009430:	3324      	adds	r3, #36	@ 0x24
 8009432:	4618      	mov	r0, r3
 8009434:	f000 fdf2 	bl	800a01c <xTaskRemoveFromEventList>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00e      	beq.n	800945c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d00b      	beq.n	800945c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	2201      	movs	r2, #1
 8009448:	601a      	str	r2, [r3, #0]
 800944a:	e007      	b.n	800945c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800944c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009450:	3301      	adds	r3, #1
 8009452:	b2db      	uxtb	r3, r3
 8009454:	b25a      	sxtb	r2, r3
 8009456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009458:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800945c:	2301      	movs	r3, #1
 800945e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009460:	e001      	b.n	8009466 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009462:	2300      	movs	r3, #0
 8009464:	637b      	str	r3, [r7, #52]	@ 0x34
 8009466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009468:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009470:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009474:	4618      	mov	r0, r3
 8009476:	3738      	adds	r7, #56	@ 0x38
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b08e      	sub	sp, #56	@ 0x38
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009486:	2300      	movs	r3, #0
 8009488:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800948e:	2300      	movs	r3, #0
 8009490:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009494:	2b00      	cmp	r3, #0
 8009496:	d10b      	bne.n	80094b0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8009498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800949c:	f383 8811 	msr	BASEPRI, r3
 80094a0:	f3bf 8f6f 	isb	sy
 80094a4:	f3bf 8f4f 	dsb	sy
 80094a8:	623b      	str	r3, [r7, #32]
}
 80094aa:	bf00      	nop
 80094ac:	bf00      	nop
 80094ae:	e7fd      	b.n	80094ac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80094b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00b      	beq.n	80094d0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80094b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094bc:	f383 8811 	msr	BASEPRI, r3
 80094c0:	f3bf 8f6f 	isb	sy
 80094c4:	f3bf 8f4f 	dsb	sy
 80094c8:	61fb      	str	r3, [r7, #28]
}
 80094ca:	bf00      	nop
 80094cc:	bf00      	nop
 80094ce:	e7fd      	b.n	80094cc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094d0:	f000 ff6a 	bl	800a3a8 <xTaskGetSchedulerState>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d102      	bne.n	80094e0 <xQueueSemaphoreTake+0x64>
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d101      	bne.n	80094e4 <xQueueSemaphoreTake+0x68>
 80094e0:	2301      	movs	r3, #1
 80094e2:	e000      	b.n	80094e6 <xQueueSemaphoreTake+0x6a>
 80094e4:	2300      	movs	r3, #0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d10b      	bne.n	8009502 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80094ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ee:	f383 8811 	msr	BASEPRI, r3
 80094f2:	f3bf 8f6f 	isb	sy
 80094f6:	f3bf 8f4f 	dsb	sy
 80094fa:	61bb      	str	r3, [r7, #24]
}
 80094fc:	bf00      	nop
 80094fe:	bf00      	nop
 8009500:	e7fd      	b.n	80094fe <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009502:	f001 fa21 	bl	800a948 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800950a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800950c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800950e:	2b00      	cmp	r3, #0
 8009510:	d024      	beq.n	800955c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009514:	1e5a      	subs	r2, r3, #1
 8009516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009518:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800951a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d104      	bne.n	800952c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009522:	f001 f865 	bl	800a5f0 <pvTaskIncrementMutexHeldCount>
 8009526:	4602      	mov	r2, r0
 8009528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800952a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800952c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00f      	beq.n	8009554 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009536:	3310      	adds	r3, #16
 8009538:	4618      	mov	r0, r3
 800953a:	f000 fd6f 	bl	800a01c <xTaskRemoveFromEventList>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d007      	beq.n	8009554 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009544:	4b54      	ldr	r3, [pc, #336]	@ (8009698 <xQueueSemaphoreTake+0x21c>)
 8009546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800954a:	601a      	str	r2, [r3, #0]
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009554:	f001 fa2a 	bl	800a9ac <vPortExitCritical>
				return pdPASS;
 8009558:	2301      	movs	r3, #1
 800955a:	e098      	b.n	800968e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d112      	bne.n	8009588 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00b      	beq.n	8009580 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8009568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800956c:	f383 8811 	msr	BASEPRI, r3
 8009570:	f3bf 8f6f 	isb	sy
 8009574:	f3bf 8f4f 	dsb	sy
 8009578:	617b      	str	r3, [r7, #20]
}
 800957a:	bf00      	nop
 800957c:	bf00      	nop
 800957e:	e7fd      	b.n	800957c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009580:	f001 fa14 	bl	800a9ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009584:	2300      	movs	r3, #0
 8009586:	e082      	b.n	800968e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800958a:	2b00      	cmp	r3, #0
 800958c:	d106      	bne.n	800959c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800958e:	f107 030c 	add.w	r3, r7, #12
 8009592:	4618      	mov	r0, r3
 8009594:	f000 fda6 	bl	800a0e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009598:	2301      	movs	r3, #1
 800959a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800959c:	f001 fa06 	bl	800a9ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095a0:	f000 fb4c 	bl	8009c3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095a4:	f001 f9d0 	bl	800a948 <vPortEnterCritical>
 80095a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80095ae:	b25b      	sxtb	r3, r3
 80095b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095b4:	d103      	bne.n	80095be <xQueueSemaphoreTake+0x142>
 80095b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b8:	2200      	movs	r2, #0
 80095ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80095be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80095c4:	b25b      	sxtb	r3, r3
 80095c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095ca:	d103      	bne.n	80095d4 <xQueueSemaphoreTake+0x158>
 80095cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ce:	2200      	movs	r2, #0
 80095d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80095d4:	f001 f9ea 	bl	800a9ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095d8:	463a      	mov	r2, r7
 80095da:	f107 030c 	add.w	r3, r7, #12
 80095de:	4611      	mov	r1, r2
 80095e0:	4618      	mov	r0, r3
 80095e2:	f000 fd95 	bl	800a110 <xTaskCheckForTimeOut>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d132      	bne.n	8009652 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80095ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80095ee:	f000 f8bf 	bl	8009770 <prvIsQueueEmpty>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d026      	beq.n	8009646 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80095f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d109      	bne.n	8009614 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009600:	f001 f9a2 	bl	800a948 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	4618      	mov	r0, r3
 800960a:	f000 feeb 	bl	800a3e4 <xTaskPriorityInherit>
 800960e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009610:	f001 f9cc 	bl	800a9ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009616:	3324      	adds	r3, #36	@ 0x24
 8009618:	683a      	ldr	r2, [r7, #0]
 800961a:	4611      	mov	r1, r2
 800961c:	4618      	mov	r0, r3
 800961e:	f000 fcd7 	bl	8009fd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009622:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009624:	f000 f852 	bl	80096cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009628:	f000 fb16 	bl	8009c58 <xTaskResumeAll>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	f47f af67 	bne.w	8009502 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009634:	4b18      	ldr	r3, [pc, #96]	@ (8009698 <xQueueSemaphoreTake+0x21c>)
 8009636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800963a:	601a      	str	r2, [r3, #0]
 800963c:	f3bf 8f4f 	dsb	sy
 8009640:	f3bf 8f6f 	isb	sy
 8009644:	e75d      	b.n	8009502 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009646:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009648:	f000 f840 	bl	80096cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800964c:	f000 fb04 	bl	8009c58 <xTaskResumeAll>
 8009650:	e757      	b.n	8009502 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009652:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009654:	f000 f83a 	bl	80096cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009658:	f000 fafe 	bl	8009c58 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800965c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800965e:	f000 f887 	bl	8009770 <prvIsQueueEmpty>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	f43f af4c 	beq.w	8009502 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800966a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00d      	beq.n	800968c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009670:	f001 f96a 	bl	800a948 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009674:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009676:	f000 f811 	bl	800969c <prvGetDisinheritPriorityAfterTimeout>
 800967a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800967c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009682:	4618      	mov	r0, r3
 8009684:	f000 ff24 	bl	800a4d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009688:	f001 f990 	bl	800a9ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800968c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800968e:	4618      	mov	r0, r3
 8009690:	3738      	adds	r7, #56	@ 0x38
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	e000ed04 	.word	0xe000ed04

0800969c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800969c:	b480      	push	{r7}
 800969e:	b085      	sub	sp, #20
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d006      	beq.n	80096ba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f1c3 0307 	rsb	r3, r3, #7
 80096b6:	60fb      	str	r3, [r7, #12]
 80096b8:	e001      	b.n	80096be <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80096ba:	2300      	movs	r3, #0
 80096bc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80096be:	68fb      	ldr	r3, [r7, #12]
	}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3714      	adds	r7, #20
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80096d4:	f001 f938 	bl	800a948 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80096de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80096e0:	e011      	b.n	8009706 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d012      	beq.n	8009710 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	3324      	adds	r3, #36	@ 0x24
 80096ee:	4618      	mov	r0, r3
 80096f0:	f000 fc94 	bl	800a01c <xTaskRemoveFromEventList>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d001      	beq.n	80096fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80096fa:	f000 fd6d 	bl	800a1d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80096fe:	7bfb      	ldrb	r3, [r7, #15]
 8009700:	3b01      	subs	r3, #1
 8009702:	b2db      	uxtb	r3, r3
 8009704:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800970a:	2b00      	cmp	r3, #0
 800970c:	dce9      	bgt.n	80096e2 <prvUnlockQueue+0x16>
 800970e:	e000      	b.n	8009712 <prvUnlockQueue+0x46>
					break;
 8009710:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	22ff      	movs	r2, #255	@ 0xff
 8009716:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800971a:	f001 f947 	bl	800a9ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800971e:	f001 f913 	bl	800a948 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009728:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800972a:	e011      	b.n	8009750 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	691b      	ldr	r3, [r3, #16]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d012      	beq.n	800975a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	3310      	adds	r3, #16
 8009738:	4618      	mov	r0, r3
 800973a:	f000 fc6f 	bl	800a01c <xTaskRemoveFromEventList>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d001      	beq.n	8009748 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009744:	f000 fd48 	bl	800a1d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009748:	7bbb      	ldrb	r3, [r7, #14]
 800974a:	3b01      	subs	r3, #1
 800974c:	b2db      	uxtb	r3, r3
 800974e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009750:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009754:	2b00      	cmp	r3, #0
 8009756:	dce9      	bgt.n	800972c <prvUnlockQueue+0x60>
 8009758:	e000      	b.n	800975c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800975a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	22ff      	movs	r2, #255	@ 0xff
 8009760:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009764:	f001 f922 	bl	800a9ac <vPortExitCritical>
}
 8009768:	bf00      	nop
 800976a:	3710      	adds	r7, #16
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009778:	f001 f8e6 	bl	800a948 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009780:	2b00      	cmp	r3, #0
 8009782:	d102      	bne.n	800978a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009784:	2301      	movs	r3, #1
 8009786:	60fb      	str	r3, [r7, #12]
 8009788:	e001      	b.n	800978e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800978a:	2300      	movs	r3, #0
 800978c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800978e:	f001 f90d 	bl	800a9ac <vPortExitCritical>

	return xReturn;
 8009792:	68fb      	ldr	r3, [r7, #12]
}
 8009794:	4618      	mov	r0, r3
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800979c:	b580      	push	{r7, lr}
 800979e:	b08e      	sub	sp, #56	@ 0x38
 80097a0:	af04      	add	r7, sp, #16
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	607a      	str	r2, [r7, #4]
 80097a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80097aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d10b      	bne.n	80097c8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80097b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b4:	f383 8811 	msr	BASEPRI, r3
 80097b8:	f3bf 8f6f 	isb	sy
 80097bc:	f3bf 8f4f 	dsb	sy
 80097c0:	623b      	str	r3, [r7, #32]
}
 80097c2:	bf00      	nop
 80097c4:	bf00      	nop
 80097c6:	e7fd      	b.n	80097c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80097c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d10b      	bne.n	80097e6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80097ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d2:	f383 8811 	msr	BASEPRI, r3
 80097d6:	f3bf 8f6f 	isb	sy
 80097da:	f3bf 8f4f 	dsb	sy
 80097de:	61fb      	str	r3, [r7, #28]
}
 80097e0:	bf00      	nop
 80097e2:	bf00      	nop
 80097e4:	e7fd      	b.n	80097e2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80097e6:	23a0      	movs	r3, #160	@ 0xa0
 80097e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	2ba0      	cmp	r3, #160	@ 0xa0
 80097ee:	d00b      	beq.n	8009808 <xTaskCreateStatic+0x6c>
	__asm volatile
 80097f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f4:	f383 8811 	msr	BASEPRI, r3
 80097f8:	f3bf 8f6f 	isb	sy
 80097fc:	f3bf 8f4f 	dsb	sy
 8009800:	61bb      	str	r3, [r7, #24]
}
 8009802:	bf00      	nop
 8009804:	bf00      	nop
 8009806:	e7fd      	b.n	8009804 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009808:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800980a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800980c:	2b00      	cmp	r3, #0
 800980e:	d01e      	beq.n	800984e <xTaskCreateStatic+0xb2>
 8009810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009812:	2b00      	cmp	r3, #0
 8009814:	d01b      	beq.n	800984e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009818:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800981a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800981c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800981e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009822:	2202      	movs	r2, #2
 8009824:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009828:	2300      	movs	r3, #0
 800982a:	9303      	str	r3, [sp, #12]
 800982c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800982e:	9302      	str	r3, [sp, #8]
 8009830:	f107 0314 	add.w	r3, r7, #20
 8009834:	9301      	str	r3, [sp, #4]
 8009836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009838:	9300      	str	r3, [sp, #0]
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	68b9      	ldr	r1, [r7, #8]
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f000 f851 	bl	80098e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009846:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009848:	f000 f8ee 	bl	8009a28 <prvAddNewTaskToReadyList>
 800984c:	e001      	b.n	8009852 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800984e:	2300      	movs	r3, #0
 8009850:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009852:	697b      	ldr	r3, [r7, #20]
	}
 8009854:	4618      	mov	r0, r3
 8009856:	3728      	adds	r7, #40	@ 0x28
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800985c:	b580      	push	{r7, lr}
 800985e:	b08c      	sub	sp, #48	@ 0x30
 8009860:	af04      	add	r7, sp, #16
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	60b9      	str	r1, [r7, #8]
 8009866:	603b      	str	r3, [r7, #0]
 8009868:	4613      	mov	r3, r2
 800986a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800986c:	88fb      	ldrh	r3, [r7, #6]
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	4618      	mov	r0, r3
 8009872:	f001 f98b 	bl	800ab8c <pvPortMalloc>
 8009876:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d00e      	beq.n	800989c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800987e:	20a0      	movs	r0, #160	@ 0xa0
 8009880:	f001 f984 	bl	800ab8c <pvPortMalloc>
 8009884:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d003      	beq.n	8009894 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800988c:	69fb      	ldr	r3, [r7, #28]
 800988e:	697a      	ldr	r2, [r7, #20]
 8009890:	631a      	str	r2, [r3, #48]	@ 0x30
 8009892:	e005      	b.n	80098a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009894:	6978      	ldr	r0, [r7, #20]
 8009896:	f001 fa47 	bl	800ad28 <vPortFree>
 800989a:	e001      	b.n	80098a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800989c:	2300      	movs	r3, #0
 800989e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80098a0:	69fb      	ldr	r3, [r7, #28]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d017      	beq.n	80098d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80098a6:	69fb      	ldr	r3, [r7, #28]
 80098a8:	2200      	movs	r2, #0
 80098aa:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80098ae:	88fa      	ldrh	r2, [r7, #6]
 80098b0:	2300      	movs	r3, #0
 80098b2:	9303      	str	r3, [sp, #12]
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	9302      	str	r3, [sp, #8]
 80098b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ba:	9301      	str	r3, [sp, #4]
 80098bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098be:	9300      	str	r3, [sp, #0]
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	68b9      	ldr	r1, [r7, #8]
 80098c4:	68f8      	ldr	r0, [r7, #12]
 80098c6:	f000 f80f 	bl	80098e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098ca:	69f8      	ldr	r0, [r7, #28]
 80098cc:	f000 f8ac 	bl	8009a28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80098d0:	2301      	movs	r3, #1
 80098d2:	61bb      	str	r3, [r7, #24]
 80098d4:	e002      	b.n	80098dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80098d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80098da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80098dc:	69bb      	ldr	r3, [r7, #24]
	}
 80098de:	4618      	mov	r0, r3
 80098e0:	3720      	adds	r7, #32
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
	...

080098e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b088      	sub	sp, #32
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	607a      	str	r2, [r7, #4]
 80098f4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80098f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009900:	3b01      	subs	r3, #1
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	4413      	add	r3, r2
 8009906:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	f023 0307 	bic.w	r3, r3, #7
 800990e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009910:	69bb      	ldr	r3, [r7, #24]
 8009912:	f003 0307 	and.w	r3, r3, #7
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00b      	beq.n	8009932 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800991a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800991e:	f383 8811 	msr	BASEPRI, r3
 8009922:	f3bf 8f6f 	isb	sy
 8009926:	f3bf 8f4f 	dsb	sy
 800992a:	617b      	str	r3, [r7, #20]
}
 800992c:	bf00      	nop
 800992e:	bf00      	nop
 8009930:	e7fd      	b.n	800992e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d01f      	beq.n	8009978 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009938:	2300      	movs	r3, #0
 800993a:	61fb      	str	r3, [r7, #28]
 800993c:	e012      	b.n	8009964 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800993e:	68ba      	ldr	r2, [r7, #8]
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	4413      	add	r3, r2
 8009944:	7819      	ldrb	r1, [r3, #0]
 8009946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009948:	69fb      	ldr	r3, [r7, #28]
 800994a:	4413      	add	r3, r2
 800994c:	3334      	adds	r3, #52	@ 0x34
 800994e:	460a      	mov	r2, r1
 8009950:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009952:	68ba      	ldr	r2, [r7, #8]
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	4413      	add	r3, r2
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d006      	beq.n	800996c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	3301      	adds	r3, #1
 8009962:	61fb      	str	r3, [r7, #28]
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	2b0f      	cmp	r3, #15
 8009968:	d9e9      	bls.n	800993e <prvInitialiseNewTask+0x56>
 800996a:	e000      	b.n	800996e <prvInitialiseNewTask+0x86>
			{
				break;
 800996c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800996e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009970:	2200      	movs	r2, #0
 8009972:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009976:	e003      	b.n	8009980 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800997a:	2200      	movs	r2, #0
 800997c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009982:	2b06      	cmp	r3, #6
 8009984:	d901      	bls.n	800998a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009986:	2306      	movs	r3, #6
 8009988:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800998a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800998c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800998e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009992:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009994:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009998:	2200      	movs	r2, #0
 800999a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800999c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800999e:	3304      	adds	r3, #4
 80099a0:	4618      	mov	r0, r3
 80099a2:	f7ff fb82 	bl	80090aa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80099a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a8:	3318      	adds	r3, #24
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7ff fb7d 	bl	80090aa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80099b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099b4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b8:	f1c3 0207 	rsb	r2, r3, #7
 80099bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099be:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80099c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099c4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80099c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c8:	2200      	movs	r2, #0
 80099ca:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80099ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d0:	2200      	movs	r2, #0
 80099d2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80099d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d8:	334c      	adds	r3, #76	@ 0x4c
 80099da:	224c      	movs	r2, #76	@ 0x4c
 80099dc:	2100      	movs	r1, #0
 80099de:	4618      	mov	r0, r3
 80099e0:	f001 fd88 	bl	800b4f4 <memset>
 80099e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e6:	4a0d      	ldr	r2, [pc, #52]	@ (8009a1c <prvInitialiseNewTask+0x134>)
 80099e8:	651a      	str	r2, [r3, #80]	@ 0x50
 80099ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ec:	4a0c      	ldr	r2, [pc, #48]	@ (8009a20 <prvInitialiseNewTask+0x138>)
 80099ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80099f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f2:	4a0c      	ldr	r2, [pc, #48]	@ (8009a24 <prvInitialiseNewTask+0x13c>)
 80099f4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80099f6:	683a      	ldr	r2, [r7, #0]
 80099f8:	68f9      	ldr	r1, [r7, #12]
 80099fa:	69b8      	ldr	r0, [r7, #24]
 80099fc:	f000 fe72 	bl	800a6e4 <pxPortInitialiseStack>
 8009a00:	4602      	mov	r2, r0
 8009a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d002      	beq.n	8009a12 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a12:	bf00      	nop
 8009a14:	3720      	adds	r7, #32
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	20005f4c 	.word	0x20005f4c
 8009a20:	20005fb4 	.word	0x20005fb4
 8009a24:	2000601c 	.word	0x2000601c

08009a28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a30:	f000 ff8a 	bl	800a948 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a34:	4b2a      	ldr	r3, [pc, #168]	@ (8009ae0 <prvAddNewTaskToReadyList+0xb8>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	3301      	adds	r3, #1
 8009a3a:	4a29      	ldr	r2, [pc, #164]	@ (8009ae0 <prvAddNewTaskToReadyList+0xb8>)
 8009a3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a3e:	4b29      	ldr	r3, [pc, #164]	@ (8009ae4 <prvAddNewTaskToReadyList+0xbc>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d109      	bne.n	8009a5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a46:	4a27      	ldr	r2, [pc, #156]	@ (8009ae4 <prvAddNewTaskToReadyList+0xbc>)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a4c:	4b24      	ldr	r3, [pc, #144]	@ (8009ae0 <prvAddNewTaskToReadyList+0xb8>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d110      	bne.n	8009a76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a54:	f000 fbe4 	bl	800a220 <prvInitialiseTaskLists>
 8009a58:	e00d      	b.n	8009a76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a5a:	4b23      	ldr	r3, [pc, #140]	@ (8009ae8 <prvAddNewTaskToReadyList+0xc0>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d109      	bne.n	8009a76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a62:	4b20      	ldr	r3, [pc, #128]	@ (8009ae4 <prvAddNewTaskToReadyList+0xbc>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d802      	bhi.n	8009a76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a70:	4a1c      	ldr	r2, [pc, #112]	@ (8009ae4 <prvAddNewTaskToReadyList+0xbc>)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a76:	4b1d      	ldr	r3, [pc, #116]	@ (8009aec <prvAddNewTaskToReadyList+0xc4>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8009aec <prvAddNewTaskToReadyList+0xc4>)
 8009a7e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a84:	2201      	movs	r2, #1
 8009a86:	409a      	lsls	r2, r3
 8009a88:	4b19      	ldr	r3, [pc, #100]	@ (8009af0 <prvAddNewTaskToReadyList+0xc8>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	4a18      	ldr	r2, [pc, #96]	@ (8009af0 <prvAddNewTaskToReadyList+0xc8>)
 8009a90:	6013      	str	r3, [r2, #0]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a96:	4613      	mov	r3, r2
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	4413      	add	r3, r2
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	4a15      	ldr	r2, [pc, #84]	@ (8009af4 <prvAddNewTaskToReadyList+0xcc>)
 8009aa0:	441a      	add	r2, r3
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	3304      	adds	r3, #4
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	4610      	mov	r0, r2
 8009aaa:	f7ff fb0b 	bl	80090c4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009aae:	f000 ff7d 	bl	800a9ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8009ae8 <prvAddNewTaskToReadyList+0xc0>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d00e      	beq.n	8009ad8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009aba:	4b0a      	ldr	r3, [pc, #40]	@ (8009ae4 <prvAddNewTaskToReadyList+0xbc>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d207      	bcs.n	8009ad8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8009af8 <prvAddNewTaskToReadyList+0xd0>)
 8009aca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ace:	601a      	str	r2, [r3, #0]
 8009ad0:	f3bf 8f4f 	dsb	sy
 8009ad4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ad8:	bf00      	nop
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	200010d8 	.word	0x200010d8
 8009ae4:	20000fd8 	.word	0x20000fd8
 8009ae8:	200010e4 	.word	0x200010e4
 8009aec:	200010f4 	.word	0x200010f4
 8009af0:	200010e0 	.word	0x200010e0
 8009af4:	20000fdc 	.word	0x20000fdc
 8009af8:	e000ed04 	.word	0xe000ed04

08009afc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009b04:	2300      	movs	r3, #0
 8009b06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d018      	beq.n	8009b40 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009b0e:	4b14      	ldr	r3, [pc, #80]	@ (8009b60 <vTaskDelay+0x64>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00b      	beq.n	8009b2e <vTaskDelay+0x32>
	__asm volatile
 8009b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b1a:	f383 8811 	msr	BASEPRI, r3
 8009b1e:	f3bf 8f6f 	isb	sy
 8009b22:	f3bf 8f4f 	dsb	sy
 8009b26:	60bb      	str	r3, [r7, #8]
}
 8009b28:	bf00      	nop
 8009b2a:	bf00      	nop
 8009b2c:	e7fd      	b.n	8009b2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009b2e:	f000 f885 	bl	8009c3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b32:	2100      	movs	r1, #0
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 fd6f 	bl	800a618 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b3a:	f000 f88d 	bl	8009c58 <xTaskResumeAll>
 8009b3e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d107      	bne.n	8009b56 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009b46:	4b07      	ldr	r3, [pc, #28]	@ (8009b64 <vTaskDelay+0x68>)
 8009b48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b4c:	601a      	str	r2, [r3, #0]
 8009b4e:	f3bf 8f4f 	dsb	sy
 8009b52:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b56:	bf00      	nop
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	20001100 	.word	0x20001100
 8009b64:	e000ed04 	.word	0xe000ed04

08009b68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b08a      	sub	sp, #40	@ 0x28
 8009b6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009b72:	2300      	movs	r3, #0
 8009b74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009b76:	463a      	mov	r2, r7
 8009b78:	1d39      	adds	r1, r7, #4
 8009b7a:	f107 0308 	add.w	r3, r7, #8
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7f6 fd14 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009b84:	6839      	ldr	r1, [r7, #0]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	68ba      	ldr	r2, [r7, #8]
 8009b8a:	9202      	str	r2, [sp, #8]
 8009b8c:	9301      	str	r3, [sp, #4]
 8009b8e:	2300      	movs	r3, #0
 8009b90:	9300      	str	r3, [sp, #0]
 8009b92:	2300      	movs	r3, #0
 8009b94:	460a      	mov	r2, r1
 8009b96:	4921      	ldr	r1, [pc, #132]	@ (8009c1c <vTaskStartScheduler+0xb4>)
 8009b98:	4821      	ldr	r0, [pc, #132]	@ (8009c20 <vTaskStartScheduler+0xb8>)
 8009b9a:	f7ff fdff 	bl	800979c <xTaskCreateStatic>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	4a20      	ldr	r2, [pc, #128]	@ (8009c24 <vTaskStartScheduler+0xbc>)
 8009ba2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009ba4:	4b1f      	ldr	r3, [pc, #124]	@ (8009c24 <vTaskStartScheduler+0xbc>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d002      	beq.n	8009bb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009bac:	2301      	movs	r3, #1
 8009bae:	617b      	str	r3, [r7, #20]
 8009bb0:	e001      	b.n	8009bb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d11b      	bne.n	8009bf4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8009bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc0:	f383 8811 	msr	BASEPRI, r3
 8009bc4:	f3bf 8f6f 	isb	sy
 8009bc8:	f3bf 8f4f 	dsb	sy
 8009bcc:	613b      	str	r3, [r7, #16]
}
 8009bce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009bd0:	4b15      	ldr	r3, [pc, #84]	@ (8009c28 <vTaskStartScheduler+0xc0>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	334c      	adds	r3, #76	@ 0x4c
 8009bd6:	4a15      	ldr	r2, [pc, #84]	@ (8009c2c <vTaskStartScheduler+0xc4>)
 8009bd8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009bda:	4b15      	ldr	r3, [pc, #84]	@ (8009c30 <vTaskStartScheduler+0xc8>)
 8009bdc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009be0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009be2:	4b14      	ldr	r3, [pc, #80]	@ (8009c34 <vTaskStartScheduler+0xcc>)
 8009be4:	2201      	movs	r2, #1
 8009be6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009be8:	4b13      	ldr	r3, [pc, #76]	@ (8009c38 <vTaskStartScheduler+0xd0>)
 8009bea:	2200      	movs	r2, #0
 8009bec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009bee:	f000 fe07 	bl	800a800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009bf2:	e00f      	b.n	8009c14 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009bfa:	d10b      	bne.n	8009c14 <vTaskStartScheduler+0xac>
	__asm volatile
 8009bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c00:	f383 8811 	msr	BASEPRI, r3
 8009c04:	f3bf 8f6f 	isb	sy
 8009c08:	f3bf 8f4f 	dsb	sy
 8009c0c:	60fb      	str	r3, [r7, #12]
}
 8009c0e:	bf00      	nop
 8009c10:	bf00      	nop
 8009c12:	e7fd      	b.n	8009c10 <vTaskStartScheduler+0xa8>
}
 8009c14:	bf00      	nop
 8009c16:	3718      	adds	r7, #24
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	0800c7e8 	.word	0x0800c7e8
 8009c20:	0800a1f1 	.word	0x0800a1f1
 8009c24:	200010fc 	.word	0x200010fc
 8009c28:	20000fd8 	.word	0x20000fd8
 8009c2c:	20000024 	.word	0x20000024
 8009c30:	200010f8 	.word	0x200010f8
 8009c34:	200010e4 	.word	0x200010e4
 8009c38:	200010dc 	.word	0x200010dc

08009c3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009c40:	4b04      	ldr	r3, [pc, #16]	@ (8009c54 <vTaskSuspendAll+0x18>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	3301      	adds	r3, #1
 8009c46:	4a03      	ldr	r2, [pc, #12]	@ (8009c54 <vTaskSuspendAll+0x18>)
 8009c48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009c4a:	bf00      	nop
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr
 8009c54:	20001100 	.word	0x20001100

08009c58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c62:	2300      	movs	r3, #0
 8009c64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c66:	4b42      	ldr	r3, [pc, #264]	@ (8009d70 <xTaskResumeAll+0x118>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d10b      	bne.n	8009c86 <xTaskResumeAll+0x2e>
	__asm volatile
 8009c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c72:	f383 8811 	msr	BASEPRI, r3
 8009c76:	f3bf 8f6f 	isb	sy
 8009c7a:	f3bf 8f4f 	dsb	sy
 8009c7e:	603b      	str	r3, [r7, #0]
}
 8009c80:	bf00      	nop
 8009c82:	bf00      	nop
 8009c84:	e7fd      	b.n	8009c82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009c86:	f000 fe5f 	bl	800a948 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009c8a:	4b39      	ldr	r3, [pc, #228]	@ (8009d70 <xTaskResumeAll+0x118>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	3b01      	subs	r3, #1
 8009c90:	4a37      	ldr	r2, [pc, #220]	@ (8009d70 <xTaskResumeAll+0x118>)
 8009c92:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c94:	4b36      	ldr	r3, [pc, #216]	@ (8009d70 <xTaskResumeAll+0x118>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d161      	bne.n	8009d60 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009c9c:	4b35      	ldr	r3, [pc, #212]	@ (8009d74 <xTaskResumeAll+0x11c>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d05d      	beq.n	8009d60 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ca4:	e02e      	b.n	8009d04 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ca6:	4b34      	ldr	r3, [pc, #208]	@ (8009d78 <xTaskResumeAll+0x120>)
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	3318      	adds	r3, #24
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7ff fa63 	bl	800917e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	3304      	adds	r3, #4
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f7ff fa5e 	bl	800917e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	409a      	lsls	r2, r3
 8009cca:	4b2c      	ldr	r3, [pc, #176]	@ (8009d7c <xTaskResumeAll+0x124>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	4a2a      	ldr	r2, [pc, #168]	@ (8009d7c <xTaskResumeAll+0x124>)
 8009cd2:	6013      	str	r3, [r2, #0]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cd8:	4613      	mov	r3, r2
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	4413      	add	r3, r2
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	4a27      	ldr	r2, [pc, #156]	@ (8009d80 <xTaskResumeAll+0x128>)
 8009ce2:	441a      	add	r2, r3
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	3304      	adds	r3, #4
 8009ce8:	4619      	mov	r1, r3
 8009cea:	4610      	mov	r0, r2
 8009cec:	f7ff f9ea 	bl	80090c4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cf4:	4b23      	ldr	r3, [pc, #140]	@ (8009d84 <xTaskResumeAll+0x12c>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d302      	bcc.n	8009d04 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009cfe:	4b22      	ldr	r3, [pc, #136]	@ (8009d88 <xTaskResumeAll+0x130>)
 8009d00:	2201      	movs	r2, #1
 8009d02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d04:	4b1c      	ldr	r3, [pc, #112]	@ (8009d78 <xTaskResumeAll+0x120>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d1cc      	bne.n	8009ca6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d001      	beq.n	8009d16 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d12:	f000 fb29 	bl	800a368 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009d16:	4b1d      	ldr	r3, [pc, #116]	@ (8009d8c <xTaskResumeAll+0x134>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d010      	beq.n	8009d44 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d22:	f000 f837 	bl	8009d94 <xTaskIncrementTick>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d002      	beq.n	8009d32 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009d2c:	4b16      	ldr	r3, [pc, #88]	@ (8009d88 <xTaskResumeAll+0x130>)
 8009d2e:	2201      	movs	r2, #1
 8009d30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	3b01      	subs	r3, #1
 8009d36:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d1f1      	bne.n	8009d22 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009d3e:	4b13      	ldr	r3, [pc, #76]	@ (8009d8c <xTaskResumeAll+0x134>)
 8009d40:	2200      	movs	r2, #0
 8009d42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d44:	4b10      	ldr	r3, [pc, #64]	@ (8009d88 <xTaskResumeAll+0x130>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d009      	beq.n	8009d60 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d50:	4b0f      	ldr	r3, [pc, #60]	@ (8009d90 <xTaskResumeAll+0x138>)
 8009d52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d56:	601a      	str	r2, [r3, #0]
 8009d58:	f3bf 8f4f 	dsb	sy
 8009d5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d60:	f000 fe24 	bl	800a9ac <vPortExitCritical>

	return xAlreadyYielded;
 8009d64:	68bb      	ldr	r3, [r7, #8]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	20001100 	.word	0x20001100
 8009d74:	200010d8 	.word	0x200010d8
 8009d78:	20001098 	.word	0x20001098
 8009d7c:	200010e0 	.word	0x200010e0
 8009d80:	20000fdc 	.word	0x20000fdc
 8009d84:	20000fd8 	.word	0x20000fd8
 8009d88:	200010ec 	.word	0x200010ec
 8009d8c:	200010e8 	.word	0x200010e8
 8009d90:	e000ed04 	.word	0xe000ed04

08009d94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b086      	sub	sp, #24
 8009d98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d9e:	4b4f      	ldr	r3, [pc, #316]	@ (8009edc <xTaskIncrementTick+0x148>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f040 808f 	bne.w	8009ec6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009da8:	4b4d      	ldr	r3, [pc, #308]	@ (8009ee0 <xTaskIncrementTick+0x14c>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	3301      	adds	r3, #1
 8009dae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009db0:	4a4b      	ldr	r2, [pc, #300]	@ (8009ee0 <xTaskIncrementTick+0x14c>)
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d121      	bne.n	8009e00 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009dbc:	4b49      	ldr	r3, [pc, #292]	@ (8009ee4 <xTaskIncrementTick+0x150>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00b      	beq.n	8009dde <xTaskIncrementTick+0x4a>
	__asm volatile
 8009dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dca:	f383 8811 	msr	BASEPRI, r3
 8009dce:	f3bf 8f6f 	isb	sy
 8009dd2:	f3bf 8f4f 	dsb	sy
 8009dd6:	603b      	str	r3, [r7, #0]
}
 8009dd8:	bf00      	nop
 8009dda:	bf00      	nop
 8009ddc:	e7fd      	b.n	8009dda <xTaskIncrementTick+0x46>
 8009dde:	4b41      	ldr	r3, [pc, #260]	@ (8009ee4 <xTaskIncrementTick+0x150>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	60fb      	str	r3, [r7, #12]
 8009de4:	4b40      	ldr	r3, [pc, #256]	@ (8009ee8 <xTaskIncrementTick+0x154>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a3e      	ldr	r2, [pc, #248]	@ (8009ee4 <xTaskIncrementTick+0x150>)
 8009dea:	6013      	str	r3, [r2, #0]
 8009dec:	4a3e      	ldr	r2, [pc, #248]	@ (8009ee8 <xTaskIncrementTick+0x154>)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	6013      	str	r3, [r2, #0]
 8009df2:	4b3e      	ldr	r3, [pc, #248]	@ (8009eec <xTaskIncrementTick+0x158>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	3301      	adds	r3, #1
 8009df8:	4a3c      	ldr	r2, [pc, #240]	@ (8009eec <xTaskIncrementTick+0x158>)
 8009dfa:	6013      	str	r3, [r2, #0]
 8009dfc:	f000 fab4 	bl	800a368 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e00:	4b3b      	ldr	r3, [pc, #236]	@ (8009ef0 <xTaskIncrementTick+0x15c>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	693a      	ldr	r2, [r7, #16]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d348      	bcc.n	8009e9c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e0a:	4b36      	ldr	r3, [pc, #216]	@ (8009ee4 <xTaskIncrementTick+0x150>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d104      	bne.n	8009e1e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e14:	4b36      	ldr	r3, [pc, #216]	@ (8009ef0 <xTaskIncrementTick+0x15c>)
 8009e16:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009e1a:	601a      	str	r2, [r3, #0]
					break;
 8009e1c:	e03e      	b.n	8009e9c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e1e:	4b31      	ldr	r3, [pc, #196]	@ (8009ee4 <xTaskIncrementTick+0x150>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e2e:	693a      	ldr	r2, [r7, #16]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d203      	bcs.n	8009e3e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e36:	4a2e      	ldr	r2, [pc, #184]	@ (8009ef0 <xTaskIncrementTick+0x15c>)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009e3c:	e02e      	b.n	8009e9c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	3304      	adds	r3, #4
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7ff f99b 	bl	800917e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d004      	beq.n	8009e5a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	3318      	adds	r3, #24
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7ff f992 	bl	800917e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e5e:	2201      	movs	r2, #1
 8009e60:	409a      	lsls	r2, r3
 8009e62:	4b24      	ldr	r3, [pc, #144]	@ (8009ef4 <xTaskIncrementTick+0x160>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4313      	orrs	r3, r2
 8009e68:	4a22      	ldr	r2, [pc, #136]	@ (8009ef4 <xTaskIncrementTick+0x160>)
 8009e6a:	6013      	str	r3, [r2, #0]
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e70:	4613      	mov	r3, r2
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	4413      	add	r3, r2
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	4a1f      	ldr	r2, [pc, #124]	@ (8009ef8 <xTaskIncrementTick+0x164>)
 8009e7a:	441a      	add	r2, r3
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	3304      	adds	r3, #4
 8009e80:	4619      	mov	r1, r3
 8009e82:	4610      	mov	r0, r2
 8009e84:	f7ff f91e 	bl	80090c4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8009efc <xTaskIncrementTick+0x168>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d3b9      	bcc.n	8009e0a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009e96:	2301      	movs	r3, #1
 8009e98:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e9a:	e7b6      	b.n	8009e0a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009e9c:	4b17      	ldr	r3, [pc, #92]	@ (8009efc <xTaskIncrementTick+0x168>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ea2:	4915      	ldr	r1, [pc, #84]	@ (8009ef8 <xTaskIncrementTick+0x164>)
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	4413      	add	r3, r2
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	440b      	add	r3, r1
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d901      	bls.n	8009eb8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009eb8:	4b11      	ldr	r3, [pc, #68]	@ (8009f00 <xTaskIncrementTick+0x16c>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d007      	beq.n	8009ed0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	617b      	str	r3, [r7, #20]
 8009ec4:	e004      	b.n	8009ed0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8009f04 <xTaskIncrementTick+0x170>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	3301      	adds	r3, #1
 8009ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8009f04 <xTaskIncrementTick+0x170>)
 8009ece:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009ed0:	697b      	ldr	r3, [r7, #20]
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3718      	adds	r7, #24
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	20001100 	.word	0x20001100
 8009ee0:	200010dc 	.word	0x200010dc
 8009ee4:	20001090 	.word	0x20001090
 8009ee8:	20001094 	.word	0x20001094
 8009eec:	200010f0 	.word	0x200010f0
 8009ef0:	200010f8 	.word	0x200010f8
 8009ef4:	200010e0 	.word	0x200010e0
 8009ef8:	20000fdc 	.word	0x20000fdc
 8009efc:	20000fd8 	.word	0x20000fd8
 8009f00:	200010ec 	.word	0x200010ec
 8009f04:	200010e8 	.word	0x200010e8

08009f08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b087      	sub	sp, #28
 8009f0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f0e:	4b2a      	ldr	r3, [pc, #168]	@ (8009fb8 <vTaskSwitchContext+0xb0>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d003      	beq.n	8009f1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f16:	4b29      	ldr	r3, [pc, #164]	@ (8009fbc <vTaskSwitchContext+0xb4>)
 8009f18:	2201      	movs	r2, #1
 8009f1a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f1c:	e045      	b.n	8009faa <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8009f1e:	4b27      	ldr	r3, [pc, #156]	@ (8009fbc <vTaskSwitchContext+0xb4>)
 8009f20:	2200      	movs	r2, #0
 8009f22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f24:	4b26      	ldr	r3, [pc, #152]	@ (8009fc0 <vTaskSwitchContext+0xb8>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	fab3 f383 	clz	r3, r3
 8009f30:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009f32:	7afb      	ldrb	r3, [r7, #11]
 8009f34:	f1c3 031f 	rsb	r3, r3, #31
 8009f38:	617b      	str	r3, [r7, #20]
 8009f3a:	4922      	ldr	r1, [pc, #136]	@ (8009fc4 <vTaskSwitchContext+0xbc>)
 8009f3c:	697a      	ldr	r2, [r7, #20]
 8009f3e:	4613      	mov	r3, r2
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	4413      	add	r3, r2
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	440b      	add	r3, r1
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d10b      	bne.n	8009f66 <vTaskSwitchContext+0x5e>
	__asm volatile
 8009f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f52:	f383 8811 	msr	BASEPRI, r3
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	607b      	str	r3, [r7, #4]
}
 8009f60:	bf00      	nop
 8009f62:	bf00      	nop
 8009f64:	e7fd      	b.n	8009f62 <vTaskSwitchContext+0x5a>
 8009f66:	697a      	ldr	r2, [r7, #20]
 8009f68:	4613      	mov	r3, r2
 8009f6a:	009b      	lsls	r3, r3, #2
 8009f6c:	4413      	add	r3, r2
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	4a14      	ldr	r2, [pc, #80]	@ (8009fc4 <vTaskSwitchContext+0xbc>)
 8009f72:	4413      	add	r3, r2
 8009f74:	613b      	str	r3, [r7, #16]
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	685a      	ldr	r2, [r3, #4]
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	605a      	str	r2, [r3, #4]
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	685a      	ldr	r2, [r3, #4]
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	3308      	adds	r3, #8
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d104      	bne.n	8009f96 <vTaskSwitchContext+0x8e>
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	685a      	ldr	r2, [r3, #4]
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	605a      	str	r2, [r3, #4]
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8009fc8 <vTaskSwitchContext+0xc0>)
 8009f9e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009fa0:	4b09      	ldr	r3, [pc, #36]	@ (8009fc8 <vTaskSwitchContext+0xc0>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	334c      	adds	r3, #76	@ 0x4c
 8009fa6:	4a09      	ldr	r2, [pc, #36]	@ (8009fcc <vTaskSwitchContext+0xc4>)
 8009fa8:	6013      	str	r3, [r2, #0]
}
 8009faa:	bf00      	nop
 8009fac:	371c      	adds	r7, #28
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr
 8009fb6:	bf00      	nop
 8009fb8:	20001100 	.word	0x20001100
 8009fbc:	200010ec 	.word	0x200010ec
 8009fc0:	200010e0 	.word	0x200010e0
 8009fc4:	20000fdc 	.word	0x20000fdc
 8009fc8:	20000fd8 	.word	0x20000fd8
 8009fcc:	20000024 	.word	0x20000024

08009fd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d10b      	bne.n	8009ff8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe4:	f383 8811 	msr	BASEPRI, r3
 8009fe8:	f3bf 8f6f 	isb	sy
 8009fec:	f3bf 8f4f 	dsb	sy
 8009ff0:	60fb      	str	r3, [r7, #12]
}
 8009ff2:	bf00      	nop
 8009ff4:	bf00      	nop
 8009ff6:	e7fd      	b.n	8009ff4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ff8:	4b07      	ldr	r3, [pc, #28]	@ (800a018 <vTaskPlaceOnEventList+0x48>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	3318      	adds	r3, #24
 8009ffe:	4619      	mov	r1, r3
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f7ff f883 	bl	800910c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a006:	2101      	movs	r1, #1
 800a008:	6838      	ldr	r0, [r7, #0]
 800a00a:	f000 fb05 	bl	800a618 <prvAddCurrentTaskToDelayedList>
}
 800a00e:	bf00      	nop
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	20000fd8 	.word	0x20000fd8

0800a01c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b086      	sub	sp, #24
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d10b      	bne.n	800a04a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a036:	f383 8811 	msr	BASEPRI, r3
 800a03a:	f3bf 8f6f 	isb	sy
 800a03e:	f3bf 8f4f 	dsb	sy
 800a042:	60fb      	str	r3, [r7, #12]
}
 800a044:	bf00      	nop
 800a046:	bf00      	nop
 800a048:	e7fd      	b.n	800a046 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	3318      	adds	r3, #24
 800a04e:	4618      	mov	r0, r3
 800a050:	f7ff f895 	bl	800917e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a054:	4b1d      	ldr	r3, [pc, #116]	@ (800a0cc <xTaskRemoveFromEventList+0xb0>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d11c      	bne.n	800a096 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	3304      	adds	r3, #4
 800a060:	4618      	mov	r0, r3
 800a062:	f7ff f88c 	bl	800917e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a06a:	2201      	movs	r2, #1
 800a06c:	409a      	lsls	r2, r3
 800a06e:	4b18      	ldr	r3, [pc, #96]	@ (800a0d0 <xTaskRemoveFromEventList+0xb4>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4313      	orrs	r3, r2
 800a074:	4a16      	ldr	r2, [pc, #88]	@ (800a0d0 <xTaskRemoveFromEventList+0xb4>)
 800a076:	6013      	str	r3, [r2, #0]
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a07c:	4613      	mov	r3, r2
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	4413      	add	r3, r2
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	4a13      	ldr	r2, [pc, #76]	@ (800a0d4 <xTaskRemoveFromEventList+0xb8>)
 800a086:	441a      	add	r2, r3
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	3304      	adds	r3, #4
 800a08c:	4619      	mov	r1, r3
 800a08e:	4610      	mov	r0, r2
 800a090:	f7ff f818 	bl	80090c4 <vListInsertEnd>
 800a094:	e005      	b.n	800a0a2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	3318      	adds	r3, #24
 800a09a:	4619      	mov	r1, r3
 800a09c:	480e      	ldr	r0, [pc, #56]	@ (800a0d8 <xTaskRemoveFromEventList+0xbc>)
 800a09e:	f7ff f811 	bl	80090c4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a0dc <xTaskRemoveFromEventList+0xc0>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d905      	bls.n	800a0bc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a0b4:	4b0a      	ldr	r3, [pc, #40]	@ (800a0e0 <xTaskRemoveFromEventList+0xc4>)
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	601a      	str	r2, [r3, #0]
 800a0ba:	e001      	b.n	800a0c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a0c0:	697b      	ldr	r3, [r7, #20]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3718      	adds	r7, #24
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	20001100 	.word	0x20001100
 800a0d0:	200010e0 	.word	0x200010e0
 800a0d4:	20000fdc 	.word	0x20000fdc
 800a0d8:	20001098 	.word	0x20001098
 800a0dc:	20000fd8 	.word	0x20000fd8
 800a0e0:	200010ec 	.word	0x200010ec

0800a0e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a0ec:	4b06      	ldr	r3, [pc, #24]	@ (800a108 <vTaskInternalSetTimeOutState+0x24>)
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a0f4:	4b05      	ldr	r3, [pc, #20]	@ (800a10c <vTaskInternalSetTimeOutState+0x28>)
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	605a      	str	r2, [r3, #4]
}
 800a0fc:	bf00      	nop
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr
 800a108:	200010f0 	.word	0x200010f0
 800a10c:	200010dc 	.word	0x200010dc

0800a110 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b088      	sub	sp, #32
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d10b      	bne.n	800a138 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a124:	f383 8811 	msr	BASEPRI, r3
 800a128:	f3bf 8f6f 	isb	sy
 800a12c:	f3bf 8f4f 	dsb	sy
 800a130:	613b      	str	r3, [r7, #16]
}
 800a132:	bf00      	nop
 800a134:	bf00      	nop
 800a136:	e7fd      	b.n	800a134 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d10b      	bne.n	800a156 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a142:	f383 8811 	msr	BASEPRI, r3
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	60fb      	str	r3, [r7, #12]
}
 800a150:	bf00      	nop
 800a152:	bf00      	nop
 800a154:	e7fd      	b.n	800a152 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a156:	f000 fbf7 	bl	800a948 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a15a:	4b1d      	ldr	r3, [pc, #116]	@ (800a1d0 <xTaskCheckForTimeOut+0xc0>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	69ba      	ldr	r2, [r7, #24]
 800a166:	1ad3      	subs	r3, r2, r3
 800a168:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a172:	d102      	bne.n	800a17a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a174:	2300      	movs	r3, #0
 800a176:	61fb      	str	r3, [r7, #28]
 800a178:	e023      	b.n	800a1c2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	4b15      	ldr	r3, [pc, #84]	@ (800a1d4 <xTaskCheckForTimeOut+0xc4>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	429a      	cmp	r2, r3
 800a184:	d007      	beq.n	800a196 <xTaskCheckForTimeOut+0x86>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	69ba      	ldr	r2, [r7, #24]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d302      	bcc.n	800a196 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a190:	2301      	movs	r3, #1
 800a192:	61fb      	str	r3, [r7, #28]
 800a194:	e015      	b.n	800a1c2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	697a      	ldr	r2, [r7, #20]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d20b      	bcs.n	800a1b8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	1ad2      	subs	r2, r2, r3
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f7ff ff99 	bl	800a0e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	61fb      	str	r3, [r7, #28]
 800a1b6:	e004      	b.n	800a1c2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a1be:	2301      	movs	r3, #1
 800a1c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a1c2:	f000 fbf3 	bl	800a9ac <vPortExitCritical>

	return xReturn;
 800a1c6:	69fb      	ldr	r3, [r7, #28]
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3720      	adds	r7, #32
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	200010dc 	.word	0x200010dc
 800a1d4:	200010f0 	.word	0x200010f0

0800a1d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a1d8:	b480      	push	{r7}
 800a1da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a1dc:	4b03      	ldr	r3, [pc, #12]	@ (800a1ec <vTaskMissedYield+0x14>)
 800a1de:	2201      	movs	r2, #1
 800a1e0:	601a      	str	r2, [r3, #0]
}
 800a1e2:	bf00      	nop
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr
 800a1ec:	200010ec 	.word	0x200010ec

0800a1f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a1f8:	f000 f852 	bl	800a2a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a1fc:	4b06      	ldr	r3, [pc, #24]	@ (800a218 <prvIdleTask+0x28>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	2b01      	cmp	r3, #1
 800a202:	d9f9      	bls.n	800a1f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a204:	4b05      	ldr	r3, [pc, #20]	@ (800a21c <prvIdleTask+0x2c>)
 800a206:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a20a:	601a      	str	r2, [r3, #0]
 800a20c:	f3bf 8f4f 	dsb	sy
 800a210:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a214:	e7f0      	b.n	800a1f8 <prvIdleTask+0x8>
 800a216:	bf00      	nop
 800a218:	20000fdc 	.word	0x20000fdc
 800a21c:	e000ed04 	.word	0xe000ed04

0800a220 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a226:	2300      	movs	r3, #0
 800a228:	607b      	str	r3, [r7, #4]
 800a22a:	e00c      	b.n	800a246 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	4613      	mov	r3, r2
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	4413      	add	r3, r2
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	4a12      	ldr	r2, [pc, #72]	@ (800a280 <prvInitialiseTaskLists+0x60>)
 800a238:	4413      	add	r3, r2
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fe ff15 	bl	800906a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	3301      	adds	r3, #1
 800a244:	607b      	str	r3, [r7, #4]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2b06      	cmp	r3, #6
 800a24a:	d9ef      	bls.n	800a22c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a24c:	480d      	ldr	r0, [pc, #52]	@ (800a284 <prvInitialiseTaskLists+0x64>)
 800a24e:	f7fe ff0c 	bl	800906a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a252:	480d      	ldr	r0, [pc, #52]	@ (800a288 <prvInitialiseTaskLists+0x68>)
 800a254:	f7fe ff09 	bl	800906a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a258:	480c      	ldr	r0, [pc, #48]	@ (800a28c <prvInitialiseTaskLists+0x6c>)
 800a25a:	f7fe ff06 	bl	800906a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a25e:	480c      	ldr	r0, [pc, #48]	@ (800a290 <prvInitialiseTaskLists+0x70>)
 800a260:	f7fe ff03 	bl	800906a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a264:	480b      	ldr	r0, [pc, #44]	@ (800a294 <prvInitialiseTaskLists+0x74>)
 800a266:	f7fe ff00 	bl	800906a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a26a:	4b0b      	ldr	r3, [pc, #44]	@ (800a298 <prvInitialiseTaskLists+0x78>)
 800a26c:	4a05      	ldr	r2, [pc, #20]	@ (800a284 <prvInitialiseTaskLists+0x64>)
 800a26e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a270:	4b0a      	ldr	r3, [pc, #40]	@ (800a29c <prvInitialiseTaskLists+0x7c>)
 800a272:	4a05      	ldr	r2, [pc, #20]	@ (800a288 <prvInitialiseTaskLists+0x68>)
 800a274:	601a      	str	r2, [r3, #0]
}
 800a276:	bf00      	nop
 800a278:	3708      	adds	r7, #8
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	20000fdc 	.word	0x20000fdc
 800a284:	20001068 	.word	0x20001068
 800a288:	2000107c 	.word	0x2000107c
 800a28c:	20001098 	.word	0x20001098
 800a290:	200010ac 	.word	0x200010ac
 800a294:	200010c4 	.word	0x200010c4
 800a298:	20001090 	.word	0x20001090
 800a29c:	20001094 	.word	0x20001094

0800a2a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b082      	sub	sp, #8
 800a2a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2a6:	e019      	b.n	800a2dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a2a8:	f000 fb4e 	bl	800a948 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2ac:	4b10      	ldr	r3, [pc, #64]	@ (800a2f0 <prvCheckTasksWaitingTermination+0x50>)
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	3304      	adds	r3, #4
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f7fe ff60 	bl	800917e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a2be:	4b0d      	ldr	r3, [pc, #52]	@ (800a2f4 <prvCheckTasksWaitingTermination+0x54>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	3b01      	subs	r3, #1
 800a2c4:	4a0b      	ldr	r2, [pc, #44]	@ (800a2f4 <prvCheckTasksWaitingTermination+0x54>)
 800a2c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a2c8:	4b0b      	ldr	r3, [pc, #44]	@ (800a2f8 <prvCheckTasksWaitingTermination+0x58>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	4a0a      	ldr	r2, [pc, #40]	@ (800a2f8 <prvCheckTasksWaitingTermination+0x58>)
 800a2d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a2d2:	f000 fb6b 	bl	800a9ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 f810 	bl	800a2fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2dc:	4b06      	ldr	r3, [pc, #24]	@ (800a2f8 <prvCheckTasksWaitingTermination+0x58>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d1e1      	bne.n	800a2a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a2e4:	bf00      	nop
 800a2e6:	bf00      	nop
 800a2e8:	3708      	adds	r7, #8
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	200010ac 	.word	0x200010ac
 800a2f4:	200010d8 	.word	0x200010d8
 800a2f8:	200010c0 	.word	0x200010c0

0800a2fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b084      	sub	sp, #16
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	334c      	adds	r3, #76	@ 0x4c
 800a308:	4618      	mov	r0, r3
 800a30a:	f001 f90b 	bl	800b524 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800a314:	2b00      	cmp	r3, #0
 800a316:	d108      	bne.n	800a32a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a31c:	4618      	mov	r0, r3
 800a31e:	f000 fd03 	bl	800ad28 <vPortFree>
				vPortFree( pxTCB );
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 fd00 	bl	800ad28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a328:	e019      	b.n	800a35e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800a330:	2b01      	cmp	r3, #1
 800a332:	d103      	bne.n	800a33c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 fcf7 	bl	800ad28 <vPortFree>
	}
 800a33a:	e010      	b.n	800a35e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800a342:	2b02      	cmp	r3, #2
 800a344:	d00b      	beq.n	800a35e <prvDeleteTCB+0x62>
	__asm volatile
 800a346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a34a:	f383 8811 	msr	BASEPRI, r3
 800a34e:	f3bf 8f6f 	isb	sy
 800a352:	f3bf 8f4f 	dsb	sy
 800a356:	60fb      	str	r3, [r7, #12]
}
 800a358:	bf00      	nop
 800a35a:	bf00      	nop
 800a35c:	e7fd      	b.n	800a35a <prvDeleteTCB+0x5e>
	}
 800a35e:	bf00      	nop
 800a360:	3710      	adds	r7, #16
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
	...

0800a368 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a368:	b480      	push	{r7}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a36e:	4b0c      	ldr	r3, [pc, #48]	@ (800a3a0 <prvResetNextTaskUnblockTime+0x38>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d104      	bne.n	800a382 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a378:	4b0a      	ldr	r3, [pc, #40]	@ (800a3a4 <prvResetNextTaskUnblockTime+0x3c>)
 800a37a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a37e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a380:	e008      	b.n	800a394 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a382:	4b07      	ldr	r3, [pc, #28]	@ (800a3a0 <prvResetNextTaskUnblockTime+0x38>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	4a04      	ldr	r2, [pc, #16]	@ (800a3a4 <prvResetNextTaskUnblockTime+0x3c>)
 800a392:	6013      	str	r3, [r2, #0]
}
 800a394:	bf00      	nop
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr
 800a3a0:	20001090 	.word	0x20001090
 800a3a4:	200010f8 	.word	0x200010f8

0800a3a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a3ae:	4b0b      	ldr	r3, [pc, #44]	@ (800a3dc <xTaskGetSchedulerState+0x34>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d102      	bne.n	800a3bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	607b      	str	r3, [r7, #4]
 800a3ba:	e008      	b.n	800a3ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3bc:	4b08      	ldr	r3, [pc, #32]	@ (800a3e0 <xTaskGetSchedulerState+0x38>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d102      	bne.n	800a3ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a3c4:	2302      	movs	r3, #2
 800a3c6:	607b      	str	r3, [r7, #4]
 800a3c8:	e001      	b.n	800a3ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a3ce:	687b      	ldr	r3, [r7, #4]
	}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	370c      	adds	r7, #12
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr
 800a3dc:	200010e4 	.word	0x200010e4
 800a3e0:	20001100 	.word	0x20001100

0800a3e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d05e      	beq.n	800a4b8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3fe:	4b31      	ldr	r3, [pc, #196]	@ (800a4c4 <xTaskPriorityInherit+0xe0>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a404:	429a      	cmp	r2, r3
 800a406:	d24e      	bcs.n	800a4a6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	699b      	ldr	r3, [r3, #24]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	db06      	blt.n	800a41e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a410:	4b2c      	ldr	r3, [pc, #176]	@ (800a4c4 <xTaskPriorityInherit+0xe0>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a416:	f1c3 0207 	rsb	r2, r3, #7
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	6959      	ldr	r1, [r3, #20]
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a426:	4613      	mov	r3, r2
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	4413      	add	r3, r2
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	4a26      	ldr	r2, [pc, #152]	@ (800a4c8 <xTaskPriorityInherit+0xe4>)
 800a430:	4413      	add	r3, r2
 800a432:	4299      	cmp	r1, r3
 800a434:	d12f      	bne.n	800a496 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	3304      	adds	r3, #4
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7fe fe9f 	bl	800917e <uxListRemove>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d10a      	bne.n	800a45c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a44a:	2201      	movs	r2, #1
 800a44c:	fa02 f303 	lsl.w	r3, r2, r3
 800a450:	43da      	mvns	r2, r3
 800a452:	4b1e      	ldr	r3, [pc, #120]	@ (800a4cc <xTaskPriorityInherit+0xe8>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4013      	ands	r3, r2
 800a458:	4a1c      	ldr	r2, [pc, #112]	@ (800a4cc <xTaskPriorityInherit+0xe8>)
 800a45a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a45c:	4b19      	ldr	r3, [pc, #100]	@ (800a4c4 <xTaskPriorityInherit+0xe0>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a46a:	2201      	movs	r2, #1
 800a46c:	409a      	lsls	r2, r3
 800a46e:	4b17      	ldr	r3, [pc, #92]	@ (800a4cc <xTaskPriorityInherit+0xe8>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4313      	orrs	r3, r2
 800a474:	4a15      	ldr	r2, [pc, #84]	@ (800a4cc <xTaskPriorityInherit+0xe8>)
 800a476:	6013      	str	r3, [r2, #0]
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a47c:	4613      	mov	r3, r2
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	4413      	add	r3, r2
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	4a10      	ldr	r2, [pc, #64]	@ (800a4c8 <xTaskPriorityInherit+0xe4>)
 800a486:	441a      	add	r2, r3
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	3304      	adds	r3, #4
 800a48c:	4619      	mov	r1, r3
 800a48e:	4610      	mov	r0, r2
 800a490:	f7fe fe18 	bl	80090c4 <vListInsertEnd>
 800a494:	e004      	b.n	800a4a0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a496:	4b0b      	ldr	r3, [pc, #44]	@ (800a4c4 <xTaskPriorityInherit+0xe0>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	60fb      	str	r3, [r7, #12]
 800a4a4:	e008      	b.n	800a4b8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4aa:	4b06      	ldr	r3, [pc, #24]	@ (800a4c4 <xTaskPriorityInherit+0xe0>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d201      	bcs.n	800a4b8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
	}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	20000fd8 	.word	0x20000fd8
 800a4c8:	20000fdc 	.word	0x20000fdc
 800a4cc:	200010e0 	.word	0x200010e0

0800a4d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b088      	sub	sp, #32
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d079      	beq.n	800a5dc <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d10b      	bne.n	800a508 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	60fb      	str	r3, [r7, #12]
}
 800a502:	bf00      	nop
 800a504:	bf00      	nop
 800a506:	e7fd      	b.n	800a504 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a508:	69bb      	ldr	r3, [r7, #24]
 800a50a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a50c:	683a      	ldr	r2, [r7, #0]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d902      	bls.n	800a518 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	61fb      	str	r3, [r7, #28]
 800a516:	e002      	b.n	800a51e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a518:	69bb      	ldr	r3, [r7, #24]
 800a51a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a51c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a51e:	69bb      	ldr	r3, [r7, #24]
 800a520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a522:	69fa      	ldr	r2, [r7, #28]
 800a524:	429a      	cmp	r2, r3
 800a526:	d059      	beq.n	800a5dc <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a528:	69bb      	ldr	r3, [r7, #24]
 800a52a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a52c:	697a      	ldr	r2, [r7, #20]
 800a52e:	429a      	cmp	r2, r3
 800a530:	d154      	bne.n	800a5dc <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a532:	4b2c      	ldr	r3, [pc, #176]	@ (800a5e4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	69ba      	ldr	r2, [r7, #24]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d10b      	bne.n	800a554 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a53c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a540:	f383 8811 	msr	BASEPRI, r3
 800a544:	f3bf 8f6f 	isb	sy
 800a548:	f3bf 8f4f 	dsb	sy
 800a54c:	60bb      	str	r3, [r7, #8]
}
 800a54e:	bf00      	nop
 800a550:	bf00      	nop
 800a552:	e7fd      	b.n	800a550 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a554:	69bb      	ldr	r3, [r7, #24]
 800a556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a558:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	69fa      	ldr	r2, [r7, #28]
 800a55e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	699b      	ldr	r3, [r3, #24]
 800a564:	2b00      	cmp	r3, #0
 800a566:	db04      	blt.n	800a572 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	f1c3 0207 	rsb	r2, r3, #7
 800a56e:	69bb      	ldr	r3, [r7, #24]
 800a570:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	6959      	ldr	r1, [r3, #20]
 800a576:	693a      	ldr	r2, [r7, #16]
 800a578:	4613      	mov	r3, r2
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	4413      	add	r3, r2
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	4a19      	ldr	r2, [pc, #100]	@ (800a5e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a582:	4413      	add	r3, r2
 800a584:	4299      	cmp	r1, r3
 800a586:	d129      	bne.n	800a5dc <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	3304      	adds	r3, #4
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7fe fdf6 	bl	800917e <uxListRemove>
 800a592:	4603      	mov	r3, r0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d10a      	bne.n	800a5ae <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a59c:	2201      	movs	r2, #1
 800a59e:	fa02 f303 	lsl.w	r3, r2, r3
 800a5a2:	43da      	mvns	r2, r3
 800a5a4:	4b11      	ldr	r3, [pc, #68]	@ (800a5ec <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4013      	ands	r3, r2
 800a5aa:	4a10      	ldr	r2, [pc, #64]	@ (800a5ec <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a5ac:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	409a      	lsls	r2, r3
 800a5b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a5ec <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	4a0b      	ldr	r2, [pc, #44]	@ (800a5ec <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a5be:	6013      	str	r3, [r2, #0]
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5c4:	4613      	mov	r3, r2
 800a5c6:	009b      	lsls	r3, r3, #2
 800a5c8:	4413      	add	r3, r2
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	4a06      	ldr	r2, [pc, #24]	@ (800a5e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a5ce:	441a      	add	r2, r3
 800a5d0:	69bb      	ldr	r3, [r7, #24]
 800a5d2:	3304      	adds	r3, #4
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	4610      	mov	r0, r2
 800a5d8:	f7fe fd74 	bl	80090c4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a5dc:	bf00      	nop
 800a5de:	3720      	adds	r7, #32
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	20000fd8 	.word	0x20000fd8
 800a5e8:	20000fdc 	.word	0x20000fdc
 800a5ec:	200010e0 	.word	0x200010e0

0800a5f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a5f0:	b480      	push	{r7}
 800a5f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a5f4:	4b07      	ldr	r3, [pc, #28]	@ (800a614 <pvTaskIncrementMutexHeldCount+0x24>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d004      	beq.n	800a606 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a5fc:	4b05      	ldr	r3, [pc, #20]	@ (800a614 <pvTaskIncrementMutexHeldCount+0x24>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a602:	3201      	adds	r2, #1
 800a604:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800a606:	4b03      	ldr	r3, [pc, #12]	@ (800a614 <pvTaskIncrementMutexHeldCount+0x24>)
 800a608:	681b      	ldr	r3, [r3, #0]
	}
 800a60a:	4618      	mov	r0, r3
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr
 800a614:	20000fd8 	.word	0x20000fd8

0800a618 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a622:	4b29      	ldr	r3, [pc, #164]	@ (800a6c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a628:	4b28      	ldr	r3, [pc, #160]	@ (800a6cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	3304      	adds	r3, #4
 800a62e:	4618      	mov	r0, r3
 800a630:	f7fe fda5 	bl	800917e <uxListRemove>
 800a634:	4603      	mov	r3, r0
 800a636:	2b00      	cmp	r3, #0
 800a638:	d10b      	bne.n	800a652 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a63a:	4b24      	ldr	r3, [pc, #144]	@ (800a6cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a640:	2201      	movs	r2, #1
 800a642:	fa02 f303 	lsl.w	r3, r2, r3
 800a646:	43da      	mvns	r2, r3
 800a648:	4b21      	ldr	r3, [pc, #132]	@ (800a6d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4013      	ands	r3, r2
 800a64e:	4a20      	ldr	r2, [pc, #128]	@ (800a6d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a650:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a658:	d10a      	bne.n	800a670 <prvAddCurrentTaskToDelayedList+0x58>
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d007      	beq.n	800a670 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a660:	4b1a      	ldr	r3, [pc, #104]	@ (800a6cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	3304      	adds	r3, #4
 800a666:	4619      	mov	r1, r3
 800a668:	481a      	ldr	r0, [pc, #104]	@ (800a6d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a66a:	f7fe fd2b 	bl	80090c4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a66e:	e026      	b.n	800a6be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a670:	68fa      	ldr	r2, [r7, #12]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	4413      	add	r3, r2
 800a676:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a678:	4b14      	ldr	r3, [pc, #80]	@ (800a6cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	68ba      	ldr	r2, [r7, #8]
 800a67e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a680:	68ba      	ldr	r2, [r7, #8]
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	429a      	cmp	r2, r3
 800a686:	d209      	bcs.n	800a69c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a688:	4b13      	ldr	r3, [pc, #76]	@ (800a6d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	4b0f      	ldr	r3, [pc, #60]	@ (800a6cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	3304      	adds	r3, #4
 800a692:	4619      	mov	r1, r3
 800a694:	4610      	mov	r0, r2
 800a696:	f7fe fd39 	bl	800910c <vListInsert>
}
 800a69a:	e010      	b.n	800a6be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a69c:	4b0f      	ldr	r3, [pc, #60]	@ (800a6dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800a69e:	681a      	ldr	r2, [r3, #0]
 800a6a0:	4b0a      	ldr	r3, [pc, #40]	@ (800a6cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	3304      	adds	r3, #4
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	4610      	mov	r0, r2
 800a6aa:	f7fe fd2f 	bl	800910c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a6ae:	4b0c      	ldr	r3, [pc, #48]	@ (800a6e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	68ba      	ldr	r2, [r7, #8]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d202      	bcs.n	800a6be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a6b8:	4a09      	ldr	r2, [pc, #36]	@ (800a6e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	6013      	str	r3, [r2, #0]
}
 800a6be:	bf00      	nop
 800a6c0:	3710      	adds	r7, #16
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	200010dc 	.word	0x200010dc
 800a6cc:	20000fd8 	.word	0x20000fd8
 800a6d0:	200010e0 	.word	0x200010e0
 800a6d4:	200010c4 	.word	0x200010c4
 800a6d8:	20001094 	.word	0x20001094
 800a6dc:	20001090 	.word	0x20001090
 800a6e0:	200010f8 	.word	0x200010f8

0800a6e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b085      	sub	sp, #20
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	3b04      	subs	r3, #4
 800a6f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a6fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	3b04      	subs	r3, #4
 800a702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	f023 0201 	bic.w	r2, r3, #1
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	3b04      	subs	r3, #4
 800a712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a714:	4a0c      	ldr	r2, [pc, #48]	@ (800a748 <pxPortInitialiseStack+0x64>)
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	3b14      	subs	r3, #20
 800a71e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	3b04      	subs	r3, #4
 800a72a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f06f 0202 	mvn.w	r2, #2
 800a732:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	3b20      	subs	r3, #32
 800a738:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a73a:	68fb      	ldr	r3, [r7, #12]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3714      	adds	r7, #20
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr
 800a748:	0800a74d 	.word	0x0800a74d

0800a74c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a74c:	b480      	push	{r7}
 800a74e:	b085      	sub	sp, #20
 800a750:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a752:	2300      	movs	r3, #0
 800a754:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a756:	4b13      	ldr	r3, [pc, #76]	@ (800a7a4 <prvTaskExitError+0x58>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a75e:	d00b      	beq.n	800a778 <prvTaskExitError+0x2c>
	__asm volatile
 800a760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a764:	f383 8811 	msr	BASEPRI, r3
 800a768:	f3bf 8f6f 	isb	sy
 800a76c:	f3bf 8f4f 	dsb	sy
 800a770:	60fb      	str	r3, [r7, #12]
}
 800a772:	bf00      	nop
 800a774:	bf00      	nop
 800a776:	e7fd      	b.n	800a774 <prvTaskExitError+0x28>
	__asm volatile
 800a778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a77c:	f383 8811 	msr	BASEPRI, r3
 800a780:	f3bf 8f6f 	isb	sy
 800a784:	f3bf 8f4f 	dsb	sy
 800a788:	60bb      	str	r3, [r7, #8]
}
 800a78a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a78c:	bf00      	nop
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d0fc      	beq.n	800a78e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a794:	bf00      	nop
 800a796:	bf00      	nop
 800a798:	3714      	adds	r7, #20
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr
 800a7a2:	bf00      	nop
 800a7a4:	20000014 	.word	0x20000014
	...

0800a7b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a7b0:	4b07      	ldr	r3, [pc, #28]	@ (800a7d0 <pxCurrentTCBConst2>)
 800a7b2:	6819      	ldr	r1, [r3, #0]
 800a7b4:	6808      	ldr	r0, [r1, #0]
 800a7b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ba:	f380 8809 	msr	PSP, r0
 800a7be:	f3bf 8f6f 	isb	sy
 800a7c2:	f04f 0000 	mov.w	r0, #0
 800a7c6:	f380 8811 	msr	BASEPRI, r0
 800a7ca:	4770      	bx	lr
 800a7cc:	f3af 8000 	nop.w

0800a7d0 <pxCurrentTCBConst2>:
 800a7d0:	20000fd8 	.word	0x20000fd8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a7d4:	bf00      	nop
 800a7d6:	bf00      	nop

0800a7d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a7d8:	4808      	ldr	r0, [pc, #32]	@ (800a7fc <prvPortStartFirstTask+0x24>)
 800a7da:	6800      	ldr	r0, [r0, #0]
 800a7dc:	6800      	ldr	r0, [r0, #0]
 800a7de:	f380 8808 	msr	MSP, r0
 800a7e2:	f04f 0000 	mov.w	r0, #0
 800a7e6:	f380 8814 	msr	CONTROL, r0
 800a7ea:	b662      	cpsie	i
 800a7ec:	b661      	cpsie	f
 800a7ee:	f3bf 8f4f 	dsb	sy
 800a7f2:	f3bf 8f6f 	isb	sy
 800a7f6:	df00      	svc	0
 800a7f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a7fa:	bf00      	nop
 800a7fc:	e000ed08 	.word	0xe000ed08

0800a800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b086      	sub	sp, #24
 800a804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a806:	4b47      	ldr	r3, [pc, #284]	@ (800a924 <xPortStartScheduler+0x124>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a47      	ldr	r2, [pc, #284]	@ (800a928 <xPortStartScheduler+0x128>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d10b      	bne.n	800a828 <xPortStartScheduler+0x28>
	__asm volatile
 800a810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a814:	f383 8811 	msr	BASEPRI, r3
 800a818:	f3bf 8f6f 	isb	sy
 800a81c:	f3bf 8f4f 	dsb	sy
 800a820:	613b      	str	r3, [r7, #16]
}
 800a822:	bf00      	nop
 800a824:	bf00      	nop
 800a826:	e7fd      	b.n	800a824 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a828:	4b3e      	ldr	r3, [pc, #248]	@ (800a924 <xPortStartScheduler+0x124>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a3f      	ldr	r2, [pc, #252]	@ (800a92c <xPortStartScheduler+0x12c>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d10b      	bne.n	800a84a <xPortStartScheduler+0x4a>
	__asm volatile
 800a832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a836:	f383 8811 	msr	BASEPRI, r3
 800a83a:	f3bf 8f6f 	isb	sy
 800a83e:	f3bf 8f4f 	dsb	sy
 800a842:	60fb      	str	r3, [r7, #12]
}
 800a844:	bf00      	nop
 800a846:	bf00      	nop
 800a848:	e7fd      	b.n	800a846 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a84a:	4b39      	ldr	r3, [pc, #228]	@ (800a930 <xPortStartScheduler+0x130>)
 800a84c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	b2db      	uxtb	r3, r3
 800a854:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	22ff      	movs	r2, #255	@ 0xff
 800a85a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	b2db      	uxtb	r3, r3
 800a862:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a864:	78fb      	ldrb	r3, [r7, #3]
 800a866:	b2db      	uxtb	r3, r3
 800a868:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a86c:	b2da      	uxtb	r2, r3
 800a86e:	4b31      	ldr	r3, [pc, #196]	@ (800a934 <xPortStartScheduler+0x134>)
 800a870:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a872:	4b31      	ldr	r3, [pc, #196]	@ (800a938 <xPortStartScheduler+0x138>)
 800a874:	2207      	movs	r2, #7
 800a876:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a878:	e009      	b.n	800a88e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a87a:	4b2f      	ldr	r3, [pc, #188]	@ (800a938 <xPortStartScheduler+0x138>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	3b01      	subs	r3, #1
 800a880:	4a2d      	ldr	r2, [pc, #180]	@ (800a938 <xPortStartScheduler+0x138>)
 800a882:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a884:	78fb      	ldrb	r3, [r7, #3]
 800a886:	b2db      	uxtb	r3, r3
 800a888:	005b      	lsls	r3, r3, #1
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a88e:	78fb      	ldrb	r3, [r7, #3]
 800a890:	b2db      	uxtb	r3, r3
 800a892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a896:	2b80      	cmp	r3, #128	@ 0x80
 800a898:	d0ef      	beq.n	800a87a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a89a:	4b27      	ldr	r3, [pc, #156]	@ (800a938 <xPortStartScheduler+0x138>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f1c3 0307 	rsb	r3, r3, #7
 800a8a2:	2b04      	cmp	r3, #4
 800a8a4:	d00b      	beq.n	800a8be <xPortStartScheduler+0xbe>
	__asm volatile
 800a8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8aa:	f383 8811 	msr	BASEPRI, r3
 800a8ae:	f3bf 8f6f 	isb	sy
 800a8b2:	f3bf 8f4f 	dsb	sy
 800a8b6:	60bb      	str	r3, [r7, #8]
}
 800a8b8:	bf00      	nop
 800a8ba:	bf00      	nop
 800a8bc:	e7fd      	b.n	800a8ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a8be:	4b1e      	ldr	r3, [pc, #120]	@ (800a938 <xPortStartScheduler+0x138>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	021b      	lsls	r3, r3, #8
 800a8c4:	4a1c      	ldr	r2, [pc, #112]	@ (800a938 <xPortStartScheduler+0x138>)
 800a8c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a8c8:	4b1b      	ldr	r3, [pc, #108]	@ (800a938 <xPortStartScheduler+0x138>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a8d0:	4a19      	ldr	r2, [pc, #100]	@ (800a938 <xPortStartScheduler+0x138>)
 800a8d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	b2da      	uxtb	r2, r3
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a8dc:	4b17      	ldr	r3, [pc, #92]	@ (800a93c <xPortStartScheduler+0x13c>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4a16      	ldr	r2, [pc, #88]	@ (800a93c <xPortStartScheduler+0x13c>)
 800a8e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a8e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a8e8:	4b14      	ldr	r3, [pc, #80]	@ (800a93c <xPortStartScheduler+0x13c>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4a13      	ldr	r2, [pc, #76]	@ (800a93c <xPortStartScheduler+0x13c>)
 800a8ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a8f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a8f4:	f000 f8da 	bl	800aaac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a8f8:	4b11      	ldr	r3, [pc, #68]	@ (800a940 <xPortStartScheduler+0x140>)
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a8fe:	f000 f8f9 	bl	800aaf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a902:	4b10      	ldr	r3, [pc, #64]	@ (800a944 <xPortStartScheduler+0x144>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a0f      	ldr	r2, [pc, #60]	@ (800a944 <xPortStartScheduler+0x144>)
 800a908:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a90c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a90e:	f7ff ff63 	bl	800a7d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a912:	f7ff faf9 	bl	8009f08 <vTaskSwitchContext>
	prvTaskExitError();
 800a916:	f7ff ff19 	bl	800a74c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3718      	adds	r7, #24
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	e000ed00 	.word	0xe000ed00
 800a928:	410fc271 	.word	0x410fc271
 800a92c:	410fc270 	.word	0x410fc270
 800a930:	e000e400 	.word	0xe000e400
 800a934:	20001104 	.word	0x20001104
 800a938:	20001108 	.word	0x20001108
 800a93c:	e000ed20 	.word	0xe000ed20
 800a940:	20000014 	.word	0x20000014
 800a944:	e000ef34 	.word	0xe000ef34

0800a948 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
	__asm volatile
 800a94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a952:	f383 8811 	msr	BASEPRI, r3
 800a956:	f3bf 8f6f 	isb	sy
 800a95a:	f3bf 8f4f 	dsb	sy
 800a95e:	607b      	str	r3, [r7, #4]
}
 800a960:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a962:	4b10      	ldr	r3, [pc, #64]	@ (800a9a4 <vPortEnterCritical+0x5c>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	3301      	adds	r3, #1
 800a968:	4a0e      	ldr	r2, [pc, #56]	@ (800a9a4 <vPortEnterCritical+0x5c>)
 800a96a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a96c:	4b0d      	ldr	r3, [pc, #52]	@ (800a9a4 <vPortEnterCritical+0x5c>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2b01      	cmp	r3, #1
 800a972:	d110      	bne.n	800a996 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a974:	4b0c      	ldr	r3, [pc, #48]	@ (800a9a8 <vPortEnterCritical+0x60>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d00b      	beq.n	800a996 <vPortEnterCritical+0x4e>
	__asm volatile
 800a97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a982:	f383 8811 	msr	BASEPRI, r3
 800a986:	f3bf 8f6f 	isb	sy
 800a98a:	f3bf 8f4f 	dsb	sy
 800a98e:	603b      	str	r3, [r7, #0]
}
 800a990:	bf00      	nop
 800a992:	bf00      	nop
 800a994:	e7fd      	b.n	800a992 <vPortEnterCritical+0x4a>
	}
}
 800a996:	bf00      	nop
 800a998:	370c      	adds	r7, #12
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr
 800a9a2:	bf00      	nop
 800a9a4:	20000014 	.word	0x20000014
 800a9a8:	e000ed04 	.word	0xe000ed04

0800a9ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a9b2:	4b12      	ldr	r3, [pc, #72]	@ (800a9fc <vPortExitCritical+0x50>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d10b      	bne.n	800a9d2 <vPortExitCritical+0x26>
	__asm volatile
 800a9ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9be:	f383 8811 	msr	BASEPRI, r3
 800a9c2:	f3bf 8f6f 	isb	sy
 800a9c6:	f3bf 8f4f 	dsb	sy
 800a9ca:	607b      	str	r3, [r7, #4]
}
 800a9cc:	bf00      	nop
 800a9ce:	bf00      	nop
 800a9d0:	e7fd      	b.n	800a9ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a9d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a9fc <vPortExitCritical+0x50>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	3b01      	subs	r3, #1
 800a9d8:	4a08      	ldr	r2, [pc, #32]	@ (800a9fc <vPortExitCritical+0x50>)
 800a9da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a9dc:	4b07      	ldr	r3, [pc, #28]	@ (800a9fc <vPortExitCritical+0x50>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d105      	bne.n	800a9f0 <vPortExitCritical+0x44>
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	f383 8811 	msr	BASEPRI, r3
}
 800a9ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a9f0:	bf00      	nop
 800a9f2:	370c      	adds	r7, #12
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr
 800a9fc:	20000014 	.word	0x20000014

0800aa00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa00:	f3ef 8009 	mrs	r0, PSP
 800aa04:	f3bf 8f6f 	isb	sy
 800aa08:	4b15      	ldr	r3, [pc, #84]	@ (800aa60 <pxCurrentTCBConst>)
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	f01e 0f10 	tst.w	lr, #16
 800aa10:	bf08      	it	eq
 800aa12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aa16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa1a:	6010      	str	r0, [r2, #0]
 800aa1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aa20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800aa24:	f380 8811 	msr	BASEPRI, r0
 800aa28:	f3bf 8f4f 	dsb	sy
 800aa2c:	f3bf 8f6f 	isb	sy
 800aa30:	f7ff fa6a 	bl	8009f08 <vTaskSwitchContext>
 800aa34:	f04f 0000 	mov.w	r0, #0
 800aa38:	f380 8811 	msr	BASEPRI, r0
 800aa3c:	bc09      	pop	{r0, r3}
 800aa3e:	6819      	ldr	r1, [r3, #0]
 800aa40:	6808      	ldr	r0, [r1, #0]
 800aa42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa46:	f01e 0f10 	tst.w	lr, #16
 800aa4a:	bf08      	it	eq
 800aa4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa50:	f380 8809 	msr	PSP, r0
 800aa54:	f3bf 8f6f 	isb	sy
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop
 800aa5c:	f3af 8000 	nop.w

0800aa60 <pxCurrentTCBConst>:
 800aa60:	20000fd8 	.word	0x20000fd8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aa64:	bf00      	nop
 800aa66:	bf00      	nop

0800aa68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa72:	f383 8811 	msr	BASEPRI, r3
 800aa76:	f3bf 8f6f 	isb	sy
 800aa7a:	f3bf 8f4f 	dsb	sy
 800aa7e:	607b      	str	r3, [r7, #4]
}
 800aa80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa82:	f7ff f987 	bl	8009d94 <xTaskIncrementTick>
 800aa86:	4603      	mov	r3, r0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d003      	beq.n	800aa94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa8c:	4b06      	ldr	r3, [pc, #24]	@ (800aaa8 <SysTick_Handler+0x40>)
 800aa8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa92:	601a      	str	r2, [r3, #0]
 800aa94:	2300      	movs	r3, #0
 800aa96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	f383 8811 	msr	BASEPRI, r3
}
 800aa9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aaa0:	bf00      	nop
 800aaa2:	3708      	adds	r7, #8
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}
 800aaa8:	e000ed04 	.word	0xe000ed04

0800aaac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aaac:	b480      	push	{r7}
 800aaae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aab0:	4b0b      	ldr	r3, [pc, #44]	@ (800aae0 <vPortSetupTimerInterrupt+0x34>)
 800aab2:	2200      	movs	r2, #0
 800aab4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aab6:	4b0b      	ldr	r3, [pc, #44]	@ (800aae4 <vPortSetupTimerInterrupt+0x38>)
 800aab8:	2200      	movs	r2, #0
 800aaba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aabc:	4b0a      	ldr	r3, [pc, #40]	@ (800aae8 <vPortSetupTimerInterrupt+0x3c>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a0a      	ldr	r2, [pc, #40]	@ (800aaec <vPortSetupTimerInterrupt+0x40>)
 800aac2:	fba2 2303 	umull	r2, r3, r2, r3
 800aac6:	099b      	lsrs	r3, r3, #6
 800aac8:	4a09      	ldr	r2, [pc, #36]	@ (800aaf0 <vPortSetupTimerInterrupt+0x44>)
 800aaca:	3b01      	subs	r3, #1
 800aacc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aace:	4b04      	ldr	r3, [pc, #16]	@ (800aae0 <vPortSetupTimerInterrupt+0x34>)
 800aad0:	2207      	movs	r2, #7
 800aad2:	601a      	str	r2, [r3, #0]
}
 800aad4:	bf00      	nop
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr
 800aade:	bf00      	nop
 800aae0:	e000e010 	.word	0xe000e010
 800aae4:	e000e018 	.word	0xe000e018
 800aae8:	20000000 	.word	0x20000000
 800aaec:	10624dd3 	.word	0x10624dd3
 800aaf0:	e000e014 	.word	0xe000e014

0800aaf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aaf4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ab04 <vPortEnableVFP+0x10>
 800aaf8:	6801      	ldr	r1, [r0, #0]
 800aafa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800aafe:	6001      	str	r1, [r0, #0]
 800ab00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ab02:	bf00      	nop
 800ab04:	e000ed88 	.word	0xe000ed88

0800ab08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ab08:	b480      	push	{r7}
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab0e:	f3ef 8305 	mrs	r3, IPSR
 800ab12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2b0f      	cmp	r3, #15
 800ab18:	d915      	bls.n	800ab46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab1a:	4a18      	ldr	r2, [pc, #96]	@ (800ab7c <vPortValidateInterruptPriority+0x74>)
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	4413      	add	r3, r2
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab24:	4b16      	ldr	r3, [pc, #88]	@ (800ab80 <vPortValidateInterruptPriority+0x78>)
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	7afa      	ldrb	r2, [r7, #11]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d20b      	bcs.n	800ab46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ab2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab32:	f383 8811 	msr	BASEPRI, r3
 800ab36:	f3bf 8f6f 	isb	sy
 800ab3a:	f3bf 8f4f 	dsb	sy
 800ab3e:	607b      	str	r3, [r7, #4]
}
 800ab40:	bf00      	nop
 800ab42:	bf00      	nop
 800ab44:	e7fd      	b.n	800ab42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab46:	4b0f      	ldr	r3, [pc, #60]	@ (800ab84 <vPortValidateInterruptPriority+0x7c>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ab4e:	4b0e      	ldr	r3, [pc, #56]	@ (800ab88 <vPortValidateInterruptPriority+0x80>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d90b      	bls.n	800ab6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ab56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab5a:	f383 8811 	msr	BASEPRI, r3
 800ab5e:	f3bf 8f6f 	isb	sy
 800ab62:	f3bf 8f4f 	dsb	sy
 800ab66:	603b      	str	r3, [r7, #0]
}
 800ab68:	bf00      	nop
 800ab6a:	bf00      	nop
 800ab6c:	e7fd      	b.n	800ab6a <vPortValidateInterruptPriority+0x62>
	}
 800ab6e:	bf00      	nop
 800ab70:	3714      	adds	r7, #20
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr
 800ab7a:	bf00      	nop
 800ab7c:	e000e3f0 	.word	0xe000e3f0
 800ab80:	20001104 	.word	0x20001104
 800ab84:	e000ed0c 	.word	0xe000ed0c
 800ab88:	20001108 	.word	0x20001108

0800ab8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b08a      	sub	sp, #40	@ 0x28
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ab94:	2300      	movs	r3, #0
 800ab96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ab98:	f7ff f850 	bl	8009c3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ab9c:	4b5c      	ldr	r3, [pc, #368]	@ (800ad10 <pvPortMalloc+0x184>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d101      	bne.n	800aba8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aba4:	f000 f924 	bl	800adf0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aba8:	4b5a      	ldr	r3, [pc, #360]	@ (800ad14 <pvPortMalloc+0x188>)
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	4013      	ands	r3, r2
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	f040 8095 	bne.w	800ace0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d01e      	beq.n	800abfa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800abbc:	2208      	movs	r2, #8
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	4413      	add	r3, r2
 800abc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f003 0307 	and.w	r3, r3, #7
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d015      	beq.n	800abfa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f023 0307 	bic.w	r3, r3, #7
 800abd4:	3308      	adds	r3, #8
 800abd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f003 0307 	and.w	r3, r3, #7
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d00b      	beq.n	800abfa <pvPortMalloc+0x6e>
	__asm volatile
 800abe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abe6:	f383 8811 	msr	BASEPRI, r3
 800abea:	f3bf 8f6f 	isb	sy
 800abee:	f3bf 8f4f 	dsb	sy
 800abf2:	617b      	str	r3, [r7, #20]
}
 800abf4:	bf00      	nop
 800abf6:	bf00      	nop
 800abf8:	e7fd      	b.n	800abf6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d06f      	beq.n	800ace0 <pvPortMalloc+0x154>
 800ac00:	4b45      	ldr	r3, [pc, #276]	@ (800ad18 <pvPortMalloc+0x18c>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d86a      	bhi.n	800ace0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ac0a:	4b44      	ldr	r3, [pc, #272]	@ (800ad1c <pvPortMalloc+0x190>)
 800ac0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ac0e:	4b43      	ldr	r3, [pc, #268]	@ (800ad1c <pvPortMalloc+0x190>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac14:	e004      	b.n	800ac20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ac16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d903      	bls.n	800ac32 <pvPortMalloc+0xa6>
 800ac2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d1f1      	bne.n	800ac16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ac32:	4b37      	ldr	r3, [pc, #220]	@ (800ad10 <pvPortMalloc+0x184>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d051      	beq.n	800ace0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac3c:	6a3b      	ldr	r3, [r7, #32]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	2208      	movs	r2, #8
 800ac42:	4413      	add	r3, r2
 800ac44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	6a3b      	ldr	r3, [r7, #32]
 800ac4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac50:	685a      	ldr	r2, [r3, #4]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	1ad2      	subs	r2, r2, r3
 800ac56:	2308      	movs	r3, #8
 800ac58:	005b      	lsls	r3, r3, #1
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d920      	bls.n	800aca0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	4413      	add	r3, r2
 800ac64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	f003 0307 	and.w	r3, r3, #7
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d00b      	beq.n	800ac88 <pvPortMalloc+0xfc>
	__asm volatile
 800ac70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac74:	f383 8811 	msr	BASEPRI, r3
 800ac78:	f3bf 8f6f 	isb	sy
 800ac7c:	f3bf 8f4f 	dsb	sy
 800ac80:	613b      	str	r3, [r7, #16]
}
 800ac82:	bf00      	nop
 800ac84:	bf00      	nop
 800ac86:	e7fd      	b.n	800ac84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac8a:	685a      	ldr	r2, [r3, #4]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	1ad2      	subs	r2, r2, r3
 800ac90:	69bb      	ldr	r3, [r7, #24]
 800ac92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac9a:	69b8      	ldr	r0, [r7, #24]
 800ac9c:	f000 f90a 	bl	800aeb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aca0:	4b1d      	ldr	r3, [pc, #116]	@ (800ad18 <pvPortMalloc+0x18c>)
 800aca2:	681a      	ldr	r2, [r3, #0]
 800aca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	1ad3      	subs	r3, r2, r3
 800acaa:	4a1b      	ldr	r2, [pc, #108]	@ (800ad18 <pvPortMalloc+0x18c>)
 800acac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800acae:	4b1a      	ldr	r3, [pc, #104]	@ (800ad18 <pvPortMalloc+0x18c>)
 800acb0:	681a      	ldr	r2, [r3, #0]
 800acb2:	4b1b      	ldr	r3, [pc, #108]	@ (800ad20 <pvPortMalloc+0x194>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d203      	bcs.n	800acc2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800acba:	4b17      	ldr	r3, [pc, #92]	@ (800ad18 <pvPortMalloc+0x18c>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a18      	ldr	r2, [pc, #96]	@ (800ad20 <pvPortMalloc+0x194>)
 800acc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800acc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc4:	685a      	ldr	r2, [r3, #4]
 800acc6:	4b13      	ldr	r3, [pc, #76]	@ (800ad14 <pvPortMalloc+0x188>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	431a      	orrs	r2, r3
 800accc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800acd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd2:	2200      	movs	r2, #0
 800acd4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800acd6:	4b13      	ldr	r3, [pc, #76]	@ (800ad24 <pvPortMalloc+0x198>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	3301      	adds	r3, #1
 800acdc:	4a11      	ldr	r2, [pc, #68]	@ (800ad24 <pvPortMalloc+0x198>)
 800acde:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ace0:	f7fe ffba 	bl	8009c58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	f003 0307 	and.w	r3, r3, #7
 800acea:	2b00      	cmp	r3, #0
 800acec:	d00b      	beq.n	800ad06 <pvPortMalloc+0x17a>
	__asm volatile
 800acee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acf2:	f383 8811 	msr	BASEPRI, r3
 800acf6:	f3bf 8f6f 	isb	sy
 800acfa:	f3bf 8f4f 	dsb	sy
 800acfe:	60fb      	str	r3, [r7, #12]
}
 800ad00:	bf00      	nop
 800ad02:	bf00      	nop
 800ad04:	e7fd      	b.n	800ad02 <pvPortMalloc+0x176>
	return pvReturn;
 800ad06:	69fb      	ldr	r3, [r7, #28]
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3728      	adds	r7, #40	@ 0x28
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	20005f34 	.word	0x20005f34
 800ad14:	20005f48 	.word	0x20005f48
 800ad18:	20005f38 	.word	0x20005f38
 800ad1c:	20005f2c 	.word	0x20005f2c
 800ad20:	20005f3c 	.word	0x20005f3c
 800ad24:	20005f40 	.word	0x20005f40

0800ad28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b086      	sub	sp, #24
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d04f      	beq.n	800adda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ad3a:	2308      	movs	r3, #8
 800ad3c:	425b      	negs	r3, r3
 800ad3e:	697a      	ldr	r2, [r7, #20]
 800ad40:	4413      	add	r3, r2
 800ad42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	685a      	ldr	r2, [r3, #4]
 800ad4c:	4b25      	ldr	r3, [pc, #148]	@ (800ade4 <vPortFree+0xbc>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4013      	ands	r3, r2
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d10b      	bne.n	800ad6e <vPortFree+0x46>
	__asm volatile
 800ad56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad5a:	f383 8811 	msr	BASEPRI, r3
 800ad5e:	f3bf 8f6f 	isb	sy
 800ad62:	f3bf 8f4f 	dsb	sy
 800ad66:	60fb      	str	r3, [r7, #12]
}
 800ad68:	bf00      	nop
 800ad6a:	bf00      	nop
 800ad6c:	e7fd      	b.n	800ad6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d00b      	beq.n	800ad8e <vPortFree+0x66>
	__asm volatile
 800ad76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad7a:	f383 8811 	msr	BASEPRI, r3
 800ad7e:	f3bf 8f6f 	isb	sy
 800ad82:	f3bf 8f4f 	dsb	sy
 800ad86:	60bb      	str	r3, [r7, #8]
}
 800ad88:	bf00      	nop
 800ad8a:	bf00      	nop
 800ad8c:	e7fd      	b.n	800ad8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	685a      	ldr	r2, [r3, #4]
 800ad92:	4b14      	ldr	r3, [pc, #80]	@ (800ade4 <vPortFree+0xbc>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4013      	ands	r3, r2
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d01e      	beq.n	800adda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d11a      	bne.n	800adda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	685a      	ldr	r2, [r3, #4]
 800ada8:	4b0e      	ldr	r3, [pc, #56]	@ (800ade4 <vPortFree+0xbc>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	43db      	mvns	r3, r3
 800adae:	401a      	ands	r2, r3
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800adb4:	f7fe ff42 	bl	8009c3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	685a      	ldr	r2, [r3, #4]
 800adbc:	4b0a      	ldr	r3, [pc, #40]	@ (800ade8 <vPortFree+0xc0>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4413      	add	r3, r2
 800adc2:	4a09      	ldr	r2, [pc, #36]	@ (800ade8 <vPortFree+0xc0>)
 800adc4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800adc6:	6938      	ldr	r0, [r7, #16]
 800adc8:	f000 f874 	bl	800aeb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800adcc:	4b07      	ldr	r3, [pc, #28]	@ (800adec <vPortFree+0xc4>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	3301      	adds	r3, #1
 800add2:	4a06      	ldr	r2, [pc, #24]	@ (800adec <vPortFree+0xc4>)
 800add4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800add6:	f7fe ff3f 	bl	8009c58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800adda:	bf00      	nop
 800addc:	3718      	adds	r7, #24
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	20005f48 	.word	0x20005f48
 800ade8:	20005f38 	.word	0x20005f38
 800adec:	20005f44 	.word	0x20005f44

0800adf0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800adf0:	b480      	push	{r7}
 800adf2:	b085      	sub	sp, #20
 800adf4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800adf6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800adfa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800adfc:	4b27      	ldr	r3, [pc, #156]	@ (800ae9c <prvHeapInit+0xac>)
 800adfe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f003 0307 	and.w	r3, r3, #7
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00c      	beq.n	800ae24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	3307      	adds	r3, #7
 800ae0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f023 0307 	bic.w	r3, r3, #7
 800ae16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae18:	68ba      	ldr	r2, [r7, #8]
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	1ad3      	subs	r3, r2, r3
 800ae1e:	4a1f      	ldr	r2, [pc, #124]	@ (800ae9c <prvHeapInit+0xac>)
 800ae20:	4413      	add	r3, r2
 800ae22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae28:	4a1d      	ldr	r2, [pc, #116]	@ (800aea0 <prvHeapInit+0xb0>)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae2e:	4b1c      	ldr	r3, [pc, #112]	@ (800aea0 <prvHeapInit+0xb0>)
 800ae30:	2200      	movs	r2, #0
 800ae32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	68ba      	ldr	r2, [r7, #8]
 800ae38:	4413      	add	r3, r2
 800ae3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ae3c:	2208      	movs	r2, #8
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	1a9b      	subs	r3, r3, r2
 800ae42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f023 0307 	bic.w	r3, r3, #7
 800ae4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	4a15      	ldr	r2, [pc, #84]	@ (800aea4 <prvHeapInit+0xb4>)
 800ae50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ae52:	4b14      	ldr	r3, [pc, #80]	@ (800aea4 <prvHeapInit+0xb4>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	2200      	movs	r2, #0
 800ae58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ae5a:	4b12      	ldr	r3, [pc, #72]	@ (800aea4 <prvHeapInit+0xb4>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	68fa      	ldr	r2, [r7, #12]
 800ae6a:	1ad2      	subs	r2, r2, r3
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae70:	4b0c      	ldr	r3, [pc, #48]	@ (800aea4 <prvHeapInit+0xb4>)
 800ae72:	681a      	ldr	r2, [r3, #0]
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	4a0a      	ldr	r2, [pc, #40]	@ (800aea8 <prvHeapInit+0xb8>)
 800ae7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	4a09      	ldr	r2, [pc, #36]	@ (800aeac <prvHeapInit+0xbc>)
 800ae86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae88:	4b09      	ldr	r3, [pc, #36]	@ (800aeb0 <prvHeapInit+0xc0>)
 800ae8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ae8e:	601a      	str	r2, [r3, #0]
}
 800ae90:	bf00      	nop
 800ae92:	3714      	adds	r7, #20
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr
 800ae9c:	2000110c 	.word	0x2000110c
 800aea0:	20005f2c 	.word	0x20005f2c
 800aea4:	20005f34 	.word	0x20005f34
 800aea8:	20005f3c 	.word	0x20005f3c
 800aeac:	20005f38 	.word	0x20005f38
 800aeb0:	20005f48 	.word	0x20005f48

0800aeb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b085      	sub	sp, #20
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aebc:	4b28      	ldr	r3, [pc, #160]	@ (800af60 <prvInsertBlockIntoFreeList+0xac>)
 800aebe:	60fb      	str	r3, [r7, #12]
 800aec0:	e002      	b.n	800aec8 <prvInsertBlockIntoFreeList+0x14>
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	60fb      	str	r3, [r7, #12]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	429a      	cmp	r2, r3
 800aed0:	d8f7      	bhi.n	800aec2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	68ba      	ldr	r2, [r7, #8]
 800aedc:	4413      	add	r3, r2
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d108      	bne.n	800aef6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	685a      	ldr	r2, [r3, #4]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	441a      	add	r2, r3
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	68ba      	ldr	r2, [r7, #8]
 800af00:	441a      	add	r2, r3
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	429a      	cmp	r2, r3
 800af08:	d118      	bne.n	800af3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681a      	ldr	r2, [r3, #0]
 800af0e:	4b15      	ldr	r3, [pc, #84]	@ (800af64 <prvInsertBlockIntoFreeList+0xb0>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	429a      	cmp	r2, r3
 800af14:	d00d      	beq.n	800af32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	685a      	ldr	r2, [r3, #4]
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	441a      	add	r2, r3
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	681a      	ldr	r2, [r3, #0]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	601a      	str	r2, [r3, #0]
 800af30:	e008      	b.n	800af44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af32:	4b0c      	ldr	r3, [pc, #48]	@ (800af64 <prvInsertBlockIntoFreeList+0xb0>)
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	601a      	str	r2, [r3, #0]
 800af3a:	e003      	b.n	800af44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681a      	ldr	r2, [r3, #0]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800af44:	68fa      	ldr	r2, [r7, #12]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d002      	beq.n	800af52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af52:	bf00      	nop
 800af54:	3714      	adds	r7, #20
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr
 800af5e:	bf00      	nop
 800af60:	20005f2c 	.word	0x20005f2c
 800af64:	20005f34 	.word	0x20005f34

0800af68 <atoi>:
 800af68:	220a      	movs	r2, #10
 800af6a:	2100      	movs	r1, #0
 800af6c:	f000 b87a 	b.w	800b064 <strtol>

0800af70 <_strtol_l.constprop.0>:
 800af70:	2b24      	cmp	r3, #36	@ 0x24
 800af72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af76:	4686      	mov	lr, r0
 800af78:	4690      	mov	r8, r2
 800af7a:	d801      	bhi.n	800af80 <_strtol_l.constprop.0+0x10>
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d106      	bne.n	800af8e <_strtol_l.constprop.0+0x1e>
 800af80:	f000 fb5c 	bl	800b63c <__errno>
 800af84:	2316      	movs	r3, #22
 800af86:	6003      	str	r3, [r0, #0]
 800af88:	2000      	movs	r0, #0
 800af8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af8e:	4834      	ldr	r0, [pc, #208]	@ (800b060 <_strtol_l.constprop.0+0xf0>)
 800af90:	460d      	mov	r5, r1
 800af92:	462a      	mov	r2, r5
 800af94:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af98:	5d06      	ldrb	r6, [r0, r4]
 800af9a:	f016 0608 	ands.w	r6, r6, #8
 800af9e:	d1f8      	bne.n	800af92 <_strtol_l.constprop.0+0x22>
 800afa0:	2c2d      	cmp	r4, #45	@ 0x2d
 800afa2:	d12d      	bne.n	800b000 <_strtol_l.constprop.0+0x90>
 800afa4:	782c      	ldrb	r4, [r5, #0]
 800afa6:	2601      	movs	r6, #1
 800afa8:	1c95      	adds	r5, r2, #2
 800afaa:	f033 0210 	bics.w	r2, r3, #16
 800afae:	d109      	bne.n	800afc4 <_strtol_l.constprop.0+0x54>
 800afb0:	2c30      	cmp	r4, #48	@ 0x30
 800afb2:	d12a      	bne.n	800b00a <_strtol_l.constprop.0+0x9a>
 800afb4:	782a      	ldrb	r2, [r5, #0]
 800afb6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800afba:	2a58      	cmp	r2, #88	@ 0x58
 800afbc:	d125      	bne.n	800b00a <_strtol_l.constprop.0+0x9a>
 800afbe:	786c      	ldrb	r4, [r5, #1]
 800afc0:	2310      	movs	r3, #16
 800afc2:	3502      	adds	r5, #2
 800afc4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800afc8:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800afcc:	2200      	movs	r2, #0
 800afce:	fbbc f9f3 	udiv	r9, ip, r3
 800afd2:	4610      	mov	r0, r2
 800afd4:	fb03 ca19 	mls	sl, r3, r9, ip
 800afd8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800afdc:	2f09      	cmp	r7, #9
 800afde:	d81b      	bhi.n	800b018 <_strtol_l.constprop.0+0xa8>
 800afe0:	463c      	mov	r4, r7
 800afe2:	42a3      	cmp	r3, r4
 800afe4:	dd27      	ble.n	800b036 <_strtol_l.constprop.0+0xc6>
 800afe6:	1c57      	adds	r7, r2, #1
 800afe8:	d007      	beq.n	800affa <_strtol_l.constprop.0+0x8a>
 800afea:	4581      	cmp	r9, r0
 800afec:	d320      	bcc.n	800b030 <_strtol_l.constprop.0+0xc0>
 800afee:	d101      	bne.n	800aff4 <_strtol_l.constprop.0+0x84>
 800aff0:	45a2      	cmp	sl, r4
 800aff2:	db1d      	blt.n	800b030 <_strtol_l.constprop.0+0xc0>
 800aff4:	fb00 4003 	mla	r0, r0, r3, r4
 800aff8:	2201      	movs	r2, #1
 800affa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800affe:	e7eb      	b.n	800afd8 <_strtol_l.constprop.0+0x68>
 800b000:	2c2b      	cmp	r4, #43	@ 0x2b
 800b002:	bf04      	itt	eq
 800b004:	782c      	ldrbeq	r4, [r5, #0]
 800b006:	1c95      	addeq	r5, r2, #2
 800b008:	e7cf      	b.n	800afaa <_strtol_l.constprop.0+0x3a>
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d1da      	bne.n	800afc4 <_strtol_l.constprop.0+0x54>
 800b00e:	2c30      	cmp	r4, #48	@ 0x30
 800b010:	bf0c      	ite	eq
 800b012:	2308      	moveq	r3, #8
 800b014:	230a      	movne	r3, #10
 800b016:	e7d5      	b.n	800afc4 <_strtol_l.constprop.0+0x54>
 800b018:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b01c:	2f19      	cmp	r7, #25
 800b01e:	d801      	bhi.n	800b024 <_strtol_l.constprop.0+0xb4>
 800b020:	3c37      	subs	r4, #55	@ 0x37
 800b022:	e7de      	b.n	800afe2 <_strtol_l.constprop.0+0x72>
 800b024:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b028:	2f19      	cmp	r7, #25
 800b02a:	d804      	bhi.n	800b036 <_strtol_l.constprop.0+0xc6>
 800b02c:	3c57      	subs	r4, #87	@ 0x57
 800b02e:	e7d8      	b.n	800afe2 <_strtol_l.constprop.0+0x72>
 800b030:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b034:	e7e1      	b.n	800affa <_strtol_l.constprop.0+0x8a>
 800b036:	1c53      	adds	r3, r2, #1
 800b038:	d108      	bne.n	800b04c <_strtol_l.constprop.0+0xdc>
 800b03a:	2322      	movs	r3, #34	@ 0x22
 800b03c:	f8ce 3000 	str.w	r3, [lr]
 800b040:	4660      	mov	r0, ip
 800b042:	f1b8 0f00 	cmp.w	r8, #0
 800b046:	d0a0      	beq.n	800af8a <_strtol_l.constprop.0+0x1a>
 800b048:	1e69      	subs	r1, r5, #1
 800b04a:	e006      	b.n	800b05a <_strtol_l.constprop.0+0xea>
 800b04c:	b106      	cbz	r6, 800b050 <_strtol_l.constprop.0+0xe0>
 800b04e:	4240      	negs	r0, r0
 800b050:	f1b8 0f00 	cmp.w	r8, #0
 800b054:	d099      	beq.n	800af8a <_strtol_l.constprop.0+0x1a>
 800b056:	2a00      	cmp	r2, #0
 800b058:	d1f6      	bne.n	800b048 <_strtol_l.constprop.0+0xd8>
 800b05a:	f8c8 1000 	str.w	r1, [r8]
 800b05e:	e794      	b.n	800af8a <_strtol_l.constprop.0+0x1a>
 800b060:	0800c839 	.word	0x0800c839

0800b064 <strtol>:
 800b064:	4613      	mov	r3, r2
 800b066:	460a      	mov	r2, r1
 800b068:	4601      	mov	r1, r0
 800b06a:	4802      	ldr	r0, [pc, #8]	@ (800b074 <strtol+0x10>)
 800b06c:	6800      	ldr	r0, [r0, #0]
 800b06e:	f7ff bf7f 	b.w	800af70 <_strtol_l.constprop.0>
 800b072:	bf00      	nop
 800b074:	20000024 	.word	0x20000024

0800b078 <std>:
 800b078:	2300      	movs	r3, #0
 800b07a:	b510      	push	{r4, lr}
 800b07c:	4604      	mov	r4, r0
 800b07e:	e9c0 3300 	strd	r3, r3, [r0]
 800b082:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b086:	6083      	str	r3, [r0, #8]
 800b088:	8181      	strh	r1, [r0, #12]
 800b08a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b08c:	81c2      	strh	r2, [r0, #14]
 800b08e:	6183      	str	r3, [r0, #24]
 800b090:	4619      	mov	r1, r3
 800b092:	2208      	movs	r2, #8
 800b094:	305c      	adds	r0, #92	@ 0x5c
 800b096:	f000 fa2d 	bl	800b4f4 <memset>
 800b09a:	4b0d      	ldr	r3, [pc, #52]	@ (800b0d0 <std+0x58>)
 800b09c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b09e:	4b0d      	ldr	r3, [pc, #52]	@ (800b0d4 <std+0x5c>)
 800b0a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b0a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b0d8 <std+0x60>)
 800b0a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b0a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b0dc <std+0x64>)
 800b0a8:	6323      	str	r3, [r4, #48]	@ 0x30
 800b0aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b0e0 <std+0x68>)
 800b0ac:	6224      	str	r4, [r4, #32]
 800b0ae:	429c      	cmp	r4, r3
 800b0b0:	d006      	beq.n	800b0c0 <std+0x48>
 800b0b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b0b6:	4294      	cmp	r4, r2
 800b0b8:	d002      	beq.n	800b0c0 <std+0x48>
 800b0ba:	33d0      	adds	r3, #208	@ 0xd0
 800b0bc:	429c      	cmp	r4, r3
 800b0be:	d105      	bne.n	800b0cc <std+0x54>
 800b0c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b0c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0c8:	f000 bae2 	b.w	800b690 <__retarget_lock_init_recursive>
 800b0cc:	bd10      	pop	{r4, pc}
 800b0ce:	bf00      	nop
 800b0d0:	0800b345 	.word	0x0800b345
 800b0d4:	0800b367 	.word	0x0800b367
 800b0d8:	0800b39f 	.word	0x0800b39f
 800b0dc:	0800b3c3 	.word	0x0800b3c3
 800b0e0:	20005f4c 	.word	0x20005f4c

0800b0e4 <stdio_exit_handler>:
 800b0e4:	4a02      	ldr	r2, [pc, #8]	@ (800b0f0 <stdio_exit_handler+0xc>)
 800b0e6:	4903      	ldr	r1, [pc, #12]	@ (800b0f4 <stdio_exit_handler+0x10>)
 800b0e8:	4803      	ldr	r0, [pc, #12]	@ (800b0f8 <stdio_exit_handler+0x14>)
 800b0ea:	f000 b869 	b.w	800b1c0 <_fwalk_sglue>
 800b0ee:	bf00      	nop
 800b0f0:	20000018 	.word	0x20000018
 800b0f4:	0800c1fd 	.word	0x0800c1fd
 800b0f8:	20000028 	.word	0x20000028

0800b0fc <cleanup_stdio>:
 800b0fc:	6841      	ldr	r1, [r0, #4]
 800b0fe:	4b0c      	ldr	r3, [pc, #48]	@ (800b130 <cleanup_stdio+0x34>)
 800b100:	4299      	cmp	r1, r3
 800b102:	b510      	push	{r4, lr}
 800b104:	4604      	mov	r4, r0
 800b106:	d001      	beq.n	800b10c <cleanup_stdio+0x10>
 800b108:	f001 f878 	bl	800c1fc <_fflush_r>
 800b10c:	68a1      	ldr	r1, [r4, #8]
 800b10e:	4b09      	ldr	r3, [pc, #36]	@ (800b134 <cleanup_stdio+0x38>)
 800b110:	4299      	cmp	r1, r3
 800b112:	d002      	beq.n	800b11a <cleanup_stdio+0x1e>
 800b114:	4620      	mov	r0, r4
 800b116:	f001 f871 	bl	800c1fc <_fflush_r>
 800b11a:	68e1      	ldr	r1, [r4, #12]
 800b11c:	4b06      	ldr	r3, [pc, #24]	@ (800b138 <cleanup_stdio+0x3c>)
 800b11e:	4299      	cmp	r1, r3
 800b120:	d004      	beq.n	800b12c <cleanup_stdio+0x30>
 800b122:	4620      	mov	r0, r4
 800b124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b128:	f001 b868 	b.w	800c1fc <_fflush_r>
 800b12c:	bd10      	pop	{r4, pc}
 800b12e:	bf00      	nop
 800b130:	20005f4c 	.word	0x20005f4c
 800b134:	20005fb4 	.word	0x20005fb4
 800b138:	2000601c 	.word	0x2000601c

0800b13c <global_stdio_init.part.0>:
 800b13c:	b510      	push	{r4, lr}
 800b13e:	4b0b      	ldr	r3, [pc, #44]	@ (800b16c <global_stdio_init.part.0+0x30>)
 800b140:	4c0b      	ldr	r4, [pc, #44]	@ (800b170 <global_stdio_init.part.0+0x34>)
 800b142:	4a0c      	ldr	r2, [pc, #48]	@ (800b174 <global_stdio_init.part.0+0x38>)
 800b144:	601a      	str	r2, [r3, #0]
 800b146:	4620      	mov	r0, r4
 800b148:	2200      	movs	r2, #0
 800b14a:	2104      	movs	r1, #4
 800b14c:	f7ff ff94 	bl	800b078 <std>
 800b150:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b154:	2201      	movs	r2, #1
 800b156:	2109      	movs	r1, #9
 800b158:	f7ff ff8e 	bl	800b078 <std>
 800b15c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b160:	2202      	movs	r2, #2
 800b162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b166:	2112      	movs	r1, #18
 800b168:	f7ff bf86 	b.w	800b078 <std>
 800b16c:	20006084 	.word	0x20006084
 800b170:	20005f4c 	.word	0x20005f4c
 800b174:	0800b0e5 	.word	0x0800b0e5

0800b178 <__sfp_lock_acquire>:
 800b178:	4801      	ldr	r0, [pc, #4]	@ (800b180 <__sfp_lock_acquire+0x8>)
 800b17a:	f000 ba8a 	b.w	800b692 <__retarget_lock_acquire_recursive>
 800b17e:	bf00      	nop
 800b180:	2000608d 	.word	0x2000608d

0800b184 <__sfp_lock_release>:
 800b184:	4801      	ldr	r0, [pc, #4]	@ (800b18c <__sfp_lock_release+0x8>)
 800b186:	f000 ba85 	b.w	800b694 <__retarget_lock_release_recursive>
 800b18a:	bf00      	nop
 800b18c:	2000608d 	.word	0x2000608d

0800b190 <__sinit>:
 800b190:	b510      	push	{r4, lr}
 800b192:	4604      	mov	r4, r0
 800b194:	f7ff fff0 	bl	800b178 <__sfp_lock_acquire>
 800b198:	6a23      	ldr	r3, [r4, #32]
 800b19a:	b11b      	cbz	r3, 800b1a4 <__sinit+0x14>
 800b19c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1a0:	f7ff bff0 	b.w	800b184 <__sfp_lock_release>
 800b1a4:	4b04      	ldr	r3, [pc, #16]	@ (800b1b8 <__sinit+0x28>)
 800b1a6:	6223      	str	r3, [r4, #32]
 800b1a8:	4b04      	ldr	r3, [pc, #16]	@ (800b1bc <__sinit+0x2c>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d1f5      	bne.n	800b19c <__sinit+0xc>
 800b1b0:	f7ff ffc4 	bl	800b13c <global_stdio_init.part.0>
 800b1b4:	e7f2      	b.n	800b19c <__sinit+0xc>
 800b1b6:	bf00      	nop
 800b1b8:	0800b0fd 	.word	0x0800b0fd
 800b1bc:	20006084 	.word	0x20006084

0800b1c0 <_fwalk_sglue>:
 800b1c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1c4:	4607      	mov	r7, r0
 800b1c6:	4688      	mov	r8, r1
 800b1c8:	4614      	mov	r4, r2
 800b1ca:	2600      	movs	r6, #0
 800b1cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b1d0:	f1b9 0901 	subs.w	r9, r9, #1
 800b1d4:	d505      	bpl.n	800b1e2 <_fwalk_sglue+0x22>
 800b1d6:	6824      	ldr	r4, [r4, #0]
 800b1d8:	2c00      	cmp	r4, #0
 800b1da:	d1f7      	bne.n	800b1cc <_fwalk_sglue+0xc>
 800b1dc:	4630      	mov	r0, r6
 800b1de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1e2:	89ab      	ldrh	r3, [r5, #12]
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d907      	bls.n	800b1f8 <_fwalk_sglue+0x38>
 800b1e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	d003      	beq.n	800b1f8 <_fwalk_sglue+0x38>
 800b1f0:	4629      	mov	r1, r5
 800b1f2:	4638      	mov	r0, r7
 800b1f4:	47c0      	blx	r8
 800b1f6:	4306      	orrs	r6, r0
 800b1f8:	3568      	adds	r5, #104	@ 0x68
 800b1fa:	e7e9      	b.n	800b1d0 <_fwalk_sglue+0x10>

0800b1fc <iprintf>:
 800b1fc:	b40f      	push	{r0, r1, r2, r3}
 800b1fe:	b507      	push	{r0, r1, r2, lr}
 800b200:	4906      	ldr	r1, [pc, #24]	@ (800b21c <iprintf+0x20>)
 800b202:	ab04      	add	r3, sp, #16
 800b204:	6808      	ldr	r0, [r1, #0]
 800b206:	f853 2b04 	ldr.w	r2, [r3], #4
 800b20a:	6881      	ldr	r1, [r0, #8]
 800b20c:	9301      	str	r3, [sp, #4]
 800b20e:	f000 fccb 	bl	800bba8 <_vfiprintf_r>
 800b212:	b003      	add	sp, #12
 800b214:	f85d eb04 	ldr.w	lr, [sp], #4
 800b218:	b004      	add	sp, #16
 800b21a:	4770      	bx	lr
 800b21c:	20000024 	.word	0x20000024

0800b220 <_puts_r>:
 800b220:	6a03      	ldr	r3, [r0, #32]
 800b222:	b570      	push	{r4, r5, r6, lr}
 800b224:	6884      	ldr	r4, [r0, #8]
 800b226:	4605      	mov	r5, r0
 800b228:	460e      	mov	r6, r1
 800b22a:	b90b      	cbnz	r3, 800b230 <_puts_r+0x10>
 800b22c:	f7ff ffb0 	bl	800b190 <__sinit>
 800b230:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b232:	07db      	lsls	r3, r3, #31
 800b234:	d405      	bmi.n	800b242 <_puts_r+0x22>
 800b236:	89a3      	ldrh	r3, [r4, #12]
 800b238:	0598      	lsls	r0, r3, #22
 800b23a:	d402      	bmi.n	800b242 <_puts_r+0x22>
 800b23c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b23e:	f000 fa28 	bl	800b692 <__retarget_lock_acquire_recursive>
 800b242:	89a3      	ldrh	r3, [r4, #12]
 800b244:	0719      	lsls	r1, r3, #28
 800b246:	d502      	bpl.n	800b24e <_puts_r+0x2e>
 800b248:	6923      	ldr	r3, [r4, #16]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d135      	bne.n	800b2ba <_puts_r+0x9a>
 800b24e:	4621      	mov	r1, r4
 800b250:	4628      	mov	r0, r5
 800b252:	f000 f8f9 	bl	800b448 <__swsetup_r>
 800b256:	b380      	cbz	r0, 800b2ba <_puts_r+0x9a>
 800b258:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b25c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b25e:	07da      	lsls	r2, r3, #31
 800b260:	d405      	bmi.n	800b26e <_puts_r+0x4e>
 800b262:	89a3      	ldrh	r3, [r4, #12]
 800b264:	059b      	lsls	r3, r3, #22
 800b266:	d402      	bmi.n	800b26e <_puts_r+0x4e>
 800b268:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b26a:	f000 fa13 	bl	800b694 <__retarget_lock_release_recursive>
 800b26e:	4628      	mov	r0, r5
 800b270:	bd70      	pop	{r4, r5, r6, pc}
 800b272:	2b00      	cmp	r3, #0
 800b274:	da04      	bge.n	800b280 <_puts_r+0x60>
 800b276:	69a2      	ldr	r2, [r4, #24]
 800b278:	429a      	cmp	r2, r3
 800b27a:	dc17      	bgt.n	800b2ac <_puts_r+0x8c>
 800b27c:	290a      	cmp	r1, #10
 800b27e:	d015      	beq.n	800b2ac <_puts_r+0x8c>
 800b280:	6823      	ldr	r3, [r4, #0]
 800b282:	1c5a      	adds	r2, r3, #1
 800b284:	6022      	str	r2, [r4, #0]
 800b286:	7019      	strb	r1, [r3, #0]
 800b288:	68a3      	ldr	r3, [r4, #8]
 800b28a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b28e:	3b01      	subs	r3, #1
 800b290:	60a3      	str	r3, [r4, #8]
 800b292:	2900      	cmp	r1, #0
 800b294:	d1ed      	bne.n	800b272 <_puts_r+0x52>
 800b296:	2b00      	cmp	r3, #0
 800b298:	da11      	bge.n	800b2be <_puts_r+0x9e>
 800b29a:	4622      	mov	r2, r4
 800b29c:	210a      	movs	r1, #10
 800b29e:	4628      	mov	r0, r5
 800b2a0:	f000 f893 	bl	800b3ca <__swbuf_r>
 800b2a4:	3001      	adds	r0, #1
 800b2a6:	d0d7      	beq.n	800b258 <_puts_r+0x38>
 800b2a8:	250a      	movs	r5, #10
 800b2aa:	e7d7      	b.n	800b25c <_puts_r+0x3c>
 800b2ac:	4622      	mov	r2, r4
 800b2ae:	4628      	mov	r0, r5
 800b2b0:	f000 f88b 	bl	800b3ca <__swbuf_r>
 800b2b4:	3001      	adds	r0, #1
 800b2b6:	d1e7      	bne.n	800b288 <_puts_r+0x68>
 800b2b8:	e7ce      	b.n	800b258 <_puts_r+0x38>
 800b2ba:	3e01      	subs	r6, #1
 800b2bc:	e7e4      	b.n	800b288 <_puts_r+0x68>
 800b2be:	6823      	ldr	r3, [r4, #0]
 800b2c0:	1c5a      	adds	r2, r3, #1
 800b2c2:	6022      	str	r2, [r4, #0]
 800b2c4:	220a      	movs	r2, #10
 800b2c6:	701a      	strb	r2, [r3, #0]
 800b2c8:	e7ee      	b.n	800b2a8 <_puts_r+0x88>
	...

0800b2cc <puts>:
 800b2cc:	4b02      	ldr	r3, [pc, #8]	@ (800b2d8 <puts+0xc>)
 800b2ce:	4601      	mov	r1, r0
 800b2d0:	6818      	ldr	r0, [r3, #0]
 800b2d2:	f7ff bfa5 	b.w	800b220 <_puts_r>
 800b2d6:	bf00      	nop
 800b2d8:	20000024 	.word	0x20000024

0800b2dc <sniprintf>:
 800b2dc:	b40c      	push	{r2, r3}
 800b2de:	b530      	push	{r4, r5, lr}
 800b2e0:	4b17      	ldr	r3, [pc, #92]	@ (800b340 <sniprintf+0x64>)
 800b2e2:	1e0c      	subs	r4, r1, #0
 800b2e4:	681d      	ldr	r5, [r3, #0]
 800b2e6:	b09d      	sub	sp, #116	@ 0x74
 800b2e8:	da08      	bge.n	800b2fc <sniprintf+0x20>
 800b2ea:	238b      	movs	r3, #139	@ 0x8b
 800b2ec:	602b      	str	r3, [r5, #0]
 800b2ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b2f2:	b01d      	add	sp, #116	@ 0x74
 800b2f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2f8:	b002      	add	sp, #8
 800b2fa:	4770      	bx	lr
 800b2fc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b300:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b304:	bf14      	ite	ne
 800b306:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800b30a:	4623      	moveq	r3, r4
 800b30c:	9304      	str	r3, [sp, #16]
 800b30e:	9307      	str	r3, [sp, #28]
 800b310:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b314:	9002      	str	r0, [sp, #8]
 800b316:	9006      	str	r0, [sp, #24]
 800b318:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b31c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b31e:	ab21      	add	r3, sp, #132	@ 0x84
 800b320:	a902      	add	r1, sp, #8
 800b322:	4628      	mov	r0, r5
 800b324:	9301      	str	r3, [sp, #4]
 800b326:	f000 fb19 	bl	800b95c <_svfiprintf_r>
 800b32a:	1c43      	adds	r3, r0, #1
 800b32c:	bfbc      	itt	lt
 800b32e:	238b      	movlt	r3, #139	@ 0x8b
 800b330:	602b      	strlt	r3, [r5, #0]
 800b332:	2c00      	cmp	r4, #0
 800b334:	d0dd      	beq.n	800b2f2 <sniprintf+0x16>
 800b336:	9b02      	ldr	r3, [sp, #8]
 800b338:	2200      	movs	r2, #0
 800b33a:	701a      	strb	r2, [r3, #0]
 800b33c:	e7d9      	b.n	800b2f2 <sniprintf+0x16>
 800b33e:	bf00      	nop
 800b340:	20000024 	.word	0x20000024

0800b344 <__sread>:
 800b344:	b510      	push	{r4, lr}
 800b346:	460c      	mov	r4, r1
 800b348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b34c:	f000 f952 	bl	800b5f4 <_read_r>
 800b350:	2800      	cmp	r0, #0
 800b352:	bfab      	itete	ge
 800b354:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b356:	89a3      	ldrhlt	r3, [r4, #12]
 800b358:	181b      	addge	r3, r3, r0
 800b35a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b35e:	bfac      	ite	ge
 800b360:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b362:	81a3      	strhlt	r3, [r4, #12]
 800b364:	bd10      	pop	{r4, pc}

0800b366 <__swrite>:
 800b366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b36a:	461f      	mov	r7, r3
 800b36c:	898b      	ldrh	r3, [r1, #12]
 800b36e:	05db      	lsls	r3, r3, #23
 800b370:	4605      	mov	r5, r0
 800b372:	460c      	mov	r4, r1
 800b374:	4616      	mov	r6, r2
 800b376:	d505      	bpl.n	800b384 <__swrite+0x1e>
 800b378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b37c:	2302      	movs	r3, #2
 800b37e:	2200      	movs	r2, #0
 800b380:	f000 f926 	bl	800b5d0 <_lseek_r>
 800b384:	89a3      	ldrh	r3, [r4, #12]
 800b386:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b38a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b38e:	81a3      	strh	r3, [r4, #12]
 800b390:	4632      	mov	r2, r6
 800b392:	463b      	mov	r3, r7
 800b394:	4628      	mov	r0, r5
 800b396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b39a:	f000 b93d 	b.w	800b618 <_write_r>

0800b39e <__sseek>:
 800b39e:	b510      	push	{r4, lr}
 800b3a0:	460c      	mov	r4, r1
 800b3a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3a6:	f000 f913 	bl	800b5d0 <_lseek_r>
 800b3aa:	1c43      	adds	r3, r0, #1
 800b3ac:	89a3      	ldrh	r3, [r4, #12]
 800b3ae:	bf15      	itete	ne
 800b3b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b3b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b3b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b3ba:	81a3      	strheq	r3, [r4, #12]
 800b3bc:	bf18      	it	ne
 800b3be:	81a3      	strhne	r3, [r4, #12]
 800b3c0:	bd10      	pop	{r4, pc}

0800b3c2 <__sclose>:
 800b3c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3c6:	f000 b89d 	b.w	800b504 <_close_r>

0800b3ca <__swbuf_r>:
 800b3ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3cc:	460e      	mov	r6, r1
 800b3ce:	4614      	mov	r4, r2
 800b3d0:	4605      	mov	r5, r0
 800b3d2:	b118      	cbz	r0, 800b3dc <__swbuf_r+0x12>
 800b3d4:	6a03      	ldr	r3, [r0, #32]
 800b3d6:	b90b      	cbnz	r3, 800b3dc <__swbuf_r+0x12>
 800b3d8:	f7ff feda 	bl	800b190 <__sinit>
 800b3dc:	69a3      	ldr	r3, [r4, #24]
 800b3de:	60a3      	str	r3, [r4, #8]
 800b3e0:	89a3      	ldrh	r3, [r4, #12]
 800b3e2:	071a      	lsls	r2, r3, #28
 800b3e4:	d501      	bpl.n	800b3ea <__swbuf_r+0x20>
 800b3e6:	6923      	ldr	r3, [r4, #16]
 800b3e8:	b943      	cbnz	r3, 800b3fc <__swbuf_r+0x32>
 800b3ea:	4621      	mov	r1, r4
 800b3ec:	4628      	mov	r0, r5
 800b3ee:	f000 f82b 	bl	800b448 <__swsetup_r>
 800b3f2:	b118      	cbz	r0, 800b3fc <__swbuf_r+0x32>
 800b3f4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b3f8:	4638      	mov	r0, r7
 800b3fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3fc:	6823      	ldr	r3, [r4, #0]
 800b3fe:	6922      	ldr	r2, [r4, #16]
 800b400:	1a98      	subs	r0, r3, r2
 800b402:	6963      	ldr	r3, [r4, #20]
 800b404:	b2f6      	uxtb	r6, r6
 800b406:	4283      	cmp	r3, r0
 800b408:	4637      	mov	r7, r6
 800b40a:	dc05      	bgt.n	800b418 <__swbuf_r+0x4e>
 800b40c:	4621      	mov	r1, r4
 800b40e:	4628      	mov	r0, r5
 800b410:	f000 fef4 	bl	800c1fc <_fflush_r>
 800b414:	2800      	cmp	r0, #0
 800b416:	d1ed      	bne.n	800b3f4 <__swbuf_r+0x2a>
 800b418:	68a3      	ldr	r3, [r4, #8]
 800b41a:	3b01      	subs	r3, #1
 800b41c:	60a3      	str	r3, [r4, #8]
 800b41e:	6823      	ldr	r3, [r4, #0]
 800b420:	1c5a      	adds	r2, r3, #1
 800b422:	6022      	str	r2, [r4, #0]
 800b424:	701e      	strb	r6, [r3, #0]
 800b426:	6962      	ldr	r2, [r4, #20]
 800b428:	1c43      	adds	r3, r0, #1
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d004      	beq.n	800b438 <__swbuf_r+0x6e>
 800b42e:	89a3      	ldrh	r3, [r4, #12]
 800b430:	07db      	lsls	r3, r3, #31
 800b432:	d5e1      	bpl.n	800b3f8 <__swbuf_r+0x2e>
 800b434:	2e0a      	cmp	r6, #10
 800b436:	d1df      	bne.n	800b3f8 <__swbuf_r+0x2e>
 800b438:	4621      	mov	r1, r4
 800b43a:	4628      	mov	r0, r5
 800b43c:	f000 fede 	bl	800c1fc <_fflush_r>
 800b440:	2800      	cmp	r0, #0
 800b442:	d0d9      	beq.n	800b3f8 <__swbuf_r+0x2e>
 800b444:	e7d6      	b.n	800b3f4 <__swbuf_r+0x2a>
	...

0800b448 <__swsetup_r>:
 800b448:	b538      	push	{r3, r4, r5, lr}
 800b44a:	4b29      	ldr	r3, [pc, #164]	@ (800b4f0 <__swsetup_r+0xa8>)
 800b44c:	4605      	mov	r5, r0
 800b44e:	6818      	ldr	r0, [r3, #0]
 800b450:	460c      	mov	r4, r1
 800b452:	b118      	cbz	r0, 800b45c <__swsetup_r+0x14>
 800b454:	6a03      	ldr	r3, [r0, #32]
 800b456:	b90b      	cbnz	r3, 800b45c <__swsetup_r+0x14>
 800b458:	f7ff fe9a 	bl	800b190 <__sinit>
 800b45c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b460:	0719      	lsls	r1, r3, #28
 800b462:	d422      	bmi.n	800b4aa <__swsetup_r+0x62>
 800b464:	06da      	lsls	r2, r3, #27
 800b466:	d407      	bmi.n	800b478 <__swsetup_r+0x30>
 800b468:	2209      	movs	r2, #9
 800b46a:	602a      	str	r2, [r5, #0]
 800b46c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b470:	81a3      	strh	r3, [r4, #12]
 800b472:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b476:	e033      	b.n	800b4e0 <__swsetup_r+0x98>
 800b478:	0758      	lsls	r0, r3, #29
 800b47a:	d512      	bpl.n	800b4a2 <__swsetup_r+0x5a>
 800b47c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b47e:	b141      	cbz	r1, 800b492 <__swsetup_r+0x4a>
 800b480:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b484:	4299      	cmp	r1, r3
 800b486:	d002      	beq.n	800b48e <__swsetup_r+0x46>
 800b488:	4628      	mov	r0, r5
 800b48a:	f000 f913 	bl	800b6b4 <_free_r>
 800b48e:	2300      	movs	r3, #0
 800b490:	6363      	str	r3, [r4, #52]	@ 0x34
 800b492:	89a3      	ldrh	r3, [r4, #12]
 800b494:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b498:	81a3      	strh	r3, [r4, #12]
 800b49a:	2300      	movs	r3, #0
 800b49c:	6063      	str	r3, [r4, #4]
 800b49e:	6923      	ldr	r3, [r4, #16]
 800b4a0:	6023      	str	r3, [r4, #0]
 800b4a2:	89a3      	ldrh	r3, [r4, #12]
 800b4a4:	f043 0308 	orr.w	r3, r3, #8
 800b4a8:	81a3      	strh	r3, [r4, #12]
 800b4aa:	6923      	ldr	r3, [r4, #16]
 800b4ac:	b94b      	cbnz	r3, 800b4c2 <__swsetup_r+0x7a>
 800b4ae:	89a3      	ldrh	r3, [r4, #12]
 800b4b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b4b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4b8:	d003      	beq.n	800b4c2 <__swsetup_r+0x7a>
 800b4ba:	4621      	mov	r1, r4
 800b4bc:	4628      	mov	r0, r5
 800b4be:	f000 feeb 	bl	800c298 <__smakebuf_r>
 800b4c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4c6:	f013 0201 	ands.w	r2, r3, #1
 800b4ca:	d00a      	beq.n	800b4e2 <__swsetup_r+0x9a>
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	60a2      	str	r2, [r4, #8]
 800b4d0:	6962      	ldr	r2, [r4, #20]
 800b4d2:	4252      	negs	r2, r2
 800b4d4:	61a2      	str	r2, [r4, #24]
 800b4d6:	6922      	ldr	r2, [r4, #16]
 800b4d8:	b942      	cbnz	r2, 800b4ec <__swsetup_r+0xa4>
 800b4da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b4de:	d1c5      	bne.n	800b46c <__swsetup_r+0x24>
 800b4e0:	bd38      	pop	{r3, r4, r5, pc}
 800b4e2:	0799      	lsls	r1, r3, #30
 800b4e4:	bf58      	it	pl
 800b4e6:	6962      	ldrpl	r2, [r4, #20]
 800b4e8:	60a2      	str	r2, [r4, #8]
 800b4ea:	e7f4      	b.n	800b4d6 <__swsetup_r+0x8e>
 800b4ec:	2000      	movs	r0, #0
 800b4ee:	e7f7      	b.n	800b4e0 <__swsetup_r+0x98>
 800b4f0:	20000024 	.word	0x20000024

0800b4f4 <memset>:
 800b4f4:	4402      	add	r2, r0
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d100      	bne.n	800b4fe <memset+0xa>
 800b4fc:	4770      	bx	lr
 800b4fe:	f803 1b01 	strb.w	r1, [r3], #1
 800b502:	e7f9      	b.n	800b4f8 <memset+0x4>

0800b504 <_close_r>:
 800b504:	b538      	push	{r3, r4, r5, lr}
 800b506:	4d06      	ldr	r5, [pc, #24]	@ (800b520 <_close_r+0x1c>)
 800b508:	2300      	movs	r3, #0
 800b50a:	4604      	mov	r4, r0
 800b50c:	4608      	mov	r0, r1
 800b50e:	602b      	str	r3, [r5, #0]
 800b510:	f7f5 ff0b 	bl	800132a <_close>
 800b514:	1c43      	adds	r3, r0, #1
 800b516:	d102      	bne.n	800b51e <_close_r+0x1a>
 800b518:	682b      	ldr	r3, [r5, #0]
 800b51a:	b103      	cbz	r3, 800b51e <_close_r+0x1a>
 800b51c:	6023      	str	r3, [r4, #0]
 800b51e:	bd38      	pop	{r3, r4, r5, pc}
 800b520:	20006088 	.word	0x20006088

0800b524 <_reclaim_reent>:
 800b524:	4b29      	ldr	r3, [pc, #164]	@ (800b5cc <_reclaim_reent+0xa8>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4283      	cmp	r3, r0
 800b52a:	b570      	push	{r4, r5, r6, lr}
 800b52c:	4604      	mov	r4, r0
 800b52e:	d04b      	beq.n	800b5c8 <_reclaim_reent+0xa4>
 800b530:	69c3      	ldr	r3, [r0, #28]
 800b532:	b1ab      	cbz	r3, 800b560 <_reclaim_reent+0x3c>
 800b534:	68db      	ldr	r3, [r3, #12]
 800b536:	b16b      	cbz	r3, 800b554 <_reclaim_reent+0x30>
 800b538:	2500      	movs	r5, #0
 800b53a:	69e3      	ldr	r3, [r4, #28]
 800b53c:	68db      	ldr	r3, [r3, #12]
 800b53e:	5959      	ldr	r1, [r3, r5]
 800b540:	2900      	cmp	r1, #0
 800b542:	d13b      	bne.n	800b5bc <_reclaim_reent+0x98>
 800b544:	3504      	adds	r5, #4
 800b546:	2d80      	cmp	r5, #128	@ 0x80
 800b548:	d1f7      	bne.n	800b53a <_reclaim_reent+0x16>
 800b54a:	69e3      	ldr	r3, [r4, #28]
 800b54c:	4620      	mov	r0, r4
 800b54e:	68d9      	ldr	r1, [r3, #12]
 800b550:	f000 f8b0 	bl	800b6b4 <_free_r>
 800b554:	69e3      	ldr	r3, [r4, #28]
 800b556:	6819      	ldr	r1, [r3, #0]
 800b558:	b111      	cbz	r1, 800b560 <_reclaim_reent+0x3c>
 800b55a:	4620      	mov	r0, r4
 800b55c:	f000 f8aa 	bl	800b6b4 <_free_r>
 800b560:	6961      	ldr	r1, [r4, #20]
 800b562:	b111      	cbz	r1, 800b56a <_reclaim_reent+0x46>
 800b564:	4620      	mov	r0, r4
 800b566:	f000 f8a5 	bl	800b6b4 <_free_r>
 800b56a:	69e1      	ldr	r1, [r4, #28]
 800b56c:	b111      	cbz	r1, 800b574 <_reclaim_reent+0x50>
 800b56e:	4620      	mov	r0, r4
 800b570:	f000 f8a0 	bl	800b6b4 <_free_r>
 800b574:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b576:	b111      	cbz	r1, 800b57e <_reclaim_reent+0x5a>
 800b578:	4620      	mov	r0, r4
 800b57a:	f000 f89b 	bl	800b6b4 <_free_r>
 800b57e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b580:	b111      	cbz	r1, 800b588 <_reclaim_reent+0x64>
 800b582:	4620      	mov	r0, r4
 800b584:	f000 f896 	bl	800b6b4 <_free_r>
 800b588:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b58a:	b111      	cbz	r1, 800b592 <_reclaim_reent+0x6e>
 800b58c:	4620      	mov	r0, r4
 800b58e:	f000 f891 	bl	800b6b4 <_free_r>
 800b592:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b594:	b111      	cbz	r1, 800b59c <_reclaim_reent+0x78>
 800b596:	4620      	mov	r0, r4
 800b598:	f000 f88c 	bl	800b6b4 <_free_r>
 800b59c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b59e:	b111      	cbz	r1, 800b5a6 <_reclaim_reent+0x82>
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	f000 f887 	bl	800b6b4 <_free_r>
 800b5a6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b5a8:	b111      	cbz	r1, 800b5b0 <_reclaim_reent+0x8c>
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	f000 f882 	bl	800b6b4 <_free_r>
 800b5b0:	6a23      	ldr	r3, [r4, #32]
 800b5b2:	b14b      	cbz	r3, 800b5c8 <_reclaim_reent+0xa4>
 800b5b4:	4620      	mov	r0, r4
 800b5b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b5ba:	4718      	bx	r3
 800b5bc:	680e      	ldr	r6, [r1, #0]
 800b5be:	4620      	mov	r0, r4
 800b5c0:	f000 f878 	bl	800b6b4 <_free_r>
 800b5c4:	4631      	mov	r1, r6
 800b5c6:	e7bb      	b.n	800b540 <_reclaim_reent+0x1c>
 800b5c8:	bd70      	pop	{r4, r5, r6, pc}
 800b5ca:	bf00      	nop
 800b5cc:	20000024 	.word	0x20000024

0800b5d0 <_lseek_r>:
 800b5d0:	b538      	push	{r3, r4, r5, lr}
 800b5d2:	4d07      	ldr	r5, [pc, #28]	@ (800b5f0 <_lseek_r+0x20>)
 800b5d4:	4604      	mov	r4, r0
 800b5d6:	4608      	mov	r0, r1
 800b5d8:	4611      	mov	r1, r2
 800b5da:	2200      	movs	r2, #0
 800b5dc:	602a      	str	r2, [r5, #0]
 800b5de:	461a      	mov	r2, r3
 800b5e0:	f7f5 feca 	bl	8001378 <_lseek>
 800b5e4:	1c43      	adds	r3, r0, #1
 800b5e6:	d102      	bne.n	800b5ee <_lseek_r+0x1e>
 800b5e8:	682b      	ldr	r3, [r5, #0]
 800b5ea:	b103      	cbz	r3, 800b5ee <_lseek_r+0x1e>
 800b5ec:	6023      	str	r3, [r4, #0]
 800b5ee:	bd38      	pop	{r3, r4, r5, pc}
 800b5f0:	20006088 	.word	0x20006088

0800b5f4 <_read_r>:
 800b5f4:	b538      	push	{r3, r4, r5, lr}
 800b5f6:	4d07      	ldr	r5, [pc, #28]	@ (800b614 <_read_r+0x20>)
 800b5f8:	4604      	mov	r4, r0
 800b5fa:	4608      	mov	r0, r1
 800b5fc:	4611      	mov	r1, r2
 800b5fe:	2200      	movs	r2, #0
 800b600:	602a      	str	r2, [r5, #0]
 800b602:	461a      	mov	r2, r3
 800b604:	f7f5 fe58 	bl	80012b8 <_read>
 800b608:	1c43      	adds	r3, r0, #1
 800b60a:	d102      	bne.n	800b612 <_read_r+0x1e>
 800b60c:	682b      	ldr	r3, [r5, #0]
 800b60e:	b103      	cbz	r3, 800b612 <_read_r+0x1e>
 800b610:	6023      	str	r3, [r4, #0]
 800b612:	bd38      	pop	{r3, r4, r5, pc}
 800b614:	20006088 	.word	0x20006088

0800b618 <_write_r>:
 800b618:	b538      	push	{r3, r4, r5, lr}
 800b61a:	4d07      	ldr	r5, [pc, #28]	@ (800b638 <_write_r+0x20>)
 800b61c:	4604      	mov	r4, r0
 800b61e:	4608      	mov	r0, r1
 800b620:	4611      	mov	r1, r2
 800b622:	2200      	movs	r2, #0
 800b624:	602a      	str	r2, [r5, #0]
 800b626:	461a      	mov	r2, r3
 800b628:	f7f5 fe63 	bl	80012f2 <_write>
 800b62c:	1c43      	adds	r3, r0, #1
 800b62e:	d102      	bne.n	800b636 <_write_r+0x1e>
 800b630:	682b      	ldr	r3, [r5, #0]
 800b632:	b103      	cbz	r3, 800b636 <_write_r+0x1e>
 800b634:	6023      	str	r3, [r4, #0]
 800b636:	bd38      	pop	{r3, r4, r5, pc}
 800b638:	20006088 	.word	0x20006088

0800b63c <__errno>:
 800b63c:	4b01      	ldr	r3, [pc, #4]	@ (800b644 <__errno+0x8>)
 800b63e:	6818      	ldr	r0, [r3, #0]
 800b640:	4770      	bx	lr
 800b642:	bf00      	nop
 800b644:	20000024 	.word	0x20000024

0800b648 <__libc_init_array>:
 800b648:	b570      	push	{r4, r5, r6, lr}
 800b64a:	4d0d      	ldr	r5, [pc, #52]	@ (800b680 <__libc_init_array+0x38>)
 800b64c:	4c0d      	ldr	r4, [pc, #52]	@ (800b684 <__libc_init_array+0x3c>)
 800b64e:	1b64      	subs	r4, r4, r5
 800b650:	10a4      	asrs	r4, r4, #2
 800b652:	2600      	movs	r6, #0
 800b654:	42a6      	cmp	r6, r4
 800b656:	d109      	bne.n	800b66c <__libc_init_array+0x24>
 800b658:	4d0b      	ldr	r5, [pc, #44]	@ (800b688 <__libc_init_array+0x40>)
 800b65a:	4c0c      	ldr	r4, [pc, #48]	@ (800b68c <__libc_init_array+0x44>)
 800b65c:	f000 feda 	bl	800c414 <_init>
 800b660:	1b64      	subs	r4, r4, r5
 800b662:	10a4      	asrs	r4, r4, #2
 800b664:	2600      	movs	r6, #0
 800b666:	42a6      	cmp	r6, r4
 800b668:	d105      	bne.n	800b676 <__libc_init_array+0x2e>
 800b66a:	bd70      	pop	{r4, r5, r6, pc}
 800b66c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b670:	4798      	blx	r3
 800b672:	3601      	adds	r6, #1
 800b674:	e7ee      	b.n	800b654 <__libc_init_array+0xc>
 800b676:	f855 3b04 	ldr.w	r3, [r5], #4
 800b67a:	4798      	blx	r3
 800b67c:	3601      	adds	r6, #1
 800b67e:	e7f2      	b.n	800b666 <__libc_init_array+0x1e>
 800b680:	0800c974 	.word	0x0800c974
 800b684:	0800c974 	.word	0x0800c974
 800b688:	0800c974 	.word	0x0800c974
 800b68c:	0800c978 	.word	0x0800c978

0800b690 <__retarget_lock_init_recursive>:
 800b690:	4770      	bx	lr

0800b692 <__retarget_lock_acquire_recursive>:
 800b692:	4770      	bx	lr

0800b694 <__retarget_lock_release_recursive>:
 800b694:	4770      	bx	lr

0800b696 <memcpy>:
 800b696:	440a      	add	r2, r1
 800b698:	4291      	cmp	r1, r2
 800b69a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b69e:	d100      	bne.n	800b6a2 <memcpy+0xc>
 800b6a0:	4770      	bx	lr
 800b6a2:	b510      	push	{r4, lr}
 800b6a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6ac:	4291      	cmp	r1, r2
 800b6ae:	d1f9      	bne.n	800b6a4 <memcpy+0xe>
 800b6b0:	bd10      	pop	{r4, pc}
	...

0800b6b4 <_free_r>:
 800b6b4:	b538      	push	{r3, r4, r5, lr}
 800b6b6:	4605      	mov	r5, r0
 800b6b8:	2900      	cmp	r1, #0
 800b6ba:	d041      	beq.n	800b740 <_free_r+0x8c>
 800b6bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6c0:	1f0c      	subs	r4, r1, #4
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	bfb8      	it	lt
 800b6c6:	18e4      	addlt	r4, r4, r3
 800b6c8:	f000 f8e0 	bl	800b88c <__malloc_lock>
 800b6cc:	4a1d      	ldr	r2, [pc, #116]	@ (800b744 <_free_r+0x90>)
 800b6ce:	6813      	ldr	r3, [r2, #0]
 800b6d0:	b933      	cbnz	r3, 800b6e0 <_free_r+0x2c>
 800b6d2:	6063      	str	r3, [r4, #4]
 800b6d4:	6014      	str	r4, [r2, #0]
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6dc:	f000 b8dc 	b.w	800b898 <__malloc_unlock>
 800b6e0:	42a3      	cmp	r3, r4
 800b6e2:	d908      	bls.n	800b6f6 <_free_r+0x42>
 800b6e4:	6820      	ldr	r0, [r4, #0]
 800b6e6:	1821      	adds	r1, r4, r0
 800b6e8:	428b      	cmp	r3, r1
 800b6ea:	bf01      	itttt	eq
 800b6ec:	6819      	ldreq	r1, [r3, #0]
 800b6ee:	685b      	ldreq	r3, [r3, #4]
 800b6f0:	1809      	addeq	r1, r1, r0
 800b6f2:	6021      	streq	r1, [r4, #0]
 800b6f4:	e7ed      	b.n	800b6d2 <_free_r+0x1e>
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	b10b      	cbz	r3, 800b700 <_free_r+0x4c>
 800b6fc:	42a3      	cmp	r3, r4
 800b6fe:	d9fa      	bls.n	800b6f6 <_free_r+0x42>
 800b700:	6811      	ldr	r1, [r2, #0]
 800b702:	1850      	adds	r0, r2, r1
 800b704:	42a0      	cmp	r0, r4
 800b706:	d10b      	bne.n	800b720 <_free_r+0x6c>
 800b708:	6820      	ldr	r0, [r4, #0]
 800b70a:	4401      	add	r1, r0
 800b70c:	1850      	adds	r0, r2, r1
 800b70e:	4283      	cmp	r3, r0
 800b710:	6011      	str	r1, [r2, #0]
 800b712:	d1e0      	bne.n	800b6d6 <_free_r+0x22>
 800b714:	6818      	ldr	r0, [r3, #0]
 800b716:	685b      	ldr	r3, [r3, #4]
 800b718:	6053      	str	r3, [r2, #4]
 800b71a:	4408      	add	r0, r1
 800b71c:	6010      	str	r0, [r2, #0]
 800b71e:	e7da      	b.n	800b6d6 <_free_r+0x22>
 800b720:	d902      	bls.n	800b728 <_free_r+0x74>
 800b722:	230c      	movs	r3, #12
 800b724:	602b      	str	r3, [r5, #0]
 800b726:	e7d6      	b.n	800b6d6 <_free_r+0x22>
 800b728:	6820      	ldr	r0, [r4, #0]
 800b72a:	1821      	adds	r1, r4, r0
 800b72c:	428b      	cmp	r3, r1
 800b72e:	bf04      	itt	eq
 800b730:	6819      	ldreq	r1, [r3, #0]
 800b732:	685b      	ldreq	r3, [r3, #4]
 800b734:	6063      	str	r3, [r4, #4]
 800b736:	bf04      	itt	eq
 800b738:	1809      	addeq	r1, r1, r0
 800b73a:	6021      	streq	r1, [r4, #0]
 800b73c:	6054      	str	r4, [r2, #4]
 800b73e:	e7ca      	b.n	800b6d6 <_free_r+0x22>
 800b740:	bd38      	pop	{r3, r4, r5, pc}
 800b742:	bf00      	nop
 800b744:	20006094 	.word	0x20006094

0800b748 <sbrk_aligned>:
 800b748:	b570      	push	{r4, r5, r6, lr}
 800b74a:	4e0f      	ldr	r6, [pc, #60]	@ (800b788 <sbrk_aligned+0x40>)
 800b74c:	460c      	mov	r4, r1
 800b74e:	6831      	ldr	r1, [r6, #0]
 800b750:	4605      	mov	r5, r0
 800b752:	b911      	cbnz	r1, 800b75a <sbrk_aligned+0x12>
 800b754:	f000 fe18 	bl	800c388 <_sbrk_r>
 800b758:	6030      	str	r0, [r6, #0]
 800b75a:	4621      	mov	r1, r4
 800b75c:	4628      	mov	r0, r5
 800b75e:	f000 fe13 	bl	800c388 <_sbrk_r>
 800b762:	1c43      	adds	r3, r0, #1
 800b764:	d103      	bne.n	800b76e <sbrk_aligned+0x26>
 800b766:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b76a:	4620      	mov	r0, r4
 800b76c:	bd70      	pop	{r4, r5, r6, pc}
 800b76e:	1cc4      	adds	r4, r0, #3
 800b770:	f024 0403 	bic.w	r4, r4, #3
 800b774:	42a0      	cmp	r0, r4
 800b776:	d0f8      	beq.n	800b76a <sbrk_aligned+0x22>
 800b778:	1a21      	subs	r1, r4, r0
 800b77a:	4628      	mov	r0, r5
 800b77c:	f000 fe04 	bl	800c388 <_sbrk_r>
 800b780:	3001      	adds	r0, #1
 800b782:	d1f2      	bne.n	800b76a <sbrk_aligned+0x22>
 800b784:	e7ef      	b.n	800b766 <sbrk_aligned+0x1e>
 800b786:	bf00      	nop
 800b788:	20006090 	.word	0x20006090

0800b78c <_malloc_r>:
 800b78c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b790:	1ccd      	adds	r5, r1, #3
 800b792:	f025 0503 	bic.w	r5, r5, #3
 800b796:	3508      	adds	r5, #8
 800b798:	2d0c      	cmp	r5, #12
 800b79a:	bf38      	it	cc
 800b79c:	250c      	movcc	r5, #12
 800b79e:	2d00      	cmp	r5, #0
 800b7a0:	4606      	mov	r6, r0
 800b7a2:	db01      	blt.n	800b7a8 <_malloc_r+0x1c>
 800b7a4:	42a9      	cmp	r1, r5
 800b7a6:	d904      	bls.n	800b7b2 <_malloc_r+0x26>
 800b7a8:	230c      	movs	r3, #12
 800b7aa:	6033      	str	r3, [r6, #0]
 800b7ac:	2000      	movs	r0, #0
 800b7ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b888 <_malloc_r+0xfc>
 800b7b6:	f000 f869 	bl	800b88c <__malloc_lock>
 800b7ba:	f8d8 3000 	ldr.w	r3, [r8]
 800b7be:	461c      	mov	r4, r3
 800b7c0:	bb44      	cbnz	r4, 800b814 <_malloc_r+0x88>
 800b7c2:	4629      	mov	r1, r5
 800b7c4:	4630      	mov	r0, r6
 800b7c6:	f7ff ffbf 	bl	800b748 <sbrk_aligned>
 800b7ca:	1c43      	adds	r3, r0, #1
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	d158      	bne.n	800b882 <_malloc_r+0xf6>
 800b7d0:	f8d8 4000 	ldr.w	r4, [r8]
 800b7d4:	4627      	mov	r7, r4
 800b7d6:	2f00      	cmp	r7, #0
 800b7d8:	d143      	bne.n	800b862 <_malloc_r+0xd6>
 800b7da:	2c00      	cmp	r4, #0
 800b7dc:	d04b      	beq.n	800b876 <_malloc_r+0xea>
 800b7de:	6823      	ldr	r3, [r4, #0]
 800b7e0:	4639      	mov	r1, r7
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	eb04 0903 	add.w	r9, r4, r3
 800b7e8:	f000 fdce 	bl	800c388 <_sbrk_r>
 800b7ec:	4581      	cmp	r9, r0
 800b7ee:	d142      	bne.n	800b876 <_malloc_r+0xea>
 800b7f0:	6821      	ldr	r1, [r4, #0]
 800b7f2:	1a6d      	subs	r5, r5, r1
 800b7f4:	4629      	mov	r1, r5
 800b7f6:	4630      	mov	r0, r6
 800b7f8:	f7ff ffa6 	bl	800b748 <sbrk_aligned>
 800b7fc:	3001      	adds	r0, #1
 800b7fe:	d03a      	beq.n	800b876 <_malloc_r+0xea>
 800b800:	6823      	ldr	r3, [r4, #0]
 800b802:	442b      	add	r3, r5
 800b804:	6023      	str	r3, [r4, #0]
 800b806:	f8d8 3000 	ldr.w	r3, [r8]
 800b80a:	685a      	ldr	r2, [r3, #4]
 800b80c:	bb62      	cbnz	r2, 800b868 <_malloc_r+0xdc>
 800b80e:	f8c8 7000 	str.w	r7, [r8]
 800b812:	e00f      	b.n	800b834 <_malloc_r+0xa8>
 800b814:	6822      	ldr	r2, [r4, #0]
 800b816:	1b52      	subs	r2, r2, r5
 800b818:	d420      	bmi.n	800b85c <_malloc_r+0xd0>
 800b81a:	2a0b      	cmp	r2, #11
 800b81c:	d917      	bls.n	800b84e <_malloc_r+0xc2>
 800b81e:	1961      	adds	r1, r4, r5
 800b820:	42a3      	cmp	r3, r4
 800b822:	6025      	str	r5, [r4, #0]
 800b824:	bf18      	it	ne
 800b826:	6059      	strne	r1, [r3, #4]
 800b828:	6863      	ldr	r3, [r4, #4]
 800b82a:	bf08      	it	eq
 800b82c:	f8c8 1000 	streq.w	r1, [r8]
 800b830:	5162      	str	r2, [r4, r5]
 800b832:	604b      	str	r3, [r1, #4]
 800b834:	4630      	mov	r0, r6
 800b836:	f000 f82f 	bl	800b898 <__malloc_unlock>
 800b83a:	f104 000b 	add.w	r0, r4, #11
 800b83e:	1d23      	adds	r3, r4, #4
 800b840:	f020 0007 	bic.w	r0, r0, #7
 800b844:	1ac2      	subs	r2, r0, r3
 800b846:	bf1c      	itt	ne
 800b848:	1a1b      	subne	r3, r3, r0
 800b84a:	50a3      	strne	r3, [r4, r2]
 800b84c:	e7af      	b.n	800b7ae <_malloc_r+0x22>
 800b84e:	6862      	ldr	r2, [r4, #4]
 800b850:	42a3      	cmp	r3, r4
 800b852:	bf0c      	ite	eq
 800b854:	f8c8 2000 	streq.w	r2, [r8]
 800b858:	605a      	strne	r2, [r3, #4]
 800b85a:	e7eb      	b.n	800b834 <_malloc_r+0xa8>
 800b85c:	4623      	mov	r3, r4
 800b85e:	6864      	ldr	r4, [r4, #4]
 800b860:	e7ae      	b.n	800b7c0 <_malloc_r+0x34>
 800b862:	463c      	mov	r4, r7
 800b864:	687f      	ldr	r7, [r7, #4]
 800b866:	e7b6      	b.n	800b7d6 <_malloc_r+0x4a>
 800b868:	461a      	mov	r2, r3
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	42a3      	cmp	r3, r4
 800b86e:	d1fb      	bne.n	800b868 <_malloc_r+0xdc>
 800b870:	2300      	movs	r3, #0
 800b872:	6053      	str	r3, [r2, #4]
 800b874:	e7de      	b.n	800b834 <_malloc_r+0xa8>
 800b876:	230c      	movs	r3, #12
 800b878:	6033      	str	r3, [r6, #0]
 800b87a:	4630      	mov	r0, r6
 800b87c:	f000 f80c 	bl	800b898 <__malloc_unlock>
 800b880:	e794      	b.n	800b7ac <_malloc_r+0x20>
 800b882:	6005      	str	r5, [r0, #0]
 800b884:	e7d6      	b.n	800b834 <_malloc_r+0xa8>
 800b886:	bf00      	nop
 800b888:	20006094 	.word	0x20006094

0800b88c <__malloc_lock>:
 800b88c:	4801      	ldr	r0, [pc, #4]	@ (800b894 <__malloc_lock+0x8>)
 800b88e:	f7ff bf00 	b.w	800b692 <__retarget_lock_acquire_recursive>
 800b892:	bf00      	nop
 800b894:	2000608c 	.word	0x2000608c

0800b898 <__malloc_unlock>:
 800b898:	4801      	ldr	r0, [pc, #4]	@ (800b8a0 <__malloc_unlock+0x8>)
 800b89a:	f7ff befb 	b.w	800b694 <__retarget_lock_release_recursive>
 800b89e:	bf00      	nop
 800b8a0:	2000608c 	.word	0x2000608c

0800b8a4 <__ssputs_r>:
 800b8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8a8:	688e      	ldr	r6, [r1, #8]
 800b8aa:	461f      	mov	r7, r3
 800b8ac:	42be      	cmp	r6, r7
 800b8ae:	680b      	ldr	r3, [r1, #0]
 800b8b0:	4682      	mov	sl, r0
 800b8b2:	460c      	mov	r4, r1
 800b8b4:	4690      	mov	r8, r2
 800b8b6:	d82d      	bhi.n	800b914 <__ssputs_r+0x70>
 800b8b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b8bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b8c0:	d026      	beq.n	800b910 <__ssputs_r+0x6c>
 800b8c2:	6965      	ldr	r5, [r4, #20]
 800b8c4:	6909      	ldr	r1, [r1, #16]
 800b8c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b8ca:	eba3 0901 	sub.w	r9, r3, r1
 800b8ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b8d2:	1c7b      	adds	r3, r7, #1
 800b8d4:	444b      	add	r3, r9
 800b8d6:	106d      	asrs	r5, r5, #1
 800b8d8:	429d      	cmp	r5, r3
 800b8da:	bf38      	it	cc
 800b8dc:	461d      	movcc	r5, r3
 800b8de:	0553      	lsls	r3, r2, #21
 800b8e0:	d527      	bpl.n	800b932 <__ssputs_r+0x8e>
 800b8e2:	4629      	mov	r1, r5
 800b8e4:	f7ff ff52 	bl	800b78c <_malloc_r>
 800b8e8:	4606      	mov	r6, r0
 800b8ea:	b360      	cbz	r0, 800b946 <__ssputs_r+0xa2>
 800b8ec:	6921      	ldr	r1, [r4, #16]
 800b8ee:	464a      	mov	r2, r9
 800b8f0:	f7ff fed1 	bl	800b696 <memcpy>
 800b8f4:	89a3      	ldrh	r3, [r4, #12]
 800b8f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b8fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8fe:	81a3      	strh	r3, [r4, #12]
 800b900:	6126      	str	r6, [r4, #16]
 800b902:	6165      	str	r5, [r4, #20]
 800b904:	444e      	add	r6, r9
 800b906:	eba5 0509 	sub.w	r5, r5, r9
 800b90a:	6026      	str	r6, [r4, #0]
 800b90c:	60a5      	str	r5, [r4, #8]
 800b90e:	463e      	mov	r6, r7
 800b910:	42be      	cmp	r6, r7
 800b912:	d900      	bls.n	800b916 <__ssputs_r+0x72>
 800b914:	463e      	mov	r6, r7
 800b916:	6820      	ldr	r0, [r4, #0]
 800b918:	4632      	mov	r2, r6
 800b91a:	4641      	mov	r1, r8
 800b91c:	f000 fcf8 	bl	800c310 <memmove>
 800b920:	68a3      	ldr	r3, [r4, #8]
 800b922:	1b9b      	subs	r3, r3, r6
 800b924:	60a3      	str	r3, [r4, #8]
 800b926:	6823      	ldr	r3, [r4, #0]
 800b928:	4433      	add	r3, r6
 800b92a:	6023      	str	r3, [r4, #0]
 800b92c:	2000      	movs	r0, #0
 800b92e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b932:	462a      	mov	r2, r5
 800b934:	f000 fd38 	bl	800c3a8 <_realloc_r>
 800b938:	4606      	mov	r6, r0
 800b93a:	2800      	cmp	r0, #0
 800b93c:	d1e0      	bne.n	800b900 <__ssputs_r+0x5c>
 800b93e:	6921      	ldr	r1, [r4, #16]
 800b940:	4650      	mov	r0, sl
 800b942:	f7ff feb7 	bl	800b6b4 <_free_r>
 800b946:	230c      	movs	r3, #12
 800b948:	f8ca 3000 	str.w	r3, [sl]
 800b94c:	89a3      	ldrh	r3, [r4, #12]
 800b94e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b952:	81a3      	strh	r3, [r4, #12]
 800b954:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b958:	e7e9      	b.n	800b92e <__ssputs_r+0x8a>
	...

0800b95c <_svfiprintf_r>:
 800b95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b960:	4698      	mov	r8, r3
 800b962:	898b      	ldrh	r3, [r1, #12]
 800b964:	061b      	lsls	r3, r3, #24
 800b966:	b09d      	sub	sp, #116	@ 0x74
 800b968:	4607      	mov	r7, r0
 800b96a:	460d      	mov	r5, r1
 800b96c:	4614      	mov	r4, r2
 800b96e:	d510      	bpl.n	800b992 <_svfiprintf_r+0x36>
 800b970:	690b      	ldr	r3, [r1, #16]
 800b972:	b973      	cbnz	r3, 800b992 <_svfiprintf_r+0x36>
 800b974:	2140      	movs	r1, #64	@ 0x40
 800b976:	f7ff ff09 	bl	800b78c <_malloc_r>
 800b97a:	6028      	str	r0, [r5, #0]
 800b97c:	6128      	str	r0, [r5, #16]
 800b97e:	b930      	cbnz	r0, 800b98e <_svfiprintf_r+0x32>
 800b980:	230c      	movs	r3, #12
 800b982:	603b      	str	r3, [r7, #0]
 800b984:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b988:	b01d      	add	sp, #116	@ 0x74
 800b98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b98e:	2340      	movs	r3, #64	@ 0x40
 800b990:	616b      	str	r3, [r5, #20]
 800b992:	2300      	movs	r3, #0
 800b994:	9309      	str	r3, [sp, #36]	@ 0x24
 800b996:	2320      	movs	r3, #32
 800b998:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b99c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9a0:	2330      	movs	r3, #48	@ 0x30
 800b9a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bb40 <_svfiprintf_r+0x1e4>
 800b9a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b9aa:	f04f 0901 	mov.w	r9, #1
 800b9ae:	4623      	mov	r3, r4
 800b9b0:	469a      	mov	sl, r3
 800b9b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9b6:	b10a      	cbz	r2, 800b9bc <_svfiprintf_r+0x60>
 800b9b8:	2a25      	cmp	r2, #37	@ 0x25
 800b9ba:	d1f9      	bne.n	800b9b0 <_svfiprintf_r+0x54>
 800b9bc:	ebba 0b04 	subs.w	fp, sl, r4
 800b9c0:	d00b      	beq.n	800b9da <_svfiprintf_r+0x7e>
 800b9c2:	465b      	mov	r3, fp
 800b9c4:	4622      	mov	r2, r4
 800b9c6:	4629      	mov	r1, r5
 800b9c8:	4638      	mov	r0, r7
 800b9ca:	f7ff ff6b 	bl	800b8a4 <__ssputs_r>
 800b9ce:	3001      	adds	r0, #1
 800b9d0:	f000 80a7 	beq.w	800bb22 <_svfiprintf_r+0x1c6>
 800b9d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9d6:	445a      	add	r2, fp
 800b9d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9da:	f89a 3000 	ldrb.w	r3, [sl]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	f000 809f 	beq.w	800bb22 <_svfiprintf_r+0x1c6>
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b9ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9ee:	f10a 0a01 	add.w	sl, sl, #1
 800b9f2:	9304      	str	r3, [sp, #16]
 800b9f4:	9307      	str	r3, [sp, #28]
 800b9f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b9fa:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9fc:	4654      	mov	r4, sl
 800b9fe:	2205      	movs	r2, #5
 800ba00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba04:	484e      	ldr	r0, [pc, #312]	@ (800bb40 <_svfiprintf_r+0x1e4>)
 800ba06:	f7f4 fbe3 	bl	80001d0 <memchr>
 800ba0a:	9a04      	ldr	r2, [sp, #16]
 800ba0c:	b9d8      	cbnz	r0, 800ba46 <_svfiprintf_r+0xea>
 800ba0e:	06d0      	lsls	r0, r2, #27
 800ba10:	bf44      	itt	mi
 800ba12:	2320      	movmi	r3, #32
 800ba14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba18:	0711      	lsls	r1, r2, #28
 800ba1a:	bf44      	itt	mi
 800ba1c:	232b      	movmi	r3, #43	@ 0x2b
 800ba1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba22:	f89a 3000 	ldrb.w	r3, [sl]
 800ba26:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba28:	d015      	beq.n	800ba56 <_svfiprintf_r+0xfa>
 800ba2a:	9a07      	ldr	r2, [sp, #28]
 800ba2c:	4654      	mov	r4, sl
 800ba2e:	2000      	movs	r0, #0
 800ba30:	f04f 0c0a 	mov.w	ip, #10
 800ba34:	4621      	mov	r1, r4
 800ba36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba3a:	3b30      	subs	r3, #48	@ 0x30
 800ba3c:	2b09      	cmp	r3, #9
 800ba3e:	d94b      	bls.n	800bad8 <_svfiprintf_r+0x17c>
 800ba40:	b1b0      	cbz	r0, 800ba70 <_svfiprintf_r+0x114>
 800ba42:	9207      	str	r2, [sp, #28]
 800ba44:	e014      	b.n	800ba70 <_svfiprintf_r+0x114>
 800ba46:	eba0 0308 	sub.w	r3, r0, r8
 800ba4a:	fa09 f303 	lsl.w	r3, r9, r3
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	9304      	str	r3, [sp, #16]
 800ba52:	46a2      	mov	sl, r4
 800ba54:	e7d2      	b.n	800b9fc <_svfiprintf_r+0xa0>
 800ba56:	9b03      	ldr	r3, [sp, #12]
 800ba58:	1d19      	adds	r1, r3, #4
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	9103      	str	r1, [sp, #12]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	bfbb      	ittet	lt
 800ba62:	425b      	neglt	r3, r3
 800ba64:	f042 0202 	orrlt.w	r2, r2, #2
 800ba68:	9307      	strge	r3, [sp, #28]
 800ba6a:	9307      	strlt	r3, [sp, #28]
 800ba6c:	bfb8      	it	lt
 800ba6e:	9204      	strlt	r2, [sp, #16]
 800ba70:	7823      	ldrb	r3, [r4, #0]
 800ba72:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba74:	d10a      	bne.n	800ba8c <_svfiprintf_r+0x130>
 800ba76:	7863      	ldrb	r3, [r4, #1]
 800ba78:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba7a:	d132      	bne.n	800bae2 <_svfiprintf_r+0x186>
 800ba7c:	9b03      	ldr	r3, [sp, #12]
 800ba7e:	1d1a      	adds	r2, r3, #4
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	9203      	str	r2, [sp, #12]
 800ba84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba88:	3402      	adds	r4, #2
 800ba8a:	9305      	str	r3, [sp, #20]
 800ba8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bb50 <_svfiprintf_r+0x1f4>
 800ba90:	7821      	ldrb	r1, [r4, #0]
 800ba92:	2203      	movs	r2, #3
 800ba94:	4650      	mov	r0, sl
 800ba96:	f7f4 fb9b 	bl	80001d0 <memchr>
 800ba9a:	b138      	cbz	r0, 800baac <_svfiprintf_r+0x150>
 800ba9c:	9b04      	ldr	r3, [sp, #16]
 800ba9e:	eba0 000a 	sub.w	r0, r0, sl
 800baa2:	2240      	movs	r2, #64	@ 0x40
 800baa4:	4082      	lsls	r2, r0
 800baa6:	4313      	orrs	r3, r2
 800baa8:	3401      	adds	r4, #1
 800baaa:	9304      	str	r3, [sp, #16]
 800baac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bab0:	4824      	ldr	r0, [pc, #144]	@ (800bb44 <_svfiprintf_r+0x1e8>)
 800bab2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bab6:	2206      	movs	r2, #6
 800bab8:	f7f4 fb8a 	bl	80001d0 <memchr>
 800babc:	2800      	cmp	r0, #0
 800babe:	d036      	beq.n	800bb2e <_svfiprintf_r+0x1d2>
 800bac0:	4b21      	ldr	r3, [pc, #132]	@ (800bb48 <_svfiprintf_r+0x1ec>)
 800bac2:	bb1b      	cbnz	r3, 800bb0c <_svfiprintf_r+0x1b0>
 800bac4:	9b03      	ldr	r3, [sp, #12]
 800bac6:	3307      	adds	r3, #7
 800bac8:	f023 0307 	bic.w	r3, r3, #7
 800bacc:	3308      	adds	r3, #8
 800bace:	9303      	str	r3, [sp, #12]
 800bad0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bad2:	4433      	add	r3, r6
 800bad4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bad6:	e76a      	b.n	800b9ae <_svfiprintf_r+0x52>
 800bad8:	fb0c 3202 	mla	r2, ip, r2, r3
 800badc:	460c      	mov	r4, r1
 800bade:	2001      	movs	r0, #1
 800bae0:	e7a8      	b.n	800ba34 <_svfiprintf_r+0xd8>
 800bae2:	2300      	movs	r3, #0
 800bae4:	3401      	adds	r4, #1
 800bae6:	9305      	str	r3, [sp, #20]
 800bae8:	4619      	mov	r1, r3
 800baea:	f04f 0c0a 	mov.w	ip, #10
 800baee:	4620      	mov	r0, r4
 800baf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baf4:	3a30      	subs	r2, #48	@ 0x30
 800baf6:	2a09      	cmp	r2, #9
 800baf8:	d903      	bls.n	800bb02 <_svfiprintf_r+0x1a6>
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d0c6      	beq.n	800ba8c <_svfiprintf_r+0x130>
 800bafe:	9105      	str	r1, [sp, #20]
 800bb00:	e7c4      	b.n	800ba8c <_svfiprintf_r+0x130>
 800bb02:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb06:	4604      	mov	r4, r0
 800bb08:	2301      	movs	r3, #1
 800bb0a:	e7f0      	b.n	800baee <_svfiprintf_r+0x192>
 800bb0c:	ab03      	add	r3, sp, #12
 800bb0e:	9300      	str	r3, [sp, #0]
 800bb10:	462a      	mov	r2, r5
 800bb12:	4b0e      	ldr	r3, [pc, #56]	@ (800bb4c <_svfiprintf_r+0x1f0>)
 800bb14:	a904      	add	r1, sp, #16
 800bb16:	4638      	mov	r0, r7
 800bb18:	f3af 8000 	nop.w
 800bb1c:	1c42      	adds	r2, r0, #1
 800bb1e:	4606      	mov	r6, r0
 800bb20:	d1d6      	bne.n	800bad0 <_svfiprintf_r+0x174>
 800bb22:	89ab      	ldrh	r3, [r5, #12]
 800bb24:	065b      	lsls	r3, r3, #25
 800bb26:	f53f af2d 	bmi.w	800b984 <_svfiprintf_r+0x28>
 800bb2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb2c:	e72c      	b.n	800b988 <_svfiprintf_r+0x2c>
 800bb2e:	ab03      	add	r3, sp, #12
 800bb30:	9300      	str	r3, [sp, #0]
 800bb32:	462a      	mov	r2, r5
 800bb34:	4b05      	ldr	r3, [pc, #20]	@ (800bb4c <_svfiprintf_r+0x1f0>)
 800bb36:	a904      	add	r1, sp, #16
 800bb38:	4638      	mov	r0, r7
 800bb3a:	f000 f9bb 	bl	800beb4 <_printf_i>
 800bb3e:	e7ed      	b.n	800bb1c <_svfiprintf_r+0x1c0>
 800bb40:	0800c939 	.word	0x0800c939
 800bb44:	0800c943 	.word	0x0800c943
 800bb48:	00000000 	.word	0x00000000
 800bb4c:	0800b8a5 	.word	0x0800b8a5
 800bb50:	0800c93f 	.word	0x0800c93f

0800bb54 <__sfputc_r>:
 800bb54:	6893      	ldr	r3, [r2, #8]
 800bb56:	3b01      	subs	r3, #1
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	b410      	push	{r4}
 800bb5c:	6093      	str	r3, [r2, #8]
 800bb5e:	da08      	bge.n	800bb72 <__sfputc_r+0x1e>
 800bb60:	6994      	ldr	r4, [r2, #24]
 800bb62:	42a3      	cmp	r3, r4
 800bb64:	db01      	blt.n	800bb6a <__sfputc_r+0x16>
 800bb66:	290a      	cmp	r1, #10
 800bb68:	d103      	bne.n	800bb72 <__sfputc_r+0x1e>
 800bb6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb6e:	f7ff bc2c 	b.w	800b3ca <__swbuf_r>
 800bb72:	6813      	ldr	r3, [r2, #0]
 800bb74:	1c58      	adds	r0, r3, #1
 800bb76:	6010      	str	r0, [r2, #0]
 800bb78:	7019      	strb	r1, [r3, #0]
 800bb7a:	4608      	mov	r0, r1
 800bb7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb80:	4770      	bx	lr

0800bb82 <__sfputs_r>:
 800bb82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb84:	4606      	mov	r6, r0
 800bb86:	460f      	mov	r7, r1
 800bb88:	4614      	mov	r4, r2
 800bb8a:	18d5      	adds	r5, r2, r3
 800bb8c:	42ac      	cmp	r4, r5
 800bb8e:	d101      	bne.n	800bb94 <__sfputs_r+0x12>
 800bb90:	2000      	movs	r0, #0
 800bb92:	e007      	b.n	800bba4 <__sfputs_r+0x22>
 800bb94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb98:	463a      	mov	r2, r7
 800bb9a:	4630      	mov	r0, r6
 800bb9c:	f7ff ffda 	bl	800bb54 <__sfputc_r>
 800bba0:	1c43      	adds	r3, r0, #1
 800bba2:	d1f3      	bne.n	800bb8c <__sfputs_r+0xa>
 800bba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bba8 <_vfiprintf_r>:
 800bba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbac:	460d      	mov	r5, r1
 800bbae:	b09d      	sub	sp, #116	@ 0x74
 800bbb0:	4614      	mov	r4, r2
 800bbb2:	4698      	mov	r8, r3
 800bbb4:	4606      	mov	r6, r0
 800bbb6:	b118      	cbz	r0, 800bbc0 <_vfiprintf_r+0x18>
 800bbb8:	6a03      	ldr	r3, [r0, #32]
 800bbba:	b90b      	cbnz	r3, 800bbc0 <_vfiprintf_r+0x18>
 800bbbc:	f7ff fae8 	bl	800b190 <__sinit>
 800bbc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbc2:	07d9      	lsls	r1, r3, #31
 800bbc4:	d405      	bmi.n	800bbd2 <_vfiprintf_r+0x2a>
 800bbc6:	89ab      	ldrh	r3, [r5, #12]
 800bbc8:	059a      	lsls	r2, r3, #22
 800bbca:	d402      	bmi.n	800bbd2 <_vfiprintf_r+0x2a>
 800bbcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbce:	f7ff fd60 	bl	800b692 <__retarget_lock_acquire_recursive>
 800bbd2:	89ab      	ldrh	r3, [r5, #12]
 800bbd4:	071b      	lsls	r3, r3, #28
 800bbd6:	d501      	bpl.n	800bbdc <_vfiprintf_r+0x34>
 800bbd8:	692b      	ldr	r3, [r5, #16]
 800bbda:	b99b      	cbnz	r3, 800bc04 <_vfiprintf_r+0x5c>
 800bbdc:	4629      	mov	r1, r5
 800bbde:	4630      	mov	r0, r6
 800bbe0:	f7ff fc32 	bl	800b448 <__swsetup_r>
 800bbe4:	b170      	cbz	r0, 800bc04 <_vfiprintf_r+0x5c>
 800bbe6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbe8:	07dc      	lsls	r4, r3, #31
 800bbea:	d504      	bpl.n	800bbf6 <_vfiprintf_r+0x4e>
 800bbec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bbf0:	b01d      	add	sp, #116	@ 0x74
 800bbf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbf6:	89ab      	ldrh	r3, [r5, #12]
 800bbf8:	0598      	lsls	r0, r3, #22
 800bbfa:	d4f7      	bmi.n	800bbec <_vfiprintf_r+0x44>
 800bbfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbfe:	f7ff fd49 	bl	800b694 <__retarget_lock_release_recursive>
 800bc02:	e7f3      	b.n	800bbec <_vfiprintf_r+0x44>
 800bc04:	2300      	movs	r3, #0
 800bc06:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc08:	2320      	movs	r3, #32
 800bc0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc0e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc12:	2330      	movs	r3, #48	@ 0x30
 800bc14:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bdc4 <_vfiprintf_r+0x21c>
 800bc18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc1c:	f04f 0901 	mov.w	r9, #1
 800bc20:	4623      	mov	r3, r4
 800bc22:	469a      	mov	sl, r3
 800bc24:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc28:	b10a      	cbz	r2, 800bc2e <_vfiprintf_r+0x86>
 800bc2a:	2a25      	cmp	r2, #37	@ 0x25
 800bc2c:	d1f9      	bne.n	800bc22 <_vfiprintf_r+0x7a>
 800bc2e:	ebba 0b04 	subs.w	fp, sl, r4
 800bc32:	d00b      	beq.n	800bc4c <_vfiprintf_r+0xa4>
 800bc34:	465b      	mov	r3, fp
 800bc36:	4622      	mov	r2, r4
 800bc38:	4629      	mov	r1, r5
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	f7ff ffa1 	bl	800bb82 <__sfputs_r>
 800bc40:	3001      	adds	r0, #1
 800bc42:	f000 80a7 	beq.w	800bd94 <_vfiprintf_r+0x1ec>
 800bc46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc48:	445a      	add	r2, fp
 800bc4a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc4c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	f000 809f 	beq.w	800bd94 <_vfiprintf_r+0x1ec>
 800bc56:	2300      	movs	r3, #0
 800bc58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bc5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc60:	f10a 0a01 	add.w	sl, sl, #1
 800bc64:	9304      	str	r3, [sp, #16]
 800bc66:	9307      	str	r3, [sp, #28]
 800bc68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc6c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc6e:	4654      	mov	r4, sl
 800bc70:	2205      	movs	r2, #5
 800bc72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc76:	4853      	ldr	r0, [pc, #332]	@ (800bdc4 <_vfiprintf_r+0x21c>)
 800bc78:	f7f4 faaa 	bl	80001d0 <memchr>
 800bc7c:	9a04      	ldr	r2, [sp, #16]
 800bc7e:	b9d8      	cbnz	r0, 800bcb8 <_vfiprintf_r+0x110>
 800bc80:	06d1      	lsls	r1, r2, #27
 800bc82:	bf44      	itt	mi
 800bc84:	2320      	movmi	r3, #32
 800bc86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc8a:	0713      	lsls	r3, r2, #28
 800bc8c:	bf44      	itt	mi
 800bc8e:	232b      	movmi	r3, #43	@ 0x2b
 800bc90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc94:	f89a 3000 	ldrb.w	r3, [sl]
 800bc98:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc9a:	d015      	beq.n	800bcc8 <_vfiprintf_r+0x120>
 800bc9c:	9a07      	ldr	r2, [sp, #28]
 800bc9e:	4654      	mov	r4, sl
 800bca0:	2000      	movs	r0, #0
 800bca2:	f04f 0c0a 	mov.w	ip, #10
 800bca6:	4621      	mov	r1, r4
 800bca8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcac:	3b30      	subs	r3, #48	@ 0x30
 800bcae:	2b09      	cmp	r3, #9
 800bcb0:	d94b      	bls.n	800bd4a <_vfiprintf_r+0x1a2>
 800bcb2:	b1b0      	cbz	r0, 800bce2 <_vfiprintf_r+0x13a>
 800bcb4:	9207      	str	r2, [sp, #28]
 800bcb6:	e014      	b.n	800bce2 <_vfiprintf_r+0x13a>
 800bcb8:	eba0 0308 	sub.w	r3, r0, r8
 800bcbc:	fa09 f303 	lsl.w	r3, r9, r3
 800bcc0:	4313      	orrs	r3, r2
 800bcc2:	9304      	str	r3, [sp, #16]
 800bcc4:	46a2      	mov	sl, r4
 800bcc6:	e7d2      	b.n	800bc6e <_vfiprintf_r+0xc6>
 800bcc8:	9b03      	ldr	r3, [sp, #12]
 800bcca:	1d19      	adds	r1, r3, #4
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	9103      	str	r1, [sp, #12]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	bfbb      	ittet	lt
 800bcd4:	425b      	neglt	r3, r3
 800bcd6:	f042 0202 	orrlt.w	r2, r2, #2
 800bcda:	9307      	strge	r3, [sp, #28]
 800bcdc:	9307      	strlt	r3, [sp, #28]
 800bcde:	bfb8      	it	lt
 800bce0:	9204      	strlt	r2, [sp, #16]
 800bce2:	7823      	ldrb	r3, [r4, #0]
 800bce4:	2b2e      	cmp	r3, #46	@ 0x2e
 800bce6:	d10a      	bne.n	800bcfe <_vfiprintf_r+0x156>
 800bce8:	7863      	ldrb	r3, [r4, #1]
 800bcea:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcec:	d132      	bne.n	800bd54 <_vfiprintf_r+0x1ac>
 800bcee:	9b03      	ldr	r3, [sp, #12]
 800bcf0:	1d1a      	adds	r2, r3, #4
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	9203      	str	r2, [sp, #12]
 800bcf6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bcfa:	3402      	adds	r4, #2
 800bcfc:	9305      	str	r3, [sp, #20]
 800bcfe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bdd4 <_vfiprintf_r+0x22c>
 800bd02:	7821      	ldrb	r1, [r4, #0]
 800bd04:	2203      	movs	r2, #3
 800bd06:	4650      	mov	r0, sl
 800bd08:	f7f4 fa62 	bl	80001d0 <memchr>
 800bd0c:	b138      	cbz	r0, 800bd1e <_vfiprintf_r+0x176>
 800bd0e:	9b04      	ldr	r3, [sp, #16]
 800bd10:	eba0 000a 	sub.w	r0, r0, sl
 800bd14:	2240      	movs	r2, #64	@ 0x40
 800bd16:	4082      	lsls	r2, r0
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	3401      	adds	r4, #1
 800bd1c:	9304      	str	r3, [sp, #16]
 800bd1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd22:	4829      	ldr	r0, [pc, #164]	@ (800bdc8 <_vfiprintf_r+0x220>)
 800bd24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd28:	2206      	movs	r2, #6
 800bd2a:	f7f4 fa51 	bl	80001d0 <memchr>
 800bd2e:	2800      	cmp	r0, #0
 800bd30:	d03f      	beq.n	800bdb2 <_vfiprintf_r+0x20a>
 800bd32:	4b26      	ldr	r3, [pc, #152]	@ (800bdcc <_vfiprintf_r+0x224>)
 800bd34:	bb1b      	cbnz	r3, 800bd7e <_vfiprintf_r+0x1d6>
 800bd36:	9b03      	ldr	r3, [sp, #12]
 800bd38:	3307      	adds	r3, #7
 800bd3a:	f023 0307 	bic.w	r3, r3, #7
 800bd3e:	3308      	adds	r3, #8
 800bd40:	9303      	str	r3, [sp, #12]
 800bd42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd44:	443b      	add	r3, r7
 800bd46:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd48:	e76a      	b.n	800bc20 <_vfiprintf_r+0x78>
 800bd4a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd4e:	460c      	mov	r4, r1
 800bd50:	2001      	movs	r0, #1
 800bd52:	e7a8      	b.n	800bca6 <_vfiprintf_r+0xfe>
 800bd54:	2300      	movs	r3, #0
 800bd56:	3401      	adds	r4, #1
 800bd58:	9305      	str	r3, [sp, #20]
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	f04f 0c0a 	mov.w	ip, #10
 800bd60:	4620      	mov	r0, r4
 800bd62:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd66:	3a30      	subs	r2, #48	@ 0x30
 800bd68:	2a09      	cmp	r2, #9
 800bd6a:	d903      	bls.n	800bd74 <_vfiprintf_r+0x1cc>
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d0c6      	beq.n	800bcfe <_vfiprintf_r+0x156>
 800bd70:	9105      	str	r1, [sp, #20]
 800bd72:	e7c4      	b.n	800bcfe <_vfiprintf_r+0x156>
 800bd74:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd78:	4604      	mov	r4, r0
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	e7f0      	b.n	800bd60 <_vfiprintf_r+0x1b8>
 800bd7e:	ab03      	add	r3, sp, #12
 800bd80:	9300      	str	r3, [sp, #0]
 800bd82:	462a      	mov	r2, r5
 800bd84:	4b12      	ldr	r3, [pc, #72]	@ (800bdd0 <_vfiprintf_r+0x228>)
 800bd86:	a904      	add	r1, sp, #16
 800bd88:	4630      	mov	r0, r6
 800bd8a:	f3af 8000 	nop.w
 800bd8e:	4607      	mov	r7, r0
 800bd90:	1c78      	adds	r0, r7, #1
 800bd92:	d1d6      	bne.n	800bd42 <_vfiprintf_r+0x19a>
 800bd94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd96:	07d9      	lsls	r1, r3, #31
 800bd98:	d405      	bmi.n	800bda6 <_vfiprintf_r+0x1fe>
 800bd9a:	89ab      	ldrh	r3, [r5, #12]
 800bd9c:	059a      	lsls	r2, r3, #22
 800bd9e:	d402      	bmi.n	800bda6 <_vfiprintf_r+0x1fe>
 800bda0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bda2:	f7ff fc77 	bl	800b694 <__retarget_lock_release_recursive>
 800bda6:	89ab      	ldrh	r3, [r5, #12]
 800bda8:	065b      	lsls	r3, r3, #25
 800bdaa:	f53f af1f 	bmi.w	800bbec <_vfiprintf_r+0x44>
 800bdae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bdb0:	e71e      	b.n	800bbf0 <_vfiprintf_r+0x48>
 800bdb2:	ab03      	add	r3, sp, #12
 800bdb4:	9300      	str	r3, [sp, #0]
 800bdb6:	462a      	mov	r2, r5
 800bdb8:	4b05      	ldr	r3, [pc, #20]	@ (800bdd0 <_vfiprintf_r+0x228>)
 800bdba:	a904      	add	r1, sp, #16
 800bdbc:	4630      	mov	r0, r6
 800bdbe:	f000 f879 	bl	800beb4 <_printf_i>
 800bdc2:	e7e4      	b.n	800bd8e <_vfiprintf_r+0x1e6>
 800bdc4:	0800c939 	.word	0x0800c939
 800bdc8:	0800c943 	.word	0x0800c943
 800bdcc:	00000000 	.word	0x00000000
 800bdd0:	0800bb83 	.word	0x0800bb83
 800bdd4:	0800c93f 	.word	0x0800c93f

0800bdd8 <_printf_common>:
 800bdd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bddc:	4616      	mov	r6, r2
 800bdde:	4698      	mov	r8, r3
 800bde0:	688a      	ldr	r2, [r1, #8]
 800bde2:	690b      	ldr	r3, [r1, #16]
 800bde4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bde8:	4293      	cmp	r3, r2
 800bdea:	bfb8      	it	lt
 800bdec:	4613      	movlt	r3, r2
 800bdee:	6033      	str	r3, [r6, #0]
 800bdf0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bdf4:	4607      	mov	r7, r0
 800bdf6:	460c      	mov	r4, r1
 800bdf8:	b10a      	cbz	r2, 800bdfe <_printf_common+0x26>
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	6033      	str	r3, [r6, #0]
 800bdfe:	6823      	ldr	r3, [r4, #0]
 800be00:	0699      	lsls	r1, r3, #26
 800be02:	bf42      	ittt	mi
 800be04:	6833      	ldrmi	r3, [r6, #0]
 800be06:	3302      	addmi	r3, #2
 800be08:	6033      	strmi	r3, [r6, #0]
 800be0a:	6825      	ldr	r5, [r4, #0]
 800be0c:	f015 0506 	ands.w	r5, r5, #6
 800be10:	d106      	bne.n	800be20 <_printf_common+0x48>
 800be12:	f104 0a19 	add.w	sl, r4, #25
 800be16:	68e3      	ldr	r3, [r4, #12]
 800be18:	6832      	ldr	r2, [r6, #0]
 800be1a:	1a9b      	subs	r3, r3, r2
 800be1c:	42ab      	cmp	r3, r5
 800be1e:	dc26      	bgt.n	800be6e <_printf_common+0x96>
 800be20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800be24:	6822      	ldr	r2, [r4, #0]
 800be26:	3b00      	subs	r3, #0
 800be28:	bf18      	it	ne
 800be2a:	2301      	movne	r3, #1
 800be2c:	0692      	lsls	r2, r2, #26
 800be2e:	d42b      	bmi.n	800be88 <_printf_common+0xb0>
 800be30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800be34:	4641      	mov	r1, r8
 800be36:	4638      	mov	r0, r7
 800be38:	47c8      	blx	r9
 800be3a:	3001      	adds	r0, #1
 800be3c:	d01e      	beq.n	800be7c <_printf_common+0xa4>
 800be3e:	6823      	ldr	r3, [r4, #0]
 800be40:	6922      	ldr	r2, [r4, #16]
 800be42:	f003 0306 	and.w	r3, r3, #6
 800be46:	2b04      	cmp	r3, #4
 800be48:	bf02      	ittt	eq
 800be4a:	68e5      	ldreq	r5, [r4, #12]
 800be4c:	6833      	ldreq	r3, [r6, #0]
 800be4e:	1aed      	subeq	r5, r5, r3
 800be50:	68a3      	ldr	r3, [r4, #8]
 800be52:	bf0c      	ite	eq
 800be54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be58:	2500      	movne	r5, #0
 800be5a:	4293      	cmp	r3, r2
 800be5c:	bfc4      	itt	gt
 800be5e:	1a9b      	subgt	r3, r3, r2
 800be60:	18ed      	addgt	r5, r5, r3
 800be62:	2600      	movs	r6, #0
 800be64:	341a      	adds	r4, #26
 800be66:	42b5      	cmp	r5, r6
 800be68:	d11a      	bne.n	800bea0 <_printf_common+0xc8>
 800be6a:	2000      	movs	r0, #0
 800be6c:	e008      	b.n	800be80 <_printf_common+0xa8>
 800be6e:	2301      	movs	r3, #1
 800be70:	4652      	mov	r2, sl
 800be72:	4641      	mov	r1, r8
 800be74:	4638      	mov	r0, r7
 800be76:	47c8      	blx	r9
 800be78:	3001      	adds	r0, #1
 800be7a:	d103      	bne.n	800be84 <_printf_common+0xac>
 800be7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be84:	3501      	adds	r5, #1
 800be86:	e7c6      	b.n	800be16 <_printf_common+0x3e>
 800be88:	18e1      	adds	r1, r4, r3
 800be8a:	1c5a      	adds	r2, r3, #1
 800be8c:	2030      	movs	r0, #48	@ 0x30
 800be8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800be92:	4422      	add	r2, r4
 800be94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800be98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800be9c:	3302      	adds	r3, #2
 800be9e:	e7c7      	b.n	800be30 <_printf_common+0x58>
 800bea0:	2301      	movs	r3, #1
 800bea2:	4622      	mov	r2, r4
 800bea4:	4641      	mov	r1, r8
 800bea6:	4638      	mov	r0, r7
 800bea8:	47c8      	blx	r9
 800beaa:	3001      	adds	r0, #1
 800beac:	d0e6      	beq.n	800be7c <_printf_common+0xa4>
 800beae:	3601      	adds	r6, #1
 800beb0:	e7d9      	b.n	800be66 <_printf_common+0x8e>
	...

0800beb4 <_printf_i>:
 800beb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800beb8:	7e0f      	ldrb	r7, [r1, #24]
 800beba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bebc:	2f78      	cmp	r7, #120	@ 0x78
 800bebe:	4691      	mov	r9, r2
 800bec0:	4680      	mov	r8, r0
 800bec2:	460c      	mov	r4, r1
 800bec4:	469a      	mov	sl, r3
 800bec6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800beca:	d807      	bhi.n	800bedc <_printf_i+0x28>
 800becc:	2f62      	cmp	r7, #98	@ 0x62
 800bece:	d80a      	bhi.n	800bee6 <_printf_i+0x32>
 800bed0:	2f00      	cmp	r7, #0
 800bed2:	f000 80d2 	beq.w	800c07a <_printf_i+0x1c6>
 800bed6:	2f58      	cmp	r7, #88	@ 0x58
 800bed8:	f000 80b9 	beq.w	800c04e <_printf_i+0x19a>
 800bedc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bee0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bee4:	e03a      	b.n	800bf5c <_printf_i+0xa8>
 800bee6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800beea:	2b15      	cmp	r3, #21
 800beec:	d8f6      	bhi.n	800bedc <_printf_i+0x28>
 800beee:	a101      	add	r1, pc, #4	@ (adr r1, 800bef4 <_printf_i+0x40>)
 800bef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bef4:	0800bf4d 	.word	0x0800bf4d
 800bef8:	0800bf61 	.word	0x0800bf61
 800befc:	0800bedd 	.word	0x0800bedd
 800bf00:	0800bedd 	.word	0x0800bedd
 800bf04:	0800bedd 	.word	0x0800bedd
 800bf08:	0800bedd 	.word	0x0800bedd
 800bf0c:	0800bf61 	.word	0x0800bf61
 800bf10:	0800bedd 	.word	0x0800bedd
 800bf14:	0800bedd 	.word	0x0800bedd
 800bf18:	0800bedd 	.word	0x0800bedd
 800bf1c:	0800bedd 	.word	0x0800bedd
 800bf20:	0800c061 	.word	0x0800c061
 800bf24:	0800bf8b 	.word	0x0800bf8b
 800bf28:	0800c01b 	.word	0x0800c01b
 800bf2c:	0800bedd 	.word	0x0800bedd
 800bf30:	0800bedd 	.word	0x0800bedd
 800bf34:	0800c083 	.word	0x0800c083
 800bf38:	0800bedd 	.word	0x0800bedd
 800bf3c:	0800bf8b 	.word	0x0800bf8b
 800bf40:	0800bedd 	.word	0x0800bedd
 800bf44:	0800bedd 	.word	0x0800bedd
 800bf48:	0800c023 	.word	0x0800c023
 800bf4c:	6833      	ldr	r3, [r6, #0]
 800bf4e:	1d1a      	adds	r2, r3, #4
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	6032      	str	r2, [r6, #0]
 800bf54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	e09d      	b.n	800c09c <_printf_i+0x1e8>
 800bf60:	6833      	ldr	r3, [r6, #0]
 800bf62:	6820      	ldr	r0, [r4, #0]
 800bf64:	1d19      	adds	r1, r3, #4
 800bf66:	6031      	str	r1, [r6, #0]
 800bf68:	0606      	lsls	r6, r0, #24
 800bf6a:	d501      	bpl.n	800bf70 <_printf_i+0xbc>
 800bf6c:	681d      	ldr	r5, [r3, #0]
 800bf6e:	e003      	b.n	800bf78 <_printf_i+0xc4>
 800bf70:	0645      	lsls	r5, r0, #25
 800bf72:	d5fb      	bpl.n	800bf6c <_printf_i+0xb8>
 800bf74:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bf78:	2d00      	cmp	r5, #0
 800bf7a:	da03      	bge.n	800bf84 <_printf_i+0xd0>
 800bf7c:	232d      	movs	r3, #45	@ 0x2d
 800bf7e:	426d      	negs	r5, r5
 800bf80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf84:	4859      	ldr	r0, [pc, #356]	@ (800c0ec <_printf_i+0x238>)
 800bf86:	230a      	movs	r3, #10
 800bf88:	e011      	b.n	800bfae <_printf_i+0xfa>
 800bf8a:	6821      	ldr	r1, [r4, #0]
 800bf8c:	6833      	ldr	r3, [r6, #0]
 800bf8e:	0608      	lsls	r0, r1, #24
 800bf90:	f853 5b04 	ldr.w	r5, [r3], #4
 800bf94:	d402      	bmi.n	800bf9c <_printf_i+0xe8>
 800bf96:	0649      	lsls	r1, r1, #25
 800bf98:	bf48      	it	mi
 800bf9a:	b2ad      	uxthmi	r5, r5
 800bf9c:	2f6f      	cmp	r7, #111	@ 0x6f
 800bf9e:	4853      	ldr	r0, [pc, #332]	@ (800c0ec <_printf_i+0x238>)
 800bfa0:	6033      	str	r3, [r6, #0]
 800bfa2:	bf14      	ite	ne
 800bfa4:	230a      	movne	r3, #10
 800bfa6:	2308      	moveq	r3, #8
 800bfa8:	2100      	movs	r1, #0
 800bfaa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bfae:	6866      	ldr	r6, [r4, #4]
 800bfb0:	60a6      	str	r6, [r4, #8]
 800bfb2:	2e00      	cmp	r6, #0
 800bfb4:	bfa2      	ittt	ge
 800bfb6:	6821      	ldrge	r1, [r4, #0]
 800bfb8:	f021 0104 	bicge.w	r1, r1, #4
 800bfbc:	6021      	strge	r1, [r4, #0]
 800bfbe:	b90d      	cbnz	r5, 800bfc4 <_printf_i+0x110>
 800bfc0:	2e00      	cmp	r6, #0
 800bfc2:	d04b      	beq.n	800c05c <_printf_i+0x1a8>
 800bfc4:	4616      	mov	r6, r2
 800bfc6:	fbb5 f1f3 	udiv	r1, r5, r3
 800bfca:	fb03 5711 	mls	r7, r3, r1, r5
 800bfce:	5dc7      	ldrb	r7, [r0, r7]
 800bfd0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bfd4:	462f      	mov	r7, r5
 800bfd6:	42bb      	cmp	r3, r7
 800bfd8:	460d      	mov	r5, r1
 800bfda:	d9f4      	bls.n	800bfc6 <_printf_i+0x112>
 800bfdc:	2b08      	cmp	r3, #8
 800bfde:	d10b      	bne.n	800bff8 <_printf_i+0x144>
 800bfe0:	6823      	ldr	r3, [r4, #0]
 800bfe2:	07df      	lsls	r7, r3, #31
 800bfe4:	d508      	bpl.n	800bff8 <_printf_i+0x144>
 800bfe6:	6923      	ldr	r3, [r4, #16]
 800bfe8:	6861      	ldr	r1, [r4, #4]
 800bfea:	4299      	cmp	r1, r3
 800bfec:	bfde      	ittt	le
 800bfee:	2330      	movle	r3, #48	@ 0x30
 800bff0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bff4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800bff8:	1b92      	subs	r2, r2, r6
 800bffa:	6122      	str	r2, [r4, #16]
 800bffc:	f8cd a000 	str.w	sl, [sp]
 800c000:	464b      	mov	r3, r9
 800c002:	aa03      	add	r2, sp, #12
 800c004:	4621      	mov	r1, r4
 800c006:	4640      	mov	r0, r8
 800c008:	f7ff fee6 	bl	800bdd8 <_printf_common>
 800c00c:	3001      	adds	r0, #1
 800c00e:	d14a      	bne.n	800c0a6 <_printf_i+0x1f2>
 800c010:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c014:	b004      	add	sp, #16
 800c016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c01a:	6823      	ldr	r3, [r4, #0]
 800c01c:	f043 0320 	orr.w	r3, r3, #32
 800c020:	6023      	str	r3, [r4, #0]
 800c022:	4833      	ldr	r0, [pc, #204]	@ (800c0f0 <_printf_i+0x23c>)
 800c024:	2778      	movs	r7, #120	@ 0x78
 800c026:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c02a:	6823      	ldr	r3, [r4, #0]
 800c02c:	6831      	ldr	r1, [r6, #0]
 800c02e:	061f      	lsls	r7, r3, #24
 800c030:	f851 5b04 	ldr.w	r5, [r1], #4
 800c034:	d402      	bmi.n	800c03c <_printf_i+0x188>
 800c036:	065f      	lsls	r7, r3, #25
 800c038:	bf48      	it	mi
 800c03a:	b2ad      	uxthmi	r5, r5
 800c03c:	6031      	str	r1, [r6, #0]
 800c03e:	07d9      	lsls	r1, r3, #31
 800c040:	bf44      	itt	mi
 800c042:	f043 0320 	orrmi.w	r3, r3, #32
 800c046:	6023      	strmi	r3, [r4, #0]
 800c048:	b11d      	cbz	r5, 800c052 <_printf_i+0x19e>
 800c04a:	2310      	movs	r3, #16
 800c04c:	e7ac      	b.n	800bfa8 <_printf_i+0xf4>
 800c04e:	4827      	ldr	r0, [pc, #156]	@ (800c0ec <_printf_i+0x238>)
 800c050:	e7e9      	b.n	800c026 <_printf_i+0x172>
 800c052:	6823      	ldr	r3, [r4, #0]
 800c054:	f023 0320 	bic.w	r3, r3, #32
 800c058:	6023      	str	r3, [r4, #0]
 800c05a:	e7f6      	b.n	800c04a <_printf_i+0x196>
 800c05c:	4616      	mov	r6, r2
 800c05e:	e7bd      	b.n	800bfdc <_printf_i+0x128>
 800c060:	6833      	ldr	r3, [r6, #0]
 800c062:	6825      	ldr	r5, [r4, #0]
 800c064:	6961      	ldr	r1, [r4, #20]
 800c066:	1d18      	adds	r0, r3, #4
 800c068:	6030      	str	r0, [r6, #0]
 800c06a:	062e      	lsls	r6, r5, #24
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	d501      	bpl.n	800c074 <_printf_i+0x1c0>
 800c070:	6019      	str	r1, [r3, #0]
 800c072:	e002      	b.n	800c07a <_printf_i+0x1c6>
 800c074:	0668      	lsls	r0, r5, #25
 800c076:	d5fb      	bpl.n	800c070 <_printf_i+0x1bc>
 800c078:	8019      	strh	r1, [r3, #0]
 800c07a:	2300      	movs	r3, #0
 800c07c:	6123      	str	r3, [r4, #16]
 800c07e:	4616      	mov	r6, r2
 800c080:	e7bc      	b.n	800bffc <_printf_i+0x148>
 800c082:	6833      	ldr	r3, [r6, #0]
 800c084:	1d1a      	adds	r2, r3, #4
 800c086:	6032      	str	r2, [r6, #0]
 800c088:	681e      	ldr	r6, [r3, #0]
 800c08a:	6862      	ldr	r2, [r4, #4]
 800c08c:	2100      	movs	r1, #0
 800c08e:	4630      	mov	r0, r6
 800c090:	f7f4 f89e 	bl	80001d0 <memchr>
 800c094:	b108      	cbz	r0, 800c09a <_printf_i+0x1e6>
 800c096:	1b80      	subs	r0, r0, r6
 800c098:	6060      	str	r0, [r4, #4]
 800c09a:	6863      	ldr	r3, [r4, #4]
 800c09c:	6123      	str	r3, [r4, #16]
 800c09e:	2300      	movs	r3, #0
 800c0a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0a4:	e7aa      	b.n	800bffc <_printf_i+0x148>
 800c0a6:	6923      	ldr	r3, [r4, #16]
 800c0a8:	4632      	mov	r2, r6
 800c0aa:	4649      	mov	r1, r9
 800c0ac:	4640      	mov	r0, r8
 800c0ae:	47d0      	blx	sl
 800c0b0:	3001      	adds	r0, #1
 800c0b2:	d0ad      	beq.n	800c010 <_printf_i+0x15c>
 800c0b4:	6823      	ldr	r3, [r4, #0]
 800c0b6:	079b      	lsls	r3, r3, #30
 800c0b8:	d413      	bmi.n	800c0e2 <_printf_i+0x22e>
 800c0ba:	68e0      	ldr	r0, [r4, #12]
 800c0bc:	9b03      	ldr	r3, [sp, #12]
 800c0be:	4298      	cmp	r0, r3
 800c0c0:	bfb8      	it	lt
 800c0c2:	4618      	movlt	r0, r3
 800c0c4:	e7a6      	b.n	800c014 <_printf_i+0x160>
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	4632      	mov	r2, r6
 800c0ca:	4649      	mov	r1, r9
 800c0cc:	4640      	mov	r0, r8
 800c0ce:	47d0      	blx	sl
 800c0d0:	3001      	adds	r0, #1
 800c0d2:	d09d      	beq.n	800c010 <_printf_i+0x15c>
 800c0d4:	3501      	adds	r5, #1
 800c0d6:	68e3      	ldr	r3, [r4, #12]
 800c0d8:	9903      	ldr	r1, [sp, #12]
 800c0da:	1a5b      	subs	r3, r3, r1
 800c0dc:	42ab      	cmp	r3, r5
 800c0de:	dcf2      	bgt.n	800c0c6 <_printf_i+0x212>
 800c0e0:	e7eb      	b.n	800c0ba <_printf_i+0x206>
 800c0e2:	2500      	movs	r5, #0
 800c0e4:	f104 0619 	add.w	r6, r4, #25
 800c0e8:	e7f5      	b.n	800c0d6 <_printf_i+0x222>
 800c0ea:	bf00      	nop
 800c0ec:	0800c94a 	.word	0x0800c94a
 800c0f0:	0800c95b 	.word	0x0800c95b

0800c0f4 <__sflush_r>:
 800c0f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0fc:	0716      	lsls	r6, r2, #28
 800c0fe:	4605      	mov	r5, r0
 800c100:	460c      	mov	r4, r1
 800c102:	d454      	bmi.n	800c1ae <__sflush_r+0xba>
 800c104:	684b      	ldr	r3, [r1, #4]
 800c106:	2b00      	cmp	r3, #0
 800c108:	dc02      	bgt.n	800c110 <__sflush_r+0x1c>
 800c10a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	dd48      	ble.n	800c1a2 <__sflush_r+0xae>
 800c110:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c112:	2e00      	cmp	r6, #0
 800c114:	d045      	beq.n	800c1a2 <__sflush_r+0xae>
 800c116:	2300      	movs	r3, #0
 800c118:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c11c:	682f      	ldr	r7, [r5, #0]
 800c11e:	6a21      	ldr	r1, [r4, #32]
 800c120:	602b      	str	r3, [r5, #0]
 800c122:	d030      	beq.n	800c186 <__sflush_r+0x92>
 800c124:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c126:	89a3      	ldrh	r3, [r4, #12]
 800c128:	0759      	lsls	r1, r3, #29
 800c12a:	d505      	bpl.n	800c138 <__sflush_r+0x44>
 800c12c:	6863      	ldr	r3, [r4, #4]
 800c12e:	1ad2      	subs	r2, r2, r3
 800c130:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c132:	b10b      	cbz	r3, 800c138 <__sflush_r+0x44>
 800c134:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c136:	1ad2      	subs	r2, r2, r3
 800c138:	2300      	movs	r3, #0
 800c13a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c13c:	6a21      	ldr	r1, [r4, #32]
 800c13e:	4628      	mov	r0, r5
 800c140:	47b0      	blx	r6
 800c142:	1c43      	adds	r3, r0, #1
 800c144:	89a3      	ldrh	r3, [r4, #12]
 800c146:	d106      	bne.n	800c156 <__sflush_r+0x62>
 800c148:	6829      	ldr	r1, [r5, #0]
 800c14a:	291d      	cmp	r1, #29
 800c14c:	d82b      	bhi.n	800c1a6 <__sflush_r+0xb2>
 800c14e:	4a2a      	ldr	r2, [pc, #168]	@ (800c1f8 <__sflush_r+0x104>)
 800c150:	410a      	asrs	r2, r1
 800c152:	07d6      	lsls	r6, r2, #31
 800c154:	d427      	bmi.n	800c1a6 <__sflush_r+0xb2>
 800c156:	2200      	movs	r2, #0
 800c158:	6062      	str	r2, [r4, #4]
 800c15a:	04d9      	lsls	r1, r3, #19
 800c15c:	6922      	ldr	r2, [r4, #16]
 800c15e:	6022      	str	r2, [r4, #0]
 800c160:	d504      	bpl.n	800c16c <__sflush_r+0x78>
 800c162:	1c42      	adds	r2, r0, #1
 800c164:	d101      	bne.n	800c16a <__sflush_r+0x76>
 800c166:	682b      	ldr	r3, [r5, #0]
 800c168:	b903      	cbnz	r3, 800c16c <__sflush_r+0x78>
 800c16a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c16c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c16e:	602f      	str	r7, [r5, #0]
 800c170:	b1b9      	cbz	r1, 800c1a2 <__sflush_r+0xae>
 800c172:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c176:	4299      	cmp	r1, r3
 800c178:	d002      	beq.n	800c180 <__sflush_r+0x8c>
 800c17a:	4628      	mov	r0, r5
 800c17c:	f7ff fa9a 	bl	800b6b4 <_free_r>
 800c180:	2300      	movs	r3, #0
 800c182:	6363      	str	r3, [r4, #52]	@ 0x34
 800c184:	e00d      	b.n	800c1a2 <__sflush_r+0xae>
 800c186:	2301      	movs	r3, #1
 800c188:	4628      	mov	r0, r5
 800c18a:	47b0      	blx	r6
 800c18c:	4602      	mov	r2, r0
 800c18e:	1c50      	adds	r0, r2, #1
 800c190:	d1c9      	bne.n	800c126 <__sflush_r+0x32>
 800c192:	682b      	ldr	r3, [r5, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d0c6      	beq.n	800c126 <__sflush_r+0x32>
 800c198:	2b1d      	cmp	r3, #29
 800c19a:	d001      	beq.n	800c1a0 <__sflush_r+0xac>
 800c19c:	2b16      	cmp	r3, #22
 800c19e:	d11e      	bne.n	800c1de <__sflush_r+0xea>
 800c1a0:	602f      	str	r7, [r5, #0]
 800c1a2:	2000      	movs	r0, #0
 800c1a4:	e022      	b.n	800c1ec <__sflush_r+0xf8>
 800c1a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1aa:	b21b      	sxth	r3, r3
 800c1ac:	e01b      	b.n	800c1e6 <__sflush_r+0xf2>
 800c1ae:	690f      	ldr	r7, [r1, #16]
 800c1b0:	2f00      	cmp	r7, #0
 800c1b2:	d0f6      	beq.n	800c1a2 <__sflush_r+0xae>
 800c1b4:	0793      	lsls	r3, r2, #30
 800c1b6:	680e      	ldr	r6, [r1, #0]
 800c1b8:	bf08      	it	eq
 800c1ba:	694b      	ldreq	r3, [r1, #20]
 800c1bc:	600f      	str	r7, [r1, #0]
 800c1be:	bf18      	it	ne
 800c1c0:	2300      	movne	r3, #0
 800c1c2:	eba6 0807 	sub.w	r8, r6, r7
 800c1c6:	608b      	str	r3, [r1, #8]
 800c1c8:	f1b8 0f00 	cmp.w	r8, #0
 800c1cc:	dde9      	ble.n	800c1a2 <__sflush_r+0xae>
 800c1ce:	6a21      	ldr	r1, [r4, #32]
 800c1d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c1d2:	4643      	mov	r3, r8
 800c1d4:	463a      	mov	r2, r7
 800c1d6:	4628      	mov	r0, r5
 800c1d8:	47b0      	blx	r6
 800c1da:	2800      	cmp	r0, #0
 800c1dc:	dc08      	bgt.n	800c1f0 <__sflush_r+0xfc>
 800c1de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1e6:	81a3      	strh	r3, [r4, #12]
 800c1e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1f0:	4407      	add	r7, r0
 800c1f2:	eba8 0800 	sub.w	r8, r8, r0
 800c1f6:	e7e7      	b.n	800c1c8 <__sflush_r+0xd4>
 800c1f8:	dfbffffe 	.word	0xdfbffffe

0800c1fc <_fflush_r>:
 800c1fc:	b538      	push	{r3, r4, r5, lr}
 800c1fe:	690b      	ldr	r3, [r1, #16]
 800c200:	4605      	mov	r5, r0
 800c202:	460c      	mov	r4, r1
 800c204:	b913      	cbnz	r3, 800c20c <_fflush_r+0x10>
 800c206:	2500      	movs	r5, #0
 800c208:	4628      	mov	r0, r5
 800c20a:	bd38      	pop	{r3, r4, r5, pc}
 800c20c:	b118      	cbz	r0, 800c216 <_fflush_r+0x1a>
 800c20e:	6a03      	ldr	r3, [r0, #32]
 800c210:	b90b      	cbnz	r3, 800c216 <_fflush_r+0x1a>
 800c212:	f7fe ffbd 	bl	800b190 <__sinit>
 800c216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d0f3      	beq.n	800c206 <_fflush_r+0xa>
 800c21e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c220:	07d0      	lsls	r0, r2, #31
 800c222:	d404      	bmi.n	800c22e <_fflush_r+0x32>
 800c224:	0599      	lsls	r1, r3, #22
 800c226:	d402      	bmi.n	800c22e <_fflush_r+0x32>
 800c228:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c22a:	f7ff fa32 	bl	800b692 <__retarget_lock_acquire_recursive>
 800c22e:	4628      	mov	r0, r5
 800c230:	4621      	mov	r1, r4
 800c232:	f7ff ff5f 	bl	800c0f4 <__sflush_r>
 800c236:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c238:	07da      	lsls	r2, r3, #31
 800c23a:	4605      	mov	r5, r0
 800c23c:	d4e4      	bmi.n	800c208 <_fflush_r+0xc>
 800c23e:	89a3      	ldrh	r3, [r4, #12]
 800c240:	059b      	lsls	r3, r3, #22
 800c242:	d4e1      	bmi.n	800c208 <_fflush_r+0xc>
 800c244:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c246:	f7ff fa25 	bl	800b694 <__retarget_lock_release_recursive>
 800c24a:	e7dd      	b.n	800c208 <_fflush_r+0xc>

0800c24c <__swhatbuf_r>:
 800c24c:	b570      	push	{r4, r5, r6, lr}
 800c24e:	460c      	mov	r4, r1
 800c250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c254:	2900      	cmp	r1, #0
 800c256:	b096      	sub	sp, #88	@ 0x58
 800c258:	4615      	mov	r5, r2
 800c25a:	461e      	mov	r6, r3
 800c25c:	da0d      	bge.n	800c27a <__swhatbuf_r+0x2e>
 800c25e:	89a3      	ldrh	r3, [r4, #12]
 800c260:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c264:	f04f 0100 	mov.w	r1, #0
 800c268:	bf14      	ite	ne
 800c26a:	2340      	movne	r3, #64	@ 0x40
 800c26c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c270:	2000      	movs	r0, #0
 800c272:	6031      	str	r1, [r6, #0]
 800c274:	602b      	str	r3, [r5, #0]
 800c276:	b016      	add	sp, #88	@ 0x58
 800c278:	bd70      	pop	{r4, r5, r6, pc}
 800c27a:	466a      	mov	r2, sp
 800c27c:	f000 f862 	bl	800c344 <_fstat_r>
 800c280:	2800      	cmp	r0, #0
 800c282:	dbec      	blt.n	800c25e <__swhatbuf_r+0x12>
 800c284:	9901      	ldr	r1, [sp, #4]
 800c286:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c28a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c28e:	4259      	negs	r1, r3
 800c290:	4159      	adcs	r1, r3
 800c292:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c296:	e7eb      	b.n	800c270 <__swhatbuf_r+0x24>

0800c298 <__smakebuf_r>:
 800c298:	898b      	ldrh	r3, [r1, #12]
 800c29a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c29c:	079d      	lsls	r5, r3, #30
 800c29e:	4606      	mov	r6, r0
 800c2a0:	460c      	mov	r4, r1
 800c2a2:	d507      	bpl.n	800c2b4 <__smakebuf_r+0x1c>
 800c2a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c2a8:	6023      	str	r3, [r4, #0]
 800c2aa:	6123      	str	r3, [r4, #16]
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	6163      	str	r3, [r4, #20]
 800c2b0:	b003      	add	sp, #12
 800c2b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2b4:	ab01      	add	r3, sp, #4
 800c2b6:	466a      	mov	r2, sp
 800c2b8:	f7ff ffc8 	bl	800c24c <__swhatbuf_r>
 800c2bc:	9f00      	ldr	r7, [sp, #0]
 800c2be:	4605      	mov	r5, r0
 800c2c0:	4639      	mov	r1, r7
 800c2c2:	4630      	mov	r0, r6
 800c2c4:	f7ff fa62 	bl	800b78c <_malloc_r>
 800c2c8:	b948      	cbnz	r0, 800c2de <__smakebuf_r+0x46>
 800c2ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2ce:	059a      	lsls	r2, r3, #22
 800c2d0:	d4ee      	bmi.n	800c2b0 <__smakebuf_r+0x18>
 800c2d2:	f023 0303 	bic.w	r3, r3, #3
 800c2d6:	f043 0302 	orr.w	r3, r3, #2
 800c2da:	81a3      	strh	r3, [r4, #12]
 800c2dc:	e7e2      	b.n	800c2a4 <__smakebuf_r+0xc>
 800c2de:	89a3      	ldrh	r3, [r4, #12]
 800c2e0:	6020      	str	r0, [r4, #0]
 800c2e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2e6:	81a3      	strh	r3, [r4, #12]
 800c2e8:	9b01      	ldr	r3, [sp, #4]
 800c2ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c2ee:	b15b      	cbz	r3, 800c308 <__smakebuf_r+0x70>
 800c2f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2f4:	4630      	mov	r0, r6
 800c2f6:	f000 f837 	bl	800c368 <_isatty_r>
 800c2fa:	b128      	cbz	r0, 800c308 <__smakebuf_r+0x70>
 800c2fc:	89a3      	ldrh	r3, [r4, #12]
 800c2fe:	f023 0303 	bic.w	r3, r3, #3
 800c302:	f043 0301 	orr.w	r3, r3, #1
 800c306:	81a3      	strh	r3, [r4, #12]
 800c308:	89a3      	ldrh	r3, [r4, #12]
 800c30a:	431d      	orrs	r5, r3
 800c30c:	81a5      	strh	r5, [r4, #12]
 800c30e:	e7cf      	b.n	800c2b0 <__smakebuf_r+0x18>

0800c310 <memmove>:
 800c310:	4288      	cmp	r0, r1
 800c312:	b510      	push	{r4, lr}
 800c314:	eb01 0402 	add.w	r4, r1, r2
 800c318:	d902      	bls.n	800c320 <memmove+0x10>
 800c31a:	4284      	cmp	r4, r0
 800c31c:	4623      	mov	r3, r4
 800c31e:	d807      	bhi.n	800c330 <memmove+0x20>
 800c320:	1e43      	subs	r3, r0, #1
 800c322:	42a1      	cmp	r1, r4
 800c324:	d008      	beq.n	800c338 <memmove+0x28>
 800c326:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c32a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c32e:	e7f8      	b.n	800c322 <memmove+0x12>
 800c330:	4402      	add	r2, r0
 800c332:	4601      	mov	r1, r0
 800c334:	428a      	cmp	r2, r1
 800c336:	d100      	bne.n	800c33a <memmove+0x2a>
 800c338:	bd10      	pop	{r4, pc}
 800c33a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c33e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c342:	e7f7      	b.n	800c334 <memmove+0x24>

0800c344 <_fstat_r>:
 800c344:	b538      	push	{r3, r4, r5, lr}
 800c346:	4d07      	ldr	r5, [pc, #28]	@ (800c364 <_fstat_r+0x20>)
 800c348:	2300      	movs	r3, #0
 800c34a:	4604      	mov	r4, r0
 800c34c:	4608      	mov	r0, r1
 800c34e:	4611      	mov	r1, r2
 800c350:	602b      	str	r3, [r5, #0]
 800c352:	f7f4 fff6 	bl	8001342 <_fstat>
 800c356:	1c43      	adds	r3, r0, #1
 800c358:	d102      	bne.n	800c360 <_fstat_r+0x1c>
 800c35a:	682b      	ldr	r3, [r5, #0]
 800c35c:	b103      	cbz	r3, 800c360 <_fstat_r+0x1c>
 800c35e:	6023      	str	r3, [r4, #0]
 800c360:	bd38      	pop	{r3, r4, r5, pc}
 800c362:	bf00      	nop
 800c364:	20006088 	.word	0x20006088

0800c368 <_isatty_r>:
 800c368:	b538      	push	{r3, r4, r5, lr}
 800c36a:	4d06      	ldr	r5, [pc, #24]	@ (800c384 <_isatty_r+0x1c>)
 800c36c:	2300      	movs	r3, #0
 800c36e:	4604      	mov	r4, r0
 800c370:	4608      	mov	r0, r1
 800c372:	602b      	str	r3, [r5, #0]
 800c374:	f7f4 fff5 	bl	8001362 <_isatty>
 800c378:	1c43      	adds	r3, r0, #1
 800c37a:	d102      	bne.n	800c382 <_isatty_r+0x1a>
 800c37c:	682b      	ldr	r3, [r5, #0]
 800c37e:	b103      	cbz	r3, 800c382 <_isatty_r+0x1a>
 800c380:	6023      	str	r3, [r4, #0]
 800c382:	bd38      	pop	{r3, r4, r5, pc}
 800c384:	20006088 	.word	0x20006088

0800c388 <_sbrk_r>:
 800c388:	b538      	push	{r3, r4, r5, lr}
 800c38a:	4d06      	ldr	r5, [pc, #24]	@ (800c3a4 <_sbrk_r+0x1c>)
 800c38c:	2300      	movs	r3, #0
 800c38e:	4604      	mov	r4, r0
 800c390:	4608      	mov	r0, r1
 800c392:	602b      	str	r3, [r5, #0]
 800c394:	f7f4 fffe 	bl	8001394 <_sbrk>
 800c398:	1c43      	adds	r3, r0, #1
 800c39a:	d102      	bne.n	800c3a2 <_sbrk_r+0x1a>
 800c39c:	682b      	ldr	r3, [r5, #0]
 800c39e:	b103      	cbz	r3, 800c3a2 <_sbrk_r+0x1a>
 800c3a0:	6023      	str	r3, [r4, #0]
 800c3a2:	bd38      	pop	{r3, r4, r5, pc}
 800c3a4:	20006088 	.word	0x20006088

0800c3a8 <_realloc_r>:
 800c3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ac:	4680      	mov	r8, r0
 800c3ae:	4615      	mov	r5, r2
 800c3b0:	460c      	mov	r4, r1
 800c3b2:	b921      	cbnz	r1, 800c3be <_realloc_r+0x16>
 800c3b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3b8:	4611      	mov	r1, r2
 800c3ba:	f7ff b9e7 	b.w	800b78c <_malloc_r>
 800c3be:	b92a      	cbnz	r2, 800c3cc <_realloc_r+0x24>
 800c3c0:	f7ff f978 	bl	800b6b4 <_free_r>
 800c3c4:	2400      	movs	r4, #0
 800c3c6:	4620      	mov	r0, r4
 800c3c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3cc:	f000 f81a 	bl	800c404 <_malloc_usable_size_r>
 800c3d0:	4285      	cmp	r5, r0
 800c3d2:	4606      	mov	r6, r0
 800c3d4:	d802      	bhi.n	800c3dc <_realloc_r+0x34>
 800c3d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c3da:	d8f4      	bhi.n	800c3c6 <_realloc_r+0x1e>
 800c3dc:	4629      	mov	r1, r5
 800c3de:	4640      	mov	r0, r8
 800c3e0:	f7ff f9d4 	bl	800b78c <_malloc_r>
 800c3e4:	4607      	mov	r7, r0
 800c3e6:	2800      	cmp	r0, #0
 800c3e8:	d0ec      	beq.n	800c3c4 <_realloc_r+0x1c>
 800c3ea:	42b5      	cmp	r5, r6
 800c3ec:	462a      	mov	r2, r5
 800c3ee:	4621      	mov	r1, r4
 800c3f0:	bf28      	it	cs
 800c3f2:	4632      	movcs	r2, r6
 800c3f4:	f7ff f94f 	bl	800b696 <memcpy>
 800c3f8:	4621      	mov	r1, r4
 800c3fa:	4640      	mov	r0, r8
 800c3fc:	f7ff f95a 	bl	800b6b4 <_free_r>
 800c400:	463c      	mov	r4, r7
 800c402:	e7e0      	b.n	800c3c6 <_realloc_r+0x1e>

0800c404 <_malloc_usable_size_r>:
 800c404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c408:	1f18      	subs	r0, r3, #4
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	bfbc      	itt	lt
 800c40e:	580b      	ldrlt	r3, [r1, r0]
 800c410:	18c0      	addlt	r0, r0, r3
 800c412:	4770      	bx	lr

0800c414 <_init>:
 800c414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c416:	bf00      	nop
 800c418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c41a:	bc08      	pop	{r3}
 800c41c:	469e      	mov	lr, r3
 800c41e:	4770      	bx	lr

0800c420 <_fini>:
 800c420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c422:	bf00      	nop
 800c424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c426:	bc08      	pop	{r3}
 800c428:	469e      	mov	lr, r3
 800c42a:	4770      	bx	lr
