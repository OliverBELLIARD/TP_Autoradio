
TP_Autoradio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ac0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  08007c50  08007c50  00008c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fe8  08007fe8  00009074  2**0
                  CONTENTS
  4 .ARM          00000008  08007fe8  08007fe8  00008fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ff0  08007ff0  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ff0  08007ff0  00008ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ff4  08007ff4  00008ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08007ff8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005724  20000074  0800806c  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005798  0800806c  00009798  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f1c  00000000  00000000  000090a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036ec  00000000  00000000  0001cfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  000206b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cfb  00000000  00000000  000217c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028fa3  00000000  00000000  000224c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141c2  00000000  00000000  0004b466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f29f0  00000000  00000000  0005f628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00152018  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e10  00000000  00000000  0015205c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00156e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c38 	.word	0x08007c38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007c38 	.word	0x08007c38

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	4a07      	ldr	r2, [pc, #28]	@ (800058c <vApplicationGetIdleTaskMemory+0x2c>)
 8000570:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	4a06      	ldr	r2, [pc, #24]	@ (8000590 <vApplicationGetIdleTaskMemory+0x30>)
 8000576:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2280      	movs	r2, #128	@ 0x80
 800057c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000094 	.word	0x20000094
 8000590:	200000e8 	.word	0x200000e8

08000594 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000594:	b5b0      	push	{r4, r5, r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800059a:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <MX_FREERTOS_Init+0x30>)
 800059c:	1d3c      	adds	r4, r7, #4
 800059e:	461d      	mov	r5, r3
 80005a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f004 f95c 	bl	800486e <osThreadCreate>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a03      	ldr	r2, [pc, #12]	@ (80005c8 <MX_FREERTOS_Init+0x34>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005bc:	bf00      	nop
 80005be:	3720      	adds	r7, #32
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bdb0      	pop	{r4, r5, r7, pc}
 80005c4:	08007c5c 	.word	0x08007c5c
 80005c8:	20000090 	.word	0x20000090

080005cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005d4:	2001      	movs	r0, #1
 80005d6:	f004 f996 	bl	8004906 <osDelay>
 80005da:	e7fb      	b.n	80005d4 <StartDefaultTask+0x8>

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	@ 0x28
 80005e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	4b2b      	ldr	r3, [pc, #172]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f6:	4a2a      	ldr	r2, [pc, #168]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 80005f8:	f043 0304 	orr.w	r3, r3, #4
 80005fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005fe:	4b28      	ldr	r3, [pc, #160]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000602:	f003 0304 	and.w	r3, r3, #4
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060a:	4b25      	ldr	r3, [pc, #148]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060e:	4a24      	ldr	r2, [pc, #144]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000614:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000616:	4b22      	ldr	r3, [pc, #136]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b1f      	ldr	r3, [pc, #124]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000626:	4a1e      	ldr	r2, [pc, #120]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800062e:	4b1c      	ldr	r3, [pc, #112]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	4b19      	ldr	r3, [pc, #100]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063e:	4a18      	ldr	r2, [pc, #96]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000646:	4b16      	ldr	r3, [pc, #88]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2120      	movs	r1, #32
 8000656:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800065a:	f001 f9ad 	bl	80019b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800065e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000664:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	480b      	ldr	r0, [pc, #44]	@ (80006a4 <MX_GPIO_Init+0xc8>)
 8000676:	f000 fff5 	bl	8001664 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800067a:	2320      	movs	r3, #32
 800067c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067e:	2301      	movs	r3, #1
 8000680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000686:	2300      	movs	r3, #0
 8000688:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4619      	mov	r1, r3
 8000690:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000694:	f000 ffe6 	bl	8001664 <HAL_GPIO_Init>

}
 8000698:	bf00      	nop
 800069a:	3728      	adds	r7, #40	@ 0x28
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40021000 	.word	0x40021000
 80006a4:	48000800 	.word	0x48000800

080006a8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006ac:	f3bf 8f4f 	dsb	sy
}
 80006b0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80006b2:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <__NVIC_SystemReset+0x24>)
 80006b4:	68db      	ldr	r3, [r3, #12]
 80006b6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80006ba:	4904      	ldr	r1, [pc, #16]	@ (80006cc <__NVIC_SystemReset+0x24>)
 80006bc:	4b04      	ldr	r3, [pc, #16]	@ (80006d0 <__NVIC_SystemReset+0x28>)
 80006be:	4313      	orrs	r3, r2
 80006c0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80006c2:	f3bf 8f4f 	dsb	sy
}
 80006c6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <__NVIC_SystemReset+0x20>
 80006cc:	e000ed00 	.word	0xe000ed00
 80006d0:	05fa0004 	.word	0x05fa0004

080006d4 <__io_putchar>:
 * @brief Transmit a character over UART.
 * @param ch: Character to transmit.
 * @retval int: The transmitted character.
 */
int __io_putchar(int ch)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80006dc:	1d39      	adds	r1, r7, #4
 80006de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006e2:	2201      	movs	r2, #1
 80006e4:	4803      	ldr	r0, [pc, #12]	@ (80006f4 <__io_putchar+0x20>)
 80006e6:	f002 fd07 	bl	80030f8 <HAL_UART_Transmit>

	return ch;
 80006ea:	687b      	ldr	r3, [r7, #4]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	200002f4 	.word	0x200002f4

080006f8 <Error_Handler_xTaskCreate>:
/**
 * @brief  Gestion d'erreurs de création de tâche.
 * @param	BaseType_t	Retour de xTaskCreate.
 */
void Error_Handler_xTaskCreate(BaseType_t r)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	/* Vérification si la tâche a été créée avec succès */
	if (pdPASS == r) {
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d103      	bne.n	800070e <Error_Handler_xTaskCreate+0x16>
		/* Si la tâche est créée avec succès, démarrer le scheduler */
#if (LOGS)
		printf("Tâche crée avec succès\r\n");
 8000706:	480c      	ldr	r0, [pc, #48]	@ (8000738 <Error_Handler_xTaskCreate+0x40>)
 8000708:	f006 fa48 	bl	8006b9c <puts>
		/* Cas improbable : code d'erreur non prévu pour xTaskCreate */
		printf("Erreur inconnue lors de la création de la tâche\r\n");
		Error_Handler();  	// Gestion d'erreur générique
		NVIC_SystemReset(); // Réinitialiser le microcontrôleur
	}
}
 800070c:	e010      	b.n	8000730 <Error_Handler_xTaskCreate+0x38>
	} else if (errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY == r) {
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000714:	d105      	bne.n	8000722 <Error_Handler_xTaskCreate+0x2a>
		printf("Erreur: Mémoire insuffisante\r\n");
 8000716:	4809      	ldr	r0, [pc, #36]	@ (800073c <Error_Handler_xTaskCreate+0x44>)
 8000718:	f006 fa40 	bl	8006b9c <puts>
		Error_Handler();
 800071c:	f000 f9e7 	bl	8000aee <Error_Handler>
}
 8000720:	e006      	b.n	8000730 <Error_Handler_xTaskCreate+0x38>
		printf("Erreur inconnue lors de la création de la tâche\r\n");
 8000722:	4807      	ldr	r0, [pc, #28]	@ (8000740 <Error_Handler_xTaskCreate+0x48>)
 8000724:	f006 fa3a 	bl	8006b9c <puts>
		Error_Handler();  	// Gestion d'erreur générique
 8000728:	f000 f9e1 	bl	8000aee <Error_Handler>
		NVIC_SystemReset(); // Réinitialiser le microcontrôleur
 800072c:	f7ff ffbc 	bl	80006a8 <__NVIC_SystemReset>
}
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	08007c78 	.word	0x08007c78
 800073c:	08007c94 	.word	0x08007c94
 8000740:	08007cb4 	.word	0x08007cb4

08000744 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a04      	ldr	r2, [pc, #16]	@ (8000764 <HAL_UART_RxCpltCallback+0x20>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d101      	bne.n	800075a <HAL_UART_RxCpltCallback+0x16>
	{
		shell_uart_receive_irq_cb();	// C'est la fonction qui donne le sémaphore!
 8000756:	f000 fb9f 	bl	8000e98 <shell_uart_receive_irq_cb>
	}
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40004400 	.word	0x40004400

08000768 <fonction>:

int fonction(int argc, char ** argv)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
	if (argc > 1)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2b01      	cmp	r3, #1
 8000776:	dd14      	ble.n	80007a2 <fonction+0x3a>
	{
		for (int i = 0; i < argc; i++)
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	e00d      	b.n	800079a <fonction+0x32>
		{
			printf("Paramètre [%d] = %s\r\n", i+1, argv[i]);
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	1c59      	adds	r1, r3, #1
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	683a      	ldr	r2, [r7, #0]
 8000788:	4413      	add	r3, r2
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	461a      	mov	r2, r3
 800078e:	4807      	ldr	r0, [pc, #28]	@ (80007ac <fonction+0x44>)
 8000790:	f006 f99c 	bl	8006acc <iprintf>
		for (int i = 0; i < argc; i++)
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	3301      	adds	r3, #1
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	68fa      	ldr	r2, [r7, #12]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	429a      	cmp	r2, r3
 80007a0:	dbed      	blt.n	800077e <fonction+0x16>
		}
	}

	return 0;
 80007a2:	2300      	movs	r3, #0
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	08007ce8 	.word	0x08007ce8

080007b0 <calcul>:

int calcul(int argc, char ** argv)
{
 80007b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
	if (argc >= 4)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2b03      	cmp	r3, #3
 80007be:	dd68      	ble.n	8000892 <calcul+0xe2>
	{
		switch(argv[2][0])
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	3308      	adds	r3, #8
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b78      	cmp	r3, #120	@ 0x78
 80007ca:	d03f      	beq.n	800084c <calcul+0x9c>
 80007cc:	2b78      	cmp	r3, #120	@ 0x78
 80007ce:	dc59      	bgt.n	8000884 <calcul+0xd4>
 80007d0:	2b2d      	cmp	r3, #45	@ 0x2d
 80007d2:	d020      	beq.n	8000816 <calcul+0x66>
 80007d4:	2b2d      	cmp	r3, #45	@ 0x2d
 80007d6:	dc55      	bgt.n	8000884 <calcul+0xd4>
 80007d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80007da:	d037      	beq.n	800084c <calcul+0x9c>
 80007dc:	2b2b      	cmp	r3, #43	@ 0x2b
 80007de:	d151      	bne.n	8000884 <calcul+0xd4>
		{
		case '+':
			printf("%s + %s = %d\r\n", argv[1], argv[3], atoi(argv[1])+atoi(argv[3]));
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	3304      	adds	r3, #4
 80007e4:	681c      	ldr	r4, [r3, #0]
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	330c      	adds	r3, #12
 80007ea:	681d      	ldr	r5, [r3, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	3304      	adds	r3, #4
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f006 f820 	bl	8006838 <atoi>
 80007f8:	4606      	mov	r6, r0
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	330c      	adds	r3, #12
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4618      	mov	r0, r3
 8000802:	f006 f819 	bl	8006838 <atoi>
 8000806:	4603      	mov	r3, r0
 8000808:	4433      	add	r3, r6
 800080a:	462a      	mov	r2, r5
 800080c:	4621      	mov	r1, r4
 800080e:	4823      	ldr	r0, [pc, #140]	@ (800089c <calcul+0xec>)
 8000810:	f006 f95c 	bl	8006acc <iprintf>
			break;
 8000814:	e03d      	b.n	8000892 <calcul+0xe2>
		case '-':
			printf("%s - %s = %d\r\n", argv[1], argv[3], atoi(argv[1])-atoi(argv[3]));
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	3304      	adds	r3, #4
 800081a:	681c      	ldr	r4, [r3, #0]
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	330c      	adds	r3, #12
 8000820:	681d      	ldr	r5, [r3, #0]
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	3304      	adds	r3, #4
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4618      	mov	r0, r3
 800082a:	f006 f805 	bl	8006838 <atoi>
 800082e:	4606      	mov	r6, r0
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	330c      	adds	r3, #12
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4618      	mov	r0, r3
 8000838:	f005 fffe 	bl	8006838 <atoi>
 800083c:	4603      	mov	r3, r0
 800083e:	1af3      	subs	r3, r6, r3
 8000840:	462a      	mov	r2, r5
 8000842:	4621      	mov	r1, r4
 8000844:	4816      	ldr	r0, [pc, #88]	@ (80008a0 <calcul+0xf0>)
 8000846:	f006 f941 	bl	8006acc <iprintf>
			break;
 800084a:	e022      	b.n	8000892 <calcul+0xe2>
		case '*':
		case 'x':
			printf("%s * %s = %d\r\n", argv[1], argv[3], atoi(argv[1])*atoi(argv[3]));
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	3304      	adds	r3, #4
 8000850:	681c      	ldr	r4, [r3, #0]
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	330c      	adds	r3, #12
 8000856:	681d      	ldr	r5, [r3, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	3304      	adds	r3, #4
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4618      	mov	r0, r3
 8000860:	f005 ffea 	bl	8006838 <atoi>
 8000864:	4606      	mov	r6, r0
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	330c      	adds	r3, #12
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f005 ffe3 	bl	8006838 <atoi>
 8000872:	4603      	mov	r3, r0
 8000874:	fb06 f303 	mul.w	r3, r6, r3
 8000878:	462a      	mov	r2, r5
 800087a:	4621      	mov	r1, r4
 800087c:	4809      	ldr	r0, [pc, #36]	@ (80008a4 <calcul+0xf4>)
 800087e:	f006 f925 	bl	8006acc <iprintf>
			break;
 8000882:	e006      	b.n	8000892 <calcul+0xe2>
		default:
			printf("Opération '%s' non supporté!\r\n", argv[2]);
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	3308      	adds	r3, #8
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4619      	mov	r1, r3
 800088c:	4806      	ldr	r0, [pc, #24]	@ (80008a8 <calcul+0xf8>)
 800088e:	f006 f91d 	bl	8006acc <iprintf>
		}
	}

	return 0;
 8000892:	2300      	movs	r3, #0
}
 8000894:	4618      	mov	r0, r3
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800089c:	08007d00 	.word	0x08007d00
 80008a0:	08007d10 	.word	0x08007d10
 80008a4:	08007d20 	.word	0x08007d20
 80008a8:	08007d30 	.word	0x08007d30

080008ac <addition>:

int addition(int argc, char ** argv)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
	if (argc > 1)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	dd24      	ble.n	8000906 <addition+0x5a>
	{
		int somme = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
		for (int i = 1; i < argc; i++)
 80008c0:	2301      	movs	r3, #1
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	e017      	b.n	80008f6 <addition+0x4a>
		{
			printf(" + %s", argv[i]);
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	683a      	ldr	r2, [r7, #0]
 80008cc:	4413      	add	r3, r2
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4619      	mov	r1, r3
 80008d2:	480f      	ldr	r0, [pc, #60]	@ (8000910 <addition+0x64>)
 80008d4:	f006 f8fa 	bl	8006acc <iprintf>
			somme = somme + atoi(argv[i]);
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	683a      	ldr	r2, [r7, #0]
 80008de:	4413      	add	r3, r2
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f005 ffa8 	bl	8006838 <atoi>
 80008e8:	4602      	mov	r2, r0
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	4413      	add	r3, r2
 80008ee:	60fb      	str	r3, [r7, #12]
		for (int i = 1; i < argc; i++)
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	3301      	adds	r3, #1
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	68ba      	ldr	r2, [r7, #8]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	dbe3      	blt.n	80008c6 <addition+0x1a>
		}

		printf(" = %d\r\n", somme);
 80008fe:	68f9      	ldr	r1, [r7, #12]
 8000900:	4804      	ldr	r0, [pc, #16]	@ (8000914 <addition+0x68>)
 8000902:	f006 f8e3 	bl	8006acc <iprintf>
	}
	return 0;
 8000906:	2300      	movs	r3, #0
}
 8000908:	4618      	mov	r0, r3
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	08007d54 	.word	0x08007d54
 8000914:	08007d5c 	.word	0x08007d5c

08000918 <task_LED>:

void task_LED (void * pvParameters) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	int duree = (int) pvParameters;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	60fb      	str	r3, [r7, #12]

#if (LOGS)
	printf("%s created\r\n", pcTaskGetName(xTaskGetCurrentTaskHandle()));
 8000924:	f005 f99a 	bl	8005c5c <xTaskGetCurrentTaskHandle>
 8000928:	4603      	mov	r3, r0
 800092a:	4618      	mov	r0, r3
 800092c:	f004 fe74 	bl	8005618 <pcTaskGetName>
 8000930:	4603      	mov	r3, r0
 8000932:	4619      	mov	r1, r3
 8000934:	4806      	ldr	r0, [pc, #24]	@ (8000950 <task_LED+0x38>)
 8000936:	f006 f8c9 	bl	8006acc <iprintf>
#endif
	for (;;)
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800093a:	2120      	movs	r1, #32
 800093c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000940:	f001 f852 	bl	80019e8 <HAL_GPIO_TogglePin>
		vTaskDelay( duree / portTICK_PERIOD_MS );  // Délai de duree en ms
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	4618      	mov	r0, r3
 8000948:	f004 fd22 	bl	8005390 <vTaskDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800094c:	bf00      	nop
 800094e:	e7f4      	b.n	800093a <task_LED+0x22>
 8000950:	08007d64 	.word	0x08007d64

08000954 <task_shell>:
	}
}

void task_shell(void * unused)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
#if (LOGS)
	printf("%s created\r\n", pcTaskGetName(xTaskGetCurrentTaskHandle()));
 800095c:	f005 f97e 	bl	8005c5c <xTaskGetCurrentTaskHandle>
 8000960:	4603      	mov	r3, r0
 8000962:	4618      	mov	r0, r3
 8000964:	f004 fe58 	bl	8005618 <pcTaskGetName>
 8000968:	4603      	mov	r3, r0
 800096a:	4619      	mov	r1, r3
 800096c:	480c      	ldr	r0, [pc, #48]	@ (80009a0 <task_shell+0x4c>)
 800096e:	f006 f8ad 	bl	8006acc <iprintf>
#endif

	shell_init();
 8000972:	f000 fb1d 	bl	8000fb0 <shell_init>
	shell_add('f', fonction, "Une fonction inutile");
 8000976:	4a0b      	ldr	r2, [pc, #44]	@ (80009a4 <task_shell+0x50>)
 8000978:	490b      	ldr	r1, [pc, #44]	@ (80009a8 <task_shell+0x54>)
 800097a:	2066      	movs	r0, #102	@ 0x66
 800097c:	f000 fb50 	bl	8001020 <shell_add>
	shell_add('a', addition, "Effectue une somme");
 8000980:	4a0a      	ldr	r2, [pc, #40]	@ (80009ac <task_shell+0x58>)
 8000982:	490b      	ldr	r1, [pc, #44]	@ (80009b0 <task_shell+0x5c>)
 8000984:	2061      	movs	r0, #97	@ 0x61
 8000986:	f000 fb4b 	bl	8001020 <shell_add>
	shell_add('c', calcul, "Opération entre 2 nombres");
 800098a:	4a0a      	ldr	r2, [pc, #40]	@ (80009b4 <task_shell+0x60>)
 800098c:	490a      	ldr	r1, [pc, #40]	@ (80009b8 <task_shell+0x64>)
 800098e:	2063      	movs	r0, #99	@ 0x63
 8000990:	f000 fb46 	bl	8001020 <shell_add>
	shell_run();	// boucle infinie
 8000994:	f000 fbf0 	bl	8001178 <shell_run>
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	08007d64 	.word	0x08007d64
 80009a4:	08007d74 	.word	0x08007d74
 80009a8:	08000769 	.word	0x08000769
 80009ac:	08007d8c 	.word	0x08007d8c
 80009b0:	080008ad 	.word	0x080008ad
 80009b4:	08007da0 	.word	0x08007da0
 80009b8:	080007b1 	.word	0x080007b1

080009bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c2:	f000 fc43 	bl	800124c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c6:	f000 f841 	bl	8000a4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ca:	f7ff fe07 	bl	80005dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009ce:	f000 f9a5 	bl	8000d1c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	// Test printf
	printf("******* TP Autoradio *******\r\n");
 80009d2:	4817      	ldr	r0, [pc, #92]	@ (8000a30 <main+0x74>)
 80009d4:	f006 f8e2 	bl	8006b9c <puts>

	// Turn on LED2 (Green)
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80009d8:	2120      	movs	r1, #32
 80009da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009de:	f001 f803 	bl	80019e8 <HAL_GPIO_TogglePin>
	// Create the task, storing the handle.
	Error_Handler_xTaskCreate(
 80009e2:	4b14      	ldr	r3, [pc, #80]	@ (8000a34 <main+0x78>)
 80009e4:	9301      	str	r3, [sp, #4]
 80009e6:	2301      	movs	r3, #1
 80009e8:	9300      	str	r3, [sp, #0]
 80009ea:	23c8      	movs	r3, #200	@ 0xc8
 80009ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009f0:	4911      	ldr	r1, [pc, #68]	@ (8000a38 <main+0x7c>)
 80009f2:	4812      	ldr	r0, [pc, #72]	@ (8000a3c <main+0x80>)
 80009f4:	f004 fb94 	bl	8005120 <xTaskCreate>
 80009f8:	4603      	mov	r3, r0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fe7c 	bl	80006f8 <Error_Handler_xTaskCreate>
					STACK_DEPTH, // Stack size in words, not bytes.
					(void *) DELAY_LED_TOGGLE, // Parameter passed into the task.
					1,// Priority at which the task is created.
					&h_task_LED)); // Used to pass out the created task's handle.
	// Shell task
	Error_Handler_xTaskCreate(
 8000a00:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <main+0x84>)
 8000a02:	9301      	str	r3, [sp, #4]
 8000a04:	2302      	movs	r3, #2
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a0e:	490d      	ldr	r1, [pc, #52]	@ (8000a44 <main+0x88>)
 8000a10:	480d      	ldr	r0, [pc, #52]	@ (8000a48 <main+0x8c>)
 8000a12:	f004 fb85 	bl	8005120 <xTaskCreate>
 8000a16:	4603      	mov	r3, r0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fe6d 	bl	80006f8 <Error_Handler_xTaskCreate>
					NULL,
					TASK_SHELL_PRIORITY,
					&h_task_shell));

	// OS Start
	vTaskStartScheduler();
 8000a1e:	f004 fced 	bl	80053fc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000a22:	f7ff fdb7 	bl	8000594 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a26:	f003 ff1b 	bl	8004860 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000a2a:	bf00      	nop
 8000a2c:	e7fd      	b.n	8000a2a <main+0x6e>
 8000a2e:	bf00      	nop
 8000a30:	08007dbc 	.word	0x08007dbc
 8000a34:	200002e8 	.word	0x200002e8
 8000a38:	08007ddc 	.word	0x08007ddc
 8000a3c:	08000919 	.word	0x08000919
 8000a40:	200002ec 	.word	0x200002ec
 8000a44:	08007de4 	.word	0x08007de4
 8000a48:	08000955 	.word	0x08000955

08000a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b096      	sub	sp, #88	@ 0x58
 8000a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	2244      	movs	r2, #68	@ 0x44
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f006 f9b2 	bl	8006dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a60:	463b      	mov	r3, r7
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a6e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a72:	f000 ffe1 	bl	8001a38 <HAL_PWREx_ControlVoltageScaling>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a7c:	f000 f837 	bl	8000aee <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a80:	2302      	movs	r3, #2
 8000a82:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a88:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a8a:	2310      	movs	r3, #16
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a92:	2302      	movs	r3, #2
 8000a94:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a96:	2301      	movs	r3, #1
 8000a98:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a9a:	230a      	movs	r3, #10
 8000a9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a9e:	2307      	movs	r3, #7
 8000aa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f001 f818 	bl	8001ae4 <HAL_RCC_OscConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000aba:	f000 f818 	bl	8000aee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000abe:	230f      	movs	r3, #15
 8000ac0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	2104      	movs	r1, #4
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 fbe0 	bl	800229c <HAL_RCC_ClockConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ae2:	f000 f804 	bl	8000aee <Error_Handler>
  }
}
 8000ae6:	bf00      	nop
 8000ae8:	3758      	adds	r7, #88	@ 0x58
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000af2:	b672      	cpsid	i
}
 8000af4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000af6:	bf00      	nop
 8000af8:	e7fd      	b.n	8000af6 <Error_Handler+0x8>
	...

08000afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b02:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b06:	4a10      	ldr	r2, [pc, #64]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b24:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b26:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	210f      	movs	r1, #15
 8000b36:	f06f 0001 	mvn.w	r0, #1
 8000b3a:	f000 fcde 	bl	80014fa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40021000 	.word	0x40021000

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <NMI_Handler+0x4>

08000b54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <MemManage_Handler+0x4>

08000b64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <BusFault_Handler+0x4>

08000b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <UsageFault_Handler+0x4>

08000b74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b86:	f000 fbbd 	bl	8001304 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b8a:	f005 f877 	bl	8005c7c <xTaskGetSchedulerState>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d001      	beq.n	8000b98 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b94:	f005 fbd0 	bl	8006338 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ba0:	4802      	ldr	r0, [pc, #8]	@ (8000bac <USART2_IRQHandler+0x10>)
 8000ba2:	f002 fb7f 	bl	80032a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200002f4 	.word	0x200002f4

08000bb0 <_read>:
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	e00a      	b.n	8000bd8 <_read+0x28>
 8000bc2:	f3af 8000 	nop.w
 8000bc6:	4601      	mov	r1, r0
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	60ba      	str	r2, [r7, #8]
 8000bce:	b2ca      	uxtb	r2, r1
 8000bd0:	701a      	strb	r2, [r3, #0]
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697a      	ldr	r2, [r7, #20]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	dbf0      	blt.n	8000bc2 <_read+0x12>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4618      	mov	r0, r3
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <_write>:
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b086      	sub	sp, #24
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	60f8      	str	r0, [r7, #12]
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	e009      	b.n	8000c10 <_write+0x26>
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	1c5a      	adds	r2, r3, #1
 8000c00:	60ba      	str	r2, [r7, #8]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fd65 	bl	80006d4 <__io_putchar>
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	697a      	ldr	r2, [r7, #20]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	dbf1      	blt.n	8000bfc <_write+0x12>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <_close>:
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c2e:	4618      	mov	r0, r3
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <_fstat>:
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
 8000c42:	6039      	str	r1, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <_isatty>:
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
 8000c62:	2301      	movs	r3, #1
 8000c64:	4618      	mov	r0, r3
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <_lseek>:
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
	...

08000c8c <_sbrk>:
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	4a14      	ldr	r2, [pc, #80]	@ (8000ce8 <_sbrk+0x5c>)
 8000c96:	4b15      	ldr	r3, [pc, #84]	@ (8000cec <_sbrk+0x60>)
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	4b13      	ldr	r3, [pc, #76]	@ (8000cf0 <_sbrk+0x64>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d102      	bne.n	8000cae <_sbrk+0x22>
 8000ca8:	4b11      	ldr	r3, [pc, #68]	@ (8000cf0 <_sbrk+0x64>)
 8000caa:	4a12      	ldr	r2, [pc, #72]	@ (8000cf4 <_sbrk+0x68>)
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	4b10      	ldr	r3, [pc, #64]	@ (8000cf0 <_sbrk+0x64>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d207      	bcs.n	8000ccc <_sbrk+0x40>
 8000cbc:	f006 f8d0 	bl	8006e60 <__errno>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cca:	e009      	b.n	8000ce0 <_sbrk+0x54>
 8000ccc:	4b08      	ldr	r3, [pc, #32]	@ (8000cf0 <_sbrk+0x64>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	4a05      	ldr	r2, [pc, #20]	@ (8000cf0 <_sbrk+0x64>)
 8000cdc:	6013      	str	r3, [r2, #0]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20018000 	.word	0x20018000
 8000cec:	00000400 	.word	0x00000400
 8000cf0:	200002f0 	.word	0x200002f0
 8000cf4:	20005798 	.word	0x20005798

08000cf8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cfc:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <SystemInit+0x20>)
 8000cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d02:	4a05      	ldr	r2, [pc, #20]	@ (8000d18 <SystemInit+0x20>)
 8000d04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d20:	4b14      	ldr	r3, [pc, #80]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d22:	4a15      	ldr	r2, [pc, #84]	@ (8000d78 <MX_USART2_UART_Init+0x5c>)
 8000d24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d26:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d42:	220c      	movs	r2, #12
 8000d44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d52:	4b08      	ldr	r3, [pc, #32]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d5e:	4805      	ldr	r0, [pc, #20]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d60:	f002 f97c 	bl	800305c <HAL_UART_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d6a:	f7ff fec0 	bl	8000aee <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200002f4 	.word	0x200002f4
 8000d78:	40004400 	.word	0x40004400

08000d7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b0ac      	sub	sp, #176	@ 0xb0
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2288      	movs	r2, #136	@ 0x88
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f006 f811 	bl	8006dc4 <memset>
  if(uartHandle->Instance==USART2)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a25      	ldr	r2, [pc, #148]	@ (8000e3c <HAL_UART_MspInit+0xc0>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d143      	bne.n	8000e34 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dac:	2302      	movs	r3, #2
 8000dae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000db0:	2300      	movs	r3, #0
 8000db2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	4618      	mov	r0, r3
 8000dba:	f001 fc93 	bl	80026e4 <HAL_RCCEx_PeriphCLKConfig>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dc4:	f7ff fe93 	bl	8000aee <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e40 <HAL_UART_MspInit+0xc4>)
 8000dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dcc:	4a1c      	ldr	r2, [pc, #112]	@ (8000e40 <HAL_UART_MspInit+0xc4>)
 8000dce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e40 <HAL_UART_MspInit+0xc4>)
 8000dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de0:	4b17      	ldr	r3, [pc, #92]	@ (8000e40 <HAL_UART_MspInit+0xc4>)
 8000de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de4:	4a16      	ldr	r2, [pc, #88]	@ (8000e40 <HAL_UART_MspInit+0xc4>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dec:	4b14      	ldr	r3, [pc, #80]	@ (8000e40 <HAL_UART_MspInit+0xc4>)
 8000dee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000df8:	230c      	movs	r3, #12
 8000dfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e10:	2307      	movs	r3, #7
 8000e12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e20:	f000 fc20 	bl	8001664 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2105      	movs	r1, #5
 8000e28:	2026      	movs	r0, #38	@ 0x26
 8000e2a:	f000 fb66 	bl	80014fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e2e:	2026      	movs	r0, #38	@ 0x26
 8000e30:	f000 fb7f 	bl	8001532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e34:	bf00      	nop
 8000e36:	37b0      	adds	r7, #176	@ 0xb0
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40004400 	.word	0x40004400
 8000e40:	40021000 	.word	0x40021000

08000e44 <Reset_Handler>:
 8000e44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e7c <LoopForever+0x2>
 8000e48:	f7ff ff56 	bl	8000cf8 <SystemInit>
 8000e4c:	480c      	ldr	r0, [pc, #48]	@ (8000e80 <LoopForever+0x6>)
 8000e4e:	490d      	ldr	r1, [pc, #52]	@ (8000e84 <LoopForever+0xa>)
 8000e50:	4a0d      	ldr	r2, [pc, #52]	@ (8000e88 <LoopForever+0xe>)
 8000e52:	2300      	movs	r3, #0
 8000e54:	e002      	b.n	8000e5c <LoopCopyDataInit>

08000e56 <CopyDataInit>:
 8000e56:	58d4      	ldr	r4, [r2, r3]
 8000e58:	50c4      	str	r4, [r0, r3]
 8000e5a:	3304      	adds	r3, #4

08000e5c <LoopCopyDataInit>:
 8000e5c:	18c4      	adds	r4, r0, r3
 8000e5e:	428c      	cmp	r4, r1
 8000e60:	d3f9      	bcc.n	8000e56 <CopyDataInit>
 8000e62:	4a0a      	ldr	r2, [pc, #40]	@ (8000e8c <LoopForever+0x12>)
 8000e64:	4c0a      	ldr	r4, [pc, #40]	@ (8000e90 <LoopForever+0x16>)
 8000e66:	2300      	movs	r3, #0
 8000e68:	e001      	b.n	8000e6e <LoopFillZerobss>

08000e6a <FillZerobss>:
 8000e6a:	6013      	str	r3, [r2, #0]
 8000e6c:	3204      	adds	r2, #4

08000e6e <LoopFillZerobss>:
 8000e6e:	42a2      	cmp	r2, r4
 8000e70:	d3fb      	bcc.n	8000e6a <FillZerobss>
 8000e72:	f005 fffb 	bl	8006e6c <__libc_init_array>
 8000e76:	f7ff fda1 	bl	80009bc <main>

08000e7a <LoopForever>:
 8000e7a:	e7fe      	b.n	8000e7a <LoopForever>
 8000e7c:	20018000 	.word	0x20018000
 8000e80:	20000000 	.word	0x20000000
 8000e84:	20000074 	.word	0x20000074
 8000e88:	08007ff8 	.word	0x08007ff8
 8000e8c:	20000074 	.word	0x20000074
 8000e90:	20005798 	.word	0x20005798

08000e94 <ADC1_2_IRQHandler>:
 8000e94:	e7fe      	b.n	8000e94 <ADC1_2_IRQHandler>
	...

08000e98 <shell_uart_receive_irq_cb>:
static char print_buffer[BUFFER_SIZE];
static SemaphoreHandle_t sem_uart_read = NULL;


void shell_uart_receive_irq_cb(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]

	xSemaphoreGiveFromISR(sem_uart_read, &pxHigherPriorityTaskWoken);
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <shell_uart_receive_irq_cb+0x38>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	1d3a      	adds	r2, r7, #4
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f003 feb8 	bl	8004c20 <xQueueGiveFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d007      	beq.n	8000ec6 <shell_uart_receive_irq_cb+0x2e>
 8000eb6:	4b07      	ldr	r3, [pc, #28]	@ (8000ed4 <shell_uart_receive_irq_cb+0x3c>)
 8000eb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	f3bf 8f4f 	dsb	sy
 8000ec2:	f3bf 8f6f 	isb	sy
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200006a8 	.word	0x200006a8
 8000ed4:	e000ed04 	.word	0xe000ed04

08000ed8 <uart_read>:

static char uart_read() {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
	char c;

	HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t*)(&c), 1);
 8000ede:	1dfb      	adds	r3, r7, #7
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4807      	ldr	r0, [pc, #28]	@ (8000f04 <uart_read+0x2c>)
 8000ee6:	f002 f991 	bl	800320c <HAL_UART_Receive_IT>
	// il faut mettre la tâche shell dans l'état bloqué, jusqu'à l'interruption de réception de caractère
	// prendre un sémaphore vide par exemple
	xSemaphoreTake(sem_uart_read, portMAX_DELAY);
 8000eea:	4b07      	ldr	r3, [pc, #28]	@ (8000f08 <uart_read+0x30>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f003 ff24 	bl	8004d40 <xQueueSemaphoreTake>

	return c;
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200002f4 	.word	0x200002f4
 8000f08:	200006a8 	.word	0x200006a8

08000f0c <uart_write>:

static int uart_write(char * s, uint16_t size) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
 8000f18:	887a      	ldrh	r2, [r7, #2]
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	4803      	ldr	r0, [pc, #12]	@ (8000f30 <uart_write+0x24>)
 8000f22:	f002 f8e9 	bl	80030f8 <HAL_UART_Transmit>
	return size;
 8000f26:	887b      	ldrh	r3, [r7, #2]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200002f4 	.word	0x200002f4

08000f34 <sh_help>:

static int sh_help(int argc, char ** argv) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af02      	add	r7, sp, #8
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	e022      	b.n	8000f8a <sh_help+0x56>
		int size;
		size = snprintf (print_buffer, BUFFER_SIZE, "%c: %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 8000f44:	4916      	ldr	r1, [pc, #88]	@ (8000fa0 <sh_help+0x6c>)
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	4413      	add	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	440b      	add	r3, r1
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	4912      	ldr	r1, [pc, #72]	@ (8000fa0 <sh_help+0x6c>)
 8000f58:	68fa      	ldr	r2, [r7, #12]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	4413      	add	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	440b      	add	r3, r1
 8000f64:	3308      	adds	r3, #8
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa4 <sh_help+0x70>)
 8000f6e:	2128      	movs	r1, #40	@ 0x28
 8000f70:	480d      	ldr	r0, [pc, #52]	@ (8000fa8 <sh_help+0x74>)
 8000f72:	f005 fe1b 	bl	8006bac <sniprintf>
 8000f76:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480a      	ldr	r0, [pc, #40]	@ (8000fa8 <sh_help+0x74>)
 8000f80:	f7ff ffc4 	bl	8000f0c <uart_write>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	3301      	adds	r3, #1
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <sh_help+0x78>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	dbd7      	blt.n	8000f44 <sh_help+0x10>
	}

	return 0;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000380 	.word	0x20000380
 8000fa4:	08007dec 	.word	0x08007dec
 8000fa8:	20000680 	.word	0x20000680
 8000fac:	2000037c 	.word	0x2000037c

08000fb0 <shell_init>:

void shell_init() {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
	int size = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]

	size = snprintf (print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8000fba:	4a13      	ldr	r2, [pc, #76]	@ (8001008 <shell_init+0x58>)
 8000fbc:	2128      	movs	r1, #40	@ 0x28
 8000fbe:	4813      	ldr	r0, [pc, #76]	@ (800100c <shell_init+0x5c>)
 8000fc0:	f005 fdf4 	bl	8006bac <sniprintf>
 8000fc4:	6078      	str	r0, [r7, #4]
	uart_write(print_buffer, size);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	4619      	mov	r1, r3
 8000fcc:	480f      	ldr	r0, [pc, #60]	@ (800100c <shell_init+0x5c>)
 8000fce:	f7ff ff9d 	bl	8000f0c <uart_write>

	sem_uart_read = xSemaphoreCreateBinary();
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f003 fdc8 	bl	8004b6c <xQueueGenericCreate>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	4a0c      	ldr	r2, [pc, #48]	@ (8001010 <shell_init+0x60>)
 8000fe0:	6013      	str	r3, [r2, #0]
	if (sem_uart_read == NULL)
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8001010 <shell_init+0x60>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d104      	bne.n	8000ff4 <shell_init+0x44>
	{
		printf("Error semaphore shell\r\n");
 8000fea:	480a      	ldr	r0, [pc, #40]	@ (8001014 <shell_init+0x64>)
 8000fec:	f005 fdd6 	bl	8006b9c <puts>
		while(1);
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <shell_init+0x40>
	}

	shell_add('h', sh_help, "Help");
 8000ff4:	4a08      	ldr	r2, [pc, #32]	@ (8001018 <shell_init+0x68>)
 8000ff6:	4909      	ldr	r1, [pc, #36]	@ (800101c <shell_init+0x6c>)
 8000ff8:	2068      	movs	r0, #104	@ 0x68
 8000ffa:	f000 f811 	bl	8001020 <shell_add>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	08007df8 	.word	0x08007df8
 800100c:	20000680 	.word	0x20000680
 8001010:	200006a8 	.word	0x200006a8
 8001014:	08007e20 	.word	0x08007e20
 8001018:	08007e38 	.word	0x08007e38
 800101c:	08000f35 	.word	0x08000f35

08001020 <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 800102e:	4b19      	ldr	r3, [pc, #100]	@ (8001094 <shell_add+0x74>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b3f      	cmp	r3, #63	@ 0x3f
 8001034:	dc26      	bgt.n	8001084 <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 8001036:	4b17      	ldr	r3, [pc, #92]	@ (8001094 <shell_add+0x74>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	4917      	ldr	r1, [pc, #92]	@ (8001098 <shell_add+0x78>)
 800103c:	4613      	mov	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4413      	add	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	440b      	add	r3, r1
 8001046:	7bfa      	ldrb	r2, [r7, #15]
 8001048:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 800104a:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <shell_add+0x74>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	4912      	ldr	r1, [pc, #72]	@ (8001098 <shell_add+0x78>)
 8001050:	4613      	mov	r3, r2
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	4413      	add	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	440b      	add	r3, r1
 800105a:	3304      	adds	r3, #4
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 8001060:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <shell_add+0x74>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	490c      	ldr	r1, [pc, #48]	@ (8001098 <shell_add+0x78>)
 8001066:	4613      	mov	r3, r2
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	4413      	add	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	440b      	add	r3, r1
 8001070:	3308      	adds	r3, #8
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 8001076:	4b07      	ldr	r3, [pc, #28]	@ (8001094 <shell_add+0x74>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	3301      	adds	r3, #1
 800107c:	4a05      	ldr	r2, [pc, #20]	@ (8001094 <shell_add+0x74>)
 800107e:	6013      	str	r3, [r2, #0]
		return 0;
 8001080:	2300      	movs	r3, #0
 8001082:	e001      	b.n	8001088 <shell_add+0x68>
	}

	return -1;
 8001084:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001088:	4618      	mov	r0, r3
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	2000037c 	.word	0x2000037c
 8001098:	20000380 	.word	0x20000380

0800109c <shell_exec>:

static int shell_exec(char * buf) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b090      	sub	sp, #64	@ 0x40
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	int i;

	char c = buf[0];
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 80010ac:	2300      	movs	r3, #0
 80010ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80010b0:	e040      	b.n	8001134 <shell_exec+0x98>
		if (shell_func_list[i].c == c) {
 80010b2:	492d      	ldr	r1, [pc, #180]	@ (8001168 <shell_exec+0xcc>)
 80010b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80010b6:	4613      	mov	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4413      	add	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	440b      	add	r3, r1
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d131      	bne.n	800112e <shell_exec+0x92>
			argc = 1;
 80010ca:	2301      	movs	r3, #1
 80010cc:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80010d6:	e013      	b.n	8001100 <shell_exec+0x64>
				if(*p == ' ') {
 80010d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b20      	cmp	r3, #32
 80010de:	d10c      	bne.n	80010fa <shell_exec+0x5e>
					*p = '\0';
 80010e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 80010e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010e8:	1c5a      	adds	r2, r3, #1
 80010ea:	63ba      	str	r2, [r7, #56]	@ 0x38
 80010ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80010ee:	3201      	adds	r2, #1
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	3340      	adds	r3, #64	@ 0x40
 80010f4:	443b      	add	r3, r7
 80010f6:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80010fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010fc:	3301      	adds	r3, #1
 80010fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8001100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d002      	beq.n	800110e <shell_exec+0x72>
 8001108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800110a:	2b07      	cmp	r3, #7
 800110c:	dde4      	ble.n	80010d8 <shell_exec+0x3c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 800110e:	4916      	ldr	r1, [pc, #88]	@ (8001168 <shell_exec+0xcc>)
 8001110:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001112:	4613      	mov	r3, r2
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	4413      	add	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	440b      	add	r3, r1
 800111c:	3304      	adds	r3, #4
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f107 020c 	add.w	r2, r7, #12
 8001124:	4611      	mov	r1, r2
 8001126:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001128:	4798      	blx	r3
 800112a:	4603      	mov	r3, r0
 800112c:	e017      	b.n	800115e <shell_exec+0xc2>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 800112e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001130:	3301      	adds	r3, #1
 8001132:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001134:	4b0d      	ldr	r3, [pc, #52]	@ (800116c <shell_exec+0xd0>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800113a:	429a      	cmp	r2, r3
 800113c:	dbb9      	blt.n	80010b2 <shell_exec+0x16>
		}
	}

	int size;
	size = snprintf (print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 800113e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001142:	4a0b      	ldr	r2, [pc, #44]	@ (8001170 <shell_exec+0xd4>)
 8001144:	2128      	movs	r1, #40	@ 0x28
 8001146:	480b      	ldr	r0, [pc, #44]	@ (8001174 <shell_exec+0xd8>)
 8001148:	f005 fd30 	bl	8006bac <sniprintf>
 800114c:	62f8      	str	r0, [r7, #44]	@ 0x2c
	uart_write(print_buffer, size);
 800114e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001150:	b29b      	uxth	r3, r3
 8001152:	4619      	mov	r1, r3
 8001154:	4807      	ldr	r0, [pc, #28]	@ (8001174 <shell_exec+0xd8>)
 8001156:	f7ff fed9 	bl	8000f0c <uart_write>
	return -1;
 800115a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800115e:	4618      	mov	r0, r3
 8001160:	3740      	adds	r7, #64	@ 0x40
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000380 	.word	0x20000380
 800116c:	2000037c 	.word	0x2000037c
 8001170:	08007e40 	.word	0x08007e40
 8001174:	20000680 	.word	0x20000680

08001178 <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run() {
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
	int reading = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]

	static char cmd_buffer[BUFFER_SIZE];

	while (1) {
		uart_write(prompt, 2);
 8001186:	2102      	movs	r1, #2
 8001188:	482a      	ldr	r0, [pc, #168]	@ (8001234 <shell_run+0xbc>)
 800118a:	f7ff febf 	bl	8000f0c <uart_write>
		reading = 1;
 800118e:	2301      	movs	r3, #1
 8001190:	60fb      	str	r3, [r7, #12]

		while(reading) {
 8001192:	e047      	b.n	8001224 <shell_run+0xac>
			char c = uart_read();
 8001194:	f7ff fea0 	bl	8000ed8 <uart_read>
 8001198:	4603      	mov	r3, r0
 800119a:	70fb      	strb	r3, [r7, #3]
			int size;

			switch (c) {
 800119c:	78fb      	ldrb	r3, [r7, #3]
 800119e:	2b08      	cmp	r3, #8
 80011a0:	d025      	beq.n	80011ee <shell_run+0x76>
 80011a2:	2b0d      	cmp	r3, #13
 80011a4:	d12e      	bne.n	8001204 <shell_run+0x8c>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (print_buffer, BUFFER_SIZE, "\r\n");
 80011a6:	4a24      	ldr	r2, [pc, #144]	@ (8001238 <shell_run+0xc0>)
 80011a8:	2128      	movs	r1, #40	@ 0x28
 80011aa:	4824      	ldr	r0, [pc, #144]	@ (800123c <shell_run+0xc4>)
 80011ac:	f005 fcfe 	bl	8006bac <sniprintf>
 80011b0:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	4619      	mov	r1, r3
 80011b8:	4820      	ldr	r0, [pc, #128]	@ (800123c <shell_run+0xc4>)
 80011ba:	f7ff fea7 	bl	8000f0c <uart_write>
				cmd_buffer[pos++] = 0;     //add \0 char at end of string
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	60ba      	str	r2, [r7, #8]
 80011c4:	4a1e      	ldr	r2, [pc, #120]	@ (8001240 <shell_run+0xc8>)
 80011c6:	2100      	movs	r1, #0
 80011c8:	54d1      	strb	r1, [r2, r3]
				size = snprintf (print_buffer, BUFFER_SIZE, ":%s\r\n", cmd_buffer);
 80011ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001240 <shell_run+0xc8>)
 80011cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001244 <shell_run+0xcc>)
 80011ce:	2128      	movs	r1, #40	@ 0x28
 80011d0:	481a      	ldr	r0, [pc, #104]	@ (800123c <shell_run+0xc4>)
 80011d2:	f005 fceb 	bl	8006bac <sniprintf>
 80011d6:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	4619      	mov	r1, r3
 80011de:	4817      	ldr	r0, [pc, #92]	@ (800123c <shell_run+0xc4>)
 80011e0:	f7ff fe94 	bl	8000f0c <uart_write>
				reading = 0;        //exit read loop
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
				pos = 0;            //reset buffer
 80011e8:	2300      	movs	r3, #0
 80011ea:	60bb      	str	r3, [r7, #8]
				break;
 80011ec:	e01a      	b.n	8001224 <shell_run+0xac>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	dd16      	ble.n	8001222 <shell_run+0xaa>
					pos--;          //remove it in buffer
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	60bb      	str	r3, [r7, #8]

					uart_write(backspace, 3);	// delete the char on the terminal
 80011fa:	2103      	movs	r1, #3
 80011fc:	4812      	ldr	r0, [pc, #72]	@ (8001248 <shell_run+0xd0>)
 80011fe:	f7ff fe85 	bl	8000f0c <uart_write>
				}
				break;
 8001202:	e00e      	b.n	8001222 <shell_run+0xaa>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	2b27      	cmp	r3, #39	@ 0x27
 8001208:	dc0c      	bgt.n	8001224 <shell_run+0xac>
					uart_write(&c, 1);
 800120a:	1cfb      	adds	r3, r7, #3
 800120c:	2101      	movs	r1, #1
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fe7c 	bl	8000f0c <uart_write>
					cmd_buffer[pos++] = c; //store
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	60ba      	str	r2, [r7, #8]
 800121a:	78f9      	ldrb	r1, [r7, #3]
 800121c:	4a08      	ldr	r2, [pc, #32]	@ (8001240 <shell_run+0xc8>)
 800121e:	54d1      	strb	r1, [r2, r3]
 8001220:	e000      	b.n	8001224 <shell_run+0xac>
				break;
 8001222:	bf00      	nop
		while(reading) {
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1b4      	bne.n	8001194 <shell_run+0x1c>
				}
			}
		}
		shell_exec(cmd_buffer);
 800122a:	4805      	ldr	r0, [pc, #20]	@ (8001240 <shell_run+0xc8>)
 800122c:	f7ff ff36 	bl	800109c <shell_exec>
		uart_write(prompt, 2);
 8001230:	e7a9      	b.n	8001186 <shell_run+0xe>
 8001232:	bf00      	nop
 8001234:	20000008 	.word	0x20000008
 8001238:	08007e58 	.word	0x08007e58
 800123c:	20000680 	.word	0x20000680
 8001240:	200006ac 	.word	0x200006ac
 8001244:	08007e5c 	.word	0x08007e5c
 8001248:	20000004 	.word	0x20000004

0800124c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001256:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <HAL_Init+0x3c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a0b      	ldr	r2, [pc, #44]	@ (8001288 <HAL_Init+0x3c>)
 800125c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001260:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001262:	2003      	movs	r0, #3
 8001264:	f000 f93e 	bl	80014e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001268:	200f      	movs	r0, #15
 800126a:	f000 f80f 	bl	800128c <HAL_InitTick>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d002      	beq.n	800127a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	71fb      	strb	r3, [r7, #7]
 8001278:	e001      	b.n	800127e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800127a:	f7ff fc3f 	bl	8000afc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800127e:	79fb      	ldrb	r3, [r7, #7]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40022000 	.word	0x40022000

0800128c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001298:	4b17      	ldr	r3, [pc, #92]	@ (80012f8 <HAL_InitTick+0x6c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d023      	beq.n	80012e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012a0:	4b16      	ldr	r3, [pc, #88]	@ (80012fc <HAL_InitTick+0x70>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b14      	ldr	r3, [pc, #80]	@ (80012f8 <HAL_InitTick+0x6c>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f949 	bl	800154e <HAL_SYSTICK_Config>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d10f      	bne.n	80012e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b0f      	cmp	r3, #15
 80012c6:	d809      	bhi.n	80012dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c8:	2200      	movs	r2, #0
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012d0:	f000 f913 	bl	80014fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001300 <HAL_InitTick+0x74>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	e007      	b.n	80012ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	73fb      	strb	r3, [r7, #15]
 80012e0:	e004      	b.n	80012ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	73fb      	strb	r3, [r7, #15]
 80012e6:	e001      	b.n	80012ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000010 	.word	0x20000010
 80012fc:	20000000 	.word	0x20000000
 8001300:	2000000c 	.word	0x2000000c

08001304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001308:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <HAL_IncTick+0x20>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <HAL_IncTick+0x24>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4413      	add	r3, r2
 8001314:	4a04      	ldr	r2, [pc, #16]	@ (8001328 <HAL_IncTick+0x24>)
 8001316:	6013      	str	r3, [r2, #0]
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000010 	.word	0x20000010
 8001328:	200006d4 	.word	0x200006d4

0800132c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return uwTick;
 8001330:	4b03      	ldr	r3, [pc, #12]	@ (8001340 <HAL_GetTick+0x14>)
 8001332:	681b      	ldr	r3, [r3, #0]
}
 8001334:	4618      	mov	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	200006d4 	.word	0x200006d4

08001344 <__NVIC_SetPriorityGrouping>:
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001360:	4013      	ands	r3, r2
 8001362:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800136c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001370:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001376:	4a04      	ldr	r2, [pc, #16]	@ (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	60d3      	str	r3, [r2, #12]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_GetPriorityGrouping>:
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001390:	4b04      	ldr	r3, [pc, #16]	@ (80013a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	f003 0307 	and.w	r3, r3, #7
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_EnableIRQ>:
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	db0b      	blt.n	80013d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	f003 021f 	and.w	r2, r3, #31
 80013c0:	4907      	ldr	r1, [pc, #28]	@ (80013e0 <__NVIC_EnableIRQ+0x38>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	095b      	lsrs	r3, r3, #5
 80013c8:	2001      	movs	r0, #1
 80013ca:	fa00 f202 	lsl.w	r2, r0, r2
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000e100 	.word	0xe000e100

080013e4 <__NVIC_SetPriority>:
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	db0a      	blt.n	800140e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	490c      	ldr	r1, [pc, #48]	@ (8001430 <__NVIC_SetPriority+0x4c>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	0112      	lsls	r2, r2, #4
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	440b      	add	r3, r1
 8001408:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800140c:	e00a      	b.n	8001424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4908      	ldr	r1, [pc, #32]	@ (8001434 <__NVIC_SetPriority+0x50>)
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	3b04      	subs	r3, #4
 800141c:	0112      	lsls	r2, r2, #4
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	440b      	add	r3, r1
 8001422:	761a      	strb	r2, [r3, #24]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000e100 	.word	0xe000e100
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <NVIC_EncodePriority>:
{
 8001438:	b480      	push	{r7}
 800143a:	b089      	sub	sp, #36	@ 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f1c3 0307 	rsb	r3, r3, #7
 8001452:	2b04      	cmp	r3, #4
 8001454:	bf28      	it	cs
 8001456:	2304      	movcs	r3, #4
 8001458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3304      	adds	r3, #4
 800145e:	2b06      	cmp	r3, #6
 8001460:	d902      	bls.n	8001468 <NVIC_EncodePriority+0x30>
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3b03      	subs	r3, #3
 8001466:	e000      	b.n	800146a <NVIC_EncodePriority+0x32>
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	401a      	ands	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001480:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	fa01 f303 	lsl.w	r3, r1, r3
 800148a:	43d9      	mvns	r1, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	4313      	orrs	r3, r2
}
 8001492:	4618      	mov	r0, r3
 8001494:	3724      	adds	r7, #36	@ 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014b0:	d301      	bcc.n	80014b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b2:	2301      	movs	r3, #1
 80014b4:	e00f      	b.n	80014d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b6:	4a0a      	ldr	r2, [pc, #40]	@ (80014e0 <SysTick_Config+0x40>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014be:	210f      	movs	r1, #15
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014c4:	f7ff ff8e 	bl	80013e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c8:	4b05      	ldr	r3, [pc, #20]	@ (80014e0 <SysTick_Config+0x40>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ce:	4b04      	ldr	r3, [pc, #16]	@ (80014e0 <SysTick_Config+0x40>)
 80014d0:	2207      	movs	r2, #7
 80014d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	e000e010 	.word	0xe000e010

080014e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff ff29 	bl	8001344 <__NVIC_SetPriorityGrouping>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b086      	sub	sp, #24
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800150c:	f7ff ff3e 	bl	800138c <__NVIC_GetPriorityGrouping>
 8001510:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	68b9      	ldr	r1, [r7, #8]
 8001516:	6978      	ldr	r0, [r7, #20]
 8001518:	f7ff ff8e 	bl	8001438 <NVIC_EncodePriority>
 800151c:	4602      	mov	r2, r0
 800151e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001522:	4611      	mov	r1, r2
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff5d 	bl	80013e4 <__NVIC_SetPriority>
}
 800152a:	bf00      	nop
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	4603      	mov	r3, r0
 800153a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800153c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff31 	bl	80013a8 <__NVIC_EnableIRQ>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ffa2 	bl	80014a0 <SysTick_Config>
 800155c:	4603      	mov	r3, r0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001566:	b480      	push	{r7}
 8001568:	b085      	sub	sp, #20
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d008      	beq.n	8001590 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2204      	movs	r2, #4
 8001582:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e022      	b.n	80015d6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 020e 	bic.w	r2, r2, #14
 800159e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0201 	bic.w	r2, r2, #1
 80015ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b4:	f003 021c 	and.w	r2, r3, #28
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015bc:	2101      	movs	r1, #1
 80015be:	fa01 f202 	lsl.w	r2, r1, r2
 80015c2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b084      	sub	sp, #16
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d005      	beq.n	8001606 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2204      	movs	r2, #4
 80015fe:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	73fb      	strb	r3, [r7, #15]
 8001604:	e029      	b.n	800165a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 020e 	bic.w	r2, r2, #14
 8001614:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 0201 	bic.w	r2, r2, #1
 8001624:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162a:	f003 021c 	and.w	r2, r3, #28
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	2101      	movs	r1, #1
 8001634:	fa01 f202 	lsl.w	r2, r1, r2
 8001638:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2201      	movs	r2, #1
 800163e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	4798      	blx	r3
    }
  }
  return status;
 800165a:	7bfb      	ldrb	r3, [r7, #15]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001664:	b480      	push	{r7}
 8001666:	b087      	sub	sp, #28
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001672:	e17f      	b.n	8001974 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	2101      	movs	r1, #1
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	4013      	ands	r3, r2
 8001682:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 8171 	beq.w	800196e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	2b01      	cmp	r3, #1
 8001696:	d005      	beq.n	80016a4 <HAL_GPIO_Init+0x40>
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d130      	bne.n	8001706 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	2203      	movs	r2, #3
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	68da      	ldr	r2, [r3, #12]
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016da:	2201      	movs	r2, #1
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4013      	ands	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	091b      	lsrs	r3, r3, #4
 80016f0:	f003 0201 	and.w	r2, r3, #1
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	2b03      	cmp	r3, #3
 8001710:	d118      	bne.n	8001744 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001716:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001718:	2201      	movs	r2, #1
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4013      	ands	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	08db      	lsrs	r3, r3, #3
 800172e:	f003 0201 	and.w	r2, r3, #1
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4313      	orrs	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	2b03      	cmp	r3, #3
 800174e:	d017      	beq.n	8001780 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	2203      	movs	r2, #3
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4313      	orrs	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d123      	bne.n	80017d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	08da      	lsrs	r2, r3, #3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3208      	adds	r2, #8
 8001794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001798:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	220f      	movs	r2, #15
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4013      	ands	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	691a      	ldr	r2, [r3, #16]
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	08da      	lsrs	r2, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3208      	adds	r2, #8
 80017ce:	6939      	ldr	r1, [r7, #16]
 80017d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	2203      	movs	r2, #3
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4013      	ands	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0203 	and.w	r2, r3, #3
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 80ac 	beq.w	800196e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001816:	4b5f      	ldr	r3, [pc, #380]	@ (8001994 <HAL_GPIO_Init+0x330>)
 8001818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800181a:	4a5e      	ldr	r2, [pc, #376]	@ (8001994 <HAL_GPIO_Init+0x330>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6613      	str	r3, [r2, #96]	@ 0x60
 8001822:	4b5c      	ldr	r3, [pc, #368]	@ (8001994 <HAL_GPIO_Init+0x330>)
 8001824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800182e:	4a5a      	ldr	r2, [pc, #360]	@ (8001998 <HAL_GPIO_Init+0x334>)
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	089b      	lsrs	r3, r3, #2
 8001834:	3302      	adds	r3, #2
 8001836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	220f      	movs	r2, #15
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43db      	mvns	r3, r3
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4013      	ands	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001858:	d025      	beq.n	80018a6 <HAL_GPIO_Init+0x242>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a4f      	ldr	r2, [pc, #316]	@ (800199c <HAL_GPIO_Init+0x338>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d01f      	beq.n	80018a2 <HAL_GPIO_Init+0x23e>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a4e      	ldr	r2, [pc, #312]	@ (80019a0 <HAL_GPIO_Init+0x33c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d019      	beq.n	800189e <HAL_GPIO_Init+0x23a>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a4d      	ldr	r2, [pc, #308]	@ (80019a4 <HAL_GPIO_Init+0x340>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d013      	beq.n	800189a <HAL_GPIO_Init+0x236>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a4c      	ldr	r2, [pc, #304]	@ (80019a8 <HAL_GPIO_Init+0x344>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d00d      	beq.n	8001896 <HAL_GPIO_Init+0x232>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a4b      	ldr	r2, [pc, #300]	@ (80019ac <HAL_GPIO_Init+0x348>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d007      	beq.n	8001892 <HAL_GPIO_Init+0x22e>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a4a      	ldr	r2, [pc, #296]	@ (80019b0 <HAL_GPIO_Init+0x34c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d101      	bne.n	800188e <HAL_GPIO_Init+0x22a>
 800188a:	2306      	movs	r3, #6
 800188c:	e00c      	b.n	80018a8 <HAL_GPIO_Init+0x244>
 800188e:	2307      	movs	r3, #7
 8001890:	e00a      	b.n	80018a8 <HAL_GPIO_Init+0x244>
 8001892:	2305      	movs	r3, #5
 8001894:	e008      	b.n	80018a8 <HAL_GPIO_Init+0x244>
 8001896:	2304      	movs	r3, #4
 8001898:	e006      	b.n	80018a8 <HAL_GPIO_Init+0x244>
 800189a:	2303      	movs	r3, #3
 800189c:	e004      	b.n	80018a8 <HAL_GPIO_Init+0x244>
 800189e:	2302      	movs	r3, #2
 80018a0:	e002      	b.n	80018a8 <HAL_GPIO_Init+0x244>
 80018a2:	2301      	movs	r3, #1
 80018a4:	e000      	b.n	80018a8 <HAL_GPIO_Init+0x244>
 80018a6:	2300      	movs	r3, #0
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	f002 0203 	and.w	r2, r2, #3
 80018ae:	0092      	lsls	r2, r2, #2
 80018b0:	4093      	lsls	r3, r2
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018b8:	4937      	ldr	r1, [pc, #220]	@ (8001998 <HAL_GPIO_Init+0x334>)
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	089b      	lsrs	r3, r3, #2
 80018be:	3302      	adds	r3, #2
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018c6:	4b3b      	ldr	r3, [pc, #236]	@ (80019b4 <HAL_GPIO_Init+0x350>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	43db      	mvns	r3, r3
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4013      	ands	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018ea:	4a32      	ldr	r2, [pc, #200]	@ (80019b4 <HAL_GPIO_Init+0x350>)
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018f0:	4b30      	ldr	r3, [pc, #192]	@ (80019b4 <HAL_GPIO_Init+0x350>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4013      	ands	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	4313      	orrs	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001914:	4a27      	ldr	r2, [pc, #156]	@ (80019b4 <HAL_GPIO_Init+0x350>)
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800191a:	4b26      	ldr	r3, [pc, #152]	@ (80019b4 <HAL_GPIO_Init+0x350>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	43db      	mvns	r3, r3
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4013      	ands	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4313      	orrs	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800193e:	4a1d      	ldr	r2, [pc, #116]	@ (80019b4 <HAL_GPIO_Init+0x350>)
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001944:	4b1b      	ldr	r3, [pc, #108]	@ (80019b4 <HAL_GPIO_Init+0x350>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	43db      	mvns	r3, r3
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4313      	orrs	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001968:	4a12      	ldr	r2, [pc, #72]	@ (80019b4 <HAL_GPIO_Init+0x350>)
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	3301      	adds	r3, #1
 8001972:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa22 f303 	lsr.w	r3, r2, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	f47f ae78 	bne.w	8001674 <HAL_GPIO_Init+0x10>
  }
}
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	371c      	adds	r7, #28
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40021000 	.word	0x40021000
 8001998:	40010000 	.word	0x40010000
 800199c:	48000400 	.word	0x48000400
 80019a0:	48000800 	.word	0x48000800
 80019a4:	48000c00 	.word	0x48000c00
 80019a8:	48001000 	.word	0x48001000
 80019ac:	48001400 	.word	0x48001400
 80019b0:	48001800 	.word	0x48001800
 80019b4:	40010400 	.word	0x40010400

080019b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	807b      	strh	r3, [r7, #2]
 80019c4:	4613      	mov	r3, r2
 80019c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019c8:	787b      	ldrb	r3, [r7, #1]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019ce:	887a      	ldrh	r2, [r7, #2]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019d4:	e002      	b.n	80019dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019d6:	887a      	ldrh	r2, [r7, #2]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019fa:	887a      	ldrh	r2, [r7, #2]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4013      	ands	r3, r2
 8001a00:	041a      	lsls	r2, r3, #16
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	43d9      	mvns	r1, r3
 8001a06:	887b      	ldrh	r3, [r7, #2]
 8001a08:	400b      	ands	r3, r1
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	619a      	str	r2, [r3, #24]
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a20:	4b04      	ldr	r3, [pc, #16]	@ (8001a34 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40007000 	.word	0x40007000

08001a38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a46:	d130      	bne.n	8001aaa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a48:	4b23      	ldr	r3, [pc, #140]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a54:	d038      	beq.n	8001ac8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a56:	4b20      	ldr	r3, [pc, #128]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a5e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a64:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a66:	4b1d      	ldr	r3, [pc, #116]	@ (8001adc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2232      	movs	r2, #50	@ 0x32
 8001a6c:	fb02 f303 	mul.w	r3, r2, r3
 8001a70:	4a1b      	ldr	r2, [pc, #108]	@ (8001ae0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a72:	fba2 2303 	umull	r2, r3, r2, r3
 8001a76:	0c9b      	lsrs	r3, r3, #18
 8001a78:	3301      	adds	r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a7c:	e002      	b.n	8001a84 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a84:	4b14      	ldr	r3, [pc, #80]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a90:	d102      	bne.n	8001a98 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1f2      	bne.n	8001a7e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a98:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aa4:	d110      	bne.n	8001ac8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e00f      	b.n	8001aca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ab2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ab6:	d007      	beq.n	8001ac8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ab8:	4b07      	ldr	r3, [pc, #28]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ac0:	4a05      	ldr	r2, [pc, #20]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ac2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ac6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40007000 	.word	0x40007000
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	431bde83 	.word	0x431bde83

08001ae4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e3ca      	b.n	800228c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001af6:	4b97      	ldr	r3, [pc, #604]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 030c 	and.w	r3, r3, #12
 8001afe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b00:	4b94      	ldr	r3, [pc, #592]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0310 	and.w	r3, r3, #16
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 80e4 	beq.w	8001ce0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d007      	beq.n	8001b2e <HAL_RCC_OscConfig+0x4a>
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	2b0c      	cmp	r3, #12
 8001b22:	f040 808b 	bne.w	8001c3c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	f040 8087 	bne.w	8001c3c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b2e:	4b89      	ldr	r3, [pc, #548]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d005      	beq.n	8001b46 <HAL_RCC_OscConfig+0x62>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e3a2      	b.n	800228c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a1a      	ldr	r2, [r3, #32]
 8001b4a:	4b82      	ldr	r3, [pc, #520]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d004      	beq.n	8001b60 <HAL_RCC_OscConfig+0x7c>
 8001b56:	4b7f      	ldr	r3, [pc, #508]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b5e:	e005      	b.n	8001b6c <HAL_RCC_OscConfig+0x88>
 8001b60:	4b7c      	ldr	r3, [pc, #496]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b66:	091b      	lsrs	r3, r3, #4
 8001b68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d223      	bcs.n	8001bb8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 fd55 	bl	8002624 <RCC_SetFlashLatencyFromMSIRange>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e383      	b.n	800228c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b84:	4b73      	ldr	r3, [pc, #460]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a72      	ldr	r2, [pc, #456]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001b8a:	f043 0308 	orr.w	r3, r3, #8
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	4b70      	ldr	r3, [pc, #448]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	496d      	ldr	r1, [pc, #436]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ba2:	4b6c      	ldr	r3, [pc, #432]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	021b      	lsls	r3, r3, #8
 8001bb0:	4968      	ldr	r1, [pc, #416]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	604b      	str	r3, [r1, #4]
 8001bb6:	e025      	b.n	8001c04 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bb8:	4b66      	ldr	r3, [pc, #408]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a65      	ldr	r2, [pc, #404]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001bbe:	f043 0308 	orr.w	r3, r3, #8
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	4b63      	ldr	r3, [pc, #396]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	4960      	ldr	r1, [pc, #384]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bd6:	4b5f      	ldr	r3, [pc, #380]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	021b      	lsls	r3, r3, #8
 8001be4:	495b      	ldr	r1, [pc, #364]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d109      	bne.n	8001c04 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f000 fd15 	bl	8002624 <RCC_SetFlashLatencyFromMSIRange>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e343      	b.n	800228c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c04:	f000 fc4a 	bl	800249c <HAL_RCC_GetSysClockFreq>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	4b52      	ldr	r3, [pc, #328]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	091b      	lsrs	r3, r3, #4
 8001c10:	f003 030f 	and.w	r3, r3, #15
 8001c14:	4950      	ldr	r1, [pc, #320]	@ (8001d58 <HAL_RCC_OscConfig+0x274>)
 8001c16:	5ccb      	ldrb	r3, [r1, r3]
 8001c18:	f003 031f 	and.w	r3, r3, #31
 8001c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c20:	4a4e      	ldr	r2, [pc, #312]	@ (8001d5c <HAL_RCC_OscConfig+0x278>)
 8001c22:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c24:	4b4e      	ldr	r3, [pc, #312]	@ (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fb2f 	bl	800128c <HAL_InitTick>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d052      	beq.n	8001cde <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	e327      	b.n	800228c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d032      	beq.n	8001caa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c44:	4b43      	ldr	r3, [pc, #268]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a42      	ldr	r2, [pc, #264]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c50:	f7ff fb6c 	bl	800132c <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c58:	f7ff fb68 	bl	800132c <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e310      	b.n	800228c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c6a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f0      	beq.n	8001c58 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c76:	4b37      	ldr	r3, [pc, #220]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a36      	ldr	r2, [pc, #216]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001c7c:	f043 0308 	orr.w	r3, r3, #8
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	4b34      	ldr	r3, [pc, #208]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	4931      	ldr	r1, [pc, #196]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c94:	4b2f      	ldr	r3, [pc, #188]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	021b      	lsls	r3, r3, #8
 8001ca2:	492c      	ldr	r1, [pc, #176]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]
 8001ca8:	e01a      	b.n	8001ce0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001caa:	4b2a      	ldr	r3, [pc, #168]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a29      	ldr	r2, [pc, #164]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001cb0:	f023 0301 	bic.w	r3, r3, #1
 8001cb4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cb6:	f7ff fb39 	bl	800132c <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cbe:	f7ff fb35 	bl	800132c <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e2dd      	b.n	800228c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cd0:	4b20      	ldr	r3, [pc, #128]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1f0      	bne.n	8001cbe <HAL_RCC_OscConfig+0x1da>
 8001cdc:	e000      	b.n	8001ce0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cde:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d074      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d005      	beq.n	8001cfe <HAL_RCC_OscConfig+0x21a>
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	2b0c      	cmp	r3, #12
 8001cf6:	d10e      	bne.n	8001d16 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	d10b      	bne.n	8001d16 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfe:	4b15      	ldr	r3, [pc, #84]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d064      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x2f0>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d160      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e2ba      	b.n	800228c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d1e:	d106      	bne.n	8001d2e <HAL_RCC_OscConfig+0x24a>
 8001d20:	4b0c      	ldr	r3, [pc, #48]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0b      	ldr	r2, [pc, #44]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001d26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d2a:	6013      	str	r3, [r2, #0]
 8001d2c:	e026      	b.n	8001d7c <HAL_RCC_OscConfig+0x298>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d36:	d115      	bne.n	8001d64 <HAL_RCC_OscConfig+0x280>
 8001d38:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a05      	ldr	r2, [pc, #20]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001d3e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	4b03      	ldr	r3, [pc, #12]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a02      	ldr	r2, [pc, #8]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001d4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	e014      	b.n	8001d7c <HAL_RCC_OscConfig+0x298>
 8001d52:	bf00      	nop
 8001d54:	40021000 	.word	0x40021000
 8001d58:	08007e6c 	.word	0x08007e6c
 8001d5c:	20000000 	.word	0x20000000
 8001d60:	2000000c 	.word	0x2000000c
 8001d64:	4ba0      	ldr	r3, [pc, #640]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a9f      	ldr	r2, [pc, #636]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001d6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d6e:	6013      	str	r3, [r2, #0]
 8001d70:	4b9d      	ldr	r3, [pc, #628]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a9c      	ldr	r2, [pc, #624]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001d76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d013      	beq.n	8001dac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d84:	f7ff fad2 	bl	800132c <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d8c:	f7ff face 	bl	800132c <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b64      	cmp	r3, #100	@ 0x64
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e276      	b.n	800228c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d9e:	4b92      	ldr	r3, [pc, #584]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCC_OscConfig+0x2a8>
 8001daa:	e014      	b.n	8001dd6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dac:	f7ff fabe 	bl	800132c <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db4:	f7ff faba 	bl	800132c <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b64      	cmp	r3, #100	@ 0x64
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e262      	b.n	800228c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dc6:	4b88      	ldr	r3, [pc, #544]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x2d0>
 8001dd2:	e000      	b.n	8001dd6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d060      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d005      	beq.n	8001df4 <HAL_RCC_OscConfig+0x310>
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	2b0c      	cmp	r3, #12
 8001dec:	d119      	bne.n	8001e22 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d116      	bne.n	8001e22 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001df4:	4b7c      	ldr	r3, [pc, #496]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_RCC_OscConfig+0x328>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e23f      	b.n	800228c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0c:	4b76      	ldr	r3, [pc, #472]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	061b      	lsls	r3, r3, #24
 8001e1a:	4973      	ldr	r1, [pc, #460]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e20:	e040      	b.n	8001ea4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d023      	beq.n	8001e72 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e2a:	4b6f      	ldr	r3, [pc, #444]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a6e      	ldr	r2, [pc, #440]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e36:	f7ff fa79 	bl	800132c <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e3e:	f7ff fa75 	bl	800132c <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e21d      	b.n	800228c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e50:	4b65      	ldr	r3, [pc, #404]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0f0      	beq.n	8001e3e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5c:	4b62      	ldr	r3, [pc, #392]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	061b      	lsls	r3, r3, #24
 8001e6a:	495f      	ldr	r1, [pc, #380]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]
 8001e70:	e018      	b.n	8001ea4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e72:	4b5d      	ldr	r3, [pc, #372]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a5c      	ldr	r2, [pc, #368]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001e78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7e:	f7ff fa55 	bl	800132c <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e86:	f7ff fa51 	bl	800132c <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e1f9      	b.n	800228c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e98:	4b53      	ldr	r3, [pc, #332]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1f0      	bne.n	8001e86 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d03c      	beq.n	8001f2a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d01c      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eb8:	4b4b      	ldr	r3, [pc, #300]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ebe:	4a4a      	ldr	r2, [pc, #296]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec8:	f7ff fa30 	bl	800132c <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed0:	f7ff fa2c 	bl	800132c <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e1d4      	b.n	800228c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ee2:	4b41      	ldr	r3, [pc, #260]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001ee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0ef      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x3ec>
 8001ef0:	e01b      	b.n	8001f2a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ef2:	4b3d      	ldr	r3, [pc, #244]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ef8:	4a3b      	ldr	r2, [pc, #236]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001efa:	f023 0301 	bic.w	r3, r3, #1
 8001efe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f02:	f7ff fa13 	bl	800132c <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f0a:	f7ff fa0f 	bl	800132c <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e1b7      	b.n	800228c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f1c:	4b32      	ldr	r3, [pc, #200]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1ef      	bne.n	8001f0a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0304 	and.w	r3, r3, #4
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 80a6 	beq.w	8002084 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10d      	bne.n	8001f64 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f48:	4b27      	ldr	r3, [pc, #156]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4c:	4a26      	ldr	r2, [pc, #152]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001f4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f52:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f54:	4b24      	ldr	r3, [pc, #144]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f60:	2301      	movs	r3, #1
 8001f62:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f64:	4b21      	ldr	r3, [pc, #132]	@ (8001fec <HAL_RCC_OscConfig+0x508>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d118      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f70:	4b1e      	ldr	r3, [pc, #120]	@ (8001fec <HAL_RCC_OscConfig+0x508>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a1d      	ldr	r2, [pc, #116]	@ (8001fec <HAL_RCC_OscConfig+0x508>)
 8001f76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f7c:	f7ff f9d6 	bl	800132c <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f84:	f7ff f9d2 	bl	800132c <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e17a      	b.n	800228c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f96:	4b15      	ldr	r3, [pc, #84]	@ (8001fec <HAL_RCC_OscConfig+0x508>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d108      	bne.n	8001fbc <HAL_RCC_OscConfig+0x4d8>
 8001faa:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fba:	e029      	b.n	8002010 <HAL_RCC_OscConfig+0x52c>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b05      	cmp	r3, #5
 8001fc2:	d115      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x50c>
 8001fc4:	4b08      	ldr	r3, [pc, #32]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fca:	4a07      	ldr	r2, [pc, #28]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001fcc:	f043 0304 	orr.w	r3, r3, #4
 8001fd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fd4:	4b04      	ldr	r3, [pc, #16]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fda:	4a03      	ldr	r2, [pc, #12]	@ (8001fe8 <HAL_RCC_OscConfig+0x504>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fe4:	e014      	b.n	8002010 <HAL_RCC_OscConfig+0x52c>
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40007000 	.word	0x40007000
 8001ff0:	4b9c      	ldr	r3, [pc, #624]	@ (8002264 <HAL_RCC_OscConfig+0x780>)
 8001ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff6:	4a9b      	ldr	r2, [pc, #620]	@ (8002264 <HAL_RCC_OscConfig+0x780>)
 8001ff8:	f023 0301 	bic.w	r3, r3, #1
 8001ffc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002000:	4b98      	ldr	r3, [pc, #608]	@ (8002264 <HAL_RCC_OscConfig+0x780>)
 8002002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002006:	4a97      	ldr	r2, [pc, #604]	@ (8002264 <HAL_RCC_OscConfig+0x780>)
 8002008:	f023 0304 	bic.w	r3, r3, #4
 800200c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d016      	beq.n	8002046 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002018:	f7ff f988 	bl	800132c <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800201e:	e00a      	b.n	8002036 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002020:	f7ff f984 	bl	800132c <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800202e:	4293      	cmp	r3, r2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e12a      	b.n	800228c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002036:	4b8b      	ldr	r3, [pc, #556]	@ (8002264 <HAL_RCC_OscConfig+0x780>)
 8002038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0ed      	beq.n	8002020 <HAL_RCC_OscConfig+0x53c>
 8002044:	e015      	b.n	8002072 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002046:	f7ff f971 	bl	800132c <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800204c:	e00a      	b.n	8002064 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204e:	f7ff f96d 	bl	800132c <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	f241 3288 	movw	r2, #5000	@ 0x1388
 800205c:	4293      	cmp	r3, r2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e113      	b.n	800228c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002064:	4b7f      	ldr	r3, [pc, #508]	@ (8002264 <HAL_RCC_OscConfig+0x780>)
 8002066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1ed      	bne.n	800204e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002072:	7ffb      	ldrb	r3, [r7, #31]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d105      	bne.n	8002084 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002078:	4b7a      	ldr	r3, [pc, #488]	@ (8002264 <HAL_RCC_OscConfig+0x780>)
 800207a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800207c:	4a79      	ldr	r2, [pc, #484]	@ (8002264 <HAL_RCC_OscConfig+0x780>)
 800207e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002082:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 80fe 	beq.w	800228a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002092:	2b02      	cmp	r3, #2
 8002094:	f040 80d0 	bne.w	8002238 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002098:	4b72      	ldr	r3, [pc, #456]	@ (8002264 <HAL_RCC_OscConfig+0x780>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f003 0203 	and.w	r2, r3, #3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d130      	bne.n	800210e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b6:	3b01      	subs	r3, #1
 80020b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d127      	bne.n	800210e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d11f      	bne.n	800210e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80020d8:	2a07      	cmp	r2, #7
 80020da:	bf14      	ite	ne
 80020dc:	2201      	movne	r2, #1
 80020de:	2200      	moveq	r2, #0
 80020e0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d113      	bne.n	800210e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020f0:	085b      	lsrs	r3, r3, #1
 80020f2:	3b01      	subs	r3, #1
 80020f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d109      	bne.n	800210e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002104:	085b      	lsrs	r3, r3, #1
 8002106:	3b01      	subs	r3, #1
 8002108:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800210a:	429a      	cmp	r2, r3
 800210c:	d06e      	beq.n	80021ec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	2b0c      	cmp	r3, #12
 8002112:	d069      	beq.n	80021e8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002114:	4b53      	ldr	r3, [pc, #332]	@ (8002264 <HAL_RCC_OscConfig+0x780>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d105      	bne.n	800212c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002120:	4b50      	ldr	r3, [pc, #320]	@ (8002264 <HAL_RCC_OscConfig+0x780>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0ad      	b.n	800228c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002130:	4b4c      	ldr	r3, [pc, #304]	@ (8002264 <HAL_RCC_OscConfig+0x780>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a4b      	ldr	r2, [pc, #300]	@ (8002264 <HAL_RCC_OscConfig+0x780>)
 8002136:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800213a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800213c:	f7ff f8f6 	bl	800132c <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002144:	f7ff f8f2 	bl	800132c <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e09a      	b.n	800228c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002156:	4b43      	ldr	r3, [pc, #268]	@ (8002264 <HAL_RCC_OscConfig+0x780>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002162:	4b40      	ldr	r3, [pc, #256]	@ (8002264 <HAL_RCC_OscConfig+0x780>)
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	4b40      	ldr	r3, [pc, #256]	@ (8002268 <HAL_RCC_OscConfig+0x784>)
 8002168:	4013      	ands	r3, r2
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002172:	3a01      	subs	r2, #1
 8002174:	0112      	lsls	r2, r2, #4
 8002176:	4311      	orrs	r1, r2
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800217c:	0212      	lsls	r2, r2, #8
 800217e:	4311      	orrs	r1, r2
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002184:	0852      	lsrs	r2, r2, #1
 8002186:	3a01      	subs	r2, #1
 8002188:	0552      	lsls	r2, r2, #21
 800218a:	4311      	orrs	r1, r2
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002190:	0852      	lsrs	r2, r2, #1
 8002192:	3a01      	subs	r2, #1
 8002194:	0652      	lsls	r2, r2, #25
 8002196:	4311      	orrs	r1, r2
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800219c:	0912      	lsrs	r2, r2, #4
 800219e:	0452      	lsls	r2, r2, #17
 80021a0:	430a      	orrs	r2, r1
 80021a2:	4930      	ldr	r1, [pc, #192]	@ (8002264 <HAL_RCC_OscConfig+0x780>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002264 <HAL_RCC_OscConfig+0x780>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a2d      	ldr	r2, [pc, #180]	@ (8002264 <HAL_RCC_OscConfig+0x780>)
 80021ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002264 <HAL_RCC_OscConfig+0x780>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	4a2a      	ldr	r2, [pc, #168]	@ (8002264 <HAL_RCC_OscConfig+0x780>)
 80021ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021c0:	f7ff f8b4 	bl	800132c <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c8:	f7ff f8b0 	bl	800132c <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e058      	b.n	800228c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021da:	4b22      	ldr	r3, [pc, #136]	@ (8002264 <HAL_RCC_OscConfig+0x780>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f0      	beq.n	80021c8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021e6:	e050      	b.n	800228a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e04f      	b.n	800228c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002264 <HAL_RCC_OscConfig+0x780>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d148      	bne.n	800228a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002264 <HAL_RCC_OscConfig+0x780>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a19      	ldr	r2, [pc, #100]	@ (8002264 <HAL_RCC_OscConfig+0x780>)
 80021fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002202:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002204:	4b17      	ldr	r3, [pc, #92]	@ (8002264 <HAL_RCC_OscConfig+0x780>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4a16      	ldr	r2, [pc, #88]	@ (8002264 <HAL_RCC_OscConfig+0x780>)
 800220a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800220e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002210:	f7ff f88c 	bl	800132c <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002218:	f7ff f888 	bl	800132c <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e030      	b.n	800228c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800222a:	4b0e      	ldr	r3, [pc, #56]	@ (8002264 <HAL_RCC_OscConfig+0x780>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0x734>
 8002236:	e028      	b.n	800228a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	2b0c      	cmp	r3, #12
 800223c:	d023      	beq.n	8002286 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223e:	4b09      	ldr	r3, [pc, #36]	@ (8002264 <HAL_RCC_OscConfig+0x780>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a08      	ldr	r2, [pc, #32]	@ (8002264 <HAL_RCC_OscConfig+0x780>)
 8002244:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002248:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224a:	f7ff f86f 	bl	800132c <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002250:	e00c      	b.n	800226c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002252:	f7ff f86b 	bl	800132c <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d905      	bls.n	800226c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e013      	b.n	800228c <HAL_RCC_OscConfig+0x7a8>
 8002264:	40021000 	.word	0x40021000
 8002268:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800226c:	4b09      	ldr	r3, [pc, #36]	@ (8002294 <HAL_RCC_OscConfig+0x7b0>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1ec      	bne.n	8002252 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002278:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <HAL_RCC_OscConfig+0x7b0>)
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	4905      	ldr	r1, [pc, #20]	@ (8002294 <HAL_RCC_OscConfig+0x7b0>)
 800227e:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <HAL_RCC_OscConfig+0x7b4>)
 8002280:	4013      	ands	r3, r2
 8002282:	60cb      	str	r3, [r1, #12]
 8002284:	e001      	b.n	800228a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3720      	adds	r7, #32
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40021000 	.word	0x40021000
 8002298:	feeefffc 	.word	0xfeeefffc

0800229c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0e7      	b.n	8002480 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022b0:	4b75      	ldr	r3, [pc, #468]	@ (8002488 <HAL_RCC_ClockConfig+0x1ec>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d910      	bls.n	80022e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022be:	4b72      	ldr	r3, [pc, #456]	@ (8002488 <HAL_RCC_ClockConfig+0x1ec>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 0207 	bic.w	r2, r3, #7
 80022c6:	4970      	ldr	r1, [pc, #448]	@ (8002488 <HAL_RCC_ClockConfig+0x1ec>)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ce:	4b6e      	ldr	r3, [pc, #440]	@ (8002488 <HAL_RCC_ClockConfig+0x1ec>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d001      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0cf      	b.n	8002480 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d010      	beq.n	800230e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	4b66      	ldr	r3, [pc, #408]	@ (800248c <HAL_RCC_ClockConfig+0x1f0>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d908      	bls.n	800230e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022fc:	4b63      	ldr	r3, [pc, #396]	@ (800248c <HAL_RCC_ClockConfig+0x1f0>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	4960      	ldr	r1, [pc, #384]	@ (800248c <HAL_RCC_ClockConfig+0x1f0>)
 800230a:	4313      	orrs	r3, r2
 800230c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d04c      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b03      	cmp	r3, #3
 8002320:	d107      	bne.n	8002332 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002322:	4b5a      	ldr	r3, [pc, #360]	@ (800248c <HAL_RCC_ClockConfig+0x1f0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d121      	bne.n	8002372 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e0a6      	b.n	8002480 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d107      	bne.n	800234a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800233a:	4b54      	ldr	r3, [pc, #336]	@ (800248c <HAL_RCC_ClockConfig+0x1f0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d115      	bne.n	8002372 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e09a      	b.n	8002480 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d107      	bne.n	8002362 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002352:	4b4e      	ldr	r3, [pc, #312]	@ (800248c <HAL_RCC_ClockConfig+0x1f0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d109      	bne.n	8002372 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e08e      	b.n	8002480 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002362:	4b4a      	ldr	r3, [pc, #296]	@ (800248c <HAL_RCC_ClockConfig+0x1f0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e086      	b.n	8002480 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002372:	4b46      	ldr	r3, [pc, #280]	@ (800248c <HAL_RCC_ClockConfig+0x1f0>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f023 0203 	bic.w	r2, r3, #3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	4943      	ldr	r1, [pc, #268]	@ (800248c <HAL_RCC_ClockConfig+0x1f0>)
 8002380:	4313      	orrs	r3, r2
 8002382:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002384:	f7fe ffd2 	bl	800132c <HAL_GetTick>
 8002388:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238a:	e00a      	b.n	80023a2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800238c:	f7fe ffce 	bl	800132c <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	f241 3288 	movw	r2, #5000	@ 0x1388
 800239a:	4293      	cmp	r3, r2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e06e      	b.n	8002480 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a2:	4b3a      	ldr	r3, [pc, #232]	@ (800248c <HAL_RCC_ClockConfig+0x1f0>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 020c 	and.w	r2, r3, #12
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d1eb      	bne.n	800238c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d010      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	4b31      	ldr	r3, [pc, #196]	@ (800248c <HAL_RCC_ClockConfig+0x1f0>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d208      	bcs.n	80023e2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d0:	4b2e      	ldr	r3, [pc, #184]	@ (800248c <HAL_RCC_ClockConfig+0x1f0>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	492b      	ldr	r1, [pc, #172]	@ (800248c <HAL_RCC_ClockConfig+0x1f0>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023e2:	4b29      	ldr	r3, [pc, #164]	@ (8002488 <HAL_RCC_ClockConfig+0x1ec>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d210      	bcs.n	8002412 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f0:	4b25      	ldr	r3, [pc, #148]	@ (8002488 <HAL_RCC_ClockConfig+0x1ec>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f023 0207 	bic.w	r2, r3, #7
 80023f8:	4923      	ldr	r1, [pc, #140]	@ (8002488 <HAL_RCC_ClockConfig+0x1ec>)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002400:	4b21      	ldr	r3, [pc, #132]	@ (8002488 <HAL_RCC_ClockConfig+0x1ec>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d001      	beq.n	8002412 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e036      	b.n	8002480 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	2b00      	cmp	r3, #0
 800241c:	d008      	beq.n	8002430 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800241e:	4b1b      	ldr	r3, [pc, #108]	@ (800248c <HAL_RCC_ClockConfig+0x1f0>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	4918      	ldr	r1, [pc, #96]	@ (800248c <HAL_RCC_ClockConfig+0x1f0>)
 800242c:	4313      	orrs	r3, r2
 800242e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	2b00      	cmp	r3, #0
 800243a:	d009      	beq.n	8002450 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800243c:	4b13      	ldr	r3, [pc, #76]	@ (800248c <HAL_RCC_ClockConfig+0x1f0>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4910      	ldr	r1, [pc, #64]	@ (800248c <HAL_RCC_ClockConfig+0x1f0>)
 800244c:	4313      	orrs	r3, r2
 800244e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002450:	f000 f824 	bl	800249c <HAL_RCC_GetSysClockFreq>
 8002454:	4602      	mov	r2, r0
 8002456:	4b0d      	ldr	r3, [pc, #52]	@ (800248c <HAL_RCC_ClockConfig+0x1f0>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	091b      	lsrs	r3, r3, #4
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	490b      	ldr	r1, [pc, #44]	@ (8002490 <HAL_RCC_ClockConfig+0x1f4>)
 8002462:	5ccb      	ldrb	r3, [r1, r3]
 8002464:	f003 031f 	and.w	r3, r3, #31
 8002468:	fa22 f303 	lsr.w	r3, r2, r3
 800246c:	4a09      	ldr	r2, [pc, #36]	@ (8002494 <HAL_RCC_ClockConfig+0x1f8>)
 800246e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002470:	4b09      	ldr	r3, [pc, #36]	@ (8002498 <HAL_RCC_ClockConfig+0x1fc>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f7fe ff09 	bl	800128c <HAL_InitTick>
 800247a:	4603      	mov	r3, r0
 800247c:	72fb      	strb	r3, [r7, #11]

  return status;
 800247e:	7afb      	ldrb	r3, [r7, #11]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40022000 	.word	0x40022000
 800248c:	40021000 	.word	0x40021000
 8002490:	08007e6c 	.word	0x08007e6c
 8002494:	20000000 	.word	0x20000000
 8002498:	2000000c 	.word	0x2000000c

0800249c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800249c:	b480      	push	{r7}
 800249e:	b089      	sub	sp, #36	@ 0x24
 80024a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
 80024a6:	2300      	movs	r3, #0
 80024a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024aa:	4b3e      	ldr	r3, [pc, #248]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 030c 	and.w	r3, r3, #12
 80024b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024b4:	4b3b      	ldr	r3, [pc, #236]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_RCC_GetSysClockFreq+0x34>
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	2b0c      	cmp	r3, #12
 80024c8:	d121      	bne.n	800250e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d11e      	bne.n	800250e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024d0:	4b34      	ldr	r3, [pc, #208]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0308 	and.w	r3, r3, #8
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d107      	bne.n	80024ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024dc:	4b31      	ldr	r3, [pc, #196]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024e2:	0a1b      	lsrs	r3, r3, #8
 80024e4:	f003 030f 	and.w	r3, r3, #15
 80024e8:	61fb      	str	r3, [r7, #28]
 80024ea:	e005      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024ec:	4b2d      	ldr	r3, [pc, #180]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024f8:	4a2b      	ldr	r2, [pc, #172]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002500:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10d      	bne.n	8002524 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800250c:	e00a      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	2b04      	cmp	r3, #4
 8002512:	d102      	bne.n	800251a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002514:	4b25      	ldr	r3, [pc, #148]	@ (80025ac <HAL_RCC_GetSysClockFreq+0x110>)
 8002516:	61bb      	str	r3, [r7, #24]
 8002518:	e004      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	2b08      	cmp	r3, #8
 800251e:	d101      	bne.n	8002524 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002520:	4b23      	ldr	r3, [pc, #140]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002522:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	2b0c      	cmp	r3, #12
 8002528:	d134      	bne.n	8002594 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800252a:	4b1e      	ldr	r3, [pc, #120]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	2b02      	cmp	r3, #2
 8002538:	d003      	beq.n	8002542 <HAL_RCC_GetSysClockFreq+0xa6>
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2b03      	cmp	r3, #3
 800253e:	d003      	beq.n	8002548 <HAL_RCC_GetSysClockFreq+0xac>
 8002540:	e005      	b.n	800254e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002542:	4b1a      	ldr	r3, [pc, #104]	@ (80025ac <HAL_RCC_GetSysClockFreq+0x110>)
 8002544:	617b      	str	r3, [r7, #20]
      break;
 8002546:	e005      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002548:	4b19      	ldr	r3, [pc, #100]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800254a:	617b      	str	r3, [r7, #20]
      break;
 800254c:	e002      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	617b      	str	r3, [r7, #20]
      break;
 8002552:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002554:	4b13      	ldr	r3, [pc, #76]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	3301      	adds	r3, #1
 8002560:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002562:	4b10      	ldr	r3, [pc, #64]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	0a1b      	lsrs	r3, r3, #8
 8002568:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	fb03 f202 	mul.w	r2, r3, r2
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	fbb2 f3f3 	udiv	r3, r2, r3
 8002578:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800257a:	4b0a      	ldr	r3, [pc, #40]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	0e5b      	lsrs	r3, r3, #25
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	3301      	adds	r3, #1
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002592:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002594:	69bb      	ldr	r3, [r7, #24]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3724      	adds	r7, #36	@ 0x24
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000
 80025a8:	08007e84 	.word	0x08007e84
 80025ac:	00f42400 	.word	0x00f42400
 80025b0:	007a1200 	.word	0x007a1200

080025b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b8:	4b03      	ldr	r3, [pc, #12]	@ (80025c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	20000000 	.word	0x20000000

080025cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025d0:	f7ff fff0 	bl	80025b4 <HAL_RCC_GetHCLKFreq>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4b06      	ldr	r3, [pc, #24]	@ (80025f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	0a1b      	lsrs	r3, r3, #8
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	4904      	ldr	r1, [pc, #16]	@ (80025f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025e2:	5ccb      	ldrb	r3, [r1, r3]
 80025e4:	f003 031f 	and.w	r3, r3, #31
 80025e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40021000 	.word	0x40021000
 80025f4:	08007e7c 	.word	0x08007e7c

080025f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025fc:	f7ff ffda 	bl	80025b4 <HAL_RCC_GetHCLKFreq>
 8002600:	4602      	mov	r2, r0
 8002602:	4b06      	ldr	r3, [pc, #24]	@ (800261c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	0adb      	lsrs	r3, r3, #11
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	4904      	ldr	r1, [pc, #16]	@ (8002620 <HAL_RCC_GetPCLK2Freq+0x28>)
 800260e:	5ccb      	ldrb	r3, [r1, r3]
 8002610:	f003 031f 	and.w	r3, r3, #31
 8002614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002618:	4618      	mov	r0, r3
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40021000 	.word	0x40021000
 8002620:	08007e7c 	.word	0x08007e7c

08002624 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800262c:	2300      	movs	r3, #0
 800262e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002630:	4b2a      	ldr	r3, [pc, #168]	@ (80026dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800263c:	f7ff f9ee 	bl	8001a1c <HAL_PWREx_GetVoltageRange>
 8002640:	6178      	str	r0, [r7, #20]
 8002642:	e014      	b.n	800266e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002644:	4b25      	ldr	r3, [pc, #148]	@ (80026dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002648:	4a24      	ldr	r2, [pc, #144]	@ (80026dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800264a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800264e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002650:	4b22      	ldr	r3, [pc, #136]	@ (80026dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800265c:	f7ff f9de 	bl	8001a1c <HAL_PWREx_GetVoltageRange>
 8002660:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002662:	4b1e      	ldr	r3, [pc, #120]	@ (80026dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002666:	4a1d      	ldr	r2, [pc, #116]	@ (80026dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002668:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800266c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002674:	d10b      	bne.n	800268e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b80      	cmp	r3, #128	@ 0x80
 800267a:	d919      	bls.n	80026b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002680:	d902      	bls.n	8002688 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002682:	2302      	movs	r3, #2
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	e013      	b.n	80026b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002688:	2301      	movs	r3, #1
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	e010      	b.n	80026b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b80      	cmp	r3, #128	@ 0x80
 8002692:	d902      	bls.n	800269a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002694:	2303      	movs	r3, #3
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	e00a      	b.n	80026b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b80      	cmp	r3, #128	@ 0x80
 800269e:	d102      	bne.n	80026a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026a0:	2302      	movs	r3, #2
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	e004      	b.n	80026b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b70      	cmp	r3, #112	@ 0x70
 80026aa:	d101      	bne.n	80026b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026ac:	2301      	movs	r3, #1
 80026ae:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026b0:	4b0b      	ldr	r3, [pc, #44]	@ (80026e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f023 0207 	bic.w	r2, r3, #7
 80026b8:	4909      	ldr	r1, [pc, #36]	@ (80026e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026c0:	4b07      	ldr	r3, [pc, #28]	@ (80026e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d001      	beq.n	80026d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e000      	b.n	80026d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40022000 	.word	0x40022000

080026e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026ec:	2300      	movs	r3, #0
 80026ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026f0:	2300      	movs	r3, #0
 80026f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d041      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002704:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002708:	d02a      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800270a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800270e:	d824      	bhi.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002710:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002714:	d008      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002716:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800271a:	d81e      	bhi.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00a      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002720:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002724:	d010      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002726:	e018      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002728:	4b86      	ldr	r3, [pc, #536]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4a85      	ldr	r2, [pc, #532]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800272e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002732:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002734:	e015      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3304      	adds	r3, #4
 800273a:	2100      	movs	r1, #0
 800273c:	4618      	mov	r0, r3
 800273e:	f000 fabb 	bl	8002cb8 <RCCEx_PLLSAI1_Config>
 8002742:	4603      	mov	r3, r0
 8002744:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002746:	e00c      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3320      	adds	r3, #32
 800274c:	2100      	movs	r1, #0
 800274e:	4618      	mov	r0, r3
 8002750:	f000 fba6 	bl	8002ea0 <RCCEx_PLLSAI2_Config>
 8002754:	4603      	mov	r3, r0
 8002756:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002758:	e003      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	74fb      	strb	r3, [r7, #19]
      break;
 800275e:	e000      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002760:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002762:	7cfb      	ldrb	r3, [r7, #19]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10b      	bne.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002768:	4b76      	ldr	r3, [pc, #472]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002776:	4973      	ldr	r1, [pc, #460]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800277e:	e001      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002780:	7cfb      	ldrb	r3, [r7, #19]
 8002782:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d041      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002794:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002798:	d02a      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800279a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800279e:	d824      	bhi.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027a4:	d008      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027aa:	d81e      	bhi.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00a      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80027b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027b4:	d010      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027b6:	e018      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027b8:	4b62      	ldr	r3, [pc, #392]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4a61      	ldr	r2, [pc, #388]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027c4:	e015      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3304      	adds	r3, #4
 80027ca:	2100      	movs	r1, #0
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 fa73 	bl	8002cb8 <RCCEx_PLLSAI1_Config>
 80027d2:	4603      	mov	r3, r0
 80027d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027d6:	e00c      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3320      	adds	r3, #32
 80027dc:	2100      	movs	r1, #0
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 fb5e 	bl	8002ea0 <RCCEx_PLLSAI2_Config>
 80027e4:	4603      	mov	r3, r0
 80027e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027e8:	e003      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	74fb      	strb	r3, [r7, #19]
      break;
 80027ee:	e000      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80027f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027f2:	7cfb      	ldrb	r3, [r7, #19]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10b      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027f8:	4b52      	ldr	r3, [pc, #328]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027fe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002806:	494f      	ldr	r1, [pc, #316]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002808:	4313      	orrs	r3, r2
 800280a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800280e:	e001      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002810:	7cfb      	ldrb	r3, [r7, #19]
 8002812:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 80a0 	beq.w	8002962 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002822:	2300      	movs	r3, #0
 8002824:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002826:	4b47      	ldr	r3, [pc, #284]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800282a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002836:	2300      	movs	r3, #0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00d      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800283c:	4b41      	ldr	r3, [pc, #260]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800283e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002840:	4a40      	ldr	r2, [pc, #256]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002842:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002846:	6593      	str	r3, [r2, #88]	@ 0x58
 8002848:	4b3e      	ldr	r3, [pc, #248]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800284a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002854:	2301      	movs	r3, #1
 8002856:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002858:	4b3b      	ldr	r3, [pc, #236]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a3a      	ldr	r2, [pc, #232]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800285e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002862:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002864:	f7fe fd62 	bl	800132c <HAL_GetTick>
 8002868:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800286a:	e009      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800286c:	f7fe fd5e 	bl	800132c <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d902      	bls.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	74fb      	strb	r3, [r7, #19]
        break;
 800287e:	e005      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002880:	4b31      	ldr	r3, [pc, #196]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0ef      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800288c:	7cfb      	ldrb	r3, [r7, #19]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d15c      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002892:	4b2c      	ldr	r3, [pc, #176]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002894:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002898:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800289c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d01f      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d019      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028b0:	4b24      	ldr	r3, [pc, #144]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028bc:	4b21      	ldr	r3, [pc, #132]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c2:	4a20      	ldr	r2, [pc, #128]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028dc:	4a19      	ldr	r2, [pc, #100]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d016      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ee:	f7fe fd1d 	bl	800132c <HAL_GetTick>
 80028f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028f4:	e00b      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f6:	f7fe fd19 	bl	800132c <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002904:	4293      	cmp	r3, r2
 8002906:	d902      	bls.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	74fb      	strb	r3, [r7, #19]
            break;
 800290c:	e006      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800290e:	4b0d      	ldr	r3, [pc, #52]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0ec      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800291c:	7cfb      	ldrb	r3, [r7, #19]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10c      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002922:	4b08      	ldr	r3, [pc, #32]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002928:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002932:	4904      	ldr	r1, [pc, #16]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800293a:	e009      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800293c:	7cfb      	ldrb	r3, [r7, #19]
 800293e:	74bb      	strb	r3, [r7, #18]
 8002940:	e006      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002942:	bf00      	nop
 8002944:	40021000 	.word	0x40021000
 8002948:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800294c:	7cfb      	ldrb	r3, [r7, #19]
 800294e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002950:	7c7b      	ldrb	r3, [r7, #17]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d105      	bne.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002956:	4b9e      	ldr	r3, [pc, #632]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295a:	4a9d      	ldr	r2, [pc, #628]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002960:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800296e:	4b98      	ldr	r3, [pc, #608]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002974:	f023 0203 	bic.w	r2, r3, #3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800297c:	4994      	ldr	r1, [pc, #592]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00a      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002990:	4b8f      	ldr	r3, [pc, #572]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002996:	f023 020c 	bic.w	r2, r3, #12
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800299e:	498c      	ldr	r1, [pc, #560]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0304 	and.w	r3, r3, #4
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00a      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029b2:	4b87      	ldr	r3, [pc, #540]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c0:	4983      	ldr	r1, [pc, #524]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0308 	and.w	r3, r3, #8
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00a      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029d4:	4b7e      	ldr	r3, [pc, #504]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e2:	497b      	ldr	r1, [pc, #492]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0310 	and.w	r3, r3, #16
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00a      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029f6:	4b76      	ldr	r3, [pc, #472]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a04:	4972      	ldr	r1, [pc, #456]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0320 	and.w	r3, r3, #32
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00a      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a18:	4b6d      	ldr	r3, [pc, #436]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a1e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a26:	496a      	ldr	r1, [pc, #424]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00a      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a3a:	4b65      	ldr	r3, [pc, #404]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a40:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a48:	4961      	ldr	r1, [pc, #388]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00a      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a5c:	4b5c      	ldr	r3, [pc, #368]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a6a:	4959      	ldr	r1, [pc, #356]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00a      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a7e:	4b54      	ldr	r3, [pc, #336]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a84:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a8c:	4950      	ldr	r1, [pc, #320]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00a      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002aa0:	4b4b      	ldr	r3, [pc, #300]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aa6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aae:	4948      	ldr	r1, [pc, #288]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00a      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ac2:	4b43      	ldr	r3, [pc, #268]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad0:	493f      	ldr	r1, [pc, #252]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d028      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ae4:	4b3a      	ldr	r3, [pc, #232]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002af2:	4937      	ldr	r1, [pc, #220]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002afe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b02:	d106      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b04:	4b32      	ldr	r3, [pc, #200]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4a31      	ldr	r2, [pc, #196]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b0e:	60d3      	str	r3, [r2, #12]
 8002b10:	e011      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b1a:	d10c      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3304      	adds	r3, #4
 8002b20:	2101      	movs	r1, #1
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 f8c8 	bl	8002cb8 <RCCEx_PLLSAI1_Config>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b2c:	7cfb      	ldrb	r3, [r7, #19]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002b32:	7cfb      	ldrb	r3, [r7, #19]
 8002b34:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d028      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b42:	4b23      	ldr	r3, [pc, #140]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b48:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b50:	491f      	ldr	r1, [pc, #124]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b60:	d106      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b62:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	4a1a      	ldr	r2, [pc, #104]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b6c:	60d3      	str	r3, [r2, #12]
 8002b6e:	e011      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b78:	d10c      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	2101      	movs	r1, #1
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 f899 	bl	8002cb8 <RCCEx_PLLSAI1_Config>
 8002b86:	4603      	mov	r3, r0
 8002b88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b8a:	7cfb      	ldrb	r3, [r7, #19]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b90:	7cfb      	ldrb	r3, [r7, #19]
 8002b92:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d02b      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bae:	4908      	ldr	r1, [pc, #32]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bbe:	d109      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bc0:	4b03      	ldr	r3, [pc, #12]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	4a02      	ldr	r2, [pc, #8]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bca:	60d3      	str	r3, [r2, #12]
 8002bcc:	e014      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002bce:	bf00      	nop
 8002bd0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3304      	adds	r3, #4
 8002be2:	2101      	movs	r1, #1
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 f867 	bl	8002cb8 <RCCEx_PLLSAI1_Config>
 8002bea:	4603      	mov	r3, r0
 8002bec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bee:	7cfb      	ldrb	r3, [r7, #19]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002bf4:	7cfb      	ldrb	r3, [r7, #19]
 8002bf6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d02f      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c04:	4b2b      	ldr	r3, [pc, #172]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c0a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c12:	4928      	ldr	r1, [pc, #160]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c22:	d10d      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3304      	adds	r3, #4
 8002c28:	2102      	movs	r1, #2
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 f844 	bl	8002cb8 <RCCEx_PLLSAI1_Config>
 8002c30:	4603      	mov	r3, r0
 8002c32:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c34:	7cfb      	ldrb	r3, [r7, #19]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d014      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c3a:	7cfb      	ldrb	r3, [r7, #19]
 8002c3c:	74bb      	strb	r3, [r7, #18]
 8002c3e:	e011      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c48:	d10c      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3320      	adds	r3, #32
 8002c4e:	2102      	movs	r1, #2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 f925 	bl	8002ea0 <RCCEx_PLLSAI2_Config>
 8002c56:	4603      	mov	r3, r0
 8002c58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c5a:	7cfb      	ldrb	r3, [r7, #19]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c60:	7cfb      	ldrb	r3, [r7, #19]
 8002c62:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00a      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c70:	4b10      	ldr	r3, [pc, #64]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c76:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c7e:	490d      	ldr	r1, [pc, #52]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00b      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c92:	4b08      	ldr	r3, [pc, #32]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c98:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ca2:	4904      	ldr	r1, [pc, #16]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002caa:	7cbb      	ldrb	r3, [r7, #18]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40021000 	.word	0x40021000

08002cb8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cc6:	4b75      	ldr	r3, [pc, #468]	@ (8002e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d018      	beq.n	8002d04 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002cd2:	4b72      	ldr	r3, [pc, #456]	@ (8002e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f003 0203 	and.w	r2, r3, #3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d10d      	bne.n	8002cfe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
       ||
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d009      	beq.n	8002cfe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002cea:	4b6c      	ldr	r3, [pc, #432]	@ (8002e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	091b      	lsrs	r3, r3, #4
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
       ||
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d047      	beq.n	8002d8e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	73fb      	strb	r3, [r7, #15]
 8002d02:	e044      	b.n	8002d8e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d018      	beq.n	8002d3e <RCCEx_PLLSAI1_Config+0x86>
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d825      	bhi.n	8002d5c <RCCEx_PLLSAI1_Config+0xa4>
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d002      	beq.n	8002d1a <RCCEx_PLLSAI1_Config+0x62>
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d009      	beq.n	8002d2c <RCCEx_PLLSAI1_Config+0x74>
 8002d18:	e020      	b.n	8002d5c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d1a:	4b60      	ldr	r3, [pc, #384]	@ (8002e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d11d      	bne.n	8002d62 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d2a:	e01a      	b.n	8002d62 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d2c:	4b5b      	ldr	r3, [pc, #364]	@ (8002e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d116      	bne.n	8002d66 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d3c:	e013      	b.n	8002d66 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d3e:	4b57      	ldr	r3, [pc, #348]	@ (8002e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10f      	bne.n	8002d6a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d4a:	4b54      	ldr	r3, [pc, #336]	@ (8002e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d109      	bne.n	8002d6a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d5a:	e006      	b.n	8002d6a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d60:	e004      	b.n	8002d6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d62:	bf00      	nop
 8002d64:	e002      	b.n	8002d6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d66:	bf00      	nop
 8002d68:	e000      	b.n	8002d6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10d      	bne.n	8002d8e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d72:	4b4a      	ldr	r3, [pc, #296]	@ (8002e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6819      	ldr	r1, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	430b      	orrs	r3, r1
 8002d88:	4944      	ldr	r1, [pc, #272]	@ (8002e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d17d      	bne.n	8002e90 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d94:	4b41      	ldr	r3, [pc, #260]	@ (8002e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a40      	ldr	r2, [pc, #256]	@ (8002e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002d9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002da0:	f7fe fac4 	bl	800132c <HAL_GetTick>
 8002da4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002da6:	e009      	b.n	8002dbc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002da8:	f7fe fac0 	bl	800132c <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d902      	bls.n	8002dbc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	73fb      	strb	r3, [r7, #15]
        break;
 8002dba:	e005      	b.n	8002dc8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dbc:	4b37      	ldr	r3, [pc, #220]	@ (8002e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1ef      	bne.n	8002da8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d160      	bne.n	8002e90 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d111      	bne.n	8002df8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dd4:	4b31      	ldr	r3, [pc, #196]	@ (8002e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002ddc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6892      	ldr	r2, [r2, #8]
 8002de4:	0211      	lsls	r1, r2, #8
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	68d2      	ldr	r2, [r2, #12]
 8002dea:	0912      	lsrs	r2, r2, #4
 8002dec:	0452      	lsls	r2, r2, #17
 8002dee:	430a      	orrs	r2, r1
 8002df0:	492a      	ldr	r1, [pc, #168]	@ (8002e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	610b      	str	r3, [r1, #16]
 8002df6:	e027      	b.n	8002e48 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d112      	bne.n	8002e24 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dfe:	4b27      	ldr	r3, [pc, #156]	@ (8002e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002e06:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6892      	ldr	r2, [r2, #8]
 8002e0e:	0211      	lsls	r1, r2, #8
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6912      	ldr	r2, [r2, #16]
 8002e14:	0852      	lsrs	r2, r2, #1
 8002e16:	3a01      	subs	r2, #1
 8002e18:	0552      	lsls	r2, r2, #21
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	491f      	ldr	r1, [pc, #124]	@ (8002e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	610b      	str	r3, [r1, #16]
 8002e22:	e011      	b.n	8002e48 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e24:	4b1d      	ldr	r3, [pc, #116]	@ (8002e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002e2c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6892      	ldr	r2, [r2, #8]
 8002e34:	0211      	lsls	r1, r2, #8
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6952      	ldr	r2, [r2, #20]
 8002e3a:	0852      	lsrs	r2, r2, #1
 8002e3c:	3a01      	subs	r2, #1
 8002e3e:	0652      	lsls	r2, r2, #25
 8002e40:	430a      	orrs	r2, r1
 8002e42:	4916      	ldr	r1, [pc, #88]	@ (8002e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e48:	4b14      	ldr	r3, [pc, #80]	@ (8002e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a13      	ldr	r2, [pc, #76]	@ (8002e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e4e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e54:	f7fe fa6a 	bl	800132c <HAL_GetTick>
 8002e58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e5a:	e009      	b.n	8002e70 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e5c:	f7fe fa66 	bl	800132c <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d902      	bls.n	8002e70 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	73fb      	strb	r3, [r7, #15]
          break;
 8002e6e:	e005      	b.n	8002e7c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e70:	4b0a      	ldr	r3, [pc, #40]	@ (8002e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0ef      	beq.n	8002e5c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e82:	4b06      	ldr	r3, [pc, #24]	@ (8002e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e84:	691a      	ldr	r2, [r3, #16]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	4904      	ldr	r1, [pc, #16]	@ (8002e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40021000 	.word	0x40021000

08002ea0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002eae:	4b6a      	ldr	r3, [pc, #424]	@ (8003058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d018      	beq.n	8002eec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002eba:	4b67      	ldr	r3, [pc, #412]	@ (8003058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f003 0203 	and.w	r2, r3, #3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d10d      	bne.n	8002ee6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
       ||
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d009      	beq.n	8002ee6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002ed2:	4b61      	ldr	r3, [pc, #388]	@ (8003058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	091b      	lsrs	r3, r3, #4
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	1c5a      	adds	r2, r3, #1
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
       ||
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d047      	beq.n	8002f76 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	73fb      	strb	r3, [r7, #15]
 8002eea:	e044      	b.n	8002f76 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b03      	cmp	r3, #3
 8002ef2:	d018      	beq.n	8002f26 <RCCEx_PLLSAI2_Config+0x86>
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d825      	bhi.n	8002f44 <RCCEx_PLLSAI2_Config+0xa4>
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d002      	beq.n	8002f02 <RCCEx_PLLSAI2_Config+0x62>
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d009      	beq.n	8002f14 <RCCEx_PLLSAI2_Config+0x74>
 8002f00:	e020      	b.n	8002f44 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f02:	4b55      	ldr	r3, [pc, #340]	@ (8003058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d11d      	bne.n	8002f4a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f12:	e01a      	b.n	8002f4a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f14:	4b50      	ldr	r3, [pc, #320]	@ (8003058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d116      	bne.n	8002f4e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f24:	e013      	b.n	8002f4e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f26:	4b4c      	ldr	r3, [pc, #304]	@ (8003058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10f      	bne.n	8002f52 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f32:	4b49      	ldr	r3, [pc, #292]	@ (8003058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d109      	bne.n	8002f52 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f42:	e006      	b.n	8002f52 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	73fb      	strb	r3, [r7, #15]
      break;
 8002f48:	e004      	b.n	8002f54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f4a:	bf00      	nop
 8002f4c:	e002      	b.n	8002f54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f4e:	bf00      	nop
 8002f50:	e000      	b.n	8002f54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f52:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10d      	bne.n	8002f76 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f5a:	4b3f      	ldr	r3, [pc, #252]	@ (8003058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6819      	ldr	r1, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	430b      	orrs	r3, r1
 8002f70:	4939      	ldr	r1, [pc, #228]	@ (8003058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d167      	bne.n	800304c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f7c:	4b36      	ldr	r3, [pc, #216]	@ (8003058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a35      	ldr	r2, [pc, #212]	@ (8003058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f88:	f7fe f9d0 	bl	800132c <HAL_GetTick>
 8002f8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f8e:	e009      	b.n	8002fa4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f90:	f7fe f9cc 	bl	800132c <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d902      	bls.n	8002fa4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	73fb      	strb	r3, [r7, #15]
        break;
 8002fa2:	e005      	b.n	8002fb0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fa4:	4b2c      	ldr	r3, [pc, #176]	@ (8003058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1ef      	bne.n	8002f90 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d14a      	bne.n	800304c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d111      	bne.n	8002fe0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fbc:	4b26      	ldr	r3, [pc, #152]	@ (8003058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002fc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6892      	ldr	r2, [r2, #8]
 8002fcc:	0211      	lsls	r1, r2, #8
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	68d2      	ldr	r2, [r2, #12]
 8002fd2:	0912      	lsrs	r2, r2, #4
 8002fd4:	0452      	lsls	r2, r2, #17
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	491f      	ldr	r1, [pc, #124]	@ (8003058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	614b      	str	r3, [r1, #20]
 8002fde:	e011      	b.n	8003004 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8003058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002fe8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6892      	ldr	r2, [r2, #8]
 8002ff0:	0211      	lsls	r1, r2, #8
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6912      	ldr	r2, [r2, #16]
 8002ff6:	0852      	lsrs	r2, r2, #1
 8002ff8:	3a01      	subs	r2, #1
 8002ffa:	0652      	lsls	r2, r2, #25
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	4916      	ldr	r1, [pc, #88]	@ (8003058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003000:	4313      	orrs	r3, r2
 8003002:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003004:	4b14      	ldr	r3, [pc, #80]	@ (8003058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a13      	ldr	r2, [pc, #76]	@ (8003058 <RCCEx_PLLSAI2_Config+0x1b8>)
 800300a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800300e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003010:	f7fe f98c 	bl	800132c <HAL_GetTick>
 8003014:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003016:	e009      	b.n	800302c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003018:	f7fe f988 	bl	800132c <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d902      	bls.n	800302c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	73fb      	strb	r3, [r7, #15]
          break;
 800302a:	e005      	b.n	8003038 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800302c:	4b0a      	ldr	r3, [pc, #40]	@ (8003058 <RCCEx_PLLSAI2_Config+0x1b8>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0ef      	beq.n	8003018 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003038:	7bfb      	ldrb	r3, [r7, #15]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d106      	bne.n	800304c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800303e:	4b06      	ldr	r3, [pc, #24]	@ (8003058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003040:	695a      	ldr	r2, [r3, #20]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	4904      	ldr	r1, [pc, #16]	@ (8003058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003048:	4313      	orrs	r3, r2
 800304a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800304c:	7bfb      	ldrb	r3, [r7, #15]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40021000 	.word	0x40021000

0800305c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e040      	b.n	80030f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003072:	2b00      	cmp	r3, #0
 8003074:	d106      	bne.n	8003084 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7fd fe7c 	bl	8000d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2224      	movs	r2, #36	@ 0x24
 8003088:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0201 	bic.w	r2, r2, #1
 8003098:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fedc 	bl	8003e60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 fc21 	bl	80038f0 <UART_SetConfig>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e01b      	b.n	80030f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0201 	orr.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 ff5b 	bl	8003fa4 <UART_CheckIdleState>
 80030ee:	4603      	mov	r3, r0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08a      	sub	sp, #40	@ 0x28
 80030fc:	af02      	add	r7, sp, #8
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	4613      	mov	r3, r2
 8003106:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800310c:	2b20      	cmp	r3, #32
 800310e:	d177      	bne.n	8003200 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <HAL_UART_Transmit+0x24>
 8003116:	88fb      	ldrh	r3, [r7, #6]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e070      	b.n	8003202 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2221      	movs	r2, #33	@ 0x21
 800312c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800312e:	f7fe f8fd 	bl	800132c <HAL_GetTick>
 8003132:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	88fa      	ldrh	r2, [r7, #6]
 8003138:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	88fa      	ldrh	r2, [r7, #6]
 8003140:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800314c:	d108      	bne.n	8003160 <HAL_UART_Transmit+0x68>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d104      	bne.n	8003160 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	61bb      	str	r3, [r7, #24]
 800315e:	e003      	b.n	8003168 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003164:	2300      	movs	r3, #0
 8003166:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003168:	e02f      	b.n	80031ca <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	2200      	movs	r2, #0
 8003172:	2180      	movs	r1, #128	@ 0x80
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f000 ffbd 	bl	80040f4 <UART_WaitOnFlagUntilTimeout>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d004      	beq.n	800318a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e03b      	b.n	8003202 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10b      	bne.n	80031a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	881a      	ldrh	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800319c:	b292      	uxth	r2, r2
 800319e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	3302      	adds	r3, #2
 80031a4:	61bb      	str	r3, [r7, #24]
 80031a6:	e007      	b.n	80031b8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	781a      	ldrb	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	3301      	adds	r3, #1
 80031b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80031be:	b29b      	uxth	r3, r3
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1c9      	bne.n	800316a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2200      	movs	r2, #0
 80031de:	2140      	movs	r1, #64	@ 0x40
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 ff87 	bl	80040f4 <UART_WaitOnFlagUntilTimeout>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d004      	beq.n	80031f6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2220      	movs	r2, #32
 80031f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e005      	b.n	8003202 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2220      	movs	r2, #32
 80031fa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80031fc:	2300      	movs	r3, #0
 80031fe:	e000      	b.n	8003202 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003200:	2302      	movs	r3, #2
  }
}
 8003202:	4618      	mov	r0, r3
 8003204:	3720      	adds	r7, #32
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08a      	sub	sp, #40	@ 0x28
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	4613      	mov	r3, r2
 8003218:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003220:	2b20      	cmp	r3, #32
 8003222:	d137      	bne.n	8003294 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <HAL_UART_Receive_IT+0x24>
 800322a:	88fb      	ldrh	r3, [r7, #6]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e030      	b.n	8003296 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a18      	ldr	r2, [pc, #96]	@ (80032a0 <HAL_UART_Receive_IT+0x94>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d01f      	beq.n	8003284 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d018      	beq.n	8003284 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	e853 3f00 	ldrex	r3, [r3]
 800325e:	613b      	str	r3, [r7, #16]
   return(result);
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003266:	627b      	str	r3, [r7, #36]	@ 0x24
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003270:	623b      	str	r3, [r7, #32]
 8003272:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003274:	69f9      	ldr	r1, [r7, #28]
 8003276:	6a3a      	ldr	r2, [r7, #32]
 8003278:	e841 2300 	strex	r3, r2, [r1]
 800327c:	61bb      	str	r3, [r7, #24]
   return(result);
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1e6      	bne.n	8003252 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003284:	88fb      	ldrh	r3, [r7, #6]
 8003286:	461a      	mov	r2, r3
 8003288:	68b9      	ldr	r1, [r7, #8]
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 ffa0 	bl	80041d0 <UART_Start_Receive_IT>
 8003290:	4603      	mov	r3, r0
 8003292:	e000      	b.n	8003296 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003294:	2302      	movs	r3, #2
  }
}
 8003296:	4618      	mov	r0, r3
 8003298:	3728      	adds	r7, #40	@ 0x28
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40008000 	.word	0x40008000

080032a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b0ba      	sub	sp, #232	@ 0xe8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80032ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80032ce:	f640 030f 	movw	r3, #2063	@ 0x80f
 80032d2:	4013      	ands	r3, r2
 80032d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80032d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d115      	bne.n	800330c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80032e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032e4:	f003 0320 	and.w	r3, r3, #32
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00f      	beq.n	800330c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032f0:	f003 0320 	and.w	r3, r3, #32
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d009      	beq.n	800330c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 82ca 	beq.w	8003896 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	4798      	blx	r3
      }
      return;
 800330a:	e2c4      	b.n	8003896 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800330c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 8117 	beq.w	8003544 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003316:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d106      	bne.n	8003330 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003322:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003326:	4b85      	ldr	r3, [pc, #532]	@ (800353c <HAL_UART_IRQHandler+0x298>)
 8003328:	4013      	ands	r3, r2
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 810a 	beq.w	8003544 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d011      	beq.n	8003360 <HAL_UART_IRQHandler+0xbc>
 800333c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00b      	beq.n	8003360 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2201      	movs	r2, #1
 800334e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003356:	f043 0201 	orr.w	r2, r3, #1
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d011      	beq.n	8003390 <HAL_UART_IRQHandler+0xec>
 800336c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00b      	beq.n	8003390 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2202      	movs	r2, #2
 800337e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003386:	f043 0204 	orr.w	r2, r3, #4
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	d011      	beq.n	80033c0 <HAL_UART_IRQHandler+0x11c>
 800339c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00b      	beq.n	80033c0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2204      	movs	r2, #4
 80033ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033b6:	f043 0202 	orr.w	r2, r3, #2
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80033c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d017      	beq.n	80033fc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033d0:	f003 0320 	and.w	r3, r3, #32
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d105      	bne.n	80033e4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80033d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00b      	beq.n	80033fc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2208      	movs	r2, #8
 80033ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033f2:	f043 0208 	orr.w	r2, r3, #8
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80033fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003400:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003404:	2b00      	cmp	r3, #0
 8003406:	d012      	beq.n	800342e <HAL_UART_IRQHandler+0x18a>
 8003408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800340c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00c      	beq.n	800342e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800341c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003424:	f043 0220 	orr.w	r2, r3, #32
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 8230 	beq.w	800389a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800343a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800343e:	f003 0320 	and.w	r3, r3, #32
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00d      	beq.n	8003462 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b00      	cmp	r3, #0
 8003450:	d007      	beq.n	8003462 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003468:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003476:	2b40      	cmp	r3, #64	@ 0x40
 8003478:	d005      	beq.n	8003486 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800347a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800347e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003482:	2b00      	cmp	r3, #0
 8003484:	d04f      	beq.n	8003526 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 ff68 	bl	800435c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003496:	2b40      	cmp	r3, #64	@ 0x40
 8003498:	d141      	bne.n	800351e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3308      	adds	r3, #8
 80034a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034a8:	e853 3f00 	ldrex	r3, [r3]
 80034ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80034b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3308      	adds	r3, #8
 80034c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80034c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80034ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80034d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80034d6:	e841 2300 	strex	r3, r2, [r1]
 80034da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80034de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1d9      	bne.n	800349a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d013      	beq.n	8003516 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034f2:	4a13      	ldr	r2, [pc, #76]	@ (8003540 <HAL_UART_IRQHandler+0x29c>)
 80034f4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fe f871 	bl	80015e2 <HAL_DMA_Abort_IT>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d017      	beq.n	8003536 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800350a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003510:	4610      	mov	r0, r2
 8003512:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003514:	e00f      	b.n	8003536 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f9d4 	bl	80038c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800351c:	e00b      	b.n	8003536 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f9d0 	bl	80038c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003524:	e007      	b.n	8003536 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f9cc 	bl	80038c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003534:	e1b1      	b.n	800389a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003536:	bf00      	nop
    return;
 8003538:	e1af      	b.n	800389a <HAL_UART_IRQHandler+0x5f6>
 800353a:	bf00      	nop
 800353c:	04000120 	.word	0x04000120
 8003540:	08004425 	.word	0x08004425

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003548:	2b01      	cmp	r3, #1
 800354a:	f040 816a 	bne.w	8003822 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800354e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003552:	f003 0310 	and.w	r3, r3, #16
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 8163 	beq.w	8003822 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800355c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 815c 	beq.w	8003822 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2210      	movs	r2, #16
 8003570:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800357c:	2b40      	cmp	r3, #64	@ 0x40
 800357e:	f040 80d4 	bne.w	800372a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800358e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 80ad 	beq.w	80036f2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800359e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035a2:	429a      	cmp	r2, r3
 80035a4:	f080 80a5 	bcs.w	80036f2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035ae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f040 8086 	bne.w	80036d0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80035d0:	e853 3f00 	ldrex	r3, [r3]
 80035d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80035d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80035dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	461a      	mov	r2, r3
 80035ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80035ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80035f2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80035fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80035fe:	e841 2300 	strex	r3, r2, [r1]
 8003602:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003606:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1da      	bne.n	80035c4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	3308      	adds	r3, #8
 8003614:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003616:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003618:	e853 3f00 	ldrex	r3, [r3]
 800361c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800361e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003620:	f023 0301 	bic.w	r3, r3, #1
 8003624:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3308      	adds	r3, #8
 800362e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003632:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003636:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003638:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800363a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800363e:	e841 2300 	strex	r3, r2, [r1]
 8003642:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003644:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1e1      	bne.n	800360e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3308      	adds	r3, #8
 8003650:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003652:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003654:	e853 3f00 	ldrex	r3, [r3]
 8003658:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800365a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800365c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003660:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3308      	adds	r3, #8
 800366a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800366e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003670:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003672:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003674:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003676:	e841 2300 	strex	r3, r2, [r1]
 800367a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800367c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1e3      	bne.n	800364a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2220      	movs	r2, #32
 8003686:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003696:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003698:	e853 3f00 	ldrex	r3, [r3]
 800369c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800369e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036a0:	f023 0310 	bic.w	r3, r3, #16
 80036a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	461a      	mov	r2, r3
 80036ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80036b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036ba:	e841 2300 	strex	r3, r2, [r1]
 80036be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80036c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1e4      	bne.n	8003690 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fd ff4b 	bl	8001566 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2202      	movs	r2, #2
 80036d4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	4619      	mov	r1, r3
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f8f4 	bl	80038d8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80036f0:	e0d5      	b.n	800389e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80036f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036fc:	429a      	cmp	r2, r3
 80036fe:	f040 80ce 	bne.w	800389e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0320 	and.w	r3, r3, #32
 800370e:	2b20      	cmp	r3, #32
 8003710:	f040 80c5 	bne.w	800389e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003720:	4619      	mov	r1, r3
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f8d8 	bl	80038d8 <HAL_UARTEx_RxEventCallback>
      return;
 8003728:	e0b9      	b.n	800389e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003736:	b29b      	uxth	r3, r3
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 80ab 	beq.w	80038a2 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800374c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 80a6 	beq.w	80038a2 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800375e:	e853 3f00 	ldrex	r3, [r3]
 8003762:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003766:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800376a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	461a      	mov	r2, r3
 8003774:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003778:	647b      	str	r3, [r7, #68]	@ 0x44
 800377a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800377e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003780:	e841 2300 	strex	r3, r2, [r1]
 8003784:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1e4      	bne.n	8003756 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	3308      	adds	r3, #8
 8003792:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003796:	e853 3f00 	ldrex	r3, [r3]
 800379a:	623b      	str	r3, [r7, #32]
   return(result);
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	f023 0301 	bic.w	r3, r3, #1
 80037a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	3308      	adds	r3, #8
 80037ac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80037b0:	633a      	str	r2, [r7, #48]	@ 0x30
 80037b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037b8:	e841 2300 	strex	r3, r2, [r1]
 80037bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1e3      	bne.n	800378c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	e853 3f00 	ldrex	r3, [r3]
 80037e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f023 0310 	bic.w	r3, r3, #16
 80037ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	461a      	mov	r2, r3
 80037f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80037fa:	61fb      	str	r3, [r7, #28]
 80037fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fe:	69b9      	ldr	r1, [r7, #24]
 8003800:	69fa      	ldr	r2, [r7, #28]
 8003802:	e841 2300 	strex	r3, r2, [r1]
 8003806:	617b      	str	r3, [r7, #20]
   return(result);
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1e4      	bne.n	80037d8 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2202      	movs	r2, #2
 8003812:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003814:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003818:	4619      	mov	r1, r3
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f85c 	bl	80038d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003820:	e03f      	b.n	80038a2 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003826:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00e      	beq.n	800384c <HAL_UART_IRQHandler+0x5a8>
 800382e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003832:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d008      	beq.n	800384c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003842:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 ffe9 	bl	800481c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800384a:	e02d      	b.n	80038a8 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800384c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003850:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00e      	beq.n	8003876 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800385c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003860:	2b00      	cmp	r3, #0
 8003862:	d008      	beq.n	8003876 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003868:	2b00      	cmp	r3, #0
 800386a:	d01c      	beq.n	80038a6 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	4798      	blx	r3
    }
    return;
 8003874:	e017      	b.n	80038a6 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800387a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800387e:	2b00      	cmp	r3, #0
 8003880:	d012      	beq.n	80038a8 <HAL_UART_IRQHandler+0x604>
 8003882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00c      	beq.n	80038a8 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 fdde 	bl	8004450 <UART_EndTransmit_IT>
    return;
 8003894:	e008      	b.n	80038a8 <HAL_UART_IRQHandler+0x604>
      return;
 8003896:	bf00      	nop
 8003898:	e006      	b.n	80038a8 <HAL_UART_IRQHandler+0x604>
    return;
 800389a:	bf00      	nop
 800389c:	e004      	b.n	80038a8 <HAL_UART_IRQHandler+0x604>
      return;
 800389e:	bf00      	nop
 80038a0:	e002      	b.n	80038a8 <HAL_UART_IRQHandler+0x604>
      return;
 80038a2:	bf00      	nop
 80038a4:	e000      	b.n	80038a8 <HAL_UART_IRQHandler+0x604>
    return;
 80038a6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80038a8:	37e8      	adds	r7, #232	@ 0xe8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop

080038b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038f4:	b08a      	sub	sp, #40	@ 0x28
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	431a      	orrs	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	431a      	orrs	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	4313      	orrs	r3, r2
 8003916:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	4ba4      	ldr	r3, [pc, #656]	@ (8003bb0 <UART_SetConfig+0x2c0>)
 8003920:	4013      	ands	r3, r2
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	6812      	ldr	r2, [r2, #0]
 8003926:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003928:	430b      	orrs	r3, r1
 800392a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a99      	ldr	r2, [pc, #612]	@ (8003bb4 <UART_SetConfig+0x2c4>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d004      	beq.n	800395c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003958:	4313      	orrs	r3, r2
 800395a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800396c:	430a      	orrs	r2, r1
 800396e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a90      	ldr	r2, [pc, #576]	@ (8003bb8 <UART_SetConfig+0x2c8>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d126      	bne.n	80039c8 <UART_SetConfig+0xd8>
 800397a:	4b90      	ldr	r3, [pc, #576]	@ (8003bbc <UART_SetConfig+0x2cc>)
 800397c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003980:	f003 0303 	and.w	r3, r3, #3
 8003984:	2b03      	cmp	r3, #3
 8003986:	d81b      	bhi.n	80039c0 <UART_SetConfig+0xd0>
 8003988:	a201      	add	r2, pc, #4	@ (adr r2, 8003990 <UART_SetConfig+0xa0>)
 800398a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398e:	bf00      	nop
 8003990:	080039a1 	.word	0x080039a1
 8003994:	080039b1 	.word	0x080039b1
 8003998:	080039a9 	.word	0x080039a9
 800399c:	080039b9 	.word	0x080039b9
 80039a0:	2301      	movs	r3, #1
 80039a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039a6:	e116      	b.n	8003bd6 <UART_SetConfig+0x2e6>
 80039a8:	2302      	movs	r3, #2
 80039aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039ae:	e112      	b.n	8003bd6 <UART_SetConfig+0x2e6>
 80039b0:	2304      	movs	r3, #4
 80039b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039b6:	e10e      	b.n	8003bd6 <UART_SetConfig+0x2e6>
 80039b8:	2308      	movs	r3, #8
 80039ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039be:	e10a      	b.n	8003bd6 <UART_SetConfig+0x2e6>
 80039c0:	2310      	movs	r3, #16
 80039c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039c6:	e106      	b.n	8003bd6 <UART_SetConfig+0x2e6>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a7c      	ldr	r2, [pc, #496]	@ (8003bc0 <UART_SetConfig+0x2d0>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d138      	bne.n	8003a44 <UART_SetConfig+0x154>
 80039d2:	4b7a      	ldr	r3, [pc, #488]	@ (8003bbc <UART_SetConfig+0x2cc>)
 80039d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d8:	f003 030c 	and.w	r3, r3, #12
 80039dc:	2b0c      	cmp	r3, #12
 80039de:	d82d      	bhi.n	8003a3c <UART_SetConfig+0x14c>
 80039e0:	a201      	add	r2, pc, #4	@ (adr r2, 80039e8 <UART_SetConfig+0xf8>)
 80039e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e6:	bf00      	nop
 80039e8:	08003a1d 	.word	0x08003a1d
 80039ec:	08003a3d 	.word	0x08003a3d
 80039f0:	08003a3d 	.word	0x08003a3d
 80039f4:	08003a3d 	.word	0x08003a3d
 80039f8:	08003a2d 	.word	0x08003a2d
 80039fc:	08003a3d 	.word	0x08003a3d
 8003a00:	08003a3d 	.word	0x08003a3d
 8003a04:	08003a3d 	.word	0x08003a3d
 8003a08:	08003a25 	.word	0x08003a25
 8003a0c:	08003a3d 	.word	0x08003a3d
 8003a10:	08003a3d 	.word	0x08003a3d
 8003a14:	08003a3d 	.word	0x08003a3d
 8003a18:	08003a35 	.word	0x08003a35
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a22:	e0d8      	b.n	8003bd6 <UART_SetConfig+0x2e6>
 8003a24:	2302      	movs	r3, #2
 8003a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a2a:	e0d4      	b.n	8003bd6 <UART_SetConfig+0x2e6>
 8003a2c:	2304      	movs	r3, #4
 8003a2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a32:	e0d0      	b.n	8003bd6 <UART_SetConfig+0x2e6>
 8003a34:	2308      	movs	r3, #8
 8003a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a3a:	e0cc      	b.n	8003bd6 <UART_SetConfig+0x2e6>
 8003a3c:	2310      	movs	r3, #16
 8003a3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a42:	e0c8      	b.n	8003bd6 <UART_SetConfig+0x2e6>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a5e      	ldr	r2, [pc, #376]	@ (8003bc4 <UART_SetConfig+0x2d4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d125      	bne.n	8003a9a <UART_SetConfig+0x1aa>
 8003a4e:	4b5b      	ldr	r3, [pc, #364]	@ (8003bbc <UART_SetConfig+0x2cc>)
 8003a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a54:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003a58:	2b30      	cmp	r3, #48	@ 0x30
 8003a5a:	d016      	beq.n	8003a8a <UART_SetConfig+0x19a>
 8003a5c:	2b30      	cmp	r3, #48	@ 0x30
 8003a5e:	d818      	bhi.n	8003a92 <UART_SetConfig+0x1a2>
 8003a60:	2b20      	cmp	r3, #32
 8003a62:	d00a      	beq.n	8003a7a <UART_SetConfig+0x18a>
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d814      	bhi.n	8003a92 <UART_SetConfig+0x1a2>
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <UART_SetConfig+0x182>
 8003a6c:	2b10      	cmp	r3, #16
 8003a6e:	d008      	beq.n	8003a82 <UART_SetConfig+0x192>
 8003a70:	e00f      	b.n	8003a92 <UART_SetConfig+0x1a2>
 8003a72:	2300      	movs	r3, #0
 8003a74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a78:	e0ad      	b.n	8003bd6 <UART_SetConfig+0x2e6>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a80:	e0a9      	b.n	8003bd6 <UART_SetConfig+0x2e6>
 8003a82:	2304      	movs	r3, #4
 8003a84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a88:	e0a5      	b.n	8003bd6 <UART_SetConfig+0x2e6>
 8003a8a:	2308      	movs	r3, #8
 8003a8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a90:	e0a1      	b.n	8003bd6 <UART_SetConfig+0x2e6>
 8003a92:	2310      	movs	r3, #16
 8003a94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a98:	e09d      	b.n	8003bd6 <UART_SetConfig+0x2e6>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a4a      	ldr	r2, [pc, #296]	@ (8003bc8 <UART_SetConfig+0x2d8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d125      	bne.n	8003af0 <UART_SetConfig+0x200>
 8003aa4:	4b45      	ldr	r3, [pc, #276]	@ (8003bbc <UART_SetConfig+0x2cc>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aaa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003aae:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ab0:	d016      	beq.n	8003ae0 <UART_SetConfig+0x1f0>
 8003ab2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ab4:	d818      	bhi.n	8003ae8 <UART_SetConfig+0x1f8>
 8003ab6:	2b80      	cmp	r3, #128	@ 0x80
 8003ab8:	d00a      	beq.n	8003ad0 <UART_SetConfig+0x1e0>
 8003aba:	2b80      	cmp	r3, #128	@ 0x80
 8003abc:	d814      	bhi.n	8003ae8 <UART_SetConfig+0x1f8>
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <UART_SetConfig+0x1d8>
 8003ac2:	2b40      	cmp	r3, #64	@ 0x40
 8003ac4:	d008      	beq.n	8003ad8 <UART_SetConfig+0x1e8>
 8003ac6:	e00f      	b.n	8003ae8 <UART_SetConfig+0x1f8>
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ace:	e082      	b.n	8003bd6 <UART_SetConfig+0x2e6>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ad6:	e07e      	b.n	8003bd6 <UART_SetConfig+0x2e6>
 8003ad8:	2304      	movs	r3, #4
 8003ada:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ade:	e07a      	b.n	8003bd6 <UART_SetConfig+0x2e6>
 8003ae0:	2308      	movs	r3, #8
 8003ae2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ae6:	e076      	b.n	8003bd6 <UART_SetConfig+0x2e6>
 8003ae8:	2310      	movs	r3, #16
 8003aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aee:	e072      	b.n	8003bd6 <UART_SetConfig+0x2e6>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a35      	ldr	r2, [pc, #212]	@ (8003bcc <UART_SetConfig+0x2dc>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d12a      	bne.n	8003b50 <UART_SetConfig+0x260>
 8003afa:	4b30      	ldr	r3, [pc, #192]	@ (8003bbc <UART_SetConfig+0x2cc>)
 8003afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b08:	d01a      	beq.n	8003b40 <UART_SetConfig+0x250>
 8003b0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b0e:	d81b      	bhi.n	8003b48 <UART_SetConfig+0x258>
 8003b10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b14:	d00c      	beq.n	8003b30 <UART_SetConfig+0x240>
 8003b16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b1a:	d815      	bhi.n	8003b48 <UART_SetConfig+0x258>
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <UART_SetConfig+0x238>
 8003b20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b24:	d008      	beq.n	8003b38 <UART_SetConfig+0x248>
 8003b26:	e00f      	b.n	8003b48 <UART_SetConfig+0x258>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b2e:	e052      	b.n	8003bd6 <UART_SetConfig+0x2e6>
 8003b30:	2302      	movs	r3, #2
 8003b32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b36:	e04e      	b.n	8003bd6 <UART_SetConfig+0x2e6>
 8003b38:	2304      	movs	r3, #4
 8003b3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b3e:	e04a      	b.n	8003bd6 <UART_SetConfig+0x2e6>
 8003b40:	2308      	movs	r3, #8
 8003b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b46:	e046      	b.n	8003bd6 <UART_SetConfig+0x2e6>
 8003b48:	2310      	movs	r3, #16
 8003b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b4e:	e042      	b.n	8003bd6 <UART_SetConfig+0x2e6>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a17      	ldr	r2, [pc, #92]	@ (8003bb4 <UART_SetConfig+0x2c4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d13a      	bne.n	8003bd0 <UART_SetConfig+0x2e0>
 8003b5a:	4b18      	ldr	r3, [pc, #96]	@ (8003bbc <UART_SetConfig+0x2cc>)
 8003b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b60:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b68:	d01a      	beq.n	8003ba0 <UART_SetConfig+0x2b0>
 8003b6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b6e:	d81b      	bhi.n	8003ba8 <UART_SetConfig+0x2b8>
 8003b70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b74:	d00c      	beq.n	8003b90 <UART_SetConfig+0x2a0>
 8003b76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b7a:	d815      	bhi.n	8003ba8 <UART_SetConfig+0x2b8>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <UART_SetConfig+0x298>
 8003b80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b84:	d008      	beq.n	8003b98 <UART_SetConfig+0x2a8>
 8003b86:	e00f      	b.n	8003ba8 <UART_SetConfig+0x2b8>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b8e:	e022      	b.n	8003bd6 <UART_SetConfig+0x2e6>
 8003b90:	2302      	movs	r3, #2
 8003b92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b96:	e01e      	b.n	8003bd6 <UART_SetConfig+0x2e6>
 8003b98:	2304      	movs	r3, #4
 8003b9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b9e:	e01a      	b.n	8003bd6 <UART_SetConfig+0x2e6>
 8003ba0:	2308      	movs	r3, #8
 8003ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ba6:	e016      	b.n	8003bd6 <UART_SetConfig+0x2e6>
 8003ba8:	2310      	movs	r3, #16
 8003baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bae:	e012      	b.n	8003bd6 <UART_SetConfig+0x2e6>
 8003bb0:	efff69f3 	.word	0xefff69f3
 8003bb4:	40008000 	.word	0x40008000
 8003bb8:	40013800 	.word	0x40013800
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	40004400 	.word	0x40004400
 8003bc4:	40004800 	.word	0x40004800
 8003bc8:	40004c00 	.word	0x40004c00
 8003bcc:	40005000 	.word	0x40005000
 8003bd0:	2310      	movs	r3, #16
 8003bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a9f      	ldr	r2, [pc, #636]	@ (8003e58 <UART_SetConfig+0x568>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d17a      	bne.n	8003cd6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003be0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	d824      	bhi.n	8003c32 <UART_SetConfig+0x342>
 8003be8:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf0 <UART_SetConfig+0x300>)
 8003bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bee:	bf00      	nop
 8003bf0:	08003c15 	.word	0x08003c15
 8003bf4:	08003c33 	.word	0x08003c33
 8003bf8:	08003c1d 	.word	0x08003c1d
 8003bfc:	08003c33 	.word	0x08003c33
 8003c00:	08003c23 	.word	0x08003c23
 8003c04:	08003c33 	.word	0x08003c33
 8003c08:	08003c33 	.word	0x08003c33
 8003c0c:	08003c33 	.word	0x08003c33
 8003c10:	08003c2b 	.word	0x08003c2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c14:	f7fe fcda 	bl	80025cc <HAL_RCC_GetPCLK1Freq>
 8003c18:	61f8      	str	r0, [r7, #28]
        break;
 8003c1a:	e010      	b.n	8003c3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c1c:	4b8f      	ldr	r3, [pc, #572]	@ (8003e5c <UART_SetConfig+0x56c>)
 8003c1e:	61fb      	str	r3, [r7, #28]
        break;
 8003c20:	e00d      	b.n	8003c3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c22:	f7fe fc3b 	bl	800249c <HAL_RCC_GetSysClockFreq>
 8003c26:	61f8      	str	r0, [r7, #28]
        break;
 8003c28:	e009      	b.n	8003c3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c2e:	61fb      	str	r3, [r7, #28]
        break;
 8003c30:	e005      	b.n	8003c3e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003c3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 80fb 	beq.w	8003e3c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	4413      	add	r3, r2
 8003c50:	69fa      	ldr	r2, [r7, #28]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d305      	bcc.n	8003c62 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d903      	bls.n	8003c6a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003c68:	e0e8      	b.n	8003e3c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	461c      	mov	r4, r3
 8003c70:	4615      	mov	r5, r2
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	f04f 0300 	mov.w	r3, #0
 8003c7a:	022b      	lsls	r3, r5, #8
 8003c7c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c80:	0222      	lsls	r2, r4, #8
 8003c82:	68f9      	ldr	r1, [r7, #12]
 8003c84:	6849      	ldr	r1, [r1, #4]
 8003c86:	0849      	lsrs	r1, r1, #1
 8003c88:	2000      	movs	r0, #0
 8003c8a:	4688      	mov	r8, r1
 8003c8c:	4681      	mov	r9, r0
 8003c8e:	eb12 0a08 	adds.w	sl, r2, r8
 8003c92:	eb43 0b09 	adc.w	fp, r3, r9
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	603b      	str	r3, [r7, #0]
 8003c9e:	607a      	str	r2, [r7, #4]
 8003ca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ca4:	4650      	mov	r0, sl
 8003ca6:	4659      	mov	r1, fp
 8003ca8:	f7fc fae2 	bl	8000270 <__aeabi_uldivmod>
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cba:	d308      	bcc.n	8003cce <UART_SetConfig+0x3de>
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cc2:	d204      	bcs.n	8003cce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	60da      	str	r2, [r3, #12]
 8003ccc:	e0b6      	b.n	8003e3c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003cd4:	e0b2      	b.n	8003e3c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cde:	d15e      	bne.n	8003d9e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003ce0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d828      	bhi.n	8003d3a <UART_SetConfig+0x44a>
 8003ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf0 <UART_SetConfig+0x400>)
 8003cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cee:	bf00      	nop
 8003cf0:	08003d15 	.word	0x08003d15
 8003cf4:	08003d1d 	.word	0x08003d1d
 8003cf8:	08003d25 	.word	0x08003d25
 8003cfc:	08003d3b 	.word	0x08003d3b
 8003d00:	08003d2b 	.word	0x08003d2b
 8003d04:	08003d3b 	.word	0x08003d3b
 8003d08:	08003d3b 	.word	0x08003d3b
 8003d0c:	08003d3b 	.word	0x08003d3b
 8003d10:	08003d33 	.word	0x08003d33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d14:	f7fe fc5a 	bl	80025cc <HAL_RCC_GetPCLK1Freq>
 8003d18:	61f8      	str	r0, [r7, #28]
        break;
 8003d1a:	e014      	b.n	8003d46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d1c:	f7fe fc6c 	bl	80025f8 <HAL_RCC_GetPCLK2Freq>
 8003d20:	61f8      	str	r0, [r7, #28]
        break;
 8003d22:	e010      	b.n	8003d46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d24:	4b4d      	ldr	r3, [pc, #308]	@ (8003e5c <UART_SetConfig+0x56c>)
 8003d26:	61fb      	str	r3, [r7, #28]
        break;
 8003d28:	e00d      	b.n	8003d46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d2a:	f7fe fbb7 	bl	800249c <HAL_RCC_GetSysClockFreq>
 8003d2e:	61f8      	str	r0, [r7, #28]
        break;
 8003d30:	e009      	b.n	8003d46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d36:	61fb      	str	r3, [r7, #28]
        break;
 8003d38:	e005      	b.n	8003d46 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003d44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d077      	beq.n	8003e3c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	005a      	lsls	r2, r3, #1
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	085b      	lsrs	r3, r3, #1
 8003d56:	441a      	add	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d60:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	2b0f      	cmp	r3, #15
 8003d66:	d916      	bls.n	8003d96 <UART_SetConfig+0x4a6>
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d6e:	d212      	bcs.n	8003d96 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	f023 030f 	bic.w	r3, r3, #15
 8003d78:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	085b      	lsrs	r3, r3, #1
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	8afb      	ldrh	r3, [r7, #22]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	8afa      	ldrh	r2, [r7, #22]
 8003d92:	60da      	str	r2, [r3, #12]
 8003d94:	e052      	b.n	8003e3c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d9c:	e04e      	b.n	8003e3c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d9e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d827      	bhi.n	8003df6 <UART_SetConfig+0x506>
 8003da6:	a201      	add	r2, pc, #4	@ (adr r2, 8003dac <UART_SetConfig+0x4bc>)
 8003da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dac:	08003dd1 	.word	0x08003dd1
 8003db0:	08003dd9 	.word	0x08003dd9
 8003db4:	08003de1 	.word	0x08003de1
 8003db8:	08003df7 	.word	0x08003df7
 8003dbc:	08003de7 	.word	0x08003de7
 8003dc0:	08003df7 	.word	0x08003df7
 8003dc4:	08003df7 	.word	0x08003df7
 8003dc8:	08003df7 	.word	0x08003df7
 8003dcc:	08003def 	.word	0x08003def
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dd0:	f7fe fbfc 	bl	80025cc <HAL_RCC_GetPCLK1Freq>
 8003dd4:	61f8      	str	r0, [r7, #28]
        break;
 8003dd6:	e014      	b.n	8003e02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dd8:	f7fe fc0e 	bl	80025f8 <HAL_RCC_GetPCLK2Freq>
 8003ddc:	61f8      	str	r0, [r7, #28]
        break;
 8003dde:	e010      	b.n	8003e02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003de0:	4b1e      	ldr	r3, [pc, #120]	@ (8003e5c <UART_SetConfig+0x56c>)
 8003de2:	61fb      	str	r3, [r7, #28]
        break;
 8003de4:	e00d      	b.n	8003e02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003de6:	f7fe fb59 	bl	800249c <HAL_RCC_GetSysClockFreq>
 8003dea:	61f8      	str	r0, [r7, #28]
        break;
 8003dec:	e009      	b.n	8003e02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003df2:	61fb      	str	r3, [r7, #28]
        break;
 8003df4:	e005      	b.n	8003e02 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e00:	bf00      	nop
    }

    if (pclk != 0U)
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d019      	beq.n	8003e3c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	085a      	lsrs	r2, r3, #1
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	441a      	add	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	2b0f      	cmp	r3, #15
 8003e20:	d909      	bls.n	8003e36 <UART_SetConfig+0x546>
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e28:	d205      	bcs.n	8003e36 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	60da      	str	r2, [r3, #12]
 8003e34:	e002      	b.n	8003e3c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003e48:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3728      	adds	r7, #40	@ 0x28
 8003e50:	46bd      	mov	sp, r7
 8003e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e56:	bf00      	nop
 8003e58:	40008000 	.word	0x40008000
 8003e5c:	00f42400 	.word	0x00f42400

08003e60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6c:	f003 0308 	and.w	r3, r3, #8
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed2:	f003 0304 	and.w	r3, r3, #4
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef4:	f003 0310 	and.w	r3, r3, #16
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d01a      	beq.n	8003f76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f5e:	d10a      	bne.n	8003f76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	605a      	str	r2, [r3, #4]
  }
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b098      	sub	sp, #96	@ 0x60
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fb4:	f7fd f9ba 	bl	800132c <HAL_GetTick>
 8003fb8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d12e      	bne.n	8004026 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fc8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f88c 	bl	80040f4 <UART_WaitOnFlagUntilTimeout>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d021      	beq.n	8004026 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fea:	e853 3f00 	ldrex	r3, [r3]
 8003fee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ff2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ff6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004000:	647b      	str	r3, [r7, #68]	@ 0x44
 8004002:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004004:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004006:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004008:	e841 2300 	strex	r3, r2, [r1]
 800400c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800400e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1e6      	bne.n	8003fe2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2220      	movs	r2, #32
 8004018:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e062      	b.n	80040ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b04      	cmp	r3, #4
 8004032:	d149      	bne.n	80040c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004034:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800403c:	2200      	movs	r2, #0
 800403e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f856 	bl	80040f4 <UART_WaitOnFlagUntilTimeout>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d03c      	beq.n	80040c8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004056:	e853 3f00 	ldrex	r3, [r3]
 800405a:	623b      	str	r3, [r7, #32]
   return(result);
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004062:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	461a      	mov	r2, r3
 800406a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800406c:	633b      	str	r3, [r7, #48]	@ 0x30
 800406e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004070:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004072:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004074:	e841 2300 	strex	r3, r2, [r1]
 8004078:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800407a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1e6      	bne.n	800404e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3308      	adds	r3, #8
 8004086:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	e853 3f00 	ldrex	r3, [r3]
 800408e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 0301 	bic.w	r3, r3, #1
 8004096:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	3308      	adds	r3, #8
 800409e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040a0:	61fa      	str	r2, [r7, #28]
 80040a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a4:	69b9      	ldr	r1, [r7, #24]
 80040a6:	69fa      	ldr	r2, [r7, #28]
 80040a8:	e841 2300 	strex	r3, r2, [r1]
 80040ac:	617b      	str	r3, [r7, #20]
   return(result);
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1e5      	bne.n	8004080 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e011      	b.n	80040ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2220      	movs	r2, #32
 80040cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2220      	movs	r2, #32
 80040d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3758      	adds	r7, #88	@ 0x58
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	603b      	str	r3, [r7, #0]
 8004100:	4613      	mov	r3, r2
 8004102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004104:	e04f      	b.n	80041a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800410c:	d04b      	beq.n	80041a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800410e:	f7fd f90d 	bl	800132c <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	429a      	cmp	r2, r3
 800411c:	d302      	bcc.n	8004124 <UART_WaitOnFlagUntilTimeout+0x30>
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e04e      	b.n	80041c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	2b00      	cmp	r3, #0
 8004134:	d037      	beq.n	80041a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b80      	cmp	r3, #128	@ 0x80
 800413a:	d034      	beq.n	80041a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2b40      	cmp	r3, #64	@ 0x40
 8004140:	d031      	beq.n	80041a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b08      	cmp	r3, #8
 800414e:	d110      	bne.n	8004172 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2208      	movs	r2, #8
 8004156:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 f8ff 	bl	800435c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2208      	movs	r2, #8
 8004162:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e029      	b.n	80041c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800417c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004180:	d111      	bne.n	80041a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800418a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 f8e5 	bl	800435c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2220      	movs	r2, #32
 8004196:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e00f      	b.n	80041c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	69da      	ldr	r2, [r3, #28]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	4013      	ands	r3, r2
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	bf0c      	ite	eq
 80041b6:	2301      	moveq	r3, #1
 80041b8:	2300      	movne	r3, #0
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	79fb      	ldrb	r3, [r7, #7]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d0a0      	beq.n	8004106 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b097      	sub	sp, #92	@ 0x5c
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	4613      	mov	r3, r2
 80041dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	88fa      	ldrh	r2, [r7, #6]
 80041e8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	88fa      	ldrh	r2, [r7, #6]
 80041f0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004202:	d10e      	bne.n	8004222 <UART_Start_Receive_IT+0x52>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d105      	bne.n	8004218 <UART_Start_Receive_IT+0x48>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004212:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004216:	e02d      	b.n	8004274 <UART_Start_Receive_IT+0xa4>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	22ff      	movs	r2, #255	@ 0xff
 800421c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004220:	e028      	b.n	8004274 <UART_Start_Receive_IT+0xa4>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10d      	bne.n	8004246 <UART_Start_Receive_IT+0x76>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d104      	bne.n	800423c <UART_Start_Receive_IT+0x6c>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	22ff      	movs	r2, #255	@ 0xff
 8004236:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800423a:	e01b      	b.n	8004274 <UART_Start_Receive_IT+0xa4>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	227f      	movs	r2, #127	@ 0x7f
 8004240:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004244:	e016      	b.n	8004274 <UART_Start_Receive_IT+0xa4>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800424e:	d10d      	bne.n	800426c <UART_Start_Receive_IT+0x9c>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d104      	bne.n	8004262 <UART_Start_Receive_IT+0x92>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	227f      	movs	r2, #127	@ 0x7f
 800425c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004260:	e008      	b.n	8004274 <UART_Start_Receive_IT+0xa4>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	223f      	movs	r2, #63	@ 0x3f
 8004266:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800426a:	e003      	b.n	8004274 <UART_Start_Receive_IT+0xa4>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2222      	movs	r2, #34	@ 0x22
 8004280:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3308      	adds	r3, #8
 800428a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800428e:	e853 3f00 	ldrex	r3, [r3]
 8004292:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	657b      	str	r3, [r7, #84]	@ 0x54
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3308      	adds	r3, #8
 80042a2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80042a4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80042a6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80042aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042ac:	e841 2300 	strex	r3, r2, [r1]
 80042b0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80042b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1e5      	bne.n	8004284 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042c0:	d107      	bne.n	80042d2 <UART_Start_Receive_IT+0x102>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d103      	bne.n	80042d2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4a21      	ldr	r2, [pc, #132]	@ (8004354 <UART_Start_Receive_IT+0x184>)
 80042ce:	669a      	str	r2, [r3, #104]	@ 0x68
 80042d0:	e002      	b.n	80042d8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4a20      	ldr	r2, [pc, #128]	@ (8004358 <UART_Start_Receive_IT+0x188>)
 80042d6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d019      	beq.n	8004314 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e8:	e853 3f00 	ldrex	r3, [r3]
 80042ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80042f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	461a      	mov	r2, r3
 80042fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004300:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004302:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004304:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004306:	e841 2300 	strex	r3, r2, [r1]
 800430a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800430c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1e6      	bne.n	80042e0 <UART_Start_Receive_IT+0x110>
 8004312:	e018      	b.n	8004346 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	e853 3f00 	ldrex	r3, [r3]
 8004320:	613b      	str	r3, [r7, #16]
   return(result);
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	f043 0320 	orr.w	r3, r3, #32
 8004328:	653b      	str	r3, [r7, #80]	@ 0x50
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	461a      	mov	r2, r3
 8004330:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004332:	623b      	str	r3, [r7, #32]
 8004334:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004336:	69f9      	ldr	r1, [r7, #28]
 8004338:	6a3a      	ldr	r2, [r7, #32]
 800433a:	e841 2300 	strex	r3, r2, [r1]
 800433e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1e6      	bne.n	8004314 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	375c      	adds	r7, #92	@ 0x5c
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	08004661 	.word	0x08004661
 8004358:	080044a5 	.word	0x080044a5

0800435c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800435c:	b480      	push	{r7}
 800435e:	b095      	sub	sp, #84	@ 0x54
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800436c:	e853 3f00 	ldrex	r3, [r3]
 8004370:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004374:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004378:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	461a      	mov	r2, r3
 8004380:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004382:	643b      	str	r3, [r7, #64]	@ 0x40
 8004384:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004386:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004388:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800438a:	e841 2300 	strex	r3, r2, [r1]
 800438e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1e6      	bne.n	8004364 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	3308      	adds	r3, #8
 800439c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	e853 3f00 	ldrex	r3, [r3]
 80043a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	f023 0301 	bic.w	r3, r3, #1
 80043ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3308      	adds	r3, #8
 80043b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043be:	e841 2300 	strex	r3, r2, [r1]
 80043c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1e5      	bne.n	8004396 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d118      	bne.n	8004404 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	e853 3f00 	ldrex	r3, [r3]
 80043de:	60bb      	str	r3, [r7, #8]
   return(result);
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f023 0310 	bic.w	r3, r3, #16
 80043e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	461a      	mov	r2, r3
 80043ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043f0:	61bb      	str	r3, [r7, #24]
 80043f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f4:	6979      	ldr	r1, [r7, #20]
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	e841 2300 	strex	r3, r2, [r1]
 80043fc:	613b      	str	r3, [r7, #16]
   return(result);
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1e6      	bne.n	80043d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2220      	movs	r2, #32
 8004408:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004418:	bf00      	nop
 800441a:	3754      	adds	r7, #84	@ 0x54
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004430:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f7ff fa3e 	bl	80038c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004448:	bf00      	nop
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b088      	sub	sp, #32
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	e853 3f00 	ldrex	r3, [r3]
 8004464:	60bb      	str	r3, [r7, #8]
   return(result);
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800446c:	61fb      	str	r3, [r7, #28]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	461a      	mov	r2, r3
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	61bb      	str	r3, [r7, #24]
 8004478:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447a:	6979      	ldr	r1, [r7, #20]
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	e841 2300 	strex	r3, r2, [r1]
 8004482:	613b      	str	r3, [r7, #16]
   return(result);
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1e6      	bne.n	8004458 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2220      	movs	r2, #32
 800448e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7ff fa0a 	bl	80038b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800449c:	bf00      	nop
 800449e:	3720      	adds	r7, #32
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b09c      	sub	sp, #112	@ 0x70
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80044b2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044bc:	2b22      	cmp	r3, #34	@ 0x22
 80044be:	f040 80be 	bne.w	800463e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80044c8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80044cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80044d0:	b2d9      	uxtb	r1, r3
 80044d2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044dc:	400a      	ands	r2, r1
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004504:	b29b      	uxth	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	f040 80a3 	bne.w	8004652 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004512:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004514:	e853 3f00 	ldrex	r3, [r3]
 8004518:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800451a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800451c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004520:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	461a      	mov	r2, r3
 8004528:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800452a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800452c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004530:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004532:	e841 2300 	strex	r3, r2, [r1]
 8004536:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004538:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1e6      	bne.n	800450c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	3308      	adds	r3, #8
 8004544:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004548:	e853 3f00 	ldrex	r3, [r3]
 800454c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800454e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004550:	f023 0301 	bic.w	r3, r3, #1
 8004554:	667b      	str	r3, [r7, #100]	@ 0x64
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	3308      	adds	r3, #8
 800455c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800455e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004560:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004562:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004564:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004566:	e841 2300 	strex	r3, r2, [r1]
 800456a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800456c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1e5      	bne.n	800453e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2220      	movs	r2, #32
 8004576:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a34      	ldr	r2, [pc, #208]	@ (800465c <UART_RxISR_8BIT+0x1b8>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d01f      	beq.n	80045d0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d018      	beq.n	80045d0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a6:	e853 3f00 	ldrex	r3, [r3]
 80045aa:	623b      	str	r3, [r7, #32]
   return(result);
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80045b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	461a      	mov	r2, r3
 80045ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80045be:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045c4:	e841 2300 	strex	r3, r2, [r1]
 80045c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80045ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1e6      	bne.n	800459e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d12e      	bne.n	8004636 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	e853 3f00 	ldrex	r3, [r3]
 80045ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 0310 	bic.w	r3, r3, #16
 80045f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	461a      	mov	r2, r3
 80045fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045fc:	61fb      	str	r3, [r7, #28]
 80045fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004600:	69b9      	ldr	r1, [r7, #24]
 8004602:	69fa      	ldr	r2, [r7, #28]
 8004604:	e841 2300 	strex	r3, r2, [r1]
 8004608:	617b      	str	r3, [r7, #20]
   return(result);
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1e6      	bne.n	80045de <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f003 0310 	and.w	r3, r3, #16
 800461a:	2b10      	cmp	r3, #16
 800461c:	d103      	bne.n	8004626 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2210      	movs	r2, #16
 8004624:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800462c:	4619      	mov	r1, r3
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7ff f952 	bl	80038d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004634:	e00d      	b.n	8004652 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fc f884 	bl	8000744 <HAL_UART_RxCpltCallback>
}
 800463c:	e009      	b.n	8004652 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	8b1b      	ldrh	r3, [r3, #24]
 8004644:	b29a      	uxth	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0208 	orr.w	r2, r2, #8
 800464e:	b292      	uxth	r2, r2
 8004650:	831a      	strh	r2, [r3, #24]
}
 8004652:	bf00      	nop
 8004654:	3770      	adds	r7, #112	@ 0x70
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	40008000 	.word	0x40008000

08004660 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b09c      	sub	sp, #112	@ 0x70
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800466e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004678:	2b22      	cmp	r3, #34	@ 0x22
 800467a:	f040 80be 	bne.w	80047fa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004684:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800468c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800468e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004692:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004696:	4013      	ands	r3, r2
 8004698:	b29a      	uxth	r2, r3
 800469a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800469c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a2:	1c9a      	adds	r2, r3, #2
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f040 80a3 	bne.w	800480e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046d0:	e853 3f00 	ldrex	r3, [r3]
 80046d4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80046d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	461a      	mov	r2, r3
 80046e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80046e8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80046ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80046ee:	e841 2300 	strex	r3, r2, [r1]
 80046f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80046f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1e6      	bne.n	80046c8 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3308      	adds	r3, #8
 8004700:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004704:	e853 3f00 	ldrex	r3, [r3]
 8004708:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800470a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470c:	f023 0301 	bic.w	r3, r3, #1
 8004710:	663b      	str	r3, [r7, #96]	@ 0x60
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3308      	adds	r3, #8
 8004718:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800471a:	643a      	str	r2, [r7, #64]	@ 0x40
 800471c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004720:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004722:	e841 2300 	strex	r3, r2, [r1]
 8004726:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1e5      	bne.n	80046fa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2220      	movs	r2, #32
 8004732:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a34      	ldr	r2, [pc, #208]	@ (8004818 <UART_RxISR_16BIT+0x1b8>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d01f      	beq.n	800478c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d018      	beq.n	800478c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	e853 3f00 	ldrex	r3, [r3]
 8004766:	61fb      	str	r3, [r7, #28]
   return(result);
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800476e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	461a      	mov	r2, r3
 8004776:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004778:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800477a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800477e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004780:	e841 2300 	strex	r3, r2, [r1]
 8004784:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1e6      	bne.n	800475a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004790:	2b01      	cmp	r3, #1
 8004792:	d12e      	bne.n	80047f2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	e853 3f00 	ldrex	r3, [r3]
 80047a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f023 0310 	bic.w	r3, r3, #16
 80047ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	461a      	mov	r2, r3
 80047b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047b8:	61bb      	str	r3, [r7, #24]
 80047ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047bc:	6979      	ldr	r1, [r7, #20]
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	e841 2300 	strex	r3, r2, [r1]
 80047c4:	613b      	str	r3, [r7, #16]
   return(result);
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1e6      	bne.n	800479a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	f003 0310 	and.w	r3, r3, #16
 80047d6:	2b10      	cmp	r3, #16
 80047d8:	d103      	bne.n	80047e2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2210      	movs	r2, #16
 80047e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80047e8:	4619      	mov	r1, r3
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7ff f874 	bl	80038d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047f0:	e00d      	b.n	800480e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7fb ffa6 	bl	8000744 <HAL_UART_RxCpltCallback>
}
 80047f8:	e009      	b.n	800480e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	8b1b      	ldrh	r3, [r3, #24]
 8004800:	b29a      	uxth	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0208 	orr.w	r2, r2, #8
 800480a:	b292      	uxth	r2, r2
 800480c:	831a      	strh	r2, [r3, #24]
}
 800480e:	bf00      	nop
 8004810:	3770      	adds	r7, #112	@ 0x70
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	40008000 	.word	0x40008000

0800481c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	4603      	mov	r3, r0
 8004838:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800483a:	2300      	movs	r3, #0
 800483c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800483e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004842:	2b84      	cmp	r3, #132	@ 0x84
 8004844:	d005      	beq.n	8004852 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004846:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	4413      	add	r3, r2
 800484e:	3303      	adds	r3, #3
 8004850:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004852:	68fb      	ldr	r3, [r7, #12]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004864:	f000 fdca 	bl	80053fc <vTaskStartScheduler>
  
  return osOK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	bd80      	pop	{r7, pc}

0800486e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800486e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004870:	b089      	sub	sp, #36	@ 0x24
 8004872:	af04      	add	r7, sp, #16
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d020      	beq.n	80048c2 <osThreadCreate+0x54>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d01c      	beq.n	80048c2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685c      	ldr	r4, [r3, #4]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	691e      	ldr	r6, [r3, #16]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff ffc8 	bl	8004830 <makeFreeRtosPriority>
 80048a0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048aa:	9202      	str	r2, [sp, #8]
 80048ac:	9301      	str	r3, [sp, #4]
 80048ae:	9100      	str	r1, [sp, #0]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	4632      	mov	r2, r6
 80048b4:	4629      	mov	r1, r5
 80048b6:	4620      	mov	r0, r4
 80048b8:	f000 fbd2 	bl	8005060 <xTaskCreateStatic>
 80048bc:	4603      	mov	r3, r0
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	e01c      	b.n	80048fc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685c      	ldr	r4, [r3, #4]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048ce:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7ff ffaa 	bl	8004830 <makeFreeRtosPriority>
 80048dc:	4602      	mov	r2, r0
 80048de:	f107 030c 	add.w	r3, r7, #12
 80048e2:	9301      	str	r3, [sp, #4]
 80048e4:	9200      	str	r2, [sp, #0]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	4632      	mov	r2, r6
 80048ea:	4629      	mov	r1, r5
 80048ec:	4620      	mov	r0, r4
 80048ee:	f000 fc17 	bl	8005120 <xTaskCreate>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d001      	beq.n	80048fc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80048f8:	2300      	movs	r3, #0
 80048fa:	e000      	b.n	80048fe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80048fc:	68fb      	ldr	r3, [r7, #12]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004906 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b084      	sub	sp, #16
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <osDelay+0x16>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	e000      	b.n	800491e <osDelay+0x18>
 800491c:	2301      	movs	r3, #1
 800491e:	4618      	mov	r0, r3
 8004920:	f000 fd36 	bl	8005390 <vTaskDelay>
  
  return osOK;
 8004924:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f103 0208 	add.w	r2, r3, #8
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004946:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f103 0208 	add.w	r2, r3, #8
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f103 0208 	add.w	r2, r3, #8
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800496e:	b480      	push	{r7}
 8004970:	b083      	sub	sp, #12
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	689a      	ldr	r2, [r3, #8]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	601a      	str	r2, [r3, #0]
}
 80049c4:	bf00      	nop
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049e6:	d103      	bne.n	80049f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	e00c      	b.n	8004a0a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	3308      	adds	r3, #8
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	e002      	b.n	80049fe <vListInsert+0x2e>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d2f6      	bcs.n	80049f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	601a      	str	r2, [r3, #0]
}
 8004a36:	bf00      	nop
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a42:	b480      	push	{r7}
 8004a44:	b085      	sub	sp, #20
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6892      	ldr	r2, [r2, #8]
 8004a58:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	6852      	ldr	r2, [r2, #4]
 8004a62:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d103      	bne.n	8004a76 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689a      	ldr	r2, [r3, #8]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	1e5a      	subs	r2, r3, #1
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
	...

08004a98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10b      	bne.n	8004ac4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab0:	f383 8811 	msr	BASEPRI, r3
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004abe:	bf00      	nop
 8004ac0:	bf00      	nop
 8004ac2:	e7fd      	b.n	8004ac0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004ac4:	f001 fba8 	bl	8006218 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ad0:	68f9      	ldr	r1, [r7, #12]
 8004ad2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004ad4:	fb01 f303 	mul.w	r3, r1, r3
 8004ad8:	441a      	add	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004af4:	3b01      	subs	r3, #1
 8004af6:	68f9      	ldr	r1, [r7, #12]
 8004af8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004afa:	fb01 f303 	mul.w	r3, r1, r3
 8004afe:	441a      	add	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	22ff      	movs	r2, #255	@ 0xff
 8004b08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	22ff      	movs	r2, #255	@ 0xff
 8004b10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d114      	bne.n	8004b44 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d01a      	beq.n	8004b58 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	3310      	adds	r3, #16
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fed8 	bl	80058dc <xTaskRemoveFromEventList>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d012      	beq.n	8004b58 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b32:	4b0d      	ldr	r3, [pc, #52]	@ (8004b68 <xQueueGenericReset+0xd0>)
 8004b34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	f3bf 8f6f 	isb	sy
 8004b42:	e009      	b.n	8004b58 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	3310      	adds	r3, #16
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7ff fef0 	bl	800492e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	3324      	adds	r3, #36	@ 0x24
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7ff feeb 	bl	800492e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b58:	f001 fb90 	bl	800627c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b5c:	2301      	movs	r3, #1
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	e000ed04 	.word	0xe000ed04

08004b6c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b08a      	sub	sp, #40	@ 0x28
 8004b70:	af02      	add	r7, sp, #8
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	4613      	mov	r3, r2
 8004b78:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10b      	bne.n	8004b98 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	613b      	str	r3, [r7, #16]
}
 8004b92:	bf00      	nop
 8004b94:	bf00      	nop
 8004b96:	e7fd      	b.n	8004b94 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	fb02 f303 	mul.w	r3, r2, r3
 8004ba0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	3348      	adds	r3, #72	@ 0x48
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f001 fc58 	bl	800645c <pvPortMalloc>
 8004bac:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d011      	beq.n	8004bd8 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	3348      	adds	r3, #72	@ 0x48
 8004bbc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004bc6:	79fa      	ldrb	r2, [r7, #7]
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	68b9      	ldr	r1, [r7, #8]
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f000 f805 	bl	8004be2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004bd8:	69bb      	ldr	r3, [r7, #24]
	}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3720      	adds	r7, #32
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b084      	sub	sp, #16
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	60f8      	str	r0, [r7, #12]
 8004bea:	60b9      	str	r1, [r7, #8]
 8004bec:	607a      	str	r2, [r7, #4]
 8004bee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d103      	bne.n	8004bfe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	e002      	b.n	8004c04 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c10:	2101      	movs	r1, #1
 8004c12:	69b8      	ldr	r0, [r7, #24]
 8004c14:	f7ff ff40 	bl	8004a98 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c18:	bf00      	nop
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b08e      	sub	sp, #56	@ 0x38
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10b      	bne.n	8004c4c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8004c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	623b      	str	r3, [r7, #32]
}
 8004c46:	bf00      	nop
 8004c48:	bf00      	nop
 8004c4a:	e7fd      	b.n	8004c48 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00b      	beq.n	8004c6c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8004c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c58:	f383 8811 	msr	BASEPRI, r3
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	61fb      	str	r3, [r7, #28]
}
 8004c66:	bf00      	nop
 8004c68:	bf00      	nop
 8004c6a:	e7fd      	b.n	8004c68 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d103      	bne.n	8004c7c <xQueueGiveFromISR+0x5c>
 8004c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <xQueueGiveFromISR+0x60>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e000      	b.n	8004c82 <xQueueGiveFromISR+0x62>
 8004c80:	2300      	movs	r3, #0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10b      	bne.n	8004c9e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8004c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c8a:	f383 8811 	msr	BASEPRI, r3
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	f3bf 8f4f 	dsb	sy
 8004c96:	61bb      	str	r3, [r7, #24]
}
 8004c98:	bf00      	nop
 8004c9a:	bf00      	nop
 8004c9c:	e7fd      	b.n	8004c9a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c9e:	f001 fb9b 	bl	80063d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004ca2:	f3ef 8211 	mrs	r2, BASEPRI
 8004ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	617a      	str	r2, [r7, #20]
 8004cb8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004cba:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d22b      	bcs.n	8004d26 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004cd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cde:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ce0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ce8:	d112      	bne.n	8004d10 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d016      	beq.n	8004d20 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf4:	3324      	adds	r3, #36	@ 0x24
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 fdf0 	bl	80058dc <xTaskRemoveFromEventList>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00e      	beq.n	8004d20 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00b      	beq.n	8004d20 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]
 8004d0e:	e007      	b.n	8004d20 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d14:	3301      	adds	r3, #1
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	b25a      	sxtb	r2, r3
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004d20:	2301      	movs	r3, #1
 8004d22:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d24:	e001      	b.n	8004d2a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d26:	2300      	movs	r3, #0
 8004d28:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d2c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d34:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3738      	adds	r7, #56	@ 0x38
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08e      	sub	sp, #56	@ 0x38
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004d52:	2300      	movs	r3, #0
 8004d54:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10b      	bne.n	8004d74 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	623b      	str	r3, [r7, #32]
}
 8004d6e:	bf00      	nop
 8004d70:	bf00      	nop
 8004d72:	e7fd      	b.n	8004d70 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00b      	beq.n	8004d94 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d80:	f383 8811 	msr	BASEPRI, r3
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	61fb      	str	r3, [r7, #28]
}
 8004d8e:	bf00      	nop
 8004d90:	bf00      	nop
 8004d92:	e7fd      	b.n	8004d90 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d94:	f000 ff72 	bl	8005c7c <xTaskGetSchedulerState>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d102      	bne.n	8004da4 <xQueueSemaphoreTake+0x64>
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <xQueueSemaphoreTake+0x68>
 8004da4:	2301      	movs	r3, #1
 8004da6:	e000      	b.n	8004daa <xQueueSemaphoreTake+0x6a>
 8004da8:	2300      	movs	r3, #0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10b      	bne.n	8004dc6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	61bb      	str	r3, [r7, #24]
}
 8004dc0:	bf00      	nop
 8004dc2:	bf00      	nop
 8004dc4:	e7fd      	b.n	8004dc2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004dc6:	f001 fa27 	bl	8006218 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dce:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d024      	beq.n	8004e20 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd8:	1e5a      	subs	r2, r3, #1
 8004dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ddc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d104      	bne.n	8004df0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004de6:	f001 f86d 	bl	8005ec4 <pvTaskIncrementMutexHeldCount>
 8004dea:	4602      	mov	r2, r0
 8004dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dee:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00f      	beq.n	8004e18 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dfa:	3310      	adds	r3, #16
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 fd6d 	bl	80058dc <xTaskRemoveFromEventList>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d007      	beq.n	8004e18 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e08:	4b54      	ldr	r3, [pc, #336]	@ (8004f5c <xQueueSemaphoreTake+0x21c>)
 8004e0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e18:	f001 fa30 	bl	800627c <vPortExitCritical>
				return pdPASS;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e098      	b.n	8004f52 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d112      	bne.n	8004e4c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00b      	beq.n	8004e44 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	617b      	str	r3, [r7, #20]
}
 8004e3e:	bf00      	nop
 8004e40:	bf00      	nop
 8004e42:	e7fd      	b.n	8004e40 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004e44:	f001 fa1a 	bl	800627c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	e082      	b.n	8004f52 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d106      	bne.n	8004e60 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e52:	f107 030c 	add.w	r3, r7, #12
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 fda4 	bl	80059a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e60:	f001 fa0c 	bl	800627c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e64:	f000 fb2c 	bl	80054c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e68:	f001 f9d6 	bl	8006218 <vPortEnterCritical>
 8004e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e6e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e72:	b25b      	sxtb	r3, r3
 8004e74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e78:	d103      	bne.n	8004e82 <xQueueSemaphoreTake+0x142>
 8004e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e88:	b25b      	sxtb	r3, r3
 8004e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e8e:	d103      	bne.n	8004e98 <xQueueSemaphoreTake+0x158>
 8004e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e98:	f001 f9f0 	bl	800627c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e9c:	463a      	mov	r2, r7
 8004e9e:	f107 030c 	add.w	r3, r7, #12
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 fd93 	bl	80059d0 <xTaskCheckForTimeOut>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d132      	bne.n	8004f16 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004eb0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004eb2:	f000 f8bf 	bl	8005034 <prvIsQueueEmpty>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d026      	beq.n	8004f0a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d109      	bne.n	8004ed8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004ec4:	f001 f9a8 	bl	8006218 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f000 fef3 	bl	8005cb8 <xTaskPriorityInherit>
 8004ed2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004ed4:	f001 f9d2 	bl	800627c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eda:	3324      	adds	r3, #36	@ 0x24
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	4611      	mov	r1, r2
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 fcd5 	bl	8005890 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ee6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ee8:	f000 f852 	bl	8004f90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004eec:	f000 faf6 	bl	80054dc <xTaskResumeAll>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f47f af67 	bne.w	8004dc6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004ef8:	4b18      	ldr	r3, [pc, #96]	@ (8004f5c <xQueueSemaphoreTake+0x21c>)
 8004efa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	f3bf 8f4f 	dsb	sy
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	e75d      	b.n	8004dc6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004f0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004f0c:	f000 f840 	bl	8004f90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f10:	f000 fae4 	bl	80054dc <xTaskResumeAll>
 8004f14:	e757      	b.n	8004dc6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004f16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004f18:	f000 f83a 	bl	8004f90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f1c:	f000 fade 	bl	80054dc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004f22:	f000 f887 	bl	8005034 <prvIsQueueEmpty>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f43f af4c 	beq.w	8004dc6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00d      	beq.n	8004f50 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004f34:	f001 f970 	bl	8006218 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004f38:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004f3a:	f000 f811 	bl	8004f60 <prvGetDisinheritPriorityAfterTimeout>
 8004f3e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 ff2c 	bl	8005da4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004f4c:	f001 f996 	bl	800627c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3738      	adds	r7, #56	@ 0x38
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	e000ed04 	.word	0xe000ed04

08004f60 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d006      	beq.n	8004f7e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f1c3 0307 	rsb	r3, r3, #7
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	e001      	b.n	8004f82 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004f82:	68fb      	ldr	r3, [r7, #12]
	}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f98:	f001 f93e 	bl	8006218 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004fa2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fa4:	e011      	b.n	8004fca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d012      	beq.n	8004fd4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	3324      	adds	r3, #36	@ 0x24
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 fc92 	bl	80058dc <xTaskRemoveFromEventList>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004fbe:	f000 fd6b 	bl	8005a98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004fc2:	7bfb      	ldrb	r3, [r7, #15]
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	dce9      	bgt.n	8004fa6 <prvUnlockQueue+0x16>
 8004fd2:	e000      	b.n	8004fd6 <prvUnlockQueue+0x46>
					break;
 8004fd4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	22ff      	movs	r2, #255	@ 0xff
 8004fda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004fde:	f001 f94d 	bl	800627c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004fe2:	f001 f919 	bl	8006218 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fee:	e011      	b.n	8005014 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d012      	beq.n	800501e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	3310      	adds	r3, #16
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 fc6d 	bl	80058dc <xTaskRemoveFromEventList>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005008:	f000 fd46 	bl	8005a98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800500c:	7bbb      	ldrb	r3, [r7, #14]
 800500e:	3b01      	subs	r3, #1
 8005010:	b2db      	uxtb	r3, r3
 8005012:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005014:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005018:	2b00      	cmp	r3, #0
 800501a:	dce9      	bgt.n	8004ff0 <prvUnlockQueue+0x60>
 800501c:	e000      	b.n	8005020 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800501e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	22ff      	movs	r2, #255	@ 0xff
 8005024:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005028:	f001 f928 	bl	800627c <vPortExitCritical>
}
 800502c:	bf00      	nop
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800503c:	f001 f8ec 	bl	8006218 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005044:	2b00      	cmp	r3, #0
 8005046:	d102      	bne.n	800504e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005048:	2301      	movs	r3, #1
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	e001      	b.n	8005052 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800504e:	2300      	movs	r3, #0
 8005050:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005052:	f001 f913 	bl	800627c <vPortExitCritical>

	return xReturn;
 8005056:	68fb      	ldr	r3, [r7, #12]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08e      	sub	sp, #56	@ 0x38
 8005064:	af04      	add	r7, sp, #16
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
 800506c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800506e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10b      	bne.n	800508c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	623b      	str	r3, [r7, #32]
}
 8005086:	bf00      	nop
 8005088:	bf00      	nop
 800508a:	e7fd      	b.n	8005088 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800508c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10b      	bne.n	80050aa <xTaskCreateStatic+0x4a>
	__asm volatile
 8005092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005096:	f383 8811 	msr	BASEPRI, r3
 800509a:	f3bf 8f6f 	isb	sy
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	61fb      	str	r3, [r7, #28]
}
 80050a4:	bf00      	nop
 80050a6:	bf00      	nop
 80050a8:	e7fd      	b.n	80050a6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050aa:	2354      	movs	r3, #84	@ 0x54
 80050ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	2b54      	cmp	r3, #84	@ 0x54
 80050b2:	d00b      	beq.n	80050cc <xTaskCreateStatic+0x6c>
	__asm volatile
 80050b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b8:	f383 8811 	msr	BASEPRI, r3
 80050bc:	f3bf 8f6f 	isb	sy
 80050c0:	f3bf 8f4f 	dsb	sy
 80050c4:	61bb      	str	r3, [r7, #24]
}
 80050c6:	bf00      	nop
 80050c8:	bf00      	nop
 80050ca:	e7fd      	b.n	80050c8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80050cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d01e      	beq.n	8005112 <xTaskCreateStatic+0xb2>
 80050d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d01b      	beq.n	8005112 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050dc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80050e2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050ec:	2300      	movs	r3, #0
 80050ee:	9303      	str	r3, [sp, #12]
 80050f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f2:	9302      	str	r3, [sp, #8]
 80050f4:	f107 0314 	add.w	r3, r7, #20
 80050f8:	9301      	str	r3, [sp, #4]
 80050fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	68b9      	ldr	r1, [r7, #8]
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f000 f850 	bl	80051aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800510a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800510c:	f000 f8d6 	bl	80052bc <prvAddNewTaskToReadyList>
 8005110:	e001      	b.n	8005116 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005112:	2300      	movs	r3, #0
 8005114:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005116:	697b      	ldr	r3, [r7, #20]
	}
 8005118:	4618      	mov	r0, r3
 800511a:	3728      	adds	r7, #40	@ 0x28
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005120:	b580      	push	{r7, lr}
 8005122:	b08c      	sub	sp, #48	@ 0x30
 8005124:	af04      	add	r7, sp, #16
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	603b      	str	r3, [r7, #0]
 800512c:	4613      	mov	r3, r2
 800512e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005130:	88fb      	ldrh	r3, [r7, #6]
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4618      	mov	r0, r3
 8005136:	f001 f991 	bl	800645c <pvPortMalloc>
 800513a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00e      	beq.n	8005160 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005142:	2054      	movs	r0, #84	@ 0x54
 8005144:	f001 f98a 	bl	800645c <pvPortMalloc>
 8005148:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	631a      	str	r2, [r3, #48]	@ 0x30
 8005156:	e005      	b.n	8005164 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005158:	6978      	ldr	r0, [r7, #20]
 800515a:	f001 fa4d 	bl	80065f8 <vPortFree>
 800515e:	e001      	b.n	8005164 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005160:	2300      	movs	r3, #0
 8005162:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d017      	beq.n	800519a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005172:	88fa      	ldrh	r2, [r7, #6]
 8005174:	2300      	movs	r3, #0
 8005176:	9303      	str	r3, [sp, #12]
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	9302      	str	r3, [sp, #8]
 800517c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800517e:	9301      	str	r3, [sp, #4]
 8005180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	68b9      	ldr	r1, [r7, #8]
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 f80e 	bl	80051aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800518e:	69f8      	ldr	r0, [r7, #28]
 8005190:	f000 f894 	bl	80052bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005194:	2301      	movs	r3, #1
 8005196:	61bb      	str	r3, [r7, #24]
 8005198:	e002      	b.n	80051a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800519a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800519e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051a0:	69bb      	ldr	r3, [r7, #24]
	}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3720      	adds	r7, #32
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b088      	sub	sp, #32
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	60f8      	str	r0, [r7, #12]
 80051b2:	60b9      	str	r1, [r7, #8]
 80051b4:	607a      	str	r2, [r7, #4]
 80051b6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80051b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80051c2:	3b01      	subs	r3, #1
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	f023 0307 	bic.w	r3, r3, #7
 80051d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	f003 0307 	and.w	r3, r3, #7
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00b      	beq.n	80051f4 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	617b      	str	r3, [r7, #20]
}
 80051ee:	bf00      	nop
 80051f0:	bf00      	nop
 80051f2:	e7fd      	b.n	80051f0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d01f      	beq.n	800523a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051fa:	2300      	movs	r3, #0
 80051fc:	61fb      	str	r3, [r7, #28]
 80051fe:	e012      	b.n	8005226 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	4413      	add	r3, r2
 8005206:	7819      	ldrb	r1, [r3, #0]
 8005208:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	4413      	add	r3, r2
 800520e:	3334      	adds	r3, #52	@ 0x34
 8005210:	460a      	mov	r2, r1
 8005212:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	4413      	add	r3, r2
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d006      	beq.n	800522e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	3301      	adds	r3, #1
 8005224:	61fb      	str	r3, [r7, #28]
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	2b0f      	cmp	r3, #15
 800522a:	d9e9      	bls.n	8005200 <prvInitialiseNewTask+0x56>
 800522c:	e000      	b.n	8005230 <prvInitialiseNewTask+0x86>
			{
				break;
 800522e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005238:	e003      	b.n	8005242 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800523a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005244:	2b06      	cmp	r3, #6
 8005246:	d901      	bls.n	800524c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005248:	2306      	movs	r3, #6
 800524a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800524c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005250:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005254:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005256:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525a:	2200      	movs	r2, #0
 800525c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800525e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005260:	3304      	adds	r3, #4
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff fb83 	bl	800496e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526a:	3318      	adds	r3, #24
 800526c:	4618      	mov	r0, r3
 800526e:	f7ff fb7e 	bl	800496e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005274:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005276:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800527a:	f1c3 0207 	rsb	r2, r3, #7
 800527e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005280:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005284:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005286:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528a:	2200      	movs	r2, #0
 800528c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800528e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	68f9      	ldr	r1, [r7, #12]
 800529a:	69b8      	ldr	r0, [r7, #24]
 800529c:	f000 fe8c 	bl	8005fb8 <pxPortInitialiseStack>
 80052a0:	4602      	mov	r2, r0
 80052a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80052a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d002      	beq.n	80052b2 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052b2:	bf00      	nop
 80052b4:	3720      	adds	r7, #32
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052c4:	f000 ffa8 	bl	8006218 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80052c8:	4b2a      	ldr	r3, [pc, #168]	@ (8005374 <prvAddNewTaskToReadyList+0xb8>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3301      	adds	r3, #1
 80052ce:	4a29      	ldr	r2, [pc, #164]	@ (8005374 <prvAddNewTaskToReadyList+0xb8>)
 80052d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80052d2:	4b29      	ldr	r3, [pc, #164]	@ (8005378 <prvAddNewTaskToReadyList+0xbc>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d109      	bne.n	80052ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052da:	4a27      	ldr	r2, [pc, #156]	@ (8005378 <prvAddNewTaskToReadyList+0xbc>)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052e0:	4b24      	ldr	r3, [pc, #144]	@ (8005374 <prvAddNewTaskToReadyList+0xb8>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d110      	bne.n	800530a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052e8:	f000 fbfa 	bl	8005ae0 <prvInitialiseTaskLists>
 80052ec:	e00d      	b.n	800530a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052ee:	4b23      	ldr	r3, [pc, #140]	@ (800537c <prvAddNewTaskToReadyList+0xc0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d109      	bne.n	800530a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052f6:	4b20      	ldr	r3, [pc, #128]	@ (8005378 <prvAddNewTaskToReadyList+0xbc>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005300:	429a      	cmp	r2, r3
 8005302:	d802      	bhi.n	800530a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005304:	4a1c      	ldr	r2, [pc, #112]	@ (8005378 <prvAddNewTaskToReadyList+0xbc>)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800530a:	4b1d      	ldr	r3, [pc, #116]	@ (8005380 <prvAddNewTaskToReadyList+0xc4>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	3301      	adds	r3, #1
 8005310:	4a1b      	ldr	r2, [pc, #108]	@ (8005380 <prvAddNewTaskToReadyList+0xc4>)
 8005312:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005318:	2201      	movs	r2, #1
 800531a:	409a      	lsls	r2, r3
 800531c:	4b19      	ldr	r3, [pc, #100]	@ (8005384 <prvAddNewTaskToReadyList+0xc8>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4313      	orrs	r3, r2
 8005322:	4a18      	ldr	r2, [pc, #96]	@ (8005384 <prvAddNewTaskToReadyList+0xc8>)
 8005324:	6013      	str	r3, [r2, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800532a:	4613      	mov	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4413      	add	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4a15      	ldr	r2, [pc, #84]	@ (8005388 <prvAddNewTaskToReadyList+0xcc>)
 8005334:	441a      	add	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	3304      	adds	r3, #4
 800533a:	4619      	mov	r1, r3
 800533c:	4610      	mov	r0, r2
 800533e:	f7ff fb23 	bl	8004988 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005342:	f000 ff9b 	bl	800627c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005346:	4b0d      	ldr	r3, [pc, #52]	@ (800537c <prvAddNewTaskToReadyList+0xc0>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00e      	beq.n	800536c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800534e:	4b0a      	ldr	r3, [pc, #40]	@ (8005378 <prvAddNewTaskToReadyList+0xbc>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005358:	429a      	cmp	r2, r3
 800535a:	d207      	bcs.n	800536c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800535c:	4b0b      	ldr	r3, [pc, #44]	@ (800538c <prvAddNewTaskToReadyList+0xd0>)
 800535e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800536c:	bf00      	nop
 800536e:	3708      	adds	r7, #8
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	200007d8 	.word	0x200007d8
 8005378:	200006d8 	.word	0x200006d8
 800537c:	200007e4 	.word	0x200007e4
 8005380:	200007f4 	.word	0x200007f4
 8005384:	200007e0 	.word	0x200007e0
 8005388:	200006dc 	.word	0x200006dc
 800538c:	e000ed04 	.word	0xe000ed04

08005390 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005398:	2300      	movs	r3, #0
 800539a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d018      	beq.n	80053d4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80053a2:	4b14      	ldr	r3, [pc, #80]	@ (80053f4 <vTaskDelay+0x64>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00b      	beq.n	80053c2 <vTaskDelay+0x32>
	__asm volatile
 80053aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ae:	f383 8811 	msr	BASEPRI, r3
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	60bb      	str	r3, [r7, #8]
}
 80053bc:	bf00      	nop
 80053be:	bf00      	nop
 80053c0:	e7fd      	b.n	80053be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80053c2:	f000 f87d 	bl	80054c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80053c6:	2100      	movs	r1, #0
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 fd8f 	bl	8005eec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80053ce:	f000 f885 	bl	80054dc <xTaskResumeAll>
 80053d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d107      	bne.n	80053ea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80053da:	4b07      	ldr	r3, [pc, #28]	@ (80053f8 <vTaskDelay+0x68>)
 80053dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053ea:	bf00      	nop
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	20000800 	.word	0x20000800
 80053f8:	e000ed04 	.word	0xe000ed04

080053fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b08a      	sub	sp, #40	@ 0x28
 8005400:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005402:	2300      	movs	r3, #0
 8005404:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005406:	2300      	movs	r3, #0
 8005408:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800540a:	463a      	mov	r2, r7
 800540c:	1d39      	adds	r1, r7, #4
 800540e:	f107 0308 	add.w	r3, r7, #8
 8005412:	4618      	mov	r0, r3
 8005414:	f7fb f8a4 	bl	8000560 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005418:	6839      	ldr	r1, [r7, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	9202      	str	r2, [sp, #8]
 8005420:	9301      	str	r3, [sp, #4]
 8005422:	2300      	movs	r3, #0
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	2300      	movs	r3, #0
 8005428:	460a      	mov	r2, r1
 800542a:	491f      	ldr	r1, [pc, #124]	@ (80054a8 <vTaskStartScheduler+0xac>)
 800542c:	481f      	ldr	r0, [pc, #124]	@ (80054ac <vTaskStartScheduler+0xb0>)
 800542e:	f7ff fe17 	bl	8005060 <xTaskCreateStatic>
 8005432:	4603      	mov	r3, r0
 8005434:	4a1e      	ldr	r2, [pc, #120]	@ (80054b0 <vTaskStartScheduler+0xb4>)
 8005436:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005438:	4b1d      	ldr	r3, [pc, #116]	@ (80054b0 <vTaskStartScheduler+0xb4>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d002      	beq.n	8005446 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005440:	2301      	movs	r3, #1
 8005442:	617b      	str	r3, [r7, #20]
 8005444:	e001      	b.n	800544a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005446:	2300      	movs	r3, #0
 8005448:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d116      	bne.n	800547e <vTaskStartScheduler+0x82>
	__asm volatile
 8005450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	613b      	str	r3, [r7, #16]
}
 8005462:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005464:	4b13      	ldr	r3, [pc, #76]	@ (80054b4 <vTaskStartScheduler+0xb8>)
 8005466:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800546a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800546c:	4b12      	ldr	r3, [pc, #72]	@ (80054b8 <vTaskStartScheduler+0xbc>)
 800546e:	2201      	movs	r2, #1
 8005470:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005472:	4b12      	ldr	r3, [pc, #72]	@ (80054bc <vTaskStartScheduler+0xc0>)
 8005474:	2200      	movs	r2, #0
 8005476:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005478:	f000 fe2a 	bl	80060d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800547c:	e00f      	b.n	800549e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005484:	d10b      	bne.n	800549e <vTaskStartScheduler+0xa2>
	__asm volatile
 8005486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800548a:	f383 8811 	msr	BASEPRI, r3
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	60fb      	str	r3, [r7, #12]
}
 8005498:	bf00      	nop
 800549a:	bf00      	nop
 800549c:	e7fd      	b.n	800549a <vTaskStartScheduler+0x9e>
}
 800549e:	bf00      	nop
 80054a0:	3718      	adds	r7, #24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	08007e64 	.word	0x08007e64
 80054ac:	08005ab1 	.word	0x08005ab1
 80054b0:	200007fc 	.word	0x200007fc
 80054b4:	200007f8 	.word	0x200007f8
 80054b8:	200007e4 	.word	0x200007e4
 80054bc:	200007dc 	.word	0x200007dc

080054c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80054c4:	4b04      	ldr	r3, [pc, #16]	@ (80054d8 <vTaskSuspendAll+0x18>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	3301      	adds	r3, #1
 80054ca:	4a03      	ldr	r2, [pc, #12]	@ (80054d8 <vTaskSuspendAll+0x18>)
 80054cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80054ce:	bf00      	nop
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr
 80054d8:	20000800 	.word	0x20000800

080054dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80054e2:	2300      	movs	r3, #0
 80054e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80054e6:	2300      	movs	r3, #0
 80054e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80054ea:	4b42      	ldr	r3, [pc, #264]	@ (80055f4 <xTaskResumeAll+0x118>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10b      	bne.n	800550a <xTaskResumeAll+0x2e>
	__asm volatile
 80054f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	603b      	str	r3, [r7, #0]
}
 8005504:	bf00      	nop
 8005506:	bf00      	nop
 8005508:	e7fd      	b.n	8005506 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800550a:	f000 fe85 	bl	8006218 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800550e:	4b39      	ldr	r3, [pc, #228]	@ (80055f4 <xTaskResumeAll+0x118>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3b01      	subs	r3, #1
 8005514:	4a37      	ldr	r2, [pc, #220]	@ (80055f4 <xTaskResumeAll+0x118>)
 8005516:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005518:	4b36      	ldr	r3, [pc, #216]	@ (80055f4 <xTaskResumeAll+0x118>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d161      	bne.n	80055e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005520:	4b35      	ldr	r3, [pc, #212]	@ (80055f8 <xTaskResumeAll+0x11c>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d05d      	beq.n	80055e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005528:	e02e      	b.n	8005588 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800552a:	4b34      	ldr	r3, [pc, #208]	@ (80055fc <xTaskResumeAll+0x120>)
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	3318      	adds	r3, #24
 8005536:	4618      	mov	r0, r3
 8005538:	f7ff fa83 	bl	8004a42 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	3304      	adds	r3, #4
 8005540:	4618      	mov	r0, r3
 8005542:	f7ff fa7e 	bl	8004a42 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554a:	2201      	movs	r2, #1
 800554c:	409a      	lsls	r2, r3
 800554e:	4b2c      	ldr	r3, [pc, #176]	@ (8005600 <xTaskResumeAll+0x124>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4313      	orrs	r3, r2
 8005554:	4a2a      	ldr	r2, [pc, #168]	@ (8005600 <xTaskResumeAll+0x124>)
 8005556:	6013      	str	r3, [r2, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800555c:	4613      	mov	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4a27      	ldr	r2, [pc, #156]	@ (8005604 <xTaskResumeAll+0x128>)
 8005566:	441a      	add	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	3304      	adds	r3, #4
 800556c:	4619      	mov	r1, r3
 800556e:	4610      	mov	r0, r2
 8005570:	f7ff fa0a 	bl	8004988 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005578:	4b23      	ldr	r3, [pc, #140]	@ (8005608 <xTaskResumeAll+0x12c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800557e:	429a      	cmp	r2, r3
 8005580:	d302      	bcc.n	8005588 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005582:	4b22      	ldr	r3, [pc, #136]	@ (800560c <xTaskResumeAll+0x130>)
 8005584:	2201      	movs	r2, #1
 8005586:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005588:	4b1c      	ldr	r3, [pc, #112]	@ (80055fc <xTaskResumeAll+0x120>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1cc      	bne.n	800552a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005596:	f000 fb41 	bl	8005c1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800559a:	4b1d      	ldr	r3, [pc, #116]	@ (8005610 <xTaskResumeAll+0x134>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d010      	beq.n	80055c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055a6:	f000 f85d 	bl	8005664 <xTaskIncrementTick>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d002      	beq.n	80055b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80055b0:	4b16      	ldr	r3, [pc, #88]	@ (800560c <xTaskResumeAll+0x130>)
 80055b2:	2201      	movs	r2, #1
 80055b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	3b01      	subs	r3, #1
 80055ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1f1      	bne.n	80055a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80055c2:	4b13      	ldr	r3, [pc, #76]	@ (8005610 <xTaskResumeAll+0x134>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055c8:	4b10      	ldr	r3, [pc, #64]	@ (800560c <xTaskResumeAll+0x130>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d009      	beq.n	80055e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055d0:	2301      	movs	r3, #1
 80055d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005614 <xTaskResumeAll+0x138>)
 80055d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055e4:	f000 fe4a 	bl	800627c <vPortExitCritical>

	return xAlreadyYielded;
 80055e8:	68bb      	ldr	r3, [r7, #8]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	20000800 	.word	0x20000800
 80055f8:	200007d8 	.word	0x200007d8
 80055fc:	20000798 	.word	0x20000798
 8005600:	200007e0 	.word	0x200007e0
 8005604:	200006dc 	.word	0x200006dc
 8005608:	200006d8 	.word	0x200006d8
 800560c:	200007ec 	.word	0x200007ec
 8005610:	200007e8 	.word	0x200007e8
 8005614:	e000ed04 	.word	0xe000ed04

08005618 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d102      	bne.n	800562c <pcTaskGetName+0x14>
 8005626:	4b0e      	ldr	r3, [pc, #56]	@ (8005660 <pcTaskGetName+0x48>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	e000      	b.n	800562e <pcTaskGetName+0x16>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10b      	bne.n	800564e <pcTaskGetName+0x36>
	__asm volatile
 8005636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800563a:	f383 8811 	msr	BASEPRI, r3
 800563e:	f3bf 8f6f 	isb	sy
 8005642:	f3bf 8f4f 	dsb	sy
 8005646:	60bb      	str	r3, [r7, #8]
}
 8005648:	bf00      	nop
 800564a:	bf00      	nop
 800564c:	e7fd      	b.n	800564a <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	3334      	adds	r3, #52	@ 0x34
}
 8005652:	4618      	mov	r0, r3
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	200006d8 	.word	0x200006d8

08005664 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800566a:	2300      	movs	r3, #0
 800566c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800566e:	4b4f      	ldr	r3, [pc, #316]	@ (80057ac <xTaskIncrementTick+0x148>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	f040 808f 	bne.w	8005796 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005678:	4b4d      	ldr	r3, [pc, #308]	@ (80057b0 <xTaskIncrementTick+0x14c>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3301      	adds	r3, #1
 800567e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005680:	4a4b      	ldr	r2, [pc, #300]	@ (80057b0 <xTaskIncrementTick+0x14c>)
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d121      	bne.n	80056d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800568c:	4b49      	ldr	r3, [pc, #292]	@ (80057b4 <xTaskIncrementTick+0x150>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00b      	beq.n	80056ae <xTaskIncrementTick+0x4a>
	__asm volatile
 8005696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800569a:	f383 8811 	msr	BASEPRI, r3
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f3bf 8f4f 	dsb	sy
 80056a6:	603b      	str	r3, [r7, #0]
}
 80056a8:	bf00      	nop
 80056aa:	bf00      	nop
 80056ac:	e7fd      	b.n	80056aa <xTaskIncrementTick+0x46>
 80056ae:	4b41      	ldr	r3, [pc, #260]	@ (80057b4 <xTaskIncrementTick+0x150>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	4b40      	ldr	r3, [pc, #256]	@ (80057b8 <xTaskIncrementTick+0x154>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a3e      	ldr	r2, [pc, #248]	@ (80057b4 <xTaskIncrementTick+0x150>)
 80056ba:	6013      	str	r3, [r2, #0]
 80056bc:	4a3e      	ldr	r2, [pc, #248]	@ (80057b8 <xTaskIncrementTick+0x154>)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6013      	str	r3, [r2, #0]
 80056c2:	4b3e      	ldr	r3, [pc, #248]	@ (80057bc <xTaskIncrementTick+0x158>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	3301      	adds	r3, #1
 80056c8:	4a3c      	ldr	r2, [pc, #240]	@ (80057bc <xTaskIncrementTick+0x158>)
 80056ca:	6013      	str	r3, [r2, #0]
 80056cc:	f000 faa6 	bl	8005c1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056d0:	4b3b      	ldr	r3, [pc, #236]	@ (80057c0 <xTaskIncrementTick+0x15c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d348      	bcc.n	800576c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056da:	4b36      	ldr	r3, [pc, #216]	@ (80057b4 <xTaskIncrementTick+0x150>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d104      	bne.n	80056ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056e4:	4b36      	ldr	r3, [pc, #216]	@ (80057c0 <xTaskIncrementTick+0x15c>)
 80056e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80056ea:	601a      	str	r2, [r3, #0]
					break;
 80056ec:	e03e      	b.n	800576c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056ee:	4b31      	ldr	r3, [pc, #196]	@ (80057b4 <xTaskIncrementTick+0x150>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	429a      	cmp	r2, r3
 8005704:	d203      	bcs.n	800570e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005706:	4a2e      	ldr	r2, [pc, #184]	@ (80057c0 <xTaskIncrementTick+0x15c>)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800570c:	e02e      	b.n	800576c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	3304      	adds	r3, #4
 8005712:	4618      	mov	r0, r3
 8005714:	f7ff f995 	bl	8004a42 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800571c:	2b00      	cmp	r3, #0
 800571e:	d004      	beq.n	800572a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	3318      	adds	r3, #24
 8005724:	4618      	mov	r0, r3
 8005726:	f7ff f98c 	bl	8004a42 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800572e:	2201      	movs	r2, #1
 8005730:	409a      	lsls	r2, r3
 8005732:	4b24      	ldr	r3, [pc, #144]	@ (80057c4 <xTaskIncrementTick+0x160>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4313      	orrs	r3, r2
 8005738:	4a22      	ldr	r2, [pc, #136]	@ (80057c4 <xTaskIncrementTick+0x160>)
 800573a:	6013      	str	r3, [r2, #0]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005740:	4613      	mov	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4a1f      	ldr	r2, [pc, #124]	@ (80057c8 <xTaskIncrementTick+0x164>)
 800574a:	441a      	add	r2, r3
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	3304      	adds	r3, #4
 8005750:	4619      	mov	r1, r3
 8005752:	4610      	mov	r0, r2
 8005754:	f7ff f918 	bl	8004988 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800575c:	4b1b      	ldr	r3, [pc, #108]	@ (80057cc <xTaskIncrementTick+0x168>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005762:	429a      	cmp	r2, r3
 8005764:	d3b9      	bcc.n	80056da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005766:	2301      	movs	r3, #1
 8005768:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800576a:	e7b6      	b.n	80056da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800576c:	4b17      	ldr	r3, [pc, #92]	@ (80057cc <xTaskIncrementTick+0x168>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005772:	4915      	ldr	r1, [pc, #84]	@ (80057c8 <xTaskIncrementTick+0x164>)
 8005774:	4613      	mov	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	440b      	add	r3, r1
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d901      	bls.n	8005788 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005784:	2301      	movs	r3, #1
 8005786:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005788:	4b11      	ldr	r3, [pc, #68]	@ (80057d0 <xTaskIncrementTick+0x16c>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d007      	beq.n	80057a0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005790:	2301      	movs	r3, #1
 8005792:	617b      	str	r3, [r7, #20]
 8005794:	e004      	b.n	80057a0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005796:	4b0f      	ldr	r3, [pc, #60]	@ (80057d4 <xTaskIncrementTick+0x170>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3301      	adds	r3, #1
 800579c:	4a0d      	ldr	r2, [pc, #52]	@ (80057d4 <xTaskIncrementTick+0x170>)
 800579e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80057a0:	697b      	ldr	r3, [r7, #20]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3718      	adds	r7, #24
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	20000800 	.word	0x20000800
 80057b0:	200007dc 	.word	0x200007dc
 80057b4:	20000790 	.word	0x20000790
 80057b8:	20000794 	.word	0x20000794
 80057bc:	200007f0 	.word	0x200007f0
 80057c0:	200007f8 	.word	0x200007f8
 80057c4:	200007e0 	.word	0x200007e0
 80057c8:	200006dc 	.word	0x200006dc
 80057cc:	200006d8 	.word	0x200006d8
 80057d0:	200007ec 	.word	0x200007ec
 80057d4:	200007e8 	.word	0x200007e8

080057d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057d8:	b480      	push	{r7}
 80057da:	b087      	sub	sp, #28
 80057dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057de:	4b27      	ldr	r3, [pc, #156]	@ (800587c <vTaskSwitchContext+0xa4>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057e6:	4b26      	ldr	r3, [pc, #152]	@ (8005880 <vTaskSwitchContext+0xa8>)
 80057e8:	2201      	movs	r2, #1
 80057ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057ec:	e040      	b.n	8005870 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80057ee:	4b24      	ldr	r3, [pc, #144]	@ (8005880 <vTaskSwitchContext+0xa8>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057f4:	4b23      	ldr	r3, [pc, #140]	@ (8005884 <vTaskSwitchContext+0xac>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	fab3 f383 	clz	r3, r3
 8005800:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005802:	7afb      	ldrb	r3, [r7, #11]
 8005804:	f1c3 031f 	rsb	r3, r3, #31
 8005808:	617b      	str	r3, [r7, #20]
 800580a:	491f      	ldr	r1, [pc, #124]	@ (8005888 <vTaskSwitchContext+0xb0>)
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	4613      	mov	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	440b      	add	r3, r1
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10b      	bne.n	8005836 <vTaskSwitchContext+0x5e>
	__asm volatile
 800581e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005822:	f383 8811 	msr	BASEPRI, r3
 8005826:	f3bf 8f6f 	isb	sy
 800582a:	f3bf 8f4f 	dsb	sy
 800582e:	607b      	str	r3, [r7, #4]
}
 8005830:	bf00      	nop
 8005832:	bf00      	nop
 8005834:	e7fd      	b.n	8005832 <vTaskSwitchContext+0x5a>
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	4613      	mov	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4a11      	ldr	r2, [pc, #68]	@ (8005888 <vTaskSwitchContext+0xb0>)
 8005842:	4413      	add	r3, r2
 8005844:	613b      	str	r3, [r7, #16]
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	605a      	str	r2, [r3, #4]
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	3308      	adds	r3, #8
 8005858:	429a      	cmp	r2, r3
 800585a:	d104      	bne.n	8005866 <vTaskSwitchContext+0x8e>
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	605a      	str	r2, [r3, #4]
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	4a07      	ldr	r2, [pc, #28]	@ (800588c <vTaskSwitchContext+0xb4>)
 800586e:	6013      	str	r3, [r2, #0]
}
 8005870:	bf00      	nop
 8005872:	371c      	adds	r7, #28
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	20000800 	.word	0x20000800
 8005880:	200007ec 	.word	0x200007ec
 8005884:	200007e0 	.word	0x200007e0
 8005888:	200006dc 	.word	0x200006dc
 800588c:	200006d8 	.word	0x200006d8

08005890 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10b      	bne.n	80058b8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80058a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	60fb      	str	r3, [r7, #12]
}
 80058b2:	bf00      	nop
 80058b4:	bf00      	nop
 80058b6:	e7fd      	b.n	80058b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058b8:	4b07      	ldr	r3, [pc, #28]	@ (80058d8 <vTaskPlaceOnEventList+0x48>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3318      	adds	r3, #24
 80058be:	4619      	mov	r1, r3
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7ff f885 	bl	80049d0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058c6:	2101      	movs	r1, #1
 80058c8:	6838      	ldr	r0, [r7, #0]
 80058ca:	f000 fb0f 	bl	8005eec <prvAddCurrentTaskToDelayedList>
}
 80058ce:	bf00      	nop
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	200006d8 	.word	0x200006d8

080058dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10b      	bne.n	800590a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80058f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f6:	f383 8811 	msr	BASEPRI, r3
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	60fb      	str	r3, [r7, #12]
}
 8005904:	bf00      	nop
 8005906:	bf00      	nop
 8005908:	e7fd      	b.n	8005906 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	3318      	adds	r3, #24
 800590e:	4618      	mov	r0, r3
 8005910:	f7ff f897 	bl	8004a42 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005914:	4b1d      	ldr	r3, [pc, #116]	@ (800598c <xTaskRemoveFromEventList+0xb0>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d11c      	bne.n	8005956 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	3304      	adds	r3, #4
 8005920:	4618      	mov	r0, r3
 8005922:	f7ff f88e 	bl	8004a42 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592a:	2201      	movs	r2, #1
 800592c:	409a      	lsls	r2, r3
 800592e:	4b18      	ldr	r3, [pc, #96]	@ (8005990 <xTaskRemoveFromEventList+0xb4>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4313      	orrs	r3, r2
 8005934:	4a16      	ldr	r2, [pc, #88]	@ (8005990 <xTaskRemoveFromEventList+0xb4>)
 8005936:	6013      	str	r3, [r2, #0]
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800593c:	4613      	mov	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4a13      	ldr	r2, [pc, #76]	@ (8005994 <xTaskRemoveFromEventList+0xb8>)
 8005946:	441a      	add	r2, r3
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	3304      	adds	r3, #4
 800594c:	4619      	mov	r1, r3
 800594e:	4610      	mov	r0, r2
 8005950:	f7ff f81a 	bl	8004988 <vListInsertEnd>
 8005954:	e005      	b.n	8005962 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	3318      	adds	r3, #24
 800595a:	4619      	mov	r1, r3
 800595c:	480e      	ldr	r0, [pc, #56]	@ (8005998 <xTaskRemoveFromEventList+0xbc>)
 800595e:	f7ff f813 	bl	8004988 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005966:	4b0d      	ldr	r3, [pc, #52]	@ (800599c <xTaskRemoveFromEventList+0xc0>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596c:	429a      	cmp	r2, r3
 800596e:	d905      	bls.n	800597c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005970:	2301      	movs	r3, #1
 8005972:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005974:	4b0a      	ldr	r3, [pc, #40]	@ (80059a0 <xTaskRemoveFromEventList+0xc4>)
 8005976:	2201      	movs	r2, #1
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	e001      	b.n	8005980 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800597c:	2300      	movs	r3, #0
 800597e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005980:	697b      	ldr	r3, [r7, #20]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	20000800 	.word	0x20000800
 8005990:	200007e0 	.word	0x200007e0
 8005994:	200006dc 	.word	0x200006dc
 8005998:	20000798 	.word	0x20000798
 800599c:	200006d8 	.word	0x200006d8
 80059a0:	200007ec 	.word	0x200007ec

080059a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059ac:	4b06      	ldr	r3, [pc, #24]	@ (80059c8 <vTaskInternalSetTimeOutState+0x24>)
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80059b4:	4b05      	ldr	r3, [pc, #20]	@ (80059cc <vTaskInternalSetTimeOutState+0x28>)
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	605a      	str	r2, [r3, #4]
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr
 80059c8:	200007f0 	.word	0x200007f0
 80059cc:	200007dc 	.word	0x200007dc

080059d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b088      	sub	sp, #32
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10b      	bne.n	80059f8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80059e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	613b      	str	r3, [r7, #16]
}
 80059f2:	bf00      	nop
 80059f4:	bf00      	nop
 80059f6:	e7fd      	b.n	80059f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10b      	bne.n	8005a16 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	60fb      	str	r3, [r7, #12]
}
 8005a10:	bf00      	nop
 8005a12:	bf00      	nop
 8005a14:	e7fd      	b.n	8005a12 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005a16:	f000 fbff 	bl	8006218 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8005a90 <xTaskCheckForTimeOut+0xc0>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a32:	d102      	bne.n	8005a3a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a34:	2300      	movs	r3, #0
 8005a36:	61fb      	str	r3, [r7, #28]
 8005a38:	e023      	b.n	8005a82 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	4b15      	ldr	r3, [pc, #84]	@ (8005a94 <xTaskCheckForTimeOut+0xc4>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d007      	beq.n	8005a56 <xTaskCheckForTimeOut+0x86>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d302      	bcc.n	8005a56 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a50:	2301      	movs	r3, #1
 8005a52:	61fb      	str	r3, [r7, #28]
 8005a54:	e015      	b.n	8005a82 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d20b      	bcs.n	8005a78 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	1ad2      	subs	r2, r2, r3
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7ff ff99 	bl	80059a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a72:	2300      	movs	r3, #0
 8005a74:	61fb      	str	r3, [r7, #28]
 8005a76:	e004      	b.n	8005a82 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a82:	f000 fbfb 	bl	800627c <vPortExitCritical>

	return xReturn;
 8005a86:	69fb      	ldr	r3, [r7, #28]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3720      	adds	r7, #32
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	200007dc 	.word	0x200007dc
 8005a94:	200007f0 	.word	0x200007f0

08005a98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a98:	b480      	push	{r7}
 8005a9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a9c:	4b03      	ldr	r3, [pc, #12]	@ (8005aac <vTaskMissedYield+0x14>)
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]
}
 8005aa2:	bf00      	nop
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	200007ec 	.word	0x200007ec

08005ab0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ab8:	f000 f852 	bl	8005b60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005abc:	4b06      	ldr	r3, [pc, #24]	@ (8005ad8 <prvIdleTask+0x28>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d9f9      	bls.n	8005ab8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ac4:	4b05      	ldr	r3, [pc, #20]	@ (8005adc <prvIdleTask+0x2c>)
 8005ac6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ad4:	e7f0      	b.n	8005ab8 <prvIdleTask+0x8>
 8005ad6:	bf00      	nop
 8005ad8:	200006dc 	.word	0x200006dc
 8005adc:	e000ed04 	.word	0xe000ed04

08005ae0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	607b      	str	r3, [r7, #4]
 8005aea:	e00c      	b.n	8005b06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	4613      	mov	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4a12      	ldr	r2, [pc, #72]	@ (8005b40 <prvInitialiseTaskLists+0x60>)
 8005af8:	4413      	add	r3, r2
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7fe ff17 	bl	800492e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3301      	adds	r3, #1
 8005b04:	607b      	str	r3, [r7, #4]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b06      	cmp	r3, #6
 8005b0a:	d9ef      	bls.n	8005aec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b0c:	480d      	ldr	r0, [pc, #52]	@ (8005b44 <prvInitialiseTaskLists+0x64>)
 8005b0e:	f7fe ff0e 	bl	800492e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b12:	480d      	ldr	r0, [pc, #52]	@ (8005b48 <prvInitialiseTaskLists+0x68>)
 8005b14:	f7fe ff0b 	bl	800492e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b18:	480c      	ldr	r0, [pc, #48]	@ (8005b4c <prvInitialiseTaskLists+0x6c>)
 8005b1a:	f7fe ff08 	bl	800492e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b1e:	480c      	ldr	r0, [pc, #48]	@ (8005b50 <prvInitialiseTaskLists+0x70>)
 8005b20:	f7fe ff05 	bl	800492e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b24:	480b      	ldr	r0, [pc, #44]	@ (8005b54 <prvInitialiseTaskLists+0x74>)
 8005b26:	f7fe ff02 	bl	800492e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b58 <prvInitialiseTaskLists+0x78>)
 8005b2c:	4a05      	ldr	r2, [pc, #20]	@ (8005b44 <prvInitialiseTaskLists+0x64>)
 8005b2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b30:	4b0a      	ldr	r3, [pc, #40]	@ (8005b5c <prvInitialiseTaskLists+0x7c>)
 8005b32:	4a05      	ldr	r2, [pc, #20]	@ (8005b48 <prvInitialiseTaskLists+0x68>)
 8005b34:	601a      	str	r2, [r3, #0]
}
 8005b36:	bf00      	nop
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	200006dc 	.word	0x200006dc
 8005b44:	20000768 	.word	0x20000768
 8005b48:	2000077c 	.word	0x2000077c
 8005b4c:	20000798 	.word	0x20000798
 8005b50:	200007ac 	.word	0x200007ac
 8005b54:	200007c4 	.word	0x200007c4
 8005b58:	20000790 	.word	0x20000790
 8005b5c:	20000794 	.word	0x20000794

08005b60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b66:	e019      	b.n	8005b9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b68:	f000 fb56 	bl	8006218 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b6c:	4b10      	ldr	r3, [pc, #64]	@ (8005bb0 <prvCheckTasksWaitingTermination+0x50>)
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	3304      	adds	r3, #4
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7fe ff62 	bl	8004a42 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005bb4 <prvCheckTasksWaitingTermination+0x54>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	3b01      	subs	r3, #1
 8005b84:	4a0b      	ldr	r2, [pc, #44]	@ (8005bb4 <prvCheckTasksWaitingTermination+0x54>)
 8005b86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b88:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb8 <prvCheckTasksWaitingTermination+0x58>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8005bb8 <prvCheckTasksWaitingTermination+0x58>)
 8005b90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b92:	f000 fb73 	bl	800627c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f810 	bl	8005bbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b9c:	4b06      	ldr	r3, [pc, #24]	@ (8005bb8 <prvCheckTasksWaitingTermination+0x58>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1e1      	bne.n	8005b68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ba4:	bf00      	nop
 8005ba6:	bf00      	nop
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	200007ac 	.word	0x200007ac
 8005bb4:	200007d8 	.word	0x200007d8
 8005bb8:	200007c0 	.word	0x200007c0

08005bbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d108      	bne.n	8005be0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fd10 	bl	80065f8 <vPortFree>
				vPortFree( pxTCB );
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 fd0d 	bl	80065f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005bde:	e019      	b.n	8005c14 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d103      	bne.n	8005bf2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fd04 	bl	80065f8 <vPortFree>
	}
 8005bf0:	e010      	b.n	8005c14 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d00b      	beq.n	8005c14 <prvDeleteTCB+0x58>
	__asm volatile
 8005bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c00:	f383 8811 	msr	BASEPRI, r3
 8005c04:	f3bf 8f6f 	isb	sy
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	60fb      	str	r3, [r7, #12]
}
 8005c0e:	bf00      	nop
 8005c10:	bf00      	nop
 8005c12:	e7fd      	b.n	8005c10 <prvDeleteTCB+0x54>
	}
 8005c14:	bf00      	nop
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c22:	4b0c      	ldr	r3, [pc, #48]	@ (8005c54 <prvResetNextTaskUnblockTime+0x38>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d104      	bne.n	8005c36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c58 <prvResetNextTaskUnblockTime+0x3c>)
 8005c2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005c32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c34:	e008      	b.n	8005c48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c36:	4b07      	ldr	r3, [pc, #28]	@ (8005c54 <prvResetNextTaskUnblockTime+0x38>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	4a04      	ldr	r2, [pc, #16]	@ (8005c58 <prvResetNextTaskUnblockTime+0x3c>)
 8005c46:	6013      	str	r3, [r2, #0]
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr
 8005c54:	20000790 	.word	0x20000790
 8005c58:	200007f8 	.word	0x200007f8

08005c5c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005c62:	4b05      	ldr	r3, [pc, #20]	@ (8005c78 <xTaskGetCurrentTaskHandle+0x1c>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005c68:	687b      	ldr	r3, [r7, #4]
	}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	200006d8 	.word	0x200006d8

08005c7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c82:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb0 <xTaskGetSchedulerState+0x34>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d102      	bne.n	8005c90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	607b      	str	r3, [r7, #4]
 8005c8e:	e008      	b.n	8005ca2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c90:	4b08      	ldr	r3, [pc, #32]	@ (8005cb4 <xTaskGetSchedulerState+0x38>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d102      	bne.n	8005c9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c98:	2302      	movs	r3, #2
 8005c9a:	607b      	str	r3, [r7, #4]
 8005c9c:	e001      	b.n	8005ca2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ca2:	687b      	ldr	r3, [r7, #4]
	}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	200007e4 	.word	0x200007e4
 8005cb4:	20000800 	.word	0x20000800

08005cb8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d05e      	beq.n	8005d8c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cd2:	4b31      	ldr	r3, [pc, #196]	@ (8005d98 <xTaskPriorityInherit+0xe0>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d24e      	bcs.n	8005d7a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	db06      	blt.n	8005cf2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ce4:	4b2c      	ldr	r3, [pc, #176]	@ (8005d98 <xTaskPriorityInherit+0xe0>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cea:	f1c3 0207 	rsb	r2, r3, #7
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	6959      	ldr	r1, [r3, #20]
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4413      	add	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4a26      	ldr	r2, [pc, #152]	@ (8005d9c <xTaskPriorityInherit+0xe4>)
 8005d04:	4413      	add	r3, r2
 8005d06:	4299      	cmp	r1, r3
 8005d08:	d12f      	bne.n	8005d6a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	3304      	adds	r3, #4
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fe fe97 	bl	8004a42 <uxListRemove>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10a      	bne.n	8005d30 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d1e:	2201      	movs	r2, #1
 8005d20:	fa02 f303 	lsl.w	r3, r2, r3
 8005d24:	43da      	mvns	r2, r3
 8005d26:	4b1e      	ldr	r3, [pc, #120]	@ (8005da0 <xTaskPriorityInherit+0xe8>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	4a1c      	ldr	r2, [pc, #112]	@ (8005da0 <xTaskPriorityInherit+0xe8>)
 8005d2e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d30:	4b19      	ldr	r3, [pc, #100]	@ (8005d98 <xTaskPriorityInherit+0xe0>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d3e:	2201      	movs	r2, #1
 8005d40:	409a      	lsls	r2, r3
 8005d42:	4b17      	ldr	r3, [pc, #92]	@ (8005da0 <xTaskPriorityInherit+0xe8>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	4a15      	ldr	r2, [pc, #84]	@ (8005da0 <xTaskPriorityInherit+0xe8>)
 8005d4a:	6013      	str	r3, [r2, #0]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d50:	4613      	mov	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4a10      	ldr	r2, [pc, #64]	@ (8005d9c <xTaskPriorityInherit+0xe4>)
 8005d5a:	441a      	add	r2, r3
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	3304      	adds	r3, #4
 8005d60:	4619      	mov	r1, r3
 8005d62:	4610      	mov	r0, r2
 8005d64:	f7fe fe10 	bl	8004988 <vListInsertEnd>
 8005d68:	e004      	b.n	8005d74 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8005d98 <xTaskPriorityInherit+0xe0>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005d74:	2301      	movs	r3, #1
 8005d76:	60fb      	str	r3, [r7, #12]
 8005d78:	e008      	b.n	8005d8c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d7e:	4b06      	ldr	r3, [pc, #24]	@ (8005d98 <xTaskPriorityInherit+0xe0>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d201      	bcs.n	8005d8c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
	}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	200006d8 	.word	0x200006d8
 8005d9c:	200006dc 	.word	0x200006dc
 8005da0:	200007e0 	.word	0x200007e0

08005da4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005db2:	2301      	movs	r3, #1
 8005db4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d079      	beq.n	8005eb0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10b      	bne.n	8005ddc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	60fb      	str	r3, [r7, #12]
}
 8005dd6:	bf00      	nop
 8005dd8:	bf00      	nop
 8005dda:	e7fd      	b.n	8005dd8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005de0:	683a      	ldr	r2, [r7, #0]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d902      	bls.n	8005dec <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	61fb      	str	r3, [r7, #28]
 8005dea:	e002      	b.n	8005df2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005df0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df6:	69fa      	ldr	r2, [r7, #28]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d059      	beq.n	8005eb0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d154      	bne.n	8005eb0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005e06:	4b2c      	ldr	r3, [pc, #176]	@ (8005eb8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d10b      	bne.n	8005e28 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	60bb      	str	r3, [r7, #8]
}
 8005e22:	bf00      	nop
 8005e24:	bf00      	nop
 8005e26:	e7fd      	b.n	8005e24 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e2c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	69fa      	ldr	r2, [r7, #28]
 8005e32:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	db04      	blt.n	8005e46 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	f1c3 0207 	rsb	r2, r3, #7
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	6959      	ldr	r1, [r3, #20]
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4413      	add	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4a19      	ldr	r2, [pc, #100]	@ (8005ebc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005e56:	4413      	add	r3, r2
 8005e58:	4299      	cmp	r1, r3
 8005e5a:	d129      	bne.n	8005eb0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	3304      	adds	r3, #4
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7fe fdee 	bl	8004a42 <uxListRemove>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10a      	bne.n	8005e82 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e70:	2201      	movs	r2, #1
 8005e72:	fa02 f303 	lsl.w	r3, r2, r3
 8005e76:	43da      	mvns	r2, r3
 8005e78:	4b11      	ldr	r3, [pc, #68]	@ (8005ec0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	4a10      	ldr	r2, [pc, #64]	@ (8005ec0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005e80:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e86:	2201      	movs	r2, #1
 8005e88:	409a      	lsls	r2, r3
 8005e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ec0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	4a0b      	ldr	r2, [pc, #44]	@ (8005ec0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e98:	4613      	mov	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4a06      	ldr	r2, [pc, #24]	@ (8005ebc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005ea2:	441a      	add	r2, r3
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	3304      	adds	r3, #4
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4610      	mov	r0, r2
 8005eac:	f7fe fd6c 	bl	8004988 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005eb0:	bf00      	nop
 8005eb2:	3720      	adds	r7, #32
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	200006d8 	.word	0x200006d8
 8005ebc:	200006dc 	.word	0x200006dc
 8005ec0:	200007e0 	.word	0x200007e0

08005ec4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005ec4:	b480      	push	{r7}
 8005ec6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005ec8:	4b07      	ldr	r3, [pc, #28]	@ (8005ee8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d004      	beq.n	8005eda <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005ed0:	4b05      	ldr	r3, [pc, #20]	@ (8005ee8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ed6:	3201      	adds	r2, #1
 8005ed8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8005eda:	4b03      	ldr	r3, [pc, #12]	@ (8005ee8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005edc:	681b      	ldr	r3, [r3, #0]
	}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	200006d8 	.word	0x200006d8

08005eec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ef6:	4b29      	ldr	r3, [pc, #164]	@ (8005f9c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005efc:	4b28      	ldr	r3, [pc, #160]	@ (8005fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3304      	adds	r3, #4
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fe fd9d 	bl	8004a42 <uxListRemove>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10b      	bne.n	8005f26 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005f0e:	4b24      	ldr	r3, [pc, #144]	@ (8005fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f14:	2201      	movs	r2, #1
 8005f16:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1a:	43da      	mvns	r2, r3
 8005f1c:	4b21      	ldr	r3, [pc, #132]	@ (8005fa4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4013      	ands	r3, r2
 8005f22:	4a20      	ldr	r2, [pc, #128]	@ (8005fa4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f24:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f2c:	d10a      	bne.n	8005f44 <prvAddCurrentTaskToDelayedList+0x58>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d007      	beq.n	8005f44 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f34:	4b1a      	ldr	r3, [pc, #104]	@ (8005fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	481a      	ldr	r0, [pc, #104]	@ (8005fa8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005f3e:	f7fe fd23 	bl	8004988 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f42:	e026      	b.n	8005f92 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4413      	add	r3, r2
 8005f4a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f4c:	4b14      	ldr	r3, [pc, #80]	@ (8005fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d209      	bcs.n	8005f70 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f5c:	4b13      	ldr	r3, [pc, #76]	@ (8005fac <prvAddCurrentTaskToDelayedList+0xc0>)
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	4b0f      	ldr	r3, [pc, #60]	@ (8005fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	3304      	adds	r3, #4
 8005f66:	4619      	mov	r1, r3
 8005f68:	4610      	mov	r0, r2
 8005f6a:	f7fe fd31 	bl	80049d0 <vListInsert>
}
 8005f6e:	e010      	b.n	8005f92 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f70:	4b0f      	ldr	r3, [pc, #60]	@ (8005fb0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	4b0a      	ldr	r3, [pc, #40]	@ (8005fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	3304      	adds	r3, #4
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	4610      	mov	r0, r2
 8005f7e:	f7fe fd27 	bl	80049d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f82:	4b0c      	ldr	r3, [pc, #48]	@ (8005fb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d202      	bcs.n	8005f92 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005f8c:	4a09      	ldr	r2, [pc, #36]	@ (8005fb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	6013      	str	r3, [r2, #0]
}
 8005f92:	bf00      	nop
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	200007dc 	.word	0x200007dc
 8005fa0:	200006d8 	.word	0x200006d8
 8005fa4:	200007e0 	.word	0x200007e0
 8005fa8:	200007c4 	.word	0x200007c4
 8005fac:	20000794 	.word	0x20000794
 8005fb0:	20000790 	.word	0x20000790
 8005fb4:	200007f8 	.word	0x200007f8

08005fb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	3b04      	subs	r3, #4
 8005fc8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005fd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	3b04      	subs	r3, #4
 8005fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f023 0201 	bic.w	r2, r3, #1
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	3b04      	subs	r3, #4
 8005fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005fe8:	4a0c      	ldr	r2, [pc, #48]	@ (800601c <pxPortInitialiseStack+0x64>)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	3b14      	subs	r3, #20
 8005ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	3b04      	subs	r3, #4
 8005ffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f06f 0202 	mvn.w	r2, #2
 8006006:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	3b20      	subs	r3, #32
 800600c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800600e:	68fb      	ldr	r3, [r7, #12]
}
 8006010:	4618      	mov	r0, r3
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	08006021 	.word	0x08006021

08006020 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006026:	2300      	movs	r3, #0
 8006028:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800602a:	4b13      	ldr	r3, [pc, #76]	@ (8006078 <prvTaskExitError+0x58>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006032:	d00b      	beq.n	800604c <prvTaskExitError+0x2c>
	__asm volatile
 8006034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	60fb      	str	r3, [r7, #12]
}
 8006046:	bf00      	nop
 8006048:	bf00      	nop
 800604a:	e7fd      	b.n	8006048 <prvTaskExitError+0x28>
	__asm volatile
 800604c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	60bb      	str	r3, [r7, #8]
}
 800605e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006060:	bf00      	nop
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d0fc      	beq.n	8006062 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006068:	bf00      	nop
 800606a:	bf00      	nop
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	20000014 	.word	0x20000014
 800607c:	00000000 	.word	0x00000000

08006080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006080:	4b07      	ldr	r3, [pc, #28]	@ (80060a0 <pxCurrentTCBConst2>)
 8006082:	6819      	ldr	r1, [r3, #0]
 8006084:	6808      	ldr	r0, [r1, #0]
 8006086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800608a:	f380 8809 	msr	PSP, r0
 800608e:	f3bf 8f6f 	isb	sy
 8006092:	f04f 0000 	mov.w	r0, #0
 8006096:	f380 8811 	msr	BASEPRI, r0
 800609a:	4770      	bx	lr
 800609c:	f3af 8000 	nop.w

080060a0 <pxCurrentTCBConst2>:
 80060a0:	200006d8 	.word	0x200006d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80060a4:	bf00      	nop
 80060a6:	bf00      	nop

080060a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80060a8:	4808      	ldr	r0, [pc, #32]	@ (80060cc <prvPortStartFirstTask+0x24>)
 80060aa:	6800      	ldr	r0, [r0, #0]
 80060ac:	6800      	ldr	r0, [r0, #0]
 80060ae:	f380 8808 	msr	MSP, r0
 80060b2:	f04f 0000 	mov.w	r0, #0
 80060b6:	f380 8814 	msr	CONTROL, r0
 80060ba:	b662      	cpsie	i
 80060bc:	b661      	cpsie	f
 80060be:	f3bf 8f4f 	dsb	sy
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	df00      	svc	0
 80060c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80060ca:	bf00      	nop
 80060cc:	e000ed08 	.word	0xe000ed08

080060d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060d6:	4b47      	ldr	r3, [pc, #284]	@ (80061f4 <xPortStartScheduler+0x124>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a47      	ldr	r2, [pc, #284]	@ (80061f8 <xPortStartScheduler+0x128>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d10b      	bne.n	80060f8 <xPortStartScheduler+0x28>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	613b      	str	r3, [r7, #16]
}
 80060f2:	bf00      	nop
 80060f4:	bf00      	nop
 80060f6:	e7fd      	b.n	80060f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060f8:	4b3e      	ldr	r3, [pc, #248]	@ (80061f4 <xPortStartScheduler+0x124>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a3f      	ldr	r2, [pc, #252]	@ (80061fc <xPortStartScheduler+0x12c>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d10b      	bne.n	800611a <xPortStartScheduler+0x4a>
	__asm volatile
 8006102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006106:	f383 8811 	msr	BASEPRI, r3
 800610a:	f3bf 8f6f 	isb	sy
 800610e:	f3bf 8f4f 	dsb	sy
 8006112:	60fb      	str	r3, [r7, #12]
}
 8006114:	bf00      	nop
 8006116:	bf00      	nop
 8006118:	e7fd      	b.n	8006116 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800611a:	4b39      	ldr	r3, [pc, #228]	@ (8006200 <xPortStartScheduler+0x130>)
 800611c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	b2db      	uxtb	r3, r3
 8006124:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	22ff      	movs	r2, #255	@ 0xff
 800612a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	b2db      	uxtb	r3, r3
 8006132:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006134:	78fb      	ldrb	r3, [r7, #3]
 8006136:	b2db      	uxtb	r3, r3
 8006138:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800613c:	b2da      	uxtb	r2, r3
 800613e:	4b31      	ldr	r3, [pc, #196]	@ (8006204 <xPortStartScheduler+0x134>)
 8006140:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006142:	4b31      	ldr	r3, [pc, #196]	@ (8006208 <xPortStartScheduler+0x138>)
 8006144:	2207      	movs	r2, #7
 8006146:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006148:	e009      	b.n	800615e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800614a:	4b2f      	ldr	r3, [pc, #188]	@ (8006208 <xPortStartScheduler+0x138>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	3b01      	subs	r3, #1
 8006150:	4a2d      	ldr	r2, [pc, #180]	@ (8006208 <xPortStartScheduler+0x138>)
 8006152:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006154:	78fb      	ldrb	r3, [r7, #3]
 8006156:	b2db      	uxtb	r3, r3
 8006158:	005b      	lsls	r3, r3, #1
 800615a:	b2db      	uxtb	r3, r3
 800615c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800615e:	78fb      	ldrb	r3, [r7, #3]
 8006160:	b2db      	uxtb	r3, r3
 8006162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006166:	2b80      	cmp	r3, #128	@ 0x80
 8006168:	d0ef      	beq.n	800614a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800616a:	4b27      	ldr	r3, [pc, #156]	@ (8006208 <xPortStartScheduler+0x138>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f1c3 0307 	rsb	r3, r3, #7
 8006172:	2b04      	cmp	r3, #4
 8006174:	d00b      	beq.n	800618e <xPortStartScheduler+0xbe>
	__asm volatile
 8006176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800617a:	f383 8811 	msr	BASEPRI, r3
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	60bb      	str	r3, [r7, #8]
}
 8006188:	bf00      	nop
 800618a:	bf00      	nop
 800618c:	e7fd      	b.n	800618a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800618e:	4b1e      	ldr	r3, [pc, #120]	@ (8006208 <xPortStartScheduler+0x138>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	021b      	lsls	r3, r3, #8
 8006194:	4a1c      	ldr	r2, [pc, #112]	@ (8006208 <xPortStartScheduler+0x138>)
 8006196:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006198:	4b1b      	ldr	r3, [pc, #108]	@ (8006208 <xPortStartScheduler+0x138>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80061a0:	4a19      	ldr	r2, [pc, #100]	@ (8006208 <xPortStartScheduler+0x138>)
 80061a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	b2da      	uxtb	r2, r3
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80061ac:	4b17      	ldr	r3, [pc, #92]	@ (800620c <xPortStartScheduler+0x13c>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a16      	ldr	r2, [pc, #88]	@ (800620c <xPortStartScheduler+0x13c>)
 80061b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80061b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80061b8:	4b14      	ldr	r3, [pc, #80]	@ (800620c <xPortStartScheduler+0x13c>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a13      	ldr	r2, [pc, #76]	@ (800620c <xPortStartScheduler+0x13c>)
 80061be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80061c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80061c4:	f000 f8da 	bl	800637c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80061c8:	4b11      	ldr	r3, [pc, #68]	@ (8006210 <xPortStartScheduler+0x140>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80061ce:	f000 f8f9 	bl	80063c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80061d2:	4b10      	ldr	r3, [pc, #64]	@ (8006214 <xPortStartScheduler+0x144>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a0f      	ldr	r2, [pc, #60]	@ (8006214 <xPortStartScheduler+0x144>)
 80061d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80061dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80061de:	f7ff ff63 	bl	80060a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80061e2:	f7ff faf9 	bl	80057d8 <vTaskSwitchContext>
	prvTaskExitError();
 80061e6:	f7ff ff1b 	bl	8006020 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3718      	adds	r7, #24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	e000ed00 	.word	0xe000ed00
 80061f8:	410fc271 	.word	0x410fc271
 80061fc:	410fc270 	.word	0x410fc270
 8006200:	e000e400 	.word	0xe000e400
 8006204:	20000804 	.word	0x20000804
 8006208:	20000808 	.word	0x20000808
 800620c:	e000ed20 	.word	0xe000ed20
 8006210:	20000014 	.word	0x20000014
 8006214:	e000ef34 	.word	0xe000ef34

08006218 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
	__asm volatile
 800621e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	607b      	str	r3, [r7, #4]
}
 8006230:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006232:	4b10      	ldr	r3, [pc, #64]	@ (8006274 <vPortEnterCritical+0x5c>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3301      	adds	r3, #1
 8006238:	4a0e      	ldr	r2, [pc, #56]	@ (8006274 <vPortEnterCritical+0x5c>)
 800623a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800623c:	4b0d      	ldr	r3, [pc, #52]	@ (8006274 <vPortEnterCritical+0x5c>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d110      	bne.n	8006266 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006244:	4b0c      	ldr	r3, [pc, #48]	@ (8006278 <vPortEnterCritical+0x60>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00b      	beq.n	8006266 <vPortEnterCritical+0x4e>
	__asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	603b      	str	r3, [r7, #0]
}
 8006260:	bf00      	nop
 8006262:	bf00      	nop
 8006264:	e7fd      	b.n	8006262 <vPortEnterCritical+0x4a>
	}
}
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	20000014 	.word	0x20000014
 8006278:	e000ed04 	.word	0xe000ed04

0800627c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006282:	4b12      	ldr	r3, [pc, #72]	@ (80062cc <vPortExitCritical+0x50>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10b      	bne.n	80062a2 <vPortExitCritical+0x26>
	__asm volatile
 800628a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800628e:	f383 8811 	msr	BASEPRI, r3
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	f3bf 8f4f 	dsb	sy
 800629a:	607b      	str	r3, [r7, #4]
}
 800629c:	bf00      	nop
 800629e:	bf00      	nop
 80062a0:	e7fd      	b.n	800629e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80062a2:	4b0a      	ldr	r3, [pc, #40]	@ (80062cc <vPortExitCritical+0x50>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3b01      	subs	r3, #1
 80062a8:	4a08      	ldr	r2, [pc, #32]	@ (80062cc <vPortExitCritical+0x50>)
 80062aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80062ac:	4b07      	ldr	r3, [pc, #28]	@ (80062cc <vPortExitCritical+0x50>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d105      	bne.n	80062c0 <vPortExitCritical+0x44>
 80062b4:	2300      	movs	r3, #0
 80062b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	f383 8811 	msr	BASEPRI, r3
}
 80062be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	20000014 	.word	0x20000014

080062d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062d0:	f3ef 8009 	mrs	r0, PSP
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	4b15      	ldr	r3, [pc, #84]	@ (8006330 <pxCurrentTCBConst>)
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	f01e 0f10 	tst.w	lr, #16
 80062e0:	bf08      	it	eq
 80062e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ea:	6010      	str	r0, [r2, #0]
 80062ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80062f4:	f380 8811 	msr	BASEPRI, r0
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	f3bf 8f6f 	isb	sy
 8006300:	f7ff fa6a 	bl	80057d8 <vTaskSwitchContext>
 8006304:	f04f 0000 	mov.w	r0, #0
 8006308:	f380 8811 	msr	BASEPRI, r0
 800630c:	bc09      	pop	{r0, r3}
 800630e:	6819      	ldr	r1, [r3, #0]
 8006310:	6808      	ldr	r0, [r1, #0]
 8006312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006316:	f01e 0f10 	tst.w	lr, #16
 800631a:	bf08      	it	eq
 800631c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006320:	f380 8809 	msr	PSP, r0
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	f3af 8000 	nop.w

08006330 <pxCurrentTCBConst>:
 8006330:	200006d8 	.word	0x200006d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006334:	bf00      	nop
 8006336:	bf00      	nop

08006338 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	607b      	str	r3, [r7, #4]
}
 8006350:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006352:	f7ff f987 	bl	8005664 <xTaskIncrementTick>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d003      	beq.n	8006364 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800635c:	4b06      	ldr	r3, [pc, #24]	@ (8006378 <xPortSysTickHandler+0x40>)
 800635e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	2300      	movs	r3, #0
 8006366:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	f383 8811 	msr	BASEPRI, r3
}
 800636e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006370:	bf00      	nop
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	e000ed04 	.word	0xe000ed04

0800637c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800637c:	b480      	push	{r7}
 800637e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006380:	4b0b      	ldr	r3, [pc, #44]	@ (80063b0 <vPortSetupTimerInterrupt+0x34>)
 8006382:	2200      	movs	r2, #0
 8006384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006386:	4b0b      	ldr	r3, [pc, #44]	@ (80063b4 <vPortSetupTimerInterrupt+0x38>)
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800638c:	4b0a      	ldr	r3, [pc, #40]	@ (80063b8 <vPortSetupTimerInterrupt+0x3c>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a0a      	ldr	r2, [pc, #40]	@ (80063bc <vPortSetupTimerInterrupt+0x40>)
 8006392:	fba2 2303 	umull	r2, r3, r2, r3
 8006396:	099b      	lsrs	r3, r3, #6
 8006398:	4a09      	ldr	r2, [pc, #36]	@ (80063c0 <vPortSetupTimerInterrupt+0x44>)
 800639a:	3b01      	subs	r3, #1
 800639c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800639e:	4b04      	ldr	r3, [pc, #16]	@ (80063b0 <vPortSetupTimerInterrupt+0x34>)
 80063a0:	2207      	movs	r2, #7
 80063a2:	601a      	str	r2, [r3, #0]
}
 80063a4:	bf00      	nop
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	e000e010 	.word	0xe000e010
 80063b4:	e000e018 	.word	0xe000e018
 80063b8:	20000000 	.word	0x20000000
 80063bc:	10624dd3 	.word	0x10624dd3
 80063c0:	e000e014 	.word	0xe000e014

080063c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80063c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80063d4 <vPortEnableVFP+0x10>
 80063c8:	6801      	ldr	r1, [r0, #0]
 80063ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80063ce:	6001      	str	r1, [r0, #0]
 80063d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80063d2:	bf00      	nop
 80063d4:	e000ed88 	.word	0xe000ed88

080063d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80063de:	f3ef 8305 	mrs	r3, IPSR
 80063e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2b0f      	cmp	r3, #15
 80063e8:	d915      	bls.n	8006416 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80063ea:	4a18      	ldr	r2, [pc, #96]	@ (800644c <vPortValidateInterruptPriority+0x74>)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4413      	add	r3, r2
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80063f4:	4b16      	ldr	r3, [pc, #88]	@ (8006450 <vPortValidateInterruptPriority+0x78>)
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	7afa      	ldrb	r2, [r7, #11]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d20b      	bcs.n	8006416 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80063fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	607b      	str	r3, [r7, #4]
}
 8006410:	bf00      	nop
 8006412:	bf00      	nop
 8006414:	e7fd      	b.n	8006412 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006416:	4b0f      	ldr	r3, [pc, #60]	@ (8006454 <vPortValidateInterruptPriority+0x7c>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800641e:	4b0e      	ldr	r3, [pc, #56]	@ (8006458 <vPortValidateInterruptPriority+0x80>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	429a      	cmp	r2, r3
 8006424:	d90b      	bls.n	800643e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800642a:	f383 8811 	msr	BASEPRI, r3
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	603b      	str	r3, [r7, #0]
}
 8006438:	bf00      	nop
 800643a:	bf00      	nop
 800643c:	e7fd      	b.n	800643a <vPortValidateInterruptPriority+0x62>
	}
 800643e:	bf00      	nop
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	e000e3f0 	.word	0xe000e3f0
 8006450:	20000804 	.word	0x20000804
 8006454:	e000ed0c 	.word	0xe000ed0c
 8006458:	20000808 	.word	0x20000808

0800645c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b08a      	sub	sp, #40	@ 0x28
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006464:	2300      	movs	r3, #0
 8006466:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006468:	f7ff f82a 	bl	80054c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800646c:	4b5c      	ldr	r3, [pc, #368]	@ (80065e0 <pvPortMalloc+0x184>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006474:	f000 f924 	bl	80066c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006478:	4b5a      	ldr	r3, [pc, #360]	@ (80065e4 <pvPortMalloc+0x188>)
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4013      	ands	r3, r2
 8006480:	2b00      	cmp	r3, #0
 8006482:	f040 8095 	bne.w	80065b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d01e      	beq.n	80064ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800648c:	2208      	movs	r2, #8
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4413      	add	r3, r2
 8006492:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f003 0307 	and.w	r3, r3, #7
 800649a:	2b00      	cmp	r3, #0
 800649c:	d015      	beq.n	80064ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f023 0307 	bic.w	r3, r3, #7
 80064a4:	3308      	adds	r3, #8
 80064a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f003 0307 	and.w	r3, r3, #7
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00b      	beq.n	80064ca <pvPortMalloc+0x6e>
	__asm volatile
 80064b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	617b      	str	r3, [r7, #20]
}
 80064c4:	bf00      	nop
 80064c6:	bf00      	nop
 80064c8:	e7fd      	b.n	80064c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d06f      	beq.n	80065b0 <pvPortMalloc+0x154>
 80064d0:	4b45      	ldr	r3, [pc, #276]	@ (80065e8 <pvPortMalloc+0x18c>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d86a      	bhi.n	80065b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80064da:	4b44      	ldr	r3, [pc, #272]	@ (80065ec <pvPortMalloc+0x190>)
 80064dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064de:	4b43      	ldr	r3, [pc, #268]	@ (80065ec <pvPortMalloc+0x190>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064e4:	e004      	b.n	80064f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80064e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d903      	bls.n	8006502 <pvPortMalloc+0xa6>
 80064fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1f1      	bne.n	80064e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006502:	4b37      	ldr	r3, [pc, #220]	@ (80065e0 <pvPortMalloc+0x184>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006508:	429a      	cmp	r2, r3
 800650a:	d051      	beq.n	80065b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2208      	movs	r2, #8
 8006512:	4413      	add	r3, r2
 8006514:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800651e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	1ad2      	subs	r2, r2, r3
 8006526:	2308      	movs	r3, #8
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	429a      	cmp	r2, r3
 800652c:	d920      	bls.n	8006570 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800652e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4413      	add	r3, r2
 8006534:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	f003 0307 	and.w	r3, r3, #7
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00b      	beq.n	8006558 <pvPortMalloc+0xfc>
	__asm volatile
 8006540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006544:	f383 8811 	msr	BASEPRI, r3
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	613b      	str	r3, [r7, #16]
}
 8006552:	bf00      	nop
 8006554:	bf00      	nop
 8006556:	e7fd      	b.n	8006554 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	1ad2      	subs	r2, r2, r3
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800656a:	69b8      	ldr	r0, [r7, #24]
 800656c:	f000 f90a 	bl	8006784 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006570:	4b1d      	ldr	r3, [pc, #116]	@ (80065e8 <pvPortMalloc+0x18c>)
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	4a1b      	ldr	r2, [pc, #108]	@ (80065e8 <pvPortMalloc+0x18c>)
 800657c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800657e:	4b1a      	ldr	r3, [pc, #104]	@ (80065e8 <pvPortMalloc+0x18c>)
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	4b1b      	ldr	r3, [pc, #108]	@ (80065f0 <pvPortMalloc+0x194>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	429a      	cmp	r2, r3
 8006588:	d203      	bcs.n	8006592 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800658a:	4b17      	ldr	r3, [pc, #92]	@ (80065e8 <pvPortMalloc+0x18c>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a18      	ldr	r2, [pc, #96]	@ (80065f0 <pvPortMalloc+0x194>)
 8006590:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	4b13      	ldr	r3, [pc, #76]	@ (80065e4 <pvPortMalloc+0x188>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	431a      	orrs	r2, r3
 800659c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80065a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a2:	2200      	movs	r2, #0
 80065a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80065a6:	4b13      	ldr	r3, [pc, #76]	@ (80065f4 <pvPortMalloc+0x198>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3301      	adds	r3, #1
 80065ac:	4a11      	ldr	r2, [pc, #68]	@ (80065f4 <pvPortMalloc+0x198>)
 80065ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80065b0:	f7fe ff94 	bl	80054dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	f003 0307 	and.w	r3, r3, #7
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00b      	beq.n	80065d6 <pvPortMalloc+0x17a>
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	60fb      	str	r3, [r7, #12]
}
 80065d0:	bf00      	nop
 80065d2:	bf00      	nop
 80065d4:	e7fd      	b.n	80065d2 <pvPortMalloc+0x176>
	return pvReturn;
 80065d6:	69fb      	ldr	r3, [r7, #28]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3728      	adds	r7, #40	@ 0x28
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	20005634 	.word	0x20005634
 80065e4:	20005648 	.word	0x20005648
 80065e8:	20005638 	.word	0x20005638
 80065ec:	2000562c 	.word	0x2000562c
 80065f0:	2000563c 	.word	0x2000563c
 80065f4:	20005640 	.word	0x20005640

080065f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b086      	sub	sp, #24
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d04f      	beq.n	80066aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800660a:	2308      	movs	r3, #8
 800660c:	425b      	negs	r3, r3
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	4413      	add	r3, r2
 8006612:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	4b25      	ldr	r3, [pc, #148]	@ (80066b4 <vPortFree+0xbc>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4013      	ands	r3, r2
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10b      	bne.n	800663e <vPortFree+0x46>
	__asm volatile
 8006626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	60fb      	str	r3, [r7, #12]
}
 8006638:	bf00      	nop
 800663a:	bf00      	nop
 800663c:	e7fd      	b.n	800663a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00b      	beq.n	800665e <vPortFree+0x66>
	__asm volatile
 8006646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	60bb      	str	r3, [r7, #8]
}
 8006658:	bf00      	nop
 800665a:	bf00      	nop
 800665c:	e7fd      	b.n	800665a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	685a      	ldr	r2, [r3, #4]
 8006662:	4b14      	ldr	r3, [pc, #80]	@ (80066b4 <vPortFree+0xbc>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4013      	ands	r3, r2
 8006668:	2b00      	cmp	r3, #0
 800666a:	d01e      	beq.n	80066aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d11a      	bne.n	80066aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	4b0e      	ldr	r3, [pc, #56]	@ (80066b4 <vPortFree+0xbc>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	43db      	mvns	r3, r3
 800667e:	401a      	ands	r2, r3
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006684:	f7fe ff1c 	bl	80054c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	4b0a      	ldr	r3, [pc, #40]	@ (80066b8 <vPortFree+0xc0>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4413      	add	r3, r2
 8006692:	4a09      	ldr	r2, [pc, #36]	@ (80066b8 <vPortFree+0xc0>)
 8006694:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006696:	6938      	ldr	r0, [r7, #16]
 8006698:	f000 f874 	bl	8006784 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800669c:	4b07      	ldr	r3, [pc, #28]	@ (80066bc <vPortFree+0xc4>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	3301      	adds	r3, #1
 80066a2:	4a06      	ldr	r2, [pc, #24]	@ (80066bc <vPortFree+0xc4>)
 80066a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80066a6:	f7fe ff19 	bl	80054dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80066aa:	bf00      	nop
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	20005648 	.word	0x20005648
 80066b8:	20005638 	.word	0x20005638
 80066bc:	20005644 	.word	0x20005644

080066c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80066c6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80066ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80066cc:	4b27      	ldr	r3, [pc, #156]	@ (800676c <prvHeapInit+0xac>)
 80066ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f003 0307 	and.w	r3, r3, #7
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00c      	beq.n	80066f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	3307      	adds	r3, #7
 80066de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f023 0307 	bic.w	r3, r3, #7
 80066e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	4a1f      	ldr	r2, [pc, #124]	@ (800676c <prvHeapInit+0xac>)
 80066f0:	4413      	add	r3, r2
 80066f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80066f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006770 <prvHeapInit+0xb0>)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066fe:	4b1c      	ldr	r3, [pc, #112]	@ (8006770 <prvHeapInit+0xb0>)
 8006700:	2200      	movs	r2, #0
 8006702:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	4413      	add	r3, r2
 800670a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800670c:	2208      	movs	r2, #8
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	1a9b      	subs	r3, r3, r2
 8006712:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f023 0307 	bic.w	r3, r3, #7
 800671a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4a15      	ldr	r2, [pc, #84]	@ (8006774 <prvHeapInit+0xb4>)
 8006720:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006722:	4b14      	ldr	r3, [pc, #80]	@ (8006774 <prvHeapInit+0xb4>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2200      	movs	r2, #0
 8006728:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800672a:	4b12      	ldr	r3, [pc, #72]	@ (8006774 <prvHeapInit+0xb4>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2200      	movs	r2, #0
 8006730:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	1ad2      	subs	r2, r2, r3
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006740:	4b0c      	ldr	r3, [pc, #48]	@ (8006774 <prvHeapInit+0xb4>)
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	4a0a      	ldr	r2, [pc, #40]	@ (8006778 <prvHeapInit+0xb8>)
 800674e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	4a09      	ldr	r2, [pc, #36]	@ (800677c <prvHeapInit+0xbc>)
 8006756:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006758:	4b09      	ldr	r3, [pc, #36]	@ (8006780 <prvHeapInit+0xc0>)
 800675a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800675e:	601a      	str	r2, [r3, #0]
}
 8006760:	bf00      	nop
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	2000080c 	.word	0x2000080c
 8006770:	2000562c 	.word	0x2000562c
 8006774:	20005634 	.word	0x20005634
 8006778:	2000563c 	.word	0x2000563c
 800677c:	20005638 	.word	0x20005638
 8006780:	20005648 	.word	0x20005648

08006784 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800678c:	4b28      	ldr	r3, [pc, #160]	@ (8006830 <prvInsertBlockIntoFreeList+0xac>)
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	e002      	b.n	8006798 <prvInsertBlockIntoFreeList+0x14>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	60fb      	str	r3, [r7, #12]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d8f7      	bhi.n	8006792 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	4413      	add	r3, r2
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d108      	bne.n	80067c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	685a      	ldr	r2, [r3, #4]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	441a      	add	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	441a      	add	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d118      	bne.n	800680c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	4b15      	ldr	r3, [pc, #84]	@ (8006834 <prvInsertBlockIntoFreeList+0xb0>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d00d      	beq.n	8006802 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	441a      	add	r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	e008      	b.n	8006814 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006802:	4b0c      	ldr	r3, [pc, #48]	@ (8006834 <prvInsertBlockIntoFreeList+0xb0>)
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	601a      	str	r2, [r3, #0]
 800680a:	e003      	b.n	8006814 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	429a      	cmp	r2, r3
 800681a:	d002      	beq.n	8006822 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006822:	bf00      	nop
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	2000562c 	.word	0x2000562c
 8006834:	20005634 	.word	0x20005634

08006838 <atoi>:
 8006838:	220a      	movs	r2, #10
 800683a:	2100      	movs	r1, #0
 800683c:	f000 b87a 	b.w	8006934 <strtol>

08006840 <_strtol_l.constprop.0>:
 8006840:	2b24      	cmp	r3, #36	@ 0x24
 8006842:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006846:	4686      	mov	lr, r0
 8006848:	4690      	mov	r8, r2
 800684a:	d801      	bhi.n	8006850 <_strtol_l.constprop.0+0x10>
 800684c:	2b01      	cmp	r3, #1
 800684e:	d106      	bne.n	800685e <_strtol_l.constprop.0+0x1e>
 8006850:	f000 fb06 	bl	8006e60 <__errno>
 8006854:	2316      	movs	r3, #22
 8006856:	6003      	str	r3, [r0, #0]
 8006858:	2000      	movs	r0, #0
 800685a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800685e:	4834      	ldr	r0, [pc, #208]	@ (8006930 <_strtol_l.constprop.0+0xf0>)
 8006860:	460d      	mov	r5, r1
 8006862:	462a      	mov	r2, r5
 8006864:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006868:	5d06      	ldrb	r6, [r0, r4]
 800686a:	f016 0608 	ands.w	r6, r6, #8
 800686e:	d1f8      	bne.n	8006862 <_strtol_l.constprop.0+0x22>
 8006870:	2c2d      	cmp	r4, #45	@ 0x2d
 8006872:	d12d      	bne.n	80068d0 <_strtol_l.constprop.0+0x90>
 8006874:	782c      	ldrb	r4, [r5, #0]
 8006876:	2601      	movs	r6, #1
 8006878:	1c95      	adds	r5, r2, #2
 800687a:	f033 0210 	bics.w	r2, r3, #16
 800687e:	d109      	bne.n	8006894 <_strtol_l.constprop.0+0x54>
 8006880:	2c30      	cmp	r4, #48	@ 0x30
 8006882:	d12a      	bne.n	80068da <_strtol_l.constprop.0+0x9a>
 8006884:	782a      	ldrb	r2, [r5, #0]
 8006886:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800688a:	2a58      	cmp	r2, #88	@ 0x58
 800688c:	d125      	bne.n	80068da <_strtol_l.constprop.0+0x9a>
 800688e:	786c      	ldrb	r4, [r5, #1]
 8006890:	2310      	movs	r3, #16
 8006892:	3502      	adds	r5, #2
 8006894:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006898:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800689c:	2200      	movs	r2, #0
 800689e:	fbbc f9f3 	udiv	r9, ip, r3
 80068a2:	4610      	mov	r0, r2
 80068a4:	fb03 ca19 	mls	sl, r3, r9, ip
 80068a8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80068ac:	2f09      	cmp	r7, #9
 80068ae:	d81b      	bhi.n	80068e8 <_strtol_l.constprop.0+0xa8>
 80068b0:	463c      	mov	r4, r7
 80068b2:	42a3      	cmp	r3, r4
 80068b4:	dd27      	ble.n	8006906 <_strtol_l.constprop.0+0xc6>
 80068b6:	1c57      	adds	r7, r2, #1
 80068b8:	d007      	beq.n	80068ca <_strtol_l.constprop.0+0x8a>
 80068ba:	4581      	cmp	r9, r0
 80068bc:	d320      	bcc.n	8006900 <_strtol_l.constprop.0+0xc0>
 80068be:	d101      	bne.n	80068c4 <_strtol_l.constprop.0+0x84>
 80068c0:	45a2      	cmp	sl, r4
 80068c2:	db1d      	blt.n	8006900 <_strtol_l.constprop.0+0xc0>
 80068c4:	fb00 4003 	mla	r0, r0, r3, r4
 80068c8:	2201      	movs	r2, #1
 80068ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80068ce:	e7eb      	b.n	80068a8 <_strtol_l.constprop.0+0x68>
 80068d0:	2c2b      	cmp	r4, #43	@ 0x2b
 80068d2:	bf04      	itt	eq
 80068d4:	782c      	ldrbeq	r4, [r5, #0]
 80068d6:	1c95      	addeq	r5, r2, #2
 80068d8:	e7cf      	b.n	800687a <_strtol_l.constprop.0+0x3a>
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1da      	bne.n	8006894 <_strtol_l.constprop.0+0x54>
 80068de:	2c30      	cmp	r4, #48	@ 0x30
 80068e0:	bf0c      	ite	eq
 80068e2:	2308      	moveq	r3, #8
 80068e4:	230a      	movne	r3, #10
 80068e6:	e7d5      	b.n	8006894 <_strtol_l.constprop.0+0x54>
 80068e8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80068ec:	2f19      	cmp	r7, #25
 80068ee:	d801      	bhi.n	80068f4 <_strtol_l.constprop.0+0xb4>
 80068f0:	3c37      	subs	r4, #55	@ 0x37
 80068f2:	e7de      	b.n	80068b2 <_strtol_l.constprop.0+0x72>
 80068f4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80068f8:	2f19      	cmp	r7, #25
 80068fa:	d804      	bhi.n	8006906 <_strtol_l.constprop.0+0xc6>
 80068fc:	3c57      	subs	r4, #87	@ 0x57
 80068fe:	e7d8      	b.n	80068b2 <_strtol_l.constprop.0+0x72>
 8006900:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006904:	e7e1      	b.n	80068ca <_strtol_l.constprop.0+0x8a>
 8006906:	1c53      	adds	r3, r2, #1
 8006908:	d108      	bne.n	800691c <_strtol_l.constprop.0+0xdc>
 800690a:	2322      	movs	r3, #34	@ 0x22
 800690c:	f8ce 3000 	str.w	r3, [lr]
 8006910:	4660      	mov	r0, ip
 8006912:	f1b8 0f00 	cmp.w	r8, #0
 8006916:	d0a0      	beq.n	800685a <_strtol_l.constprop.0+0x1a>
 8006918:	1e69      	subs	r1, r5, #1
 800691a:	e006      	b.n	800692a <_strtol_l.constprop.0+0xea>
 800691c:	b106      	cbz	r6, 8006920 <_strtol_l.constprop.0+0xe0>
 800691e:	4240      	negs	r0, r0
 8006920:	f1b8 0f00 	cmp.w	r8, #0
 8006924:	d099      	beq.n	800685a <_strtol_l.constprop.0+0x1a>
 8006926:	2a00      	cmp	r2, #0
 8006928:	d1f6      	bne.n	8006918 <_strtol_l.constprop.0+0xd8>
 800692a:	f8c8 1000 	str.w	r1, [r8]
 800692e:	e794      	b.n	800685a <_strtol_l.constprop.0+0x1a>
 8006930:	08007eb5 	.word	0x08007eb5

08006934 <strtol>:
 8006934:	4613      	mov	r3, r2
 8006936:	460a      	mov	r2, r1
 8006938:	4601      	mov	r1, r0
 800693a:	4802      	ldr	r0, [pc, #8]	@ (8006944 <strtol+0x10>)
 800693c:	6800      	ldr	r0, [r0, #0]
 800693e:	f7ff bf7f 	b.w	8006840 <_strtol_l.constprop.0>
 8006942:	bf00      	nop
 8006944:	20000024 	.word	0x20000024

08006948 <std>:
 8006948:	2300      	movs	r3, #0
 800694a:	b510      	push	{r4, lr}
 800694c:	4604      	mov	r4, r0
 800694e:	e9c0 3300 	strd	r3, r3, [r0]
 8006952:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006956:	6083      	str	r3, [r0, #8]
 8006958:	8181      	strh	r1, [r0, #12]
 800695a:	6643      	str	r3, [r0, #100]	@ 0x64
 800695c:	81c2      	strh	r2, [r0, #14]
 800695e:	6183      	str	r3, [r0, #24]
 8006960:	4619      	mov	r1, r3
 8006962:	2208      	movs	r2, #8
 8006964:	305c      	adds	r0, #92	@ 0x5c
 8006966:	f000 fa2d 	bl	8006dc4 <memset>
 800696a:	4b0d      	ldr	r3, [pc, #52]	@ (80069a0 <std+0x58>)
 800696c:	6263      	str	r3, [r4, #36]	@ 0x24
 800696e:	4b0d      	ldr	r3, [pc, #52]	@ (80069a4 <std+0x5c>)
 8006970:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006972:	4b0d      	ldr	r3, [pc, #52]	@ (80069a8 <std+0x60>)
 8006974:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006976:	4b0d      	ldr	r3, [pc, #52]	@ (80069ac <std+0x64>)
 8006978:	6323      	str	r3, [r4, #48]	@ 0x30
 800697a:	4b0d      	ldr	r3, [pc, #52]	@ (80069b0 <std+0x68>)
 800697c:	6224      	str	r4, [r4, #32]
 800697e:	429c      	cmp	r4, r3
 8006980:	d006      	beq.n	8006990 <std+0x48>
 8006982:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006986:	4294      	cmp	r4, r2
 8006988:	d002      	beq.n	8006990 <std+0x48>
 800698a:	33d0      	adds	r3, #208	@ 0xd0
 800698c:	429c      	cmp	r4, r3
 800698e:	d105      	bne.n	800699c <std+0x54>
 8006990:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006998:	f000 ba8c 	b.w	8006eb4 <__retarget_lock_init_recursive>
 800699c:	bd10      	pop	{r4, pc}
 800699e:	bf00      	nop
 80069a0:	08006c15 	.word	0x08006c15
 80069a4:	08006c37 	.word	0x08006c37
 80069a8:	08006c6f 	.word	0x08006c6f
 80069ac:	08006c93 	.word	0x08006c93
 80069b0:	2000564c 	.word	0x2000564c

080069b4 <stdio_exit_handler>:
 80069b4:	4a02      	ldr	r2, [pc, #8]	@ (80069c0 <stdio_exit_handler+0xc>)
 80069b6:	4903      	ldr	r1, [pc, #12]	@ (80069c4 <stdio_exit_handler+0x10>)
 80069b8:	4803      	ldr	r0, [pc, #12]	@ (80069c8 <stdio_exit_handler+0x14>)
 80069ba:	f000 b869 	b.w	8006a90 <_fwalk_sglue>
 80069be:	bf00      	nop
 80069c0:	20000018 	.word	0x20000018
 80069c4:	08007a21 	.word	0x08007a21
 80069c8:	20000028 	.word	0x20000028

080069cc <cleanup_stdio>:
 80069cc:	6841      	ldr	r1, [r0, #4]
 80069ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006a00 <cleanup_stdio+0x34>)
 80069d0:	4299      	cmp	r1, r3
 80069d2:	b510      	push	{r4, lr}
 80069d4:	4604      	mov	r4, r0
 80069d6:	d001      	beq.n	80069dc <cleanup_stdio+0x10>
 80069d8:	f001 f822 	bl	8007a20 <_fflush_r>
 80069dc:	68a1      	ldr	r1, [r4, #8]
 80069de:	4b09      	ldr	r3, [pc, #36]	@ (8006a04 <cleanup_stdio+0x38>)
 80069e0:	4299      	cmp	r1, r3
 80069e2:	d002      	beq.n	80069ea <cleanup_stdio+0x1e>
 80069e4:	4620      	mov	r0, r4
 80069e6:	f001 f81b 	bl	8007a20 <_fflush_r>
 80069ea:	68e1      	ldr	r1, [r4, #12]
 80069ec:	4b06      	ldr	r3, [pc, #24]	@ (8006a08 <cleanup_stdio+0x3c>)
 80069ee:	4299      	cmp	r1, r3
 80069f0:	d004      	beq.n	80069fc <cleanup_stdio+0x30>
 80069f2:	4620      	mov	r0, r4
 80069f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069f8:	f001 b812 	b.w	8007a20 <_fflush_r>
 80069fc:	bd10      	pop	{r4, pc}
 80069fe:	bf00      	nop
 8006a00:	2000564c 	.word	0x2000564c
 8006a04:	200056b4 	.word	0x200056b4
 8006a08:	2000571c 	.word	0x2000571c

08006a0c <global_stdio_init.part.0>:
 8006a0c:	b510      	push	{r4, lr}
 8006a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8006a3c <global_stdio_init.part.0+0x30>)
 8006a10:	4c0b      	ldr	r4, [pc, #44]	@ (8006a40 <global_stdio_init.part.0+0x34>)
 8006a12:	4a0c      	ldr	r2, [pc, #48]	@ (8006a44 <global_stdio_init.part.0+0x38>)
 8006a14:	601a      	str	r2, [r3, #0]
 8006a16:	4620      	mov	r0, r4
 8006a18:	2200      	movs	r2, #0
 8006a1a:	2104      	movs	r1, #4
 8006a1c:	f7ff ff94 	bl	8006948 <std>
 8006a20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006a24:	2201      	movs	r2, #1
 8006a26:	2109      	movs	r1, #9
 8006a28:	f7ff ff8e 	bl	8006948 <std>
 8006a2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006a30:	2202      	movs	r2, #2
 8006a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a36:	2112      	movs	r1, #18
 8006a38:	f7ff bf86 	b.w	8006948 <std>
 8006a3c:	20005784 	.word	0x20005784
 8006a40:	2000564c 	.word	0x2000564c
 8006a44:	080069b5 	.word	0x080069b5

08006a48 <__sfp_lock_acquire>:
 8006a48:	4801      	ldr	r0, [pc, #4]	@ (8006a50 <__sfp_lock_acquire+0x8>)
 8006a4a:	f000 ba34 	b.w	8006eb6 <__retarget_lock_acquire_recursive>
 8006a4e:	bf00      	nop
 8006a50:	2000578d 	.word	0x2000578d

08006a54 <__sfp_lock_release>:
 8006a54:	4801      	ldr	r0, [pc, #4]	@ (8006a5c <__sfp_lock_release+0x8>)
 8006a56:	f000 ba2f 	b.w	8006eb8 <__retarget_lock_release_recursive>
 8006a5a:	bf00      	nop
 8006a5c:	2000578d 	.word	0x2000578d

08006a60 <__sinit>:
 8006a60:	b510      	push	{r4, lr}
 8006a62:	4604      	mov	r4, r0
 8006a64:	f7ff fff0 	bl	8006a48 <__sfp_lock_acquire>
 8006a68:	6a23      	ldr	r3, [r4, #32]
 8006a6a:	b11b      	cbz	r3, 8006a74 <__sinit+0x14>
 8006a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a70:	f7ff bff0 	b.w	8006a54 <__sfp_lock_release>
 8006a74:	4b04      	ldr	r3, [pc, #16]	@ (8006a88 <__sinit+0x28>)
 8006a76:	6223      	str	r3, [r4, #32]
 8006a78:	4b04      	ldr	r3, [pc, #16]	@ (8006a8c <__sinit+0x2c>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1f5      	bne.n	8006a6c <__sinit+0xc>
 8006a80:	f7ff ffc4 	bl	8006a0c <global_stdio_init.part.0>
 8006a84:	e7f2      	b.n	8006a6c <__sinit+0xc>
 8006a86:	bf00      	nop
 8006a88:	080069cd 	.word	0x080069cd
 8006a8c:	20005784 	.word	0x20005784

08006a90 <_fwalk_sglue>:
 8006a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a94:	4607      	mov	r7, r0
 8006a96:	4688      	mov	r8, r1
 8006a98:	4614      	mov	r4, r2
 8006a9a:	2600      	movs	r6, #0
 8006a9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006aa0:	f1b9 0901 	subs.w	r9, r9, #1
 8006aa4:	d505      	bpl.n	8006ab2 <_fwalk_sglue+0x22>
 8006aa6:	6824      	ldr	r4, [r4, #0]
 8006aa8:	2c00      	cmp	r4, #0
 8006aaa:	d1f7      	bne.n	8006a9c <_fwalk_sglue+0xc>
 8006aac:	4630      	mov	r0, r6
 8006aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ab2:	89ab      	ldrh	r3, [r5, #12]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d907      	bls.n	8006ac8 <_fwalk_sglue+0x38>
 8006ab8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006abc:	3301      	adds	r3, #1
 8006abe:	d003      	beq.n	8006ac8 <_fwalk_sglue+0x38>
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	4638      	mov	r0, r7
 8006ac4:	47c0      	blx	r8
 8006ac6:	4306      	orrs	r6, r0
 8006ac8:	3568      	adds	r5, #104	@ 0x68
 8006aca:	e7e9      	b.n	8006aa0 <_fwalk_sglue+0x10>

08006acc <iprintf>:
 8006acc:	b40f      	push	{r0, r1, r2, r3}
 8006ace:	b507      	push	{r0, r1, r2, lr}
 8006ad0:	4906      	ldr	r1, [pc, #24]	@ (8006aec <iprintf+0x20>)
 8006ad2:	ab04      	add	r3, sp, #16
 8006ad4:	6808      	ldr	r0, [r1, #0]
 8006ad6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ada:	6881      	ldr	r1, [r0, #8]
 8006adc:	9301      	str	r3, [sp, #4]
 8006ade:	f000 fc75 	bl	80073cc <_vfiprintf_r>
 8006ae2:	b003      	add	sp, #12
 8006ae4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ae8:	b004      	add	sp, #16
 8006aea:	4770      	bx	lr
 8006aec:	20000024 	.word	0x20000024

08006af0 <_puts_r>:
 8006af0:	6a03      	ldr	r3, [r0, #32]
 8006af2:	b570      	push	{r4, r5, r6, lr}
 8006af4:	6884      	ldr	r4, [r0, #8]
 8006af6:	4605      	mov	r5, r0
 8006af8:	460e      	mov	r6, r1
 8006afa:	b90b      	cbnz	r3, 8006b00 <_puts_r+0x10>
 8006afc:	f7ff ffb0 	bl	8006a60 <__sinit>
 8006b00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b02:	07db      	lsls	r3, r3, #31
 8006b04:	d405      	bmi.n	8006b12 <_puts_r+0x22>
 8006b06:	89a3      	ldrh	r3, [r4, #12]
 8006b08:	0598      	lsls	r0, r3, #22
 8006b0a:	d402      	bmi.n	8006b12 <_puts_r+0x22>
 8006b0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b0e:	f000 f9d2 	bl	8006eb6 <__retarget_lock_acquire_recursive>
 8006b12:	89a3      	ldrh	r3, [r4, #12]
 8006b14:	0719      	lsls	r1, r3, #28
 8006b16:	d502      	bpl.n	8006b1e <_puts_r+0x2e>
 8006b18:	6923      	ldr	r3, [r4, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d135      	bne.n	8006b8a <_puts_r+0x9a>
 8006b1e:	4621      	mov	r1, r4
 8006b20:	4628      	mov	r0, r5
 8006b22:	f000 f8f9 	bl	8006d18 <__swsetup_r>
 8006b26:	b380      	cbz	r0, 8006b8a <_puts_r+0x9a>
 8006b28:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006b2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b2e:	07da      	lsls	r2, r3, #31
 8006b30:	d405      	bmi.n	8006b3e <_puts_r+0x4e>
 8006b32:	89a3      	ldrh	r3, [r4, #12]
 8006b34:	059b      	lsls	r3, r3, #22
 8006b36:	d402      	bmi.n	8006b3e <_puts_r+0x4e>
 8006b38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b3a:	f000 f9bd 	bl	8006eb8 <__retarget_lock_release_recursive>
 8006b3e:	4628      	mov	r0, r5
 8006b40:	bd70      	pop	{r4, r5, r6, pc}
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	da04      	bge.n	8006b50 <_puts_r+0x60>
 8006b46:	69a2      	ldr	r2, [r4, #24]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	dc17      	bgt.n	8006b7c <_puts_r+0x8c>
 8006b4c:	290a      	cmp	r1, #10
 8006b4e:	d015      	beq.n	8006b7c <_puts_r+0x8c>
 8006b50:	6823      	ldr	r3, [r4, #0]
 8006b52:	1c5a      	adds	r2, r3, #1
 8006b54:	6022      	str	r2, [r4, #0]
 8006b56:	7019      	strb	r1, [r3, #0]
 8006b58:	68a3      	ldr	r3, [r4, #8]
 8006b5a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	60a3      	str	r3, [r4, #8]
 8006b62:	2900      	cmp	r1, #0
 8006b64:	d1ed      	bne.n	8006b42 <_puts_r+0x52>
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	da11      	bge.n	8006b8e <_puts_r+0x9e>
 8006b6a:	4622      	mov	r2, r4
 8006b6c:	210a      	movs	r1, #10
 8006b6e:	4628      	mov	r0, r5
 8006b70:	f000 f893 	bl	8006c9a <__swbuf_r>
 8006b74:	3001      	adds	r0, #1
 8006b76:	d0d7      	beq.n	8006b28 <_puts_r+0x38>
 8006b78:	250a      	movs	r5, #10
 8006b7a:	e7d7      	b.n	8006b2c <_puts_r+0x3c>
 8006b7c:	4622      	mov	r2, r4
 8006b7e:	4628      	mov	r0, r5
 8006b80:	f000 f88b 	bl	8006c9a <__swbuf_r>
 8006b84:	3001      	adds	r0, #1
 8006b86:	d1e7      	bne.n	8006b58 <_puts_r+0x68>
 8006b88:	e7ce      	b.n	8006b28 <_puts_r+0x38>
 8006b8a:	3e01      	subs	r6, #1
 8006b8c:	e7e4      	b.n	8006b58 <_puts_r+0x68>
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	1c5a      	adds	r2, r3, #1
 8006b92:	6022      	str	r2, [r4, #0]
 8006b94:	220a      	movs	r2, #10
 8006b96:	701a      	strb	r2, [r3, #0]
 8006b98:	e7ee      	b.n	8006b78 <_puts_r+0x88>
	...

08006b9c <puts>:
 8006b9c:	4b02      	ldr	r3, [pc, #8]	@ (8006ba8 <puts+0xc>)
 8006b9e:	4601      	mov	r1, r0
 8006ba0:	6818      	ldr	r0, [r3, #0]
 8006ba2:	f7ff bfa5 	b.w	8006af0 <_puts_r>
 8006ba6:	bf00      	nop
 8006ba8:	20000024 	.word	0x20000024

08006bac <sniprintf>:
 8006bac:	b40c      	push	{r2, r3}
 8006bae:	b530      	push	{r4, r5, lr}
 8006bb0:	4b17      	ldr	r3, [pc, #92]	@ (8006c10 <sniprintf+0x64>)
 8006bb2:	1e0c      	subs	r4, r1, #0
 8006bb4:	681d      	ldr	r5, [r3, #0]
 8006bb6:	b09d      	sub	sp, #116	@ 0x74
 8006bb8:	da08      	bge.n	8006bcc <sniprintf+0x20>
 8006bba:	238b      	movs	r3, #139	@ 0x8b
 8006bbc:	602b      	str	r3, [r5, #0]
 8006bbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006bc2:	b01d      	add	sp, #116	@ 0x74
 8006bc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bc8:	b002      	add	sp, #8
 8006bca:	4770      	bx	lr
 8006bcc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006bd0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006bd4:	bf14      	ite	ne
 8006bd6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8006bda:	4623      	moveq	r3, r4
 8006bdc:	9304      	str	r3, [sp, #16]
 8006bde:	9307      	str	r3, [sp, #28]
 8006be0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006be4:	9002      	str	r0, [sp, #8]
 8006be6:	9006      	str	r0, [sp, #24]
 8006be8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006bec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006bee:	ab21      	add	r3, sp, #132	@ 0x84
 8006bf0:	a902      	add	r1, sp, #8
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	9301      	str	r3, [sp, #4]
 8006bf6:	f000 fac3 	bl	8007180 <_svfiprintf_r>
 8006bfa:	1c43      	adds	r3, r0, #1
 8006bfc:	bfbc      	itt	lt
 8006bfe:	238b      	movlt	r3, #139	@ 0x8b
 8006c00:	602b      	strlt	r3, [r5, #0]
 8006c02:	2c00      	cmp	r4, #0
 8006c04:	d0dd      	beq.n	8006bc2 <sniprintf+0x16>
 8006c06:	9b02      	ldr	r3, [sp, #8]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	701a      	strb	r2, [r3, #0]
 8006c0c:	e7d9      	b.n	8006bc2 <sniprintf+0x16>
 8006c0e:	bf00      	nop
 8006c10:	20000024 	.word	0x20000024

08006c14 <__sread>:
 8006c14:	b510      	push	{r4, lr}
 8006c16:	460c      	mov	r4, r1
 8006c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c1c:	f000 f8fc 	bl	8006e18 <_read_r>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	bfab      	itete	ge
 8006c24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006c26:	89a3      	ldrhlt	r3, [r4, #12]
 8006c28:	181b      	addge	r3, r3, r0
 8006c2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006c2e:	bfac      	ite	ge
 8006c30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006c32:	81a3      	strhlt	r3, [r4, #12]
 8006c34:	bd10      	pop	{r4, pc}

08006c36 <__swrite>:
 8006c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c3a:	461f      	mov	r7, r3
 8006c3c:	898b      	ldrh	r3, [r1, #12]
 8006c3e:	05db      	lsls	r3, r3, #23
 8006c40:	4605      	mov	r5, r0
 8006c42:	460c      	mov	r4, r1
 8006c44:	4616      	mov	r6, r2
 8006c46:	d505      	bpl.n	8006c54 <__swrite+0x1e>
 8006c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f000 f8d0 	bl	8006df4 <_lseek_r>
 8006c54:	89a3      	ldrh	r3, [r4, #12]
 8006c56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c5e:	81a3      	strh	r3, [r4, #12]
 8006c60:	4632      	mov	r2, r6
 8006c62:	463b      	mov	r3, r7
 8006c64:	4628      	mov	r0, r5
 8006c66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c6a:	f000 b8e7 	b.w	8006e3c <_write_r>

08006c6e <__sseek>:
 8006c6e:	b510      	push	{r4, lr}
 8006c70:	460c      	mov	r4, r1
 8006c72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c76:	f000 f8bd 	bl	8006df4 <_lseek_r>
 8006c7a:	1c43      	adds	r3, r0, #1
 8006c7c:	89a3      	ldrh	r3, [r4, #12]
 8006c7e:	bf15      	itete	ne
 8006c80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006c82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006c86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006c8a:	81a3      	strheq	r3, [r4, #12]
 8006c8c:	bf18      	it	ne
 8006c8e:	81a3      	strhne	r3, [r4, #12]
 8006c90:	bd10      	pop	{r4, pc}

08006c92 <__sclose>:
 8006c92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c96:	f000 b89d 	b.w	8006dd4 <_close_r>

08006c9a <__swbuf_r>:
 8006c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c9c:	460e      	mov	r6, r1
 8006c9e:	4614      	mov	r4, r2
 8006ca0:	4605      	mov	r5, r0
 8006ca2:	b118      	cbz	r0, 8006cac <__swbuf_r+0x12>
 8006ca4:	6a03      	ldr	r3, [r0, #32]
 8006ca6:	b90b      	cbnz	r3, 8006cac <__swbuf_r+0x12>
 8006ca8:	f7ff feda 	bl	8006a60 <__sinit>
 8006cac:	69a3      	ldr	r3, [r4, #24]
 8006cae:	60a3      	str	r3, [r4, #8]
 8006cb0:	89a3      	ldrh	r3, [r4, #12]
 8006cb2:	071a      	lsls	r2, r3, #28
 8006cb4:	d501      	bpl.n	8006cba <__swbuf_r+0x20>
 8006cb6:	6923      	ldr	r3, [r4, #16]
 8006cb8:	b943      	cbnz	r3, 8006ccc <__swbuf_r+0x32>
 8006cba:	4621      	mov	r1, r4
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	f000 f82b 	bl	8006d18 <__swsetup_r>
 8006cc2:	b118      	cbz	r0, 8006ccc <__swbuf_r+0x32>
 8006cc4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006cc8:	4638      	mov	r0, r7
 8006cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	6922      	ldr	r2, [r4, #16]
 8006cd0:	1a98      	subs	r0, r3, r2
 8006cd2:	6963      	ldr	r3, [r4, #20]
 8006cd4:	b2f6      	uxtb	r6, r6
 8006cd6:	4283      	cmp	r3, r0
 8006cd8:	4637      	mov	r7, r6
 8006cda:	dc05      	bgt.n	8006ce8 <__swbuf_r+0x4e>
 8006cdc:	4621      	mov	r1, r4
 8006cde:	4628      	mov	r0, r5
 8006ce0:	f000 fe9e 	bl	8007a20 <_fflush_r>
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	d1ed      	bne.n	8006cc4 <__swbuf_r+0x2a>
 8006ce8:	68a3      	ldr	r3, [r4, #8]
 8006cea:	3b01      	subs	r3, #1
 8006cec:	60a3      	str	r3, [r4, #8]
 8006cee:	6823      	ldr	r3, [r4, #0]
 8006cf0:	1c5a      	adds	r2, r3, #1
 8006cf2:	6022      	str	r2, [r4, #0]
 8006cf4:	701e      	strb	r6, [r3, #0]
 8006cf6:	6962      	ldr	r2, [r4, #20]
 8006cf8:	1c43      	adds	r3, r0, #1
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d004      	beq.n	8006d08 <__swbuf_r+0x6e>
 8006cfe:	89a3      	ldrh	r3, [r4, #12]
 8006d00:	07db      	lsls	r3, r3, #31
 8006d02:	d5e1      	bpl.n	8006cc8 <__swbuf_r+0x2e>
 8006d04:	2e0a      	cmp	r6, #10
 8006d06:	d1df      	bne.n	8006cc8 <__swbuf_r+0x2e>
 8006d08:	4621      	mov	r1, r4
 8006d0a:	4628      	mov	r0, r5
 8006d0c:	f000 fe88 	bl	8007a20 <_fflush_r>
 8006d10:	2800      	cmp	r0, #0
 8006d12:	d0d9      	beq.n	8006cc8 <__swbuf_r+0x2e>
 8006d14:	e7d6      	b.n	8006cc4 <__swbuf_r+0x2a>
	...

08006d18 <__swsetup_r>:
 8006d18:	b538      	push	{r3, r4, r5, lr}
 8006d1a:	4b29      	ldr	r3, [pc, #164]	@ (8006dc0 <__swsetup_r+0xa8>)
 8006d1c:	4605      	mov	r5, r0
 8006d1e:	6818      	ldr	r0, [r3, #0]
 8006d20:	460c      	mov	r4, r1
 8006d22:	b118      	cbz	r0, 8006d2c <__swsetup_r+0x14>
 8006d24:	6a03      	ldr	r3, [r0, #32]
 8006d26:	b90b      	cbnz	r3, 8006d2c <__swsetup_r+0x14>
 8006d28:	f7ff fe9a 	bl	8006a60 <__sinit>
 8006d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d30:	0719      	lsls	r1, r3, #28
 8006d32:	d422      	bmi.n	8006d7a <__swsetup_r+0x62>
 8006d34:	06da      	lsls	r2, r3, #27
 8006d36:	d407      	bmi.n	8006d48 <__swsetup_r+0x30>
 8006d38:	2209      	movs	r2, #9
 8006d3a:	602a      	str	r2, [r5, #0]
 8006d3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d40:	81a3      	strh	r3, [r4, #12]
 8006d42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d46:	e033      	b.n	8006db0 <__swsetup_r+0x98>
 8006d48:	0758      	lsls	r0, r3, #29
 8006d4a:	d512      	bpl.n	8006d72 <__swsetup_r+0x5a>
 8006d4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d4e:	b141      	cbz	r1, 8006d62 <__swsetup_r+0x4a>
 8006d50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d54:	4299      	cmp	r1, r3
 8006d56:	d002      	beq.n	8006d5e <__swsetup_r+0x46>
 8006d58:	4628      	mov	r0, r5
 8006d5a:	f000 f8bd 	bl	8006ed8 <_free_r>
 8006d5e:	2300      	movs	r3, #0
 8006d60:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d62:	89a3      	ldrh	r3, [r4, #12]
 8006d64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006d68:	81a3      	strh	r3, [r4, #12]
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	6063      	str	r3, [r4, #4]
 8006d6e:	6923      	ldr	r3, [r4, #16]
 8006d70:	6023      	str	r3, [r4, #0]
 8006d72:	89a3      	ldrh	r3, [r4, #12]
 8006d74:	f043 0308 	orr.w	r3, r3, #8
 8006d78:	81a3      	strh	r3, [r4, #12]
 8006d7a:	6923      	ldr	r3, [r4, #16]
 8006d7c:	b94b      	cbnz	r3, 8006d92 <__swsetup_r+0x7a>
 8006d7e:	89a3      	ldrh	r3, [r4, #12]
 8006d80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006d84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d88:	d003      	beq.n	8006d92 <__swsetup_r+0x7a>
 8006d8a:	4621      	mov	r1, r4
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	f000 fe95 	bl	8007abc <__smakebuf_r>
 8006d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d96:	f013 0201 	ands.w	r2, r3, #1
 8006d9a:	d00a      	beq.n	8006db2 <__swsetup_r+0x9a>
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	60a2      	str	r2, [r4, #8]
 8006da0:	6962      	ldr	r2, [r4, #20]
 8006da2:	4252      	negs	r2, r2
 8006da4:	61a2      	str	r2, [r4, #24]
 8006da6:	6922      	ldr	r2, [r4, #16]
 8006da8:	b942      	cbnz	r2, 8006dbc <__swsetup_r+0xa4>
 8006daa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006dae:	d1c5      	bne.n	8006d3c <__swsetup_r+0x24>
 8006db0:	bd38      	pop	{r3, r4, r5, pc}
 8006db2:	0799      	lsls	r1, r3, #30
 8006db4:	bf58      	it	pl
 8006db6:	6962      	ldrpl	r2, [r4, #20]
 8006db8:	60a2      	str	r2, [r4, #8]
 8006dba:	e7f4      	b.n	8006da6 <__swsetup_r+0x8e>
 8006dbc:	2000      	movs	r0, #0
 8006dbe:	e7f7      	b.n	8006db0 <__swsetup_r+0x98>
 8006dc0:	20000024 	.word	0x20000024

08006dc4 <memset>:
 8006dc4:	4402      	add	r2, r0
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d100      	bne.n	8006dce <memset+0xa>
 8006dcc:	4770      	bx	lr
 8006dce:	f803 1b01 	strb.w	r1, [r3], #1
 8006dd2:	e7f9      	b.n	8006dc8 <memset+0x4>

08006dd4 <_close_r>:
 8006dd4:	b538      	push	{r3, r4, r5, lr}
 8006dd6:	4d06      	ldr	r5, [pc, #24]	@ (8006df0 <_close_r+0x1c>)
 8006dd8:	2300      	movs	r3, #0
 8006dda:	4604      	mov	r4, r0
 8006ddc:	4608      	mov	r0, r1
 8006dde:	602b      	str	r3, [r5, #0]
 8006de0:	f7f9 ff1f 	bl	8000c22 <_close>
 8006de4:	1c43      	adds	r3, r0, #1
 8006de6:	d102      	bne.n	8006dee <_close_r+0x1a>
 8006de8:	682b      	ldr	r3, [r5, #0]
 8006dea:	b103      	cbz	r3, 8006dee <_close_r+0x1a>
 8006dec:	6023      	str	r3, [r4, #0]
 8006dee:	bd38      	pop	{r3, r4, r5, pc}
 8006df0:	20005788 	.word	0x20005788

08006df4 <_lseek_r>:
 8006df4:	b538      	push	{r3, r4, r5, lr}
 8006df6:	4d07      	ldr	r5, [pc, #28]	@ (8006e14 <_lseek_r+0x20>)
 8006df8:	4604      	mov	r4, r0
 8006dfa:	4608      	mov	r0, r1
 8006dfc:	4611      	mov	r1, r2
 8006dfe:	2200      	movs	r2, #0
 8006e00:	602a      	str	r2, [r5, #0]
 8006e02:	461a      	mov	r2, r3
 8006e04:	f7f9 ff34 	bl	8000c70 <_lseek>
 8006e08:	1c43      	adds	r3, r0, #1
 8006e0a:	d102      	bne.n	8006e12 <_lseek_r+0x1e>
 8006e0c:	682b      	ldr	r3, [r5, #0]
 8006e0e:	b103      	cbz	r3, 8006e12 <_lseek_r+0x1e>
 8006e10:	6023      	str	r3, [r4, #0]
 8006e12:	bd38      	pop	{r3, r4, r5, pc}
 8006e14:	20005788 	.word	0x20005788

08006e18 <_read_r>:
 8006e18:	b538      	push	{r3, r4, r5, lr}
 8006e1a:	4d07      	ldr	r5, [pc, #28]	@ (8006e38 <_read_r+0x20>)
 8006e1c:	4604      	mov	r4, r0
 8006e1e:	4608      	mov	r0, r1
 8006e20:	4611      	mov	r1, r2
 8006e22:	2200      	movs	r2, #0
 8006e24:	602a      	str	r2, [r5, #0]
 8006e26:	461a      	mov	r2, r3
 8006e28:	f7f9 fec2 	bl	8000bb0 <_read>
 8006e2c:	1c43      	adds	r3, r0, #1
 8006e2e:	d102      	bne.n	8006e36 <_read_r+0x1e>
 8006e30:	682b      	ldr	r3, [r5, #0]
 8006e32:	b103      	cbz	r3, 8006e36 <_read_r+0x1e>
 8006e34:	6023      	str	r3, [r4, #0]
 8006e36:	bd38      	pop	{r3, r4, r5, pc}
 8006e38:	20005788 	.word	0x20005788

08006e3c <_write_r>:
 8006e3c:	b538      	push	{r3, r4, r5, lr}
 8006e3e:	4d07      	ldr	r5, [pc, #28]	@ (8006e5c <_write_r+0x20>)
 8006e40:	4604      	mov	r4, r0
 8006e42:	4608      	mov	r0, r1
 8006e44:	4611      	mov	r1, r2
 8006e46:	2200      	movs	r2, #0
 8006e48:	602a      	str	r2, [r5, #0]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	f7f9 fecd 	bl	8000bea <_write>
 8006e50:	1c43      	adds	r3, r0, #1
 8006e52:	d102      	bne.n	8006e5a <_write_r+0x1e>
 8006e54:	682b      	ldr	r3, [r5, #0]
 8006e56:	b103      	cbz	r3, 8006e5a <_write_r+0x1e>
 8006e58:	6023      	str	r3, [r4, #0]
 8006e5a:	bd38      	pop	{r3, r4, r5, pc}
 8006e5c:	20005788 	.word	0x20005788

08006e60 <__errno>:
 8006e60:	4b01      	ldr	r3, [pc, #4]	@ (8006e68 <__errno+0x8>)
 8006e62:	6818      	ldr	r0, [r3, #0]
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	20000024 	.word	0x20000024

08006e6c <__libc_init_array>:
 8006e6c:	b570      	push	{r4, r5, r6, lr}
 8006e6e:	4d0d      	ldr	r5, [pc, #52]	@ (8006ea4 <__libc_init_array+0x38>)
 8006e70:	4c0d      	ldr	r4, [pc, #52]	@ (8006ea8 <__libc_init_array+0x3c>)
 8006e72:	1b64      	subs	r4, r4, r5
 8006e74:	10a4      	asrs	r4, r4, #2
 8006e76:	2600      	movs	r6, #0
 8006e78:	42a6      	cmp	r6, r4
 8006e7a:	d109      	bne.n	8006e90 <__libc_init_array+0x24>
 8006e7c:	4d0b      	ldr	r5, [pc, #44]	@ (8006eac <__libc_init_array+0x40>)
 8006e7e:	4c0c      	ldr	r4, [pc, #48]	@ (8006eb0 <__libc_init_array+0x44>)
 8006e80:	f000 feda 	bl	8007c38 <_init>
 8006e84:	1b64      	subs	r4, r4, r5
 8006e86:	10a4      	asrs	r4, r4, #2
 8006e88:	2600      	movs	r6, #0
 8006e8a:	42a6      	cmp	r6, r4
 8006e8c:	d105      	bne.n	8006e9a <__libc_init_array+0x2e>
 8006e8e:	bd70      	pop	{r4, r5, r6, pc}
 8006e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e94:	4798      	blx	r3
 8006e96:	3601      	adds	r6, #1
 8006e98:	e7ee      	b.n	8006e78 <__libc_init_array+0xc>
 8006e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e9e:	4798      	blx	r3
 8006ea0:	3601      	adds	r6, #1
 8006ea2:	e7f2      	b.n	8006e8a <__libc_init_array+0x1e>
 8006ea4:	08007ff0 	.word	0x08007ff0
 8006ea8:	08007ff0 	.word	0x08007ff0
 8006eac:	08007ff0 	.word	0x08007ff0
 8006eb0:	08007ff4 	.word	0x08007ff4

08006eb4 <__retarget_lock_init_recursive>:
 8006eb4:	4770      	bx	lr

08006eb6 <__retarget_lock_acquire_recursive>:
 8006eb6:	4770      	bx	lr

08006eb8 <__retarget_lock_release_recursive>:
 8006eb8:	4770      	bx	lr

08006eba <memcpy>:
 8006eba:	440a      	add	r2, r1
 8006ebc:	4291      	cmp	r1, r2
 8006ebe:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006ec2:	d100      	bne.n	8006ec6 <memcpy+0xc>
 8006ec4:	4770      	bx	lr
 8006ec6:	b510      	push	{r4, lr}
 8006ec8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ecc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ed0:	4291      	cmp	r1, r2
 8006ed2:	d1f9      	bne.n	8006ec8 <memcpy+0xe>
 8006ed4:	bd10      	pop	{r4, pc}
	...

08006ed8 <_free_r>:
 8006ed8:	b538      	push	{r3, r4, r5, lr}
 8006eda:	4605      	mov	r5, r0
 8006edc:	2900      	cmp	r1, #0
 8006ede:	d041      	beq.n	8006f64 <_free_r+0x8c>
 8006ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ee4:	1f0c      	subs	r4, r1, #4
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	bfb8      	it	lt
 8006eea:	18e4      	addlt	r4, r4, r3
 8006eec:	f000 f8e0 	bl	80070b0 <__malloc_lock>
 8006ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8006f68 <_free_r+0x90>)
 8006ef2:	6813      	ldr	r3, [r2, #0]
 8006ef4:	b933      	cbnz	r3, 8006f04 <_free_r+0x2c>
 8006ef6:	6063      	str	r3, [r4, #4]
 8006ef8:	6014      	str	r4, [r2, #0]
 8006efa:	4628      	mov	r0, r5
 8006efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f00:	f000 b8dc 	b.w	80070bc <__malloc_unlock>
 8006f04:	42a3      	cmp	r3, r4
 8006f06:	d908      	bls.n	8006f1a <_free_r+0x42>
 8006f08:	6820      	ldr	r0, [r4, #0]
 8006f0a:	1821      	adds	r1, r4, r0
 8006f0c:	428b      	cmp	r3, r1
 8006f0e:	bf01      	itttt	eq
 8006f10:	6819      	ldreq	r1, [r3, #0]
 8006f12:	685b      	ldreq	r3, [r3, #4]
 8006f14:	1809      	addeq	r1, r1, r0
 8006f16:	6021      	streq	r1, [r4, #0]
 8006f18:	e7ed      	b.n	8006ef6 <_free_r+0x1e>
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	b10b      	cbz	r3, 8006f24 <_free_r+0x4c>
 8006f20:	42a3      	cmp	r3, r4
 8006f22:	d9fa      	bls.n	8006f1a <_free_r+0x42>
 8006f24:	6811      	ldr	r1, [r2, #0]
 8006f26:	1850      	adds	r0, r2, r1
 8006f28:	42a0      	cmp	r0, r4
 8006f2a:	d10b      	bne.n	8006f44 <_free_r+0x6c>
 8006f2c:	6820      	ldr	r0, [r4, #0]
 8006f2e:	4401      	add	r1, r0
 8006f30:	1850      	adds	r0, r2, r1
 8006f32:	4283      	cmp	r3, r0
 8006f34:	6011      	str	r1, [r2, #0]
 8006f36:	d1e0      	bne.n	8006efa <_free_r+0x22>
 8006f38:	6818      	ldr	r0, [r3, #0]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	6053      	str	r3, [r2, #4]
 8006f3e:	4408      	add	r0, r1
 8006f40:	6010      	str	r0, [r2, #0]
 8006f42:	e7da      	b.n	8006efa <_free_r+0x22>
 8006f44:	d902      	bls.n	8006f4c <_free_r+0x74>
 8006f46:	230c      	movs	r3, #12
 8006f48:	602b      	str	r3, [r5, #0]
 8006f4a:	e7d6      	b.n	8006efa <_free_r+0x22>
 8006f4c:	6820      	ldr	r0, [r4, #0]
 8006f4e:	1821      	adds	r1, r4, r0
 8006f50:	428b      	cmp	r3, r1
 8006f52:	bf04      	itt	eq
 8006f54:	6819      	ldreq	r1, [r3, #0]
 8006f56:	685b      	ldreq	r3, [r3, #4]
 8006f58:	6063      	str	r3, [r4, #4]
 8006f5a:	bf04      	itt	eq
 8006f5c:	1809      	addeq	r1, r1, r0
 8006f5e:	6021      	streq	r1, [r4, #0]
 8006f60:	6054      	str	r4, [r2, #4]
 8006f62:	e7ca      	b.n	8006efa <_free_r+0x22>
 8006f64:	bd38      	pop	{r3, r4, r5, pc}
 8006f66:	bf00      	nop
 8006f68:	20005794 	.word	0x20005794

08006f6c <sbrk_aligned>:
 8006f6c:	b570      	push	{r4, r5, r6, lr}
 8006f6e:	4e0f      	ldr	r6, [pc, #60]	@ (8006fac <sbrk_aligned+0x40>)
 8006f70:	460c      	mov	r4, r1
 8006f72:	6831      	ldr	r1, [r6, #0]
 8006f74:	4605      	mov	r5, r0
 8006f76:	b911      	cbnz	r1, 8006f7e <sbrk_aligned+0x12>
 8006f78:	f000 fe18 	bl	8007bac <_sbrk_r>
 8006f7c:	6030      	str	r0, [r6, #0]
 8006f7e:	4621      	mov	r1, r4
 8006f80:	4628      	mov	r0, r5
 8006f82:	f000 fe13 	bl	8007bac <_sbrk_r>
 8006f86:	1c43      	adds	r3, r0, #1
 8006f88:	d103      	bne.n	8006f92 <sbrk_aligned+0x26>
 8006f8a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006f8e:	4620      	mov	r0, r4
 8006f90:	bd70      	pop	{r4, r5, r6, pc}
 8006f92:	1cc4      	adds	r4, r0, #3
 8006f94:	f024 0403 	bic.w	r4, r4, #3
 8006f98:	42a0      	cmp	r0, r4
 8006f9a:	d0f8      	beq.n	8006f8e <sbrk_aligned+0x22>
 8006f9c:	1a21      	subs	r1, r4, r0
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	f000 fe04 	bl	8007bac <_sbrk_r>
 8006fa4:	3001      	adds	r0, #1
 8006fa6:	d1f2      	bne.n	8006f8e <sbrk_aligned+0x22>
 8006fa8:	e7ef      	b.n	8006f8a <sbrk_aligned+0x1e>
 8006faa:	bf00      	nop
 8006fac:	20005790 	.word	0x20005790

08006fb0 <_malloc_r>:
 8006fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fb4:	1ccd      	adds	r5, r1, #3
 8006fb6:	f025 0503 	bic.w	r5, r5, #3
 8006fba:	3508      	adds	r5, #8
 8006fbc:	2d0c      	cmp	r5, #12
 8006fbe:	bf38      	it	cc
 8006fc0:	250c      	movcc	r5, #12
 8006fc2:	2d00      	cmp	r5, #0
 8006fc4:	4606      	mov	r6, r0
 8006fc6:	db01      	blt.n	8006fcc <_malloc_r+0x1c>
 8006fc8:	42a9      	cmp	r1, r5
 8006fca:	d904      	bls.n	8006fd6 <_malloc_r+0x26>
 8006fcc:	230c      	movs	r3, #12
 8006fce:	6033      	str	r3, [r6, #0]
 8006fd0:	2000      	movs	r0, #0
 8006fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80070ac <_malloc_r+0xfc>
 8006fda:	f000 f869 	bl	80070b0 <__malloc_lock>
 8006fde:	f8d8 3000 	ldr.w	r3, [r8]
 8006fe2:	461c      	mov	r4, r3
 8006fe4:	bb44      	cbnz	r4, 8007038 <_malloc_r+0x88>
 8006fe6:	4629      	mov	r1, r5
 8006fe8:	4630      	mov	r0, r6
 8006fea:	f7ff ffbf 	bl	8006f6c <sbrk_aligned>
 8006fee:	1c43      	adds	r3, r0, #1
 8006ff0:	4604      	mov	r4, r0
 8006ff2:	d158      	bne.n	80070a6 <_malloc_r+0xf6>
 8006ff4:	f8d8 4000 	ldr.w	r4, [r8]
 8006ff8:	4627      	mov	r7, r4
 8006ffa:	2f00      	cmp	r7, #0
 8006ffc:	d143      	bne.n	8007086 <_malloc_r+0xd6>
 8006ffe:	2c00      	cmp	r4, #0
 8007000:	d04b      	beq.n	800709a <_malloc_r+0xea>
 8007002:	6823      	ldr	r3, [r4, #0]
 8007004:	4639      	mov	r1, r7
 8007006:	4630      	mov	r0, r6
 8007008:	eb04 0903 	add.w	r9, r4, r3
 800700c:	f000 fdce 	bl	8007bac <_sbrk_r>
 8007010:	4581      	cmp	r9, r0
 8007012:	d142      	bne.n	800709a <_malloc_r+0xea>
 8007014:	6821      	ldr	r1, [r4, #0]
 8007016:	1a6d      	subs	r5, r5, r1
 8007018:	4629      	mov	r1, r5
 800701a:	4630      	mov	r0, r6
 800701c:	f7ff ffa6 	bl	8006f6c <sbrk_aligned>
 8007020:	3001      	adds	r0, #1
 8007022:	d03a      	beq.n	800709a <_malloc_r+0xea>
 8007024:	6823      	ldr	r3, [r4, #0]
 8007026:	442b      	add	r3, r5
 8007028:	6023      	str	r3, [r4, #0]
 800702a:	f8d8 3000 	ldr.w	r3, [r8]
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	bb62      	cbnz	r2, 800708c <_malloc_r+0xdc>
 8007032:	f8c8 7000 	str.w	r7, [r8]
 8007036:	e00f      	b.n	8007058 <_malloc_r+0xa8>
 8007038:	6822      	ldr	r2, [r4, #0]
 800703a:	1b52      	subs	r2, r2, r5
 800703c:	d420      	bmi.n	8007080 <_malloc_r+0xd0>
 800703e:	2a0b      	cmp	r2, #11
 8007040:	d917      	bls.n	8007072 <_malloc_r+0xc2>
 8007042:	1961      	adds	r1, r4, r5
 8007044:	42a3      	cmp	r3, r4
 8007046:	6025      	str	r5, [r4, #0]
 8007048:	bf18      	it	ne
 800704a:	6059      	strne	r1, [r3, #4]
 800704c:	6863      	ldr	r3, [r4, #4]
 800704e:	bf08      	it	eq
 8007050:	f8c8 1000 	streq.w	r1, [r8]
 8007054:	5162      	str	r2, [r4, r5]
 8007056:	604b      	str	r3, [r1, #4]
 8007058:	4630      	mov	r0, r6
 800705a:	f000 f82f 	bl	80070bc <__malloc_unlock>
 800705e:	f104 000b 	add.w	r0, r4, #11
 8007062:	1d23      	adds	r3, r4, #4
 8007064:	f020 0007 	bic.w	r0, r0, #7
 8007068:	1ac2      	subs	r2, r0, r3
 800706a:	bf1c      	itt	ne
 800706c:	1a1b      	subne	r3, r3, r0
 800706e:	50a3      	strne	r3, [r4, r2]
 8007070:	e7af      	b.n	8006fd2 <_malloc_r+0x22>
 8007072:	6862      	ldr	r2, [r4, #4]
 8007074:	42a3      	cmp	r3, r4
 8007076:	bf0c      	ite	eq
 8007078:	f8c8 2000 	streq.w	r2, [r8]
 800707c:	605a      	strne	r2, [r3, #4]
 800707e:	e7eb      	b.n	8007058 <_malloc_r+0xa8>
 8007080:	4623      	mov	r3, r4
 8007082:	6864      	ldr	r4, [r4, #4]
 8007084:	e7ae      	b.n	8006fe4 <_malloc_r+0x34>
 8007086:	463c      	mov	r4, r7
 8007088:	687f      	ldr	r7, [r7, #4]
 800708a:	e7b6      	b.n	8006ffa <_malloc_r+0x4a>
 800708c:	461a      	mov	r2, r3
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	42a3      	cmp	r3, r4
 8007092:	d1fb      	bne.n	800708c <_malloc_r+0xdc>
 8007094:	2300      	movs	r3, #0
 8007096:	6053      	str	r3, [r2, #4]
 8007098:	e7de      	b.n	8007058 <_malloc_r+0xa8>
 800709a:	230c      	movs	r3, #12
 800709c:	6033      	str	r3, [r6, #0]
 800709e:	4630      	mov	r0, r6
 80070a0:	f000 f80c 	bl	80070bc <__malloc_unlock>
 80070a4:	e794      	b.n	8006fd0 <_malloc_r+0x20>
 80070a6:	6005      	str	r5, [r0, #0]
 80070a8:	e7d6      	b.n	8007058 <_malloc_r+0xa8>
 80070aa:	bf00      	nop
 80070ac:	20005794 	.word	0x20005794

080070b0 <__malloc_lock>:
 80070b0:	4801      	ldr	r0, [pc, #4]	@ (80070b8 <__malloc_lock+0x8>)
 80070b2:	f7ff bf00 	b.w	8006eb6 <__retarget_lock_acquire_recursive>
 80070b6:	bf00      	nop
 80070b8:	2000578c 	.word	0x2000578c

080070bc <__malloc_unlock>:
 80070bc:	4801      	ldr	r0, [pc, #4]	@ (80070c4 <__malloc_unlock+0x8>)
 80070be:	f7ff befb 	b.w	8006eb8 <__retarget_lock_release_recursive>
 80070c2:	bf00      	nop
 80070c4:	2000578c 	.word	0x2000578c

080070c8 <__ssputs_r>:
 80070c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070cc:	688e      	ldr	r6, [r1, #8]
 80070ce:	461f      	mov	r7, r3
 80070d0:	42be      	cmp	r6, r7
 80070d2:	680b      	ldr	r3, [r1, #0]
 80070d4:	4682      	mov	sl, r0
 80070d6:	460c      	mov	r4, r1
 80070d8:	4690      	mov	r8, r2
 80070da:	d82d      	bhi.n	8007138 <__ssputs_r+0x70>
 80070dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80070e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80070e4:	d026      	beq.n	8007134 <__ssputs_r+0x6c>
 80070e6:	6965      	ldr	r5, [r4, #20]
 80070e8:	6909      	ldr	r1, [r1, #16]
 80070ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070ee:	eba3 0901 	sub.w	r9, r3, r1
 80070f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070f6:	1c7b      	adds	r3, r7, #1
 80070f8:	444b      	add	r3, r9
 80070fa:	106d      	asrs	r5, r5, #1
 80070fc:	429d      	cmp	r5, r3
 80070fe:	bf38      	it	cc
 8007100:	461d      	movcc	r5, r3
 8007102:	0553      	lsls	r3, r2, #21
 8007104:	d527      	bpl.n	8007156 <__ssputs_r+0x8e>
 8007106:	4629      	mov	r1, r5
 8007108:	f7ff ff52 	bl	8006fb0 <_malloc_r>
 800710c:	4606      	mov	r6, r0
 800710e:	b360      	cbz	r0, 800716a <__ssputs_r+0xa2>
 8007110:	6921      	ldr	r1, [r4, #16]
 8007112:	464a      	mov	r2, r9
 8007114:	f7ff fed1 	bl	8006eba <memcpy>
 8007118:	89a3      	ldrh	r3, [r4, #12]
 800711a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800711e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007122:	81a3      	strh	r3, [r4, #12]
 8007124:	6126      	str	r6, [r4, #16]
 8007126:	6165      	str	r5, [r4, #20]
 8007128:	444e      	add	r6, r9
 800712a:	eba5 0509 	sub.w	r5, r5, r9
 800712e:	6026      	str	r6, [r4, #0]
 8007130:	60a5      	str	r5, [r4, #8]
 8007132:	463e      	mov	r6, r7
 8007134:	42be      	cmp	r6, r7
 8007136:	d900      	bls.n	800713a <__ssputs_r+0x72>
 8007138:	463e      	mov	r6, r7
 800713a:	6820      	ldr	r0, [r4, #0]
 800713c:	4632      	mov	r2, r6
 800713e:	4641      	mov	r1, r8
 8007140:	f000 fcf8 	bl	8007b34 <memmove>
 8007144:	68a3      	ldr	r3, [r4, #8]
 8007146:	1b9b      	subs	r3, r3, r6
 8007148:	60a3      	str	r3, [r4, #8]
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	4433      	add	r3, r6
 800714e:	6023      	str	r3, [r4, #0]
 8007150:	2000      	movs	r0, #0
 8007152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007156:	462a      	mov	r2, r5
 8007158:	f000 fd38 	bl	8007bcc <_realloc_r>
 800715c:	4606      	mov	r6, r0
 800715e:	2800      	cmp	r0, #0
 8007160:	d1e0      	bne.n	8007124 <__ssputs_r+0x5c>
 8007162:	6921      	ldr	r1, [r4, #16]
 8007164:	4650      	mov	r0, sl
 8007166:	f7ff feb7 	bl	8006ed8 <_free_r>
 800716a:	230c      	movs	r3, #12
 800716c:	f8ca 3000 	str.w	r3, [sl]
 8007170:	89a3      	ldrh	r3, [r4, #12]
 8007172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007176:	81a3      	strh	r3, [r4, #12]
 8007178:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800717c:	e7e9      	b.n	8007152 <__ssputs_r+0x8a>
	...

08007180 <_svfiprintf_r>:
 8007180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007184:	4698      	mov	r8, r3
 8007186:	898b      	ldrh	r3, [r1, #12]
 8007188:	061b      	lsls	r3, r3, #24
 800718a:	b09d      	sub	sp, #116	@ 0x74
 800718c:	4607      	mov	r7, r0
 800718e:	460d      	mov	r5, r1
 8007190:	4614      	mov	r4, r2
 8007192:	d510      	bpl.n	80071b6 <_svfiprintf_r+0x36>
 8007194:	690b      	ldr	r3, [r1, #16]
 8007196:	b973      	cbnz	r3, 80071b6 <_svfiprintf_r+0x36>
 8007198:	2140      	movs	r1, #64	@ 0x40
 800719a:	f7ff ff09 	bl	8006fb0 <_malloc_r>
 800719e:	6028      	str	r0, [r5, #0]
 80071a0:	6128      	str	r0, [r5, #16]
 80071a2:	b930      	cbnz	r0, 80071b2 <_svfiprintf_r+0x32>
 80071a4:	230c      	movs	r3, #12
 80071a6:	603b      	str	r3, [r7, #0]
 80071a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80071ac:	b01d      	add	sp, #116	@ 0x74
 80071ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b2:	2340      	movs	r3, #64	@ 0x40
 80071b4:	616b      	str	r3, [r5, #20]
 80071b6:	2300      	movs	r3, #0
 80071b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80071ba:	2320      	movs	r3, #32
 80071bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80071c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80071c4:	2330      	movs	r3, #48	@ 0x30
 80071c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007364 <_svfiprintf_r+0x1e4>
 80071ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80071ce:	f04f 0901 	mov.w	r9, #1
 80071d2:	4623      	mov	r3, r4
 80071d4:	469a      	mov	sl, r3
 80071d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071da:	b10a      	cbz	r2, 80071e0 <_svfiprintf_r+0x60>
 80071dc:	2a25      	cmp	r2, #37	@ 0x25
 80071de:	d1f9      	bne.n	80071d4 <_svfiprintf_r+0x54>
 80071e0:	ebba 0b04 	subs.w	fp, sl, r4
 80071e4:	d00b      	beq.n	80071fe <_svfiprintf_r+0x7e>
 80071e6:	465b      	mov	r3, fp
 80071e8:	4622      	mov	r2, r4
 80071ea:	4629      	mov	r1, r5
 80071ec:	4638      	mov	r0, r7
 80071ee:	f7ff ff6b 	bl	80070c8 <__ssputs_r>
 80071f2:	3001      	adds	r0, #1
 80071f4:	f000 80a7 	beq.w	8007346 <_svfiprintf_r+0x1c6>
 80071f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071fa:	445a      	add	r2, fp
 80071fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80071fe:	f89a 3000 	ldrb.w	r3, [sl]
 8007202:	2b00      	cmp	r3, #0
 8007204:	f000 809f 	beq.w	8007346 <_svfiprintf_r+0x1c6>
 8007208:	2300      	movs	r3, #0
 800720a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800720e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007212:	f10a 0a01 	add.w	sl, sl, #1
 8007216:	9304      	str	r3, [sp, #16]
 8007218:	9307      	str	r3, [sp, #28]
 800721a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800721e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007220:	4654      	mov	r4, sl
 8007222:	2205      	movs	r2, #5
 8007224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007228:	484e      	ldr	r0, [pc, #312]	@ (8007364 <_svfiprintf_r+0x1e4>)
 800722a:	f7f8 ffd1 	bl	80001d0 <memchr>
 800722e:	9a04      	ldr	r2, [sp, #16]
 8007230:	b9d8      	cbnz	r0, 800726a <_svfiprintf_r+0xea>
 8007232:	06d0      	lsls	r0, r2, #27
 8007234:	bf44      	itt	mi
 8007236:	2320      	movmi	r3, #32
 8007238:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800723c:	0711      	lsls	r1, r2, #28
 800723e:	bf44      	itt	mi
 8007240:	232b      	movmi	r3, #43	@ 0x2b
 8007242:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007246:	f89a 3000 	ldrb.w	r3, [sl]
 800724a:	2b2a      	cmp	r3, #42	@ 0x2a
 800724c:	d015      	beq.n	800727a <_svfiprintf_r+0xfa>
 800724e:	9a07      	ldr	r2, [sp, #28]
 8007250:	4654      	mov	r4, sl
 8007252:	2000      	movs	r0, #0
 8007254:	f04f 0c0a 	mov.w	ip, #10
 8007258:	4621      	mov	r1, r4
 800725a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800725e:	3b30      	subs	r3, #48	@ 0x30
 8007260:	2b09      	cmp	r3, #9
 8007262:	d94b      	bls.n	80072fc <_svfiprintf_r+0x17c>
 8007264:	b1b0      	cbz	r0, 8007294 <_svfiprintf_r+0x114>
 8007266:	9207      	str	r2, [sp, #28]
 8007268:	e014      	b.n	8007294 <_svfiprintf_r+0x114>
 800726a:	eba0 0308 	sub.w	r3, r0, r8
 800726e:	fa09 f303 	lsl.w	r3, r9, r3
 8007272:	4313      	orrs	r3, r2
 8007274:	9304      	str	r3, [sp, #16]
 8007276:	46a2      	mov	sl, r4
 8007278:	e7d2      	b.n	8007220 <_svfiprintf_r+0xa0>
 800727a:	9b03      	ldr	r3, [sp, #12]
 800727c:	1d19      	adds	r1, r3, #4
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	9103      	str	r1, [sp, #12]
 8007282:	2b00      	cmp	r3, #0
 8007284:	bfbb      	ittet	lt
 8007286:	425b      	neglt	r3, r3
 8007288:	f042 0202 	orrlt.w	r2, r2, #2
 800728c:	9307      	strge	r3, [sp, #28]
 800728e:	9307      	strlt	r3, [sp, #28]
 8007290:	bfb8      	it	lt
 8007292:	9204      	strlt	r2, [sp, #16]
 8007294:	7823      	ldrb	r3, [r4, #0]
 8007296:	2b2e      	cmp	r3, #46	@ 0x2e
 8007298:	d10a      	bne.n	80072b0 <_svfiprintf_r+0x130>
 800729a:	7863      	ldrb	r3, [r4, #1]
 800729c:	2b2a      	cmp	r3, #42	@ 0x2a
 800729e:	d132      	bne.n	8007306 <_svfiprintf_r+0x186>
 80072a0:	9b03      	ldr	r3, [sp, #12]
 80072a2:	1d1a      	adds	r2, r3, #4
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	9203      	str	r2, [sp, #12]
 80072a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072ac:	3402      	adds	r4, #2
 80072ae:	9305      	str	r3, [sp, #20]
 80072b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007374 <_svfiprintf_r+0x1f4>
 80072b4:	7821      	ldrb	r1, [r4, #0]
 80072b6:	2203      	movs	r2, #3
 80072b8:	4650      	mov	r0, sl
 80072ba:	f7f8 ff89 	bl	80001d0 <memchr>
 80072be:	b138      	cbz	r0, 80072d0 <_svfiprintf_r+0x150>
 80072c0:	9b04      	ldr	r3, [sp, #16]
 80072c2:	eba0 000a 	sub.w	r0, r0, sl
 80072c6:	2240      	movs	r2, #64	@ 0x40
 80072c8:	4082      	lsls	r2, r0
 80072ca:	4313      	orrs	r3, r2
 80072cc:	3401      	adds	r4, #1
 80072ce:	9304      	str	r3, [sp, #16]
 80072d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072d4:	4824      	ldr	r0, [pc, #144]	@ (8007368 <_svfiprintf_r+0x1e8>)
 80072d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072da:	2206      	movs	r2, #6
 80072dc:	f7f8 ff78 	bl	80001d0 <memchr>
 80072e0:	2800      	cmp	r0, #0
 80072e2:	d036      	beq.n	8007352 <_svfiprintf_r+0x1d2>
 80072e4:	4b21      	ldr	r3, [pc, #132]	@ (800736c <_svfiprintf_r+0x1ec>)
 80072e6:	bb1b      	cbnz	r3, 8007330 <_svfiprintf_r+0x1b0>
 80072e8:	9b03      	ldr	r3, [sp, #12]
 80072ea:	3307      	adds	r3, #7
 80072ec:	f023 0307 	bic.w	r3, r3, #7
 80072f0:	3308      	adds	r3, #8
 80072f2:	9303      	str	r3, [sp, #12]
 80072f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072f6:	4433      	add	r3, r6
 80072f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80072fa:	e76a      	b.n	80071d2 <_svfiprintf_r+0x52>
 80072fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007300:	460c      	mov	r4, r1
 8007302:	2001      	movs	r0, #1
 8007304:	e7a8      	b.n	8007258 <_svfiprintf_r+0xd8>
 8007306:	2300      	movs	r3, #0
 8007308:	3401      	adds	r4, #1
 800730a:	9305      	str	r3, [sp, #20]
 800730c:	4619      	mov	r1, r3
 800730e:	f04f 0c0a 	mov.w	ip, #10
 8007312:	4620      	mov	r0, r4
 8007314:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007318:	3a30      	subs	r2, #48	@ 0x30
 800731a:	2a09      	cmp	r2, #9
 800731c:	d903      	bls.n	8007326 <_svfiprintf_r+0x1a6>
 800731e:	2b00      	cmp	r3, #0
 8007320:	d0c6      	beq.n	80072b0 <_svfiprintf_r+0x130>
 8007322:	9105      	str	r1, [sp, #20]
 8007324:	e7c4      	b.n	80072b0 <_svfiprintf_r+0x130>
 8007326:	fb0c 2101 	mla	r1, ip, r1, r2
 800732a:	4604      	mov	r4, r0
 800732c:	2301      	movs	r3, #1
 800732e:	e7f0      	b.n	8007312 <_svfiprintf_r+0x192>
 8007330:	ab03      	add	r3, sp, #12
 8007332:	9300      	str	r3, [sp, #0]
 8007334:	462a      	mov	r2, r5
 8007336:	4b0e      	ldr	r3, [pc, #56]	@ (8007370 <_svfiprintf_r+0x1f0>)
 8007338:	a904      	add	r1, sp, #16
 800733a:	4638      	mov	r0, r7
 800733c:	f3af 8000 	nop.w
 8007340:	1c42      	adds	r2, r0, #1
 8007342:	4606      	mov	r6, r0
 8007344:	d1d6      	bne.n	80072f4 <_svfiprintf_r+0x174>
 8007346:	89ab      	ldrh	r3, [r5, #12]
 8007348:	065b      	lsls	r3, r3, #25
 800734a:	f53f af2d 	bmi.w	80071a8 <_svfiprintf_r+0x28>
 800734e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007350:	e72c      	b.n	80071ac <_svfiprintf_r+0x2c>
 8007352:	ab03      	add	r3, sp, #12
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	462a      	mov	r2, r5
 8007358:	4b05      	ldr	r3, [pc, #20]	@ (8007370 <_svfiprintf_r+0x1f0>)
 800735a:	a904      	add	r1, sp, #16
 800735c:	4638      	mov	r0, r7
 800735e:	f000 f9bb 	bl	80076d8 <_printf_i>
 8007362:	e7ed      	b.n	8007340 <_svfiprintf_r+0x1c0>
 8007364:	08007fb5 	.word	0x08007fb5
 8007368:	08007fbf 	.word	0x08007fbf
 800736c:	00000000 	.word	0x00000000
 8007370:	080070c9 	.word	0x080070c9
 8007374:	08007fbb 	.word	0x08007fbb

08007378 <__sfputc_r>:
 8007378:	6893      	ldr	r3, [r2, #8]
 800737a:	3b01      	subs	r3, #1
 800737c:	2b00      	cmp	r3, #0
 800737e:	b410      	push	{r4}
 8007380:	6093      	str	r3, [r2, #8]
 8007382:	da08      	bge.n	8007396 <__sfputc_r+0x1e>
 8007384:	6994      	ldr	r4, [r2, #24]
 8007386:	42a3      	cmp	r3, r4
 8007388:	db01      	blt.n	800738e <__sfputc_r+0x16>
 800738a:	290a      	cmp	r1, #10
 800738c:	d103      	bne.n	8007396 <__sfputc_r+0x1e>
 800738e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007392:	f7ff bc82 	b.w	8006c9a <__swbuf_r>
 8007396:	6813      	ldr	r3, [r2, #0]
 8007398:	1c58      	adds	r0, r3, #1
 800739a:	6010      	str	r0, [r2, #0]
 800739c:	7019      	strb	r1, [r3, #0]
 800739e:	4608      	mov	r0, r1
 80073a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <__sfputs_r>:
 80073a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a8:	4606      	mov	r6, r0
 80073aa:	460f      	mov	r7, r1
 80073ac:	4614      	mov	r4, r2
 80073ae:	18d5      	adds	r5, r2, r3
 80073b0:	42ac      	cmp	r4, r5
 80073b2:	d101      	bne.n	80073b8 <__sfputs_r+0x12>
 80073b4:	2000      	movs	r0, #0
 80073b6:	e007      	b.n	80073c8 <__sfputs_r+0x22>
 80073b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073bc:	463a      	mov	r2, r7
 80073be:	4630      	mov	r0, r6
 80073c0:	f7ff ffda 	bl	8007378 <__sfputc_r>
 80073c4:	1c43      	adds	r3, r0, #1
 80073c6:	d1f3      	bne.n	80073b0 <__sfputs_r+0xa>
 80073c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080073cc <_vfiprintf_r>:
 80073cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d0:	460d      	mov	r5, r1
 80073d2:	b09d      	sub	sp, #116	@ 0x74
 80073d4:	4614      	mov	r4, r2
 80073d6:	4698      	mov	r8, r3
 80073d8:	4606      	mov	r6, r0
 80073da:	b118      	cbz	r0, 80073e4 <_vfiprintf_r+0x18>
 80073dc:	6a03      	ldr	r3, [r0, #32]
 80073de:	b90b      	cbnz	r3, 80073e4 <_vfiprintf_r+0x18>
 80073e0:	f7ff fb3e 	bl	8006a60 <__sinit>
 80073e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073e6:	07d9      	lsls	r1, r3, #31
 80073e8:	d405      	bmi.n	80073f6 <_vfiprintf_r+0x2a>
 80073ea:	89ab      	ldrh	r3, [r5, #12]
 80073ec:	059a      	lsls	r2, r3, #22
 80073ee:	d402      	bmi.n	80073f6 <_vfiprintf_r+0x2a>
 80073f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073f2:	f7ff fd60 	bl	8006eb6 <__retarget_lock_acquire_recursive>
 80073f6:	89ab      	ldrh	r3, [r5, #12]
 80073f8:	071b      	lsls	r3, r3, #28
 80073fa:	d501      	bpl.n	8007400 <_vfiprintf_r+0x34>
 80073fc:	692b      	ldr	r3, [r5, #16]
 80073fe:	b99b      	cbnz	r3, 8007428 <_vfiprintf_r+0x5c>
 8007400:	4629      	mov	r1, r5
 8007402:	4630      	mov	r0, r6
 8007404:	f7ff fc88 	bl	8006d18 <__swsetup_r>
 8007408:	b170      	cbz	r0, 8007428 <_vfiprintf_r+0x5c>
 800740a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800740c:	07dc      	lsls	r4, r3, #31
 800740e:	d504      	bpl.n	800741a <_vfiprintf_r+0x4e>
 8007410:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007414:	b01d      	add	sp, #116	@ 0x74
 8007416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800741a:	89ab      	ldrh	r3, [r5, #12]
 800741c:	0598      	lsls	r0, r3, #22
 800741e:	d4f7      	bmi.n	8007410 <_vfiprintf_r+0x44>
 8007420:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007422:	f7ff fd49 	bl	8006eb8 <__retarget_lock_release_recursive>
 8007426:	e7f3      	b.n	8007410 <_vfiprintf_r+0x44>
 8007428:	2300      	movs	r3, #0
 800742a:	9309      	str	r3, [sp, #36]	@ 0x24
 800742c:	2320      	movs	r3, #32
 800742e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007432:	f8cd 800c 	str.w	r8, [sp, #12]
 8007436:	2330      	movs	r3, #48	@ 0x30
 8007438:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80075e8 <_vfiprintf_r+0x21c>
 800743c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007440:	f04f 0901 	mov.w	r9, #1
 8007444:	4623      	mov	r3, r4
 8007446:	469a      	mov	sl, r3
 8007448:	f813 2b01 	ldrb.w	r2, [r3], #1
 800744c:	b10a      	cbz	r2, 8007452 <_vfiprintf_r+0x86>
 800744e:	2a25      	cmp	r2, #37	@ 0x25
 8007450:	d1f9      	bne.n	8007446 <_vfiprintf_r+0x7a>
 8007452:	ebba 0b04 	subs.w	fp, sl, r4
 8007456:	d00b      	beq.n	8007470 <_vfiprintf_r+0xa4>
 8007458:	465b      	mov	r3, fp
 800745a:	4622      	mov	r2, r4
 800745c:	4629      	mov	r1, r5
 800745e:	4630      	mov	r0, r6
 8007460:	f7ff ffa1 	bl	80073a6 <__sfputs_r>
 8007464:	3001      	adds	r0, #1
 8007466:	f000 80a7 	beq.w	80075b8 <_vfiprintf_r+0x1ec>
 800746a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800746c:	445a      	add	r2, fp
 800746e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007470:	f89a 3000 	ldrb.w	r3, [sl]
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 809f 	beq.w	80075b8 <_vfiprintf_r+0x1ec>
 800747a:	2300      	movs	r3, #0
 800747c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007480:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007484:	f10a 0a01 	add.w	sl, sl, #1
 8007488:	9304      	str	r3, [sp, #16]
 800748a:	9307      	str	r3, [sp, #28]
 800748c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007490:	931a      	str	r3, [sp, #104]	@ 0x68
 8007492:	4654      	mov	r4, sl
 8007494:	2205      	movs	r2, #5
 8007496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800749a:	4853      	ldr	r0, [pc, #332]	@ (80075e8 <_vfiprintf_r+0x21c>)
 800749c:	f7f8 fe98 	bl	80001d0 <memchr>
 80074a0:	9a04      	ldr	r2, [sp, #16]
 80074a2:	b9d8      	cbnz	r0, 80074dc <_vfiprintf_r+0x110>
 80074a4:	06d1      	lsls	r1, r2, #27
 80074a6:	bf44      	itt	mi
 80074a8:	2320      	movmi	r3, #32
 80074aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074ae:	0713      	lsls	r3, r2, #28
 80074b0:	bf44      	itt	mi
 80074b2:	232b      	movmi	r3, #43	@ 0x2b
 80074b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074b8:	f89a 3000 	ldrb.w	r3, [sl]
 80074bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80074be:	d015      	beq.n	80074ec <_vfiprintf_r+0x120>
 80074c0:	9a07      	ldr	r2, [sp, #28]
 80074c2:	4654      	mov	r4, sl
 80074c4:	2000      	movs	r0, #0
 80074c6:	f04f 0c0a 	mov.w	ip, #10
 80074ca:	4621      	mov	r1, r4
 80074cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074d0:	3b30      	subs	r3, #48	@ 0x30
 80074d2:	2b09      	cmp	r3, #9
 80074d4:	d94b      	bls.n	800756e <_vfiprintf_r+0x1a2>
 80074d6:	b1b0      	cbz	r0, 8007506 <_vfiprintf_r+0x13a>
 80074d8:	9207      	str	r2, [sp, #28]
 80074da:	e014      	b.n	8007506 <_vfiprintf_r+0x13a>
 80074dc:	eba0 0308 	sub.w	r3, r0, r8
 80074e0:	fa09 f303 	lsl.w	r3, r9, r3
 80074e4:	4313      	orrs	r3, r2
 80074e6:	9304      	str	r3, [sp, #16]
 80074e8:	46a2      	mov	sl, r4
 80074ea:	e7d2      	b.n	8007492 <_vfiprintf_r+0xc6>
 80074ec:	9b03      	ldr	r3, [sp, #12]
 80074ee:	1d19      	adds	r1, r3, #4
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	9103      	str	r1, [sp, #12]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	bfbb      	ittet	lt
 80074f8:	425b      	neglt	r3, r3
 80074fa:	f042 0202 	orrlt.w	r2, r2, #2
 80074fe:	9307      	strge	r3, [sp, #28]
 8007500:	9307      	strlt	r3, [sp, #28]
 8007502:	bfb8      	it	lt
 8007504:	9204      	strlt	r2, [sp, #16]
 8007506:	7823      	ldrb	r3, [r4, #0]
 8007508:	2b2e      	cmp	r3, #46	@ 0x2e
 800750a:	d10a      	bne.n	8007522 <_vfiprintf_r+0x156>
 800750c:	7863      	ldrb	r3, [r4, #1]
 800750e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007510:	d132      	bne.n	8007578 <_vfiprintf_r+0x1ac>
 8007512:	9b03      	ldr	r3, [sp, #12]
 8007514:	1d1a      	adds	r2, r3, #4
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	9203      	str	r2, [sp, #12]
 800751a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800751e:	3402      	adds	r4, #2
 8007520:	9305      	str	r3, [sp, #20]
 8007522:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80075f8 <_vfiprintf_r+0x22c>
 8007526:	7821      	ldrb	r1, [r4, #0]
 8007528:	2203      	movs	r2, #3
 800752a:	4650      	mov	r0, sl
 800752c:	f7f8 fe50 	bl	80001d0 <memchr>
 8007530:	b138      	cbz	r0, 8007542 <_vfiprintf_r+0x176>
 8007532:	9b04      	ldr	r3, [sp, #16]
 8007534:	eba0 000a 	sub.w	r0, r0, sl
 8007538:	2240      	movs	r2, #64	@ 0x40
 800753a:	4082      	lsls	r2, r0
 800753c:	4313      	orrs	r3, r2
 800753e:	3401      	adds	r4, #1
 8007540:	9304      	str	r3, [sp, #16]
 8007542:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007546:	4829      	ldr	r0, [pc, #164]	@ (80075ec <_vfiprintf_r+0x220>)
 8007548:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800754c:	2206      	movs	r2, #6
 800754e:	f7f8 fe3f 	bl	80001d0 <memchr>
 8007552:	2800      	cmp	r0, #0
 8007554:	d03f      	beq.n	80075d6 <_vfiprintf_r+0x20a>
 8007556:	4b26      	ldr	r3, [pc, #152]	@ (80075f0 <_vfiprintf_r+0x224>)
 8007558:	bb1b      	cbnz	r3, 80075a2 <_vfiprintf_r+0x1d6>
 800755a:	9b03      	ldr	r3, [sp, #12]
 800755c:	3307      	adds	r3, #7
 800755e:	f023 0307 	bic.w	r3, r3, #7
 8007562:	3308      	adds	r3, #8
 8007564:	9303      	str	r3, [sp, #12]
 8007566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007568:	443b      	add	r3, r7
 800756a:	9309      	str	r3, [sp, #36]	@ 0x24
 800756c:	e76a      	b.n	8007444 <_vfiprintf_r+0x78>
 800756e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007572:	460c      	mov	r4, r1
 8007574:	2001      	movs	r0, #1
 8007576:	e7a8      	b.n	80074ca <_vfiprintf_r+0xfe>
 8007578:	2300      	movs	r3, #0
 800757a:	3401      	adds	r4, #1
 800757c:	9305      	str	r3, [sp, #20]
 800757e:	4619      	mov	r1, r3
 8007580:	f04f 0c0a 	mov.w	ip, #10
 8007584:	4620      	mov	r0, r4
 8007586:	f810 2b01 	ldrb.w	r2, [r0], #1
 800758a:	3a30      	subs	r2, #48	@ 0x30
 800758c:	2a09      	cmp	r2, #9
 800758e:	d903      	bls.n	8007598 <_vfiprintf_r+0x1cc>
 8007590:	2b00      	cmp	r3, #0
 8007592:	d0c6      	beq.n	8007522 <_vfiprintf_r+0x156>
 8007594:	9105      	str	r1, [sp, #20]
 8007596:	e7c4      	b.n	8007522 <_vfiprintf_r+0x156>
 8007598:	fb0c 2101 	mla	r1, ip, r1, r2
 800759c:	4604      	mov	r4, r0
 800759e:	2301      	movs	r3, #1
 80075a0:	e7f0      	b.n	8007584 <_vfiprintf_r+0x1b8>
 80075a2:	ab03      	add	r3, sp, #12
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	462a      	mov	r2, r5
 80075a8:	4b12      	ldr	r3, [pc, #72]	@ (80075f4 <_vfiprintf_r+0x228>)
 80075aa:	a904      	add	r1, sp, #16
 80075ac:	4630      	mov	r0, r6
 80075ae:	f3af 8000 	nop.w
 80075b2:	4607      	mov	r7, r0
 80075b4:	1c78      	adds	r0, r7, #1
 80075b6:	d1d6      	bne.n	8007566 <_vfiprintf_r+0x19a>
 80075b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075ba:	07d9      	lsls	r1, r3, #31
 80075bc:	d405      	bmi.n	80075ca <_vfiprintf_r+0x1fe>
 80075be:	89ab      	ldrh	r3, [r5, #12]
 80075c0:	059a      	lsls	r2, r3, #22
 80075c2:	d402      	bmi.n	80075ca <_vfiprintf_r+0x1fe>
 80075c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075c6:	f7ff fc77 	bl	8006eb8 <__retarget_lock_release_recursive>
 80075ca:	89ab      	ldrh	r3, [r5, #12]
 80075cc:	065b      	lsls	r3, r3, #25
 80075ce:	f53f af1f 	bmi.w	8007410 <_vfiprintf_r+0x44>
 80075d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075d4:	e71e      	b.n	8007414 <_vfiprintf_r+0x48>
 80075d6:	ab03      	add	r3, sp, #12
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	462a      	mov	r2, r5
 80075dc:	4b05      	ldr	r3, [pc, #20]	@ (80075f4 <_vfiprintf_r+0x228>)
 80075de:	a904      	add	r1, sp, #16
 80075e0:	4630      	mov	r0, r6
 80075e2:	f000 f879 	bl	80076d8 <_printf_i>
 80075e6:	e7e4      	b.n	80075b2 <_vfiprintf_r+0x1e6>
 80075e8:	08007fb5 	.word	0x08007fb5
 80075ec:	08007fbf 	.word	0x08007fbf
 80075f0:	00000000 	.word	0x00000000
 80075f4:	080073a7 	.word	0x080073a7
 80075f8:	08007fbb 	.word	0x08007fbb

080075fc <_printf_common>:
 80075fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007600:	4616      	mov	r6, r2
 8007602:	4698      	mov	r8, r3
 8007604:	688a      	ldr	r2, [r1, #8]
 8007606:	690b      	ldr	r3, [r1, #16]
 8007608:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800760c:	4293      	cmp	r3, r2
 800760e:	bfb8      	it	lt
 8007610:	4613      	movlt	r3, r2
 8007612:	6033      	str	r3, [r6, #0]
 8007614:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007618:	4607      	mov	r7, r0
 800761a:	460c      	mov	r4, r1
 800761c:	b10a      	cbz	r2, 8007622 <_printf_common+0x26>
 800761e:	3301      	adds	r3, #1
 8007620:	6033      	str	r3, [r6, #0]
 8007622:	6823      	ldr	r3, [r4, #0]
 8007624:	0699      	lsls	r1, r3, #26
 8007626:	bf42      	ittt	mi
 8007628:	6833      	ldrmi	r3, [r6, #0]
 800762a:	3302      	addmi	r3, #2
 800762c:	6033      	strmi	r3, [r6, #0]
 800762e:	6825      	ldr	r5, [r4, #0]
 8007630:	f015 0506 	ands.w	r5, r5, #6
 8007634:	d106      	bne.n	8007644 <_printf_common+0x48>
 8007636:	f104 0a19 	add.w	sl, r4, #25
 800763a:	68e3      	ldr	r3, [r4, #12]
 800763c:	6832      	ldr	r2, [r6, #0]
 800763e:	1a9b      	subs	r3, r3, r2
 8007640:	42ab      	cmp	r3, r5
 8007642:	dc26      	bgt.n	8007692 <_printf_common+0x96>
 8007644:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007648:	6822      	ldr	r2, [r4, #0]
 800764a:	3b00      	subs	r3, #0
 800764c:	bf18      	it	ne
 800764e:	2301      	movne	r3, #1
 8007650:	0692      	lsls	r2, r2, #26
 8007652:	d42b      	bmi.n	80076ac <_printf_common+0xb0>
 8007654:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007658:	4641      	mov	r1, r8
 800765a:	4638      	mov	r0, r7
 800765c:	47c8      	blx	r9
 800765e:	3001      	adds	r0, #1
 8007660:	d01e      	beq.n	80076a0 <_printf_common+0xa4>
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	6922      	ldr	r2, [r4, #16]
 8007666:	f003 0306 	and.w	r3, r3, #6
 800766a:	2b04      	cmp	r3, #4
 800766c:	bf02      	ittt	eq
 800766e:	68e5      	ldreq	r5, [r4, #12]
 8007670:	6833      	ldreq	r3, [r6, #0]
 8007672:	1aed      	subeq	r5, r5, r3
 8007674:	68a3      	ldr	r3, [r4, #8]
 8007676:	bf0c      	ite	eq
 8007678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800767c:	2500      	movne	r5, #0
 800767e:	4293      	cmp	r3, r2
 8007680:	bfc4      	itt	gt
 8007682:	1a9b      	subgt	r3, r3, r2
 8007684:	18ed      	addgt	r5, r5, r3
 8007686:	2600      	movs	r6, #0
 8007688:	341a      	adds	r4, #26
 800768a:	42b5      	cmp	r5, r6
 800768c:	d11a      	bne.n	80076c4 <_printf_common+0xc8>
 800768e:	2000      	movs	r0, #0
 8007690:	e008      	b.n	80076a4 <_printf_common+0xa8>
 8007692:	2301      	movs	r3, #1
 8007694:	4652      	mov	r2, sl
 8007696:	4641      	mov	r1, r8
 8007698:	4638      	mov	r0, r7
 800769a:	47c8      	blx	r9
 800769c:	3001      	adds	r0, #1
 800769e:	d103      	bne.n	80076a8 <_printf_common+0xac>
 80076a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076a8:	3501      	adds	r5, #1
 80076aa:	e7c6      	b.n	800763a <_printf_common+0x3e>
 80076ac:	18e1      	adds	r1, r4, r3
 80076ae:	1c5a      	adds	r2, r3, #1
 80076b0:	2030      	movs	r0, #48	@ 0x30
 80076b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80076b6:	4422      	add	r2, r4
 80076b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80076bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80076c0:	3302      	adds	r3, #2
 80076c2:	e7c7      	b.n	8007654 <_printf_common+0x58>
 80076c4:	2301      	movs	r3, #1
 80076c6:	4622      	mov	r2, r4
 80076c8:	4641      	mov	r1, r8
 80076ca:	4638      	mov	r0, r7
 80076cc:	47c8      	blx	r9
 80076ce:	3001      	adds	r0, #1
 80076d0:	d0e6      	beq.n	80076a0 <_printf_common+0xa4>
 80076d2:	3601      	adds	r6, #1
 80076d4:	e7d9      	b.n	800768a <_printf_common+0x8e>
	...

080076d8 <_printf_i>:
 80076d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076dc:	7e0f      	ldrb	r7, [r1, #24]
 80076de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80076e0:	2f78      	cmp	r7, #120	@ 0x78
 80076e2:	4691      	mov	r9, r2
 80076e4:	4680      	mov	r8, r0
 80076e6:	460c      	mov	r4, r1
 80076e8:	469a      	mov	sl, r3
 80076ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80076ee:	d807      	bhi.n	8007700 <_printf_i+0x28>
 80076f0:	2f62      	cmp	r7, #98	@ 0x62
 80076f2:	d80a      	bhi.n	800770a <_printf_i+0x32>
 80076f4:	2f00      	cmp	r7, #0
 80076f6:	f000 80d2 	beq.w	800789e <_printf_i+0x1c6>
 80076fa:	2f58      	cmp	r7, #88	@ 0x58
 80076fc:	f000 80b9 	beq.w	8007872 <_printf_i+0x19a>
 8007700:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007704:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007708:	e03a      	b.n	8007780 <_printf_i+0xa8>
 800770a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800770e:	2b15      	cmp	r3, #21
 8007710:	d8f6      	bhi.n	8007700 <_printf_i+0x28>
 8007712:	a101      	add	r1, pc, #4	@ (adr r1, 8007718 <_printf_i+0x40>)
 8007714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007718:	08007771 	.word	0x08007771
 800771c:	08007785 	.word	0x08007785
 8007720:	08007701 	.word	0x08007701
 8007724:	08007701 	.word	0x08007701
 8007728:	08007701 	.word	0x08007701
 800772c:	08007701 	.word	0x08007701
 8007730:	08007785 	.word	0x08007785
 8007734:	08007701 	.word	0x08007701
 8007738:	08007701 	.word	0x08007701
 800773c:	08007701 	.word	0x08007701
 8007740:	08007701 	.word	0x08007701
 8007744:	08007885 	.word	0x08007885
 8007748:	080077af 	.word	0x080077af
 800774c:	0800783f 	.word	0x0800783f
 8007750:	08007701 	.word	0x08007701
 8007754:	08007701 	.word	0x08007701
 8007758:	080078a7 	.word	0x080078a7
 800775c:	08007701 	.word	0x08007701
 8007760:	080077af 	.word	0x080077af
 8007764:	08007701 	.word	0x08007701
 8007768:	08007701 	.word	0x08007701
 800776c:	08007847 	.word	0x08007847
 8007770:	6833      	ldr	r3, [r6, #0]
 8007772:	1d1a      	adds	r2, r3, #4
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	6032      	str	r2, [r6, #0]
 8007778:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800777c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007780:	2301      	movs	r3, #1
 8007782:	e09d      	b.n	80078c0 <_printf_i+0x1e8>
 8007784:	6833      	ldr	r3, [r6, #0]
 8007786:	6820      	ldr	r0, [r4, #0]
 8007788:	1d19      	adds	r1, r3, #4
 800778a:	6031      	str	r1, [r6, #0]
 800778c:	0606      	lsls	r6, r0, #24
 800778e:	d501      	bpl.n	8007794 <_printf_i+0xbc>
 8007790:	681d      	ldr	r5, [r3, #0]
 8007792:	e003      	b.n	800779c <_printf_i+0xc4>
 8007794:	0645      	lsls	r5, r0, #25
 8007796:	d5fb      	bpl.n	8007790 <_printf_i+0xb8>
 8007798:	f9b3 5000 	ldrsh.w	r5, [r3]
 800779c:	2d00      	cmp	r5, #0
 800779e:	da03      	bge.n	80077a8 <_printf_i+0xd0>
 80077a0:	232d      	movs	r3, #45	@ 0x2d
 80077a2:	426d      	negs	r5, r5
 80077a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077a8:	4859      	ldr	r0, [pc, #356]	@ (8007910 <_printf_i+0x238>)
 80077aa:	230a      	movs	r3, #10
 80077ac:	e011      	b.n	80077d2 <_printf_i+0xfa>
 80077ae:	6821      	ldr	r1, [r4, #0]
 80077b0:	6833      	ldr	r3, [r6, #0]
 80077b2:	0608      	lsls	r0, r1, #24
 80077b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80077b8:	d402      	bmi.n	80077c0 <_printf_i+0xe8>
 80077ba:	0649      	lsls	r1, r1, #25
 80077bc:	bf48      	it	mi
 80077be:	b2ad      	uxthmi	r5, r5
 80077c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80077c2:	4853      	ldr	r0, [pc, #332]	@ (8007910 <_printf_i+0x238>)
 80077c4:	6033      	str	r3, [r6, #0]
 80077c6:	bf14      	ite	ne
 80077c8:	230a      	movne	r3, #10
 80077ca:	2308      	moveq	r3, #8
 80077cc:	2100      	movs	r1, #0
 80077ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80077d2:	6866      	ldr	r6, [r4, #4]
 80077d4:	60a6      	str	r6, [r4, #8]
 80077d6:	2e00      	cmp	r6, #0
 80077d8:	bfa2      	ittt	ge
 80077da:	6821      	ldrge	r1, [r4, #0]
 80077dc:	f021 0104 	bicge.w	r1, r1, #4
 80077e0:	6021      	strge	r1, [r4, #0]
 80077e2:	b90d      	cbnz	r5, 80077e8 <_printf_i+0x110>
 80077e4:	2e00      	cmp	r6, #0
 80077e6:	d04b      	beq.n	8007880 <_printf_i+0x1a8>
 80077e8:	4616      	mov	r6, r2
 80077ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80077ee:	fb03 5711 	mls	r7, r3, r1, r5
 80077f2:	5dc7      	ldrb	r7, [r0, r7]
 80077f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077f8:	462f      	mov	r7, r5
 80077fa:	42bb      	cmp	r3, r7
 80077fc:	460d      	mov	r5, r1
 80077fe:	d9f4      	bls.n	80077ea <_printf_i+0x112>
 8007800:	2b08      	cmp	r3, #8
 8007802:	d10b      	bne.n	800781c <_printf_i+0x144>
 8007804:	6823      	ldr	r3, [r4, #0]
 8007806:	07df      	lsls	r7, r3, #31
 8007808:	d508      	bpl.n	800781c <_printf_i+0x144>
 800780a:	6923      	ldr	r3, [r4, #16]
 800780c:	6861      	ldr	r1, [r4, #4]
 800780e:	4299      	cmp	r1, r3
 8007810:	bfde      	ittt	le
 8007812:	2330      	movle	r3, #48	@ 0x30
 8007814:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007818:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800781c:	1b92      	subs	r2, r2, r6
 800781e:	6122      	str	r2, [r4, #16]
 8007820:	f8cd a000 	str.w	sl, [sp]
 8007824:	464b      	mov	r3, r9
 8007826:	aa03      	add	r2, sp, #12
 8007828:	4621      	mov	r1, r4
 800782a:	4640      	mov	r0, r8
 800782c:	f7ff fee6 	bl	80075fc <_printf_common>
 8007830:	3001      	adds	r0, #1
 8007832:	d14a      	bne.n	80078ca <_printf_i+0x1f2>
 8007834:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007838:	b004      	add	sp, #16
 800783a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800783e:	6823      	ldr	r3, [r4, #0]
 8007840:	f043 0320 	orr.w	r3, r3, #32
 8007844:	6023      	str	r3, [r4, #0]
 8007846:	4833      	ldr	r0, [pc, #204]	@ (8007914 <_printf_i+0x23c>)
 8007848:	2778      	movs	r7, #120	@ 0x78
 800784a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800784e:	6823      	ldr	r3, [r4, #0]
 8007850:	6831      	ldr	r1, [r6, #0]
 8007852:	061f      	lsls	r7, r3, #24
 8007854:	f851 5b04 	ldr.w	r5, [r1], #4
 8007858:	d402      	bmi.n	8007860 <_printf_i+0x188>
 800785a:	065f      	lsls	r7, r3, #25
 800785c:	bf48      	it	mi
 800785e:	b2ad      	uxthmi	r5, r5
 8007860:	6031      	str	r1, [r6, #0]
 8007862:	07d9      	lsls	r1, r3, #31
 8007864:	bf44      	itt	mi
 8007866:	f043 0320 	orrmi.w	r3, r3, #32
 800786a:	6023      	strmi	r3, [r4, #0]
 800786c:	b11d      	cbz	r5, 8007876 <_printf_i+0x19e>
 800786e:	2310      	movs	r3, #16
 8007870:	e7ac      	b.n	80077cc <_printf_i+0xf4>
 8007872:	4827      	ldr	r0, [pc, #156]	@ (8007910 <_printf_i+0x238>)
 8007874:	e7e9      	b.n	800784a <_printf_i+0x172>
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	f023 0320 	bic.w	r3, r3, #32
 800787c:	6023      	str	r3, [r4, #0]
 800787e:	e7f6      	b.n	800786e <_printf_i+0x196>
 8007880:	4616      	mov	r6, r2
 8007882:	e7bd      	b.n	8007800 <_printf_i+0x128>
 8007884:	6833      	ldr	r3, [r6, #0]
 8007886:	6825      	ldr	r5, [r4, #0]
 8007888:	6961      	ldr	r1, [r4, #20]
 800788a:	1d18      	adds	r0, r3, #4
 800788c:	6030      	str	r0, [r6, #0]
 800788e:	062e      	lsls	r6, r5, #24
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	d501      	bpl.n	8007898 <_printf_i+0x1c0>
 8007894:	6019      	str	r1, [r3, #0]
 8007896:	e002      	b.n	800789e <_printf_i+0x1c6>
 8007898:	0668      	lsls	r0, r5, #25
 800789a:	d5fb      	bpl.n	8007894 <_printf_i+0x1bc>
 800789c:	8019      	strh	r1, [r3, #0]
 800789e:	2300      	movs	r3, #0
 80078a0:	6123      	str	r3, [r4, #16]
 80078a2:	4616      	mov	r6, r2
 80078a4:	e7bc      	b.n	8007820 <_printf_i+0x148>
 80078a6:	6833      	ldr	r3, [r6, #0]
 80078a8:	1d1a      	adds	r2, r3, #4
 80078aa:	6032      	str	r2, [r6, #0]
 80078ac:	681e      	ldr	r6, [r3, #0]
 80078ae:	6862      	ldr	r2, [r4, #4]
 80078b0:	2100      	movs	r1, #0
 80078b2:	4630      	mov	r0, r6
 80078b4:	f7f8 fc8c 	bl	80001d0 <memchr>
 80078b8:	b108      	cbz	r0, 80078be <_printf_i+0x1e6>
 80078ba:	1b80      	subs	r0, r0, r6
 80078bc:	6060      	str	r0, [r4, #4]
 80078be:	6863      	ldr	r3, [r4, #4]
 80078c0:	6123      	str	r3, [r4, #16]
 80078c2:	2300      	movs	r3, #0
 80078c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078c8:	e7aa      	b.n	8007820 <_printf_i+0x148>
 80078ca:	6923      	ldr	r3, [r4, #16]
 80078cc:	4632      	mov	r2, r6
 80078ce:	4649      	mov	r1, r9
 80078d0:	4640      	mov	r0, r8
 80078d2:	47d0      	blx	sl
 80078d4:	3001      	adds	r0, #1
 80078d6:	d0ad      	beq.n	8007834 <_printf_i+0x15c>
 80078d8:	6823      	ldr	r3, [r4, #0]
 80078da:	079b      	lsls	r3, r3, #30
 80078dc:	d413      	bmi.n	8007906 <_printf_i+0x22e>
 80078de:	68e0      	ldr	r0, [r4, #12]
 80078e0:	9b03      	ldr	r3, [sp, #12]
 80078e2:	4298      	cmp	r0, r3
 80078e4:	bfb8      	it	lt
 80078e6:	4618      	movlt	r0, r3
 80078e8:	e7a6      	b.n	8007838 <_printf_i+0x160>
 80078ea:	2301      	movs	r3, #1
 80078ec:	4632      	mov	r2, r6
 80078ee:	4649      	mov	r1, r9
 80078f0:	4640      	mov	r0, r8
 80078f2:	47d0      	blx	sl
 80078f4:	3001      	adds	r0, #1
 80078f6:	d09d      	beq.n	8007834 <_printf_i+0x15c>
 80078f8:	3501      	adds	r5, #1
 80078fa:	68e3      	ldr	r3, [r4, #12]
 80078fc:	9903      	ldr	r1, [sp, #12]
 80078fe:	1a5b      	subs	r3, r3, r1
 8007900:	42ab      	cmp	r3, r5
 8007902:	dcf2      	bgt.n	80078ea <_printf_i+0x212>
 8007904:	e7eb      	b.n	80078de <_printf_i+0x206>
 8007906:	2500      	movs	r5, #0
 8007908:	f104 0619 	add.w	r6, r4, #25
 800790c:	e7f5      	b.n	80078fa <_printf_i+0x222>
 800790e:	bf00      	nop
 8007910:	08007fc6 	.word	0x08007fc6
 8007914:	08007fd7 	.word	0x08007fd7

08007918 <__sflush_r>:
 8007918:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800791c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007920:	0716      	lsls	r6, r2, #28
 8007922:	4605      	mov	r5, r0
 8007924:	460c      	mov	r4, r1
 8007926:	d454      	bmi.n	80079d2 <__sflush_r+0xba>
 8007928:	684b      	ldr	r3, [r1, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	dc02      	bgt.n	8007934 <__sflush_r+0x1c>
 800792e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007930:	2b00      	cmp	r3, #0
 8007932:	dd48      	ble.n	80079c6 <__sflush_r+0xae>
 8007934:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007936:	2e00      	cmp	r6, #0
 8007938:	d045      	beq.n	80079c6 <__sflush_r+0xae>
 800793a:	2300      	movs	r3, #0
 800793c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007940:	682f      	ldr	r7, [r5, #0]
 8007942:	6a21      	ldr	r1, [r4, #32]
 8007944:	602b      	str	r3, [r5, #0]
 8007946:	d030      	beq.n	80079aa <__sflush_r+0x92>
 8007948:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800794a:	89a3      	ldrh	r3, [r4, #12]
 800794c:	0759      	lsls	r1, r3, #29
 800794e:	d505      	bpl.n	800795c <__sflush_r+0x44>
 8007950:	6863      	ldr	r3, [r4, #4]
 8007952:	1ad2      	subs	r2, r2, r3
 8007954:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007956:	b10b      	cbz	r3, 800795c <__sflush_r+0x44>
 8007958:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800795a:	1ad2      	subs	r2, r2, r3
 800795c:	2300      	movs	r3, #0
 800795e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007960:	6a21      	ldr	r1, [r4, #32]
 8007962:	4628      	mov	r0, r5
 8007964:	47b0      	blx	r6
 8007966:	1c43      	adds	r3, r0, #1
 8007968:	89a3      	ldrh	r3, [r4, #12]
 800796a:	d106      	bne.n	800797a <__sflush_r+0x62>
 800796c:	6829      	ldr	r1, [r5, #0]
 800796e:	291d      	cmp	r1, #29
 8007970:	d82b      	bhi.n	80079ca <__sflush_r+0xb2>
 8007972:	4a2a      	ldr	r2, [pc, #168]	@ (8007a1c <__sflush_r+0x104>)
 8007974:	410a      	asrs	r2, r1
 8007976:	07d6      	lsls	r6, r2, #31
 8007978:	d427      	bmi.n	80079ca <__sflush_r+0xb2>
 800797a:	2200      	movs	r2, #0
 800797c:	6062      	str	r2, [r4, #4]
 800797e:	04d9      	lsls	r1, r3, #19
 8007980:	6922      	ldr	r2, [r4, #16]
 8007982:	6022      	str	r2, [r4, #0]
 8007984:	d504      	bpl.n	8007990 <__sflush_r+0x78>
 8007986:	1c42      	adds	r2, r0, #1
 8007988:	d101      	bne.n	800798e <__sflush_r+0x76>
 800798a:	682b      	ldr	r3, [r5, #0]
 800798c:	b903      	cbnz	r3, 8007990 <__sflush_r+0x78>
 800798e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007990:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007992:	602f      	str	r7, [r5, #0]
 8007994:	b1b9      	cbz	r1, 80079c6 <__sflush_r+0xae>
 8007996:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800799a:	4299      	cmp	r1, r3
 800799c:	d002      	beq.n	80079a4 <__sflush_r+0x8c>
 800799e:	4628      	mov	r0, r5
 80079a0:	f7ff fa9a 	bl	8006ed8 <_free_r>
 80079a4:	2300      	movs	r3, #0
 80079a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80079a8:	e00d      	b.n	80079c6 <__sflush_r+0xae>
 80079aa:	2301      	movs	r3, #1
 80079ac:	4628      	mov	r0, r5
 80079ae:	47b0      	blx	r6
 80079b0:	4602      	mov	r2, r0
 80079b2:	1c50      	adds	r0, r2, #1
 80079b4:	d1c9      	bne.n	800794a <__sflush_r+0x32>
 80079b6:	682b      	ldr	r3, [r5, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d0c6      	beq.n	800794a <__sflush_r+0x32>
 80079bc:	2b1d      	cmp	r3, #29
 80079be:	d001      	beq.n	80079c4 <__sflush_r+0xac>
 80079c0:	2b16      	cmp	r3, #22
 80079c2:	d11e      	bne.n	8007a02 <__sflush_r+0xea>
 80079c4:	602f      	str	r7, [r5, #0]
 80079c6:	2000      	movs	r0, #0
 80079c8:	e022      	b.n	8007a10 <__sflush_r+0xf8>
 80079ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079ce:	b21b      	sxth	r3, r3
 80079d0:	e01b      	b.n	8007a0a <__sflush_r+0xf2>
 80079d2:	690f      	ldr	r7, [r1, #16]
 80079d4:	2f00      	cmp	r7, #0
 80079d6:	d0f6      	beq.n	80079c6 <__sflush_r+0xae>
 80079d8:	0793      	lsls	r3, r2, #30
 80079da:	680e      	ldr	r6, [r1, #0]
 80079dc:	bf08      	it	eq
 80079de:	694b      	ldreq	r3, [r1, #20]
 80079e0:	600f      	str	r7, [r1, #0]
 80079e2:	bf18      	it	ne
 80079e4:	2300      	movne	r3, #0
 80079e6:	eba6 0807 	sub.w	r8, r6, r7
 80079ea:	608b      	str	r3, [r1, #8]
 80079ec:	f1b8 0f00 	cmp.w	r8, #0
 80079f0:	dde9      	ble.n	80079c6 <__sflush_r+0xae>
 80079f2:	6a21      	ldr	r1, [r4, #32]
 80079f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80079f6:	4643      	mov	r3, r8
 80079f8:	463a      	mov	r2, r7
 80079fa:	4628      	mov	r0, r5
 80079fc:	47b0      	blx	r6
 80079fe:	2800      	cmp	r0, #0
 8007a00:	dc08      	bgt.n	8007a14 <__sflush_r+0xfc>
 8007a02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a0a:	81a3      	strh	r3, [r4, #12]
 8007a0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a14:	4407      	add	r7, r0
 8007a16:	eba8 0800 	sub.w	r8, r8, r0
 8007a1a:	e7e7      	b.n	80079ec <__sflush_r+0xd4>
 8007a1c:	dfbffffe 	.word	0xdfbffffe

08007a20 <_fflush_r>:
 8007a20:	b538      	push	{r3, r4, r5, lr}
 8007a22:	690b      	ldr	r3, [r1, #16]
 8007a24:	4605      	mov	r5, r0
 8007a26:	460c      	mov	r4, r1
 8007a28:	b913      	cbnz	r3, 8007a30 <_fflush_r+0x10>
 8007a2a:	2500      	movs	r5, #0
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	bd38      	pop	{r3, r4, r5, pc}
 8007a30:	b118      	cbz	r0, 8007a3a <_fflush_r+0x1a>
 8007a32:	6a03      	ldr	r3, [r0, #32]
 8007a34:	b90b      	cbnz	r3, 8007a3a <_fflush_r+0x1a>
 8007a36:	f7ff f813 	bl	8006a60 <__sinit>
 8007a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d0f3      	beq.n	8007a2a <_fflush_r+0xa>
 8007a42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a44:	07d0      	lsls	r0, r2, #31
 8007a46:	d404      	bmi.n	8007a52 <_fflush_r+0x32>
 8007a48:	0599      	lsls	r1, r3, #22
 8007a4a:	d402      	bmi.n	8007a52 <_fflush_r+0x32>
 8007a4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a4e:	f7ff fa32 	bl	8006eb6 <__retarget_lock_acquire_recursive>
 8007a52:	4628      	mov	r0, r5
 8007a54:	4621      	mov	r1, r4
 8007a56:	f7ff ff5f 	bl	8007918 <__sflush_r>
 8007a5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a5c:	07da      	lsls	r2, r3, #31
 8007a5e:	4605      	mov	r5, r0
 8007a60:	d4e4      	bmi.n	8007a2c <_fflush_r+0xc>
 8007a62:	89a3      	ldrh	r3, [r4, #12]
 8007a64:	059b      	lsls	r3, r3, #22
 8007a66:	d4e1      	bmi.n	8007a2c <_fflush_r+0xc>
 8007a68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a6a:	f7ff fa25 	bl	8006eb8 <__retarget_lock_release_recursive>
 8007a6e:	e7dd      	b.n	8007a2c <_fflush_r+0xc>

08007a70 <__swhatbuf_r>:
 8007a70:	b570      	push	{r4, r5, r6, lr}
 8007a72:	460c      	mov	r4, r1
 8007a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a78:	2900      	cmp	r1, #0
 8007a7a:	b096      	sub	sp, #88	@ 0x58
 8007a7c:	4615      	mov	r5, r2
 8007a7e:	461e      	mov	r6, r3
 8007a80:	da0d      	bge.n	8007a9e <__swhatbuf_r+0x2e>
 8007a82:	89a3      	ldrh	r3, [r4, #12]
 8007a84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a88:	f04f 0100 	mov.w	r1, #0
 8007a8c:	bf14      	ite	ne
 8007a8e:	2340      	movne	r3, #64	@ 0x40
 8007a90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a94:	2000      	movs	r0, #0
 8007a96:	6031      	str	r1, [r6, #0]
 8007a98:	602b      	str	r3, [r5, #0]
 8007a9a:	b016      	add	sp, #88	@ 0x58
 8007a9c:	bd70      	pop	{r4, r5, r6, pc}
 8007a9e:	466a      	mov	r2, sp
 8007aa0:	f000 f862 	bl	8007b68 <_fstat_r>
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	dbec      	blt.n	8007a82 <__swhatbuf_r+0x12>
 8007aa8:	9901      	ldr	r1, [sp, #4]
 8007aaa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007aae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007ab2:	4259      	negs	r1, r3
 8007ab4:	4159      	adcs	r1, r3
 8007ab6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007aba:	e7eb      	b.n	8007a94 <__swhatbuf_r+0x24>

08007abc <__smakebuf_r>:
 8007abc:	898b      	ldrh	r3, [r1, #12]
 8007abe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ac0:	079d      	lsls	r5, r3, #30
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	460c      	mov	r4, r1
 8007ac6:	d507      	bpl.n	8007ad8 <__smakebuf_r+0x1c>
 8007ac8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007acc:	6023      	str	r3, [r4, #0]
 8007ace:	6123      	str	r3, [r4, #16]
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	6163      	str	r3, [r4, #20]
 8007ad4:	b003      	add	sp, #12
 8007ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ad8:	ab01      	add	r3, sp, #4
 8007ada:	466a      	mov	r2, sp
 8007adc:	f7ff ffc8 	bl	8007a70 <__swhatbuf_r>
 8007ae0:	9f00      	ldr	r7, [sp, #0]
 8007ae2:	4605      	mov	r5, r0
 8007ae4:	4639      	mov	r1, r7
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	f7ff fa62 	bl	8006fb0 <_malloc_r>
 8007aec:	b948      	cbnz	r0, 8007b02 <__smakebuf_r+0x46>
 8007aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007af2:	059a      	lsls	r2, r3, #22
 8007af4:	d4ee      	bmi.n	8007ad4 <__smakebuf_r+0x18>
 8007af6:	f023 0303 	bic.w	r3, r3, #3
 8007afa:	f043 0302 	orr.w	r3, r3, #2
 8007afe:	81a3      	strh	r3, [r4, #12]
 8007b00:	e7e2      	b.n	8007ac8 <__smakebuf_r+0xc>
 8007b02:	89a3      	ldrh	r3, [r4, #12]
 8007b04:	6020      	str	r0, [r4, #0]
 8007b06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b0a:	81a3      	strh	r3, [r4, #12]
 8007b0c:	9b01      	ldr	r3, [sp, #4]
 8007b0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007b12:	b15b      	cbz	r3, 8007b2c <__smakebuf_r+0x70>
 8007b14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b18:	4630      	mov	r0, r6
 8007b1a:	f000 f837 	bl	8007b8c <_isatty_r>
 8007b1e:	b128      	cbz	r0, 8007b2c <__smakebuf_r+0x70>
 8007b20:	89a3      	ldrh	r3, [r4, #12]
 8007b22:	f023 0303 	bic.w	r3, r3, #3
 8007b26:	f043 0301 	orr.w	r3, r3, #1
 8007b2a:	81a3      	strh	r3, [r4, #12]
 8007b2c:	89a3      	ldrh	r3, [r4, #12]
 8007b2e:	431d      	orrs	r5, r3
 8007b30:	81a5      	strh	r5, [r4, #12]
 8007b32:	e7cf      	b.n	8007ad4 <__smakebuf_r+0x18>

08007b34 <memmove>:
 8007b34:	4288      	cmp	r0, r1
 8007b36:	b510      	push	{r4, lr}
 8007b38:	eb01 0402 	add.w	r4, r1, r2
 8007b3c:	d902      	bls.n	8007b44 <memmove+0x10>
 8007b3e:	4284      	cmp	r4, r0
 8007b40:	4623      	mov	r3, r4
 8007b42:	d807      	bhi.n	8007b54 <memmove+0x20>
 8007b44:	1e43      	subs	r3, r0, #1
 8007b46:	42a1      	cmp	r1, r4
 8007b48:	d008      	beq.n	8007b5c <memmove+0x28>
 8007b4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b52:	e7f8      	b.n	8007b46 <memmove+0x12>
 8007b54:	4402      	add	r2, r0
 8007b56:	4601      	mov	r1, r0
 8007b58:	428a      	cmp	r2, r1
 8007b5a:	d100      	bne.n	8007b5e <memmove+0x2a>
 8007b5c:	bd10      	pop	{r4, pc}
 8007b5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b66:	e7f7      	b.n	8007b58 <memmove+0x24>

08007b68 <_fstat_r>:
 8007b68:	b538      	push	{r3, r4, r5, lr}
 8007b6a:	4d07      	ldr	r5, [pc, #28]	@ (8007b88 <_fstat_r+0x20>)
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	4604      	mov	r4, r0
 8007b70:	4608      	mov	r0, r1
 8007b72:	4611      	mov	r1, r2
 8007b74:	602b      	str	r3, [r5, #0]
 8007b76:	f7f9 f860 	bl	8000c3a <_fstat>
 8007b7a:	1c43      	adds	r3, r0, #1
 8007b7c:	d102      	bne.n	8007b84 <_fstat_r+0x1c>
 8007b7e:	682b      	ldr	r3, [r5, #0]
 8007b80:	b103      	cbz	r3, 8007b84 <_fstat_r+0x1c>
 8007b82:	6023      	str	r3, [r4, #0]
 8007b84:	bd38      	pop	{r3, r4, r5, pc}
 8007b86:	bf00      	nop
 8007b88:	20005788 	.word	0x20005788

08007b8c <_isatty_r>:
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	4d06      	ldr	r5, [pc, #24]	@ (8007ba8 <_isatty_r+0x1c>)
 8007b90:	2300      	movs	r3, #0
 8007b92:	4604      	mov	r4, r0
 8007b94:	4608      	mov	r0, r1
 8007b96:	602b      	str	r3, [r5, #0]
 8007b98:	f7f9 f85f 	bl	8000c5a <_isatty>
 8007b9c:	1c43      	adds	r3, r0, #1
 8007b9e:	d102      	bne.n	8007ba6 <_isatty_r+0x1a>
 8007ba0:	682b      	ldr	r3, [r5, #0]
 8007ba2:	b103      	cbz	r3, 8007ba6 <_isatty_r+0x1a>
 8007ba4:	6023      	str	r3, [r4, #0]
 8007ba6:	bd38      	pop	{r3, r4, r5, pc}
 8007ba8:	20005788 	.word	0x20005788

08007bac <_sbrk_r>:
 8007bac:	b538      	push	{r3, r4, r5, lr}
 8007bae:	4d06      	ldr	r5, [pc, #24]	@ (8007bc8 <_sbrk_r+0x1c>)
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	4608      	mov	r0, r1
 8007bb6:	602b      	str	r3, [r5, #0]
 8007bb8:	f7f9 f868 	bl	8000c8c <_sbrk>
 8007bbc:	1c43      	adds	r3, r0, #1
 8007bbe:	d102      	bne.n	8007bc6 <_sbrk_r+0x1a>
 8007bc0:	682b      	ldr	r3, [r5, #0]
 8007bc2:	b103      	cbz	r3, 8007bc6 <_sbrk_r+0x1a>
 8007bc4:	6023      	str	r3, [r4, #0]
 8007bc6:	bd38      	pop	{r3, r4, r5, pc}
 8007bc8:	20005788 	.word	0x20005788

08007bcc <_realloc_r>:
 8007bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd0:	4680      	mov	r8, r0
 8007bd2:	4615      	mov	r5, r2
 8007bd4:	460c      	mov	r4, r1
 8007bd6:	b921      	cbnz	r1, 8007be2 <_realloc_r+0x16>
 8007bd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bdc:	4611      	mov	r1, r2
 8007bde:	f7ff b9e7 	b.w	8006fb0 <_malloc_r>
 8007be2:	b92a      	cbnz	r2, 8007bf0 <_realloc_r+0x24>
 8007be4:	f7ff f978 	bl	8006ed8 <_free_r>
 8007be8:	2400      	movs	r4, #0
 8007bea:	4620      	mov	r0, r4
 8007bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bf0:	f000 f81a 	bl	8007c28 <_malloc_usable_size_r>
 8007bf4:	4285      	cmp	r5, r0
 8007bf6:	4606      	mov	r6, r0
 8007bf8:	d802      	bhi.n	8007c00 <_realloc_r+0x34>
 8007bfa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007bfe:	d8f4      	bhi.n	8007bea <_realloc_r+0x1e>
 8007c00:	4629      	mov	r1, r5
 8007c02:	4640      	mov	r0, r8
 8007c04:	f7ff f9d4 	bl	8006fb0 <_malloc_r>
 8007c08:	4607      	mov	r7, r0
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	d0ec      	beq.n	8007be8 <_realloc_r+0x1c>
 8007c0e:	42b5      	cmp	r5, r6
 8007c10:	462a      	mov	r2, r5
 8007c12:	4621      	mov	r1, r4
 8007c14:	bf28      	it	cs
 8007c16:	4632      	movcs	r2, r6
 8007c18:	f7ff f94f 	bl	8006eba <memcpy>
 8007c1c:	4621      	mov	r1, r4
 8007c1e:	4640      	mov	r0, r8
 8007c20:	f7ff f95a 	bl	8006ed8 <_free_r>
 8007c24:	463c      	mov	r4, r7
 8007c26:	e7e0      	b.n	8007bea <_realloc_r+0x1e>

08007c28 <_malloc_usable_size_r>:
 8007c28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c2c:	1f18      	subs	r0, r3, #4
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	bfbc      	itt	lt
 8007c32:	580b      	ldrlt	r3, [r1, r0]
 8007c34:	18c0      	addlt	r0, r0, r3
 8007c36:	4770      	bx	lr

08007c38 <_init>:
 8007c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c3a:	bf00      	nop
 8007c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c3e:	bc08      	pop	{r3}
 8007c40:	469e      	mov	lr, r3
 8007c42:	4770      	bx	lr

08007c44 <_fini>:
 8007c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c46:	bf00      	nop
 8007c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c4a:	bc08      	pop	{r3}
 8007c4c:	469e      	mov	lr, r3
 8007c4e:	4770      	bx	lr
