
TP_Autoradio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a60  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08008bf0  08008bf0  00009bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009000  08009000  0000b074  2**0
                  CONTENTS
  4 .ARM          00000008  08009000  08009000  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009008  08009008  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009008  08009008  0000a008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800900c  0800900c  0000a00c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08009010  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000057e8  20000074  08009084  0000b074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000585c  08009084  0000b85c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a68a  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044ea  00000000  00000000  0002572e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a8  00000000  00000000  00029c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000115c  00000000  00000000  0002b2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aa3c  00000000  00000000  0002c41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c3de  00000000  00000000  00056e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7f76  00000000  00000000  00073236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016b1ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065bc  00000000  00000000  0016b1f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  001717ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008bd8 	.word	0x08008bd8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008bd8 	.word	0x08008bd8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	4a07      	ldr	r2, [pc, #28]	@ (800058c <vApplicationGetIdleTaskMemory+0x2c>)
 8000570:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	4a06      	ldr	r2, [pc, #24]	@ (8000590 <vApplicationGetIdleTaskMemory+0x30>)
 8000576:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2280      	movs	r2, #128	@ 0x80
 800057c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000094 	.word	0x20000094
 8000590:	200000e8 	.word	0x200000e8

08000594 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000594:	b5b0      	push	{r4, r5, r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800059a:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <MX_FREERTOS_Init+0x30>)
 800059c:	1d3c      	adds	r4, r7, #4
 800059e:	461d      	mov	r5, r3
 80005a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f005 f962 	bl	800587a <osThreadCreate>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a03      	ldr	r2, [pc, #12]	@ (80005c8 <MX_FREERTOS_Init+0x34>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005bc:	bf00      	nop
 80005be:	3720      	adds	r7, #32
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bdb0      	pop	{r4, r5, r7, pc}
 80005c4:	08008bfc 	.word	0x08008bfc
 80005c8:	20000090 	.word	0x20000090

080005cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005d4:	2001      	movs	r0, #1
 80005d6:	f005 f99c 	bl	8005912 <osDelay>
 80005da:	e7fb      	b.n	80005d4 <StartDefaultTask+0x8>

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	@ 0x28
 80005e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	4b35      	ldr	r3, [pc, #212]	@ (80006c8 <MX_GPIO_Init+0xec>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f6:	4a34      	ldr	r2, [pc, #208]	@ (80006c8 <MX_GPIO_Init+0xec>)
 80005f8:	f043 0304 	orr.w	r3, r3, #4
 80005fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005fe:	4b32      	ldr	r3, [pc, #200]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000602:	f003 0304 	and.w	r3, r3, #4
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060a:	4b2f      	ldr	r3, [pc, #188]	@ (80006c8 <MX_GPIO_Init+0xec>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060e:	4a2e      	ldr	r2, [pc, #184]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000614:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000616:	4b2c      	ldr	r3, [pc, #176]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000626:	4a28      	ldr	r2, [pc, #160]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <MX_GPIO_Init+0xec>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063e:	4a22      	ldr	r2, [pc, #136]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VU_nRESET_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2121      	movs	r1, #33	@ 0x21
 8000656:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800065a:	f001 fbef 	bl	8001e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2180      	movs	r1, #128	@ 0x80
 8000662:	481a      	ldr	r0, [pc, #104]	@ (80006cc <MX_GPIO_Init+0xf0>)
 8000664:	f001 fbea 	bl	8001e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000668:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800066c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800066e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4619      	mov	r1, r3
 800067e:	4814      	ldr	r0, [pc, #80]	@ (80006d0 <MX_GPIO_Init+0xf4>)
 8000680:	f001 fa32 	bl	8001ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VU_nRESET_Pin LD2_Pin */
  GPIO_InitStruct.Pin = VU_nRESET_Pin|LD2_Pin;
 8000684:	2321      	movs	r3, #33	@ 0x21
 8000686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000688:	2301      	movs	r3, #1
 800068a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	2300      	movs	r3, #0
 8000692:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	4619      	mov	r1, r3
 800069a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069e:	f001 fa23 	bl	8001ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VU_nCS_Pin */
  GPIO_InitStruct.Pin = VU_nCS_Pin;
 80006a2:	2380      	movs	r3, #128	@ 0x80
 80006a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2300      	movs	r3, #0
 80006b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VU_nCS_GPIO_Port, &GPIO_InitStruct);
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	4619      	mov	r1, r3
 80006b8:	4804      	ldr	r0, [pc, #16]	@ (80006cc <MX_GPIO_Init+0xf0>)
 80006ba:	f001 fa15 	bl	8001ae8 <HAL_GPIO_Init>

}
 80006be:	bf00      	nop
 80006c0:	3728      	adds	r7, #40	@ 0x28
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000
 80006cc:	48000400 	.word	0x48000400
 80006d0:	48000800 	.word	0x48000800

080006d4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000748 <MX_I2C2_Init+0x74>)
 80006da:	4a1c      	ldr	r2, [pc, #112]	@ (800074c <MX_I2C2_Init+0x78>)
 80006dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 80006de:	4b1a      	ldr	r3, [pc, #104]	@ (8000748 <MX_I2C2_Init+0x74>)
 80006e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000750 <MX_I2C2_Init+0x7c>)
 80006e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006e4:	4b18      	ldr	r3, [pc, #96]	@ (8000748 <MX_I2C2_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ea:	4b17      	ldr	r3, [pc, #92]	@ (8000748 <MX_I2C2_Init+0x74>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f0:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <MX_I2C2_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006f6:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <MX_I2C2_Init+0x74>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006fc:	4b12      	ldr	r3, [pc, #72]	@ (8000748 <MX_I2C2_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000702:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <MX_I2C2_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000708:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <MX_I2C2_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800070e:	480e      	ldr	r0, [pc, #56]	@ (8000748 <MX_I2C2_Init+0x74>)
 8000710:	f001 fbc6 	bl	8001ea0 <HAL_I2C_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800071a:	f000 f9da 	bl	8000ad2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800071e:	2100      	movs	r1, #0
 8000720:	4809      	ldr	r0, [pc, #36]	@ (8000748 <MX_I2C2_Init+0x74>)
 8000722:	f001 fc58 	bl	8001fd6 <HAL_I2CEx_ConfigAnalogFilter>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800072c:	f000 f9d1 	bl	8000ad2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000730:	2100      	movs	r1, #0
 8000732:	4805      	ldr	r0, [pc, #20]	@ (8000748 <MX_I2C2_Init+0x74>)
 8000734:	f001 fc9a 	bl	800206c <HAL_I2CEx_ConfigDigitalFilter>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800073e:	f000 f9c8 	bl	8000ad2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200002e8 	.word	0x200002e8
 800074c:	40005800 	.word	0x40005800
 8000750:	10d19ce4 	.word	0x10d19ce4

08000754 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b0ac      	sub	sp, #176	@ 0xb0
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	2288      	movs	r2, #136	@ 0x88
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f007 faf5 	bl	8007d64 <memset>
  if(i2cHandle->Instance==I2C2)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a21      	ldr	r2, [pc, #132]	@ (8000804 <HAL_I2C_MspInit+0xb0>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d13b      	bne.n	80007fc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000784:	2380      	movs	r3, #128	@ 0x80
 8000786:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000788:	2300      	movs	r3, #0
 800078a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	4618      	mov	r0, r3
 8000792:	f002 fb1b 	bl	8002dcc <HAL_RCCEx_PeriphCLKConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800079c:	f000 f999 	bl	8000ad2 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a0:	4b19      	ldr	r3, [pc, #100]	@ (8000808 <HAL_I2C_MspInit+0xb4>)
 80007a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a4:	4a18      	ldr	r2, [pc, #96]	@ (8000808 <HAL_I2C_MspInit+0xb4>)
 80007a6:	f043 0302 	orr.w	r3, r3, #2
 80007aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ac:	4b16      	ldr	r3, [pc, #88]	@ (8000808 <HAL_I2C_MspInit+0xb4>)
 80007ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b0:	f003 0302 	and.w	r3, r3, #2
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80007b8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80007bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007c0:	2312      	movs	r3, #18
 80007c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007cc:	2303      	movs	r3, #3
 80007ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80007d2:	2304      	movs	r3, #4
 80007d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007dc:	4619      	mov	r1, r3
 80007de:	480b      	ldr	r0, [pc, #44]	@ (800080c <HAL_I2C_MspInit+0xb8>)
 80007e0:	f001 f982 	bl	8001ae8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007e4:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <HAL_I2C_MspInit+0xb4>)
 80007e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007e8:	4a07      	ldr	r2, [pc, #28]	@ (8000808 <HAL_I2C_MspInit+0xb4>)
 80007ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80007f0:	4b05      	ldr	r3, [pc, #20]	@ (8000808 <HAL_I2C_MspInit+0xb4>)
 80007f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80007fc:	bf00      	nop
 80007fe:	37b0      	adds	r7, #176	@ 0xb0
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40005800 	.word	0x40005800
 8000808:	40021000 	.word	0x40021000
 800080c:	48000400 	.word	0x48000400

08000810 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000814:	f3bf 8f4f 	dsb	sy
}
 8000818:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <__NVIC_SystemReset+0x24>)
 800081c:	68db      	ldr	r3, [r3, #12]
 800081e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000822:	4904      	ldr	r1, [pc, #16]	@ (8000834 <__NVIC_SystemReset+0x24>)
 8000824:	4b04      	ldr	r3, [pc, #16]	@ (8000838 <__NVIC_SystemReset+0x28>)
 8000826:	4313      	orrs	r3, r2
 8000828:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800082a:	f3bf 8f4f 	dsb	sy
}
 800082e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <__NVIC_SystemReset+0x20>
 8000834:	e000ed00 	.word	0xe000ed00
 8000838:	05fa0004 	.word	0x05fa0004

0800083c <__io_putchar>:
 * @brief Transmit a character over UART.
 * @param ch: Character to transmit.
 * @retval int: The transmitted character.
 */
int __io_putchar(int ch)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000844:	1d39      	adds	r1, r7, #4
 8000846:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800084a:	2201      	movs	r2, #1
 800084c:	4803      	ldr	r0, [pc, #12]	@ (800085c <__io_putchar+0x20>)
 800084e:	f003 fc59 	bl	8004104 <HAL_UART_Transmit>

	return ch;
 8000852:	687b      	ldr	r3, [r7, #4]
}
 8000854:	4618      	mov	r0, r3
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200003b0 	.word	0x200003b0

08000860 <Error_Handler_xTaskCreate>:
/**
 * @brief  Gestion d'erreurs de création de tâche.
 * @param	BaseType_t	Retour de xTaskCreate.
 */
void Error_Handler_xTaskCreate(BaseType_t r)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	/* Vérification si la tâche a été créée avec succès */
	if (pdPASS == r) {
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d010      	beq.n	8000890 <Error_Handler_xTaskCreate+0x30>
		/* Si la tâche est créée avec succès, démarrer le scheduler */
#if (LOGS)
		printf("Tâche crée avec succès\r\n");
#endif
	} else if (errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY == r) {
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000874:	d105      	bne.n	8000882 <Error_Handler_xTaskCreate+0x22>
		printf("Erreur: Mémoire insuffisante\r\n");
 8000876:	4808      	ldr	r0, [pc, #32]	@ (8000898 <Error_Handler_xTaskCreate+0x38>)
 8000878:	f007 f960 	bl	8007b3c <puts>
		Error_Handler();
 800087c:	f000 f929 	bl	8000ad2 <Error_Handler>
		/* Cas improbable : code d'erreur non prévu pour xTaskCreate */
		printf("Erreur inconnue lors de la création de la tâche\r\n");
		Error_Handler();  	// Gestion d'erreur générique
		NVIC_SystemReset(); // Réinitialiser le microcontrôleur
	}
}
 8000880:	e006      	b.n	8000890 <Error_Handler_xTaskCreate+0x30>
		printf("Erreur inconnue lors de la création de la tâche\r\n");
 8000882:	4806      	ldr	r0, [pc, #24]	@ (800089c <Error_Handler_xTaskCreate+0x3c>)
 8000884:	f007 f95a 	bl	8007b3c <puts>
		Error_Handler();  	// Gestion d'erreur générique
 8000888:	f000 f923 	bl	8000ad2 <Error_Handler>
		NVIC_SystemReset(); // Réinitialiser le microcontrôleur
 800088c:	f7ff ffc0 	bl	8000810 <__NVIC_SystemReset>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	08008c18 	.word	0x08008c18
 800089c:	08008c38 	.word	0x08008c38

080008a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a04      	ldr	r2, [pc, #16]	@ (80008c0 <HAL_UART_RxCpltCallback+0x20>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d101      	bne.n	80008b6 <HAL_UART_RxCpltCallback+0x16>
	{
		shell_uart_receive_irq_cb();	// Function giving the semaphore!
 80008b2:	f000 fd33 	bl	800131c <shell_uart_receive_irq_cb>
	}
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40004400 	.word	0x40004400

080008c4 <task_LED>:


void task_LED (void * pvParameters) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	int duree = (int) pvParameters;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	60fb      	str	r3, [r7, #12]
#if (LOGS)
	printf("Task %s created\r\n", pcTaskGetName(xTaskGetCurrentTaskHandle()));
#endif
	for (;;)
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008d0:	2120      	movs	r1, #32
 80008d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d6:	f001 fac9 	bl	8001e6c <HAL_GPIO_TogglePin>
		vTaskDelay( duree / portTICK_PERIOD_MS );  // Délai de duree en ms
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	4618      	mov	r0, r3
 80008de:	f005 fd5d 	bl	800639c <vTaskDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008e2:	bf00      	nop
 80008e4:	e7f4      	b.n	80008d0 <task_LED+0xc>
	...

080008e8 <task_shell>:
	}
}

void task_shell(void * unused)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
#if (LOGS)
	printf("Task %s created\r\n", pcTaskGetName(xTaskGetCurrentTaskHandle()));
#endif

	shell_init();	// Shell initialization
 80008f0:	f000 fda0 	bl	8001434 <shell_init>

	// Creation of all commands
	shell_add('f', fonction, "Une fonction inutile");
 80008f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000920 <task_shell+0x38>)
 80008f6:	490b      	ldr	r1, [pc, #44]	@ (8000924 <task_shell+0x3c>)
 80008f8:	2066      	movs	r0, #102	@ 0x66
 80008fa:	f000 fdd3 	bl	80014a4 <shell_add>
	shell_add('a', addition, "Effectue une somme");
 80008fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000928 <task_shell+0x40>)
 8000900:	490a      	ldr	r1, [pc, #40]	@ (800092c <task_shell+0x44>)
 8000902:	2061      	movs	r0, #97	@ 0x61
 8000904:	f000 fdce 	bl	80014a4 <shell_add>
	shell_add('c', calcul, "Opération entre 2 nombres");
 8000908:	4a09      	ldr	r2, [pc, #36]	@ (8000930 <task_shell+0x48>)
 800090a:	490a      	ldr	r1, [pc, #40]	@ (8000934 <task_shell+0x4c>)
 800090c:	2063      	movs	r0, #99	@ 0x63
 800090e:	f000 fdc9 	bl	80014a4 <shell_add>

	shell_run();	// boucle infinie
 8000912:	f000 fe73 	bl	80015fc <shell_run>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	08008c6c 	.word	0x08008c6c
 8000924:	0800116d 	.word	0x0800116d
 8000928:	08008c84 	.word	0x08008c84
 800092c:	080012b1 	.word	0x080012b1
 8000930:	08008c98 	.word	0x08008c98
 8000934:	080011b5 	.word	0x080011b5

08000938 <task_GPIO_expander>:

void task_GPIO_expander (void * pvParameters) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	int delay = (int) pvParameters;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	617b      	str	r3, [r7, #20]
	int toggle = 1;
 8000944:	2301      	movs	r3, #1
 8000946:	613b      	str	r3, [r7, #16]
	int i = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
#if (LOGS)
	printf("Task %s created\r\n", pcTaskGetName(xTaskGetCurrentTaskHandle()));
#endif

	// Initialize MCP23S17 GPIO expander
	MCP23S17_Init();
 800094c:	f000 fbb4 	bl	80010b8 <MCP23S17_Init>

	MCP23S17_Toggle_LED_id(5);
 8000950:	2005      	movs	r0, #5
 8000952:	f000 fbd9 	bl	8001108 <MCP23S17_Toggle_LED_id>
	MCP23S17_Toggle_LED_id(5);
 8000956:	2005      	movs	r0, #5
 8000958:	f000 fbd6 	bl	8001108 <MCP23S17_Toggle_LED_id>
		toggle = -toggle;

		vTaskDelay( delay / portTICK_PERIOD_MS );  // Délai de duree en ms
	}
	*/
}
 800095c:	bf00      	nop
 800095e:	3718      	adds	r7, #24
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800096a:	f000 feb1 	bl	80016d0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800096e:	f000 f85f 	bl	8000a30 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000972:	f7ff fe33 	bl	80005dc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000976:	f000 fa75 	bl	8000e64 <MX_USART2_UART_Init>
	MX_I2C2_Init();
 800097a:	f7ff feab 	bl	80006d4 <MX_I2C2_Init>
	MX_SPI3_Init();
 800097e:	f000 f8af 	bl	8000ae0 <MX_SPI3_Init>
	/* USER CODE BEGIN 2 */
	HAL_SPI_Init(&hspi3);
 8000982:	4820      	ldr	r0, [pc, #128]	@ (8000a04 <main+0xa0>)
 8000984:	f002 fede 	bl	8003744 <HAL_SPI_Init>

	// Test printf
	printf("******* TP Autoradio *******\r\n");
 8000988:	481f      	ldr	r0, [pc, #124]	@ (8000a08 <main+0xa4>)
 800098a:	f007 f8d7 	bl	8007b3c <puts>

	// Create the task, storing the handle.
	Error_Handler_xTaskCreate(
 800098e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a0c <main+0xa8>)
 8000990:	9301      	str	r3, [sp, #4]
 8000992:	2302      	movs	r3, #2
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800099a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800099e:	491c      	ldr	r1, [pc, #112]	@ (8000a10 <main+0xac>)
 80009a0:	481c      	ldr	r0, [pc, #112]	@ (8000a14 <main+0xb0>)
 80009a2:	f005 fbc3 	bl	800612c <xTaskCreate>
 80009a6:	4603      	mov	r3, r0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff59 	bl	8000860 <Error_Handler_xTaskCreate>
					(void *) 500, // 1 ms
					TASK_MCP23S17_PRIORITY, // Priority at which the task is created.
					&h_task_GPIOExpander)); // Used to pass out the created task's handle.

	// Turn on LED2 (Green)
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80009ae:	2120      	movs	r1, #32
 80009b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009b4:	f001 fa5a 	bl	8001e6c <HAL_GPIO_TogglePin>

	// Create the task, storing the handle.
	Error_Handler_xTaskCreate(
 80009b8:	4b17      	ldr	r3, [pc, #92]	@ (8000a18 <main+0xb4>)
 80009ba:	9301      	str	r3, [sp, #4]
 80009bc:	2301      	movs	r3, #1
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	23c8      	movs	r3, #200	@ 0xc8
 80009c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009c6:	4915      	ldr	r1, [pc, #84]	@ (8000a1c <main+0xb8>)
 80009c8:	4815      	ldr	r0, [pc, #84]	@ (8000a20 <main+0xbc>)
 80009ca:	f005 fbaf 	bl	800612c <xTaskCreate>
 80009ce:	4603      	mov	r3, r0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff45 	bl	8000860 <Error_Handler_xTaskCreate>
					STACK_DEPTH, // Stack size in words, not bytes.
					(void *) DELAY_LED_TOGGLE, // Parameter passed into the task.
					1,// Priority at which the task is created.
					&h_task_LED)); // Used to pass out the created task's handle.
	// Shell task
	Error_Handler_xTaskCreate(
 80009d6:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <main+0xc0>)
 80009d8:	9301      	str	r3, [sp, #4]
 80009da:	2303      	movs	r3, #3
 80009dc:	9300      	str	r3, [sp, #0]
 80009de:	2300      	movs	r3, #0
 80009e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009e4:	4910      	ldr	r1, [pc, #64]	@ (8000a28 <main+0xc4>)
 80009e6:	4811      	ldr	r0, [pc, #68]	@ (8000a2c <main+0xc8>)
 80009e8:	f005 fba0 	bl	800612c <xTaskCreate>
 80009ec:	4603      	mov	r3, r0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff ff36 	bl	8000860 <Error_Handler_xTaskCreate>
					NULL,
					TASK_SHELL_PRIORITY,
					&h_task_shell));

	// OS Start
	vTaskStartScheduler();
 80009f4:	f005 fd08 	bl	8006408 <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 80009f8:	f7ff fdcc 	bl	8000594 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 80009fc:	f004 ff36 	bl	800586c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <main+0x9c>
 8000a04:	20000348 	.word	0x20000348
 8000a08:	08008cb4 	.word	0x08008cb4
 8000a0c:	20000344 	.word	0x20000344
 8000a10:	08008cd4 	.word	0x08008cd4
 8000a14:	08000939 	.word	0x08000939
 8000a18:	2000033c 	.word	0x2000033c
 8000a1c:	08008ce4 	.word	0x08008ce4
 8000a20:	080008c5 	.word	0x080008c5
 8000a24:	20000340 	.word	0x20000340
 8000a28:	08008cec 	.word	0x08008cec
 8000a2c:	080008e9 	.word	0x080008e9

08000a30 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b096      	sub	sp, #88	@ 0x58
 8000a34:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	2244      	movs	r2, #68	@ 0x44
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f007 f990 	bl	8007d64 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a44:	463b      	mov	r3, r7
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a52:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a56:	f001 fb63 	bl	8002120 <HAL_PWREx_ControlVoltageScaling>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000a60:	f000 f837 	bl	8000ad2 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a64:	2302      	movs	r3, #2
 8000a66:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a6c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a6e:	2310      	movs	r3, #16
 8000a70:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a72:	2302      	movs	r3, #2
 8000a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a76:	2302      	movs	r3, #2
 8000a78:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000a7e:	230a      	movs	r3, #10
 8000a80:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a82:	2307      	movs	r3, #7
 8000a84:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a86:	2302      	movs	r3, #2
 8000a88:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 fb9a 	bl	80021cc <HAL_RCC_OscConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <SystemClock_Config+0x72>
	{
		Error_Handler();
 8000a9e:	f000 f818 	bl	8000ad2 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa2:	230f      	movs	r3, #15
 8000aa4:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	2104      	movs	r1, #4
 8000aba:	4618      	mov	r0, r3
 8000abc:	f001 ff62 	bl	8002984 <HAL_RCC_ClockConfig>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000ac6:	f000 f804 	bl	8000ad2 <Error_Handler>
	}
}
 8000aca:	bf00      	nop
 8000acc:	3758      	adds	r7, #88	@ 0x58
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad6:	b672      	cpsid	i
}
 8000ad8:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ada:	bf00      	nop
 8000adc:	e7fd      	b.n	8000ada <Error_Handler+0x8>
	...

08000ae0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b54 <MX_SPI3_Init+0x74>)
 8000ae6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b58 <MX_SPI3_Init+0x78>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000aea:	4b1a      	ldr	r3, [pc, #104]	@ (8000b54 <MX_SPI3_Init+0x74>)
 8000aec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000af0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000af2:	4b18      	ldr	r3, [pc, #96]	@ (8000b54 <MX_SPI3_Init+0x74>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000af8:	4b16      	ldr	r3, [pc, #88]	@ (8000b54 <MX_SPI3_Init+0x74>)
 8000afa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000afe:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b00:	4b14      	ldr	r3, [pc, #80]	@ (8000b54 <MX_SPI3_Init+0x74>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b06:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <MX_SPI3_Init+0x74>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <MX_SPI3_Init+0x74>)
 8000b0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b12:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <MX_SPI3_Init+0x74>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <MX_SPI3_Init+0x74>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <MX_SPI3_Init+0x74>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	@ (8000b54 <MX_SPI3_Init+0x74>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <MX_SPI3_Init+0x74>)
 8000b2e:	2207      	movs	r2, #7
 8000b30:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b32:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <MX_SPI3_Init+0x74>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <MX_SPI3_Init+0x74>)
 8000b3a:	2208      	movs	r2, #8
 8000b3c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b3e:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <MX_SPI3_Init+0x74>)
 8000b40:	f002 fe00 	bl	8003744 <HAL_SPI_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000b4a:	f7ff ffc2 	bl	8000ad2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000348 	.word	0x20000348
 8000b58:	40003c00 	.word	0x40003c00

08000b5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	@ 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a29      	ldr	r2, [pc, #164]	@ (8000c20 <HAL_SPI_MspInit+0xc4>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d14c      	bne.n	8000c18 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b7e:	4b29      	ldr	r3, [pc, #164]	@ (8000c24 <HAL_SPI_MspInit+0xc8>)
 8000b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b82:	4a28      	ldr	r2, [pc, #160]	@ (8000c24 <HAL_SPI_MspInit+0xc8>)
 8000b84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b88:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b8a:	4b26      	ldr	r3, [pc, #152]	@ (8000c24 <HAL_SPI_MspInit+0xc8>)
 8000b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b96:	4b23      	ldr	r3, [pc, #140]	@ (8000c24 <HAL_SPI_MspInit+0xc8>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9a:	4a22      	ldr	r2, [pc, #136]	@ (8000c24 <HAL_SPI_MspInit+0xc8>)
 8000b9c:	f043 0304 	orr.w	r3, r3, #4
 8000ba0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ba2:	4b20      	ldr	r3, [pc, #128]	@ (8000c24 <HAL_SPI_MspInit+0xc8>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba6:	f003 0304 	and.w	r3, r3, #4
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bae:	4b1d      	ldr	r3, [pc, #116]	@ (8000c24 <HAL_SPI_MspInit+0xc8>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb2:	4a1c      	ldr	r2, [pc, #112]	@ (8000c24 <HAL_SPI_MspInit+0xc8>)
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bba:	4b1a      	ldr	r3, [pc, #104]	@ (8000c24 <HAL_SPI_MspInit+0xc8>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = VU_SCK_Pin|VU_MISO_Pin;
 8000bc6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bd8:	2306      	movs	r3, #6
 8000bda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	4811      	ldr	r0, [pc, #68]	@ (8000c28 <HAL_SPI_MspInit+0xcc>)
 8000be4:	f000 ff80 	bl	8001ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VU_MOSI_Pin;
 8000be8:	2320      	movs	r3, #32
 8000bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2302      	movs	r3, #2
 8000bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bf8:	2306      	movs	r3, #6
 8000bfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(VU_MOSI_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4619      	mov	r1, r3
 8000c02:	480a      	ldr	r0, [pc, #40]	@ (8000c2c <HAL_SPI_MspInit+0xd0>)
 8000c04:	f000 ff70 	bl	8001ae8 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2105      	movs	r1, #5
 8000c0c:	2033      	movs	r0, #51	@ 0x33
 8000c0e:	f000 feb6 	bl	800197e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000c12:	2033      	movs	r0, #51	@ 0x33
 8000c14:	f000 fecf 	bl	80019b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000c18:	bf00      	nop
 8000c1a:	3728      	adds	r7, #40	@ 0x28
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40003c00 	.word	0x40003c00
 8000c24:	40021000 	.word	0x40021000
 8000c28:	48000800 	.word	0x48000800
 8000c2c:	48000400 	.word	0x48000400

08000c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c36:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <HAL_MspInit+0x4c>)
 8000c38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c3a:	4a10      	ldr	r2, [pc, #64]	@ (8000c7c <HAL_MspInit+0x4c>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c42:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <HAL_MspInit+0x4c>)
 8000c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <HAL_MspInit+0x4c>)
 8000c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c52:	4a0a      	ldr	r2, [pc, #40]	@ (8000c7c <HAL_MspInit+0x4c>)
 8000c54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c5a:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <HAL_MspInit+0x4c>)
 8000c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	210f      	movs	r1, #15
 8000c6a:	f06f 0001 	mvn.w	r0, #1
 8000c6e:	f000 fe86 	bl	800197e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40021000 	.word	0x40021000

08000c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <NMI_Handler+0x4>

08000c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <HardFault_Handler+0x4>

08000c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <MemManage_Handler+0x4>

08000c98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <BusFault_Handler+0x4>

08000ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <UsageFault_Handler+0x4>

08000ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cba:	f000 fd65 	bl	8001788 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000cbe:	f005 ffad 	bl	8006c1c <xTaskGetSchedulerState>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d001      	beq.n	8000ccc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000cc8:	f006 fb06 	bl	80072d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cd4:	4802      	ldr	r0, [pc, #8]	@ (8000ce0 <USART2_IRQHandler+0x10>)
 8000cd6:	f003 faeb 	bl	80042b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200003b0 	.word	0x200003b0

08000ce4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000ce8:	4802      	ldr	r0, [pc, #8]	@ (8000cf4 <SPI3_IRQHandler+0x10>)
 8000cea:	f002 ff45 	bl	8003b78 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000348 	.word	0x20000348

08000cf8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	e00a      	b.n	8000d20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d0a:	f3af 8000 	nop.w
 8000d0e:	4601      	mov	r1, r0
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	1c5a      	adds	r2, r3, #1
 8000d14:	60ba      	str	r2, [r7, #8]
 8000d16:	b2ca      	uxtb	r2, r1
 8000d18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	697a      	ldr	r2, [r7, #20]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	dbf0      	blt.n	8000d0a <_read+0x12>
  }

  return len;
 8000d28:	687b      	ldr	r3, [r7, #4]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3718      	adds	r7, #24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b086      	sub	sp, #24
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	60f8      	str	r0, [r7, #12]
 8000d3a:	60b9      	str	r1, [r7, #8]
 8000d3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
 8000d42:	e009      	b.n	8000d58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	1c5a      	adds	r2, r3, #1
 8000d48:	60ba      	str	r2, [r7, #8]
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fd75 	bl	800083c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	3301      	adds	r3, #1
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	697a      	ldr	r2, [r7, #20]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	dbf1      	blt.n	8000d44 <_write+0x12>
  }
  return len;
 8000d60:	687b      	ldr	r3, [r7, #4]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <_close>:

int _close(int file)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b083      	sub	sp, #12
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
 8000d8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d92:	605a      	str	r2, [r3, #4]
  return 0;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <_isatty>:

int _isatty(int file)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000daa:	2301      	movs	r3, #1
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
	...

08000dd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ddc:	4a14      	ldr	r2, [pc, #80]	@ (8000e30 <_sbrk+0x5c>)
 8000dde:	4b15      	ldr	r3, [pc, #84]	@ (8000e34 <_sbrk+0x60>)
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de8:	4b13      	ldr	r3, [pc, #76]	@ (8000e38 <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d102      	bne.n	8000df6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df0:	4b11      	ldr	r3, [pc, #68]	@ (8000e38 <_sbrk+0x64>)
 8000df2:	4a12      	ldr	r2, [pc, #72]	@ (8000e3c <_sbrk+0x68>)
 8000df4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df6:	4b10      	ldr	r3, [pc, #64]	@ (8000e38 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d207      	bcs.n	8000e14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e04:	f006 fffc 	bl	8007e00 <__errno>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e12:	e009      	b.n	8000e28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e14:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e1a:	4b07      	ldr	r3, [pc, #28]	@ (8000e38 <_sbrk+0x64>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	4a05      	ldr	r2, [pc, #20]	@ (8000e38 <_sbrk+0x64>)
 8000e24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e26:	68fb      	ldr	r3, [r7, #12]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20018000 	.word	0x20018000
 8000e34:	00000400 	.word	0x00000400
 8000e38:	200003ac 	.word	0x200003ac
 8000e3c:	20005860 	.word	0x20005860

08000e40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e44:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <SystemInit+0x20>)
 8000e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e4a:	4a05      	ldr	r2, [pc, #20]	@ (8000e60 <SystemInit+0x20>)
 8000e4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e68:	4b14      	ldr	r3, [pc, #80]	@ (8000ebc <MX_USART2_UART_Init+0x58>)
 8000e6a:	4a15      	ldr	r2, [pc, #84]	@ (8000ec0 <MX_USART2_UART_Init+0x5c>)
 8000e6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e6e:	4b13      	ldr	r3, [pc, #76]	@ (8000ebc <MX_USART2_UART_Init+0x58>)
 8000e70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e76:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <MX_USART2_UART_Init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ebc <MX_USART2_UART_Init+0x58>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	@ (8000ebc <MX_USART2_UART_Init+0x58>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	@ (8000ebc <MX_USART2_UART_Init+0x58>)
 8000e8a:	220c      	movs	r2, #12
 8000e8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ebc <MX_USART2_UART_Init+0x58>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e94:	4b09      	ldr	r3, [pc, #36]	@ (8000ebc <MX_USART2_UART_Init+0x58>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <MX_USART2_UART_Init+0x58>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <MX_USART2_UART_Init+0x58>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ea6:	4805      	ldr	r0, [pc, #20]	@ (8000ebc <MX_USART2_UART_Init+0x58>)
 8000ea8:	f003 f8de 	bl	8004068 <HAL_UART_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000eb2:	f7ff fe0e 	bl	8000ad2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200003b0 	.word	0x200003b0
 8000ec0:	40004400 	.word	0x40004400

08000ec4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b0ac      	sub	sp, #176	@ 0xb0
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2288      	movs	r2, #136	@ 0x88
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f006 ff3d 	bl	8007d64 <memset>
  if(uartHandle->Instance==USART2)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a25      	ldr	r2, [pc, #148]	@ (8000f84 <HAL_UART_MspInit+0xc0>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d143      	bne.n	8000f7c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	4618      	mov	r0, r3
 8000f02:	f001 ff63 	bl	8002dcc <HAL_RCCEx_PeriphCLKConfig>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f0c:	f7ff fde1 	bl	8000ad2 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f10:	4b1d      	ldr	r3, [pc, #116]	@ (8000f88 <HAL_UART_MspInit+0xc4>)
 8000f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f14:	4a1c      	ldr	r2, [pc, #112]	@ (8000f88 <HAL_UART_MspInit+0xc4>)
 8000f16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f88 <HAL_UART_MspInit+0xc4>)
 8000f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f28:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <HAL_UART_MspInit+0xc4>)
 8000f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2c:	4a16      	ldr	r2, [pc, #88]	@ (8000f88 <HAL_UART_MspInit+0xc4>)
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f34:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <HAL_UART_MspInit+0xc4>)
 8000f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f40:	230c      	movs	r3, #12
 8000f42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f58:	2307      	movs	r3, #7
 8000f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f62:	4619      	mov	r1, r3
 8000f64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f68:	f000 fdbe 	bl	8001ae8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2105      	movs	r1, #5
 8000f70:	2026      	movs	r0, #38	@ 0x26
 8000f72:	f000 fd04 	bl	800197e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f76:	2026      	movs	r0, #38	@ 0x26
 8000f78:	f000 fd1d 	bl	80019b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	37b0      	adds	r7, #176	@ 0xb0
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40004400 	.word	0x40004400
 8000f88:	40021000 	.word	0x40021000

08000f8c <Reset_Handler>:
 8000f8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fc4 <LoopForever+0x2>
 8000f90:	f7ff ff56 	bl	8000e40 <SystemInit>
 8000f94:	480c      	ldr	r0, [pc, #48]	@ (8000fc8 <LoopForever+0x6>)
 8000f96:	490d      	ldr	r1, [pc, #52]	@ (8000fcc <LoopForever+0xa>)
 8000f98:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd0 <LoopForever+0xe>)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e002      	b.n	8000fa4 <LoopCopyDataInit>

08000f9e <CopyDataInit>:
 8000f9e:	58d4      	ldr	r4, [r2, r3]
 8000fa0:	50c4      	str	r4, [r0, r3]
 8000fa2:	3304      	adds	r3, #4

08000fa4 <LoopCopyDataInit>:
 8000fa4:	18c4      	adds	r4, r0, r3
 8000fa6:	428c      	cmp	r4, r1
 8000fa8:	d3f9      	bcc.n	8000f9e <CopyDataInit>
 8000faa:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd4 <LoopForever+0x12>)
 8000fac:	4c0a      	ldr	r4, [pc, #40]	@ (8000fd8 <LoopForever+0x16>)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e001      	b.n	8000fb6 <LoopFillZerobss>

08000fb2 <FillZerobss>:
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	3204      	adds	r2, #4

08000fb6 <LoopFillZerobss>:
 8000fb6:	42a2      	cmp	r2, r4
 8000fb8:	d3fb      	bcc.n	8000fb2 <FillZerobss>
 8000fba:	f006 ff27 	bl	8007e0c <__libc_init_array>
 8000fbe:	f7ff fcd1 	bl	8000964 <main>

08000fc2 <LoopForever>:
 8000fc2:	e7fe      	b.n	8000fc2 <LoopForever>
 8000fc4:	20018000 	.word	0x20018000
 8000fc8:	20000000 	.word	0x20000000
 8000fcc:	20000074 	.word	0x20000074
 8000fd0:	08009010 	.word	0x08009010
 8000fd4:	20000074 	.word	0x20000074
 8000fd8:	2000585c 	.word	0x2000585c

08000fdc <ADC1_2_IRQHandler>:
 8000fdc:	e7fe      	b.n	8000fdc <ADC1_2_IRQHandler>
	...

08000fe0 <MCP23S17_WriteRegister>:

MCP23S17_handler hMCP23S17;


// Function to write to a register of MCP23S17 with error handling
void MCP23S17_WriteRegister(uint8_t reg, uint8_t data) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	460a      	mov	r2, r1
 8000fea:	71fb      	strb	r3, [r7, #7]
 8000fec:	4613      	mov	r3, r2
 8000fee:	71bb      	strb	r3, [r7, #6]
	uint8_t control_byte = MCP23S17_CONTROL_BYTE(MCP23S17_CONTROL_ADDR, VU_WRITE); // Address = 0b000
 8000ff0:	2340      	movs	r3, #64	@ 0x40
 8000ff2:	73bb      	strb	r3, [r7, #14]

	uint8_t buffer[2] = {reg, data};
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	733b      	strb	r3, [r7, #12]
 8000ff8:	79bb      	ldrb	r3, [r7, #6]
 8000ffa:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status;

	// Assert chip select
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2180      	movs	r1, #128	@ 0x80
 8001000:	4820      	ldr	r0, [pc, #128]	@ (8001084 <MCP23S17_WriteRegister+0xa4>)
 8001002:	f000 ff1b 	bl	8001e3c <HAL_GPIO_WritePin>

	// Transmit control byte
	status = HAL_SPI_Transmit(hMCP23S17.hspi, &control_byte, 1, HAL_MAX_DELAY);
 8001006:	4b20      	ldr	r3, [pc, #128]	@ (8001088 <MCP23S17_WriteRegister+0xa8>)
 8001008:	6818      	ldr	r0, [r3, #0]
 800100a:	f107 010e 	add.w	r1, r7, #14
 800100e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001012:	2201      	movs	r2, #1
 8001014:	f002 fc39 	bl	800388a <HAL_SPI_Transmit>
 8001018:	4603      	mov	r3, r0
 800101a:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00c      	beq.n	800103c <MCP23S17_WriteRegister+0x5c>
		HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET); // Deassert chip select
 8001022:	2201      	movs	r2, #1
 8001024:	2180      	movs	r1, #128	@ 0x80
 8001026:	4817      	ldr	r0, [pc, #92]	@ (8001084 <MCP23S17_WriteRegister+0xa4>)
 8001028:	f000 ff08 	bl	8001e3c <HAL_GPIO_WritePin>
		printf("Error: Failed to transmit control byte (HAL_SPI_Transmit returned %d)\r\n", status);
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	4619      	mov	r1, r3
 8001030:	4816      	ldr	r0, [pc, #88]	@ (800108c <MCP23S17_WriteRegister+0xac>)
 8001032:	f006 fd1b 	bl	8007a6c <iprintf>
		Error_Handler(); // Handle the error
 8001036:	f7ff fd4c 	bl	8000ad2 <Error_Handler>
		return; // Prevent further execution
 800103a:	e01f      	b.n	800107c <MCP23S17_WriteRegister+0x9c>
#if (LOGS)
	printf("SPI3 control transmission status: %d\r\n", status);
#endif

	// Transmit register address and data
	status = HAL_SPI_Transmit(hMCP23S17.hspi, buffer, 2, HAL_MAX_DELAY);
 800103c:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <MCP23S17_WriteRegister+0xa8>)
 800103e:	6818      	ldr	r0, [r3, #0]
 8001040:	f107 010c 	add.w	r1, r7, #12
 8001044:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001048:	2202      	movs	r2, #2
 800104a:	f002 fc1e 	bl	800388a <HAL_SPI_Transmit>
 800104e:	4603      	mov	r3, r0
 8001050:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00c      	beq.n	8001072 <MCP23S17_WriteRegister+0x92>
		HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET); // Deassert chip select
 8001058:	2201      	movs	r2, #1
 800105a:	2180      	movs	r1, #128	@ 0x80
 800105c:	4809      	ldr	r0, [pc, #36]	@ (8001084 <MCP23S17_WriteRegister+0xa4>)
 800105e:	f000 feed 	bl	8001e3c <HAL_GPIO_WritePin>
		printf("Error: Failed to transmit register data (HAL_SPI_Transmit returned %d)\r\n", status);
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	4619      	mov	r1, r3
 8001066:	480a      	ldr	r0, [pc, #40]	@ (8001090 <MCP23S17_WriteRegister+0xb0>)
 8001068:	f006 fd00 	bl	8007a6c <iprintf>
		Error_Handler(); // Handle the error
 800106c:	f7ff fd31 	bl	8000ad2 <Error_Handler>
		return; // Prevent further execution
 8001070:	e004      	b.n	800107c <MCP23S17_WriteRegister+0x9c>
#if (LOGS)
	printf("SPI3 data Ox%X transmission to register 0x%X status: %d\r\n", data, reg, status);
#endif

	// Deassert chip select
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 8001072:	2201      	movs	r2, #1
 8001074:	2180      	movs	r1, #128	@ 0x80
 8001076:	4803      	ldr	r0, [pc, #12]	@ (8001084 <MCP23S17_WriteRegister+0xa4>)
 8001078:	f000 fee0 	bl	8001e3c <HAL_GPIO_WritePin>
}
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	48000400 	.word	0x48000400
 8001088:	20000438 	.word	0x20000438
 800108c:	08008cf4 	.word	0x08008cf4
 8001090:	08008d3c 	.word	0x08008d3c

08001094 <MCP23S17_Update_LEDs>:

void MCP23S17_Update_LEDs() {
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	MCP23S17_WriteRegister(MCP23S17_OLATA, hMCP23S17.GPA); // All LEDs on GPIOA OFF
 8001098:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <MCP23S17_Update_LEDs+0x20>)
 800109a:	791b      	ldrb	r3, [r3, #4]
 800109c:	4619      	mov	r1, r3
 800109e:	2014      	movs	r0, #20
 80010a0:	f7ff ff9e 	bl	8000fe0 <MCP23S17_WriteRegister>
	MCP23S17_WriteRegister(MCP23S17_OLATB, hMCP23S17.GPB); // All LEDs on GPIOB OFF
 80010a4:	4b03      	ldr	r3, [pc, #12]	@ (80010b4 <MCP23S17_Update_LEDs+0x20>)
 80010a6:	795b      	ldrb	r3, [r3, #5]
 80010a8:	4619      	mov	r1, r3
 80010aa:	2015      	movs	r0, #21
 80010ac:	f7ff ff98 	bl	8000fe0 <MCP23S17_WriteRegister>
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000438 	.word	0x20000438

080010b8 <MCP23S17_Init>:

void MCP23S17_Init(void) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	hMCP23S17.hspi = &hspi3;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	@ (80010fc <MCP23S17_Init+0x44>)
 80010be:	4a10      	ldr	r2, [pc, #64]	@ (8001100 <MCP23S17_Init+0x48>)
 80010c0:	601a      	str	r2, [r3, #0]

	// nRESET to base state
	HAL_GPIO_WritePin(VU_nRESET_GPIO_Port, VU_nRESET_Pin, GPIO_PIN_SET);
 80010c2:	2201      	movs	r2, #1
 80010c4:	2101      	movs	r1, #1
 80010c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ca:	f000 feb7 	bl	8001e3c <HAL_GPIO_WritePin>

	// nCS to reset state
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 80010ce:	2201      	movs	r2, #1
 80010d0:	2180      	movs	r1, #128	@ 0x80
 80010d2:	480c      	ldr	r0, [pc, #48]	@ (8001104 <MCP23S17_Init+0x4c>)
 80010d4:	f000 feb2 	bl	8001e3c <HAL_GPIO_WritePin>

	// Set all GPIOA and GPIOB pins as outputs
	MCP23S17_WriteRegister(MCP23S17_IODIRA, MCP23S17_ALL_ON); // GPA as output
 80010d8:	2100      	movs	r1, #0
 80010da:	2000      	movs	r0, #0
 80010dc:	f7ff ff80 	bl	8000fe0 <MCP23S17_WriteRegister>
	MCP23S17_WriteRegister(MCP23S17_IODIRB, MCP23S17_ALL_ON); // GPB as output
 80010e0:	2100      	movs	r1, #0
 80010e2:	2001      	movs	r0, #1
 80010e4:	f7ff ff7c 	bl	8000fe0 <MCP23S17_WriteRegister>

	hMCP23S17.GPA = 0xFF;	// All LEDs on GPIOA OFF
 80010e8:	4b04      	ldr	r3, [pc, #16]	@ (80010fc <MCP23S17_Init+0x44>)
 80010ea:	22ff      	movs	r2, #255	@ 0xff
 80010ec:	711a      	strb	r2, [r3, #4]
	hMCP23S17.GPB = 0xFF;	// All LEDs on GPIOB OFF
 80010ee:	4b03      	ldr	r3, [pc, #12]	@ (80010fc <MCP23S17_Init+0x44>)
 80010f0:	22ff      	movs	r2, #255	@ 0xff
 80010f2:	715a      	strb	r2, [r3, #5]

	MCP23S17_Update_LEDs();
 80010f4:	f7ff ffce 	bl	8001094 <MCP23S17_Update_LEDs>
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000438 	.word	0x20000438
 8001100:	20000348 	.word	0x20000348
 8001104:	48000400 	.word	0x48000400

08001108 <MCP23S17_Toggle_LED_id>:

	MCP23S17_Update_LEDs();
}

void MCP23S17_Toggle_LED_id(uint8_t led)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
	if (led > 7)
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	2b07      	cmp	r3, #7
 8001116:	d911      	bls.n	800113c <MCP23S17_Toggle_LED_id+0x34>
	{
		hMCP23S17.GPB &= ~(1 << led%8) | ~(hMCP23S17.GPB & (1 << led%8));
 8001118:	4b13      	ldr	r3, [pc, #76]	@ (8001168 <MCP23S17_Toggle_LED_id+0x60>)
 800111a:	795b      	ldrb	r3, [r3, #5]
 800111c:	b25a      	sxtb	r2, r3
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	f003 0307 	and.w	r3, r3, #7
 8001124:	2101      	movs	r1, #1
 8001126:	fa01 f303 	lsl.w	r3, r1, r3
 800112a:	b25b      	sxtb	r3, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	b25b      	sxtb	r3, r3
 8001130:	4013      	ands	r3, r2
 8001132:	b25b      	sxtb	r3, r3
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <MCP23S17_Toggle_LED_id+0x60>)
 8001138:	715a      	strb	r2, [r3, #5]
 800113a:	e00e      	b.n	800115a <MCP23S17_Toggle_LED_id+0x52>
	}
	else
	{
		hMCP23S17.GPA &= ~(1 << led) | ~(hMCP23S17.GPA & (1 << led));
 800113c:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <MCP23S17_Toggle_LED_id+0x60>)
 800113e:	791b      	ldrb	r3, [r3, #4]
 8001140:	b25a      	sxtb	r2, r3
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	2101      	movs	r1, #1
 8001146:	fa01 f303 	lsl.w	r3, r1, r3
 800114a:	b25b      	sxtb	r3, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	b25b      	sxtb	r3, r3
 8001150:	4013      	ands	r3, r2
 8001152:	b25b      	sxtb	r3, r3
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4b04      	ldr	r3, [pc, #16]	@ (8001168 <MCP23S17_Toggle_LED_id+0x60>)
 8001158:	711a      	strb	r2, [r3, #4]
	}

	MCP23S17_Update_LEDs();
 800115a:	f7ff ff9b 	bl	8001094 <MCP23S17_Update_LEDs>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000438 	.word	0x20000438

0800116c <fonction>:

#include "functions.h"


int fonction(int argc, char ** argv)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
	if (argc > 1)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b01      	cmp	r3, #1
 800117a:	dd14      	ble.n	80011a6 <fonction+0x3a>
	{
		for (int i = 0; i < argc; i++)
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	e00d      	b.n	800119e <fonction+0x32>
		{
			printf("Paramètre [%d] = %s\r\n", i+1, argv[i]);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	1c59      	adds	r1, r3, #1
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	4413      	add	r3, r2
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	4807      	ldr	r0, [pc, #28]	@ (80011b0 <fonction+0x44>)
 8001194:	f006 fc6a 	bl	8007a6c <iprintf>
		for (int i = 0; i < argc; i++)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	3301      	adds	r3, #1
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	dbed      	blt.n	8001182 <fonction+0x16>
		}
	}

	return 0;
 80011a6:	2300      	movs	r3, #0
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	08008d88 	.word	0x08008d88

080011b4 <calcul>:

int calcul(int argc, char ** argv)
{
 80011b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
	if (argc >= 4)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	dd68      	ble.n	8001296 <calcul+0xe2>
	{
		switch(argv[2][0])
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	3308      	adds	r3, #8
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b78      	cmp	r3, #120	@ 0x78
 80011ce:	d03f      	beq.n	8001250 <calcul+0x9c>
 80011d0:	2b78      	cmp	r3, #120	@ 0x78
 80011d2:	dc59      	bgt.n	8001288 <calcul+0xd4>
 80011d4:	2b2d      	cmp	r3, #45	@ 0x2d
 80011d6:	d020      	beq.n	800121a <calcul+0x66>
 80011d8:	2b2d      	cmp	r3, #45	@ 0x2d
 80011da:	dc55      	bgt.n	8001288 <calcul+0xd4>
 80011dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80011de:	d037      	beq.n	8001250 <calcul+0x9c>
 80011e0:	2b2b      	cmp	r3, #43	@ 0x2b
 80011e2:	d151      	bne.n	8001288 <calcul+0xd4>
		{
		case '+':
			printf("%s + %s = %d\r\n", argv[1], argv[3], atoi(argv[1])+atoi(argv[3]));
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	3304      	adds	r3, #4
 80011e8:	681c      	ldr	r4, [r3, #0]
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	330c      	adds	r3, #12
 80011ee:	681d      	ldr	r5, [r3, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	3304      	adds	r3, #4
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f006 faee 	bl	80077d8 <atoi>
 80011fc:	4606      	mov	r6, r0
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	330c      	adds	r3, #12
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f006 fae7 	bl	80077d8 <atoi>
 800120a:	4603      	mov	r3, r0
 800120c:	4433      	add	r3, r6
 800120e:	462a      	mov	r2, r5
 8001210:	4621      	mov	r1, r4
 8001212:	4823      	ldr	r0, [pc, #140]	@ (80012a0 <calcul+0xec>)
 8001214:	f006 fc2a 	bl	8007a6c <iprintf>
			break;
 8001218:	e03d      	b.n	8001296 <calcul+0xe2>
		case '-':
			printf("%s - %s = %d\r\n", argv[1], argv[3], atoi(argv[1])-atoi(argv[3]));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	3304      	adds	r3, #4
 800121e:	681c      	ldr	r4, [r3, #0]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	330c      	adds	r3, #12
 8001224:	681d      	ldr	r5, [r3, #0]
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	3304      	adds	r3, #4
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f006 fad3 	bl	80077d8 <atoi>
 8001232:	4606      	mov	r6, r0
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	330c      	adds	r3, #12
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f006 facc 	bl	80077d8 <atoi>
 8001240:	4603      	mov	r3, r0
 8001242:	1af3      	subs	r3, r6, r3
 8001244:	462a      	mov	r2, r5
 8001246:	4621      	mov	r1, r4
 8001248:	4816      	ldr	r0, [pc, #88]	@ (80012a4 <calcul+0xf0>)
 800124a:	f006 fc0f 	bl	8007a6c <iprintf>
			break;
 800124e:	e022      	b.n	8001296 <calcul+0xe2>
		case '*':
		case 'x':
			printf("%s * %s = %d\r\n", argv[1], argv[3], atoi(argv[1])*atoi(argv[3]));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	3304      	adds	r3, #4
 8001254:	681c      	ldr	r4, [r3, #0]
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	330c      	adds	r3, #12
 800125a:	681d      	ldr	r5, [r3, #0]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	3304      	adds	r3, #4
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f006 fab8 	bl	80077d8 <atoi>
 8001268:	4606      	mov	r6, r0
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	330c      	adds	r3, #12
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f006 fab1 	bl	80077d8 <atoi>
 8001276:	4603      	mov	r3, r0
 8001278:	fb06 f303 	mul.w	r3, r6, r3
 800127c:	462a      	mov	r2, r5
 800127e:	4621      	mov	r1, r4
 8001280:	4809      	ldr	r0, [pc, #36]	@ (80012a8 <calcul+0xf4>)
 8001282:	f006 fbf3 	bl	8007a6c <iprintf>
			break;
 8001286:	e006      	b.n	8001296 <calcul+0xe2>
		default:
			printf("Opération '%s' non supporté!\r\n", argv[2]);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	3308      	adds	r3, #8
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4619      	mov	r1, r3
 8001290:	4806      	ldr	r0, [pc, #24]	@ (80012ac <calcul+0xf8>)
 8001292:	f006 fbeb 	bl	8007a6c <iprintf>
		}
	}

	return 0;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012a0:	08008da0 	.word	0x08008da0
 80012a4:	08008db0 	.word	0x08008db0
 80012a8:	08008dc0 	.word	0x08008dc0
 80012ac:	08008dd0 	.word	0x08008dd0

080012b0 <addition>:

int addition(int argc, char ** argv)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
	if (argc > 1)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	dd24      	ble.n	800130a <addition+0x5a>
	{
		int somme = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
		for (int i = 1; i < argc; i++)
 80012c4:	2301      	movs	r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	e017      	b.n	80012fa <addition+0x4a>
		{
			printf(" + %s", argv[i]);
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	4413      	add	r3, r2
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4619      	mov	r1, r3
 80012d6:	480f      	ldr	r0, [pc, #60]	@ (8001314 <addition+0x64>)
 80012d8:	f006 fbc8 	bl	8007a6c <iprintf>
			somme = somme + atoi(argv[i]);
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	4413      	add	r3, r2
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f006 fa76 	bl	80077d8 <atoi>
 80012ec:	4602      	mov	r2, r0
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4413      	add	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]
		for (int i = 1; i < argc; i++)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	3301      	adds	r3, #1
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	429a      	cmp	r2, r3
 8001300:	dbe3      	blt.n	80012ca <addition+0x1a>
		}

		printf(" = %d\r\n", somme);
 8001302:	68f9      	ldr	r1, [r7, #12]
 8001304:	4804      	ldr	r0, [pc, #16]	@ (8001318 <addition+0x68>)
 8001306:	f006 fbb1 	bl	8007a6c <iprintf>
	}
	return 0;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	08008df4 	.word	0x08008df4
 8001318:	08008dfc 	.word	0x08008dfc

0800131c <shell_uart_receive_irq_cb>:
static char print_buffer[BUFFER_SIZE];
static SemaphoreHandle_t sem_uart_read = NULL;


void shell_uart_receive_irq_cb(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]

	xSemaphoreGiveFromISR(sem_uart_read, &pxHigherPriorityTaskWoken);
 8001326:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <shell_uart_receive_irq_cb+0x38>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	1d3a      	adds	r2, r7, #4
 800132c:	4611      	mov	r1, r2
 800132e:	4618      	mov	r0, r3
 8001330:	f004 fc7c 	bl	8005c2c <xQueueGiveFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d007      	beq.n	800134a <shell_uart_receive_irq_cb+0x2e>
 800133a:	4b07      	ldr	r3, [pc, #28]	@ (8001358 <shell_uart_receive_irq_cb+0x3c>)
 800133c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	f3bf 8f4f 	dsb	sy
 8001346:	f3bf 8f6f 	isb	sy
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2000076c 	.word	0x2000076c
 8001358:	e000ed04 	.word	0xe000ed04

0800135c <uart_read>:

static char uart_read() {
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
	char c;

	HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t*)(&c), 1);
 8001362:	1dfb      	adds	r3, r7, #7
 8001364:	2201      	movs	r2, #1
 8001366:	4619      	mov	r1, r3
 8001368:	4807      	ldr	r0, [pc, #28]	@ (8001388 <uart_read+0x2c>)
 800136a:	f002 ff55 	bl	8004218 <HAL_UART_Receive_IT>
	// il faut mettre la tâche shell dans l'état bloqué, jusqu'à l'interruption de réception de caractère
	// prendre un sémaphore vide par exemple
	xSemaphoreTake(sem_uart_read, portMAX_DELAY);
 800136e:	4b07      	ldr	r3, [pc, #28]	@ (800138c <uart_read+0x30>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001376:	4618      	mov	r0, r3
 8001378:	f004 fce8 	bl	8005d4c <xQueueSemaphoreTake>

	return c;
 800137c:	79fb      	ldrb	r3, [r7, #7]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200003b0 	.word	0x200003b0
 800138c:	2000076c 	.word	0x2000076c

08001390 <uart_write>:

static int uart_write(char * s, uint16_t size) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
 800139c:	887a      	ldrh	r2, [r7, #2]
 800139e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	4803      	ldr	r0, [pc, #12]	@ (80013b4 <uart_write+0x24>)
 80013a6:	f002 fead 	bl	8004104 <HAL_UART_Transmit>
	return size;
 80013aa:	887b      	ldrh	r3, [r7, #2]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200003b0 	.word	0x200003b0

080013b8 <sh_help>:

static int sh_help(int argc, char ** argv) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af02      	add	r7, sp, #8
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	e022      	b.n	800140e <sh_help+0x56>
		int size;
		size = snprintf (print_buffer, BUFFER_SIZE, "%c: %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 80013c8:	4916      	ldr	r1, [pc, #88]	@ (8001424 <sh_help+0x6c>)
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	4613      	mov	r3, r2
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4413      	add	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	4912      	ldr	r1, [pc, #72]	@ (8001424 <sh_help+0x6c>)
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	4613      	mov	r3, r2
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	4413      	add	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	440b      	add	r3, r1
 80013e8:	3308      	adds	r3, #8
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	4603      	mov	r3, r0
 80013f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001428 <sh_help+0x70>)
 80013f2:	2128      	movs	r1, #40	@ 0x28
 80013f4:	480d      	ldr	r0, [pc, #52]	@ (800142c <sh_help+0x74>)
 80013f6:	f006 fba9 	bl	8007b4c <sniprintf>
 80013fa:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	4619      	mov	r1, r3
 8001402:	480a      	ldr	r0, [pc, #40]	@ (800142c <sh_help+0x74>)
 8001404:	f7ff ffc4 	bl	8001390 <uart_write>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	3301      	adds	r3, #1
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b08      	ldr	r3, [pc, #32]	@ (8001430 <sh_help+0x78>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	429a      	cmp	r2, r3
 8001416:	dbd7      	blt.n	80013c8 <sh_help+0x10>
	}

	return 0;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000444 	.word	0x20000444
 8001428:	08008e04 	.word	0x08008e04
 800142c:	20000744 	.word	0x20000744
 8001430:	20000440 	.word	0x20000440

08001434 <shell_init>:

void shell_init() {
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
	int size = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]

	size = snprintf (print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 800143e:	4a13      	ldr	r2, [pc, #76]	@ (800148c <shell_init+0x58>)
 8001440:	2128      	movs	r1, #40	@ 0x28
 8001442:	4813      	ldr	r0, [pc, #76]	@ (8001490 <shell_init+0x5c>)
 8001444:	f006 fb82 	bl	8007b4c <sniprintf>
 8001448:	6078      	str	r0, [r7, #4]
	uart_write(print_buffer, size);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	b29b      	uxth	r3, r3
 800144e:	4619      	mov	r1, r3
 8001450:	480f      	ldr	r0, [pc, #60]	@ (8001490 <shell_init+0x5c>)
 8001452:	f7ff ff9d 	bl	8001390 <uart_write>

	sem_uart_read = xSemaphoreCreateBinary();
 8001456:	2203      	movs	r2, #3
 8001458:	2100      	movs	r1, #0
 800145a:	2001      	movs	r0, #1
 800145c:	f004 fb8c 	bl	8005b78 <xQueueGenericCreate>
 8001460:	4603      	mov	r3, r0
 8001462:	4a0c      	ldr	r2, [pc, #48]	@ (8001494 <shell_init+0x60>)
 8001464:	6013      	str	r3, [r2, #0]
	if (sem_uart_read == NULL)
 8001466:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <shell_init+0x60>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d104      	bne.n	8001478 <shell_init+0x44>
	{
		printf("Error semaphore shell\r\n");
 800146e:	480a      	ldr	r0, [pc, #40]	@ (8001498 <shell_init+0x64>)
 8001470:	f006 fb64 	bl	8007b3c <puts>
		while(1);
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <shell_init+0x40>
	}

	shell_add('h', sh_help, "Help");
 8001478:	4a08      	ldr	r2, [pc, #32]	@ (800149c <shell_init+0x68>)
 800147a:	4909      	ldr	r1, [pc, #36]	@ (80014a0 <shell_init+0x6c>)
 800147c:	2068      	movs	r0, #104	@ 0x68
 800147e:	f000 f811 	bl	80014a4 <shell_add>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	08008e10 	.word	0x08008e10
 8001490:	20000744 	.word	0x20000744
 8001494:	2000076c 	.word	0x2000076c
 8001498:	08008e38 	.word	0x08008e38
 800149c:	08008e50 	.word	0x08008e50
 80014a0:	080013b9 	.word	0x080013b9

080014a4 <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
 80014b0:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 80014b2:	4b19      	ldr	r3, [pc, #100]	@ (8001518 <shell_add+0x74>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b3f      	cmp	r3, #63	@ 0x3f
 80014b8:	dc26      	bgt.n	8001508 <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 80014ba:	4b17      	ldr	r3, [pc, #92]	@ (8001518 <shell_add+0x74>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	4917      	ldr	r1, [pc, #92]	@ (800151c <shell_add+0x78>)
 80014c0:	4613      	mov	r3, r2
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	4413      	add	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	7bfa      	ldrb	r2, [r7, #15]
 80014cc:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 80014ce:	4b12      	ldr	r3, [pc, #72]	@ (8001518 <shell_add+0x74>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4912      	ldr	r1, [pc, #72]	@ (800151c <shell_add+0x78>)
 80014d4:	4613      	mov	r3, r2
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	3304      	adds	r3, #4
 80014e0:	68ba      	ldr	r2, [r7, #8]
 80014e2:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001518 <shell_add+0x74>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	490c      	ldr	r1, [pc, #48]	@ (800151c <shell_add+0x78>)
 80014ea:	4613      	mov	r3, r2
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	4413      	add	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	440b      	add	r3, r1
 80014f4:	3308      	adds	r3, #8
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 80014fa:	4b07      	ldr	r3, [pc, #28]	@ (8001518 <shell_add+0x74>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	3301      	adds	r3, #1
 8001500:	4a05      	ldr	r2, [pc, #20]	@ (8001518 <shell_add+0x74>)
 8001502:	6013      	str	r3, [r2, #0]
		return 0;
 8001504:	2300      	movs	r3, #0
 8001506:	e001      	b.n	800150c <shell_add+0x68>
	}

	return -1;
 8001508:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800150c:	4618      	mov	r0, r3
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	20000440 	.word	0x20000440
 800151c:	20000444 	.word	0x20000444

08001520 <shell_exec>:

static int shell_exec(char * buf) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b090      	sub	sp, #64	@ 0x40
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	int i;

	char c = buf[0];
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001530:	2300      	movs	r3, #0
 8001532:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001534:	e040      	b.n	80015b8 <shell_exec+0x98>
		if (shell_func_list[i].c == c) {
 8001536:	492d      	ldr	r1, [pc, #180]	@ (80015ec <shell_exec+0xcc>)
 8001538:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800153a:	4613      	mov	r3, r2
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	4413      	add	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800154a:	429a      	cmp	r2, r3
 800154c:	d131      	bne.n	80015b2 <shell_exec+0x92>
			argc = 1;
 800154e:	2301      	movs	r3, #1
 8001550:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	637b      	str	r3, [r7, #52]	@ 0x34
 800155a:	e013      	b.n	8001584 <shell_exec+0x64>
				if(*p == ' ') {
 800155c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b20      	cmp	r3, #32
 8001562:	d10c      	bne.n	800157e <shell_exec+0x5e>
					*p = '\0';
 8001564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 800156a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800156c:	1c5a      	adds	r2, r3, #1
 800156e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001570:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001572:	3201      	adds	r2, #1
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	3340      	adds	r3, #64	@ 0x40
 8001578:	443b      	add	r3, r7
 800157a:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 800157e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001580:	3301      	adds	r3, #1
 8001582:	637b      	str	r3, [r7, #52]	@ 0x34
 8001584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d002      	beq.n	8001592 <shell_exec+0x72>
 800158c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800158e:	2b07      	cmp	r3, #7
 8001590:	dde4      	ble.n	800155c <shell_exec+0x3c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 8001592:	4916      	ldr	r1, [pc, #88]	@ (80015ec <shell_exec+0xcc>)
 8001594:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001596:	4613      	mov	r3, r2
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	4413      	add	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	440b      	add	r3, r1
 80015a0:	3304      	adds	r3, #4
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f107 020c 	add.w	r2, r7, #12
 80015a8:	4611      	mov	r1, r2
 80015aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80015ac:	4798      	blx	r3
 80015ae:	4603      	mov	r3, r0
 80015b0:	e017      	b.n	80015e2 <shell_exec+0xc2>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 80015b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015b4:	3301      	adds	r3, #1
 80015b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015b8:	4b0d      	ldr	r3, [pc, #52]	@ (80015f0 <shell_exec+0xd0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80015be:	429a      	cmp	r2, r3
 80015c0:	dbb9      	blt.n	8001536 <shell_exec+0x16>
		}
	}

	int size;
	size = snprintf (print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 80015c2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015c6:	4a0b      	ldr	r2, [pc, #44]	@ (80015f4 <shell_exec+0xd4>)
 80015c8:	2128      	movs	r1, #40	@ 0x28
 80015ca:	480b      	ldr	r0, [pc, #44]	@ (80015f8 <shell_exec+0xd8>)
 80015cc:	f006 fabe 	bl	8007b4c <sniprintf>
 80015d0:	62f8      	str	r0, [r7, #44]	@ 0x2c
	uart_write(print_buffer, size);
 80015d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	4619      	mov	r1, r3
 80015d8:	4807      	ldr	r0, [pc, #28]	@ (80015f8 <shell_exec+0xd8>)
 80015da:	f7ff fed9 	bl	8001390 <uart_write>
	return -1;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3740      	adds	r7, #64	@ 0x40
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000444 	.word	0x20000444
 80015f0:	20000440 	.word	0x20000440
 80015f4:	08008e58 	.word	0x08008e58
 80015f8:	20000744 	.word	0x20000744

080015fc <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run() {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
	int reading = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]

	static char cmd_buffer[BUFFER_SIZE];

	while (1) {
		uart_write(prompt, 2);
 800160a:	2102      	movs	r1, #2
 800160c:	482a      	ldr	r0, [pc, #168]	@ (80016b8 <shell_run+0xbc>)
 800160e:	f7ff febf 	bl	8001390 <uart_write>
		reading = 1;
 8001612:	2301      	movs	r3, #1
 8001614:	60fb      	str	r3, [r7, #12]

		while(reading) {
 8001616:	e047      	b.n	80016a8 <shell_run+0xac>
			char c = uart_read();
 8001618:	f7ff fea0 	bl	800135c <uart_read>
 800161c:	4603      	mov	r3, r0
 800161e:	70fb      	strb	r3, [r7, #3]
			int size;

			switch (c) {
 8001620:	78fb      	ldrb	r3, [r7, #3]
 8001622:	2b08      	cmp	r3, #8
 8001624:	d025      	beq.n	8001672 <shell_run+0x76>
 8001626:	2b0d      	cmp	r3, #13
 8001628:	d12e      	bne.n	8001688 <shell_run+0x8c>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (print_buffer, BUFFER_SIZE, "\r\n");
 800162a:	4a24      	ldr	r2, [pc, #144]	@ (80016bc <shell_run+0xc0>)
 800162c:	2128      	movs	r1, #40	@ 0x28
 800162e:	4824      	ldr	r0, [pc, #144]	@ (80016c0 <shell_run+0xc4>)
 8001630:	f006 fa8c 	bl	8007b4c <sniprintf>
 8001634:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	b29b      	uxth	r3, r3
 800163a:	4619      	mov	r1, r3
 800163c:	4820      	ldr	r0, [pc, #128]	@ (80016c0 <shell_run+0xc4>)
 800163e:	f7ff fea7 	bl	8001390 <uart_write>
				cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	60ba      	str	r2, [r7, #8]
 8001648:	4a1e      	ldr	r2, [pc, #120]	@ (80016c4 <shell_run+0xc8>)
 800164a:	2100      	movs	r1, #0
 800164c:	54d1      	strb	r1, [r2, r3]
				size = snprintf (print_buffer, BUFFER_SIZE, ":%s\r\n", cmd_buffer);
 800164e:	4b1d      	ldr	r3, [pc, #116]	@ (80016c4 <shell_run+0xc8>)
 8001650:	4a1d      	ldr	r2, [pc, #116]	@ (80016c8 <shell_run+0xcc>)
 8001652:	2128      	movs	r1, #40	@ 0x28
 8001654:	481a      	ldr	r0, [pc, #104]	@ (80016c0 <shell_run+0xc4>)
 8001656:	f006 fa79 	bl	8007b4c <sniprintf>
 800165a:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	b29b      	uxth	r3, r3
 8001660:	4619      	mov	r1, r3
 8001662:	4817      	ldr	r0, [pc, #92]	@ (80016c0 <shell_run+0xc4>)
 8001664:	f7ff fe94 	bl	8001390 <uart_write>
				reading = 0;        //exit read loop
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
				pos = 0;            //reset buffer
 800166c:	2300      	movs	r3, #0
 800166e:	60bb      	str	r3, [r7, #8]
				break;
 8001670:	e01a      	b.n	80016a8 <shell_run+0xac>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	2b00      	cmp	r3, #0
 8001676:	dd16      	ble.n	80016a6 <shell_run+0xaa>
					pos--;          //remove it in buffer
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	3b01      	subs	r3, #1
 800167c:	60bb      	str	r3, [r7, #8]

					uart_write(backspace, 3);	// delete the char on the terminal
 800167e:	2103      	movs	r1, #3
 8001680:	4812      	ldr	r0, [pc, #72]	@ (80016cc <shell_run+0xd0>)
 8001682:	f7ff fe85 	bl	8001390 <uart_write>
				}
				break;
 8001686:	e00e      	b.n	80016a6 <shell_run+0xaa>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	2b27      	cmp	r3, #39	@ 0x27
 800168c:	dc0c      	bgt.n	80016a8 <shell_run+0xac>
					uart_write(&c, 1);
 800168e:	1cfb      	adds	r3, r7, #3
 8001690:	2101      	movs	r1, #1
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fe7c 	bl	8001390 <uart_write>
					cmd_buffer[pos++] = c; //store
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	60ba      	str	r2, [r7, #8]
 800169e:	78f9      	ldrb	r1, [r7, #3]
 80016a0:	4a08      	ldr	r2, [pc, #32]	@ (80016c4 <shell_run+0xc8>)
 80016a2:	54d1      	strb	r1, [r2, r3]
 80016a4:	e000      	b.n	80016a8 <shell_run+0xac>
				break;
 80016a6:	bf00      	nop
		while(reading) {
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1b4      	bne.n	8001618 <shell_run+0x1c>
				}
			}
		}
		shell_exec(cmd_buffer);
 80016ae:	4805      	ldr	r0, [pc, #20]	@ (80016c4 <shell_run+0xc8>)
 80016b0:	f7ff ff36 	bl	8001520 <shell_exec>
		uart_write(prompt, 2);
 80016b4:	e7a9      	b.n	800160a <shell_run+0xe>
 80016b6:	bf00      	nop
 80016b8:	20000008 	.word	0x20000008
 80016bc:	08008e70 	.word	0x08008e70
 80016c0:	20000744 	.word	0x20000744
 80016c4:	20000770 	.word	0x20000770
 80016c8:	08008e74 	.word	0x08008e74
 80016cc:	20000004 	.word	0x20000004

080016d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016da:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <HAL_Init+0x3c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a0b      	ldr	r2, [pc, #44]	@ (800170c <HAL_Init+0x3c>)
 80016e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e6:	2003      	movs	r0, #3
 80016e8:	f000 f93e 	bl	8001968 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ec:	200f      	movs	r0, #15
 80016ee:	f000 f80f 	bl	8001710 <HAL_InitTick>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d002      	beq.n	80016fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	71fb      	strb	r3, [r7, #7]
 80016fc:	e001      	b.n	8001702 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016fe:	f7ff fa97 	bl	8000c30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001702:	79fb      	ldrb	r3, [r7, #7]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40022000 	.word	0x40022000

08001710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001718:	2300      	movs	r3, #0
 800171a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800171c:	4b17      	ldr	r3, [pc, #92]	@ (800177c <HAL_InitTick+0x6c>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d023      	beq.n	800176c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001724:	4b16      	ldr	r3, [pc, #88]	@ (8001780 <HAL_InitTick+0x70>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b14      	ldr	r3, [pc, #80]	@ (800177c <HAL_InitTick+0x6c>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001732:	fbb3 f3f1 	udiv	r3, r3, r1
 8001736:	fbb2 f3f3 	udiv	r3, r2, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f949 	bl	80019d2 <HAL_SYSTICK_Config>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10f      	bne.n	8001766 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b0f      	cmp	r3, #15
 800174a:	d809      	bhi.n	8001760 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800174c:	2200      	movs	r2, #0
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001754:	f000 f913 	bl	800197e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001758:	4a0a      	ldr	r2, [pc, #40]	@ (8001784 <HAL_InitTick+0x74>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	e007      	b.n	8001770 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	e004      	b.n	8001770 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	73fb      	strb	r3, [r7, #15]
 800176a:	e001      	b.n	8001770 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001770:	7bfb      	ldrb	r3, [r7, #15]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000010 	.word	0x20000010
 8001780:	20000000 	.word	0x20000000
 8001784:	2000000c 	.word	0x2000000c

08001788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800178c:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HAL_IncTick+0x20>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <HAL_IncTick+0x24>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4413      	add	r3, r2
 8001798:	4a04      	ldr	r2, [pc, #16]	@ (80017ac <HAL_IncTick+0x24>)
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20000010 	.word	0x20000010
 80017ac:	20000798 	.word	0x20000798

080017b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return uwTick;
 80017b4:	4b03      	ldr	r3, [pc, #12]	@ (80017c4 <HAL_GetTick+0x14>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	20000798 	.word	0x20000798

080017c8 <__NVIC_SetPriorityGrouping>:
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d8:	4b0c      	ldr	r3, [pc, #48]	@ (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017e4:	4013      	ands	r3, r2
 80017e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fa:	4a04      	ldr	r2, [pc, #16]	@ (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	60d3      	str	r3, [r2, #12]
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_GetPriorityGrouping>:
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001814:	4b04      	ldr	r3, [pc, #16]	@ (8001828 <__NVIC_GetPriorityGrouping+0x18>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	f003 0307 	and.w	r3, r3, #7
}
 800181e:	4618      	mov	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_EnableIRQ>:
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	2b00      	cmp	r3, #0
 800183c:	db0b      	blt.n	8001856 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	f003 021f 	and.w	r2, r3, #31
 8001844:	4907      	ldr	r1, [pc, #28]	@ (8001864 <__NVIC_EnableIRQ+0x38>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	2001      	movs	r0, #1
 800184e:	fa00 f202 	lsl.w	r2, r0, r2
 8001852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000e100 	.word	0xe000e100

08001868 <__NVIC_SetPriority>:
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	6039      	str	r1, [r7, #0]
 8001872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001878:	2b00      	cmp	r3, #0
 800187a:	db0a      	blt.n	8001892 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	b2da      	uxtb	r2, r3
 8001880:	490c      	ldr	r1, [pc, #48]	@ (80018b4 <__NVIC_SetPriority+0x4c>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	0112      	lsls	r2, r2, #4
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	440b      	add	r3, r1
 800188c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001890:	e00a      	b.n	80018a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4908      	ldr	r1, [pc, #32]	@ (80018b8 <__NVIC_SetPriority+0x50>)
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	3b04      	subs	r3, #4
 80018a0:	0112      	lsls	r2, r2, #4
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	440b      	add	r3, r1
 80018a6:	761a      	strb	r2, [r3, #24]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000e100 	.word	0xe000e100
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <NVIC_EncodePriority>:
{
 80018bc:	b480      	push	{r7}
 80018be:	b089      	sub	sp, #36	@ 0x24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f1c3 0307 	rsb	r3, r3, #7
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	bf28      	it	cs
 80018da:	2304      	movcs	r3, #4
 80018dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3304      	adds	r3, #4
 80018e2:	2b06      	cmp	r3, #6
 80018e4:	d902      	bls.n	80018ec <NVIC_EncodePriority+0x30>
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3b03      	subs	r3, #3
 80018ea:	e000      	b.n	80018ee <NVIC_EncodePriority+0x32>
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43da      	mvns	r2, r3
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	401a      	ands	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001904:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	fa01 f303 	lsl.w	r3, r1, r3
 800190e:	43d9      	mvns	r1, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	4313      	orrs	r3, r2
}
 8001916:	4618      	mov	r0, r3
 8001918:	3724      	adds	r7, #36	@ 0x24
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
	...

08001924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001934:	d301      	bcc.n	800193a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001936:	2301      	movs	r3, #1
 8001938:	e00f      	b.n	800195a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193a:	4a0a      	ldr	r2, [pc, #40]	@ (8001964 <SysTick_Config+0x40>)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3b01      	subs	r3, #1
 8001940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001942:	210f      	movs	r1, #15
 8001944:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001948:	f7ff ff8e 	bl	8001868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800194c:	4b05      	ldr	r3, [pc, #20]	@ (8001964 <SysTick_Config+0x40>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001952:	4b04      	ldr	r3, [pc, #16]	@ (8001964 <SysTick_Config+0x40>)
 8001954:	2207      	movs	r2, #7
 8001956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	e000e010 	.word	0xe000e010

08001968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff ff29 	bl	80017c8 <__NVIC_SetPriorityGrouping>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b086      	sub	sp, #24
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	607a      	str	r2, [r7, #4]
 800198a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001990:	f7ff ff3e 	bl	8001810 <__NVIC_GetPriorityGrouping>
 8001994:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	68b9      	ldr	r1, [r7, #8]
 800199a:	6978      	ldr	r0, [r7, #20]
 800199c:	f7ff ff8e 	bl	80018bc <NVIC_EncodePriority>
 80019a0:	4602      	mov	r2, r0
 80019a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff5d 	bl	8001868 <__NVIC_SetPriority>
}
 80019ae:	bf00      	nop
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff31 	bl	800182c <__NVIC_EnableIRQ>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff ffa2 	bl	8001924 <SysTick_Config>
 80019e0:	4603      	mov	r3, r0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b085      	sub	sp, #20
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d008      	beq.n	8001a14 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2204      	movs	r2, #4
 8001a06:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e022      	b.n	8001a5a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 020e 	bic.w	r2, r2, #14
 8001a22:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0201 	bic.w	r2, r2, #1
 8001a32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a38:	f003 021c 	and.w	r2, r3, #28
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a40:	2101      	movs	r1, #1
 8001a42:	fa01 f202 	lsl.w	r2, r1, r2
 8001a46:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b084      	sub	sp, #16
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d005      	beq.n	8001a8a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2204      	movs	r2, #4
 8001a82:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
 8001a88:	e029      	b.n	8001ade <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 020e 	bic.w	r2, r2, #14
 8001a98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 0201 	bic.w	r2, r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aae:	f003 021c 	and.w	r2, r3, #28
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8001abc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	4798      	blx	r3
    }
  }
  return status;
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b087      	sub	sp, #28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af6:	e17f      	b.n	8001df8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	2101      	movs	r1, #1
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	fa01 f303 	lsl.w	r3, r1, r3
 8001b04:	4013      	ands	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 8171 	beq.w	8001df2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d005      	beq.n	8001b28 <HAL_GPIO_Init+0x40>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d130      	bne.n	8001b8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	2203      	movs	r2, #3
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	68da      	ldr	r2, [r3, #12]
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b5e:	2201      	movs	r2, #1
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	091b      	lsrs	r3, r3, #4
 8001b74:	f003 0201 	and.w	r2, r3, #1
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d118      	bne.n	8001bc8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	08db      	lsrs	r3, r3, #3
 8001bb2:	f003 0201 	and.w	r2, r3, #1
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	d017      	beq.n	8001c04 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	2203      	movs	r2, #3
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d123      	bne.n	8001c58 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	08da      	lsrs	r2, r3, #3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3208      	adds	r2, #8
 8001c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	220f      	movs	r2, #15
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4013      	ands	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	691a      	ldr	r2, [r3, #16]
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	08da      	lsrs	r2, r3, #3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3208      	adds	r2, #8
 8001c52:	6939      	ldr	r1, [r7, #16]
 8001c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	2203      	movs	r2, #3
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 0203 	and.w	r2, r3, #3
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80ac 	beq.w	8001df2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9a:	4b5f      	ldr	r3, [pc, #380]	@ (8001e18 <HAL_GPIO_Init+0x330>)
 8001c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c9e:	4a5e      	ldr	r2, [pc, #376]	@ (8001e18 <HAL_GPIO_Init+0x330>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ca6:	4b5c      	ldr	r3, [pc, #368]	@ (8001e18 <HAL_GPIO_Init+0x330>)
 8001ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cb2:	4a5a      	ldr	r2, [pc, #360]	@ (8001e1c <HAL_GPIO_Init+0x334>)
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	089b      	lsrs	r3, r3, #2
 8001cb8:	3302      	adds	r3, #2
 8001cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	220f      	movs	r2, #15
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001cdc:	d025      	beq.n	8001d2a <HAL_GPIO_Init+0x242>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a4f      	ldr	r2, [pc, #316]	@ (8001e20 <HAL_GPIO_Init+0x338>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d01f      	beq.n	8001d26 <HAL_GPIO_Init+0x23e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a4e      	ldr	r2, [pc, #312]	@ (8001e24 <HAL_GPIO_Init+0x33c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d019      	beq.n	8001d22 <HAL_GPIO_Init+0x23a>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a4d      	ldr	r2, [pc, #308]	@ (8001e28 <HAL_GPIO_Init+0x340>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d013      	beq.n	8001d1e <HAL_GPIO_Init+0x236>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a4c      	ldr	r2, [pc, #304]	@ (8001e2c <HAL_GPIO_Init+0x344>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d00d      	beq.n	8001d1a <HAL_GPIO_Init+0x232>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a4b      	ldr	r2, [pc, #300]	@ (8001e30 <HAL_GPIO_Init+0x348>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d007      	beq.n	8001d16 <HAL_GPIO_Init+0x22e>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a4a      	ldr	r2, [pc, #296]	@ (8001e34 <HAL_GPIO_Init+0x34c>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d101      	bne.n	8001d12 <HAL_GPIO_Init+0x22a>
 8001d0e:	2306      	movs	r3, #6
 8001d10:	e00c      	b.n	8001d2c <HAL_GPIO_Init+0x244>
 8001d12:	2307      	movs	r3, #7
 8001d14:	e00a      	b.n	8001d2c <HAL_GPIO_Init+0x244>
 8001d16:	2305      	movs	r3, #5
 8001d18:	e008      	b.n	8001d2c <HAL_GPIO_Init+0x244>
 8001d1a:	2304      	movs	r3, #4
 8001d1c:	e006      	b.n	8001d2c <HAL_GPIO_Init+0x244>
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e004      	b.n	8001d2c <HAL_GPIO_Init+0x244>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e002      	b.n	8001d2c <HAL_GPIO_Init+0x244>
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <HAL_GPIO_Init+0x244>
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	f002 0203 	and.w	r2, r2, #3
 8001d32:	0092      	lsls	r2, r2, #2
 8001d34:	4093      	lsls	r3, r2
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d3c:	4937      	ldr	r1, [pc, #220]	@ (8001e1c <HAL_GPIO_Init+0x334>)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	089b      	lsrs	r3, r3, #2
 8001d42:	3302      	adds	r3, #2
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e38 <HAL_GPIO_Init+0x350>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4013      	ands	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d6e:	4a32      	ldr	r2, [pc, #200]	@ (8001e38 <HAL_GPIO_Init+0x350>)
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d74:	4b30      	ldr	r3, [pc, #192]	@ (8001e38 <HAL_GPIO_Init+0x350>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d98:	4a27      	ldr	r2, [pc, #156]	@ (8001e38 <HAL_GPIO_Init+0x350>)
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d9e:	4b26      	ldr	r3, [pc, #152]	@ (8001e38 <HAL_GPIO_Init+0x350>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4013      	ands	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dc2:	4a1d      	ldr	r2, [pc, #116]	@ (8001e38 <HAL_GPIO_Init+0x350>)
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e38 <HAL_GPIO_Init+0x350>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dec:	4a12      	ldr	r2, [pc, #72]	@ (8001e38 <HAL_GPIO_Init+0x350>)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	3301      	adds	r3, #1
 8001df6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f47f ae78 	bne.w	8001af8 <HAL_GPIO_Init+0x10>
  }
}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	371c      	adds	r7, #28
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40010000 	.word	0x40010000
 8001e20:	48000400 	.word	0x48000400
 8001e24:	48000800 	.word	0x48000800
 8001e28:	48000c00 	.word	0x48000c00
 8001e2c:	48001000 	.word	0x48001000
 8001e30:	48001400 	.word	0x48001400
 8001e34:	48001800 	.word	0x48001800
 8001e38:	40010400 	.word	0x40010400

08001e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	807b      	strh	r3, [r7, #2]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e4c:	787b      	ldrb	r3, [r7, #1]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e52:	887a      	ldrh	r2, [r7, #2]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e58:	e002      	b.n	8001e60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e5a:	887a      	ldrh	r2, [r7, #2]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e7e:	887a      	ldrh	r2, [r7, #2]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4013      	ands	r3, r2
 8001e84:	041a      	lsls	r2, r3, #16
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	43d9      	mvns	r1, r3
 8001e8a:	887b      	ldrh	r3, [r7, #2]
 8001e8c:	400b      	ands	r3, r1
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	619a      	str	r2, [r3, #24]
}
 8001e94:	bf00      	nop
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e08d      	b.n	8001fce <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d106      	bne.n	8001ecc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7fe fc44 	bl	8000754 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2224      	movs	r2, #36	@ 0x24
 8001ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0201 	bic.w	r2, r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ef0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d107      	bne.n	8001f1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	e006      	b.n	8001f28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001f26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d108      	bne.n	8001f42 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	e007      	b.n	8001f52 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691a      	ldr	r2, [r3, #16]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69d9      	ldr	r1, [r3, #28]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1a      	ldr	r2, [r3, #32]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0201 	orr.w	r2, r2, #1
 8001fae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b20      	cmp	r3, #32
 8001fea:	d138      	bne.n	800205e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e032      	b.n	8002060 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2224      	movs	r2, #36	@ 0x24
 8002006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 0201 	bic.w	r2, r2, #1
 8002018:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002028:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6819      	ldr	r1, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f042 0201 	orr.w	r2, r2, #1
 8002048:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2220      	movs	r2, #32
 800204e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	e000      	b.n	8002060 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800205e:	2302      	movs	r3, #2
  }
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b20      	cmp	r3, #32
 8002080:	d139      	bne.n	80020f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800208c:	2302      	movs	r3, #2
 800208e:	e033      	b.n	80020f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2224      	movs	r2, #36	@ 0x24
 800209c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0201 	bic.w	r2, r2, #1
 80020ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	021b      	lsls	r3, r3, #8
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 0201 	orr.w	r2, r2, #1
 80020e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2220      	movs	r2, #32
 80020e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	e000      	b.n	80020f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020f6:	2302      	movs	r3, #2
  }
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002108:	4b04      	ldr	r3, [pc, #16]	@ (800211c <HAL_PWREx_GetVoltageRange+0x18>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40007000 	.word	0x40007000

08002120 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800212e:	d130      	bne.n	8002192 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002130:	4b23      	ldr	r3, [pc, #140]	@ (80021c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002138:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800213c:	d038      	beq.n	80021b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800213e:	4b20      	ldr	r3, [pc, #128]	@ (80021c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002146:	4a1e      	ldr	r2, [pc, #120]	@ (80021c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002148:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800214c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800214e:	4b1d      	ldr	r3, [pc, #116]	@ (80021c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2232      	movs	r2, #50	@ 0x32
 8002154:	fb02 f303 	mul.w	r3, r2, r3
 8002158:	4a1b      	ldr	r2, [pc, #108]	@ (80021c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800215a:	fba2 2303 	umull	r2, r3, r2, r3
 800215e:	0c9b      	lsrs	r3, r3, #18
 8002160:	3301      	adds	r3, #1
 8002162:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002164:	e002      	b.n	800216c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	3b01      	subs	r3, #1
 800216a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800216c:	4b14      	ldr	r3, [pc, #80]	@ (80021c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002174:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002178:	d102      	bne.n	8002180 <HAL_PWREx_ControlVoltageScaling+0x60>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1f2      	bne.n	8002166 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002180:	4b0f      	ldr	r3, [pc, #60]	@ (80021c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800218c:	d110      	bne.n	80021b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e00f      	b.n	80021b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002192:	4b0b      	ldr	r3, [pc, #44]	@ (80021c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800219a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800219e:	d007      	beq.n	80021b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021a0:	4b07      	ldr	r3, [pc, #28]	@ (80021c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021a8:	4a05      	ldr	r2, [pc, #20]	@ (80021c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40007000 	.word	0x40007000
 80021c4:	20000000 	.word	0x20000000
 80021c8:	431bde83 	.word	0x431bde83

080021cc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e3ca      	b.n	8002974 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021de:	4b97      	ldr	r3, [pc, #604]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 030c 	and.w	r3, r3, #12
 80021e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021e8:	4b94      	ldr	r3, [pc, #592]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 80e4 	beq.w	80023c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d007      	beq.n	8002216 <HAL_RCC_OscConfig+0x4a>
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	2b0c      	cmp	r3, #12
 800220a:	f040 808b 	bne.w	8002324 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	2b01      	cmp	r3, #1
 8002212:	f040 8087 	bne.w	8002324 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002216:	4b89      	ldr	r3, [pc, #548]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d005      	beq.n	800222e <HAL_RCC_OscConfig+0x62>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e3a2      	b.n	8002974 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1a      	ldr	r2, [r3, #32]
 8002232:	4b82      	ldr	r3, [pc, #520]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d004      	beq.n	8002248 <HAL_RCC_OscConfig+0x7c>
 800223e:	4b7f      	ldr	r3, [pc, #508]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002246:	e005      	b.n	8002254 <HAL_RCC_OscConfig+0x88>
 8002248:	4b7c      	ldr	r3, [pc, #496]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 800224a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800224e:	091b      	lsrs	r3, r3, #4
 8002250:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002254:	4293      	cmp	r3, r2
 8002256:	d223      	bcs.n	80022a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	4618      	mov	r0, r3
 800225e:	f000 fd55 	bl	8002d0c <RCC_SetFlashLatencyFromMSIRange>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e383      	b.n	8002974 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800226c:	4b73      	ldr	r3, [pc, #460]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a72      	ldr	r2, [pc, #456]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 8002272:	f043 0308 	orr.w	r3, r3, #8
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	4b70      	ldr	r3, [pc, #448]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	496d      	ldr	r1, [pc, #436]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 8002286:	4313      	orrs	r3, r2
 8002288:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800228a:	4b6c      	ldr	r3, [pc, #432]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	021b      	lsls	r3, r3, #8
 8002298:	4968      	ldr	r1, [pc, #416]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 800229a:	4313      	orrs	r3, r2
 800229c:	604b      	str	r3, [r1, #4]
 800229e:	e025      	b.n	80022ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022a0:	4b66      	ldr	r3, [pc, #408]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a65      	ldr	r2, [pc, #404]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 80022a6:	f043 0308 	orr.w	r3, r3, #8
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	4b63      	ldr	r3, [pc, #396]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	4960      	ldr	r1, [pc, #384]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022be:	4b5f      	ldr	r3, [pc, #380]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	021b      	lsls	r3, r3, #8
 80022cc:	495b      	ldr	r1, [pc, #364]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d109      	bne.n	80022ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	4618      	mov	r0, r3
 80022de:	f000 fd15 	bl	8002d0c <RCC_SetFlashLatencyFromMSIRange>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e343      	b.n	8002974 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022ec:	f000 fc4a 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 80022f0:	4602      	mov	r2, r0
 80022f2:	4b52      	ldr	r3, [pc, #328]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	091b      	lsrs	r3, r3, #4
 80022f8:	f003 030f 	and.w	r3, r3, #15
 80022fc:	4950      	ldr	r1, [pc, #320]	@ (8002440 <HAL_RCC_OscConfig+0x274>)
 80022fe:	5ccb      	ldrb	r3, [r1, r3]
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	fa22 f303 	lsr.w	r3, r2, r3
 8002308:	4a4e      	ldr	r2, [pc, #312]	@ (8002444 <HAL_RCC_OscConfig+0x278>)
 800230a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800230c:	4b4e      	ldr	r3, [pc, #312]	@ (8002448 <HAL_RCC_OscConfig+0x27c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff f9fd 	bl	8001710 <HAL_InitTick>
 8002316:	4603      	mov	r3, r0
 8002318:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d052      	beq.n	80023c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	e327      	b.n	8002974 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d032      	beq.n	8002392 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800232c:	4b43      	ldr	r3, [pc, #268]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a42      	ldr	r2, [pc, #264]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002338:	f7ff fa3a 	bl	80017b0 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002340:	f7ff fa36 	bl	80017b0 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e310      	b.n	8002974 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002352:	4b3a      	ldr	r3, [pc, #232]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0f0      	beq.n	8002340 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800235e:	4b37      	ldr	r3, [pc, #220]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a36      	ldr	r2, [pc, #216]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 8002364:	f043 0308 	orr.w	r3, r3, #8
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	4b34      	ldr	r3, [pc, #208]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	4931      	ldr	r1, [pc, #196]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 8002378:	4313      	orrs	r3, r2
 800237a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800237c:	4b2f      	ldr	r3, [pc, #188]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	021b      	lsls	r3, r3, #8
 800238a:	492c      	ldr	r1, [pc, #176]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 800238c:	4313      	orrs	r3, r2
 800238e:	604b      	str	r3, [r1, #4]
 8002390:	e01a      	b.n	80023c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002392:	4b2a      	ldr	r3, [pc, #168]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a29      	ldr	r2, [pc, #164]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 8002398:	f023 0301 	bic.w	r3, r3, #1
 800239c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800239e:	f7ff fa07 	bl	80017b0 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023a6:	f7ff fa03 	bl	80017b0 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e2dd      	b.n	8002974 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023b8:	4b20      	ldr	r3, [pc, #128]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f0      	bne.n	80023a6 <HAL_RCC_OscConfig+0x1da>
 80023c4:	e000      	b.n	80023c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d074      	beq.n	80024be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d005      	beq.n	80023e6 <HAL_RCC_OscConfig+0x21a>
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	2b0c      	cmp	r3, #12
 80023de:	d10e      	bne.n	80023fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	d10b      	bne.n	80023fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e6:	4b15      	ldr	r3, [pc, #84]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d064      	beq.n	80024bc <HAL_RCC_OscConfig+0x2f0>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d160      	bne.n	80024bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e2ba      	b.n	8002974 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002406:	d106      	bne.n	8002416 <HAL_RCC_OscConfig+0x24a>
 8002408:	4b0c      	ldr	r3, [pc, #48]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a0b      	ldr	r2, [pc, #44]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 800240e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	e026      	b.n	8002464 <HAL_RCC_OscConfig+0x298>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800241e:	d115      	bne.n	800244c <HAL_RCC_OscConfig+0x280>
 8002420:	4b06      	ldr	r3, [pc, #24]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a05      	ldr	r2, [pc, #20]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 8002426:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	4b03      	ldr	r3, [pc, #12]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a02      	ldr	r2, [pc, #8]	@ (800243c <HAL_RCC_OscConfig+0x270>)
 8002432:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	e014      	b.n	8002464 <HAL_RCC_OscConfig+0x298>
 800243a:	bf00      	nop
 800243c:	40021000 	.word	0x40021000
 8002440:	08008e84 	.word	0x08008e84
 8002444:	20000000 	.word	0x20000000
 8002448:	2000000c 	.word	0x2000000c
 800244c:	4ba0      	ldr	r3, [pc, #640]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a9f      	ldr	r2, [pc, #636]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 8002452:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	4b9d      	ldr	r3, [pc, #628]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a9c      	ldr	r2, [pc, #624]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 800245e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d013      	beq.n	8002494 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246c:	f7ff f9a0 	bl	80017b0 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002474:	f7ff f99c 	bl	80017b0 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b64      	cmp	r3, #100	@ 0x64
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e276      	b.n	8002974 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002486:	4b92      	ldr	r3, [pc, #584]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0x2a8>
 8002492:	e014      	b.n	80024be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002494:	f7ff f98c 	bl	80017b0 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800249c:	f7ff f988 	bl	80017b0 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b64      	cmp	r3, #100	@ 0x64
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e262      	b.n	8002974 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024ae:	4b88      	ldr	r3, [pc, #544]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x2d0>
 80024ba:	e000      	b.n	80024be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d060      	beq.n	800258c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d005      	beq.n	80024dc <HAL_RCC_OscConfig+0x310>
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2b0c      	cmp	r3, #12
 80024d4:	d119      	bne.n	800250a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d116      	bne.n	800250a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024dc:	4b7c      	ldr	r3, [pc, #496]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d005      	beq.n	80024f4 <HAL_RCC_OscConfig+0x328>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e23f      	b.n	8002974 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f4:	4b76      	ldr	r3, [pc, #472]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	061b      	lsls	r3, r3, #24
 8002502:	4973      	ldr	r1, [pc, #460]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 8002504:	4313      	orrs	r3, r2
 8002506:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002508:	e040      	b.n	800258c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d023      	beq.n	800255a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002512:	4b6f      	ldr	r3, [pc, #444]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a6e      	ldr	r2, [pc, #440]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 8002518:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800251c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251e:	f7ff f947 	bl	80017b0 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002526:	f7ff f943 	bl	80017b0 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e21d      	b.n	8002974 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002538:	4b65      	ldr	r3, [pc, #404]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0f0      	beq.n	8002526 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002544:	4b62      	ldr	r3, [pc, #392]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	061b      	lsls	r3, r3, #24
 8002552:	495f      	ldr	r1, [pc, #380]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 8002554:	4313      	orrs	r3, r2
 8002556:	604b      	str	r3, [r1, #4]
 8002558:	e018      	b.n	800258c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800255a:	4b5d      	ldr	r3, [pc, #372]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a5c      	ldr	r2, [pc, #368]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 8002560:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002566:	f7ff f923 	bl	80017b0 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800256e:	f7ff f91f 	bl	80017b0 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e1f9      	b.n	8002974 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002580:	4b53      	ldr	r3, [pc, #332]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1f0      	bne.n	800256e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b00      	cmp	r3, #0
 8002596:	d03c      	beq.n	8002612 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d01c      	beq.n	80025da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025a0:	4b4b      	ldr	r3, [pc, #300]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 80025a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025a6:	4a4a      	ldr	r2, [pc, #296]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b0:	f7ff f8fe 	bl	80017b0 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b8:	f7ff f8fa 	bl	80017b0 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e1d4      	b.n	8002974 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025ca:	4b41      	ldr	r3, [pc, #260]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 80025cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0ef      	beq.n	80025b8 <HAL_RCC_OscConfig+0x3ec>
 80025d8:	e01b      	b.n	8002612 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025da:	4b3d      	ldr	r3, [pc, #244]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 80025dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025e0:	4a3b      	ldr	r2, [pc, #236]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 80025e2:	f023 0301 	bic.w	r3, r3, #1
 80025e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ea:	f7ff f8e1 	bl	80017b0 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f2:	f7ff f8dd 	bl	80017b0 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e1b7      	b.n	8002974 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002604:	4b32      	ldr	r3, [pc, #200]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 8002606:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1ef      	bne.n	80025f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 80a6 	beq.w	800276c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002620:	2300      	movs	r3, #0
 8002622:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002624:	4b2a      	ldr	r3, [pc, #168]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 8002626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10d      	bne.n	800264c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002630:	4b27      	ldr	r3, [pc, #156]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 8002632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002634:	4a26      	ldr	r2, [pc, #152]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 8002636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800263a:	6593      	str	r3, [r2, #88]	@ 0x58
 800263c:	4b24      	ldr	r3, [pc, #144]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 800263e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002648:	2301      	movs	r3, #1
 800264a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800264c:	4b21      	ldr	r3, [pc, #132]	@ (80026d4 <HAL_RCC_OscConfig+0x508>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d118      	bne.n	800268a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002658:	4b1e      	ldr	r3, [pc, #120]	@ (80026d4 <HAL_RCC_OscConfig+0x508>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a1d      	ldr	r2, [pc, #116]	@ (80026d4 <HAL_RCC_OscConfig+0x508>)
 800265e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002662:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002664:	f7ff f8a4 	bl	80017b0 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266c:	f7ff f8a0 	bl	80017b0 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e17a      	b.n	8002974 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800267e:	4b15      	ldr	r3, [pc, #84]	@ (80026d4 <HAL_RCC_OscConfig+0x508>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f0      	beq.n	800266c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d108      	bne.n	80026a4 <HAL_RCC_OscConfig+0x4d8>
 8002692:	4b0f      	ldr	r3, [pc, #60]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 8002694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002698:	4a0d      	ldr	r2, [pc, #52]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026a2:	e029      	b.n	80026f8 <HAL_RCC_OscConfig+0x52c>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b05      	cmp	r3, #5
 80026aa:	d115      	bne.n	80026d8 <HAL_RCC_OscConfig+0x50c>
 80026ac:	4b08      	ldr	r3, [pc, #32]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 80026ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b2:	4a07      	ldr	r2, [pc, #28]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 80026b4:	f043 0304 	orr.w	r3, r3, #4
 80026b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026bc:	4b04      	ldr	r3, [pc, #16]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 80026be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026c2:	4a03      	ldr	r2, [pc, #12]	@ (80026d0 <HAL_RCC_OscConfig+0x504>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026cc:	e014      	b.n	80026f8 <HAL_RCC_OscConfig+0x52c>
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000
 80026d4:	40007000 	.word	0x40007000
 80026d8:	4b9c      	ldr	r3, [pc, #624]	@ (800294c <HAL_RCC_OscConfig+0x780>)
 80026da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026de:	4a9b      	ldr	r2, [pc, #620]	@ (800294c <HAL_RCC_OscConfig+0x780>)
 80026e0:	f023 0301 	bic.w	r3, r3, #1
 80026e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026e8:	4b98      	ldr	r3, [pc, #608]	@ (800294c <HAL_RCC_OscConfig+0x780>)
 80026ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ee:	4a97      	ldr	r2, [pc, #604]	@ (800294c <HAL_RCC_OscConfig+0x780>)
 80026f0:	f023 0304 	bic.w	r3, r3, #4
 80026f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d016      	beq.n	800272e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002700:	f7ff f856 	bl	80017b0 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002706:	e00a      	b.n	800271e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002708:	f7ff f852 	bl	80017b0 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002716:	4293      	cmp	r3, r2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e12a      	b.n	8002974 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800271e:	4b8b      	ldr	r3, [pc, #556]	@ (800294c <HAL_RCC_OscConfig+0x780>)
 8002720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0ed      	beq.n	8002708 <HAL_RCC_OscConfig+0x53c>
 800272c:	e015      	b.n	800275a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272e:	f7ff f83f 	bl	80017b0 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002734:	e00a      	b.n	800274c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002736:	f7ff f83b 	bl	80017b0 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002744:	4293      	cmp	r3, r2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e113      	b.n	8002974 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800274c:	4b7f      	ldr	r3, [pc, #508]	@ (800294c <HAL_RCC_OscConfig+0x780>)
 800274e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1ed      	bne.n	8002736 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800275a:	7ffb      	ldrb	r3, [r7, #31]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d105      	bne.n	800276c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002760:	4b7a      	ldr	r3, [pc, #488]	@ (800294c <HAL_RCC_OscConfig+0x780>)
 8002762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002764:	4a79      	ldr	r2, [pc, #484]	@ (800294c <HAL_RCC_OscConfig+0x780>)
 8002766:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800276a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 80fe 	beq.w	8002972 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277a:	2b02      	cmp	r3, #2
 800277c:	f040 80d0 	bne.w	8002920 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002780:	4b72      	ldr	r3, [pc, #456]	@ (800294c <HAL_RCC_OscConfig+0x780>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f003 0203 	and.w	r2, r3, #3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002790:	429a      	cmp	r2, r3
 8002792:	d130      	bne.n	80027f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279e:	3b01      	subs	r3, #1
 80027a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d127      	bne.n	80027f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d11f      	bne.n	80027f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80027c0:	2a07      	cmp	r2, #7
 80027c2:	bf14      	ite	ne
 80027c4:	2201      	movne	r2, #1
 80027c6:	2200      	moveq	r2, #0
 80027c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d113      	bne.n	80027f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027d8:	085b      	lsrs	r3, r3, #1
 80027da:	3b01      	subs	r3, #1
 80027dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027de:	429a      	cmp	r2, r3
 80027e0:	d109      	bne.n	80027f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ec:	085b      	lsrs	r3, r3, #1
 80027ee:	3b01      	subs	r3, #1
 80027f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d06e      	beq.n	80028d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	2b0c      	cmp	r3, #12
 80027fa:	d069      	beq.n	80028d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027fc:	4b53      	ldr	r3, [pc, #332]	@ (800294c <HAL_RCC_OscConfig+0x780>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d105      	bne.n	8002814 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002808:	4b50      	ldr	r3, [pc, #320]	@ (800294c <HAL_RCC_OscConfig+0x780>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e0ad      	b.n	8002974 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002818:	4b4c      	ldr	r3, [pc, #304]	@ (800294c <HAL_RCC_OscConfig+0x780>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a4b      	ldr	r2, [pc, #300]	@ (800294c <HAL_RCC_OscConfig+0x780>)
 800281e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002822:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002824:	f7fe ffc4 	bl	80017b0 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282c:	f7fe ffc0 	bl	80017b0 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e09a      	b.n	8002974 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800283e:	4b43      	ldr	r3, [pc, #268]	@ (800294c <HAL_RCC_OscConfig+0x780>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f0      	bne.n	800282c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800284a:	4b40      	ldr	r3, [pc, #256]	@ (800294c <HAL_RCC_OscConfig+0x780>)
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	4b40      	ldr	r3, [pc, #256]	@ (8002950 <HAL_RCC_OscConfig+0x784>)
 8002850:	4013      	ands	r3, r2
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800285a:	3a01      	subs	r2, #1
 800285c:	0112      	lsls	r2, r2, #4
 800285e:	4311      	orrs	r1, r2
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002864:	0212      	lsls	r2, r2, #8
 8002866:	4311      	orrs	r1, r2
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800286c:	0852      	lsrs	r2, r2, #1
 800286e:	3a01      	subs	r2, #1
 8002870:	0552      	lsls	r2, r2, #21
 8002872:	4311      	orrs	r1, r2
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002878:	0852      	lsrs	r2, r2, #1
 800287a:	3a01      	subs	r2, #1
 800287c:	0652      	lsls	r2, r2, #25
 800287e:	4311      	orrs	r1, r2
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002884:	0912      	lsrs	r2, r2, #4
 8002886:	0452      	lsls	r2, r2, #17
 8002888:	430a      	orrs	r2, r1
 800288a:	4930      	ldr	r1, [pc, #192]	@ (800294c <HAL_RCC_OscConfig+0x780>)
 800288c:	4313      	orrs	r3, r2
 800288e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002890:	4b2e      	ldr	r3, [pc, #184]	@ (800294c <HAL_RCC_OscConfig+0x780>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a2d      	ldr	r2, [pc, #180]	@ (800294c <HAL_RCC_OscConfig+0x780>)
 8002896:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800289a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800289c:	4b2b      	ldr	r3, [pc, #172]	@ (800294c <HAL_RCC_OscConfig+0x780>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	4a2a      	ldr	r2, [pc, #168]	@ (800294c <HAL_RCC_OscConfig+0x780>)
 80028a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028a8:	f7fe ff82 	bl	80017b0 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b0:	f7fe ff7e 	bl	80017b0 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e058      	b.n	8002974 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028c2:	4b22      	ldr	r3, [pc, #136]	@ (800294c <HAL_RCC_OscConfig+0x780>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028ce:	e050      	b.n	8002972 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e04f      	b.n	8002974 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028d4:	4b1d      	ldr	r3, [pc, #116]	@ (800294c <HAL_RCC_OscConfig+0x780>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d148      	bne.n	8002972 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028e0:	4b1a      	ldr	r3, [pc, #104]	@ (800294c <HAL_RCC_OscConfig+0x780>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a19      	ldr	r2, [pc, #100]	@ (800294c <HAL_RCC_OscConfig+0x780>)
 80028e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028ec:	4b17      	ldr	r3, [pc, #92]	@ (800294c <HAL_RCC_OscConfig+0x780>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	4a16      	ldr	r2, [pc, #88]	@ (800294c <HAL_RCC_OscConfig+0x780>)
 80028f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028f8:	f7fe ff5a 	bl	80017b0 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002900:	f7fe ff56 	bl	80017b0 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e030      	b.n	8002974 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002912:	4b0e      	ldr	r3, [pc, #56]	@ (800294c <HAL_RCC_OscConfig+0x780>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x734>
 800291e:	e028      	b.n	8002972 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	2b0c      	cmp	r3, #12
 8002924:	d023      	beq.n	800296e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002926:	4b09      	ldr	r3, [pc, #36]	@ (800294c <HAL_RCC_OscConfig+0x780>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a08      	ldr	r2, [pc, #32]	@ (800294c <HAL_RCC_OscConfig+0x780>)
 800292c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002932:	f7fe ff3d 	bl	80017b0 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002938:	e00c      	b.n	8002954 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800293a:	f7fe ff39 	bl	80017b0 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d905      	bls.n	8002954 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e013      	b.n	8002974 <HAL_RCC_OscConfig+0x7a8>
 800294c:	40021000 	.word	0x40021000
 8002950:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002954:	4b09      	ldr	r3, [pc, #36]	@ (800297c <HAL_RCC_OscConfig+0x7b0>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1ec      	bne.n	800293a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002960:	4b06      	ldr	r3, [pc, #24]	@ (800297c <HAL_RCC_OscConfig+0x7b0>)
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	4905      	ldr	r1, [pc, #20]	@ (800297c <HAL_RCC_OscConfig+0x7b0>)
 8002966:	4b06      	ldr	r3, [pc, #24]	@ (8002980 <HAL_RCC_OscConfig+0x7b4>)
 8002968:	4013      	ands	r3, r2
 800296a:	60cb      	str	r3, [r1, #12]
 800296c:	e001      	b.n	8002972 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3720      	adds	r7, #32
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40021000 	.word	0x40021000
 8002980:	feeefffc 	.word	0xfeeefffc

08002984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0e7      	b.n	8002b68 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002998:	4b75      	ldr	r3, [pc, #468]	@ (8002b70 <HAL_RCC_ClockConfig+0x1ec>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d910      	bls.n	80029c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a6:	4b72      	ldr	r3, [pc, #456]	@ (8002b70 <HAL_RCC_ClockConfig+0x1ec>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f023 0207 	bic.w	r2, r3, #7
 80029ae:	4970      	ldr	r1, [pc, #448]	@ (8002b70 <HAL_RCC_ClockConfig+0x1ec>)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b6:	4b6e      	ldr	r3, [pc, #440]	@ (8002b70 <HAL_RCC_ClockConfig+0x1ec>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d001      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e0cf      	b.n	8002b68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d010      	beq.n	80029f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	4b66      	ldr	r3, [pc, #408]	@ (8002b74 <HAL_RCC_ClockConfig+0x1f0>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d908      	bls.n	80029f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e4:	4b63      	ldr	r3, [pc, #396]	@ (8002b74 <HAL_RCC_ClockConfig+0x1f0>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	4960      	ldr	r1, [pc, #384]	@ (8002b74 <HAL_RCC_ClockConfig+0x1f0>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d04c      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d107      	bne.n	8002a1a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a0a:	4b5a      	ldr	r3, [pc, #360]	@ (8002b74 <HAL_RCC_ClockConfig+0x1f0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d121      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e0a6      	b.n	8002b68 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d107      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a22:	4b54      	ldr	r3, [pc, #336]	@ (8002b74 <HAL_RCC_ClockConfig+0x1f0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d115      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e09a      	b.n	8002b68 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d107      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a3a:	4b4e      	ldr	r3, [pc, #312]	@ (8002b74 <HAL_RCC_ClockConfig+0x1f0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d109      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e08e      	b.n	8002b68 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002b74 <HAL_RCC_ClockConfig+0x1f0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e086      	b.n	8002b68 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a5a:	4b46      	ldr	r3, [pc, #280]	@ (8002b74 <HAL_RCC_ClockConfig+0x1f0>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f023 0203 	bic.w	r2, r3, #3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	4943      	ldr	r1, [pc, #268]	@ (8002b74 <HAL_RCC_ClockConfig+0x1f0>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a6c:	f7fe fea0 	bl	80017b0 <HAL_GetTick>
 8002a70:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a74:	f7fe fe9c 	bl	80017b0 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e06e      	b.n	8002b68 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8a:	4b3a      	ldr	r3, [pc, #232]	@ (8002b74 <HAL_RCC_ClockConfig+0x1f0>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 020c 	and.w	r2, r3, #12
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d1eb      	bne.n	8002a74 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d010      	beq.n	8002aca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	4b31      	ldr	r3, [pc, #196]	@ (8002b74 <HAL_RCC_ClockConfig+0x1f0>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d208      	bcs.n	8002aca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab8:	4b2e      	ldr	r3, [pc, #184]	@ (8002b74 <HAL_RCC_ClockConfig+0x1f0>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	492b      	ldr	r1, [pc, #172]	@ (8002b74 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aca:	4b29      	ldr	r3, [pc, #164]	@ (8002b70 <HAL_RCC_ClockConfig+0x1ec>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d210      	bcs.n	8002afa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad8:	4b25      	ldr	r3, [pc, #148]	@ (8002b70 <HAL_RCC_ClockConfig+0x1ec>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f023 0207 	bic.w	r2, r3, #7
 8002ae0:	4923      	ldr	r1, [pc, #140]	@ (8002b70 <HAL_RCC_ClockConfig+0x1ec>)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae8:	4b21      	ldr	r3, [pc, #132]	@ (8002b70 <HAL_RCC_ClockConfig+0x1ec>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d001      	beq.n	8002afa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e036      	b.n	8002b68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d008      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b06:	4b1b      	ldr	r3, [pc, #108]	@ (8002b74 <HAL_RCC_ClockConfig+0x1f0>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	4918      	ldr	r1, [pc, #96]	@ (8002b74 <HAL_RCC_ClockConfig+0x1f0>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d009      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b24:	4b13      	ldr	r3, [pc, #76]	@ (8002b74 <HAL_RCC_ClockConfig+0x1f0>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	4910      	ldr	r1, [pc, #64]	@ (8002b74 <HAL_RCC_ClockConfig+0x1f0>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b38:	f000 f824 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b74 <HAL_RCC_ClockConfig+0x1f0>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	091b      	lsrs	r3, r3, #4
 8002b44:	f003 030f 	and.w	r3, r3, #15
 8002b48:	490b      	ldr	r1, [pc, #44]	@ (8002b78 <HAL_RCC_ClockConfig+0x1f4>)
 8002b4a:	5ccb      	ldrb	r3, [r1, r3]
 8002b4c:	f003 031f 	and.w	r3, r3, #31
 8002b50:	fa22 f303 	lsr.w	r3, r2, r3
 8002b54:	4a09      	ldr	r2, [pc, #36]	@ (8002b7c <HAL_RCC_ClockConfig+0x1f8>)
 8002b56:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b58:	4b09      	ldr	r3, [pc, #36]	@ (8002b80 <HAL_RCC_ClockConfig+0x1fc>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fe fdd7 	bl	8001710 <HAL_InitTick>
 8002b62:	4603      	mov	r3, r0
 8002b64:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b66:	7afb      	ldrb	r3, [r7, #11]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40022000 	.word	0x40022000
 8002b74:	40021000 	.word	0x40021000
 8002b78:	08008e84 	.word	0x08008e84
 8002b7c:	20000000 	.word	0x20000000
 8002b80:	2000000c 	.word	0x2000000c

08002b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b089      	sub	sp, #36	@ 0x24
 8002b88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b92:	4b3e      	ldr	r3, [pc, #248]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 030c 	and.w	r3, r3, #12
 8002b9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b9c:	4b3b      	ldr	r3, [pc, #236]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f003 0303 	and.w	r3, r3, #3
 8002ba4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x34>
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	2b0c      	cmp	r3, #12
 8002bb0:	d121      	bne.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d11e      	bne.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bb8:	4b34      	ldr	r3, [pc, #208]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d107      	bne.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bc4:	4b31      	ldr	r3, [pc, #196]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bca:	0a1b      	lsrs	r3, r3, #8
 8002bcc:	f003 030f 	and.w	r3, r3, #15
 8002bd0:	61fb      	str	r3, [r7, #28]
 8002bd2:	e005      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	091b      	lsrs	r3, r3, #4
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002be0:	4a2b      	ldr	r2, [pc, #172]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10d      	bne.n	8002c0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bf4:	e00a      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d102      	bne.n	8002c02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bfc:	4b25      	ldr	r3, [pc, #148]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bfe:	61bb      	str	r3, [r7, #24]
 8002c00:	e004      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d101      	bne.n	8002c0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c08:	4b23      	ldr	r3, [pc, #140]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	2b0c      	cmp	r3, #12
 8002c10:	d134      	bne.n	8002c7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c12:	4b1e      	ldr	r3, [pc, #120]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d003      	beq.n	8002c2a <HAL_RCC_GetSysClockFreq+0xa6>
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2b03      	cmp	r3, #3
 8002c26:	d003      	beq.n	8002c30 <HAL_RCC_GetSysClockFreq+0xac>
 8002c28:	e005      	b.n	8002c36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c2c:	617b      	str	r3, [r7, #20]
      break;
 8002c2e:	e005      	b.n	8002c3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c30:	4b19      	ldr	r3, [pc, #100]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c32:	617b      	str	r3, [r7, #20]
      break;
 8002c34:	e002      	b.n	8002c3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	617b      	str	r3, [r7, #20]
      break;
 8002c3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c3c:	4b13      	ldr	r3, [pc, #76]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	091b      	lsrs	r3, r3, #4
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	3301      	adds	r3, #1
 8002c48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c4a:	4b10      	ldr	r3, [pc, #64]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	0a1b      	lsrs	r3, r3, #8
 8002c50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	fb03 f202 	mul.w	r2, r3, r2
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c62:	4b0a      	ldr	r3, [pc, #40]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	0e5b      	lsrs	r3, r3, #25
 8002c68:	f003 0303 	and.w	r3, r3, #3
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c7c:	69bb      	ldr	r3, [r7, #24]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3724      	adds	r7, #36	@ 0x24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	08008e9c 	.word	0x08008e9c
 8002c94:	00f42400 	.word	0x00f42400
 8002c98:	007a1200 	.word	0x007a1200

08002c9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ca0:	4b03      	ldr	r3, [pc, #12]	@ (8002cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	20000000 	.word	0x20000000

08002cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002cb8:	f7ff fff0 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	4b06      	ldr	r3, [pc, #24]	@ (8002cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	0a1b      	lsrs	r3, r3, #8
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	4904      	ldr	r1, [pc, #16]	@ (8002cdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cca:	5ccb      	ldrb	r3, [r1, r3]
 8002ccc:	f003 031f 	and.w	r3, r3, #31
 8002cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	08008e94 	.word	0x08008e94

08002ce0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ce4:	f7ff ffda 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	4b06      	ldr	r3, [pc, #24]	@ (8002d04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	0adb      	lsrs	r3, r3, #11
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	4904      	ldr	r1, [pc, #16]	@ (8002d08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cf6:	5ccb      	ldrb	r3, [r1, r3]
 8002cf8:	f003 031f 	and.w	r3, r3, #31
 8002cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40021000 	.word	0x40021000
 8002d08:	08008e94 	.word	0x08008e94

08002d0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d14:	2300      	movs	r3, #0
 8002d16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d18:	4b2a      	ldr	r3, [pc, #168]	@ (8002dc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d003      	beq.n	8002d2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d24:	f7ff f9ee 	bl	8002104 <HAL_PWREx_GetVoltageRange>
 8002d28:	6178      	str	r0, [r7, #20]
 8002d2a:	e014      	b.n	8002d56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d2c:	4b25      	ldr	r3, [pc, #148]	@ (8002dc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d30:	4a24      	ldr	r2, [pc, #144]	@ (8002dc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d36:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d38:	4b22      	ldr	r3, [pc, #136]	@ (8002dc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d44:	f7ff f9de 	bl	8002104 <HAL_PWREx_GetVoltageRange>
 8002d48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d4e:	4a1d      	ldr	r2, [pc, #116]	@ (8002dc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d54:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d5c:	d10b      	bne.n	8002d76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b80      	cmp	r3, #128	@ 0x80
 8002d62:	d919      	bls.n	8002d98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d68:	d902      	bls.n	8002d70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	e013      	b.n	8002d98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d70:	2301      	movs	r3, #1
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	e010      	b.n	8002d98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b80      	cmp	r3, #128	@ 0x80
 8002d7a:	d902      	bls.n	8002d82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	e00a      	b.n	8002d98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b80      	cmp	r3, #128	@ 0x80
 8002d86:	d102      	bne.n	8002d8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d88:	2302      	movs	r3, #2
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	e004      	b.n	8002d98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b70      	cmp	r3, #112	@ 0x70
 8002d92:	d101      	bne.n	8002d98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d94:	2301      	movs	r3, #1
 8002d96:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d98:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f023 0207 	bic.w	r2, r3, #7
 8002da0:	4909      	ldr	r1, [pc, #36]	@ (8002dc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002da8:	4b07      	ldr	r3, [pc, #28]	@ (8002dc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d001      	beq.n	8002dba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40022000 	.word	0x40022000

08002dcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002dd8:	2300      	movs	r3, #0
 8002dda:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d041      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002dec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002df0:	d02a      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002df2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002df6:	d824      	bhi.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002df8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002dfc:	d008      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002dfe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e02:	d81e      	bhi.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00a      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e0c:	d010      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e0e:	e018      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e10:	4b86      	ldr	r3, [pc, #536]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	4a85      	ldr	r2, [pc, #532]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e1a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e1c:	e015      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3304      	adds	r3, #4
 8002e22:	2100      	movs	r1, #0
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 fabb 	bl	80033a0 <RCCEx_PLLSAI1_Config>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e2e:	e00c      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3320      	adds	r3, #32
 8002e34:	2100      	movs	r1, #0
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 fba6 	bl	8003588 <RCCEx_PLLSAI2_Config>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e40:	e003      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	74fb      	strb	r3, [r7, #19]
      break;
 8002e46:	e000      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002e48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e4a:	7cfb      	ldrb	r3, [r7, #19]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10b      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e50:	4b76      	ldr	r3, [pc, #472]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e56:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e5e:	4973      	ldr	r1, [pc, #460]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002e66:	e001      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e68:	7cfb      	ldrb	r3, [r7, #19]
 8002e6a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d041      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e7c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e80:	d02a      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002e82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e86:	d824      	bhi.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e8c:	d008      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e92:	d81e      	bhi.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00a      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002e98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e9c:	d010      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e9e:	e018      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ea0:	4b62      	ldr	r3, [pc, #392]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	4a61      	ldr	r2, [pc, #388]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ea6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eaa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002eac:	e015      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fa73 	bl	80033a0 <RCCEx_PLLSAI1_Config>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ebe:	e00c      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3320      	adds	r3, #32
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fb5e 	bl	8003588 <RCCEx_PLLSAI2_Config>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ed0:	e003      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	74fb      	strb	r3, [r7, #19]
      break;
 8002ed6:	e000      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002ed8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002eda:	7cfb      	ldrb	r3, [r7, #19]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10b      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ee0:	4b52      	ldr	r3, [pc, #328]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002eee:	494f      	ldr	r1, [pc, #316]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002ef6:	e001      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef8:	7cfb      	ldrb	r3, [r7, #19]
 8002efa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 80a0 	beq.w	800304a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f0e:	4b47      	ldr	r3, [pc, #284]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002f1e:	2300      	movs	r3, #0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00d      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f24:	4b41      	ldr	r3, [pc, #260]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f28:	4a40      	ldr	r2, [pc, #256]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f30:	4b3e      	ldr	r3, [pc, #248]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f40:	4b3b      	ldr	r3, [pc, #236]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a3a      	ldr	r2, [pc, #232]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f4c:	f7fe fc30 	bl	80017b0 <HAL_GetTick>
 8002f50:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f52:	e009      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f54:	f7fe fc2c 	bl	80017b0 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d902      	bls.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	74fb      	strb	r3, [r7, #19]
        break;
 8002f66:	e005      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f68:	4b31      	ldr	r3, [pc, #196]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0ef      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002f74:	7cfb      	ldrb	r3, [r7, #19]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d15c      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f7a:	4b2c      	ldr	r3, [pc, #176]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f84:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d01f      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d019      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f98:	4b24      	ldr	r3, [pc, #144]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fa2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fa4:	4b21      	ldr	r3, [pc, #132]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002faa:	4a20      	ldr	r2, [pc, #128]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fba:	4a1c      	ldr	r2, [pc, #112]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fc4:	4a19      	ldr	r2, [pc, #100]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d016      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd6:	f7fe fbeb 	bl	80017b0 <HAL_GetTick>
 8002fda:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fdc:	e00b      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fde:	f7fe fbe7 	bl	80017b0 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d902      	bls.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	74fb      	strb	r3, [r7, #19]
            break;
 8002ff4:	e006      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0ec      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003004:	7cfb      	ldrb	r3, [r7, #19]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10c      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800300a:	4b08      	ldr	r3, [pc, #32]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800300c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003010:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800301a:	4904      	ldr	r1, [pc, #16]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800301c:	4313      	orrs	r3, r2
 800301e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003022:	e009      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003024:	7cfb      	ldrb	r3, [r7, #19]
 8003026:	74bb      	strb	r3, [r7, #18]
 8003028:	e006      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800302a:	bf00      	nop
 800302c:	40021000 	.word	0x40021000
 8003030:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003034:	7cfb      	ldrb	r3, [r7, #19]
 8003036:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003038:	7c7b      	ldrb	r3, [r7, #17]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d105      	bne.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800303e:	4b9e      	ldr	r3, [pc, #632]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003042:	4a9d      	ldr	r2, [pc, #628]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003044:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003048:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00a      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003056:	4b98      	ldr	r3, [pc, #608]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800305c:	f023 0203 	bic.w	r2, r3, #3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003064:	4994      	ldr	r1, [pc, #592]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00a      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003078:	4b8f      	ldr	r3, [pc, #572]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307e:	f023 020c 	bic.w	r2, r3, #12
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003086:	498c      	ldr	r1, [pc, #560]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0304 	and.w	r3, r3, #4
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00a      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800309a:	4b87      	ldr	r3, [pc, #540]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a8:	4983      	ldr	r1, [pc, #524]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0308 	and.w	r3, r3, #8
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00a      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030bc:	4b7e      	ldr	r3, [pc, #504]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ca:	497b      	ldr	r1, [pc, #492]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0310 	and.w	r3, r3, #16
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030de:	4b76      	ldr	r3, [pc, #472]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ec:	4972      	ldr	r1, [pc, #456]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0320 	and.w	r3, r3, #32
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00a      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003100:	4b6d      	ldr	r3, [pc, #436]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003106:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800310e:	496a      	ldr	r1, [pc, #424]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003122:	4b65      	ldr	r3, [pc, #404]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003128:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003130:	4961      	ldr	r1, [pc, #388]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003144:	4b5c      	ldr	r3, [pc, #368]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800314a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003152:	4959      	ldr	r1, [pc, #356]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003166:	4b54      	ldr	r3, [pc, #336]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800316c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003174:	4950      	ldr	r1, [pc, #320]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003188:	4b4b      	ldr	r3, [pc, #300]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800318e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003196:	4948      	ldr	r1, [pc, #288]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031aa:	4b43      	ldr	r3, [pc, #268]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b8:	493f      	ldr	r1, [pc, #252]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d028      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031cc:	4b3a      	ldr	r3, [pc, #232]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031da:	4937      	ldr	r1, [pc, #220]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031ea:	d106      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031ec:	4b32      	ldr	r3, [pc, #200]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	4a31      	ldr	r2, [pc, #196]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031f6:	60d3      	str	r3, [r2, #12]
 80031f8:	e011      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003202:	d10c      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3304      	adds	r3, #4
 8003208:	2101      	movs	r1, #1
 800320a:	4618      	mov	r0, r3
 800320c:	f000 f8c8 	bl	80033a0 <RCCEx_PLLSAI1_Config>
 8003210:	4603      	mov	r3, r0
 8003212:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003214:	7cfb      	ldrb	r3, [r7, #19]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800321a:	7cfb      	ldrb	r3, [r7, #19]
 800321c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d028      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800322a:	4b23      	ldr	r3, [pc, #140]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800322c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003230:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003238:	491f      	ldr	r1, [pc, #124]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003244:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003248:	d106      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800324a:	4b1b      	ldr	r3, [pc, #108]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	4a1a      	ldr	r2, [pc, #104]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003250:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003254:	60d3      	str	r3, [r2, #12]
 8003256:	e011      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800325c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003260:	d10c      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	3304      	adds	r3, #4
 8003266:	2101      	movs	r1, #1
 8003268:	4618      	mov	r0, r3
 800326a:	f000 f899 	bl	80033a0 <RCCEx_PLLSAI1_Config>
 800326e:	4603      	mov	r3, r0
 8003270:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003272:	7cfb      	ldrb	r3, [r7, #19]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003278:	7cfb      	ldrb	r3, [r7, #19]
 800327a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d02b      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003288:	4b0b      	ldr	r3, [pc, #44]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800328e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003296:	4908      	ldr	r1, [pc, #32]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003298:	4313      	orrs	r3, r2
 800329a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032a6:	d109      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032a8:	4b03      	ldr	r3, [pc, #12]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4a02      	ldr	r2, [pc, #8]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032b2:	60d3      	str	r3, [r2, #12]
 80032b4:	e014      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80032b6:	bf00      	nop
 80032b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032c4:	d10c      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3304      	adds	r3, #4
 80032ca:	2101      	movs	r1, #1
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 f867 	bl	80033a0 <RCCEx_PLLSAI1_Config>
 80032d2:	4603      	mov	r3, r0
 80032d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032d6:	7cfb      	ldrb	r3, [r7, #19]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80032dc:	7cfb      	ldrb	r3, [r7, #19]
 80032de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d02f      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032ec:	4b2b      	ldr	r3, [pc, #172]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032fa:	4928      	ldr	r1, [pc, #160]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003306:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800330a:	d10d      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3304      	adds	r3, #4
 8003310:	2102      	movs	r1, #2
 8003312:	4618      	mov	r0, r3
 8003314:	f000 f844 	bl	80033a0 <RCCEx_PLLSAI1_Config>
 8003318:	4603      	mov	r3, r0
 800331a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800331c:	7cfb      	ldrb	r3, [r7, #19]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d014      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003322:	7cfb      	ldrb	r3, [r7, #19]
 8003324:	74bb      	strb	r3, [r7, #18]
 8003326:	e011      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800332c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003330:	d10c      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3320      	adds	r3, #32
 8003336:	2102      	movs	r1, #2
 8003338:	4618      	mov	r0, r3
 800333a:	f000 f925 	bl	8003588 <RCCEx_PLLSAI2_Config>
 800333e:	4603      	mov	r3, r0
 8003340:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003342:	7cfb      	ldrb	r3, [r7, #19]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003348:	7cfb      	ldrb	r3, [r7, #19]
 800334a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00a      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003358:	4b10      	ldr	r3, [pc, #64]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800335a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800335e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003366:	490d      	ldr	r1, [pc, #52]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00b      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800337a:	4b08      	ldr	r3, [pc, #32]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800337c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003380:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800338a:	4904      	ldr	r1, [pc, #16]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003392:	7cbb      	ldrb	r3, [r7, #18]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40021000 	.word	0x40021000

080033a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033aa:	2300      	movs	r3, #0
 80033ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033ae:	4b75      	ldr	r3, [pc, #468]	@ (8003584 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d018      	beq.n	80033ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80033ba:	4b72      	ldr	r3, [pc, #456]	@ (8003584 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	f003 0203 	and.w	r2, r3, #3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d10d      	bne.n	80033e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
       ||
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d009      	beq.n	80033e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80033d2:	4b6c      	ldr	r3, [pc, #432]	@ (8003584 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	091b      	lsrs	r3, r3, #4
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
       ||
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d047      	beq.n	8003476 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	73fb      	strb	r3, [r7, #15]
 80033ea:	e044      	b.n	8003476 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d018      	beq.n	8003426 <RCCEx_PLLSAI1_Config+0x86>
 80033f4:	2b03      	cmp	r3, #3
 80033f6:	d825      	bhi.n	8003444 <RCCEx_PLLSAI1_Config+0xa4>
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d002      	beq.n	8003402 <RCCEx_PLLSAI1_Config+0x62>
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d009      	beq.n	8003414 <RCCEx_PLLSAI1_Config+0x74>
 8003400:	e020      	b.n	8003444 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003402:	4b60      	ldr	r3, [pc, #384]	@ (8003584 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d11d      	bne.n	800344a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003412:	e01a      	b.n	800344a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003414:	4b5b      	ldr	r3, [pc, #364]	@ (8003584 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800341c:	2b00      	cmp	r3, #0
 800341e:	d116      	bne.n	800344e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003424:	e013      	b.n	800344e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003426:	4b57      	ldr	r3, [pc, #348]	@ (8003584 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10f      	bne.n	8003452 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003432:	4b54      	ldr	r3, [pc, #336]	@ (8003584 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d109      	bne.n	8003452 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003442:	e006      	b.n	8003452 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	73fb      	strb	r3, [r7, #15]
      break;
 8003448:	e004      	b.n	8003454 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800344a:	bf00      	nop
 800344c:	e002      	b.n	8003454 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800344e:	bf00      	nop
 8003450:	e000      	b.n	8003454 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003452:	bf00      	nop
    }

    if(status == HAL_OK)
 8003454:	7bfb      	ldrb	r3, [r7, #15]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10d      	bne.n	8003476 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800345a:	4b4a      	ldr	r3, [pc, #296]	@ (8003584 <RCCEx_PLLSAI1_Config+0x1e4>)
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6819      	ldr	r1, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	3b01      	subs	r3, #1
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	430b      	orrs	r3, r1
 8003470:	4944      	ldr	r1, [pc, #272]	@ (8003584 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003472:	4313      	orrs	r3, r2
 8003474:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003476:	7bfb      	ldrb	r3, [r7, #15]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d17d      	bne.n	8003578 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800347c:	4b41      	ldr	r3, [pc, #260]	@ (8003584 <RCCEx_PLLSAI1_Config+0x1e4>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a40      	ldr	r2, [pc, #256]	@ (8003584 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003482:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003486:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003488:	f7fe f992 	bl	80017b0 <HAL_GetTick>
 800348c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800348e:	e009      	b.n	80034a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003490:	f7fe f98e 	bl	80017b0 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d902      	bls.n	80034a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	73fb      	strb	r3, [r7, #15]
        break;
 80034a2:	e005      	b.n	80034b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034a4:	4b37      	ldr	r3, [pc, #220]	@ (8003584 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1ef      	bne.n	8003490 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d160      	bne.n	8003578 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d111      	bne.n	80034e0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034bc:	4b31      	ldr	r3, [pc, #196]	@ (8003584 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80034c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6892      	ldr	r2, [r2, #8]
 80034cc:	0211      	lsls	r1, r2, #8
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	68d2      	ldr	r2, [r2, #12]
 80034d2:	0912      	lsrs	r2, r2, #4
 80034d4:	0452      	lsls	r2, r2, #17
 80034d6:	430a      	orrs	r2, r1
 80034d8:	492a      	ldr	r1, [pc, #168]	@ (8003584 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	610b      	str	r3, [r1, #16]
 80034de:	e027      	b.n	8003530 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d112      	bne.n	800350c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034e6:	4b27      	ldr	r3, [pc, #156]	@ (8003584 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80034ee:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6892      	ldr	r2, [r2, #8]
 80034f6:	0211      	lsls	r1, r2, #8
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6912      	ldr	r2, [r2, #16]
 80034fc:	0852      	lsrs	r2, r2, #1
 80034fe:	3a01      	subs	r2, #1
 8003500:	0552      	lsls	r2, r2, #21
 8003502:	430a      	orrs	r2, r1
 8003504:	491f      	ldr	r1, [pc, #124]	@ (8003584 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003506:	4313      	orrs	r3, r2
 8003508:	610b      	str	r3, [r1, #16]
 800350a:	e011      	b.n	8003530 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800350c:	4b1d      	ldr	r3, [pc, #116]	@ (8003584 <RCCEx_PLLSAI1_Config+0x1e4>)
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003514:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6892      	ldr	r2, [r2, #8]
 800351c:	0211      	lsls	r1, r2, #8
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6952      	ldr	r2, [r2, #20]
 8003522:	0852      	lsrs	r2, r2, #1
 8003524:	3a01      	subs	r2, #1
 8003526:	0652      	lsls	r2, r2, #25
 8003528:	430a      	orrs	r2, r1
 800352a:	4916      	ldr	r1, [pc, #88]	@ (8003584 <RCCEx_PLLSAI1_Config+0x1e4>)
 800352c:	4313      	orrs	r3, r2
 800352e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003530:	4b14      	ldr	r3, [pc, #80]	@ (8003584 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a13      	ldr	r2, [pc, #76]	@ (8003584 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003536:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800353a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353c:	f7fe f938 	bl	80017b0 <HAL_GetTick>
 8003540:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003542:	e009      	b.n	8003558 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003544:	f7fe f934 	bl	80017b0 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d902      	bls.n	8003558 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	73fb      	strb	r3, [r7, #15]
          break;
 8003556:	e005      	b.n	8003564 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003558:	4b0a      	ldr	r3, [pc, #40]	@ (8003584 <RCCEx_PLLSAI1_Config+0x1e4>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0ef      	beq.n	8003544 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003564:	7bfb      	ldrb	r3, [r7, #15]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d106      	bne.n	8003578 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800356a:	4b06      	ldr	r3, [pc, #24]	@ (8003584 <RCCEx_PLLSAI1_Config+0x1e4>)
 800356c:	691a      	ldr	r2, [r3, #16]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	4904      	ldr	r1, [pc, #16]	@ (8003584 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003574:	4313      	orrs	r3, r2
 8003576:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003578:	7bfb      	ldrb	r3, [r7, #15]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40021000 	.word	0x40021000

08003588 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003596:	4b6a      	ldr	r3, [pc, #424]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d018      	beq.n	80035d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80035a2:	4b67      	ldr	r3, [pc, #412]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	f003 0203 	and.w	r2, r3, #3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d10d      	bne.n	80035ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
       ||
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d009      	beq.n	80035ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80035ba:	4b61      	ldr	r3, [pc, #388]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	091b      	lsrs	r3, r3, #4
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
       ||
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d047      	beq.n	800365e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	73fb      	strb	r3, [r7, #15]
 80035d2:	e044      	b.n	800365e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d018      	beq.n	800360e <RCCEx_PLLSAI2_Config+0x86>
 80035dc:	2b03      	cmp	r3, #3
 80035de:	d825      	bhi.n	800362c <RCCEx_PLLSAI2_Config+0xa4>
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d002      	beq.n	80035ea <RCCEx_PLLSAI2_Config+0x62>
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d009      	beq.n	80035fc <RCCEx_PLLSAI2_Config+0x74>
 80035e8:	e020      	b.n	800362c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035ea:	4b55      	ldr	r3, [pc, #340]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d11d      	bne.n	8003632 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035fa:	e01a      	b.n	8003632 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035fc:	4b50      	ldr	r3, [pc, #320]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003604:	2b00      	cmp	r3, #0
 8003606:	d116      	bne.n	8003636 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800360c:	e013      	b.n	8003636 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800360e:	4b4c      	ldr	r3, [pc, #304]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10f      	bne.n	800363a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800361a:	4b49      	ldr	r3, [pc, #292]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1b8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d109      	bne.n	800363a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800362a:	e006      	b.n	800363a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
      break;
 8003630:	e004      	b.n	800363c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003632:	bf00      	nop
 8003634:	e002      	b.n	800363c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003636:	bf00      	nop
 8003638:	e000      	b.n	800363c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800363a:	bf00      	nop
    }

    if(status == HAL_OK)
 800363c:	7bfb      	ldrb	r3, [r7, #15]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10d      	bne.n	800365e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003642:	4b3f      	ldr	r3, [pc, #252]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6819      	ldr	r1, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	3b01      	subs	r3, #1
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	430b      	orrs	r3, r1
 8003658:	4939      	ldr	r1, [pc, #228]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1b8>)
 800365a:	4313      	orrs	r3, r2
 800365c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d167      	bne.n	8003734 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003664:	4b36      	ldr	r3, [pc, #216]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a35      	ldr	r2, [pc, #212]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1b8>)
 800366a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800366e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003670:	f7fe f89e 	bl	80017b0 <HAL_GetTick>
 8003674:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003676:	e009      	b.n	800368c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003678:	f7fe f89a 	bl	80017b0 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d902      	bls.n	800368c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	73fb      	strb	r3, [r7, #15]
        break;
 800368a:	e005      	b.n	8003698 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800368c:	4b2c      	ldr	r3, [pc, #176]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1b8>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1ef      	bne.n	8003678 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003698:	7bfb      	ldrb	r3, [r7, #15]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d14a      	bne.n	8003734 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d111      	bne.n	80036c8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036a4:	4b26      	ldr	r3, [pc, #152]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80036ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6892      	ldr	r2, [r2, #8]
 80036b4:	0211      	lsls	r1, r2, #8
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	68d2      	ldr	r2, [r2, #12]
 80036ba:	0912      	lsrs	r2, r2, #4
 80036bc:	0452      	lsls	r2, r2, #17
 80036be:	430a      	orrs	r2, r1
 80036c0:	491f      	ldr	r1, [pc, #124]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	614b      	str	r3, [r1, #20]
 80036c6:	e011      	b.n	80036ec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80036d0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6892      	ldr	r2, [r2, #8]
 80036d8:	0211      	lsls	r1, r2, #8
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6912      	ldr	r2, [r2, #16]
 80036de:	0852      	lsrs	r2, r2, #1
 80036e0:	3a01      	subs	r2, #1
 80036e2:	0652      	lsls	r2, r2, #25
 80036e4:	430a      	orrs	r2, r1
 80036e6:	4916      	ldr	r1, [pc, #88]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80036ec:	4b14      	ldr	r3, [pc, #80]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a13      	ldr	r2, [pc, #76]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f8:	f7fe f85a 	bl	80017b0 <HAL_GetTick>
 80036fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036fe:	e009      	b.n	8003714 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003700:	f7fe f856 	bl	80017b0 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d902      	bls.n	8003714 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	73fb      	strb	r3, [r7, #15]
          break;
 8003712:	e005      	b.n	8003720 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003714:	4b0a      	ldr	r3, [pc, #40]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0ef      	beq.n	8003700 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003720:	7bfb      	ldrb	r3, [r7, #15]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d106      	bne.n	8003734 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003726:	4b06      	ldr	r3, [pc, #24]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003728:	695a      	ldr	r2, [r3, #20]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	4904      	ldr	r1, [pc, #16]	@ (8003740 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003730:	4313      	orrs	r3, r2
 8003732:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003734:	7bfb      	ldrb	r3, [r7, #15]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40021000 	.word	0x40021000

08003744 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e095      	b.n	8003882 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375a:	2b00      	cmp	r3, #0
 800375c:	d108      	bne.n	8003770 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003766:	d009      	beq.n	800377c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	61da      	str	r2, [r3, #28]
 800376e:	e005      	b.n	800377c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d106      	bne.n	800379c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7fd f9e0 	bl	8000b5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037bc:	d902      	bls.n	80037c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	e002      	b.n	80037ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80037c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80037d2:	d007      	beq.n	80037e4 <HAL_SPI_Init+0xa0>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037dc:	d002      	beq.n	80037e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80037f4:	431a      	orrs	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	431a      	orrs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003826:	ea42 0103 	orr.w	r1, r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800382e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	0c1b      	lsrs	r3, r3, #16
 8003840:	f003 0204 	and.w	r2, r3, #4
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003848:	f003 0310 	and.w	r3, r3, #16
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003860:	ea42 0103 	orr.w	r1, r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b088      	sub	sp, #32
 800388e:	af00      	add	r7, sp, #0
 8003890:	60f8      	str	r0, [r7, #12]
 8003892:	60b9      	str	r1, [r7, #8]
 8003894:	603b      	str	r3, [r7, #0]
 8003896:	4613      	mov	r3, r2
 8003898:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800389a:	f7fd ff89 	bl	80017b0 <HAL_GetTick>
 800389e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80038a0:	88fb      	ldrh	r3, [r7, #6]
 80038a2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d001      	beq.n	80038b4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80038b0:	2302      	movs	r3, #2
 80038b2:	e15c      	b.n	8003b6e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <HAL_SPI_Transmit+0x36>
 80038ba:	88fb      	ldrh	r3, [r7, #6]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e154      	b.n	8003b6e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d101      	bne.n	80038d2 <HAL_SPI_Transmit+0x48>
 80038ce:	2302      	movs	r3, #2
 80038d0:	e14d      	b.n	8003b6e <HAL_SPI_Transmit+0x2e4>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2203      	movs	r2, #3
 80038de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	88fa      	ldrh	r2, [r7, #6]
 80038f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	88fa      	ldrh	r2, [r7, #6]
 80038f8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003924:	d10f      	bne.n	8003946 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003934:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003944:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003950:	2b40      	cmp	r3, #64	@ 0x40
 8003952:	d007      	beq.n	8003964 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003962:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800396c:	d952      	bls.n	8003a14 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <HAL_SPI_Transmit+0xf2>
 8003976:	8b7b      	ldrh	r3, [r7, #26]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d145      	bne.n	8003a08 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003980:	881a      	ldrh	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800398c:	1c9a      	adds	r2, r3, #2
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003996:	b29b      	uxth	r3, r3
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039a0:	e032      	b.n	8003a08 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d112      	bne.n	80039d6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b4:	881a      	ldrh	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c0:	1c9a      	adds	r2, r3, #2
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80039d4:	e018      	b.n	8003a08 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039d6:	f7fd feeb 	bl	80017b0 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d803      	bhi.n	80039ee <HAL_SPI_Transmit+0x164>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039ec:	d102      	bne.n	80039f4 <HAL_SPI_Transmit+0x16a>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d109      	bne.n	8003a08 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e0b2      	b.n	8003b6e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1c7      	bne.n	80039a2 <HAL_SPI_Transmit+0x118>
 8003a12:	e083      	b.n	8003b1c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <HAL_SPI_Transmit+0x198>
 8003a1c:	8b7b      	ldrh	r3, [r7, #26]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d177      	bne.n	8003b12 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d912      	bls.n	8003a52 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a30:	881a      	ldrh	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a3c:	1c9a      	adds	r2, r3, #2
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	3b02      	subs	r3, #2
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a50:	e05f      	b.n	8003b12 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	330c      	adds	r3, #12
 8003a5c:	7812      	ldrb	r2, [r2, #0]
 8003a5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a64:	1c5a      	adds	r2, r3, #1
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003a78:	e04b      	b.n	8003b12 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d12b      	bne.n	8003ae0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d912      	bls.n	8003ab8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a96:	881a      	ldrh	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa2:	1c9a      	adds	r2, r3, #2
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	3b02      	subs	r3, #2
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ab6:	e02c      	b.n	8003b12 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	330c      	adds	r3, #12
 8003ac2:	7812      	ldrb	r2, [r2, #0]
 8003ac4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ade:	e018      	b.n	8003b12 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ae0:	f7fd fe66 	bl	80017b0 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d803      	bhi.n	8003af8 <HAL_SPI_Transmit+0x26e>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003af6:	d102      	bne.n	8003afe <HAL_SPI_Transmit+0x274>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d109      	bne.n	8003b12 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e02d      	b.n	8003b6e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1ae      	bne.n	8003a7a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b1c:	69fa      	ldr	r2, [r7, #28]
 8003b1e:	6839      	ldr	r1, [r7, #0]
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 fa5b 	bl	8003fdc <SPI_EndRxTxTransaction>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10a      	bne.n	8003b50 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	617b      	str	r3, [r7, #20]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	617b      	str	r3, [r7, #20]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	617b      	str	r3, [r7, #20]
 8003b4e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e000      	b.n	8003b6e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
  }
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3720      	adds	r7, #32
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10e      	bne.n	8003bb8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d009      	beq.n	8003bb8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d004      	beq.n	8003bb8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	4798      	blx	r3
    return;
 8003bb6:	e0ce      	b.n	8003d56 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d009      	beq.n	8003bd6 <HAL_SPI_IRQHandler+0x5e>
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d004      	beq.n	8003bd6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	4798      	blx	r3
    return;
 8003bd4:	e0bf      	b.n	8003d56 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10a      	bne.n	8003bf6 <HAL_SPI_IRQHandler+0x7e>
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d105      	bne.n	8003bf6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 80b0 	beq.w	8003d56 <HAL_SPI_IRQHandler+0x1de>
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 80aa 	beq.w	8003d56 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d023      	beq.n	8003c54 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b03      	cmp	r3, #3
 8003c16:	d011      	beq.n	8003c3c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c1c:	f043 0204 	orr.w	r2, r3, #4
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c24:	2300      	movs	r3, #0
 8003c26:	617b      	str	r3, [r7, #20]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	e00b      	b.n	8003c54 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	613b      	str	r3, [r7, #16]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	613b      	str	r3, [r7, #16]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	613b      	str	r3, [r7, #16]
 8003c50:	693b      	ldr	r3, [r7, #16]
        return;
 8003c52:	e080      	b.n	8003d56 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	f003 0320 	and.w	r3, r3, #32
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d014      	beq.n	8003c88 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c62:	f043 0201 	orr.w	r2, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00c      	beq.n	8003cac <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c96:	f043 0208 	orr.w	r2, r3, #8
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60bb      	str	r3, [r7, #8]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d04f      	beq.n	8003d54 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003cc2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d104      	bne.n	8003ce0 <HAL_SPI_IRQHandler+0x168>
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d034      	beq.n	8003d4a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0203 	bic.w	r2, r2, #3
 8003cee:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d011      	beq.n	8003d1c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cfc:	4a17      	ldr	r2, [pc, #92]	@ (8003d5c <HAL_SPI_IRQHandler+0x1e4>)
 8003cfe:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fd feae 	bl	8001a66 <HAL_DMA_Abort_IT>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d005      	beq.n	8003d1c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d14:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d016      	beq.n	8003d52 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d28:	4a0c      	ldr	r2, [pc, #48]	@ (8003d5c <HAL_SPI_IRQHandler+0x1e4>)
 8003d2a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fd fe98 	bl	8001a66 <HAL_DMA_Abort_IT>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d40:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8003d48:	e003      	b.n	8003d52 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f808 	bl	8003d60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003d50:	e000      	b.n	8003d54 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003d52:	bf00      	nop
    return;
 8003d54:	bf00      	nop
  }
}
 8003d56:	3720      	adds	r7, #32
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	08003d75 	.word	0x08003d75

08003d60 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d80:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f7ff ffe5 	bl	8003d60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d96:	bf00      	nop
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
	...

08003da0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b088      	sub	sp, #32
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	603b      	str	r3, [r7, #0]
 8003dac:	4613      	mov	r3, r2
 8003dae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003db0:	f7fd fcfe 	bl	80017b0 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db8:	1a9b      	subs	r3, r3, r2
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003dc0:	f7fd fcf6 	bl	80017b0 <HAL_GetTick>
 8003dc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003dc6:	4b39      	ldr	r3, [pc, #228]	@ (8003eac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	015b      	lsls	r3, r3, #5
 8003dcc:	0d1b      	lsrs	r3, r3, #20
 8003dce:	69fa      	ldr	r2, [r7, #28]
 8003dd0:	fb02 f303 	mul.w	r3, r2, r3
 8003dd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dd6:	e054      	b.n	8003e82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003dde:	d050      	beq.n	8003e82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003de0:	f7fd fce6 	bl	80017b0 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	69fa      	ldr	r2, [r7, #28]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d902      	bls.n	8003df6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d13d      	bne.n	8003e72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e0e:	d111      	bne.n	8003e34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e18:	d004      	beq.n	8003e24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e22:	d107      	bne.n	8003e34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e3c:	d10f      	bne.n	8003e5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e017      	b.n	8003ea2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	bf0c      	ite	eq
 8003e92:	2301      	moveq	r3, #1
 8003e94:	2300      	movne	r3, #0
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	461a      	mov	r2, r3
 8003e9a:	79fb      	ldrb	r3, [r7, #7]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d19b      	bne.n	8003dd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3720      	adds	r7, #32
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	20000000 	.word	0x20000000

08003eb0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08a      	sub	sp, #40	@ 0x28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
 8003ebc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003ec2:	f7fd fc75 	bl	80017b0 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eca:	1a9b      	subs	r3, r3, r2
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	4413      	add	r3, r2
 8003ed0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003ed2:	f7fd fc6d 	bl	80017b0 <HAL_GetTick>
 8003ed6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	330c      	adds	r3, #12
 8003ede:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003ee0:	4b3d      	ldr	r3, [pc, #244]	@ (8003fd8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	00da      	lsls	r2, r3, #3
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	0d1b      	lsrs	r3, r3, #20
 8003ef0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ef2:	fb02 f303 	mul.w	r3, r2, r3
 8003ef6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003ef8:	e060      	b.n	8003fbc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003f00:	d107      	bne.n	8003f12 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d104      	bne.n	8003f12 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003f10:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f18:	d050      	beq.n	8003fbc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f1a:	f7fd fc49 	bl	80017b0 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d902      	bls.n	8003f30 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d13d      	bne.n	8003fac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f3e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f48:	d111      	bne.n	8003f6e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f52:	d004      	beq.n	8003f5e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f5c:	d107      	bne.n	8003f6e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f6c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f76:	d10f      	bne.n	8003f98 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f96:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e010      	b.n	8003fce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d196      	bne.n	8003efa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3728      	adds	r7, #40	@ 0x28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	20000000 	.word	0x20000000

08003fdc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af02      	add	r7, sp, #8
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f7ff ff5b 	bl	8003eb0 <SPI_WaitFifoStateUntilTimeout>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d007      	beq.n	8004010 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004004:	f043 0220 	orr.w	r2, r3, #32
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e027      	b.n	8004060 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2200      	movs	r2, #0
 8004018:	2180      	movs	r1, #128	@ 0x80
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f7ff fec0 	bl	8003da0 <SPI_WaitFlagStateUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d007      	beq.n	8004036 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800402a:	f043 0220 	orr.w	r2, r3, #32
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e014      	b.n	8004060 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2200      	movs	r2, #0
 800403e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f7ff ff34 	bl	8003eb0 <SPI_WaitFifoStateUntilTimeout>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d007      	beq.n	800405e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004052:	f043 0220 	orr.w	r2, r3, #32
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e000      	b.n	8004060 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e040      	b.n	80040fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800407e:	2b00      	cmp	r3, #0
 8004080:	d106      	bne.n	8004090 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fc ff1a 	bl	8000ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2224      	movs	r2, #36	@ 0x24
 8004094:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0201 	bic.w	r2, r2, #1
 80040a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fedc 	bl	8004e6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 fc21 	bl	80048fc <UART_SetConfig>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e01b      	b.n	80040fc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0201 	orr.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 ff5b 	bl	8004fb0 <UART_CheckIdleState>
 80040fa:	4603      	mov	r3, r0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b08a      	sub	sp, #40	@ 0x28
 8004108:	af02      	add	r7, sp, #8
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	603b      	str	r3, [r7, #0]
 8004110:	4613      	mov	r3, r2
 8004112:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004118:	2b20      	cmp	r3, #32
 800411a:	d177      	bne.n	800420c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <HAL_UART_Transmit+0x24>
 8004122:	88fb      	ldrh	r3, [r7, #6]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e070      	b.n	800420e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2221      	movs	r2, #33	@ 0x21
 8004138:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800413a:	f7fd fb39 	bl	80017b0 <HAL_GetTick>
 800413e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	88fa      	ldrh	r2, [r7, #6]
 8004144:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	88fa      	ldrh	r2, [r7, #6]
 800414c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004158:	d108      	bne.n	800416c <HAL_UART_Transmit+0x68>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d104      	bne.n	800416c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004162:	2300      	movs	r3, #0
 8004164:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	61bb      	str	r3, [r7, #24]
 800416a:	e003      	b.n	8004174 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004170:	2300      	movs	r3, #0
 8004172:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004174:	e02f      	b.n	80041d6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2200      	movs	r2, #0
 800417e:	2180      	movs	r1, #128	@ 0x80
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 ffbd 	bl	8005100 <UART_WaitOnFlagUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d004      	beq.n	8004196 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2220      	movs	r2, #32
 8004190:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e03b      	b.n	800420e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10b      	bne.n	80041b4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	881a      	ldrh	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041a8:	b292      	uxth	r2, r2
 80041aa:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	3302      	adds	r3, #2
 80041b0:	61bb      	str	r3, [r7, #24]
 80041b2:	e007      	b.n	80041c4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	781a      	ldrb	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	3301      	adds	r3, #1
 80041c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1c9      	bne.n	8004176 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2200      	movs	r2, #0
 80041ea:	2140      	movs	r1, #64	@ 0x40
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 ff87 	bl	8005100 <UART_WaitOnFlagUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d004      	beq.n	8004202 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2220      	movs	r2, #32
 80041fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e005      	b.n	800420e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2220      	movs	r2, #32
 8004206:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004208:	2300      	movs	r3, #0
 800420a:	e000      	b.n	800420e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800420c:	2302      	movs	r3, #2
  }
}
 800420e:	4618      	mov	r0, r3
 8004210:	3720      	adds	r7, #32
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08a      	sub	sp, #40	@ 0x28
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	4613      	mov	r3, r2
 8004224:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800422c:	2b20      	cmp	r3, #32
 800422e:	d137      	bne.n	80042a0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <HAL_UART_Receive_IT+0x24>
 8004236:	88fb      	ldrh	r3, [r7, #6]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e030      	b.n	80042a2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a18      	ldr	r2, [pc, #96]	@ (80042ac <HAL_UART_Receive_IT+0x94>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d01f      	beq.n	8004290 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d018      	beq.n	8004290 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	613b      	str	r3, [r7, #16]
   return(result);
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004272:	627b      	str	r3, [r7, #36]	@ 0x24
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	461a      	mov	r2, r3
 800427a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427c:	623b      	str	r3, [r7, #32]
 800427e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	69f9      	ldr	r1, [r7, #28]
 8004282:	6a3a      	ldr	r2, [r7, #32]
 8004284:	e841 2300 	strex	r3, r2, [r1]
 8004288:	61bb      	str	r3, [r7, #24]
   return(result);
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e6      	bne.n	800425e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004290:	88fb      	ldrh	r3, [r7, #6]
 8004292:	461a      	mov	r2, r3
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 ffa0 	bl	80051dc <UART_Start_Receive_IT>
 800429c:	4603      	mov	r3, r0
 800429e:	e000      	b.n	80042a2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80042a0:	2302      	movs	r3, #2
  }
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3728      	adds	r7, #40	@ 0x28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	40008000 	.word	0x40008000

080042b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b0ba      	sub	sp, #232	@ 0xe8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80042d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80042da:	f640 030f 	movw	r3, #2063	@ 0x80f
 80042de:	4013      	ands	r3, r2
 80042e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80042e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d115      	bne.n	8004318 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80042ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042f0:	f003 0320 	and.w	r3, r3, #32
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00f      	beq.n	8004318 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b00      	cmp	r3, #0
 8004302:	d009      	beq.n	8004318 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 82ca 	beq.w	80048a2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	4798      	blx	r3
      }
      return;
 8004316:	e2c4      	b.n	80048a2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004318:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 8117 	beq.w	8004550 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d106      	bne.n	800433c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800432e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004332:	4b85      	ldr	r3, [pc, #532]	@ (8004548 <HAL_UART_IRQHandler+0x298>)
 8004334:	4013      	ands	r3, r2
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 810a 	beq.w	8004550 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800433c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	d011      	beq.n	800436c <HAL_UART_IRQHandler+0xbc>
 8004348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800434c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00b      	beq.n	800436c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2201      	movs	r2, #1
 800435a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004362:	f043 0201 	orr.w	r2, r3, #1
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800436c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d011      	beq.n	800439c <HAL_UART_IRQHandler+0xec>
 8004378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00b      	beq.n	800439c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2202      	movs	r2, #2
 800438a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004392:	f043 0204 	orr.w	r2, r3, #4
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800439c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d011      	beq.n	80043cc <HAL_UART_IRQHandler+0x11c>
 80043a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00b      	beq.n	80043cc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2204      	movs	r2, #4
 80043ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043c2:	f043 0202 	orr.w	r2, r3, #2
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80043cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043d0:	f003 0308 	and.w	r3, r3, #8
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d017      	beq.n	8004408 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80043d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043dc:	f003 0320 	and.w	r3, r3, #32
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d105      	bne.n	80043f0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80043e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00b      	beq.n	8004408 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2208      	movs	r2, #8
 80043f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043fe:	f043 0208 	orr.w	r2, r3, #8
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800440c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004410:	2b00      	cmp	r3, #0
 8004412:	d012      	beq.n	800443a <HAL_UART_IRQHandler+0x18a>
 8004414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004418:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00c      	beq.n	800443a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004428:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004430:	f043 0220 	orr.w	r2, r3, #32
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 8230 	beq.w	80048a6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800444a:	f003 0320 	and.w	r3, r3, #32
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00d      	beq.n	800446e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004456:	f003 0320 	and.w	r3, r3, #32
 800445a:	2b00      	cmp	r3, #0
 800445c:	d007      	beq.n	800446e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004474:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004482:	2b40      	cmp	r3, #64	@ 0x40
 8004484:	d005      	beq.n	8004492 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004486:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800448a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800448e:	2b00      	cmp	r3, #0
 8004490:	d04f      	beq.n	8004532 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 ff68 	bl	8005368 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a2:	2b40      	cmp	r3, #64	@ 0x40
 80044a4:	d141      	bne.n	800452a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3308      	adds	r3, #8
 80044ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044b4:	e853 3f00 	ldrex	r3, [r3]
 80044b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80044bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80044c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3308      	adds	r3, #8
 80044ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80044d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80044d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80044de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80044e2:	e841 2300 	strex	r3, r2, [r1]
 80044e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80044ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1d9      	bne.n	80044a6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d013      	beq.n	8004522 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044fe:	4a13      	ldr	r2, [pc, #76]	@ (800454c <HAL_UART_IRQHandler+0x29c>)
 8004500:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004506:	4618      	mov	r0, r3
 8004508:	f7fd faad 	bl	8001a66 <HAL_DMA_Abort_IT>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d017      	beq.n	8004542 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800451c:	4610      	mov	r0, r2
 800451e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004520:	e00f      	b.n	8004542 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f9d4 	bl	80048d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004528:	e00b      	b.n	8004542 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f9d0 	bl	80048d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004530:	e007      	b.n	8004542 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f9cc 	bl	80048d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004540:	e1b1      	b.n	80048a6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004542:	bf00      	nop
    return;
 8004544:	e1af      	b.n	80048a6 <HAL_UART_IRQHandler+0x5f6>
 8004546:	bf00      	nop
 8004548:	04000120 	.word	0x04000120
 800454c:	08005431 	.word	0x08005431

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004554:	2b01      	cmp	r3, #1
 8004556:	f040 816a 	bne.w	800482e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800455a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800455e:	f003 0310 	and.w	r3, r3, #16
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 8163 	beq.w	800482e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800456c:	f003 0310 	and.w	r3, r3, #16
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 815c 	beq.w	800482e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2210      	movs	r2, #16
 800457c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004588:	2b40      	cmp	r3, #64	@ 0x40
 800458a:	f040 80d4 	bne.w	8004736 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800459a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 80ad 	beq.w	80046fe <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80045aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045ae:	429a      	cmp	r2, r3
 80045b0:	f080 80a5 	bcs.w	80046fe <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045ba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f040 8086 	bne.w	80046dc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80045dc:	e853 3f00 	ldrex	r3, [r3]
 80045e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80045e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80045e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80045fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80045fe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004602:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004606:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800460a:	e841 2300 	strex	r3, r2, [r1]
 800460e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004612:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1da      	bne.n	80045d0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3308      	adds	r3, #8
 8004620:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004622:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004624:	e853 3f00 	ldrex	r3, [r3]
 8004628:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800462a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800462c:	f023 0301 	bic.w	r3, r3, #1
 8004630:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3308      	adds	r3, #8
 800463a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800463e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004642:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004644:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004646:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800464a:	e841 2300 	strex	r3, r2, [r1]
 800464e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004650:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1e1      	bne.n	800461a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	3308      	adds	r3, #8
 800465c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004660:	e853 3f00 	ldrex	r3, [r3]
 8004664:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004666:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004668:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800466c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	3308      	adds	r3, #8
 8004676:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800467a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800467c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004680:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004682:	e841 2300 	strex	r3, r2, [r1]
 8004686:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004688:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1e3      	bne.n	8004656 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2220      	movs	r2, #32
 8004692:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046a4:	e853 3f00 	ldrex	r3, [r3]
 80046a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80046aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046ac:	f023 0310 	bic.w	r3, r3, #16
 80046b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	461a      	mov	r2, r3
 80046ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80046be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80046c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80046c6:	e841 2300 	strex	r3, r2, [r1]
 80046ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80046cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1e4      	bne.n	800469c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fd f987 	bl	80019ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	4619      	mov	r1, r3
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f8f4 	bl	80048e4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80046fc:	e0d5      	b.n	80048aa <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004704:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004708:	429a      	cmp	r2, r3
 800470a:	f040 80ce 	bne.w	80048aa <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0320 	and.w	r3, r3, #32
 800471a:	2b20      	cmp	r3, #32
 800471c:	f040 80c5 	bne.w	80048aa <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800472c:	4619      	mov	r1, r3
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f8d8 	bl	80048e4 <HAL_UARTEx_RxEventCallback>
      return;
 8004734:	e0b9      	b.n	80048aa <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004742:	b29b      	uxth	r3, r3
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004750:	b29b      	uxth	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 80ab 	beq.w	80048ae <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004758:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 80a6 	beq.w	80048ae <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800476a:	e853 3f00 	ldrex	r3, [r3]
 800476e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004772:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004776:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	461a      	mov	r2, r3
 8004780:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004784:	647b      	str	r3, [r7, #68]	@ 0x44
 8004786:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004788:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800478a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800478c:	e841 2300 	strex	r3, r2, [r1]
 8004790:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1e4      	bne.n	8004762 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3308      	adds	r3, #8
 800479e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a2:	e853 3f00 	ldrex	r3, [r3]
 80047a6:	623b      	str	r3, [r7, #32]
   return(result);
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	f023 0301 	bic.w	r3, r3, #1
 80047ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	3308      	adds	r3, #8
 80047b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80047bc:	633a      	str	r2, [r7, #48]	@ 0x30
 80047be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047c4:	e841 2300 	strex	r3, r2, [r1]
 80047c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1e3      	bne.n	8004798 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2220      	movs	r2, #32
 80047d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	e853 3f00 	ldrex	r3, [r3]
 80047f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f023 0310 	bic.w	r3, r3, #16
 80047f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	461a      	mov	r2, r3
 8004802:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004806:	61fb      	str	r3, [r7, #28]
 8004808:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480a:	69b9      	ldr	r1, [r7, #24]
 800480c:	69fa      	ldr	r2, [r7, #28]
 800480e:	e841 2300 	strex	r3, r2, [r1]
 8004812:	617b      	str	r3, [r7, #20]
   return(result);
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1e4      	bne.n	80047e4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2202      	movs	r2, #2
 800481e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004820:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004824:	4619      	mov	r1, r3
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f85c 	bl	80048e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800482c:	e03f      	b.n	80048ae <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800482e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004832:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00e      	beq.n	8004858 <HAL_UART_IRQHandler+0x5a8>
 800483a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800483e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d008      	beq.n	8004858 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800484e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 ffe9 	bl	8005828 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004856:	e02d      	b.n	80048b4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800485c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00e      	beq.n	8004882 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004868:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800486c:	2b00      	cmp	r3, #0
 800486e:	d008      	beq.n	8004882 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004874:	2b00      	cmp	r3, #0
 8004876:	d01c      	beq.n	80048b2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	4798      	blx	r3
    }
    return;
 8004880:	e017      	b.n	80048b2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800488a:	2b00      	cmp	r3, #0
 800488c:	d012      	beq.n	80048b4 <HAL_UART_IRQHandler+0x604>
 800488e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00c      	beq.n	80048b4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 fdde 	bl	800545c <UART_EndTransmit_IT>
    return;
 80048a0:	e008      	b.n	80048b4 <HAL_UART_IRQHandler+0x604>
      return;
 80048a2:	bf00      	nop
 80048a4:	e006      	b.n	80048b4 <HAL_UART_IRQHandler+0x604>
    return;
 80048a6:	bf00      	nop
 80048a8:	e004      	b.n	80048b4 <HAL_UART_IRQHandler+0x604>
      return;
 80048aa:	bf00      	nop
 80048ac:	e002      	b.n	80048b4 <HAL_UART_IRQHandler+0x604>
      return;
 80048ae:	bf00      	nop
 80048b0:	e000      	b.n	80048b4 <HAL_UART_IRQHandler+0x604>
    return;
 80048b2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80048b4:	37e8      	adds	r7, #232	@ 0xe8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop

080048bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	460b      	mov	r3, r1
 80048ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004900:	b08a      	sub	sp, #40	@ 0x28
 8004902:	af00      	add	r7, sp, #0
 8004904:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004906:	2300      	movs	r3, #0
 8004908:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	431a      	orrs	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	431a      	orrs	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	4313      	orrs	r3, r2
 8004922:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	4ba4      	ldr	r3, [pc, #656]	@ (8004bbc <UART_SetConfig+0x2c0>)
 800492c:	4013      	ands	r3, r2
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	6812      	ldr	r2, [r2, #0]
 8004932:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004934:	430b      	orrs	r3, r1
 8004936:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a99      	ldr	r2, [pc, #612]	@ (8004bc0 <UART_SetConfig+0x2c4>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d004      	beq.n	8004968 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004964:	4313      	orrs	r3, r2
 8004966:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004978:	430a      	orrs	r2, r1
 800497a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a90      	ldr	r2, [pc, #576]	@ (8004bc4 <UART_SetConfig+0x2c8>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d126      	bne.n	80049d4 <UART_SetConfig+0xd8>
 8004986:	4b90      	ldr	r3, [pc, #576]	@ (8004bc8 <UART_SetConfig+0x2cc>)
 8004988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800498c:	f003 0303 	and.w	r3, r3, #3
 8004990:	2b03      	cmp	r3, #3
 8004992:	d81b      	bhi.n	80049cc <UART_SetConfig+0xd0>
 8004994:	a201      	add	r2, pc, #4	@ (adr r2, 800499c <UART_SetConfig+0xa0>)
 8004996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499a:	bf00      	nop
 800499c:	080049ad 	.word	0x080049ad
 80049a0:	080049bd 	.word	0x080049bd
 80049a4:	080049b5 	.word	0x080049b5
 80049a8:	080049c5 	.word	0x080049c5
 80049ac:	2301      	movs	r3, #1
 80049ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049b2:	e116      	b.n	8004be2 <UART_SetConfig+0x2e6>
 80049b4:	2302      	movs	r3, #2
 80049b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ba:	e112      	b.n	8004be2 <UART_SetConfig+0x2e6>
 80049bc:	2304      	movs	r3, #4
 80049be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049c2:	e10e      	b.n	8004be2 <UART_SetConfig+0x2e6>
 80049c4:	2308      	movs	r3, #8
 80049c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ca:	e10a      	b.n	8004be2 <UART_SetConfig+0x2e6>
 80049cc:	2310      	movs	r3, #16
 80049ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049d2:	e106      	b.n	8004be2 <UART_SetConfig+0x2e6>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a7c      	ldr	r2, [pc, #496]	@ (8004bcc <UART_SetConfig+0x2d0>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d138      	bne.n	8004a50 <UART_SetConfig+0x154>
 80049de:	4b7a      	ldr	r3, [pc, #488]	@ (8004bc8 <UART_SetConfig+0x2cc>)
 80049e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e4:	f003 030c 	and.w	r3, r3, #12
 80049e8:	2b0c      	cmp	r3, #12
 80049ea:	d82d      	bhi.n	8004a48 <UART_SetConfig+0x14c>
 80049ec:	a201      	add	r2, pc, #4	@ (adr r2, 80049f4 <UART_SetConfig+0xf8>)
 80049ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f2:	bf00      	nop
 80049f4:	08004a29 	.word	0x08004a29
 80049f8:	08004a49 	.word	0x08004a49
 80049fc:	08004a49 	.word	0x08004a49
 8004a00:	08004a49 	.word	0x08004a49
 8004a04:	08004a39 	.word	0x08004a39
 8004a08:	08004a49 	.word	0x08004a49
 8004a0c:	08004a49 	.word	0x08004a49
 8004a10:	08004a49 	.word	0x08004a49
 8004a14:	08004a31 	.word	0x08004a31
 8004a18:	08004a49 	.word	0x08004a49
 8004a1c:	08004a49 	.word	0x08004a49
 8004a20:	08004a49 	.word	0x08004a49
 8004a24:	08004a41 	.word	0x08004a41
 8004a28:	2300      	movs	r3, #0
 8004a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a2e:	e0d8      	b.n	8004be2 <UART_SetConfig+0x2e6>
 8004a30:	2302      	movs	r3, #2
 8004a32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a36:	e0d4      	b.n	8004be2 <UART_SetConfig+0x2e6>
 8004a38:	2304      	movs	r3, #4
 8004a3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a3e:	e0d0      	b.n	8004be2 <UART_SetConfig+0x2e6>
 8004a40:	2308      	movs	r3, #8
 8004a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a46:	e0cc      	b.n	8004be2 <UART_SetConfig+0x2e6>
 8004a48:	2310      	movs	r3, #16
 8004a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a4e:	e0c8      	b.n	8004be2 <UART_SetConfig+0x2e6>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a5e      	ldr	r2, [pc, #376]	@ (8004bd0 <UART_SetConfig+0x2d4>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d125      	bne.n	8004aa6 <UART_SetConfig+0x1aa>
 8004a5a:	4b5b      	ldr	r3, [pc, #364]	@ (8004bc8 <UART_SetConfig+0x2cc>)
 8004a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a60:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004a64:	2b30      	cmp	r3, #48	@ 0x30
 8004a66:	d016      	beq.n	8004a96 <UART_SetConfig+0x19a>
 8004a68:	2b30      	cmp	r3, #48	@ 0x30
 8004a6a:	d818      	bhi.n	8004a9e <UART_SetConfig+0x1a2>
 8004a6c:	2b20      	cmp	r3, #32
 8004a6e:	d00a      	beq.n	8004a86 <UART_SetConfig+0x18a>
 8004a70:	2b20      	cmp	r3, #32
 8004a72:	d814      	bhi.n	8004a9e <UART_SetConfig+0x1a2>
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <UART_SetConfig+0x182>
 8004a78:	2b10      	cmp	r3, #16
 8004a7a:	d008      	beq.n	8004a8e <UART_SetConfig+0x192>
 8004a7c:	e00f      	b.n	8004a9e <UART_SetConfig+0x1a2>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a84:	e0ad      	b.n	8004be2 <UART_SetConfig+0x2e6>
 8004a86:	2302      	movs	r3, #2
 8004a88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a8c:	e0a9      	b.n	8004be2 <UART_SetConfig+0x2e6>
 8004a8e:	2304      	movs	r3, #4
 8004a90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a94:	e0a5      	b.n	8004be2 <UART_SetConfig+0x2e6>
 8004a96:	2308      	movs	r3, #8
 8004a98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a9c:	e0a1      	b.n	8004be2 <UART_SetConfig+0x2e6>
 8004a9e:	2310      	movs	r3, #16
 8004aa0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aa4:	e09d      	b.n	8004be2 <UART_SetConfig+0x2e6>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a4a      	ldr	r2, [pc, #296]	@ (8004bd4 <UART_SetConfig+0x2d8>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d125      	bne.n	8004afc <UART_SetConfig+0x200>
 8004ab0:	4b45      	ldr	r3, [pc, #276]	@ (8004bc8 <UART_SetConfig+0x2cc>)
 8004ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004aba:	2bc0      	cmp	r3, #192	@ 0xc0
 8004abc:	d016      	beq.n	8004aec <UART_SetConfig+0x1f0>
 8004abe:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ac0:	d818      	bhi.n	8004af4 <UART_SetConfig+0x1f8>
 8004ac2:	2b80      	cmp	r3, #128	@ 0x80
 8004ac4:	d00a      	beq.n	8004adc <UART_SetConfig+0x1e0>
 8004ac6:	2b80      	cmp	r3, #128	@ 0x80
 8004ac8:	d814      	bhi.n	8004af4 <UART_SetConfig+0x1f8>
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <UART_SetConfig+0x1d8>
 8004ace:	2b40      	cmp	r3, #64	@ 0x40
 8004ad0:	d008      	beq.n	8004ae4 <UART_SetConfig+0x1e8>
 8004ad2:	e00f      	b.n	8004af4 <UART_SetConfig+0x1f8>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ada:	e082      	b.n	8004be2 <UART_SetConfig+0x2e6>
 8004adc:	2302      	movs	r3, #2
 8004ade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ae2:	e07e      	b.n	8004be2 <UART_SetConfig+0x2e6>
 8004ae4:	2304      	movs	r3, #4
 8004ae6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aea:	e07a      	b.n	8004be2 <UART_SetConfig+0x2e6>
 8004aec:	2308      	movs	r3, #8
 8004aee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004af2:	e076      	b.n	8004be2 <UART_SetConfig+0x2e6>
 8004af4:	2310      	movs	r3, #16
 8004af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004afa:	e072      	b.n	8004be2 <UART_SetConfig+0x2e6>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a35      	ldr	r2, [pc, #212]	@ (8004bd8 <UART_SetConfig+0x2dc>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d12a      	bne.n	8004b5c <UART_SetConfig+0x260>
 8004b06:	4b30      	ldr	r3, [pc, #192]	@ (8004bc8 <UART_SetConfig+0x2cc>)
 8004b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b14:	d01a      	beq.n	8004b4c <UART_SetConfig+0x250>
 8004b16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b1a:	d81b      	bhi.n	8004b54 <UART_SetConfig+0x258>
 8004b1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b20:	d00c      	beq.n	8004b3c <UART_SetConfig+0x240>
 8004b22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b26:	d815      	bhi.n	8004b54 <UART_SetConfig+0x258>
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <UART_SetConfig+0x238>
 8004b2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b30:	d008      	beq.n	8004b44 <UART_SetConfig+0x248>
 8004b32:	e00f      	b.n	8004b54 <UART_SetConfig+0x258>
 8004b34:	2300      	movs	r3, #0
 8004b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b3a:	e052      	b.n	8004be2 <UART_SetConfig+0x2e6>
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b42:	e04e      	b.n	8004be2 <UART_SetConfig+0x2e6>
 8004b44:	2304      	movs	r3, #4
 8004b46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b4a:	e04a      	b.n	8004be2 <UART_SetConfig+0x2e6>
 8004b4c:	2308      	movs	r3, #8
 8004b4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b52:	e046      	b.n	8004be2 <UART_SetConfig+0x2e6>
 8004b54:	2310      	movs	r3, #16
 8004b56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b5a:	e042      	b.n	8004be2 <UART_SetConfig+0x2e6>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a17      	ldr	r2, [pc, #92]	@ (8004bc0 <UART_SetConfig+0x2c4>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d13a      	bne.n	8004bdc <UART_SetConfig+0x2e0>
 8004b66:	4b18      	ldr	r3, [pc, #96]	@ (8004bc8 <UART_SetConfig+0x2cc>)
 8004b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b6c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004b70:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b74:	d01a      	beq.n	8004bac <UART_SetConfig+0x2b0>
 8004b76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b7a:	d81b      	bhi.n	8004bb4 <UART_SetConfig+0x2b8>
 8004b7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b80:	d00c      	beq.n	8004b9c <UART_SetConfig+0x2a0>
 8004b82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b86:	d815      	bhi.n	8004bb4 <UART_SetConfig+0x2b8>
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <UART_SetConfig+0x298>
 8004b8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b90:	d008      	beq.n	8004ba4 <UART_SetConfig+0x2a8>
 8004b92:	e00f      	b.n	8004bb4 <UART_SetConfig+0x2b8>
 8004b94:	2300      	movs	r3, #0
 8004b96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b9a:	e022      	b.n	8004be2 <UART_SetConfig+0x2e6>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ba2:	e01e      	b.n	8004be2 <UART_SetConfig+0x2e6>
 8004ba4:	2304      	movs	r3, #4
 8004ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004baa:	e01a      	b.n	8004be2 <UART_SetConfig+0x2e6>
 8004bac:	2308      	movs	r3, #8
 8004bae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bb2:	e016      	b.n	8004be2 <UART_SetConfig+0x2e6>
 8004bb4:	2310      	movs	r3, #16
 8004bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bba:	e012      	b.n	8004be2 <UART_SetConfig+0x2e6>
 8004bbc:	efff69f3 	.word	0xefff69f3
 8004bc0:	40008000 	.word	0x40008000
 8004bc4:	40013800 	.word	0x40013800
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	40004400 	.word	0x40004400
 8004bd0:	40004800 	.word	0x40004800
 8004bd4:	40004c00 	.word	0x40004c00
 8004bd8:	40005000 	.word	0x40005000
 8004bdc:	2310      	movs	r3, #16
 8004bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a9f      	ldr	r2, [pc, #636]	@ (8004e64 <UART_SetConfig+0x568>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d17a      	bne.n	8004ce2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d824      	bhi.n	8004c3e <UART_SetConfig+0x342>
 8004bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bfc <UART_SetConfig+0x300>)
 8004bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfa:	bf00      	nop
 8004bfc:	08004c21 	.word	0x08004c21
 8004c00:	08004c3f 	.word	0x08004c3f
 8004c04:	08004c29 	.word	0x08004c29
 8004c08:	08004c3f 	.word	0x08004c3f
 8004c0c:	08004c2f 	.word	0x08004c2f
 8004c10:	08004c3f 	.word	0x08004c3f
 8004c14:	08004c3f 	.word	0x08004c3f
 8004c18:	08004c3f 	.word	0x08004c3f
 8004c1c:	08004c37 	.word	0x08004c37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c20:	f7fe f848 	bl	8002cb4 <HAL_RCC_GetPCLK1Freq>
 8004c24:	61f8      	str	r0, [r7, #28]
        break;
 8004c26:	e010      	b.n	8004c4a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c28:	4b8f      	ldr	r3, [pc, #572]	@ (8004e68 <UART_SetConfig+0x56c>)
 8004c2a:	61fb      	str	r3, [r7, #28]
        break;
 8004c2c:	e00d      	b.n	8004c4a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c2e:	f7fd ffa9 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 8004c32:	61f8      	str	r0, [r7, #28]
        break;
 8004c34:	e009      	b.n	8004c4a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c3a:	61fb      	str	r3, [r7, #28]
        break;
 8004c3c:	e005      	b.n	8004c4a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 80fb 	beq.w	8004e48 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	4613      	mov	r3, r2
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	4413      	add	r3, r2
 8004c5c:	69fa      	ldr	r2, [r7, #28]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d305      	bcc.n	8004c6e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c68:	69fa      	ldr	r2, [r7, #28]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d903      	bls.n	8004c76 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c74:	e0e8      	b.n	8004e48 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	461c      	mov	r4, r3
 8004c7c:	4615      	mov	r5, r2
 8004c7e:	f04f 0200 	mov.w	r2, #0
 8004c82:	f04f 0300 	mov.w	r3, #0
 8004c86:	022b      	lsls	r3, r5, #8
 8004c88:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004c8c:	0222      	lsls	r2, r4, #8
 8004c8e:	68f9      	ldr	r1, [r7, #12]
 8004c90:	6849      	ldr	r1, [r1, #4]
 8004c92:	0849      	lsrs	r1, r1, #1
 8004c94:	2000      	movs	r0, #0
 8004c96:	4688      	mov	r8, r1
 8004c98:	4681      	mov	r9, r0
 8004c9a:	eb12 0a08 	adds.w	sl, r2, r8
 8004c9e:	eb43 0b09 	adc.w	fp, r3, r9
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	603b      	str	r3, [r7, #0]
 8004caa:	607a      	str	r2, [r7, #4]
 8004cac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cb0:	4650      	mov	r0, sl
 8004cb2:	4659      	mov	r1, fp
 8004cb4:	f7fb fadc 	bl	8000270 <__aeabi_uldivmod>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cc6:	d308      	bcc.n	8004cda <UART_SetConfig+0x3de>
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cce:	d204      	bcs.n	8004cda <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	60da      	str	r2, [r3, #12]
 8004cd8:	e0b6      	b.n	8004e48 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ce0:	e0b2      	b.n	8004e48 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cea:	d15e      	bne.n	8004daa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004cec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d828      	bhi.n	8004d46 <UART_SetConfig+0x44a>
 8004cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8004cfc <UART_SetConfig+0x400>)
 8004cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfa:	bf00      	nop
 8004cfc:	08004d21 	.word	0x08004d21
 8004d00:	08004d29 	.word	0x08004d29
 8004d04:	08004d31 	.word	0x08004d31
 8004d08:	08004d47 	.word	0x08004d47
 8004d0c:	08004d37 	.word	0x08004d37
 8004d10:	08004d47 	.word	0x08004d47
 8004d14:	08004d47 	.word	0x08004d47
 8004d18:	08004d47 	.word	0x08004d47
 8004d1c:	08004d3f 	.word	0x08004d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d20:	f7fd ffc8 	bl	8002cb4 <HAL_RCC_GetPCLK1Freq>
 8004d24:	61f8      	str	r0, [r7, #28]
        break;
 8004d26:	e014      	b.n	8004d52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d28:	f7fd ffda 	bl	8002ce0 <HAL_RCC_GetPCLK2Freq>
 8004d2c:	61f8      	str	r0, [r7, #28]
        break;
 8004d2e:	e010      	b.n	8004d52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d30:	4b4d      	ldr	r3, [pc, #308]	@ (8004e68 <UART_SetConfig+0x56c>)
 8004d32:	61fb      	str	r3, [r7, #28]
        break;
 8004d34:	e00d      	b.n	8004d52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d36:	f7fd ff25 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 8004d3a:	61f8      	str	r0, [r7, #28]
        break;
 8004d3c:	e009      	b.n	8004d52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d42:	61fb      	str	r3, [r7, #28]
        break;
 8004d44:	e005      	b.n	8004d52 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004d46:	2300      	movs	r3, #0
 8004d48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d077      	beq.n	8004e48 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	005a      	lsls	r2, r3, #1
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	085b      	lsrs	r3, r3, #1
 8004d62:	441a      	add	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	2b0f      	cmp	r3, #15
 8004d72:	d916      	bls.n	8004da2 <UART_SetConfig+0x4a6>
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d7a:	d212      	bcs.n	8004da2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	f023 030f 	bic.w	r3, r3, #15
 8004d84:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	085b      	lsrs	r3, r3, #1
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	8afb      	ldrh	r3, [r7, #22]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	8afa      	ldrh	r2, [r7, #22]
 8004d9e:	60da      	str	r2, [r3, #12]
 8004da0:	e052      	b.n	8004e48 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004da8:	e04e      	b.n	8004e48 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004daa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004dae:	2b08      	cmp	r3, #8
 8004db0:	d827      	bhi.n	8004e02 <UART_SetConfig+0x506>
 8004db2:	a201      	add	r2, pc, #4	@ (adr r2, 8004db8 <UART_SetConfig+0x4bc>)
 8004db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db8:	08004ddd 	.word	0x08004ddd
 8004dbc:	08004de5 	.word	0x08004de5
 8004dc0:	08004ded 	.word	0x08004ded
 8004dc4:	08004e03 	.word	0x08004e03
 8004dc8:	08004df3 	.word	0x08004df3
 8004dcc:	08004e03 	.word	0x08004e03
 8004dd0:	08004e03 	.word	0x08004e03
 8004dd4:	08004e03 	.word	0x08004e03
 8004dd8:	08004dfb 	.word	0x08004dfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ddc:	f7fd ff6a 	bl	8002cb4 <HAL_RCC_GetPCLK1Freq>
 8004de0:	61f8      	str	r0, [r7, #28]
        break;
 8004de2:	e014      	b.n	8004e0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004de4:	f7fd ff7c 	bl	8002ce0 <HAL_RCC_GetPCLK2Freq>
 8004de8:	61f8      	str	r0, [r7, #28]
        break;
 8004dea:	e010      	b.n	8004e0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dec:	4b1e      	ldr	r3, [pc, #120]	@ (8004e68 <UART_SetConfig+0x56c>)
 8004dee:	61fb      	str	r3, [r7, #28]
        break;
 8004df0:	e00d      	b.n	8004e0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004df2:	f7fd fec7 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 8004df6:	61f8      	str	r0, [r7, #28]
        break;
 8004df8:	e009      	b.n	8004e0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dfe:	61fb      	str	r3, [r7, #28]
        break;
 8004e00:	e005      	b.n	8004e0e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004e0c:	bf00      	nop
    }

    if (pclk != 0U)
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d019      	beq.n	8004e48 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	085a      	lsrs	r2, r3, #1
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	441a      	add	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e26:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	2b0f      	cmp	r3, #15
 8004e2c:	d909      	bls.n	8004e42 <UART_SetConfig+0x546>
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e34:	d205      	bcs.n	8004e42 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60da      	str	r2, [r3, #12]
 8004e40:	e002      	b.n	8004e48 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004e54:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3728      	adds	r7, #40	@ 0x28
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e62:	bf00      	nop
 8004e64:	40008000 	.word	0x40008000
 8004e68:	00f42400 	.word	0x00f42400

08004e6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e78:	f003 0308 	and.w	r3, r3, #8
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00a      	beq.n	8004e96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00a      	beq.n	8004eb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00a      	beq.n	8004eda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ede:	f003 0304 	and.w	r3, r3, #4
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f00:	f003 0310 	and.w	r3, r3, #16
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00a      	beq.n	8004f1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f22:	f003 0320 	and.w	r3, r3, #32
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d01a      	beq.n	8004f82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f6a:	d10a      	bne.n	8004f82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	605a      	str	r2, [r3, #4]
  }
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b098      	sub	sp, #96	@ 0x60
 8004fb4:	af02      	add	r7, sp, #8
 8004fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fc0:	f7fc fbf6 	bl	80017b0 <HAL_GetTick>
 8004fc4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0308 	and.w	r3, r3, #8
 8004fd0:	2b08      	cmp	r3, #8
 8004fd2:	d12e      	bne.n	8005032 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004fd8:	9300      	str	r3, [sp, #0]
 8004fda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f88c 	bl	8005100 <UART_WaitOnFlagUntilTimeout>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d021      	beq.n	8005032 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ff6:	e853 3f00 	ldrex	r3, [r3]
 8004ffa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ffe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005002:	653b      	str	r3, [r7, #80]	@ 0x50
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	461a      	mov	r2, r3
 800500a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800500c:	647b      	str	r3, [r7, #68]	@ 0x44
 800500e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005010:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005012:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005014:	e841 2300 	strex	r3, r2, [r1]
 8005018:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800501a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1e6      	bne.n	8004fee <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2220      	movs	r2, #32
 8005024:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e062      	b.n	80050f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0304 	and.w	r3, r3, #4
 800503c:	2b04      	cmp	r3, #4
 800503e:	d149      	bne.n	80050d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005040:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005048:	2200      	movs	r2, #0
 800504a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f856 	bl	8005100 <UART_WaitOnFlagUntilTimeout>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d03c      	beq.n	80050d4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005062:	e853 3f00 	ldrex	r3, [r3]
 8005066:	623b      	str	r3, [r7, #32]
   return(result);
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800506e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	461a      	mov	r2, r3
 8005076:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005078:	633b      	str	r3, [r7, #48]	@ 0x30
 800507a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800507e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005080:	e841 2300 	strex	r3, r2, [r1]
 8005084:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1e6      	bne.n	800505a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3308      	adds	r3, #8
 8005092:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	e853 3f00 	ldrex	r3, [r3]
 800509a:	60fb      	str	r3, [r7, #12]
   return(result);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f023 0301 	bic.w	r3, r3, #1
 80050a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	3308      	adds	r3, #8
 80050aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050ac:	61fa      	str	r2, [r7, #28]
 80050ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b0:	69b9      	ldr	r1, [r7, #24]
 80050b2:	69fa      	ldr	r2, [r7, #28]
 80050b4:	e841 2300 	strex	r3, r2, [r1]
 80050b8:	617b      	str	r3, [r7, #20]
   return(result);
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1e5      	bne.n	800508c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2220      	movs	r2, #32
 80050c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e011      	b.n	80050f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2220      	movs	r2, #32
 80050d8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2220      	movs	r2, #32
 80050de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3758      	adds	r7, #88	@ 0x58
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	603b      	str	r3, [r7, #0]
 800510c:	4613      	mov	r3, r2
 800510e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005110:	e04f      	b.n	80051b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005118:	d04b      	beq.n	80051b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800511a:	f7fc fb49 	bl	80017b0 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	429a      	cmp	r2, r3
 8005128:	d302      	bcc.n	8005130 <UART_WaitOnFlagUntilTimeout+0x30>
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e04e      	b.n	80051d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0304 	and.w	r3, r3, #4
 800513e:	2b00      	cmp	r3, #0
 8005140:	d037      	beq.n	80051b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	2b80      	cmp	r3, #128	@ 0x80
 8005146:	d034      	beq.n	80051b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	2b40      	cmp	r3, #64	@ 0x40
 800514c:	d031      	beq.n	80051b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	f003 0308 	and.w	r3, r3, #8
 8005158:	2b08      	cmp	r3, #8
 800515a:	d110      	bne.n	800517e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2208      	movs	r2, #8
 8005162:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 f8ff 	bl	8005368 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2208      	movs	r2, #8
 800516e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e029      	b.n	80051d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005188:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800518c:	d111      	bne.n	80051b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005196:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 f8e5 	bl	8005368 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2220      	movs	r2, #32
 80051a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e00f      	b.n	80051d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	69da      	ldr	r2, [r3, #28]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	4013      	ands	r3, r2
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	429a      	cmp	r2, r3
 80051c0:	bf0c      	ite	eq
 80051c2:	2301      	moveq	r3, #1
 80051c4:	2300      	movne	r3, #0
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	461a      	mov	r2, r3
 80051ca:	79fb      	ldrb	r3, [r7, #7]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d0a0      	beq.n	8005112 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
	...

080051dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051dc:	b480      	push	{r7}
 80051de:	b097      	sub	sp, #92	@ 0x5c
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	4613      	mov	r3, r2
 80051e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	88fa      	ldrh	r2, [r7, #6]
 80051f4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	88fa      	ldrh	r2, [r7, #6]
 80051fc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800520e:	d10e      	bne.n	800522e <UART_Start_Receive_IT+0x52>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d105      	bne.n	8005224 <UART_Start_Receive_IT+0x48>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800521e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005222:	e02d      	b.n	8005280 <UART_Start_Receive_IT+0xa4>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	22ff      	movs	r2, #255	@ 0xff
 8005228:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800522c:	e028      	b.n	8005280 <UART_Start_Receive_IT+0xa4>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10d      	bne.n	8005252 <UART_Start_Receive_IT+0x76>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d104      	bne.n	8005248 <UART_Start_Receive_IT+0x6c>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	22ff      	movs	r2, #255	@ 0xff
 8005242:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005246:	e01b      	b.n	8005280 <UART_Start_Receive_IT+0xa4>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	227f      	movs	r2, #127	@ 0x7f
 800524c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005250:	e016      	b.n	8005280 <UART_Start_Receive_IT+0xa4>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800525a:	d10d      	bne.n	8005278 <UART_Start_Receive_IT+0x9c>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d104      	bne.n	800526e <UART_Start_Receive_IT+0x92>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	227f      	movs	r2, #127	@ 0x7f
 8005268:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800526c:	e008      	b.n	8005280 <UART_Start_Receive_IT+0xa4>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	223f      	movs	r2, #63	@ 0x3f
 8005272:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005276:	e003      	b.n	8005280 <UART_Start_Receive_IT+0xa4>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2222      	movs	r2, #34	@ 0x22
 800528c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3308      	adds	r3, #8
 8005296:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800529a:	e853 3f00 	ldrex	r3, [r3]
 800529e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052a2:	f043 0301 	orr.w	r3, r3, #1
 80052a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	3308      	adds	r3, #8
 80052ae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80052b0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80052b2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80052b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052b8:	e841 2300 	strex	r3, r2, [r1]
 80052bc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80052be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1e5      	bne.n	8005290 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052cc:	d107      	bne.n	80052de <UART_Start_Receive_IT+0x102>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d103      	bne.n	80052de <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4a21      	ldr	r2, [pc, #132]	@ (8005360 <UART_Start_Receive_IT+0x184>)
 80052da:	669a      	str	r2, [r3, #104]	@ 0x68
 80052dc:	e002      	b.n	80052e4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4a20      	ldr	r2, [pc, #128]	@ (8005364 <UART_Start_Receive_IT+0x188>)
 80052e2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d019      	beq.n	8005320 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f4:	e853 3f00 	ldrex	r3, [r3]
 80052f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fc:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005300:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	461a      	mov	r2, r3
 8005308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800530a:	637b      	str	r3, [r7, #52]	@ 0x34
 800530c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005310:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005312:	e841 2300 	strex	r3, r2, [r1]
 8005316:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1e6      	bne.n	80052ec <UART_Start_Receive_IT+0x110>
 800531e:	e018      	b.n	8005352 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	e853 3f00 	ldrex	r3, [r3]
 800532c:	613b      	str	r3, [r7, #16]
   return(result);
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f043 0320 	orr.w	r3, r3, #32
 8005334:	653b      	str	r3, [r7, #80]	@ 0x50
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	461a      	mov	r2, r3
 800533c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800533e:	623b      	str	r3, [r7, #32]
 8005340:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	69f9      	ldr	r1, [r7, #28]
 8005344:	6a3a      	ldr	r2, [r7, #32]
 8005346:	e841 2300 	strex	r3, r2, [r1]
 800534a:	61bb      	str	r3, [r7, #24]
   return(result);
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1e6      	bne.n	8005320 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	375c      	adds	r7, #92	@ 0x5c
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	0800566d 	.word	0x0800566d
 8005364:	080054b1 	.word	0x080054b1

08005368 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005368:	b480      	push	{r7}
 800536a:	b095      	sub	sp, #84	@ 0x54
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005378:	e853 3f00 	ldrex	r3, [r3]
 800537c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800537e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005380:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005384:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	461a      	mov	r2, r3
 800538c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800538e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005390:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005392:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005394:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005396:	e841 2300 	strex	r3, r2, [r1]
 800539a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800539c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1e6      	bne.n	8005370 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	3308      	adds	r3, #8
 80053a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	e853 3f00 	ldrex	r3, [r3]
 80053b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	f023 0301 	bic.w	r3, r3, #1
 80053b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	3308      	adds	r3, #8
 80053c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053ca:	e841 2300 	strex	r3, r2, [r1]
 80053ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1e5      	bne.n	80053a2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d118      	bne.n	8005410 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	e853 3f00 	ldrex	r3, [r3]
 80053ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	f023 0310 	bic.w	r3, r3, #16
 80053f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	461a      	mov	r2, r3
 80053fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053fc:	61bb      	str	r3, [r7, #24]
 80053fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005400:	6979      	ldr	r1, [r7, #20]
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	e841 2300 	strex	r3, r2, [r1]
 8005408:	613b      	str	r3, [r7, #16]
   return(result);
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1e6      	bne.n	80053de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2220      	movs	r2, #32
 8005414:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005424:	bf00      	nop
 8005426:	3754      	adds	r7, #84	@ 0x54
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f7ff fa3e 	bl	80048d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005454:	bf00      	nop
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b088      	sub	sp, #32
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	e853 3f00 	ldrex	r3, [r3]
 8005470:	60bb      	str	r3, [r7, #8]
   return(result);
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005478:	61fb      	str	r3, [r7, #28]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	461a      	mov	r2, r3
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	61bb      	str	r3, [r7, #24]
 8005484:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005486:	6979      	ldr	r1, [r7, #20]
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	e841 2300 	strex	r3, r2, [r1]
 800548e:	613b      	str	r3, [r7, #16]
   return(result);
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1e6      	bne.n	8005464 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2220      	movs	r2, #32
 800549a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7ff fa0a 	bl	80048bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054a8:	bf00      	nop
 80054aa:	3720      	adds	r7, #32
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b09c      	sub	sp, #112	@ 0x70
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80054be:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054c8:	2b22      	cmp	r3, #34	@ 0x22
 80054ca:	f040 80be 	bne.w	800564a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80054d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80054d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80054dc:	b2d9      	uxtb	r1, r3
 80054de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80054e2:	b2da      	uxtb	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e8:	400a      	ands	r2, r1
 80054ea:	b2d2      	uxtb	r2, r2
 80054ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054f2:	1c5a      	adds	r2, r3, #1
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80054fe:	b29b      	uxth	r3, r3
 8005500:	3b01      	subs	r3, #1
 8005502:	b29a      	uxth	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005510:	b29b      	uxth	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	f040 80a3 	bne.w	800565e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005520:	e853 3f00 	ldrex	r3, [r3]
 8005524:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005528:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800552c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005536:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005538:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800553c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800553e:	e841 2300 	strex	r3, r2, [r1]
 8005542:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005544:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1e6      	bne.n	8005518 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	3308      	adds	r3, #8
 8005550:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005554:	e853 3f00 	ldrex	r3, [r3]
 8005558:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800555a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800555c:	f023 0301 	bic.w	r3, r3, #1
 8005560:	667b      	str	r3, [r7, #100]	@ 0x64
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	3308      	adds	r3, #8
 8005568:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800556a:	647a      	str	r2, [r7, #68]	@ 0x44
 800556c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005570:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005572:	e841 2300 	strex	r3, r2, [r1]
 8005576:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1e5      	bne.n	800554a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2220      	movs	r2, #32
 8005582:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a34      	ldr	r2, [pc, #208]	@ (8005668 <UART_RxISR_8BIT+0x1b8>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d01f      	beq.n	80055dc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d018      	beq.n	80055dc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b2:	e853 3f00 	ldrex	r3, [r3]
 80055b6:	623b      	str	r3, [r7, #32]
   return(result);
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80055be:	663b      	str	r3, [r7, #96]	@ 0x60
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	461a      	mov	r2, r3
 80055c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80055ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055d0:	e841 2300 	strex	r3, r2, [r1]
 80055d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1e6      	bne.n	80055aa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d12e      	bne.n	8005642 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	e853 3f00 	ldrex	r3, [r3]
 80055f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f023 0310 	bic.w	r3, r3, #16
 80055fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	461a      	mov	r2, r3
 8005606:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005608:	61fb      	str	r3, [r7, #28]
 800560a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560c:	69b9      	ldr	r1, [r7, #24]
 800560e:	69fa      	ldr	r2, [r7, #28]
 8005610:	e841 2300 	strex	r3, r2, [r1]
 8005614:	617b      	str	r3, [r7, #20]
   return(result);
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1e6      	bne.n	80055ea <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	f003 0310 	and.w	r3, r3, #16
 8005626:	2b10      	cmp	r3, #16
 8005628:	d103      	bne.n	8005632 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2210      	movs	r2, #16
 8005630:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005638:	4619      	mov	r1, r3
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7ff f952 	bl	80048e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005640:	e00d      	b.n	800565e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7fb f92c 	bl	80008a0 <HAL_UART_RxCpltCallback>
}
 8005648:	e009      	b.n	800565e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	8b1b      	ldrh	r3, [r3, #24]
 8005650:	b29a      	uxth	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f042 0208 	orr.w	r2, r2, #8
 800565a:	b292      	uxth	r2, r2
 800565c:	831a      	strh	r2, [r3, #24]
}
 800565e:	bf00      	nop
 8005660:	3770      	adds	r7, #112	@ 0x70
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	40008000 	.word	0x40008000

0800566c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b09c      	sub	sp, #112	@ 0x70
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800567a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005684:	2b22      	cmp	r3, #34	@ 0x22
 8005686:	f040 80be 	bne.w	8005806 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005690:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005698:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800569a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800569e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80056a2:	4013      	ands	r3, r2
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ae:	1c9a      	adds	r2, r3, #2
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	3b01      	subs	r3, #1
 80056be:	b29a      	uxth	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f040 80a3 	bne.w	800581a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056dc:	e853 3f00 	ldrex	r3, [r3]
 80056e0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80056e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	461a      	mov	r2, r3
 80056f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80056f4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80056f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80056fa:	e841 2300 	strex	r3, r2, [r1]
 80056fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005700:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1e6      	bne.n	80056d4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3308      	adds	r3, #8
 800570c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005710:	e853 3f00 	ldrex	r3, [r3]
 8005714:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005718:	f023 0301 	bic.w	r3, r3, #1
 800571c:	663b      	str	r3, [r7, #96]	@ 0x60
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3308      	adds	r3, #8
 8005724:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005726:	643a      	str	r2, [r7, #64]	@ 0x40
 8005728:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800572c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800572e:	e841 2300 	strex	r3, r2, [r1]
 8005732:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1e5      	bne.n	8005706 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2220      	movs	r2, #32
 800573e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a34      	ldr	r2, [pc, #208]	@ (8005824 <UART_RxISR_16BIT+0x1b8>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d01f      	beq.n	8005798 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d018      	beq.n	8005798 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	e853 3f00 	ldrex	r3, [r3]
 8005772:	61fb      	str	r3, [r7, #28]
   return(result);
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800577a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	461a      	mov	r2, r3
 8005782:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005784:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005786:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005788:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800578a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800578c:	e841 2300 	strex	r3, r2, [r1]
 8005790:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1e6      	bne.n	8005766 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800579c:	2b01      	cmp	r3, #1
 800579e:	d12e      	bne.n	80057fe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	e853 3f00 	ldrex	r3, [r3]
 80057b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	f023 0310 	bic.w	r3, r3, #16
 80057ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	461a      	mov	r2, r3
 80057c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057c4:	61bb      	str	r3, [r7, #24]
 80057c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c8:	6979      	ldr	r1, [r7, #20]
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	e841 2300 	strex	r3, r2, [r1]
 80057d0:	613b      	str	r3, [r7, #16]
   return(result);
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1e6      	bne.n	80057a6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	f003 0310 	and.w	r3, r3, #16
 80057e2:	2b10      	cmp	r3, #16
 80057e4:	d103      	bne.n	80057ee <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2210      	movs	r2, #16
 80057ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80057f4:	4619      	mov	r1, r3
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7ff f874 	bl	80048e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057fc:	e00d      	b.n	800581a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7fb f84e 	bl	80008a0 <HAL_UART_RxCpltCallback>
}
 8005804:	e009      	b.n	800581a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	8b1b      	ldrh	r3, [r3, #24]
 800580c:	b29a      	uxth	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f042 0208 	orr.w	r2, r2, #8
 8005816:	b292      	uxth	r2, r2
 8005818:	831a      	strh	r2, [r3, #24]
}
 800581a:	bf00      	nop
 800581c:	3770      	adds	r7, #112	@ 0x70
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	40008000 	.word	0x40008000

08005828 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	4603      	mov	r3, r0
 8005844:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005846:	2300      	movs	r3, #0
 8005848:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800584a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800584e:	2b84      	cmp	r3, #132	@ 0x84
 8005850:	d005      	beq.n	800585e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005852:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4413      	add	r3, r2
 800585a:	3303      	adds	r3, #3
 800585c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800585e:	68fb      	ldr	r3, [r7, #12]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005870:	f000 fdca 	bl	8006408 <vTaskStartScheduler>
  
  return osOK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	bd80      	pop	{r7, pc}

0800587a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800587a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800587c:	b089      	sub	sp, #36	@ 0x24
 800587e:	af04      	add	r7, sp, #16
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d020      	beq.n	80058ce <osThreadCreate+0x54>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d01c      	beq.n	80058ce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685c      	ldr	r4, [r3, #4]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691e      	ldr	r6, [r3, #16]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7ff ffc8 	bl	800583c <makeFreeRtosPriority>
 80058ac:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058b6:	9202      	str	r2, [sp, #8]
 80058b8:	9301      	str	r3, [sp, #4]
 80058ba:	9100      	str	r1, [sp, #0]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	4632      	mov	r2, r6
 80058c0:	4629      	mov	r1, r5
 80058c2:	4620      	mov	r0, r4
 80058c4:	f000 fbd2 	bl	800606c <xTaskCreateStatic>
 80058c8:	4603      	mov	r3, r0
 80058ca:	60fb      	str	r3, [r7, #12]
 80058cc:	e01c      	b.n	8005908 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685c      	ldr	r4, [r3, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058da:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7ff ffaa 	bl	800583c <makeFreeRtosPriority>
 80058e8:	4602      	mov	r2, r0
 80058ea:	f107 030c 	add.w	r3, r7, #12
 80058ee:	9301      	str	r3, [sp, #4]
 80058f0:	9200      	str	r2, [sp, #0]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	4632      	mov	r2, r6
 80058f6:	4629      	mov	r1, r5
 80058f8:	4620      	mov	r0, r4
 80058fa:	f000 fc17 	bl	800612c <xTaskCreate>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b01      	cmp	r3, #1
 8005902:	d001      	beq.n	8005908 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005904:	2300      	movs	r3, #0
 8005906:	e000      	b.n	800590a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005908:	68fb      	ldr	r3, [r7, #12]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005912 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b084      	sub	sp, #16
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <osDelay+0x16>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	e000      	b.n	800592a <osDelay+0x18>
 8005928:	2301      	movs	r3, #1
 800592a:	4618      	mov	r0, r3
 800592c:	f000 fd36 	bl	800639c <vTaskDelay>
  
  return osOK;
 8005930:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800593a:	b480      	push	{r7}
 800593c:	b083      	sub	sp, #12
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f103 0208 	add.w	r2, r3, #8
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005952:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f103 0208 	add.w	r2, r3, #8
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f103 0208 	add.w	r2, r3, #8
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800596e:	bf00      	nop
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800597a:	b480      	push	{r7}
 800597c:	b083      	sub	sp, #12
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	689a      	ldr	r2, [r3, #8]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	1c5a      	adds	r2, r3, #1
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	601a      	str	r2, [r3, #0]
}
 80059d0:	bf00      	nop
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059f2:	d103      	bne.n	80059fc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	e00c      	b.n	8005a16 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	3308      	adds	r3, #8
 8005a00:	60fb      	str	r3, [r7, #12]
 8005a02:	e002      	b.n	8005a0a <vListInsert+0x2e>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	60fb      	str	r3, [r7, #12]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d2f6      	bcs.n	8005a04 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	683a      	ldr	r2, [r7, #0]
 8005a24:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	601a      	str	r2, [r3, #0]
}
 8005a42:	bf00      	nop
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b085      	sub	sp, #20
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6892      	ldr	r2, [r2, #8]
 8005a64:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6852      	ldr	r2, [r2, #4]
 8005a6e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d103      	bne.n	8005a82 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	689a      	ldr	r2, [r3, #8]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	1e5a      	subs	r2, r3, #1
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
	...

08005aa4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10b      	bne.n	8005ad0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005abc:	f383 8811 	msr	BASEPRI, r3
 8005ac0:	f3bf 8f6f 	isb	sy
 8005ac4:	f3bf 8f4f 	dsb	sy
 8005ac8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005aca:	bf00      	nop
 8005acc:	bf00      	nop
 8005ace:	e7fd      	b.n	8005acc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005ad0:	f001 fb72 	bl	80071b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005adc:	68f9      	ldr	r1, [r7, #12]
 8005ade:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005ae0:	fb01 f303 	mul.w	r3, r1, r3
 8005ae4:	441a      	add	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b00:	3b01      	subs	r3, #1
 8005b02:	68f9      	ldr	r1, [r7, #12]
 8005b04:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b06:	fb01 f303 	mul.w	r3, r1, r3
 8005b0a:	441a      	add	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	22ff      	movs	r2, #255	@ 0xff
 8005b14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	22ff      	movs	r2, #255	@ 0xff
 8005b1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d114      	bne.n	8005b50 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d01a      	beq.n	8005b64 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	3310      	adds	r3, #16
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 feb2 	bl	800689c <xTaskRemoveFromEventList>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d012      	beq.n	8005b64 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b74 <xQueueGenericReset+0xd0>)
 8005b40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	f3bf 8f6f 	isb	sy
 8005b4e:	e009      	b.n	8005b64 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	3310      	adds	r3, #16
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7ff fef0 	bl	800593a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	3324      	adds	r3, #36	@ 0x24
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7ff feeb 	bl	800593a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005b64:	f001 fb5a 	bl	800721c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005b68:	2301      	movs	r3, #1
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	e000ed04 	.word	0xe000ed04

08005b78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b08a      	sub	sp, #40	@ 0x28
 8005b7c:	af02      	add	r7, sp, #8
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	4613      	mov	r3, r2
 8005b84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10b      	bne.n	8005ba4 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b90:	f383 8811 	msr	BASEPRI, r3
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	613b      	str	r3, [r7, #16]
}
 8005b9e:	bf00      	nop
 8005ba0:	bf00      	nop
 8005ba2:	e7fd      	b.n	8005ba0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	fb02 f303 	mul.w	r3, r2, r3
 8005bac:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	3348      	adds	r3, #72	@ 0x48
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f001 fc22 	bl	80073fc <pvPortMalloc>
 8005bb8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d011      	beq.n	8005be4 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	3348      	adds	r3, #72	@ 0x48
 8005bc8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005bd2:	79fa      	ldrb	r2, [r7, #7]
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	68b9      	ldr	r1, [r7, #8]
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 f805 	bl	8005bee <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005be4:	69bb      	ldr	r3, [r7, #24]
	}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3720      	adds	r7, #32
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b084      	sub	sp, #16
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	60f8      	str	r0, [r7, #12]
 8005bf6:	60b9      	str	r1, [r7, #8]
 8005bf8:	607a      	str	r2, [r7, #4]
 8005bfa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d103      	bne.n	8005c0a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	e002      	b.n	8005c10 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	69b8      	ldr	r0, [r7, #24]
 8005c20:	f7ff ff40 	bl	8005aa4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005c24:	bf00      	nop
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b08e      	sub	sp, #56	@ 0x38
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10b      	bne.n	8005c58 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	623b      	str	r3, [r7, #32]
}
 8005c52:	bf00      	nop
 8005c54:	bf00      	nop
 8005c56:	e7fd      	b.n	8005c54 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00b      	beq.n	8005c78 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	61fb      	str	r3, [r7, #28]
}
 8005c72:	bf00      	nop
 8005c74:	bf00      	nop
 8005c76:	e7fd      	b.n	8005c74 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d103      	bne.n	8005c88 <xQueueGiveFromISR+0x5c>
 8005c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <xQueueGiveFromISR+0x60>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e000      	b.n	8005c8e <xQueueGiveFromISR+0x62>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10b      	bne.n	8005caa <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c96:	f383 8811 	msr	BASEPRI, r3
 8005c9a:	f3bf 8f6f 	isb	sy
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	61bb      	str	r3, [r7, #24]
}
 8005ca4:	bf00      	nop
 8005ca6:	bf00      	nop
 8005ca8:	e7fd      	b.n	8005ca6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005caa:	f001 fb65 	bl	8007378 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005cae:	f3ef 8211 	mrs	r2, BASEPRI
 8005cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	617a      	str	r2, [r7, #20]
 8005cc4:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005cc6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cce:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d22b      	bcs.n	8005d32 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cdc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ce0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce6:	1c5a      	adds	r2, r3, #1
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cea:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005cec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cf4:	d112      	bne.n	8005d1c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d016      	beq.n	8005d2c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d00:	3324      	adds	r3, #36	@ 0x24
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 fdca 	bl	800689c <xTaskRemoveFromEventList>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00e      	beq.n	8005d2c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00b      	beq.n	8005d2c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	2201      	movs	r2, #1
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	e007      	b.n	8005d2c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d20:	3301      	adds	r3, #1
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	b25a      	sxtb	r2, r3
 8005d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d30:	e001      	b.n	8005d36 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d32:	2300      	movs	r3, #0
 8005d34:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d38:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005d40:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3738      	adds	r7, #56	@ 0x38
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b08e      	sub	sp, #56	@ 0x38
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d56:	2300      	movs	r3, #0
 8005d58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10b      	bne.n	8005d80 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d6c:	f383 8811 	msr	BASEPRI, r3
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	623b      	str	r3, [r7, #32]
}
 8005d7a:	bf00      	nop
 8005d7c:	bf00      	nop
 8005d7e:	e7fd      	b.n	8005d7c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00b      	beq.n	8005da0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d8c:	f383 8811 	msr	BASEPRI, r3
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	61fb      	str	r3, [r7, #28]
}
 8005d9a:	bf00      	nop
 8005d9c:	bf00      	nop
 8005d9e:	e7fd      	b.n	8005d9c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005da0:	f000 ff3c 	bl	8006c1c <xTaskGetSchedulerState>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d102      	bne.n	8005db0 <xQueueSemaphoreTake+0x64>
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d101      	bne.n	8005db4 <xQueueSemaphoreTake+0x68>
 8005db0:	2301      	movs	r3, #1
 8005db2:	e000      	b.n	8005db6 <xQueueSemaphoreTake+0x6a>
 8005db4:	2300      	movs	r3, #0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10b      	bne.n	8005dd2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dbe:	f383 8811 	msr	BASEPRI, r3
 8005dc2:	f3bf 8f6f 	isb	sy
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	61bb      	str	r3, [r7, #24]
}
 8005dcc:	bf00      	nop
 8005dce:	bf00      	nop
 8005dd0:	e7fd      	b.n	8005dce <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005dd2:	f001 f9f1 	bl	80071b8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dda:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d024      	beq.n	8005e2c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de4:	1e5a      	subs	r2, r3, #1
 8005de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d104      	bne.n	8005dfc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005df2:	f001 f837 	bl	8006e64 <pvTaskIncrementMutexHeldCount>
 8005df6:	4602      	mov	r2, r0
 8005df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dfa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00f      	beq.n	8005e24 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e06:	3310      	adds	r3, #16
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f000 fd47 	bl	800689c <xTaskRemoveFromEventList>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d007      	beq.n	8005e24 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e14:	4b54      	ldr	r3, [pc, #336]	@ (8005f68 <xQueueSemaphoreTake+0x21c>)
 8005e16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e24:	f001 f9fa 	bl	800721c <vPortExitCritical>
				return pdPASS;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e098      	b.n	8005f5e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d112      	bne.n	8005e58 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00b      	beq.n	8005e50 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e3c:	f383 8811 	msr	BASEPRI, r3
 8005e40:	f3bf 8f6f 	isb	sy
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	617b      	str	r3, [r7, #20]
}
 8005e4a:	bf00      	nop
 8005e4c:	bf00      	nop
 8005e4e:	e7fd      	b.n	8005e4c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005e50:	f001 f9e4 	bl	800721c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e54:	2300      	movs	r3, #0
 8005e56:	e082      	b.n	8005f5e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d106      	bne.n	8005e6c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e5e:	f107 030c 	add.w	r3, r7, #12
 8005e62:	4618      	mov	r0, r3
 8005e64:	f000 fd7e 	bl	8006964 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e6c:	f001 f9d6 	bl	800721c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e70:	f000 fb2c 	bl	80064cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e74:	f001 f9a0 	bl	80071b8 <vPortEnterCritical>
 8005e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e7a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e7e:	b25b      	sxtb	r3, r3
 8005e80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e84:	d103      	bne.n	8005e8e <xQueueSemaphoreTake+0x142>
 8005e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e94:	b25b      	sxtb	r3, r3
 8005e96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e9a:	d103      	bne.n	8005ea4 <xQueueSemaphoreTake+0x158>
 8005e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ea4:	f001 f9ba 	bl	800721c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ea8:	463a      	mov	r2, r7
 8005eaa:	f107 030c 	add.w	r3, r7, #12
 8005eae:	4611      	mov	r1, r2
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f000 fd6d 	bl	8006990 <xTaskCheckForTimeOut>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d132      	bne.n	8005f22 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ebc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005ebe:	f000 f8bf 	bl	8006040 <prvIsQueueEmpty>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d026      	beq.n	8005f16 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d109      	bne.n	8005ee4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005ed0:	f001 f972 	bl	80071b8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f000 febd 	bl	8006c58 <xTaskPriorityInherit>
 8005ede:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005ee0:	f001 f99c 	bl	800721c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee6:	3324      	adds	r3, #36	@ 0x24
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	4611      	mov	r1, r2
 8005eec:	4618      	mov	r0, r3
 8005eee:	f000 fcaf 	bl	8006850 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ef2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005ef4:	f000 f852 	bl	8005f9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ef8:	f000 faf6 	bl	80064e8 <xTaskResumeAll>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f47f af67 	bne.w	8005dd2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005f04:	4b18      	ldr	r3, [pc, #96]	@ (8005f68 <xQueueSemaphoreTake+0x21c>)
 8005f06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	f3bf 8f6f 	isb	sy
 8005f14:	e75d      	b.n	8005dd2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005f16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f18:	f000 f840 	bl	8005f9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f1c:	f000 fae4 	bl	80064e8 <xTaskResumeAll>
 8005f20:	e757      	b.n	8005dd2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005f22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f24:	f000 f83a 	bl	8005f9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f28:	f000 fade 	bl	80064e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f2e:	f000 f887 	bl	8006040 <prvIsQueueEmpty>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f43f af4c 	beq.w	8005dd2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00d      	beq.n	8005f5c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005f40:	f001 f93a 	bl	80071b8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005f44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f46:	f000 f811 	bl	8005f6c <prvGetDisinheritPriorityAfterTimeout>
 8005f4a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 fef6 	bl	8006d44 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005f58:	f001 f960 	bl	800721c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3738      	adds	r7, #56	@ 0x38
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	e000ed04 	.word	0xe000ed04

08005f6c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d006      	beq.n	8005f8a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f1c3 0307 	rsb	r3, r3, #7
 8005f86:	60fb      	str	r3, [r7, #12]
 8005f88:	e001      	b.n	8005f8e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
	}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005fa4:	f001 f908 	bl	80071b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005fae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fb0:	e011      	b.n	8005fd6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d012      	beq.n	8005fe0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	3324      	adds	r3, #36	@ 0x24
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 fc6c 	bl	800689c <xTaskRemoveFromEventList>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005fca:	f000 fd45 	bl	8006a58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005fce:	7bfb      	ldrb	r3, [r7, #15]
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	dce9      	bgt.n	8005fb2 <prvUnlockQueue+0x16>
 8005fde:	e000      	b.n	8005fe2 <prvUnlockQueue+0x46>
					break;
 8005fe0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	22ff      	movs	r2, #255	@ 0xff
 8005fe6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005fea:	f001 f917 	bl	800721c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005fee:	f001 f8e3 	bl	80071b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ff8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ffa:	e011      	b.n	8006020 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d012      	beq.n	800602a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	3310      	adds	r3, #16
 8006008:	4618      	mov	r0, r3
 800600a:	f000 fc47 	bl	800689c <xTaskRemoveFromEventList>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006014:	f000 fd20 	bl	8006a58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006018:	7bbb      	ldrb	r3, [r7, #14]
 800601a:	3b01      	subs	r3, #1
 800601c:	b2db      	uxtb	r3, r3
 800601e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006020:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006024:	2b00      	cmp	r3, #0
 8006026:	dce9      	bgt.n	8005ffc <prvUnlockQueue+0x60>
 8006028:	e000      	b.n	800602c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800602a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	22ff      	movs	r2, #255	@ 0xff
 8006030:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006034:	f001 f8f2 	bl	800721c <vPortExitCritical>
}
 8006038:	bf00      	nop
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006048:	f001 f8b6 	bl	80071b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006050:	2b00      	cmp	r3, #0
 8006052:	d102      	bne.n	800605a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006054:	2301      	movs	r3, #1
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	e001      	b.n	800605e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800605a:	2300      	movs	r3, #0
 800605c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800605e:	f001 f8dd 	bl	800721c <vPortExitCritical>

	return xReturn;
 8006062:	68fb      	ldr	r3, [r7, #12]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800606c:	b580      	push	{r7, lr}
 800606e:	b08e      	sub	sp, #56	@ 0x38
 8006070:	af04      	add	r7, sp, #16
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
 8006078:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800607a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10b      	bne.n	8006098 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	623b      	str	r3, [r7, #32]
}
 8006092:	bf00      	nop
 8006094:	bf00      	nop
 8006096:	e7fd      	b.n	8006094 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10b      	bne.n	80060b6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800609e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	61fb      	str	r3, [r7, #28]
}
 80060b0:	bf00      	nop
 80060b2:	bf00      	nop
 80060b4:	e7fd      	b.n	80060b2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80060b6:	2354      	movs	r3, #84	@ 0x54
 80060b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	2b54      	cmp	r3, #84	@ 0x54
 80060be:	d00b      	beq.n	80060d8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	61bb      	str	r3, [r7, #24]
}
 80060d2:	bf00      	nop
 80060d4:	bf00      	nop
 80060d6:	e7fd      	b.n	80060d4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80060d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d01e      	beq.n	800611e <xTaskCreateStatic+0xb2>
 80060e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d01b      	beq.n	800611e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80060ee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80060f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f2:	2202      	movs	r2, #2
 80060f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80060f8:	2300      	movs	r3, #0
 80060fa:	9303      	str	r3, [sp, #12]
 80060fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fe:	9302      	str	r3, [sp, #8]
 8006100:	f107 0314 	add.w	r3, r7, #20
 8006104:	9301      	str	r3, [sp, #4]
 8006106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	68b9      	ldr	r1, [r7, #8]
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 f850 	bl	80061b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006116:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006118:	f000 f8d6 	bl	80062c8 <prvAddNewTaskToReadyList>
 800611c:	e001      	b.n	8006122 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800611e:	2300      	movs	r3, #0
 8006120:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006122:	697b      	ldr	r3, [r7, #20]
	}
 8006124:	4618      	mov	r0, r3
 8006126:	3728      	adds	r7, #40	@ 0x28
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800612c:	b580      	push	{r7, lr}
 800612e:	b08c      	sub	sp, #48	@ 0x30
 8006130:	af04      	add	r7, sp, #16
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	603b      	str	r3, [r7, #0]
 8006138:	4613      	mov	r3, r2
 800613a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800613c:	88fb      	ldrh	r3, [r7, #6]
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4618      	mov	r0, r3
 8006142:	f001 f95b 	bl	80073fc <pvPortMalloc>
 8006146:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00e      	beq.n	800616c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800614e:	2054      	movs	r0, #84	@ 0x54
 8006150:	f001 f954 	bl	80073fc <pvPortMalloc>
 8006154:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	631a      	str	r2, [r3, #48]	@ 0x30
 8006162:	e005      	b.n	8006170 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006164:	6978      	ldr	r0, [r7, #20]
 8006166:	f001 fa17 	bl	8007598 <vPortFree>
 800616a:	e001      	b.n	8006170 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800616c:	2300      	movs	r3, #0
 800616e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d017      	beq.n	80061a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800617e:	88fa      	ldrh	r2, [r7, #6]
 8006180:	2300      	movs	r3, #0
 8006182:	9303      	str	r3, [sp, #12]
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	9302      	str	r3, [sp, #8]
 8006188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800618a:	9301      	str	r3, [sp, #4]
 800618c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	68b9      	ldr	r1, [r7, #8]
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f000 f80e 	bl	80061b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800619a:	69f8      	ldr	r0, [r7, #28]
 800619c:	f000 f894 	bl	80062c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061a0:	2301      	movs	r3, #1
 80061a2:	61bb      	str	r3, [r7, #24]
 80061a4:	e002      	b.n	80061ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80061aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061ac:	69bb      	ldr	r3, [r7, #24]
	}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3720      	adds	r7, #32
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b088      	sub	sp, #32
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	60f8      	str	r0, [r7, #12]
 80061be:	60b9      	str	r1, [r7, #8]
 80061c0:	607a      	str	r2, [r7, #4]
 80061c2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80061c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061ce:	3b01      	subs	r3, #1
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	f023 0307 	bic.w	r3, r3, #7
 80061dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	f003 0307 	and.w	r3, r3, #7
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00b      	beq.n	8006200 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	617b      	str	r3, [r7, #20]
}
 80061fa:	bf00      	nop
 80061fc:	bf00      	nop
 80061fe:	e7fd      	b.n	80061fc <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d01f      	beq.n	8006246 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006206:	2300      	movs	r3, #0
 8006208:	61fb      	str	r3, [r7, #28]
 800620a:	e012      	b.n	8006232 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	4413      	add	r3, r2
 8006212:	7819      	ldrb	r1, [r3, #0]
 8006214:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	4413      	add	r3, r2
 800621a:	3334      	adds	r3, #52	@ 0x34
 800621c:	460a      	mov	r2, r1
 800621e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	4413      	add	r3, r2
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d006      	beq.n	800623a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	3301      	adds	r3, #1
 8006230:	61fb      	str	r3, [r7, #28]
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	2b0f      	cmp	r3, #15
 8006236:	d9e9      	bls.n	800620c <prvInitialiseNewTask+0x56>
 8006238:	e000      	b.n	800623c <prvInitialiseNewTask+0x86>
			{
				break;
 800623a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800623c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623e:	2200      	movs	r2, #0
 8006240:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006244:	e003      	b.n	800624e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800624e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006250:	2b06      	cmp	r3, #6
 8006252:	d901      	bls.n	8006258 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006254:	2306      	movs	r3, #6
 8006256:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800625c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800625e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006260:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006262:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006266:	2200      	movs	r2, #0
 8006268:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800626a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626c:	3304      	adds	r3, #4
 800626e:	4618      	mov	r0, r3
 8006270:	f7ff fb83 	bl	800597a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006276:	3318      	adds	r3, #24
 8006278:	4618      	mov	r0, r3
 800627a:	f7ff fb7e 	bl	800597a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800627e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006280:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006282:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006286:	f1c3 0207 	rsb	r2, r3, #7
 800628a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800628e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006290:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006292:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006296:	2200      	movs	r2, #0
 8006298:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800629a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	68f9      	ldr	r1, [r7, #12]
 80062a6:	69b8      	ldr	r0, [r7, #24]
 80062a8:	f000 fe56 	bl	8006f58 <pxPortInitialiseStack>
 80062ac:	4602      	mov	r2, r0
 80062ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80062b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062be:	bf00      	nop
 80062c0:	3720      	adds	r7, #32
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
	...

080062c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80062d0:	f000 ff72 	bl	80071b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80062d4:	4b2a      	ldr	r3, [pc, #168]	@ (8006380 <prvAddNewTaskToReadyList+0xb8>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	3301      	adds	r3, #1
 80062da:	4a29      	ldr	r2, [pc, #164]	@ (8006380 <prvAddNewTaskToReadyList+0xb8>)
 80062dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80062de:	4b29      	ldr	r3, [pc, #164]	@ (8006384 <prvAddNewTaskToReadyList+0xbc>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d109      	bne.n	80062fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80062e6:	4a27      	ldr	r2, [pc, #156]	@ (8006384 <prvAddNewTaskToReadyList+0xbc>)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80062ec:	4b24      	ldr	r3, [pc, #144]	@ (8006380 <prvAddNewTaskToReadyList+0xb8>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d110      	bne.n	8006316 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80062f4:	f000 fbd4 	bl	8006aa0 <prvInitialiseTaskLists>
 80062f8:	e00d      	b.n	8006316 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80062fa:	4b23      	ldr	r3, [pc, #140]	@ (8006388 <prvAddNewTaskToReadyList+0xc0>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d109      	bne.n	8006316 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006302:	4b20      	ldr	r3, [pc, #128]	@ (8006384 <prvAddNewTaskToReadyList+0xbc>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800630c:	429a      	cmp	r2, r3
 800630e:	d802      	bhi.n	8006316 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006310:	4a1c      	ldr	r2, [pc, #112]	@ (8006384 <prvAddNewTaskToReadyList+0xbc>)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006316:	4b1d      	ldr	r3, [pc, #116]	@ (800638c <prvAddNewTaskToReadyList+0xc4>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	3301      	adds	r3, #1
 800631c:	4a1b      	ldr	r2, [pc, #108]	@ (800638c <prvAddNewTaskToReadyList+0xc4>)
 800631e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006324:	2201      	movs	r2, #1
 8006326:	409a      	lsls	r2, r3
 8006328:	4b19      	ldr	r3, [pc, #100]	@ (8006390 <prvAddNewTaskToReadyList+0xc8>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4313      	orrs	r3, r2
 800632e:	4a18      	ldr	r2, [pc, #96]	@ (8006390 <prvAddNewTaskToReadyList+0xc8>)
 8006330:	6013      	str	r3, [r2, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006336:	4613      	mov	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4413      	add	r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	4a15      	ldr	r2, [pc, #84]	@ (8006394 <prvAddNewTaskToReadyList+0xcc>)
 8006340:	441a      	add	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	3304      	adds	r3, #4
 8006346:	4619      	mov	r1, r3
 8006348:	4610      	mov	r0, r2
 800634a:	f7ff fb23 	bl	8005994 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800634e:	f000 ff65 	bl	800721c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006352:	4b0d      	ldr	r3, [pc, #52]	@ (8006388 <prvAddNewTaskToReadyList+0xc0>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00e      	beq.n	8006378 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800635a:	4b0a      	ldr	r3, [pc, #40]	@ (8006384 <prvAddNewTaskToReadyList+0xbc>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006364:	429a      	cmp	r2, r3
 8006366:	d207      	bcs.n	8006378 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006368:	4b0b      	ldr	r3, [pc, #44]	@ (8006398 <prvAddNewTaskToReadyList+0xd0>)
 800636a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006378:	bf00      	nop
 800637a:	3708      	adds	r7, #8
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	2000089c 	.word	0x2000089c
 8006384:	2000079c 	.word	0x2000079c
 8006388:	200008a8 	.word	0x200008a8
 800638c:	200008b8 	.word	0x200008b8
 8006390:	200008a4 	.word	0x200008a4
 8006394:	200007a0 	.word	0x200007a0
 8006398:	e000ed04 	.word	0xe000ed04

0800639c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80063a4:	2300      	movs	r3, #0
 80063a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d018      	beq.n	80063e0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80063ae:	4b14      	ldr	r3, [pc, #80]	@ (8006400 <vTaskDelay+0x64>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00b      	beq.n	80063ce <vTaskDelay+0x32>
	__asm volatile
 80063b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	60bb      	str	r3, [r7, #8]
}
 80063c8:	bf00      	nop
 80063ca:	bf00      	nop
 80063cc:	e7fd      	b.n	80063ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80063ce:	f000 f87d 	bl	80064cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80063d2:	2100      	movs	r1, #0
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fd59 	bl	8006e8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80063da:	f000 f885 	bl	80064e8 <xTaskResumeAll>
 80063de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d107      	bne.n	80063f6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80063e6:	4b07      	ldr	r3, [pc, #28]	@ (8006404 <vTaskDelay+0x68>)
 80063e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80063f6:	bf00      	nop
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	200008c4 	.word	0x200008c4
 8006404:	e000ed04 	.word	0xe000ed04

08006408 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b08a      	sub	sp, #40	@ 0x28
 800640c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800640e:	2300      	movs	r3, #0
 8006410:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006412:	2300      	movs	r3, #0
 8006414:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006416:	463a      	mov	r2, r7
 8006418:	1d39      	adds	r1, r7, #4
 800641a:	f107 0308 	add.w	r3, r7, #8
 800641e:	4618      	mov	r0, r3
 8006420:	f7fa f89e 	bl	8000560 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006424:	6839      	ldr	r1, [r7, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	9202      	str	r2, [sp, #8]
 800642c:	9301      	str	r3, [sp, #4]
 800642e:	2300      	movs	r3, #0
 8006430:	9300      	str	r3, [sp, #0]
 8006432:	2300      	movs	r3, #0
 8006434:	460a      	mov	r2, r1
 8006436:	491f      	ldr	r1, [pc, #124]	@ (80064b4 <vTaskStartScheduler+0xac>)
 8006438:	481f      	ldr	r0, [pc, #124]	@ (80064b8 <vTaskStartScheduler+0xb0>)
 800643a:	f7ff fe17 	bl	800606c <xTaskCreateStatic>
 800643e:	4603      	mov	r3, r0
 8006440:	4a1e      	ldr	r2, [pc, #120]	@ (80064bc <vTaskStartScheduler+0xb4>)
 8006442:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006444:	4b1d      	ldr	r3, [pc, #116]	@ (80064bc <vTaskStartScheduler+0xb4>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d002      	beq.n	8006452 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800644c:	2301      	movs	r3, #1
 800644e:	617b      	str	r3, [r7, #20]
 8006450:	e001      	b.n	8006456 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006452:	2300      	movs	r3, #0
 8006454:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d116      	bne.n	800648a <vTaskStartScheduler+0x82>
	__asm volatile
 800645c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006460:	f383 8811 	msr	BASEPRI, r3
 8006464:	f3bf 8f6f 	isb	sy
 8006468:	f3bf 8f4f 	dsb	sy
 800646c:	613b      	str	r3, [r7, #16]
}
 800646e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006470:	4b13      	ldr	r3, [pc, #76]	@ (80064c0 <vTaskStartScheduler+0xb8>)
 8006472:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006476:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006478:	4b12      	ldr	r3, [pc, #72]	@ (80064c4 <vTaskStartScheduler+0xbc>)
 800647a:	2201      	movs	r2, #1
 800647c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800647e:	4b12      	ldr	r3, [pc, #72]	@ (80064c8 <vTaskStartScheduler+0xc0>)
 8006480:	2200      	movs	r2, #0
 8006482:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006484:	f000 fdf4 	bl	8007070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006488:	e00f      	b.n	80064aa <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006490:	d10b      	bne.n	80064aa <vTaskStartScheduler+0xa2>
	__asm volatile
 8006492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	60fb      	str	r3, [r7, #12]
}
 80064a4:	bf00      	nop
 80064a6:	bf00      	nop
 80064a8:	e7fd      	b.n	80064a6 <vTaskStartScheduler+0x9e>
}
 80064aa:	bf00      	nop
 80064ac:	3718      	adds	r7, #24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	08008e7c 	.word	0x08008e7c
 80064b8:	08006a71 	.word	0x08006a71
 80064bc:	200008c0 	.word	0x200008c0
 80064c0:	200008bc 	.word	0x200008bc
 80064c4:	200008a8 	.word	0x200008a8
 80064c8:	200008a0 	.word	0x200008a0

080064cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80064d0:	4b04      	ldr	r3, [pc, #16]	@ (80064e4 <vTaskSuspendAll+0x18>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3301      	adds	r3, #1
 80064d6:	4a03      	ldr	r2, [pc, #12]	@ (80064e4 <vTaskSuspendAll+0x18>)
 80064d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80064da:	bf00      	nop
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr
 80064e4:	200008c4 	.word	0x200008c4

080064e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80064ee:	2300      	movs	r3, #0
 80064f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80064f2:	2300      	movs	r3, #0
 80064f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80064f6:	4b42      	ldr	r3, [pc, #264]	@ (8006600 <xTaskResumeAll+0x118>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10b      	bne.n	8006516 <xTaskResumeAll+0x2e>
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	603b      	str	r3, [r7, #0]
}
 8006510:	bf00      	nop
 8006512:	bf00      	nop
 8006514:	e7fd      	b.n	8006512 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006516:	f000 fe4f 	bl	80071b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800651a:	4b39      	ldr	r3, [pc, #228]	@ (8006600 <xTaskResumeAll+0x118>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	3b01      	subs	r3, #1
 8006520:	4a37      	ldr	r2, [pc, #220]	@ (8006600 <xTaskResumeAll+0x118>)
 8006522:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006524:	4b36      	ldr	r3, [pc, #216]	@ (8006600 <xTaskResumeAll+0x118>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d161      	bne.n	80065f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800652c:	4b35      	ldr	r3, [pc, #212]	@ (8006604 <xTaskResumeAll+0x11c>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d05d      	beq.n	80065f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006534:	e02e      	b.n	8006594 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006536:	4b34      	ldr	r3, [pc, #208]	@ (8006608 <xTaskResumeAll+0x120>)
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	3318      	adds	r3, #24
 8006542:	4618      	mov	r0, r3
 8006544:	f7ff fa83 	bl	8005a4e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	3304      	adds	r3, #4
 800654c:	4618      	mov	r0, r3
 800654e:	f7ff fa7e 	bl	8005a4e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006556:	2201      	movs	r2, #1
 8006558:	409a      	lsls	r2, r3
 800655a:	4b2c      	ldr	r3, [pc, #176]	@ (800660c <xTaskResumeAll+0x124>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4313      	orrs	r3, r2
 8006560:	4a2a      	ldr	r2, [pc, #168]	@ (800660c <xTaskResumeAll+0x124>)
 8006562:	6013      	str	r3, [r2, #0]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006568:	4613      	mov	r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4413      	add	r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4a27      	ldr	r2, [pc, #156]	@ (8006610 <xTaskResumeAll+0x128>)
 8006572:	441a      	add	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	3304      	adds	r3, #4
 8006578:	4619      	mov	r1, r3
 800657a:	4610      	mov	r0, r2
 800657c:	f7ff fa0a 	bl	8005994 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006584:	4b23      	ldr	r3, [pc, #140]	@ (8006614 <xTaskResumeAll+0x12c>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800658a:	429a      	cmp	r2, r3
 800658c:	d302      	bcc.n	8006594 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800658e:	4b22      	ldr	r3, [pc, #136]	@ (8006618 <xTaskResumeAll+0x130>)
 8006590:	2201      	movs	r2, #1
 8006592:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006594:	4b1c      	ldr	r3, [pc, #112]	@ (8006608 <xTaskResumeAll+0x120>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1cc      	bne.n	8006536 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80065a2:	f000 fb1b 	bl	8006bdc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80065a6:	4b1d      	ldr	r3, [pc, #116]	@ (800661c <xTaskResumeAll+0x134>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d010      	beq.n	80065d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80065b2:	f000 f837 	bl	8006624 <xTaskIncrementTick>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d002      	beq.n	80065c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80065bc:	4b16      	ldr	r3, [pc, #88]	@ (8006618 <xTaskResumeAll+0x130>)
 80065be:	2201      	movs	r2, #1
 80065c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	3b01      	subs	r3, #1
 80065c6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1f1      	bne.n	80065b2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80065ce:	4b13      	ldr	r3, [pc, #76]	@ (800661c <xTaskResumeAll+0x134>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80065d4:	4b10      	ldr	r3, [pc, #64]	@ (8006618 <xTaskResumeAll+0x130>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d009      	beq.n	80065f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80065dc:	2301      	movs	r3, #1
 80065de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80065e0:	4b0f      	ldr	r3, [pc, #60]	@ (8006620 <xTaskResumeAll+0x138>)
 80065e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065e6:	601a      	str	r2, [r3, #0]
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065f0:	f000 fe14 	bl	800721c <vPortExitCritical>

	return xAlreadyYielded;
 80065f4:	68bb      	ldr	r3, [r7, #8]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	200008c4 	.word	0x200008c4
 8006604:	2000089c 	.word	0x2000089c
 8006608:	2000085c 	.word	0x2000085c
 800660c:	200008a4 	.word	0x200008a4
 8006610:	200007a0 	.word	0x200007a0
 8006614:	2000079c 	.word	0x2000079c
 8006618:	200008b0 	.word	0x200008b0
 800661c:	200008ac 	.word	0x200008ac
 8006620:	e000ed04 	.word	0xe000ed04

08006624 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800662a:	2300      	movs	r3, #0
 800662c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800662e:	4b4f      	ldr	r3, [pc, #316]	@ (800676c <xTaskIncrementTick+0x148>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	f040 808f 	bne.w	8006756 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006638:	4b4d      	ldr	r3, [pc, #308]	@ (8006770 <xTaskIncrementTick+0x14c>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3301      	adds	r3, #1
 800663e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006640:	4a4b      	ldr	r2, [pc, #300]	@ (8006770 <xTaskIncrementTick+0x14c>)
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d121      	bne.n	8006690 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800664c:	4b49      	ldr	r3, [pc, #292]	@ (8006774 <xTaskIncrementTick+0x150>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00b      	beq.n	800666e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	603b      	str	r3, [r7, #0]
}
 8006668:	bf00      	nop
 800666a:	bf00      	nop
 800666c:	e7fd      	b.n	800666a <xTaskIncrementTick+0x46>
 800666e:	4b41      	ldr	r3, [pc, #260]	@ (8006774 <xTaskIncrementTick+0x150>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	4b40      	ldr	r3, [pc, #256]	@ (8006778 <xTaskIncrementTick+0x154>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a3e      	ldr	r2, [pc, #248]	@ (8006774 <xTaskIncrementTick+0x150>)
 800667a:	6013      	str	r3, [r2, #0]
 800667c:	4a3e      	ldr	r2, [pc, #248]	@ (8006778 <xTaskIncrementTick+0x154>)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6013      	str	r3, [r2, #0]
 8006682:	4b3e      	ldr	r3, [pc, #248]	@ (800677c <xTaskIncrementTick+0x158>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3301      	adds	r3, #1
 8006688:	4a3c      	ldr	r2, [pc, #240]	@ (800677c <xTaskIncrementTick+0x158>)
 800668a:	6013      	str	r3, [r2, #0]
 800668c:	f000 faa6 	bl	8006bdc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006690:	4b3b      	ldr	r3, [pc, #236]	@ (8006780 <xTaskIncrementTick+0x15c>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	429a      	cmp	r2, r3
 8006698:	d348      	bcc.n	800672c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800669a:	4b36      	ldr	r3, [pc, #216]	@ (8006774 <xTaskIncrementTick+0x150>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d104      	bne.n	80066ae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066a4:	4b36      	ldr	r3, [pc, #216]	@ (8006780 <xTaskIncrementTick+0x15c>)
 80066a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80066aa:	601a      	str	r2, [r3, #0]
					break;
 80066ac:	e03e      	b.n	800672c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066ae:	4b31      	ldr	r3, [pc, #196]	@ (8006774 <xTaskIncrementTick+0x150>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d203      	bcs.n	80066ce <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80066c6:	4a2e      	ldr	r2, [pc, #184]	@ (8006780 <xTaskIncrementTick+0x15c>)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80066cc:	e02e      	b.n	800672c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	3304      	adds	r3, #4
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7ff f9bb 	bl	8005a4e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d004      	beq.n	80066ea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	3318      	adds	r3, #24
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7ff f9b2 	bl	8005a4e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ee:	2201      	movs	r2, #1
 80066f0:	409a      	lsls	r2, r3
 80066f2:	4b24      	ldr	r3, [pc, #144]	@ (8006784 <xTaskIncrementTick+0x160>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	4a22      	ldr	r2, [pc, #136]	@ (8006784 <xTaskIncrementTick+0x160>)
 80066fa:	6013      	str	r3, [r2, #0]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006700:	4613      	mov	r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4a1f      	ldr	r2, [pc, #124]	@ (8006788 <xTaskIncrementTick+0x164>)
 800670a:	441a      	add	r2, r3
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	3304      	adds	r3, #4
 8006710:	4619      	mov	r1, r3
 8006712:	4610      	mov	r0, r2
 8006714:	f7ff f93e 	bl	8005994 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800671c:	4b1b      	ldr	r3, [pc, #108]	@ (800678c <xTaskIncrementTick+0x168>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006722:	429a      	cmp	r2, r3
 8006724:	d3b9      	bcc.n	800669a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006726:	2301      	movs	r3, #1
 8006728:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800672a:	e7b6      	b.n	800669a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800672c:	4b17      	ldr	r3, [pc, #92]	@ (800678c <xTaskIncrementTick+0x168>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006732:	4915      	ldr	r1, [pc, #84]	@ (8006788 <xTaskIncrementTick+0x164>)
 8006734:	4613      	mov	r3, r2
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	4413      	add	r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	440b      	add	r3, r1
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d901      	bls.n	8006748 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006744:	2301      	movs	r3, #1
 8006746:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006748:	4b11      	ldr	r3, [pc, #68]	@ (8006790 <xTaskIncrementTick+0x16c>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d007      	beq.n	8006760 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006750:	2301      	movs	r3, #1
 8006752:	617b      	str	r3, [r7, #20]
 8006754:	e004      	b.n	8006760 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006756:	4b0f      	ldr	r3, [pc, #60]	@ (8006794 <xTaskIncrementTick+0x170>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	3301      	adds	r3, #1
 800675c:	4a0d      	ldr	r2, [pc, #52]	@ (8006794 <xTaskIncrementTick+0x170>)
 800675e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006760:	697b      	ldr	r3, [r7, #20]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3718      	adds	r7, #24
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	200008c4 	.word	0x200008c4
 8006770:	200008a0 	.word	0x200008a0
 8006774:	20000854 	.word	0x20000854
 8006778:	20000858 	.word	0x20000858
 800677c:	200008b4 	.word	0x200008b4
 8006780:	200008bc 	.word	0x200008bc
 8006784:	200008a4 	.word	0x200008a4
 8006788:	200007a0 	.word	0x200007a0
 800678c:	2000079c 	.word	0x2000079c
 8006790:	200008b0 	.word	0x200008b0
 8006794:	200008ac 	.word	0x200008ac

08006798 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006798:	b480      	push	{r7}
 800679a:	b087      	sub	sp, #28
 800679c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800679e:	4b27      	ldr	r3, [pc, #156]	@ (800683c <vTaskSwitchContext+0xa4>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80067a6:	4b26      	ldr	r3, [pc, #152]	@ (8006840 <vTaskSwitchContext+0xa8>)
 80067a8:	2201      	movs	r2, #1
 80067aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80067ac:	e040      	b.n	8006830 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80067ae:	4b24      	ldr	r3, [pc, #144]	@ (8006840 <vTaskSwitchContext+0xa8>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067b4:	4b23      	ldr	r3, [pc, #140]	@ (8006844 <vTaskSwitchContext+0xac>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	fab3 f383 	clz	r3, r3
 80067c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80067c2:	7afb      	ldrb	r3, [r7, #11]
 80067c4:	f1c3 031f 	rsb	r3, r3, #31
 80067c8:	617b      	str	r3, [r7, #20]
 80067ca:	491f      	ldr	r1, [pc, #124]	@ (8006848 <vTaskSwitchContext+0xb0>)
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	4613      	mov	r3, r2
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	4413      	add	r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	440b      	add	r3, r1
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10b      	bne.n	80067f6 <vTaskSwitchContext+0x5e>
	__asm volatile
 80067de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	607b      	str	r3, [r7, #4]
}
 80067f0:	bf00      	nop
 80067f2:	bf00      	nop
 80067f4:	e7fd      	b.n	80067f2 <vTaskSwitchContext+0x5a>
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	4613      	mov	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4a11      	ldr	r2, [pc, #68]	@ (8006848 <vTaskSwitchContext+0xb0>)
 8006802:	4413      	add	r3, r2
 8006804:	613b      	str	r3, [r7, #16]
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	685a      	ldr	r2, [r3, #4]
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	605a      	str	r2, [r3, #4]
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	3308      	adds	r3, #8
 8006818:	429a      	cmp	r2, r3
 800681a:	d104      	bne.n	8006826 <vTaskSwitchContext+0x8e>
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	605a      	str	r2, [r3, #4]
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	4a07      	ldr	r2, [pc, #28]	@ (800684c <vTaskSwitchContext+0xb4>)
 800682e:	6013      	str	r3, [r2, #0]
}
 8006830:	bf00      	nop
 8006832:	371c      	adds	r7, #28
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	200008c4 	.word	0x200008c4
 8006840:	200008b0 	.word	0x200008b0
 8006844:	200008a4 	.word	0x200008a4
 8006848:	200007a0 	.word	0x200007a0
 800684c:	2000079c 	.word	0x2000079c

08006850 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10b      	bne.n	8006878 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	60fb      	str	r3, [r7, #12]
}
 8006872:	bf00      	nop
 8006874:	bf00      	nop
 8006876:	e7fd      	b.n	8006874 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006878:	4b07      	ldr	r3, [pc, #28]	@ (8006898 <vTaskPlaceOnEventList+0x48>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	3318      	adds	r3, #24
 800687e:	4619      	mov	r1, r3
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f7ff f8ab 	bl	80059dc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006886:	2101      	movs	r1, #1
 8006888:	6838      	ldr	r0, [r7, #0]
 800688a:	f000 faff 	bl	8006e8c <prvAddCurrentTaskToDelayedList>
}
 800688e:	bf00      	nop
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	2000079c 	.word	0x2000079c

0800689c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b086      	sub	sp, #24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10b      	bne.n	80068ca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80068b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b6:	f383 8811 	msr	BASEPRI, r3
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	60fb      	str	r3, [r7, #12]
}
 80068c4:	bf00      	nop
 80068c6:	bf00      	nop
 80068c8:	e7fd      	b.n	80068c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	3318      	adds	r3, #24
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7ff f8bd 	bl	8005a4e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068d4:	4b1d      	ldr	r3, [pc, #116]	@ (800694c <xTaskRemoveFromEventList+0xb0>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d11c      	bne.n	8006916 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	3304      	adds	r3, #4
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7ff f8b4 	bl	8005a4e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ea:	2201      	movs	r2, #1
 80068ec:	409a      	lsls	r2, r3
 80068ee:	4b18      	ldr	r3, [pc, #96]	@ (8006950 <xTaskRemoveFromEventList+0xb4>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	4a16      	ldr	r2, [pc, #88]	@ (8006950 <xTaskRemoveFromEventList+0xb4>)
 80068f6:	6013      	str	r3, [r2, #0]
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068fc:	4613      	mov	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4a13      	ldr	r2, [pc, #76]	@ (8006954 <xTaskRemoveFromEventList+0xb8>)
 8006906:	441a      	add	r2, r3
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	3304      	adds	r3, #4
 800690c:	4619      	mov	r1, r3
 800690e:	4610      	mov	r0, r2
 8006910:	f7ff f840 	bl	8005994 <vListInsertEnd>
 8006914:	e005      	b.n	8006922 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	3318      	adds	r3, #24
 800691a:	4619      	mov	r1, r3
 800691c:	480e      	ldr	r0, [pc, #56]	@ (8006958 <xTaskRemoveFromEventList+0xbc>)
 800691e:	f7ff f839 	bl	8005994 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006926:	4b0d      	ldr	r3, [pc, #52]	@ (800695c <xTaskRemoveFromEventList+0xc0>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800692c:	429a      	cmp	r2, r3
 800692e:	d905      	bls.n	800693c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006930:	2301      	movs	r3, #1
 8006932:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006934:	4b0a      	ldr	r3, [pc, #40]	@ (8006960 <xTaskRemoveFromEventList+0xc4>)
 8006936:	2201      	movs	r2, #1
 8006938:	601a      	str	r2, [r3, #0]
 800693a:	e001      	b.n	8006940 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800693c:	2300      	movs	r3, #0
 800693e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006940:	697b      	ldr	r3, [r7, #20]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3718      	adds	r7, #24
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	200008c4 	.word	0x200008c4
 8006950:	200008a4 	.word	0x200008a4
 8006954:	200007a0 	.word	0x200007a0
 8006958:	2000085c 	.word	0x2000085c
 800695c:	2000079c 	.word	0x2000079c
 8006960:	200008b0 	.word	0x200008b0

08006964 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800696c:	4b06      	ldr	r3, [pc, #24]	@ (8006988 <vTaskInternalSetTimeOutState+0x24>)
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006974:	4b05      	ldr	r3, [pc, #20]	@ (800698c <vTaskInternalSetTimeOutState+0x28>)
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	605a      	str	r2, [r3, #4]
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr
 8006988:	200008b4 	.word	0x200008b4
 800698c:	200008a0 	.word	0x200008a0

08006990 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b088      	sub	sp, #32
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10b      	bne.n	80069b8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80069a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	613b      	str	r3, [r7, #16]
}
 80069b2:	bf00      	nop
 80069b4:	bf00      	nop
 80069b6:	e7fd      	b.n	80069b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10b      	bne.n	80069d6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	60fb      	str	r3, [r7, #12]
}
 80069d0:	bf00      	nop
 80069d2:	bf00      	nop
 80069d4:	e7fd      	b.n	80069d2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80069d6:	f000 fbef 	bl	80071b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80069da:	4b1d      	ldr	r3, [pc, #116]	@ (8006a50 <xTaskCheckForTimeOut+0xc0>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	69ba      	ldr	r2, [r7, #24]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069f2:	d102      	bne.n	80069fa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80069f4:	2300      	movs	r3, #0
 80069f6:	61fb      	str	r3, [r7, #28]
 80069f8:	e023      	b.n	8006a42 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	4b15      	ldr	r3, [pc, #84]	@ (8006a54 <xTaskCheckForTimeOut+0xc4>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d007      	beq.n	8006a16 <xTaskCheckForTimeOut+0x86>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	69ba      	ldr	r2, [r7, #24]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d302      	bcc.n	8006a16 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006a10:	2301      	movs	r3, #1
 8006a12:	61fb      	str	r3, [r7, #28]
 8006a14:	e015      	b.n	8006a42 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d20b      	bcs.n	8006a38 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	1ad2      	subs	r2, r2, r3
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7ff ff99 	bl	8006964 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a32:	2300      	movs	r3, #0
 8006a34:	61fb      	str	r3, [r7, #28]
 8006a36:	e004      	b.n	8006a42 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a42:	f000 fbeb 	bl	800721c <vPortExitCritical>

	return xReturn;
 8006a46:	69fb      	ldr	r3, [r7, #28]
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3720      	adds	r7, #32
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	200008a0 	.word	0x200008a0
 8006a54:	200008b4 	.word	0x200008b4

08006a58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a58:	b480      	push	{r7}
 8006a5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a5c:	4b03      	ldr	r3, [pc, #12]	@ (8006a6c <vTaskMissedYield+0x14>)
 8006a5e:	2201      	movs	r2, #1
 8006a60:	601a      	str	r2, [r3, #0]
}
 8006a62:	bf00      	nop
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr
 8006a6c:	200008b0 	.word	0x200008b0

08006a70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a78:	f000 f852 	bl	8006b20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a7c:	4b06      	ldr	r3, [pc, #24]	@ (8006a98 <prvIdleTask+0x28>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d9f9      	bls.n	8006a78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a84:	4b05      	ldr	r3, [pc, #20]	@ (8006a9c <prvIdleTask+0x2c>)
 8006a86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a8a:	601a      	str	r2, [r3, #0]
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a94:	e7f0      	b.n	8006a78 <prvIdleTask+0x8>
 8006a96:	bf00      	nop
 8006a98:	200007a0 	.word	0x200007a0
 8006a9c:	e000ed04 	.word	0xe000ed04

08006aa0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	607b      	str	r3, [r7, #4]
 8006aaa:	e00c      	b.n	8006ac6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4a12      	ldr	r2, [pc, #72]	@ (8006b00 <prvInitialiseTaskLists+0x60>)
 8006ab8:	4413      	add	r3, r2
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fe ff3d 	bl	800593a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	607b      	str	r3, [r7, #4]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b06      	cmp	r3, #6
 8006aca:	d9ef      	bls.n	8006aac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006acc:	480d      	ldr	r0, [pc, #52]	@ (8006b04 <prvInitialiseTaskLists+0x64>)
 8006ace:	f7fe ff34 	bl	800593a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006ad2:	480d      	ldr	r0, [pc, #52]	@ (8006b08 <prvInitialiseTaskLists+0x68>)
 8006ad4:	f7fe ff31 	bl	800593a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ad8:	480c      	ldr	r0, [pc, #48]	@ (8006b0c <prvInitialiseTaskLists+0x6c>)
 8006ada:	f7fe ff2e 	bl	800593a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006ade:	480c      	ldr	r0, [pc, #48]	@ (8006b10 <prvInitialiseTaskLists+0x70>)
 8006ae0:	f7fe ff2b 	bl	800593a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ae4:	480b      	ldr	r0, [pc, #44]	@ (8006b14 <prvInitialiseTaskLists+0x74>)
 8006ae6:	f7fe ff28 	bl	800593a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006aea:	4b0b      	ldr	r3, [pc, #44]	@ (8006b18 <prvInitialiseTaskLists+0x78>)
 8006aec:	4a05      	ldr	r2, [pc, #20]	@ (8006b04 <prvInitialiseTaskLists+0x64>)
 8006aee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006af0:	4b0a      	ldr	r3, [pc, #40]	@ (8006b1c <prvInitialiseTaskLists+0x7c>)
 8006af2:	4a05      	ldr	r2, [pc, #20]	@ (8006b08 <prvInitialiseTaskLists+0x68>)
 8006af4:	601a      	str	r2, [r3, #0]
}
 8006af6:	bf00      	nop
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	200007a0 	.word	0x200007a0
 8006b04:	2000082c 	.word	0x2000082c
 8006b08:	20000840 	.word	0x20000840
 8006b0c:	2000085c 	.word	0x2000085c
 8006b10:	20000870 	.word	0x20000870
 8006b14:	20000888 	.word	0x20000888
 8006b18:	20000854 	.word	0x20000854
 8006b1c:	20000858 	.word	0x20000858

08006b20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b26:	e019      	b.n	8006b5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b28:	f000 fb46 	bl	80071b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b2c:	4b10      	ldr	r3, [pc, #64]	@ (8006b70 <prvCheckTasksWaitingTermination+0x50>)
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	3304      	adds	r3, #4
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7fe ff88 	bl	8005a4e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b74 <prvCheckTasksWaitingTermination+0x54>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	3b01      	subs	r3, #1
 8006b44:	4a0b      	ldr	r2, [pc, #44]	@ (8006b74 <prvCheckTasksWaitingTermination+0x54>)
 8006b46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b48:	4b0b      	ldr	r3, [pc, #44]	@ (8006b78 <prvCheckTasksWaitingTermination+0x58>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8006b78 <prvCheckTasksWaitingTermination+0x58>)
 8006b50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b52:	f000 fb63 	bl	800721c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f810 	bl	8006b7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b5c:	4b06      	ldr	r3, [pc, #24]	@ (8006b78 <prvCheckTasksWaitingTermination+0x58>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1e1      	bne.n	8006b28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b64:	bf00      	nop
 8006b66:	bf00      	nop
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	20000870 	.word	0x20000870
 8006b74:	2000089c 	.word	0x2000089c
 8006b78:	20000884 	.word	0x20000884

08006b7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d108      	bne.n	8006ba0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b92:	4618      	mov	r0, r3
 8006b94:	f000 fd00 	bl	8007598 <vPortFree>
				vPortFree( pxTCB );
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fcfd 	bl	8007598 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b9e:	e019      	b.n	8006bd4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d103      	bne.n	8006bb2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fcf4 	bl	8007598 <vPortFree>
	}
 8006bb0:	e010      	b.n	8006bd4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d00b      	beq.n	8006bd4 <prvDeleteTCB+0x58>
	__asm volatile
 8006bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc0:	f383 8811 	msr	BASEPRI, r3
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	60fb      	str	r3, [r7, #12]
}
 8006bce:	bf00      	nop
 8006bd0:	bf00      	nop
 8006bd2:	e7fd      	b.n	8006bd0 <prvDeleteTCB+0x54>
	}
 8006bd4:	bf00      	nop
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006be2:	4b0c      	ldr	r3, [pc, #48]	@ (8006c14 <prvResetNextTaskUnblockTime+0x38>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d104      	bne.n	8006bf6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006bec:	4b0a      	ldr	r3, [pc, #40]	@ (8006c18 <prvResetNextTaskUnblockTime+0x3c>)
 8006bee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006bf2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006bf4:	e008      	b.n	8006c08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bf6:	4b07      	ldr	r3, [pc, #28]	@ (8006c14 <prvResetNextTaskUnblockTime+0x38>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	4a04      	ldr	r2, [pc, #16]	@ (8006c18 <prvResetNextTaskUnblockTime+0x3c>)
 8006c06:	6013      	str	r3, [r2, #0]
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr
 8006c14:	20000854 	.word	0x20000854
 8006c18:	200008bc 	.word	0x200008bc

08006c1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c22:	4b0b      	ldr	r3, [pc, #44]	@ (8006c50 <xTaskGetSchedulerState+0x34>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d102      	bne.n	8006c30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	607b      	str	r3, [r7, #4]
 8006c2e:	e008      	b.n	8006c42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c30:	4b08      	ldr	r3, [pc, #32]	@ (8006c54 <xTaskGetSchedulerState+0x38>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d102      	bne.n	8006c3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c38:	2302      	movs	r3, #2
 8006c3a:	607b      	str	r3, [r7, #4]
 8006c3c:	e001      	b.n	8006c42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c42:	687b      	ldr	r3, [r7, #4]
	}
 8006c44:	4618      	mov	r0, r3
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	200008a8 	.word	0x200008a8
 8006c54:	200008c4 	.word	0x200008c4

08006c58 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006c64:	2300      	movs	r3, #0
 8006c66:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d05e      	beq.n	8006d2c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c72:	4b31      	ldr	r3, [pc, #196]	@ (8006d38 <xTaskPriorityInherit+0xe0>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d24e      	bcs.n	8006d1a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	db06      	blt.n	8006c92 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c84:	4b2c      	ldr	r3, [pc, #176]	@ (8006d38 <xTaskPriorityInherit+0xe0>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c8a:	f1c3 0207 	rsb	r2, r3, #7
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	6959      	ldr	r1, [r3, #20]
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4a26      	ldr	r2, [pc, #152]	@ (8006d3c <xTaskPriorityInherit+0xe4>)
 8006ca4:	4413      	add	r3, r2
 8006ca6:	4299      	cmp	r1, r3
 8006ca8:	d12f      	bne.n	8006d0a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	3304      	adds	r3, #4
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fe fecd 	bl	8005a4e <uxListRemove>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d10a      	bne.n	8006cd0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc4:	43da      	mvns	r2, r3
 8006cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8006d40 <xTaskPriorityInherit+0xe8>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4013      	ands	r3, r2
 8006ccc:	4a1c      	ldr	r2, [pc, #112]	@ (8006d40 <xTaskPriorityInherit+0xe8>)
 8006cce:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006cd0:	4b19      	ldr	r3, [pc, #100]	@ (8006d38 <xTaskPriorityInherit+0xe0>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cde:	2201      	movs	r2, #1
 8006ce0:	409a      	lsls	r2, r3
 8006ce2:	4b17      	ldr	r3, [pc, #92]	@ (8006d40 <xTaskPriorityInherit+0xe8>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	4a15      	ldr	r2, [pc, #84]	@ (8006d40 <xTaskPriorityInherit+0xe8>)
 8006cea:	6013      	str	r3, [r2, #0]
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4a10      	ldr	r2, [pc, #64]	@ (8006d3c <xTaskPriorityInherit+0xe4>)
 8006cfa:	441a      	add	r2, r3
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	3304      	adds	r3, #4
 8006d00:	4619      	mov	r1, r3
 8006d02:	4610      	mov	r0, r2
 8006d04:	f7fe fe46 	bl	8005994 <vListInsertEnd>
 8006d08:	e004      	b.n	8006d14 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8006d38 <xTaskPriorityInherit+0xe0>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006d14:	2301      	movs	r3, #1
 8006d16:	60fb      	str	r3, [r7, #12]
 8006d18:	e008      	b.n	8006d2c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d1e:	4b06      	ldr	r3, [pc, #24]	@ (8006d38 <xTaskPriorityInherit+0xe0>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d201      	bcs.n	8006d2c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
	}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	2000079c 	.word	0x2000079c
 8006d3c:	200007a0 	.word	0x200007a0
 8006d40:	200008a4 	.word	0x200008a4

08006d44 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b088      	sub	sp, #32
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006d52:	2301      	movs	r3, #1
 8006d54:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d079      	beq.n	8006e50 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10b      	bne.n	8006d7c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d68:	f383 8811 	msr	BASEPRI, r3
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	60fb      	str	r3, [r7, #12]
}
 8006d76:	bf00      	nop
 8006d78:	bf00      	nop
 8006d7a:	e7fd      	b.n	8006d78 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d902      	bls.n	8006d8c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	61fb      	str	r3, [r7, #28]
 8006d8a:	e002      	b.n	8006d92 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d90:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d96:	69fa      	ldr	r2, [r7, #28]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d059      	beq.n	8006e50 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d154      	bne.n	8006e50 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006da6:	4b2c      	ldr	r3, [pc, #176]	@ (8006e58 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	69ba      	ldr	r2, [r7, #24]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d10b      	bne.n	8006dc8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	60bb      	str	r3, [r7, #8]
}
 8006dc2:	bf00      	nop
 8006dc4:	bf00      	nop
 8006dc6:	e7fd      	b.n	8006dc4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dcc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	69fa      	ldr	r2, [r7, #28]
 8006dd2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	db04      	blt.n	8006de6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	f1c3 0207 	rsb	r2, r3, #7
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	6959      	ldr	r1, [r3, #20]
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	4613      	mov	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4a19      	ldr	r2, [pc, #100]	@ (8006e5c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006df6:	4413      	add	r3, r2
 8006df8:	4299      	cmp	r1, r3
 8006dfa:	d129      	bne.n	8006e50 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	3304      	adds	r3, #4
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fe fe24 	bl	8005a4e <uxListRemove>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10a      	bne.n	8006e22 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e10:	2201      	movs	r2, #1
 8006e12:	fa02 f303 	lsl.w	r3, r2, r3
 8006e16:	43da      	mvns	r2, r3
 8006e18:	4b11      	ldr	r3, [pc, #68]	@ (8006e60 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	4a10      	ldr	r2, [pc, #64]	@ (8006e60 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006e20:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e26:	2201      	movs	r2, #1
 8006e28:	409a      	lsls	r2, r3
 8006e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e60 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	4a0b      	ldr	r2, [pc, #44]	@ (8006e60 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006e32:	6013      	str	r3, [r2, #0]
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e38:	4613      	mov	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	4a06      	ldr	r2, [pc, #24]	@ (8006e5c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006e42:	441a      	add	r2, r3
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	3304      	adds	r3, #4
 8006e48:	4619      	mov	r1, r3
 8006e4a:	4610      	mov	r0, r2
 8006e4c:	f7fe fda2 	bl	8005994 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e50:	bf00      	nop
 8006e52:	3720      	adds	r7, #32
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	2000079c 	.word	0x2000079c
 8006e5c:	200007a0 	.word	0x200007a0
 8006e60:	200008a4 	.word	0x200008a4

08006e64 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006e64:	b480      	push	{r7}
 8006e66:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006e68:	4b07      	ldr	r3, [pc, #28]	@ (8006e88 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d004      	beq.n	8006e7a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006e70:	4b05      	ldr	r3, [pc, #20]	@ (8006e88 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e76:	3201      	adds	r2, #1
 8006e78:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8006e7a:	4b03      	ldr	r3, [pc, #12]	@ (8006e88 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
	}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr
 8006e88:	2000079c 	.word	0x2000079c

08006e8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e96:	4b29      	ldr	r3, [pc, #164]	@ (8006f3c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e9c:	4b28      	ldr	r3, [pc, #160]	@ (8006f40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	3304      	adds	r3, #4
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7fe fdd3 	bl	8005a4e <uxListRemove>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10b      	bne.n	8006ec6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006eae:	4b24      	ldr	r3, [pc, #144]	@ (8006f40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eba:	43da      	mvns	r2, r3
 8006ebc:	4b21      	ldr	r3, [pc, #132]	@ (8006f44 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	4a20      	ldr	r2, [pc, #128]	@ (8006f44 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006ec4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ecc:	d10a      	bne.n	8006ee4 <prvAddCurrentTaskToDelayedList+0x58>
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d007      	beq.n	8006ee4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8006f40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	3304      	adds	r3, #4
 8006eda:	4619      	mov	r1, r3
 8006edc:	481a      	ldr	r0, [pc, #104]	@ (8006f48 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006ede:	f7fe fd59 	bl	8005994 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ee2:	e026      	b.n	8006f32 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4413      	add	r3, r2
 8006eea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006eec:	4b14      	ldr	r3, [pc, #80]	@ (8006f40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ef4:	68ba      	ldr	r2, [r7, #8]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d209      	bcs.n	8006f10 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006efc:	4b13      	ldr	r3, [pc, #76]	@ (8006f4c <prvAddCurrentTaskToDelayedList+0xc0>)
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	4b0f      	ldr	r3, [pc, #60]	@ (8006f40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	3304      	adds	r3, #4
 8006f06:	4619      	mov	r1, r3
 8006f08:	4610      	mov	r0, r2
 8006f0a:	f7fe fd67 	bl	80059dc <vListInsert>
}
 8006f0e:	e010      	b.n	8006f32 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f10:	4b0f      	ldr	r3, [pc, #60]	@ (8006f50 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	4b0a      	ldr	r3, [pc, #40]	@ (8006f40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	3304      	adds	r3, #4
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	f7fe fd5d 	bl	80059dc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f22:	4b0c      	ldr	r3, [pc, #48]	@ (8006f54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d202      	bcs.n	8006f32 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006f2c:	4a09      	ldr	r2, [pc, #36]	@ (8006f54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	6013      	str	r3, [r2, #0]
}
 8006f32:	bf00      	nop
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	200008a0 	.word	0x200008a0
 8006f40:	2000079c 	.word	0x2000079c
 8006f44:	200008a4 	.word	0x200008a4
 8006f48:	20000888 	.word	0x20000888
 8006f4c:	20000858 	.word	0x20000858
 8006f50:	20000854 	.word	0x20000854
 8006f54:	200008bc 	.word	0x200008bc

08006f58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	3b04      	subs	r3, #4
 8006f68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006f70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	3b04      	subs	r3, #4
 8006f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	f023 0201 	bic.w	r2, r3, #1
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	3b04      	subs	r3, #4
 8006f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f88:	4a0c      	ldr	r2, [pc, #48]	@ (8006fbc <pxPortInitialiseStack+0x64>)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	3b14      	subs	r3, #20
 8006f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	3b04      	subs	r3, #4
 8006f9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f06f 0202 	mvn.w	r2, #2
 8006fa6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	3b20      	subs	r3, #32
 8006fac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006fae:	68fb      	ldr	r3, [r7, #12]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3714      	adds	r7, #20
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	08006fc1 	.word	0x08006fc1

08006fc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006fca:	4b13      	ldr	r3, [pc, #76]	@ (8007018 <prvTaskExitError+0x58>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fd2:	d00b      	beq.n	8006fec <prvTaskExitError+0x2c>
	__asm volatile
 8006fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd8:	f383 8811 	msr	BASEPRI, r3
 8006fdc:	f3bf 8f6f 	isb	sy
 8006fe0:	f3bf 8f4f 	dsb	sy
 8006fe4:	60fb      	str	r3, [r7, #12]
}
 8006fe6:	bf00      	nop
 8006fe8:	bf00      	nop
 8006fea:	e7fd      	b.n	8006fe8 <prvTaskExitError+0x28>
	__asm volatile
 8006fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff0:	f383 8811 	msr	BASEPRI, r3
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	60bb      	str	r3, [r7, #8]
}
 8006ffe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007000:	bf00      	nop
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d0fc      	beq.n	8007002 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007008:	bf00      	nop
 800700a:	bf00      	nop
 800700c:	3714      	adds	r7, #20
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	20000014 	.word	0x20000014
 800701c:	00000000 	.word	0x00000000

08007020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007020:	4b07      	ldr	r3, [pc, #28]	@ (8007040 <pxCurrentTCBConst2>)
 8007022:	6819      	ldr	r1, [r3, #0]
 8007024:	6808      	ldr	r0, [r1, #0]
 8007026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800702a:	f380 8809 	msr	PSP, r0
 800702e:	f3bf 8f6f 	isb	sy
 8007032:	f04f 0000 	mov.w	r0, #0
 8007036:	f380 8811 	msr	BASEPRI, r0
 800703a:	4770      	bx	lr
 800703c:	f3af 8000 	nop.w

08007040 <pxCurrentTCBConst2>:
 8007040:	2000079c 	.word	0x2000079c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007044:	bf00      	nop
 8007046:	bf00      	nop

08007048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007048:	4808      	ldr	r0, [pc, #32]	@ (800706c <prvPortStartFirstTask+0x24>)
 800704a:	6800      	ldr	r0, [r0, #0]
 800704c:	6800      	ldr	r0, [r0, #0]
 800704e:	f380 8808 	msr	MSP, r0
 8007052:	f04f 0000 	mov.w	r0, #0
 8007056:	f380 8814 	msr	CONTROL, r0
 800705a:	b662      	cpsie	i
 800705c:	b661      	cpsie	f
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	df00      	svc	0
 8007068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800706a:	bf00      	nop
 800706c:	e000ed08 	.word	0xe000ed08

08007070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007076:	4b47      	ldr	r3, [pc, #284]	@ (8007194 <xPortStartScheduler+0x124>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a47      	ldr	r2, [pc, #284]	@ (8007198 <xPortStartScheduler+0x128>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d10b      	bne.n	8007098 <xPortStartScheduler+0x28>
	__asm volatile
 8007080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	613b      	str	r3, [r7, #16]
}
 8007092:	bf00      	nop
 8007094:	bf00      	nop
 8007096:	e7fd      	b.n	8007094 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007098:	4b3e      	ldr	r3, [pc, #248]	@ (8007194 <xPortStartScheduler+0x124>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a3f      	ldr	r2, [pc, #252]	@ (800719c <xPortStartScheduler+0x12c>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d10b      	bne.n	80070ba <xPortStartScheduler+0x4a>
	__asm volatile
 80070a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a6:	f383 8811 	msr	BASEPRI, r3
 80070aa:	f3bf 8f6f 	isb	sy
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	60fb      	str	r3, [r7, #12]
}
 80070b4:	bf00      	nop
 80070b6:	bf00      	nop
 80070b8:	e7fd      	b.n	80070b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80070ba:	4b39      	ldr	r3, [pc, #228]	@ (80071a0 <xPortStartScheduler+0x130>)
 80070bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	22ff      	movs	r2, #255	@ 0xff
 80070ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070d4:	78fb      	ldrb	r3, [r7, #3]
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80070dc:	b2da      	uxtb	r2, r3
 80070de:	4b31      	ldr	r3, [pc, #196]	@ (80071a4 <xPortStartScheduler+0x134>)
 80070e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80070e2:	4b31      	ldr	r3, [pc, #196]	@ (80071a8 <xPortStartScheduler+0x138>)
 80070e4:	2207      	movs	r2, #7
 80070e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070e8:	e009      	b.n	80070fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80070ea:	4b2f      	ldr	r3, [pc, #188]	@ (80071a8 <xPortStartScheduler+0x138>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	3b01      	subs	r3, #1
 80070f0:	4a2d      	ldr	r2, [pc, #180]	@ (80071a8 <xPortStartScheduler+0x138>)
 80070f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80070f4:	78fb      	ldrb	r3, [r7, #3]
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	005b      	lsls	r3, r3, #1
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070fe:	78fb      	ldrb	r3, [r7, #3]
 8007100:	b2db      	uxtb	r3, r3
 8007102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007106:	2b80      	cmp	r3, #128	@ 0x80
 8007108:	d0ef      	beq.n	80070ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800710a:	4b27      	ldr	r3, [pc, #156]	@ (80071a8 <xPortStartScheduler+0x138>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f1c3 0307 	rsb	r3, r3, #7
 8007112:	2b04      	cmp	r3, #4
 8007114:	d00b      	beq.n	800712e <xPortStartScheduler+0xbe>
	__asm volatile
 8007116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800711a:	f383 8811 	msr	BASEPRI, r3
 800711e:	f3bf 8f6f 	isb	sy
 8007122:	f3bf 8f4f 	dsb	sy
 8007126:	60bb      	str	r3, [r7, #8]
}
 8007128:	bf00      	nop
 800712a:	bf00      	nop
 800712c:	e7fd      	b.n	800712a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800712e:	4b1e      	ldr	r3, [pc, #120]	@ (80071a8 <xPortStartScheduler+0x138>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	021b      	lsls	r3, r3, #8
 8007134:	4a1c      	ldr	r2, [pc, #112]	@ (80071a8 <xPortStartScheduler+0x138>)
 8007136:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007138:	4b1b      	ldr	r3, [pc, #108]	@ (80071a8 <xPortStartScheduler+0x138>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007140:	4a19      	ldr	r2, [pc, #100]	@ (80071a8 <xPortStartScheduler+0x138>)
 8007142:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	b2da      	uxtb	r2, r3
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800714c:	4b17      	ldr	r3, [pc, #92]	@ (80071ac <xPortStartScheduler+0x13c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a16      	ldr	r2, [pc, #88]	@ (80071ac <xPortStartScheduler+0x13c>)
 8007152:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007156:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007158:	4b14      	ldr	r3, [pc, #80]	@ (80071ac <xPortStartScheduler+0x13c>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a13      	ldr	r2, [pc, #76]	@ (80071ac <xPortStartScheduler+0x13c>)
 800715e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007162:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007164:	f000 f8da 	bl	800731c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007168:	4b11      	ldr	r3, [pc, #68]	@ (80071b0 <xPortStartScheduler+0x140>)
 800716a:	2200      	movs	r2, #0
 800716c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800716e:	f000 f8f9 	bl	8007364 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007172:	4b10      	ldr	r3, [pc, #64]	@ (80071b4 <xPortStartScheduler+0x144>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a0f      	ldr	r2, [pc, #60]	@ (80071b4 <xPortStartScheduler+0x144>)
 8007178:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800717c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800717e:	f7ff ff63 	bl	8007048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007182:	f7ff fb09 	bl	8006798 <vTaskSwitchContext>
	prvTaskExitError();
 8007186:	f7ff ff1b 	bl	8006fc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3718      	adds	r7, #24
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	e000ed00 	.word	0xe000ed00
 8007198:	410fc271 	.word	0x410fc271
 800719c:	410fc270 	.word	0x410fc270
 80071a0:	e000e400 	.word	0xe000e400
 80071a4:	200008c8 	.word	0x200008c8
 80071a8:	200008cc 	.word	0x200008cc
 80071ac:	e000ed20 	.word	0xe000ed20
 80071b0:	20000014 	.word	0x20000014
 80071b4:	e000ef34 	.word	0xe000ef34

080071b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
	__asm volatile
 80071be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c2:	f383 8811 	msr	BASEPRI, r3
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	607b      	str	r3, [r7, #4]
}
 80071d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80071d2:	4b10      	ldr	r3, [pc, #64]	@ (8007214 <vPortEnterCritical+0x5c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	3301      	adds	r3, #1
 80071d8:	4a0e      	ldr	r2, [pc, #56]	@ (8007214 <vPortEnterCritical+0x5c>)
 80071da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80071dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007214 <vPortEnterCritical+0x5c>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d110      	bne.n	8007206 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80071e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007218 <vPortEnterCritical+0x60>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00b      	beq.n	8007206 <vPortEnterCritical+0x4e>
	__asm volatile
 80071ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f2:	f383 8811 	msr	BASEPRI, r3
 80071f6:	f3bf 8f6f 	isb	sy
 80071fa:	f3bf 8f4f 	dsb	sy
 80071fe:	603b      	str	r3, [r7, #0]
}
 8007200:	bf00      	nop
 8007202:	bf00      	nop
 8007204:	e7fd      	b.n	8007202 <vPortEnterCritical+0x4a>
	}
}
 8007206:	bf00      	nop
 8007208:	370c      	adds	r7, #12
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	20000014 	.word	0x20000014
 8007218:	e000ed04 	.word	0xe000ed04

0800721c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007222:	4b12      	ldr	r3, [pc, #72]	@ (800726c <vPortExitCritical+0x50>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d10b      	bne.n	8007242 <vPortExitCritical+0x26>
	__asm volatile
 800722a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800722e:	f383 8811 	msr	BASEPRI, r3
 8007232:	f3bf 8f6f 	isb	sy
 8007236:	f3bf 8f4f 	dsb	sy
 800723a:	607b      	str	r3, [r7, #4]
}
 800723c:	bf00      	nop
 800723e:	bf00      	nop
 8007240:	e7fd      	b.n	800723e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007242:	4b0a      	ldr	r3, [pc, #40]	@ (800726c <vPortExitCritical+0x50>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	3b01      	subs	r3, #1
 8007248:	4a08      	ldr	r2, [pc, #32]	@ (800726c <vPortExitCritical+0x50>)
 800724a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800724c:	4b07      	ldr	r3, [pc, #28]	@ (800726c <vPortExitCritical+0x50>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d105      	bne.n	8007260 <vPortExitCritical+0x44>
 8007254:	2300      	movs	r3, #0
 8007256:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	f383 8811 	msr	BASEPRI, r3
}
 800725e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007260:	bf00      	nop
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr
 800726c:	20000014 	.word	0x20000014

08007270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007270:	f3ef 8009 	mrs	r0, PSP
 8007274:	f3bf 8f6f 	isb	sy
 8007278:	4b15      	ldr	r3, [pc, #84]	@ (80072d0 <pxCurrentTCBConst>)
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	f01e 0f10 	tst.w	lr, #16
 8007280:	bf08      	it	eq
 8007282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800728a:	6010      	str	r0, [r2, #0]
 800728c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007290:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007294:	f380 8811 	msr	BASEPRI, r0
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	f3bf 8f6f 	isb	sy
 80072a0:	f7ff fa7a 	bl	8006798 <vTaskSwitchContext>
 80072a4:	f04f 0000 	mov.w	r0, #0
 80072a8:	f380 8811 	msr	BASEPRI, r0
 80072ac:	bc09      	pop	{r0, r3}
 80072ae:	6819      	ldr	r1, [r3, #0]
 80072b0:	6808      	ldr	r0, [r1, #0]
 80072b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b6:	f01e 0f10 	tst.w	lr, #16
 80072ba:	bf08      	it	eq
 80072bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80072c0:	f380 8809 	msr	PSP, r0
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	f3af 8000 	nop.w

080072d0 <pxCurrentTCBConst>:
 80072d0:	2000079c 	.word	0x2000079c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80072d4:	bf00      	nop
 80072d6:	bf00      	nop

080072d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
	__asm volatile
 80072de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e2:	f383 8811 	msr	BASEPRI, r3
 80072e6:	f3bf 8f6f 	isb	sy
 80072ea:	f3bf 8f4f 	dsb	sy
 80072ee:	607b      	str	r3, [r7, #4]
}
 80072f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80072f2:	f7ff f997 	bl	8006624 <xTaskIncrementTick>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d003      	beq.n	8007304 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80072fc:	4b06      	ldr	r3, [pc, #24]	@ (8007318 <xPortSysTickHandler+0x40>)
 80072fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	2300      	movs	r3, #0
 8007306:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	f383 8811 	msr	BASEPRI, r3
}
 800730e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007310:	bf00      	nop
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	e000ed04 	.word	0xe000ed04

0800731c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800731c:	b480      	push	{r7}
 800731e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007320:	4b0b      	ldr	r3, [pc, #44]	@ (8007350 <vPortSetupTimerInterrupt+0x34>)
 8007322:	2200      	movs	r2, #0
 8007324:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007326:	4b0b      	ldr	r3, [pc, #44]	@ (8007354 <vPortSetupTimerInterrupt+0x38>)
 8007328:	2200      	movs	r2, #0
 800732a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800732c:	4b0a      	ldr	r3, [pc, #40]	@ (8007358 <vPortSetupTimerInterrupt+0x3c>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a0a      	ldr	r2, [pc, #40]	@ (800735c <vPortSetupTimerInterrupt+0x40>)
 8007332:	fba2 2303 	umull	r2, r3, r2, r3
 8007336:	099b      	lsrs	r3, r3, #6
 8007338:	4a09      	ldr	r2, [pc, #36]	@ (8007360 <vPortSetupTimerInterrupt+0x44>)
 800733a:	3b01      	subs	r3, #1
 800733c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800733e:	4b04      	ldr	r3, [pc, #16]	@ (8007350 <vPortSetupTimerInterrupt+0x34>)
 8007340:	2207      	movs	r2, #7
 8007342:	601a      	str	r2, [r3, #0]
}
 8007344:	bf00      	nop
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	e000e010 	.word	0xe000e010
 8007354:	e000e018 	.word	0xe000e018
 8007358:	20000000 	.word	0x20000000
 800735c:	10624dd3 	.word	0x10624dd3
 8007360:	e000e014 	.word	0xe000e014

08007364 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007364:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007374 <vPortEnableVFP+0x10>
 8007368:	6801      	ldr	r1, [r0, #0]
 800736a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800736e:	6001      	str	r1, [r0, #0]
 8007370:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007372:	bf00      	nop
 8007374:	e000ed88 	.word	0xe000ed88

08007378 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800737e:	f3ef 8305 	mrs	r3, IPSR
 8007382:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2b0f      	cmp	r3, #15
 8007388:	d915      	bls.n	80073b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800738a:	4a18      	ldr	r2, [pc, #96]	@ (80073ec <vPortValidateInterruptPriority+0x74>)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4413      	add	r3, r2
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007394:	4b16      	ldr	r3, [pc, #88]	@ (80073f0 <vPortValidateInterruptPriority+0x78>)
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	7afa      	ldrb	r2, [r7, #11]
 800739a:	429a      	cmp	r2, r3
 800739c:	d20b      	bcs.n	80073b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800739e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a2:	f383 8811 	msr	BASEPRI, r3
 80073a6:	f3bf 8f6f 	isb	sy
 80073aa:	f3bf 8f4f 	dsb	sy
 80073ae:	607b      	str	r3, [r7, #4]
}
 80073b0:	bf00      	nop
 80073b2:	bf00      	nop
 80073b4:	e7fd      	b.n	80073b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80073b6:	4b0f      	ldr	r3, [pc, #60]	@ (80073f4 <vPortValidateInterruptPriority+0x7c>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80073be:	4b0e      	ldr	r3, [pc, #56]	@ (80073f8 <vPortValidateInterruptPriority+0x80>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d90b      	bls.n	80073de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80073c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ca:	f383 8811 	msr	BASEPRI, r3
 80073ce:	f3bf 8f6f 	isb	sy
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	603b      	str	r3, [r7, #0]
}
 80073d8:	bf00      	nop
 80073da:	bf00      	nop
 80073dc:	e7fd      	b.n	80073da <vPortValidateInterruptPriority+0x62>
	}
 80073de:	bf00      	nop
 80073e0:	3714      	adds	r7, #20
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	e000e3f0 	.word	0xe000e3f0
 80073f0:	200008c8 	.word	0x200008c8
 80073f4:	e000ed0c 	.word	0xe000ed0c
 80073f8:	200008cc 	.word	0x200008cc

080073fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b08a      	sub	sp, #40	@ 0x28
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007404:	2300      	movs	r3, #0
 8007406:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007408:	f7ff f860 	bl	80064cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800740c:	4b5c      	ldr	r3, [pc, #368]	@ (8007580 <pvPortMalloc+0x184>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d101      	bne.n	8007418 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007414:	f000 f924 	bl	8007660 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007418:	4b5a      	ldr	r3, [pc, #360]	@ (8007584 <pvPortMalloc+0x188>)
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4013      	ands	r3, r2
 8007420:	2b00      	cmp	r3, #0
 8007422:	f040 8095 	bne.w	8007550 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d01e      	beq.n	800746a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800742c:	2208      	movs	r2, #8
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4413      	add	r3, r2
 8007432:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f003 0307 	and.w	r3, r3, #7
 800743a:	2b00      	cmp	r3, #0
 800743c:	d015      	beq.n	800746a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f023 0307 	bic.w	r3, r3, #7
 8007444:	3308      	adds	r3, #8
 8007446:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f003 0307 	and.w	r3, r3, #7
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00b      	beq.n	800746a <pvPortMalloc+0x6e>
	__asm volatile
 8007452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007456:	f383 8811 	msr	BASEPRI, r3
 800745a:	f3bf 8f6f 	isb	sy
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	617b      	str	r3, [r7, #20]
}
 8007464:	bf00      	nop
 8007466:	bf00      	nop
 8007468:	e7fd      	b.n	8007466 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d06f      	beq.n	8007550 <pvPortMalloc+0x154>
 8007470:	4b45      	ldr	r3, [pc, #276]	@ (8007588 <pvPortMalloc+0x18c>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	429a      	cmp	r2, r3
 8007478:	d86a      	bhi.n	8007550 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800747a:	4b44      	ldr	r3, [pc, #272]	@ (800758c <pvPortMalloc+0x190>)
 800747c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800747e:	4b43      	ldr	r3, [pc, #268]	@ (800758c <pvPortMalloc+0x190>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007484:	e004      	b.n	8007490 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007488:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800748a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	429a      	cmp	r2, r3
 8007498:	d903      	bls.n	80074a2 <pvPortMalloc+0xa6>
 800749a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1f1      	bne.n	8007486 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80074a2:	4b37      	ldr	r3, [pc, #220]	@ (8007580 <pvPortMalloc+0x184>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d051      	beq.n	8007550 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80074ac:	6a3b      	ldr	r3, [r7, #32]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2208      	movs	r2, #8
 80074b2:	4413      	add	r3, r2
 80074b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80074b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80074be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c0:	685a      	ldr	r2, [r3, #4]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	1ad2      	subs	r2, r2, r3
 80074c6:	2308      	movs	r3, #8
 80074c8:	005b      	lsls	r3, r3, #1
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d920      	bls.n	8007510 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80074ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4413      	add	r3, r2
 80074d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	f003 0307 	and.w	r3, r3, #7
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00b      	beq.n	80074f8 <pvPortMalloc+0xfc>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	613b      	str	r3, [r7, #16]
}
 80074f2:	bf00      	nop
 80074f4:	bf00      	nop
 80074f6:	e7fd      	b.n	80074f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80074f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	1ad2      	subs	r2, r2, r3
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800750a:	69b8      	ldr	r0, [r7, #24]
 800750c:	f000 f90a 	bl	8007724 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007510:	4b1d      	ldr	r3, [pc, #116]	@ (8007588 <pvPortMalloc+0x18c>)
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	4a1b      	ldr	r2, [pc, #108]	@ (8007588 <pvPortMalloc+0x18c>)
 800751c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800751e:	4b1a      	ldr	r3, [pc, #104]	@ (8007588 <pvPortMalloc+0x18c>)
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	4b1b      	ldr	r3, [pc, #108]	@ (8007590 <pvPortMalloc+0x194>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	429a      	cmp	r2, r3
 8007528:	d203      	bcs.n	8007532 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800752a:	4b17      	ldr	r3, [pc, #92]	@ (8007588 <pvPortMalloc+0x18c>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a18      	ldr	r2, [pc, #96]	@ (8007590 <pvPortMalloc+0x194>)
 8007530:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007534:	685a      	ldr	r2, [r3, #4]
 8007536:	4b13      	ldr	r3, [pc, #76]	@ (8007584 <pvPortMalloc+0x188>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	431a      	orrs	r2, r3
 800753c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007542:	2200      	movs	r2, #0
 8007544:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007546:	4b13      	ldr	r3, [pc, #76]	@ (8007594 <pvPortMalloc+0x198>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3301      	adds	r3, #1
 800754c:	4a11      	ldr	r2, [pc, #68]	@ (8007594 <pvPortMalloc+0x198>)
 800754e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007550:	f7fe ffca 	bl	80064e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	f003 0307 	and.w	r3, r3, #7
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00b      	beq.n	8007576 <pvPortMalloc+0x17a>
	__asm volatile
 800755e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007562:	f383 8811 	msr	BASEPRI, r3
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	60fb      	str	r3, [r7, #12]
}
 8007570:	bf00      	nop
 8007572:	bf00      	nop
 8007574:	e7fd      	b.n	8007572 <pvPortMalloc+0x176>
	return pvReturn;
 8007576:	69fb      	ldr	r3, [r7, #28]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3728      	adds	r7, #40	@ 0x28
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	200056f8 	.word	0x200056f8
 8007584:	2000570c 	.word	0x2000570c
 8007588:	200056fc 	.word	0x200056fc
 800758c:	200056f0 	.word	0x200056f0
 8007590:	20005700 	.word	0x20005700
 8007594:	20005704 	.word	0x20005704

08007598 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d04f      	beq.n	800764a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80075aa:	2308      	movs	r3, #8
 80075ac:	425b      	negs	r3, r3
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	4413      	add	r3, r2
 80075b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	685a      	ldr	r2, [r3, #4]
 80075bc:	4b25      	ldr	r3, [pc, #148]	@ (8007654 <vPortFree+0xbc>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4013      	ands	r3, r2
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10b      	bne.n	80075de <vPortFree+0x46>
	__asm volatile
 80075c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ca:	f383 8811 	msr	BASEPRI, r3
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f3bf 8f4f 	dsb	sy
 80075d6:	60fb      	str	r3, [r7, #12]
}
 80075d8:	bf00      	nop
 80075da:	bf00      	nop
 80075dc:	e7fd      	b.n	80075da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00b      	beq.n	80075fe <vPortFree+0x66>
	__asm volatile
 80075e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ea:	f383 8811 	msr	BASEPRI, r3
 80075ee:	f3bf 8f6f 	isb	sy
 80075f2:	f3bf 8f4f 	dsb	sy
 80075f6:	60bb      	str	r3, [r7, #8]
}
 80075f8:	bf00      	nop
 80075fa:	bf00      	nop
 80075fc:	e7fd      	b.n	80075fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	685a      	ldr	r2, [r3, #4]
 8007602:	4b14      	ldr	r3, [pc, #80]	@ (8007654 <vPortFree+0xbc>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4013      	ands	r3, r2
 8007608:	2b00      	cmp	r3, #0
 800760a:	d01e      	beq.n	800764a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d11a      	bne.n	800764a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	685a      	ldr	r2, [r3, #4]
 8007618:	4b0e      	ldr	r3, [pc, #56]	@ (8007654 <vPortFree+0xbc>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	43db      	mvns	r3, r3
 800761e:	401a      	ands	r2, r3
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007624:	f7fe ff52 	bl	80064cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	4b0a      	ldr	r3, [pc, #40]	@ (8007658 <vPortFree+0xc0>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4413      	add	r3, r2
 8007632:	4a09      	ldr	r2, [pc, #36]	@ (8007658 <vPortFree+0xc0>)
 8007634:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007636:	6938      	ldr	r0, [r7, #16]
 8007638:	f000 f874 	bl	8007724 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800763c:	4b07      	ldr	r3, [pc, #28]	@ (800765c <vPortFree+0xc4>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	3301      	adds	r3, #1
 8007642:	4a06      	ldr	r2, [pc, #24]	@ (800765c <vPortFree+0xc4>)
 8007644:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007646:	f7fe ff4f 	bl	80064e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800764a:	bf00      	nop
 800764c:	3718      	adds	r7, #24
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	2000570c 	.word	0x2000570c
 8007658:	200056fc 	.word	0x200056fc
 800765c:	20005708 	.word	0x20005708

08007660 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007666:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800766a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800766c:	4b27      	ldr	r3, [pc, #156]	@ (800770c <prvHeapInit+0xac>)
 800766e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f003 0307 	and.w	r3, r3, #7
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00c      	beq.n	8007694 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	3307      	adds	r3, #7
 800767e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f023 0307 	bic.w	r3, r3, #7
 8007686:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	4a1f      	ldr	r2, [pc, #124]	@ (800770c <prvHeapInit+0xac>)
 8007690:	4413      	add	r3, r2
 8007692:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007698:	4a1d      	ldr	r2, [pc, #116]	@ (8007710 <prvHeapInit+0xb0>)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800769e:	4b1c      	ldr	r3, [pc, #112]	@ (8007710 <prvHeapInit+0xb0>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	4413      	add	r3, r2
 80076aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80076ac:	2208      	movs	r2, #8
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	1a9b      	subs	r3, r3, r2
 80076b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f023 0307 	bic.w	r3, r3, #7
 80076ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	4a15      	ldr	r2, [pc, #84]	@ (8007714 <prvHeapInit+0xb4>)
 80076c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80076c2:	4b14      	ldr	r3, [pc, #80]	@ (8007714 <prvHeapInit+0xb4>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2200      	movs	r2, #0
 80076c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80076ca:	4b12      	ldr	r3, [pc, #72]	@ (8007714 <prvHeapInit+0xb4>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2200      	movs	r2, #0
 80076d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	1ad2      	subs	r2, r2, r3
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076e0:	4b0c      	ldr	r3, [pc, #48]	@ (8007714 <prvHeapInit+0xb4>)
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	4a0a      	ldr	r2, [pc, #40]	@ (8007718 <prvHeapInit+0xb8>)
 80076ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	4a09      	ldr	r2, [pc, #36]	@ (800771c <prvHeapInit+0xbc>)
 80076f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80076f8:	4b09      	ldr	r3, [pc, #36]	@ (8007720 <prvHeapInit+0xc0>)
 80076fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80076fe:	601a      	str	r2, [r3, #0]
}
 8007700:	bf00      	nop
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr
 800770c:	200008d0 	.word	0x200008d0
 8007710:	200056f0 	.word	0x200056f0
 8007714:	200056f8 	.word	0x200056f8
 8007718:	20005700 	.word	0x20005700
 800771c:	200056fc 	.word	0x200056fc
 8007720:	2000570c 	.word	0x2000570c

08007724 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800772c:	4b28      	ldr	r3, [pc, #160]	@ (80077d0 <prvInsertBlockIntoFreeList+0xac>)
 800772e:	60fb      	str	r3, [r7, #12]
 8007730:	e002      	b.n	8007738 <prvInsertBlockIntoFreeList+0x14>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	60fb      	str	r3, [r7, #12]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	429a      	cmp	r2, r3
 8007740:	d8f7      	bhi.n	8007732 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	4413      	add	r3, r2
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	429a      	cmp	r2, r3
 8007752:	d108      	bne.n	8007766 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	685a      	ldr	r2, [r3, #4]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	441a      	add	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	441a      	add	r2, r3
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	429a      	cmp	r2, r3
 8007778:	d118      	bne.n	80077ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	4b15      	ldr	r3, [pc, #84]	@ (80077d4 <prvInsertBlockIntoFreeList+0xb0>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	429a      	cmp	r2, r3
 8007784:	d00d      	beq.n	80077a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	685a      	ldr	r2, [r3, #4]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	441a      	add	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	601a      	str	r2, [r3, #0]
 80077a0:	e008      	b.n	80077b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80077a2:	4b0c      	ldr	r3, [pc, #48]	@ (80077d4 <prvInsertBlockIntoFreeList+0xb0>)
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	601a      	str	r2, [r3, #0]
 80077aa:	e003      	b.n	80077b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d002      	beq.n	80077c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077c2:	bf00      	nop
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	200056f0 	.word	0x200056f0
 80077d4:	200056f8 	.word	0x200056f8

080077d8 <atoi>:
 80077d8:	220a      	movs	r2, #10
 80077da:	2100      	movs	r1, #0
 80077dc:	f000 b87a 	b.w	80078d4 <strtol>

080077e0 <_strtol_l.constprop.0>:
 80077e0:	2b24      	cmp	r3, #36	@ 0x24
 80077e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077e6:	4686      	mov	lr, r0
 80077e8:	4690      	mov	r8, r2
 80077ea:	d801      	bhi.n	80077f0 <_strtol_l.constprop.0+0x10>
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d106      	bne.n	80077fe <_strtol_l.constprop.0+0x1e>
 80077f0:	f000 fb06 	bl	8007e00 <__errno>
 80077f4:	2316      	movs	r3, #22
 80077f6:	6003      	str	r3, [r0, #0]
 80077f8:	2000      	movs	r0, #0
 80077fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077fe:	4834      	ldr	r0, [pc, #208]	@ (80078d0 <_strtol_l.constprop.0+0xf0>)
 8007800:	460d      	mov	r5, r1
 8007802:	462a      	mov	r2, r5
 8007804:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007808:	5d06      	ldrb	r6, [r0, r4]
 800780a:	f016 0608 	ands.w	r6, r6, #8
 800780e:	d1f8      	bne.n	8007802 <_strtol_l.constprop.0+0x22>
 8007810:	2c2d      	cmp	r4, #45	@ 0x2d
 8007812:	d12d      	bne.n	8007870 <_strtol_l.constprop.0+0x90>
 8007814:	782c      	ldrb	r4, [r5, #0]
 8007816:	2601      	movs	r6, #1
 8007818:	1c95      	adds	r5, r2, #2
 800781a:	f033 0210 	bics.w	r2, r3, #16
 800781e:	d109      	bne.n	8007834 <_strtol_l.constprop.0+0x54>
 8007820:	2c30      	cmp	r4, #48	@ 0x30
 8007822:	d12a      	bne.n	800787a <_strtol_l.constprop.0+0x9a>
 8007824:	782a      	ldrb	r2, [r5, #0]
 8007826:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800782a:	2a58      	cmp	r2, #88	@ 0x58
 800782c:	d125      	bne.n	800787a <_strtol_l.constprop.0+0x9a>
 800782e:	786c      	ldrb	r4, [r5, #1]
 8007830:	2310      	movs	r3, #16
 8007832:	3502      	adds	r5, #2
 8007834:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007838:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800783c:	2200      	movs	r2, #0
 800783e:	fbbc f9f3 	udiv	r9, ip, r3
 8007842:	4610      	mov	r0, r2
 8007844:	fb03 ca19 	mls	sl, r3, r9, ip
 8007848:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800784c:	2f09      	cmp	r7, #9
 800784e:	d81b      	bhi.n	8007888 <_strtol_l.constprop.0+0xa8>
 8007850:	463c      	mov	r4, r7
 8007852:	42a3      	cmp	r3, r4
 8007854:	dd27      	ble.n	80078a6 <_strtol_l.constprop.0+0xc6>
 8007856:	1c57      	adds	r7, r2, #1
 8007858:	d007      	beq.n	800786a <_strtol_l.constprop.0+0x8a>
 800785a:	4581      	cmp	r9, r0
 800785c:	d320      	bcc.n	80078a0 <_strtol_l.constprop.0+0xc0>
 800785e:	d101      	bne.n	8007864 <_strtol_l.constprop.0+0x84>
 8007860:	45a2      	cmp	sl, r4
 8007862:	db1d      	blt.n	80078a0 <_strtol_l.constprop.0+0xc0>
 8007864:	fb00 4003 	mla	r0, r0, r3, r4
 8007868:	2201      	movs	r2, #1
 800786a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800786e:	e7eb      	b.n	8007848 <_strtol_l.constprop.0+0x68>
 8007870:	2c2b      	cmp	r4, #43	@ 0x2b
 8007872:	bf04      	itt	eq
 8007874:	782c      	ldrbeq	r4, [r5, #0]
 8007876:	1c95      	addeq	r5, r2, #2
 8007878:	e7cf      	b.n	800781a <_strtol_l.constprop.0+0x3a>
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1da      	bne.n	8007834 <_strtol_l.constprop.0+0x54>
 800787e:	2c30      	cmp	r4, #48	@ 0x30
 8007880:	bf0c      	ite	eq
 8007882:	2308      	moveq	r3, #8
 8007884:	230a      	movne	r3, #10
 8007886:	e7d5      	b.n	8007834 <_strtol_l.constprop.0+0x54>
 8007888:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800788c:	2f19      	cmp	r7, #25
 800788e:	d801      	bhi.n	8007894 <_strtol_l.constprop.0+0xb4>
 8007890:	3c37      	subs	r4, #55	@ 0x37
 8007892:	e7de      	b.n	8007852 <_strtol_l.constprop.0+0x72>
 8007894:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007898:	2f19      	cmp	r7, #25
 800789a:	d804      	bhi.n	80078a6 <_strtol_l.constprop.0+0xc6>
 800789c:	3c57      	subs	r4, #87	@ 0x57
 800789e:	e7d8      	b.n	8007852 <_strtol_l.constprop.0+0x72>
 80078a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80078a4:	e7e1      	b.n	800786a <_strtol_l.constprop.0+0x8a>
 80078a6:	1c53      	adds	r3, r2, #1
 80078a8:	d108      	bne.n	80078bc <_strtol_l.constprop.0+0xdc>
 80078aa:	2322      	movs	r3, #34	@ 0x22
 80078ac:	f8ce 3000 	str.w	r3, [lr]
 80078b0:	4660      	mov	r0, ip
 80078b2:	f1b8 0f00 	cmp.w	r8, #0
 80078b6:	d0a0      	beq.n	80077fa <_strtol_l.constprop.0+0x1a>
 80078b8:	1e69      	subs	r1, r5, #1
 80078ba:	e006      	b.n	80078ca <_strtol_l.constprop.0+0xea>
 80078bc:	b106      	cbz	r6, 80078c0 <_strtol_l.constprop.0+0xe0>
 80078be:	4240      	negs	r0, r0
 80078c0:	f1b8 0f00 	cmp.w	r8, #0
 80078c4:	d099      	beq.n	80077fa <_strtol_l.constprop.0+0x1a>
 80078c6:	2a00      	cmp	r2, #0
 80078c8:	d1f6      	bne.n	80078b8 <_strtol_l.constprop.0+0xd8>
 80078ca:	f8c8 1000 	str.w	r1, [r8]
 80078ce:	e794      	b.n	80077fa <_strtol_l.constprop.0+0x1a>
 80078d0:	08008ecd 	.word	0x08008ecd

080078d4 <strtol>:
 80078d4:	4613      	mov	r3, r2
 80078d6:	460a      	mov	r2, r1
 80078d8:	4601      	mov	r1, r0
 80078da:	4802      	ldr	r0, [pc, #8]	@ (80078e4 <strtol+0x10>)
 80078dc:	6800      	ldr	r0, [r0, #0]
 80078de:	f7ff bf7f 	b.w	80077e0 <_strtol_l.constprop.0>
 80078e2:	bf00      	nop
 80078e4:	20000024 	.word	0x20000024

080078e8 <std>:
 80078e8:	2300      	movs	r3, #0
 80078ea:	b510      	push	{r4, lr}
 80078ec:	4604      	mov	r4, r0
 80078ee:	e9c0 3300 	strd	r3, r3, [r0]
 80078f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078f6:	6083      	str	r3, [r0, #8]
 80078f8:	8181      	strh	r1, [r0, #12]
 80078fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80078fc:	81c2      	strh	r2, [r0, #14]
 80078fe:	6183      	str	r3, [r0, #24]
 8007900:	4619      	mov	r1, r3
 8007902:	2208      	movs	r2, #8
 8007904:	305c      	adds	r0, #92	@ 0x5c
 8007906:	f000 fa2d 	bl	8007d64 <memset>
 800790a:	4b0d      	ldr	r3, [pc, #52]	@ (8007940 <std+0x58>)
 800790c:	6263      	str	r3, [r4, #36]	@ 0x24
 800790e:	4b0d      	ldr	r3, [pc, #52]	@ (8007944 <std+0x5c>)
 8007910:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007912:	4b0d      	ldr	r3, [pc, #52]	@ (8007948 <std+0x60>)
 8007914:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007916:	4b0d      	ldr	r3, [pc, #52]	@ (800794c <std+0x64>)
 8007918:	6323      	str	r3, [r4, #48]	@ 0x30
 800791a:	4b0d      	ldr	r3, [pc, #52]	@ (8007950 <std+0x68>)
 800791c:	6224      	str	r4, [r4, #32]
 800791e:	429c      	cmp	r4, r3
 8007920:	d006      	beq.n	8007930 <std+0x48>
 8007922:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007926:	4294      	cmp	r4, r2
 8007928:	d002      	beq.n	8007930 <std+0x48>
 800792a:	33d0      	adds	r3, #208	@ 0xd0
 800792c:	429c      	cmp	r4, r3
 800792e:	d105      	bne.n	800793c <std+0x54>
 8007930:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007938:	f000 ba8c 	b.w	8007e54 <__retarget_lock_init_recursive>
 800793c:	bd10      	pop	{r4, pc}
 800793e:	bf00      	nop
 8007940:	08007bb5 	.word	0x08007bb5
 8007944:	08007bd7 	.word	0x08007bd7
 8007948:	08007c0f 	.word	0x08007c0f
 800794c:	08007c33 	.word	0x08007c33
 8007950:	20005710 	.word	0x20005710

08007954 <stdio_exit_handler>:
 8007954:	4a02      	ldr	r2, [pc, #8]	@ (8007960 <stdio_exit_handler+0xc>)
 8007956:	4903      	ldr	r1, [pc, #12]	@ (8007964 <stdio_exit_handler+0x10>)
 8007958:	4803      	ldr	r0, [pc, #12]	@ (8007968 <stdio_exit_handler+0x14>)
 800795a:	f000 b869 	b.w	8007a30 <_fwalk_sglue>
 800795e:	bf00      	nop
 8007960:	20000018 	.word	0x20000018
 8007964:	080089c1 	.word	0x080089c1
 8007968:	20000028 	.word	0x20000028

0800796c <cleanup_stdio>:
 800796c:	6841      	ldr	r1, [r0, #4]
 800796e:	4b0c      	ldr	r3, [pc, #48]	@ (80079a0 <cleanup_stdio+0x34>)
 8007970:	4299      	cmp	r1, r3
 8007972:	b510      	push	{r4, lr}
 8007974:	4604      	mov	r4, r0
 8007976:	d001      	beq.n	800797c <cleanup_stdio+0x10>
 8007978:	f001 f822 	bl	80089c0 <_fflush_r>
 800797c:	68a1      	ldr	r1, [r4, #8]
 800797e:	4b09      	ldr	r3, [pc, #36]	@ (80079a4 <cleanup_stdio+0x38>)
 8007980:	4299      	cmp	r1, r3
 8007982:	d002      	beq.n	800798a <cleanup_stdio+0x1e>
 8007984:	4620      	mov	r0, r4
 8007986:	f001 f81b 	bl	80089c0 <_fflush_r>
 800798a:	68e1      	ldr	r1, [r4, #12]
 800798c:	4b06      	ldr	r3, [pc, #24]	@ (80079a8 <cleanup_stdio+0x3c>)
 800798e:	4299      	cmp	r1, r3
 8007990:	d004      	beq.n	800799c <cleanup_stdio+0x30>
 8007992:	4620      	mov	r0, r4
 8007994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007998:	f001 b812 	b.w	80089c0 <_fflush_r>
 800799c:	bd10      	pop	{r4, pc}
 800799e:	bf00      	nop
 80079a0:	20005710 	.word	0x20005710
 80079a4:	20005778 	.word	0x20005778
 80079a8:	200057e0 	.word	0x200057e0

080079ac <global_stdio_init.part.0>:
 80079ac:	b510      	push	{r4, lr}
 80079ae:	4b0b      	ldr	r3, [pc, #44]	@ (80079dc <global_stdio_init.part.0+0x30>)
 80079b0:	4c0b      	ldr	r4, [pc, #44]	@ (80079e0 <global_stdio_init.part.0+0x34>)
 80079b2:	4a0c      	ldr	r2, [pc, #48]	@ (80079e4 <global_stdio_init.part.0+0x38>)
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	4620      	mov	r0, r4
 80079b8:	2200      	movs	r2, #0
 80079ba:	2104      	movs	r1, #4
 80079bc:	f7ff ff94 	bl	80078e8 <std>
 80079c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80079c4:	2201      	movs	r2, #1
 80079c6:	2109      	movs	r1, #9
 80079c8:	f7ff ff8e 	bl	80078e8 <std>
 80079cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80079d0:	2202      	movs	r2, #2
 80079d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079d6:	2112      	movs	r1, #18
 80079d8:	f7ff bf86 	b.w	80078e8 <std>
 80079dc:	20005848 	.word	0x20005848
 80079e0:	20005710 	.word	0x20005710
 80079e4:	08007955 	.word	0x08007955

080079e8 <__sfp_lock_acquire>:
 80079e8:	4801      	ldr	r0, [pc, #4]	@ (80079f0 <__sfp_lock_acquire+0x8>)
 80079ea:	f000 ba34 	b.w	8007e56 <__retarget_lock_acquire_recursive>
 80079ee:	bf00      	nop
 80079f0:	20005851 	.word	0x20005851

080079f4 <__sfp_lock_release>:
 80079f4:	4801      	ldr	r0, [pc, #4]	@ (80079fc <__sfp_lock_release+0x8>)
 80079f6:	f000 ba2f 	b.w	8007e58 <__retarget_lock_release_recursive>
 80079fa:	bf00      	nop
 80079fc:	20005851 	.word	0x20005851

08007a00 <__sinit>:
 8007a00:	b510      	push	{r4, lr}
 8007a02:	4604      	mov	r4, r0
 8007a04:	f7ff fff0 	bl	80079e8 <__sfp_lock_acquire>
 8007a08:	6a23      	ldr	r3, [r4, #32]
 8007a0a:	b11b      	cbz	r3, 8007a14 <__sinit+0x14>
 8007a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a10:	f7ff bff0 	b.w	80079f4 <__sfp_lock_release>
 8007a14:	4b04      	ldr	r3, [pc, #16]	@ (8007a28 <__sinit+0x28>)
 8007a16:	6223      	str	r3, [r4, #32]
 8007a18:	4b04      	ldr	r3, [pc, #16]	@ (8007a2c <__sinit+0x2c>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1f5      	bne.n	8007a0c <__sinit+0xc>
 8007a20:	f7ff ffc4 	bl	80079ac <global_stdio_init.part.0>
 8007a24:	e7f2      	b.n	8007a0c <__sinit+0xc>
 8007a26:	bf00      	nop
 8007a28:	0800796d 	.word	0x0800796d
 8007a2c:	20005848 	.word	0x20005848

08007a30 <_fwalk_sglue>:
 8007a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a34:	4607      	mov	r7, r0
 8007a36:	4688      	mov	r8, r1
 8007a38:	4614      	mov	r4, r2
 8007a3a:	2600      	movs	r6, #0
 8007a3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a40:	f1b9 0901 	subs.w	r9, r9, #1
 8007a44:	d505      	bpl.n	8007a52 <_fwalk_sglue+0x22>
 8007a46:	6824      	ldr	r4, [r4, #0]
 8007a48:	2c00      	cmp	r4, #0
 8007a4a:	d1f7      	bne.n	8007a3c <_fwalk_sglue+0xc>
 8007a4c:	4630      	mov	r0, r6
 8007a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a52:	89ab      	ldrh	r3, [r5, #12]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d907      	bls.n	8007a68 <_fwalk_sglue+0x38>
 8007a58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	d003      	beq.n	8007a68 <_fwalk_sglue+0x38>
 8007a60:	4629      	mov	r1, r5
 8007a62:	4638      	mov	r0, r7
 8007a64:	47c0      	blx	r8
 8007a66:	4306      	orrs	r6, r0
 8007a68:	3568      	adds	r5, #104	@ 0x68
 8007a6a:	e7e9      	b.n	8007a40 <_fwalk_sglue+0x10>

08007a6c <iprintf>:
 8007a6c:	b40f      	push	{r0, r1, r2, r3}
 8007a6e:	b507      	push	{r0, r1, r2, lr}
 8007a70:	4906      	ldr	r1, [pc, #24]	@ (8007a8c <iprintf+0x20>)
 8007a72:	ab04      	add	r3, sp, #16
 8007a74:	6808      	ldr	r0, [r1, #0]
 8007a76:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a7a:	6881      	ldr	r1, [r0, #8]
 8007a7c:	9301      	str	r3, [sp, #4]
 8007a7e:	f000 fc75 	bl	800836c <_vfiprintf_r>
 8007a82:	b003      	add	sp, #12
 8007a84:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a88:	b004      	add	sp, #16
 8007a8a:	4770      	bx	lr
 8007a8c:	20000024 	.word	0x20000024

08007a90 <_puts_r>:
 8007a90:	6a03      	ldr	r3, [r0, #32]
 8007a92:	b570      	push	{r4, r5, r6, lr}
 8007a94:	6884      	ldr	r4, [r0, #8]
 8007a96:	4605      	mov	r5, r0
 8007a98:	460e      	mov	r6, r1
 8007a9a:	b90b      	cbnz	r3, 8007aa0 <_puts_r+0x10>
 8007a9c:	f7ff ffb0 	bl	8007a00 <__sinit>
 8007aa0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007aa2:	07db      	lsls	r3, r3, #31
 8007aa4:	d405      	bmi.n	8007ab2 <_puts_r+0x22>
 8007aa6:	89a3      	ldrh	r3, [r4, #12]
 8007aa8:	0598      	lsls	r0, r3, #22
 8007aaa:	d402      	bmi.n	8007ab2 <_puts_r+0x22>
 8007aac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007aae:	f000 f9d2 	bl	8007e56 <__retarget_lock_acquire_recursive>
 8007ab2:	89a3      	ldrh	r3, [r4, #12]
 8007ab4:	0719      	lsls	r1, r3, #28
 8007ab6:	d502      	bpl.n	8007abe <_puts_r+0x2e>
 8007ab8:	6923      	ldr	r3, [r4, #16]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d135      	bne.n	8007b2a <_puts_r+0x9a>
 8007abe:	4621      	mov	r1, r4
 8007ac0:	4628      	mov	r0, r5
 8007ac2:	f000 f8f9 	bl	8007cb8 <__swsetup_r>
 8007ac6:	b380      	cbz	r0, 8007b2a <_puts_r+0x9a>
 8007ac8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007acc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ace:	07da      	lsls	r2, r3, #31
 8007ad0:	d405      	bmi.n	8007ade <_puts_r+0x4e>
 8007ad2:	89a3      	ldrh	r3, [r4, #12]
 8007ad4:	059b      	lsls	r3, r3, #22
 8007ad6:	d402      	bmi.n	8007ade <_puts_r+0x4e>
 8007ad8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ada:	f000 f9bd 	bl	8007e58 <__retarget_lock_release_recursive>
 8007ade:	4628      	mov	r0, r5
 8007ae0:	bd70      	pop	{r4, r5, r6, pc}
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	da04      	bge.n	8007af0 <_puts_r+0x60>
 8007ae6:	69a2      	ldr	r2, [r4, #24]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	dc17      	bgt.n	8007b1c <_puts_r+0x8c>
 8007aec:	290a      	cmp	r1, #10
 8007aee:	d015      	beq.n	8007b1c <_puts_r+0x8c>
 8007af0:	6823      	ldr	r3, [r4, #0]
 8007af2:	1c5a      	adds	r2, r3, #1
 8007af4:	6022      	str	r2, [r4, #0]
 8007af6:	7019      	strb	r1, [r3, #0]
 8007af8:	68a3      	ldr	r3, [r4, #8]
 8007afa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007afe:	3b01      	subs	r3, #1
 8007b00:	60a3      	str	r3, [r4, #8]
 8007b02:	2900      	cmp	r1, #0
 8007b04:	d1ed      	bne.n	8007ae2 <_puts_r+0x52>
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	da11      	bge.n	8007b2e <_puts_r+0x9e>
 8007b0a:	4622      	mov	r2, r4
 8007b0c:	210a      	movs	r1, #10
 8007b0e:	4628      	mov	r0, r5
 8007b10:	f000 f893 	bl	8007c3a <__swbuf_r>
 8007b14:	3001      	adds	r0, #1
 8007b16:	d0d7      	beq.n	8007ac8 <_puts_r+0x38>
 8007b18:	250a      	movs	r5, #10
 8007b1a:	e7d7      	b.n	8007acc <_puts_r+0x3c>
 8007b1c:	4622      	mov	r2, r4
 8007b1e:	4628      	mov	r0, r5
 8007b20:	f000 f88b 	bl	8007c3a <__swbuf_r>
 8007b24:	3001      	adds	r0, #1
 8007b26:	d1e7      	bne.n	8007af8 <_puts_r+0x68>
 8007b28:	e7ce      	b.n	8007ac8 <_puts_r+0x38>
 8007b2a:	3e01      	subs	r6, #1
 8007b2c:	e7e4      	b.n	8007af8 <_puts_r+0x68>
 8007b2e:	6823      	ldr	r3, [r4, #0]
 8007b30:	1c5a      	adds	r2, r3, #1
 8007b32:	6022      	str	r2, [r4, #0]
 8007b34:	220a      	movs	r2, #10
 8007b36:	701a      	strb	r2, [r3, #0]
 8007b38:	e7ee      	b.n	8007b18 <_puts_r+0x88>
	...

08007b3c <puts>:
 8007b3c:	4b02      	ldr	r3, [pc, #8]	@ (8007b48 <puts+0xc>)
 8007b3e:	4601      	mov	r1, r0
 8007b40:	6818      	ldr	r0, [r3, #0]
 8007b42:	f7ff bfa5 	b.w	8007a90 <_puts_r>
 8007b46:	bf00      	nop
 8007b48:	20000024 	.word	0x20000024

08007b4c <sniprintf>:
 8007b4c:	b40c      	push	{r2, r3}
 8007b4e:	b530      	push	{r4, r5, lr}
 8007b50:	4b17      	ldr	r3, [pc, #92]	@ (8007bb0 <sniprintf+0x64>)
 8007b52:	1e0c      	subs	r4, r1, #0
 8007b54:	681d      	ldr	r5, [r3, #0]
 8007b56:	b09d      	sub	sp, #116	@ 0x74
 8007b58:	da08      	bge.n	8007b6c <sniprintf+0x20>
 8007b5a:	238b      	movs	r3, #139	@ 0x8b
 8007b5c:	602b      	str	r3, [r5, #0]
 8007b5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b62:	b01d      	add	sp, #116	@ 0x74
 8007b64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b68:	b002      	add	sp, #8
 8007b6a:	4770      	bx	lr
 8007b6c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007b70:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007b74:	bf14      	ite	ne
 8007b76:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8007b7a:	4623      	moveq	r3, r4
 8007b7c:	9304      	str	r3, [sp, #16]
 8007b7e:	9307      	str	r3, [sp, #28]
 8007b80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007b84:	9002      	str	r0, [sp, #8]
 8007b86:	9006      	str	r0, [sp, #24]
 8007b88:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007b8c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007b8e:	ab21      	add	r3, sp, #132	@ 0x84
 8007b90:	a902      	add	r1, sp, #8
 8007b92:	4628      	mov	r0, r5
 8007b94:	9301      	str	r3, [sp, #4]
 8007b96:	f000 fac3 	bl	8008120 <_svfiprintf_r>
 8007b9a:	1c43      	adds	r3, r0, #1
 8007b9c:	bfbc      	itt	lt
 8007b9e:	238b      	movlt	r3, #139	@ 0x8b
 8007ba0:	602b      	strlt	r3, [r5, #0]
 8007ba2:	2c00      	cmp	r4, #0
 8007ba4:	d0dd      	beq.n	8007b62 <sniprintf+0x16>
 8007ba6:	9b02      	ldr	r3, [sp, #8]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	701a      	strb	r2, [r3, #0]
 8007bac:	e7d9      	b.n	8007b62 <sniprintf+0x16>
 8007bae:	bf00      	nop
 8007bb0:	20000024 	.word	0x20000024

08007bb4 <__sread>:
 8007bb4:	b510      	push	{r4, lr}
 8007bb6:	460c      	mov	r4, r1
 8007bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bbc:	f000 f8fc 	bl	8007db8 <_read_r>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	bfab      	itete	ge
 8007bc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007bc6:	89a3      	ldrhlt	r3, [r4, #12]
 8007bc8:	181b      	addge	r3, r3, r0
 8007bca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007bce:	bfac      	ite	ge
 8007bd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007bd2:	81a3      	strhlt	r3, [r4, #12]
 8007bd4:	bd10      	pop	{r4, pc}

08007bd6 <__swrite>:
 8007bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bda:	461f      	mov	r7, r3
 8007bdc:	898b      	ldrh	r3, [r1, #12]
 8007bde:	05db      	lsls	r3, r3, #23
 8007be0:	4605      	mov	r5, r0
 8007be2:	460c      	mov	r4, r1
 8007be4:	4616      	mov	r6, r2
 8007be6:	d505      	bpl.n	8007bf4 <__swrite+0x1e>
 8007be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bec:	2302      	movs	r3, #2
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f000 f8d0 	bl	8007d94 <_lseek_r>
 8007bf4:	89a3      	ldrh	r3, [r4, #12]
 8007bf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007bfe:	81a3      	strh	r3, [r4, #12]
 8007c00:	4632      	mov	r2, r6
 8007c02:	463b      	mov	r3, r7
 8007c04:	4628      	mov	r0, r5
 8007c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c0a:	f000 b8e7 	b.w	8007ddc <_write_r>

08007c0e <__sseek>:
 8007c0e:	b510      	push	{r4, lr}
 8007c10:	460c      	mov	r4, r1
 8007c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c16:	f000 f8bd 	bl	8007d94 <_lseek_r>
 8007c1a:	1c43      	adds	r3, r0, #1
 8007c1c:	89a3      	ldrh	r3, [r4, #12]
 8007c1e:	bf15      	itete	ne
 8007c20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007c22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c2a:	81a3      	strheq	r3, [r4, #12]
 8007c2c:	bf18      	it	ne
 8007c2e:	81a3      	strhne	r3, [r4, #12]
 8007c30:	bd10      	pop	{r4, pc}

08007c32 <__sclose>:
 8007c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c36:	f000 b89d 	b.w	8007d74 <_close_r>

08007c3a <__swbuf_r>:
 8007c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c3c:	460e      	mov	r6, r1
 8007c3e:	4614      	mov	r4, r2
 8007c40:	4605      	mov	r5, r0
 8007c42:	b118      	cbz	r0, 8007c4c <__swbuf_r+0x12>
 8007c44:	6a03      	ldr	r3, [r0, #32]
 8007c46:	b90b      	cbnz	r3, 8007c4c <__swbuf_r+0x12>
 8007c48:	f7ff feda 	bl	8007a00 <__sinit>
 8007c4c:	69a3      	ldr	r3, [r4, #24]
 8007c4e:	60a3      	str	r3, [r4, #8]
 8007c50:	89a3      	ldrh	r3, [r4, #12]
 8007c52:	071a      	lsls	r2, r3, #28
 8007c54:	d501      	bpl.n	8007c5a <__swbuf_r+0x20>
 8007c56:	6923      	ldr	r3, [r4, #16]
 8007c58:	b943      	cbnz	r3, 8007c6c <__swbuf_r+0x32>
 8007c5a:	4621      	mov	r1, r4
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	f000 f82b 	bl	8007cb8 <__swsetup_r>
 8007c62:	b118      	cbz	r0, 8007c6c <__swbuf_r+0x32>
 8007c64:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007c68:	4638      	mov	r0, r7
 8007c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c6c:	6823      	ldr	r3, [r4, #0]
 8007c6e:	6922      	ldr	r2, [r4, #16]
 8007c70:	1a98      	subs	r0, r3, r2
 8007c72:	6963      	ldr	r3, [r4, #20]
 8007c74:	b2f6      	uxtb	r6, r6
 8007c76:	4283      	cmp	r3, r0
 8007c78:	4637      	mov	r7, r6
 8007c7a:	dc05      	bgt.n	8007c88 <__swbuf_r+0x4e>
 8007c7c:	4621      	mov	r1, r4
 8007c7e:	4628      	mov	r0, r5
 8007c80:	f000 fe9e 	bl	80089c0 <_fflush_r>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	d1ed      	bne.n	8007c64 <__swbuf_r+0x2a>
 8007c88:	68a3      	ldr	r3, [r4, #8]
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	60a3      	str	r3, [r4, #8]
 8007c8e:	6823      	ldr	r3, [r4, #0]
 8007c90:	1c5a      	adds	r2, r3, #1
 8007c92:	6022      	str	r2, [r4, #0]
 8007c94:	701e      	strb	r6, [r3, #0]
 8007c96:	6962      	ldr	r2, [r4, #20]
 8007c98:	1c43      	adds	r3, r0, #1
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d004      	beq.n	8007ca8 <__swbuf_r+0x6e>
 8007c9e:	89a3      	ldrh	r3, [r4, #12]
 8007ca0:	07db      	lsls	r3, r3, #31
 8007ca2:	d5e1      	bpl.n	8007c68 <__swbuf_r+0x2e>
 8007ca4:	2e0a      	cmp	r6, #10
 8007ca6:	d1df      	bne.n	8007c68 <__swbuf_r+0x2e>
 8007ca8:	4621      	mov	r1, r4
 8007caa:	4628      	mov	r0, r5
 8007cac:	f000 fe88 	bl	80089c0 <_fflush_r>
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	d0d9      	beq.n	8007c68 <__swbuf_r+0x2e>
 8007cb4:	e7d6      	b.n	8007c64 <__swbuf_r+0x2a>
	...

08007cb8 <__swsetup_r>:
 8007cb8:	b538      	push	{r3, r4, r5, lr}
 8007cba:	4b29      	ldr	r3, [pc, #164]	@ (8007d60 <__swsetup_r+0xa8>)
 8007cbc:	4605      	mov	r5, r0
 8007cbe:	6818      	ldr	r0, [r3, #0]
 8007cc0:	460c      	mov	r4, r1
 8007cc2:	b118      	cbz	r0, 8007ccc <__swsetup_r+0x14>
 8007cc4:	6a03      	ldr	r3, [r0, #32]
 8007cc6:	b90b      	cbnz	r3, 8007ccc <__swsetup_r+0x14>
 8007cc8:	f7ff fe9a 	bl	8007a00 <__sinit>
 8007ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cd0:	0719      	lsls	r1, r3, #28
 8007cd2:	d422      	bmi.n	8007d1a <__swsetup_r+0x62>
 8007cd4:	06da      	lsls	r2, r3, #27
 8007cd6:	d407      	bmi.n	8007ce8 <__swsetup_r+0x30>
 8007cd8:	2209      	movs	r2, #9
 8007cda:	602a      	str	r2, [r5, #0]
 8007cdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ce0:	81a3      	strh	r3, [r4, #12]
 8007ce2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ce6:	e033      	b.n	8007d50 <__swsetup_r+0x98>
 8007ce8:	0758      	lsls	r0, r3, #29
 8007cea:	d512      	bpl.n	8007d12 <__swsetup_r+0x5a>
 8007cec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cee:	b141      	cbz	r1, 8007d02 <__swsetup_r+0x4a>
 8007cf0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cf4:	4299      	cmp	r1, r3
 8007cf6:	d002      	beq.n	8007cfe <__swsetup_r+0x46>
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	f000 f8bd 	bl	8007e78 <_free_r>
 8007cfe:	2300      	movs	r3, #0
 8007d00:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d02:	89a3      	ldrh	r3, [r4, #12]
 8007d04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007d08:	81a3      	strh	r3, [r4, #12]
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	6063      	str	r3, [r4, #4]
 8007d0e:	6923      	ldr	r3, [r4, #16]
 8007d10:	6023      	str	r3, [r4, #0]
 8007d12:	89a3      	ldrh	r3, [r4, #12]
 8007d14:	f043 0308 	orr.w	r3, r3, #8
 8007d18:	81a3      	strh	r3, [r4, #12]
 8007d1a:	6923      	ldr	r3, [r4, #16]
 8007d1c:	b94b      	cbnz	r3, 8007d32 <__swsetup_r+0x7a>
 8007d1e:	89a3      	ldrh	r3, [r4, #12]
 8007d20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007d24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d28:	d003      	beq.n	8007d32 <__swsetup_r+0x7a>
 8007d2a:	4621      	mov	r1, r4
 8007d2c:	4628      	mov	r0, r5
 8007d2e:	f000 fe95 	bl	8008a5c <__smakebuf_r>
 8007d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d36:	f013 0201 	ands.w	r2, r3, #1
 8007d3a:	d00a      	beq.n	8007d52 <__swsetup_r+0x9a>
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	60a2      	str	r2, [r4, #8]
 8007d40:	6962      	ldr	r2, [r4, #20]
 8007d42:	4252      	negs	r2, r2
 8007d44:	61a2      	str	r2, [r4, #24]
 8007d46:	6922      	ldr	r2, [r4, #16]
 8007d48:	b942      	cbnz	r2, 8007d5c <__swsetup_r+0xa4>
 8007d4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d4e:	d1c5      	bne.n	8007cdc <__swsetup_r+0x24>
 8007d50:	bd38      	pop	{r3, r4, r5, pc}
 8007d52:	0799      	lsls	r1, r3, #30
 8007d54:	bf58      	it	pl
 8007d56:	6962      	ldrpl	r2, [r4, #20]
 8007d58:	60a2      	str	r2, [r4, #8]
 8007d5a:	e7f4      	b.n	8007d46 <__swsetup_r+0x8e>
 8007d5c:	2000      	movs	r0, #0
 8007d5e:	e7f7      	b.n	8007d50 <__swsetup_r+0x98>
 8007d60:	20000024 	.word	0x20000024

08007d64 <memset>:
 8007d64:	4402      	add	r2, r0
 8007d66:	4603      	mov	r3, r0
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d100      	bne.n	8007d6e <memset+0xa>
 8007d6c:	4770      	bx	lr
 8007d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8007d72:	e7f9      	b.n	8007d68 <memset+0x4>

08007d74 <_close_r>:
 8007d74:	b538      	push	{r3, r4, r5, lr}
 8007d76:	4d06      	ldr	r5, [pc, #24]	@ (8007d90 <_close_r+0x1c>)
 8007d78:	2300      	movs	r3, #0
 8007d7a:	4604      	mov	r4, r0
 8007d7c:	4608      	mov	r0, r1
 8007d7e:	602b      	str	r3, [r5, #0]
 8007d80:	f7f8 fff3 	bl	8000d6a <_close>
 8007d84:	1c43      	adds	r3, r0, #1
 8007d86:	d102      	bne.n	8007d8e <_close_r+0x1a>
 8007d88:	682b      	ldr	r3, [r5, #0]
 8007d8a:	b103      	cbz	r3, 8007d8e <_close_r+0x1a>
 8007d8c:	6023      	str	r3, [r4, #0]
 8007d8e:	bd38      	pop	{r3, r4, r5, pc}
 8007d90:	2000584c 	.word	0x2000584c

08007d94 <_lseek_r>:
 8007d94:	b538      	push	{r3, r4, r5, lr}
 8007d96:	4d07      	ldr	r5, [pc, #28]	@ (8007db4 <_lseek_r+0x20>)
 8007d98:	4604      	mov	r4, r0
 8007d9a:	4608      	mov	r0, r1
 8007d9c:	4611      	mov	r1, r2
 8007d9e:	2200      	movs	r2, #0
 8007da0:	602a      	str	r2, [r5, #0]
 8007da2:	461a      	mov	r2, r3
 8007da4:	f7f9 f808 	bl	8000db8 <_lseek>
 8007da8:	1c43      	adds	r3, r0, #1
 8007daa:	d102      	bne.n	8007db2 <_lseek_r+0x1e>
 8007dac:	682b      	ldr	r3, [r5, #0]
 8007dae:	b103      	cbz	r3, 8007db2 <_lseek_r+0x1e>
 8007db0:	6023      	str	r3, [r4, #0]
 8007db2:	bd38      	pop	{r3, r4, r5, pc}
 8007db4:	2000584c 	.word	0x2000584c

08007db8 <_read_r>:
 8007db8:	b538      	push	{r3, r4, r5, lr}
 8007dba:	4d07      	ldr	r5, [pc, #28]	@ (8007dd8 <_read_r+0x20>)
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	4608      	mov	r0, r1
 8007dc0:	4611      	mov	r1, r2
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	602a      	str	r2, [r5, #0]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	f7f8 ff96 	bl	8000cf8 <_read>
 8007dcc:	1c43      	adds	r3, r0, #1
 8007dce:	d102      	bne.n	8007dd6 <_read_r+0x1e>
 8007dd0:	682b      	ldr	r3, [r5, #0]
 8007dd2:	b103      	cbz	r3, 8007dd6 <_read_r+0x1e>
 8007dd4:	6023      	str	r3, [r4, #0]
 8007dd6:	bd38      	pop	{r3, r4, r5, pc}
 8007dd8:	2000584c 	.word	0x2000584c

08007ddc <_write_r>:
 8007ddc:	b538      	push	{r3, r4, r5, lr}
 8007dde:	4d07      	ldr	r5, [pc, #28]	@ (8007dfc <_write_r+0x20>)
 8007de0:	4604      	mov	r4, r0
 8007de2:	4608      	mov	r0, r1
 8007de4:	4611      	mov	r1, r2
 8007de6:	2200      	movs	r2, #0
 8007de8:	602a      	str	r2, [r5, #0]
 8007dea:	461a      	mov	r2, r3
 8007dec:	f7f8 ffa1 	bl	8000d32 <_write>
 8007df0:	1c43      	adds	r3, r0, #1
 8007df2:	d102      	bne.n	8007dfa <_write_r+0x1e>
 8007df4:	682b      	ldr	r3, [r5, #0]
 8007df6:	b103      	cbz	r3, 8007dfa <_write_r+0x1e>
 8007df8:	6023      	str	r3, [r4, #0]
 8007dfa:	bd38      	pop	{r3, r4, r5, pc}
 8007dfc:	2000584c 	.word	0x2000584c

08007e00 <__errno>:
 8007e00:	4b01      	ldr	r3, [pc, #4]	@ (8007e08 <__errno+0x8>)
 8007e02:	6818      	ldr	r0, [r3, #0]
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	20000024 	.word	0x20000024

08007e0c <__libc_init_array>:
 8007e0c:	b570      	push	{r4, r5, r6, lr}
 8007e0e:	4d0d      	ldr	r5, [pc, #52]	@ (8007e44 <__libc_init_array+0x38>)
 8007e10:	4c0d      	ldr	r4, [pc, #52]	@ (8007e48 <__libc_init_array+0x3c>)
 8007e12:	1b64      	subs	r4, r4, r5
 8007e14:	10a4      	asrs	r4, r4, #2
 8007e16:	2600      	movs	r6, #0
 8007e18:	42a6      	cmp	r6, r4
 8007e1a:	d109      	bne.n	8007e30 <__libc_init_array+0x24>
 8007e1c:	4d0b      	ldr	r5, [pc, #44]	@ (8007e4c <__libc_init_array+0x40>)
 8007e1e:	4c0c      	ldr	r4, [pc, #48]	@ (8007e50 <__libc_init_array+0x44>)
 8007e20:	f000 feda 	bl	8008bd8 <_init>
 8007e24:	1b64      	subs	r4, r4, r5
 8007e26:	10a4      	asrs	r4, r4, #2
 8007e28:	2600      	movs	r6, #0
 8007e2a:	42a6      	cmp	r6, r4
 8007e2c:	d105      	bne.n	8007e3a <__libc_init_array+0x2e>
 8007e2e:	bd70      	pop	{r4, r5, r6, pc}
 8007e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e34:	4798      	blx	r3
 8007e36:	3601      	adds	r6, #1
 8007e38:	e7ee      	b.n	8007e18 <__libc_init_array+0xc>
 8007e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e3e:	4798      	blx	r3
 8007e40:	3601      	adds	r6, #1
 8007e42:	e7f2      	b.n	8007e2a <__libc_init_array+0x1e>
 8007e44:	08009008 	.word	0x08009008
 8007e48:	08009008 	.word	0x08009008
 8007e4c:	08009008 	.word	0x08009008
 8007e50:	0800900c 	.word	0x0800900c

08007e54 <__retarget_lock_init_recursive>:
 8007e54:	4770      	bx	lr

08007e56 <__retarget_lock_acquire_recursive>:
 8007e56:	4770      	bx	lr

08007e58 <__retarget_lock_release_recursive>:
 8007e58:	4770      	bx	lr

08007e5a <memcpy>:
 8007e5a:	440a      	add	r2, r1
 8007e5c:	4291      	cmp	r1, r2
 8007e5e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007e62:	d100      	bne.n	8007e66 <memcpy+0xc>
 8007e64:	4770      	bx	lr
 8007e66:	b510      	push	{r4, lr}
 8007e68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e70:	4291      	cmp	r1, r2
 8007e72:	d1f9      	bne.n	8007e68 <memcpy+0xe>
 8007e74:	bd10      	pop	{r4, pc}
	...

08007e78 <_free_r>:
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	4605      	mov	r5, r0
 8007e7c:	2900      	cmp	r1, #0
 8007e7e:	d041      	beq.n	8007f04 <_free_r+0x8c>
 8007e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e84:	1f0c      	subs	r4, r1, #4
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	bfb8      	it	lt
 8007e8a:	18e4      	addlt	r4, r4, r3
 8007e8c:	f000 f8e0 	bl	8008050 <__malloc_lock>
 8007e90:	4a1d      	ldr	r2, [pc, #116]	@ (8007f08 <_free_r+0x90>)
 8007e92:	6813      	ldr	r3, [r2, #0]
 8007e94:	b933      	cbnz	r3, 8007ea4 <_free_r+0x2c>
 8007e96:	6063      	str	r3, [r4, #4]
 8007e98:	6014      	str	r4, [r2, #0]
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ea0:	f000 b8dc 	b.w	800805c <__malloc_unlock>
 8007ea4:	42a3      	cmp	r3, r4
 8007ea6:	d908      	bls.n	8007eba <_free_r+0x42>
 8007ea8:	6820      	ldr	r0, [r4, #0]
 8007eaa:	1821      	adds	r1, r4, r0
 8007eac:	428b      	cmp	r3, r1
 8007eae:	bf01      	itttt	eq
 8007eb0:	6819      	ldreq	r1, [r3, #0]
 8007eb2:	685b      	ldreq	r3, [r3, #4]
 8007eb4:	1809      	addeq	r1, r1, r0
 8007eb6:	6021      	streq	r1, [r4, #0]
 8007eb8:	e7ed      	b.n	8007e96 <_free_r+0x1e>
 8007eba:	461a      	mov	r2, r3
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	b10b      	cbz	r3, 8007ec4 <_free_r+0x4c>
 8007ec0:	42a3      	cmp	r3, r4
 8007ec2:	d9fa      	bls.n	8007eba <_free_r+0x42>
 8007ec4:	6811      	ldr	r1, [r2, #0]
 8007ec6:	1850      	adds	r0, r2, r1
 8007ec8:	42a0      	cmp	r0, r4
 8007eca:	d10b      	bne.n	8007ee4 <_free_r+0x6c>
 8007ecc:	6820      	ldr	r0, [r4, #0]
 8007ece:	4401      	add	r1, r0
 8007ed0:	1850      	adds	r0, r2, r1
 8007ed2:	4283      	cmp	r3, r0
 8007ed4:	6011      	str	r1, [r2, #0]
 8007ed6:	d1e0      	bne.n	8007e9a <_free_r+0x22>
 8007ed8:	6818      	ldr	r0, [r3, #0]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	6053      	str	r3, [r2, #4]
 8007ede:	4408      	add	r0, r1
 8007ee0:	6010      	str	r0, [r2, #0]
 8007ee2:	e7da      	b.n	8007e9a <_free_r+0x22>
 8007ee4:	d902      	bls.n	8007eec <_free_r+0x74>
 8007ee6:	230c      	movs	r3, #12
 8007ee8:	602b      	str	r3, [r5, #0]
 8007eea:	e7d6      	b.n	8007e9a <_free_r+0x22>
 8007eec:	6820      	ldr	r0, [r4, #0]
 8007eee:	1821      	adds	r1, r4, r0
 8007ef0:	428b      	cmp	r3, r1
 8007ef2:	bf04      	itt	eq
 8007ef4:	6819      	ldreq	r1, [r3, #0]
 8007ef6:	685b      	ldreq	r3, [r3, #4]
 8007ef8:	6063      	str	r3, [r4, #4]
 8007efa:	bf04      	itt	eq
 8007efc:	1809      	addeq	r1, r1, r0
 8007efe:	6021      	streq	r1, [r4, #0]
 8007f00:	6054      	str	r4, [r2, #4]
 8007f02:	e7ca      	b.n	8007e9a <_free_r+0x22>
 8007f04:	bd38      	pop	{r3, r4, r5, pc}
 8007f06:	bf00      	nop
 8007f08:	20005858 	.word	0x20005858

08007f0c <sbrk_aligned>:
 8007f0c:	b570      	push	{r4, r5, r6, lr}
 8007f0e:	4e0f      	ldr	r6, [pc, #60]	@ (8007f4c <sbrk_aligned+0x40>)
 8007f10:	460c      	mov	r4, r1
 8007f12:	6831      	ldr	r1, [r6, #0]
 8007f14:	4605      	mov	r5, r0
 8007f16:	b911      	cbnz	r1, 8007f1e <sbrk_aligned+0x12>
 8007f18:	f000 fe18 	bl	8008b4c <_sbrk_r>
 8007f1c:	6030      	str	r0, [r6, #0]
 8007f1e:	4621      	mov	r1, r4
 8007f20:	4628      	mov	r0, r5
 8007f22:	f000 fe13 	bl	8008b4c <_sbrk_r>
 8007f26:	1c43      	adds	r3, r0, #1
 8007f28:	d103      	bne.n	8007f32 <sbrk_aligned+0x26>
 8007f2a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007f2e:	4620      	mov	r0, r4
 8007f30:	bd70      	pop	{r4, r5, r6, pc}
 8007f32:	1cc4      	adds	r4, r0, #3
 8007f34:	f024 0403 	bic.w	r4, r4, #3
 8007f38:	42a0      	cmp	r0, r4
 8007f3a:	d0f8      	beq.n	8007f2e <sbrk_aligned+0x22>
 8007f3c:	1a21      	subs	r1, r4, r0
 8007f3e:	4628      	mov	r0, r5
 8007f40:	f000 fe04 	bl	8008b4c <_sbrk_r>
 8007f44:	3001      	adds	r0, #1
 8007f46:	d1f2      	bne.n	8007f2e <sbrk_aligned+0x22>
 8007f48:	e7ef      	b.n	8007f2a <sbrk_aligned+0x1e>
 8007f4a:	bf00      	nop
 8007f4c:	20005854 	.word	0x20005854

08007f50 <_malloc_r>:
 8007f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f54:	1ccd      	adds	r5, r1, #3
 8007f56:	f025 0503 	bic.w	r5, r5, #3
 8007f5a:	3508      	adds	r5, #8
 8007f5c:	2d0c      	cmp	r5, #12
 8007f5e:	bf38      	it	cc
 8007f60:	250c      	movcc	r5, #12
 8007f62:	2d00      	cmp	r5, #0
 8007f64:	4606      	mov	r6, r0
 8007f66:	db01      	blt.n	8007f6c <_malloc_r+0x1c>
 8007f68:	42a9      	cmp	r1, r5
 8007f6a:	d904      	bls.n	8007f76 <_malloc_r+0x26>
 8007f6c:	230c      	movs	r3, #12
 8007f6e:	6033      	str	r3, [r6, #0]
 8007f70:	2000      	movs	r0, #0
 8007f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800804c <_malloc_r+0xfc>
 8007f7a:	f000 f869 	bl	8008050 <__malloc_lock>
 8007f7e:	f8d8 3000 	ldr.w	r3, [r8]
 8007f82:	461c      	mov	r4, r3
 8007f84:	bb44      	cbnz	r4, 8007fd8 <_malloc_r+0x88>
 8007f86:	4629      	mov	r1, r5
 8007f88:	4630      	mov	r0, r6
 8007f8a:	f7ff ffbf 	bl	8007f0c <sbrk_aligned>
 8007f8e:	1c43      	adds	r3, r0, #1
 8007f90:	4604      	mov	r4, r0
 8007f92:	d158      	bne.n	8008046 <_malloc_r+0xf6>
 8007f94:	f8d8 4000 	ldr.w	r4, [r8]
 8007f98:	4627      	mov	r7, r4
 8007f9a:	2f00      	cmp	r7, #0
 8007f9c:	d143      	bne.n	8008026 <_malloc_r+0xd6>
 8007f9e:	2c00      	cmp	r4, #0
 8007fa0:	d04b      	beq.n	800803a <_malloc_r+0xea>
 8007fa2:	6823      	ldr	r3, [r4, #0]
 8007fa4:	4639      	mov	r1, r7
 8007fa6:	4630      	mov	r0, r6
 8007fa8:	eb04 0903 	add.w	r9, r4, r3
 8007fac:	f000 fdce 	bl	8008b4c <_sbrk_r>
 8007fb0:	4581      	cmp	r9, r0
 8007fb2:	d142      	bne.n	800803a <_malloc_r+0xea>
 8007fb4:	6821      	ldr	r1, [r4, #0]
 8007fb6:	1a6d      	subs	r5, r5, r1
 8007fb8:	4629      	mov	r1, r5
 8007fba:	4630      	mov	r0, r6
 8007fbc:	f7ff ffa6 	bl	8007f0c <sbrk_aligned>
 8007fc0:	3001      	adds	r0, #1
 8007fc2:	d03a      	beq.n	800803a <_malloc_r+0xea>
 8007fc4:	6823      	ldr	r3, [r4, #0]
 8007fc6:	442b      	add	r3, r5
 8007fc8:	6023      	str	r3, [r4, #0]
 8007fca:	f8d8 3000 	ldr.w	r3, [r8]
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	bb62      	cbnz	r2, 800802c <_malloc_r+0xdc>
 8007fd2:	f8c8 7000 	str.w	r7, [r8]
 8007fd6:	e00f      	b.n	8007ff8 <_malloc_r+0xa8>
 8007fd8:	6822      	ldr	r2, [r4, #0]
 8007fda:	1b52      	subs	r2, r2, r5
 8007fdc:	d420      	bmi.n	8008020 <_malloc_r+0xd0>
 8007fde:	2a0b      	cmp	r2, #11
 8007fe0:	d917      	bls.n	8008012 <_malloc_r+0xc2>
 8007fe2:	1961      	adds	r1, r4, r5
 8007fe4:	42a3      	cmp	r3, r4
 8007fe6:	6025      	str	r5, [r4, #0]
 8007fe8:	bf18      	it	ne
 8007fea:	6059      	strne	r1, [r3, #4]
 8007fec:	6863      	ldr	r3, [r4, #4]
 8007fee:	bf08      	it	eq
 8007ff0:	f8c8 1000 	streq.w	r1, [r8]
 8007ff4:	5162      	str	r2, [r4, r5]
 8007ff6:	604b      	str	r3, [r1, #4]
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	f000 f82f 	bl	800805c <__malloc_unlock>
 8007ffe:	f104 000b 	add.w	r0, r4, #11
 8008002:	1d23      	adds	r3, r4, #4
 8008004:	f020 0007 	bic.w	r0, r0, #7
 8008008:	1ac2      	subs	r2, r0, r3
 800800a:	bf1c      	itt	ne
 800800c:	1a1b      	subne	r3, r3, r0
 800800e:	50a3      	strne	r3, [r4, r2]
 8008010:	e7af      	b.n	8007f72 <_malloc_r+0x22>
 8008012:	6862      	ldr	r2, [r4, #4]
 8008014:	42a3      	cmp	r3, r4
 8008016:	bf0c      	ite	eq
 8008018:	f8c8 2000 	streq.w	r2, [r8]
 800801c:	605a      	strne	r2, [r3, #4]
 800801e:	e7eb      	b.n	8007ff8 <_malloc_r+0xa8>
 8008020:	4623      	mov	r3, r4
 8008022:	6864      	ldr	r4, [r4, #4]
 8008024:	e7ae      	b.n	8007f84 <_malloc_r+0x34>
 8008026:	463c      	mov	r4, r7
 8008028:	687f      	ldr	r7, [r7, #4]
 800802a:	e7b6      	b.n	8007f9a <_malloc_r+0x4a>
 800802c:	461a      	mov	r2, r3
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	42a3      	cmp	r3, r4
 8008032:	d1fb      	bne.n	800802c <_malloc_r+0xdc>
 8008034:	2300      	movs	r3, #0
 8008036:	6053      	str	r3, [r2, #4]
 8008038:	e7de      	b.n	8007ff8 <_malloc_r+0xa8>
 800803a:	230c      	movs	r3, #12
 800803c:	6033      	str	r3, [r6, #0]
 800803e:	4630      	mov	r0, r6
 8008040:	f000 f80c 	bl	800805c <__malloc_unlock>
 8008044:	e794      	b.n	8007f70 <_malloc_r+0x20>
 8008046:	6005      	str	r5, [r0, #0]
 8008048:	e7d6      	b.n	8007ff8 <_malloc_r+0xa8>
 800804a:	bf00      	nop
 800804c:	20005858 	.word	0x20005858

08008050 <__malloc_lock>:
 8008050:	4801      	ldr	r0, [pc, #4]	@ (8008058 <__malloc_lock+0x8>)
 8008052:	f7ff bf00 	b.w	8007e56 <__retarget_lock_acquire_recursive>
 8008056:	bf00      	nop
 8008058:	20005850 	.word	0x20005850

0800805c <__malloc_unlock>:
 800805c:	4801      	ldr	r0, [pc, #4]	@ (8008064 <__malloc_unlock+0x8>)
 800805e:	f7ff befb 	b.w	8007e58 <__retarget_lock_release_recursive>
 8008062:	bf00      	nop
 8008064:	20005850 	.word	0x20005850

08008068 <__ssputs_r>:
 8008068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800806c:	688e      	ldr	r6, [r1, #8]
 800806e:	461f      	mov	r7, r3
 8008070:	42be      	cmp	r6, r7
 8008072:	680b      	ldr	r3, [r1, #0]
 8008074:	4682      	mov	sl, r0
 8008076:	460c      	mov	r4, r1
 8008078:	4690      	mov	r8, r2
 800807a:	d82d      	bhi.n	80080d8 <__ssputs_r+0x70>
 800807c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008080:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008084:	d026      	beq.n	80080d4 <__ssputs_r+0x6c>
 8008086:	6965      	ldr	r5, [r4, #20]
 8008088:	6909      	ldr	r1, [r1, #16]
 800808a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800808e:	eba3 0901 	sub.w	r9, r3, r1
 8008092:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008096:	1c7b      	adds	r3, r7, #1
 8008098:	444b      	add	r3, r9
 800809a:	106d      	asrs	r5, r5, #1
 800809c:	429d      	cmp	r5, r3
 800809e:	bf38      	it	cc
 80080a0:	461d      	movcc	r5, r3
 80080a2:	0553      	lsls	r3, r2, #21
 80080a4:	d527      	bpl.n	80080f6 <__ssputs_r+0x8e>
 80080a6:	4629      	mov	r1, r5
 80080a8:	f7ff ff52 	bl	8007f50 <_malloc_r>
 80080ac:	4606      	mov	r6, r0
 80080ae:	b360      	cbz	r0, 800810a <__ssputs_r+0xa2>
 80080b0:	6921      	ldr	r1, [r4, #16]
 80080b2:	464a      	mov	r2, r9
 80080b4:	f7ff fed1 	bl	8007e5a <memcpy>
 80080b8:	89a3      	ldrh	r3, [r4, #12]
 80080ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80080be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080c2:	81a3      	strh	r3, [r4, #12]
 80080c4:	6126      	str	r6, [r4, #16]
 80080c6:	6165      	str	r5, [r4, #20]
 80080c8:	444e      	add	r6, r9
 80080ca:	eba5 0509 	sub.w	r5, r5, r9
 80080ce:	6026      	str	r6, [r4, #0]
 80080d0:	60a5      	str	r5, [r4, #8]
 80080d2:	463e      	mov	r6, r7
 80080d4:	42be      	cmp	r6, r7
 80080d6:	d900      	bls.n	80080da <__ssputs_r+0x72>
 80080d8:	463e      	mov	r6, r7
 80080da:	6820      	ldr	r0, [r4, #0]
 80080dc:	4632      	mov	r2, r6
 80080de:	4641      	mov	r1, r8
 80080e0:	f000 fcf8 	bl	8008ad4 <memmove>
 80080e4:	68a3      	ldr	r3, [r4, #8]
 80080e6:	1b9b      	subs	r3, r3, r6
 80080e8:	60a3      	str	r3, [r4, #8]
 80080ea:	6823      	ldr	r3, [r4, #0]
 80080ec:	4433      	add	r3, r6
 80080ee:	6023      	str	r3, [r4, #0]
 80080f0:	2000      	movs	r0, #0
 80080f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080f6:	462a      	mov	r2, r5
 80080f8:	f000 fd38 	bl	8008b6c <_realloc_r>
 80080fc:	4606      	mov	r6, r0
 80080fe:	2800      	cmp	r0, #0
 8008100:	d1e0      	bne.n	80080c4 <__ssputs_r+0x5c>
 8008102:	6921      	ldr	r1, [r4, #16]
 8008104:	4650      	mov	r0, sl
 8008106:	f7ff feb7 	bl	8007e78 <_free_r>
 800810a:	230c      	movs	r3, #12
 800810c:	f8ca 3000 	str.w	r3, [sl]
 8008110:	89a3      	ldrh	r3, [r4, #12]
 8008112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008116:	81a3      	strh	r3, [r4, #12]
 8008118:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800811c:	e7e9      	b.n	80080f2 <__ssputs_r+0x8a>
	...

08008120 <_svfiprintf_r>:
 8008120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008124:	4698      	mov	r8, r3
 8008126:	898b      	ldrh	r3, [r1, #12]
 8008128:	061b      	lsls	r3, r3, #24
 800812a:	b09d      	sub	sp, #116	@ 0x74
 800812c:	4607      	mov	r7, r0
 800812e:	460d      	mov	r5, r1
 8008130:	4614      	mov	r4, r2
 8008132:	d510      	bpl.n	8008156 <_svfiprintf_r+0x36>
 8008134:	690b      	ldr	r3, [r1, #16]
 8008136:	b973      	cbnz	r3, 8008156 <_svfiprintf_r+0x36>
 8008138:	2140      	movs	r1, #64	@ 0x40
 800813a:	f7ff ff09 	bl	8007f50 <_malloc_r>
 800813e:	6028      	str	r0, [r5, #0]
 8008140:	6128      	str	r0, [r5, #16]
 8008142:	b930      	cbnz	r0, 8008152 <_svfiprintf_r+0x32>
 8008144:	230c      	movs	r3, #12
 8008146:	603b      	str	r3, [r7, #0]
 8008148:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800814c:	b01d      	add	sp, #116	@ 0x74
 800814e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008152:	2340      	movs	r3, #64	@ 0x40
 8008154:	616b      	str	r3, [r5, #20]
 8008156:	2300      	movs	r3, #0
 8008158:	9309      	str	r3, [sp, #36]	@ 0x24
 800815a:	2320      	movs	r3, #32
 800815c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008160:	f8cd 800c 	str.w	r8, [sp, #12]
 8008164:	2330      	movs	r3, #48	@ 0x30
 8008166:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008304 <_svfiprintf_r+0x1e4>
 800816a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800816e:	f04f 0901 	mov.w	r9, #1
 8008172:	4623      	mov	r3, r4
 8008174:	469a      	mov	sl, r3
 8008176:	f813 2b01 	ldrb.w	r2, [r3], #1
 800817a:	b10a      	cbz	r2, 8008180 <_svfiprintf_r+0x60>
 800817c:	2a25      	cmp	r2, #37	@ 0x25
 800817e:	d1f9      	bne.n	8008174 <_svfiprintf_r+0x54>
 8008180:	ebba 0b04 	subs.w	fp, sl, r4
 8008184:	d00b      	beq.n	800819e <_svfiprintf_r+0x7e>
 8008186:	465b      	mov	r3, fp
 8008188:	4622      	mov	r2, r4
 800818a:	4629      	mov	r1, r5
 800818c:	4638      	mov	r0, r7
 800818e:	f7ff ff6b 	bl	8008068 <__ssputs_r>
 8008192:	3001      	adds	r0, #1
 8008194:	f000 80a7 	beq.w	80082e6 <_svfiprintf_r+0x1c6>
 8008198:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800819a:	445a      	add	r2, fp
 800819c:	9209      	str	r2, [sp, #36]	@ 0x24
 800819e:	f89a 3000 	ldrb.w	r3, [sl]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f000 809f 	beq.w	80082e6 <_svfiprintf_r+0x1c6>
 80081a8:	2300      	movs	r3, #0
 80081aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80081ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081b2:	f10a 0a01 	add.w	sl, sl, #1
 80081b6:	9304      	str	r3, [sp, #16]
 80081b8:	9307      	str	r3, [sp, #28]
 80081ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80081be:	931a      	str	r3, [sp, #104]	@ 0x68
 80081c0:	4654      	mov	r4, sl
 80081c2:	2205      	movs	r2, #5
 80081c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081c8:	484e      	ldr	r0, [pc, #312]	@ (8008304 <_svfiprintf_r+0x1e4>)
 80081ca:	f7f8 f801 	bl	80001d0 <memchr>
 80081ce:	9a04      	ldr	r2, [sp, #16]
 80081d0:	b9d8      	cbnz	r0, 800820a <_svfiprintf_r+0xea>
 80081d2:	06d0      	lsls	r0, r2, #27
 80081d4:	bf44      	itt	mi
 80081d6:	2320      	movmi	r3, #32
 80081d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081dc:	0711      	lsls	r1, r2, #28
 80081de:	bf44      	itt	mi
 80081e0:	232b      	movmi	r3, #43	@ 0x2b
 80081e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081e6:	f89a 3000 	ldrb.w	r3, [sl]
 80081ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80081ec:	d015      	beq.n	800821a <_svfiprintf_r+0xfa>
 80081ee:	9a07      	ldr	r2, [sp, #28]
 80081f0:	4654      	mov	r4, sl
 80081f2:	2000      	movs	r0, #0
 80081f4:	f04f 0c0a 	mov.w	ip, #10
 80081f8:	4621      	mov	r1, r4
 80081fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081fe:	3b30      	subs	r3, #48	@ 0x30
 8008200:	2b09      	cmp	r3, #9
 8008202:	d94b      	bls.n	800829c <_svfiprintf_r+0x17c>
 8008204:	b1b0      	cbz	r0, 8008234 <_svfiprintf_r+0x114>
 8008206:	9207      	str	r2, [sp, #28]
 8008208:	e014      	b.n	8008234 <_svfiprintf_r+0x114>
 800820a:	eba0 0308 	sub.w	r3, r0, r8
 800820e:	fa09 f303 	lsl.w	r3, r9, r3
 8008212:	4313      	orrs	r3, r2
 8008214:	9304      	str	r3, [sp, #16]
 8008216:	46a2      	mov	sl, r4
 8008218:	e7d2      	b.n	80081c0 <_svfiprintf_r+0xa0>
 800821a:	9b03      	ldr	r3, [sp, #12]
 800821c:	1d19      	adds	r1, r3, #4
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	9103      	str	r1, [sp, #12]
 8008222:	2b00      	cmp	r3, #0
 8008224:	bfbb      	ittet	lt
 8008226:	425b      	neglt	r3, r3
 8008228:	f042 0202 	orrlt.w	r2, r2, #2
 800822c:	9307      	strge	r3, [sp, #28]
 800822e:	9307      	strlt	r3, [sp, #28]
 8008230:	bfb8      	it	lt
 8008232:	9204      	strlt	r2, [sp, #16]
 8008234:	7823      	ldrb	r3, [r4, #0]
 8008236:	2b2e      	cmp	r3, #46	@ 0x2e
 8008238:	d10a      	bne.n	8008250 <_svfiprintf_r+0x130>
 800823a:	7863      	ldrb	r3, [r4, #1]
 800823c:	2b2a      	cmp	r3, #42	@ 0x2a
 800823e:	d132      	bne.n	80082a6 <_svfiprintf_r+0x186>
 8008240:	9b03      	ldr	r3, [sp, #12]
 8008242:	1d1a      	adds	r2, r3, #4
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	9203      	str	r2, [sp, #12]
 8008248:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800824c:	3402      	adds	r4, #2
 800824e:	9305      	str	r3, [sp, #20]
 8008250:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008314 <_svfiprintf_r+0x1f4>
 8008254:	7821      	ldrb	r1, [r4, #0]
 8008256:	2203      	movs	r2, #3
 8008258:	4650      	mov	r0, sl
 800825a:	f7f7 ffb9 	bl	80001d0 <memchr>
 800825e:	b138      	cbz	r0, 8008270 <_svfiprintf_r+0x150>
 8008260:	9b04      	ldr	r3, [sp, #16]
 8008262:	eba0 000a 	sub.w	r0, r0, sl
 8008266:	2240      	movs	r2, #64	@ 0x40
 8008268:	4082      	lsls	r2, r0
 800826a:	4313      	orrs	r3, r2
 800826c:	3401      	adds	r4, #1
 800826e:	9304      	str	r3, [sp, #16]
 8008270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008274:	4824      	ldr	r0, [pc, #144]	@ (8008308 <_svfiprintf_r+0x1e8>)
 8008276:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800827a:	2206      	movs	r2, #6
 800827c:	f7f7 ffa8 	bl	80001d0 <memchr>
 8008280:	2800      	cmp	r0, #0
 8008282:	d036      	beq.n	80082f2 <_svfiprintf_r+0x1d2>
 8008284:	4b21      	ldr	r3, [pc, #132]	@ (800830c <_svfiprintf_r+0x1ec>)
 8008286:	bb1b      	cbnz	r3, 80082d0 <_svfiprintf_r+0x1b0>
 8008288:	9b03      	ldr	r3, [sp, #12]
 800828a:	3307      	adds	r3, #7
 800828c:	f023 0307 	bic.w	r3, r3, #7
 8008290:	3308      	adds	r3, #8
 8008292:	9303      	str	r3, [sp, #12]
 8008294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008296:	4433      	add	r3, r6
 8008298:	9309      	str	r3, [sp, #36]	@ 0x24
 800829a:	e76a      	b.n	8008172 <_svfiprintf_r+0x52>
 800829c:	fb0c 3202 	mla	r2, ip, r2, r3
 80082a0:	460c      	mov	r4, r1
 80082a2:	2001      	movs	r0, #1
 80082a4:	e7a8      	b.n	80081f8 <_svfiprintf_r+0xd8>
 80082a6:	2300      	movs	r3, #0
 80082a8:	3401      	adds	r4, #1
 80082aa:	9305      	str	r3, [sp, #20]
 80082ac:	4619      	mov	r1, r3
 80082ae:	f04f 0c0a 	mov.w	ip, #10
 80082b2:	4620      	mov	r0, r4
 80082b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082b8:	3a30      	subs	r2, #48	@ 0x30
 80082ba:	2a09      	cmp	r2, #9
 80082bc:	d903      	bls.n	80082c6 <_svfiprintf_r+0x1a6>
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d0c6      	beq.n	8008250 <_svfiprintf_r+0x130>
 80082c2:	9105      	str	r1, [sp, #20]
 80082c4:	e7c4      	b.n	8008250 <_svfiprintf_r+0x130>
 80082c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80082ca:	4604      	mov	r4, r0
 80082cc:	2301      	movs	r3, #1
 80082ce:	e7f0      	b.n	80082b2 <_svfiprintf_r+0x192>
 80082d0:	ab03      	add	r3, sp, #12
 80082d2:	9300      	str	r3, [sp, #0]
 80082d4:	462a      	mov	r2, r5
 80082d6:	4b0e      	ldr	r3, [pc, #56]	@ (8008310 <_svfiprintf_r+0x1f0>)
 80082d8:	a904      	add	r1, sp, #16
 80082da:	4638      	mov	r0, r7
 80082dc:	f3af 8000 	nop.w
 80082e0:	1c42      	adds	r2, r0, #1
 80082e2:	4606      	mov	r6, r0
 80082e4:	d1d6      	bne.n	8008294 <_svfiprintf_r+0x174>
 80082e6:	89ab      	ldrh	r3, [r5, #12]
 80082e8:	065b      	lsls	r3, r3, #25
 80082ea:	f53f af2d 	bmi.w	8008148 <_svfiprintf_r+0x28>
 80082ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082f0:	e72c      	b.n	800814c <_svfiprintf_r+0x2c>
 80082f2:	ab03      	add	r3, sp, #12
 80082f4:	9300      	str	r3, [sp, #0]
 80082f6:	462a      	mov	r2, r5
 80082f8:	4b05      	ldr	r3, [pc, #20]	@ (8008310 <_svfiprintf_r+0x1f0>)
 80082fa:	a904      	add	r1, sp, #16
 80082fc:	4638      	mov	r0, r7
 80082fe:	f000 f9bb 	bl	8008678 <_printf_i>
 8008302:	e7ed      	b.n	80082e0 <_svfiprintf_r+0x1c0>
 8008304:	08008fcd 	.word	0x08008fcd
 8008308:	08008fd7 	.word	0x08008fd7
 800830c:	00000000 	.word	0x00000000
 8008310:	08008069 	.word	0x08008069
 8008314:	08008fd3 	.word	0x08008fd3

08008318 <__sfputc_r>:
 8008318:	6893      	ldr	r3, [r2, #8]
 800831a:	3b01      	subs	r3, #1
 800831c:	2b00      	cmp	r3, #0
 800831e:	b410      	push	{r4}
 8008320:	6093      	str	r3, [r2, #8]
 8008322:	da08      	bge.n	8008336 <__sfputc_r+0x1e>
 8008324:	6994      	ldr	r4, [r2, #24]
 8008326:	42a3      	cmp	r3, r4
 8008328:	db01      	blt.n	800832e <__sfputc_r+0x16>
 800832a:	290a      	cmp	r1, #10
 800832c:	d103      	bne.n	8008336 <__sfputc_r+0x1e>
 800832e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008332:	f7ff bc82 	b.w	8007c3a <__swbuf_r>
 8008336:	6813      	ldr	r3, [r2, #0]
 8008338:	1c58      	adds	r0, r3, #1
 800833a:	6010      	str	r0, [r2, #0]
 800833c:	7019      	strb	r1, [r3, #0]
 800833e:	4608      	mov	r0, r1
 8008340:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008344:	4770      	bx	lr

08008346 <__sfputs_r>:
 8008346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008348:	4606      	mov	r6, r0
 800834a:	460f      	mov	r7, r1
 800834c:	4614      	mov	r4, r2
 800834e:	18d5      	adds	r5, r2, r3
 8008350:	42ac      	cmp	r4, r5
 8008352:	d101      	bne.n	8008358 <__sfputs_r+0x12>
 8008354:	2000      	movs	r0, #0
 8008356:	e007      	b.n	8008368 <__sfputs_r+0x22>
 8008358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800835c:	463a      	mov	r2, r7
 800835e:	4630      	mov	r0, r6
 8008360:	f7ff ffda 	bl	8008318 <__sfputc_r>
 8008364:	1c43      	adds	r3, r0, #1
 8008366:	d1f3      	bne.n	8008350 <__sfputs_r+0xa>
 8008368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800836c <_vfiprintf_r>:
 800836c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008370:	460d      	mov	r5, r1
 8008372:	b09d      	sub	sp, #116	@ 0x74
 8008374:	4614      	mov	r4, r2
 8008376:	4698      	mov	r8, r3
 8008378:	4606      	mov	r6, r0
 800837a:	b118      	cbz	r0, 8008384 <_vfiprintf_r+0x18>
 800837c:	6a03      	ldr	r3, [r0, #32]
 800837e:	b90b      	cbnz	r3, 8008384 <_vfiprintf_r+0x18>
 8008380:	f7ff fb3e 	bl	8007a00 <__sinit>
 8008384:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008386:	07d9      	lsls	r1, r3, #31
 8008388:	d405      	bmi.n	8008396 <_vfiprintf_r+0x2a>
 800838a:	89ab      	ldrh	r3, [r5, #12]
 800838c:	059a      	lsls	r2, r3, #22
 800838e:	d402      	bmi.n	8008396 <_vfiprintf_r+0x2a>
 8008390:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008392:	f7ff fd60 	bl	8007e56 <__retarget_lock_acquire_recursive>
 8008396:	89ab      	ldrh	r3, [r5, #12]
 8008398:	071b      	lsls	r3, r3, #28
 800839a:	d501      	bpl.n	80083a0 <_vfiprintf_r+0x34>
 800839c:	692b      	ldr	r3, [r5, #16]
 800839e:	b99b      	cbnz	r3, 80083c8 <_vfiprintf_r+0x5c>
 80083a0:	4629      	mov	r1, r5
 80083a2:	4630      	mov	r0, r6
 80083a4:	f7ff fc88 	bl	8007cb8 <__swsetup_r>
 80083a8:	b170      	cbz	r0, 80083c8 <_vfiprintf_r+0x5c>
 80083aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083ac:	07dc      	lsls	r4, r3, #31
 80083ae:	d504      	bpl.n	80083ba <_vfiprintf_r+0x4e>
 80083b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80083b4:	b01d      	add	sp, #116	@ 0x74
 80083b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ba:	89ab      	ldrh	r3, [r5, #12]
 80083bc:	0598      	lsls	r0, r3, #22
 80083be:	d4f7      	bmi.n	80083b0 <_vfiprintf_r+0x44>
 80083c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083c2:	f7ff fd49 	bl	8007e58 <__retarget_lock_release_recursive>
 80083c6:	e7f3      	b.n	80083b0 <_vfiprintf_r+0x44>
 80083c8:	2300      	movs	r3, #0
 80083ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80083cc:	2320      	movs	r3, #32
 80083ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80083d6:	2330      	movs	r3, #48	@ 0x30
 80083d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008588 <_vfiprintf_r+0x21c>
 80083dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80083e0:	f04f 0901 	mov.w	r9, #1
 80083e4:	4623      	mov	r3, r4
 80083e6:	469a      	mov	sl, r3
 80083e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083ec:	b10a      	cbz	r2, 80083f2 <_vfiprintf_r+0x86>
 80083ee:	2a25      	cmp	r2, #37	@ 0x25
 80083f0:	d1f9      	bne.n	80083e6 <_vfiprintf_r+0x7a>
 80083f2:	ebba 0b04 	subs.w	fp, sl, r4
 80083f6:	d00b      	beq.n	8008410 <_vfiprintf_r+0xa4>
 80083f8:	465b      	mov	r3, fp
 80083fa:	4622      	mov	r2, r4
 80083fc:	4629      	mov	r1, r5
 80083fe:	4630      	mov	r0, r6
 8008400:	f7ff ffa1 	bl	8008346 <__sfputs_r>
 8008404:	3001      	adds	r0, #1
 8008406:	f000 80a7 	beq.w	8008558 <_vfiprintf_r+0x1ec>
 800840a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800840c:	445a      	add	r2, fp
 800840e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008410:	f89a 3000 	ldrb.w	r3, [sl]
 8008414:	2b00      	cmp	r3, #0
 8008416:	f000 809f 	beq.w	8008558 <_vfiprintf_r+0x1ec>
 800841a:	2300      	movs	r3, #0
 800841c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008420:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008424:	f10a 0a01 	add.w	sl, sl, #1
 8008428:	9304      	str	r3, [sp, #16]
 800842a:	9307      	str	r3, [sp, #28]
 800842c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008430:	931a      	str	r3, [sp, #104]	@ 0x68
 8008432:	4654      	mov	r4, sl
 8008434:	2205      	movs	r2, #5
 8008436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800843a:	4853      	ldr	r0, [pc, #332]	@ (8008588 <_vfiprintf_r+0x21c>)
 800843c:	f7f7 fec8 	bl	80001d0 <memchr>
 8008440:	9a04      	ldr	r2, [sp, #16]
 8008442:	b9d8      	cbnz	r0, 800847c <_vfiprintf_r+0x110>
 8008444:	06d1      	lsls	r1, r2, #27
 8008446:	bf44      	itt	mi
 8008448:	2320      	movmi	r3, #32
 800844a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800844e:	0713      	lsls	r3, r2, #28
 8008450:	bf44      	itt	mi
 8008452:	232b      	movmi	r3, #43	@ 0x2b
 8008454:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008458:	f89a 3000 	ldrb.w	r3, [sl]
 800845c:	2b2a      	cmp	r3, #42	@ 0x2a
 800845e:	d015      	beq.n	800848c <_vfiprintf_r+0x120>
 8008460:	9a07      	ldr	r2, [sp, #28]
 8008462:	4654      	mov	r4, sl
 8008464:	2000      	movs	r0, #0
 8008466:	f04f 0c0a 	mov.w	ip, #10
 800846a:	4621      	mov	r1, r4
 800846c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008470:	3b30      	subs	r3, #48	@ 0x30
 8008472:	2b09      	cmp	r3, #9
 8008474:	d94b      	bls.n	800850e <_vfiprintf_r+0x1a2>
 8008476:	b1b0      	cbz	r0, 80084a6 <_vfiprintf_r+0x13a>
 8008478:	9207      	str	r2, [sp, #28]
 800847a:	e014      	b.n	80084a6 <_vfiprintf_r+0x13a>
 800847c:	eba0 0308 	sub.w	r3, r0, r8
 8008480:	fa09 f303 	lsl.w	r3, r9, r3
 8008484:	4313      	orrs	r3, r2
 8008486:	9304      	str	r3, [sp, #16]
 8008488:	46a2      	mov	sl, r4
 800848a:	e7d2      	b.n	8008432 <_vfiprintf_r+0xc6>
 800848c:	9b03      	ldr	r3, [sp, #12]
 800848e:	1d19      	adds	r1, r3, #4
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	9103      	str	r1, [sp, #12]
 8008494:	2b00      	cmp	r3, #0
 8008496:	bfbb      	ittet	lt
 8008498:	425b      	neglt	r3, r3
 800849a:	f042 0202 	orrlt.w	r2, r2, #2
 800849e:	9307      	strge	r3, [sp, #28]
 80084a0:	9307      	strlt	r3, [sp, #28]
 80084a2:	bfb8      	it	lt
 80084a4:	9204      	strlt	r2, [sp, #16]
 80084a6:	7823      	ldrb	r3, [r4, #0]
 80084a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80084aa:	d10a      	bne.n	80084c2 <_vfiprintf_r+0x156>
 80084ac:	7863      	ldrb	r3, [r4, #1]
 80084ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80084b0:	d132      	bne.n	8008518 <_vfiprintf_r+0x1ac>
 80084b2:	9b03      	ldr	r3, [sp, #12]
 80084b4:	1d1a      	adds	r2, r3, #4
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	9203      	str	r2, [sp, #12]
 80084ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084be:	3402      	adds	r4, #2
 80084c0:	9305      	str	r3, [sp, #20]
 80084c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008598 <_vfiprintf_r+0x22c>
 80084c6:	7821      	ldrb	r1, [r4, #0]
 80084c8:	2203      	movs	r2, #3
 80084ca:	4650      	mov	r0, sl
 80084cc:	f7f7 fe80 	bl	80001d0 <memchr>
 80084d0:	b138      	cbz	r0, 80084e2 <_vfiprintf_r+0x176>
 80084d2:	9b04      	ldr	r3, [sp, #16]
 80084d4:	eba0 000a 	sub.w	r0, r0, sl
 80084d8:	2240      	movs	r2, #64	@ 0x40
 80084da:	4082      	lsls	r2, r0
 80084dc:	4313      	orrs	r3, r2
 80084de:	3401      	adds	r4, #1
 80084e0:	9304      	str	r3, [sp, #16]
 80084e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084e6:	4829      	ldr	r0, [pc, #164]	@ (800858c <_vfiprintf_r+0x220>)
 80084e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80084ec:	2206      	movs	r2, #6
 80084ee:	f7f7 fe6f 	bl	80001d0 <memchr>
 80084f2:	2800      	cmp	r0, #0
 80084f4:	d03f      	beq.n	8008576 <_vfiprintf_r+0x20a>
 80084f6:	4b26      	ldr	r3, [pc, #152]	@ (8008590 <_vfiprintf_r+0x224>)
 80084f8:	bb1b      	cbnz	r3, 8008542 <_vfiprintf_r+0x1d6>
 80084fa:	9b03      	ldr	r3, [sp, #12]
 80084fc:	3307      	adds	r3, #7
 80084fe:	f023 0307 	bic.w	r3, r3, #7
 8008502:	3308      	adds	r3, #8
 8008504:	9303      	str	r3, [sp, #12]
 8008506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008508:	443b      	add	r3, r7
 800850a:	9309      	str	r3, [sp, #36]	@ 0x24
 800850c:	e76a      	b.n	80083e4 <_vfiprintf_r+0x78>
 800850e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008512:	460c      	mov	r4, r1
 8008514:	2001      	movs	r0, #1
 8008516:	e7a8      	b.n	800846a <_vfiprintf_r+0xfe>
 8008518:	2300      	movs	r3, #0
 800851a:	3401      	adds	r4, #1
 800851c:	9305      	str	r3, [sp, #20]
 800851e:	4619      	mov	r1, r3
 8008520:	f04f 0c0a 	mov.w	ip, #10
 8008524:	4620      	mov	r0, r4
 8008526:	f810 2b01 	ldrb.w	r2, [r0], #1
 800852a:	3a30      	subs	r2, #48	@ 0x30
 800852c:	2a09      	cmp	r2, #9
 800852e:	d903      	bls.n	8008538 <_vfiprintf_r+0x1cc>
 8008530:	2b00      	cmp	r3, #0
 8008532:	d0c6      	beq.n	80084c2 <_vfiprintf_r+0x156>
 8008534:	9105      	str	r1, [sp, #20]
 8008536:	e7c4      	b.n	80084c2 <_vfiprintf_r+0x156>
 8008538:	fb0c 2101 	mla	r1, ip, r1, r2
 800853c:	4604      	mov	r4, r0
 800853e:	2301      	movs	r3, #1
 8008540:	e7f0      	b.n	8008524 <_vfiprintf_r+0x1b8>
 8008542:	ab03      	add	r3, sp, #12
 8008544:	9300      	str	r3, [sp, #0]
 8008546:	462a      	mov	r2, r5
 8008548:	4b12      	ldr	r3, [pc, #72]	@ (8008594 <_vfiprintf_r+0x228>)
 800854a:	a904      	add	r1, sp, #16
 800854c:	4630      	mov	r0, r6
 800854e:	f3af 8000 	nop.w
 8008552:	4607      	mov	r7, r0
 8008554:	1c78      	adds	r0, r7, #1
 8008556:	d1d6      	bne.n	8008506 <_vfiprintf_r+0x19a>
 8008558:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800855a:	07d9      	lsls	r1, r3, #31
 800855c:	d405      	bmi.n	800856a <_vfiprintf_r+0x1fe>
 800855e:	89ab      	ldrh	r3, [r5, #12]
 8008560:	059a      	lsls	r2, r3, #22
 8008562:	d402      	bmi.n	800856a <_vfiprintf_r+0x1fe>
 8008564:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008566:	f7ff fc77 	bl	8007e58 <__retarget_lock_release_recursive>
 800856a:	89ab      	ldrh	r3, [r5, #12]
 800856c:	065b      	lsls	r3, r3, #25
 800856e:	f53f af1f 	bmi.w	80083b0 <_vfiprintf_r+0x44>
 8008572:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008574:	e71e      	b.n	80083b4 <_vfiprintf_r+0x48>
 8008576:	ab03      	add	r3, sp, #12
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	462a      	mov	r2, r5
 800857c:	4b05      	ldr	r3, [pc, #20]	@ (8008594 <_vfiprintf_r+0x228>)
 800857e:	a904      	add	r1, sp, #16
 8008580:	4630      	mov	r0, r6
 8008582:	f000 f879 	bl	8008678 <_printf_i>
 8008586:	e7e4      	b.n	8008552 <_vfiprintf_r+0x1e6>
 8008588:	08008fcd 	.word	0x08008fcd
 800858c:	08008fd7 	.word	0x08008fd7
 8008590:	00000000 	.word	0x00000000
 8008594:	08008347 	.word	0x08008347
 8008598:	08008fd3 	.word	0x08008fd3

0800859c <_printf_common>:
 800859c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085a0:	4616      	mov	r6, r2
 80085a2:	4698      	mov	r8, r3
 80085a4:	688a      	ldr	r2, [r1, #8]
 80085a6:	690b      	ldr	r3, [r1, #16]
 80085a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80085ac:	4293      	cmp	r3, r2
 80085ae:	bfb8      	it	lt
 80085b0:	4613      	movlt	r3, r2
 80085b2:	6033      	str	r3, [r6, #0]
 80085b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80085b8:	4607      	mov	r7, r0
 80085ba:	460c      	mov	r4, r1
 80085bc:	b10a      	cbz	r2, 80085c2 <_printf_common+0x26>
 80085be:	3301      	adds	r3, #1
 80085c0:	6033      	str	r3, [r6, #0]
 80085c2:	6823      	ldr	r3, [r4, #0]
 80085c4:	0699      	lsls	r1, r3, #26
 80085c6:	bf42      	ittt	mi
 80085c8:	6833      	ldrmi	r3, [r6, #0]
 80085ca:	3302      	addmi	r3, #2
 80085cc:	6033      	strmi	r3, [r6, #0]
 80085ce:	6825      	ldr	r5, [r4, #0]
 80085d0:	f015 0506 	ands.w	r5, r5, #6
 80085d4:	d106      	bne.n	80085e4 <_printf_common+0x48>
 80085d6:	f104 0a19 	add.w	sl, r4, #25
 80085da:	68e3      	ldr	r3, [r4, #12]
 80085dc:	6832      	ldr	r2, [r6, #0]
 80085de:	1a9b      	subs	r3, r3, r2
 80085e0:	42ab      	cmp	r3, r5
 80085e2:	dc26      	bgt.n	8008632 <_printf_common+0x96>
 80085e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80085e8:	6822      	ldr	r2, [r4, #0]
 80085ea:	3b00      	subs	r3, #0
 80085ec:	bf18      	it	ne
 80085ee:	2301      	movne	r3, #1
 80085f0:	0692      	lsls	r2, r2, #26
 80085f2:	d42b      	bmi.n	800864c <_printf_common+0xb0>
 80085f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80085f8:	4641      	mov	r1, r8
 80085fa:	4638      	mov	r0, r7
 80085fc:	47c8      	blx	r9
 80085fe:	3001      	adds	r0, #1
 8008600:	d01e      	beq.n	8008640 <_printf_common+0xa4>
 8008602:	6823      	ldr	r3, [r4, #0]
 8008604:	6922      	ldr	r2, [r4, #16]
 8008606:	f003 0306 	and.w	r3, r3, #6
 800860a:	2b04      	cmp	r3, #4
 800860c:	bf02      	ittt	eq
 800860e:	68e5      	ldreq	r5, [r4, #12]
 8008610:	6833      	ldreq	r3, [r6, #0]
 8008612:	1aed      	subeq	r5, r5, r3
 8008614:	68a3      	ldr	r3, [r4, #8]
 8008616:	bf0c      	ite	eq
 8008618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800861c:	2500      	movne	r5, #0
 800861e:	4293      	cmp	r3, r2
 8008620:	bfc4      	itt	gt
 8008622:	1a9b      	subgt	r3, r3, r2
 8008624:	18ed      	addgt	r5, r5, r3
 8008626:	2600      	movs	r6, #0
 8008628:	341a      	adds	r4, #26
 800862a:	42b5      	cmp	r5, r6
 800862c:	d11a      	bne.n	8008664 <_printf_common+0xc8>
 800862e:	2000      	movs	r0, #0
 8008630:	e008      	b.n	8008644 <_printf_common+0xa8>
 8008632:	2301      	movs	r3, #1
 8008634:	4652      	mov	r2, sl
 8008636:	4641      	mov	r1, r8
 8008638:	4638      	mov	r0, r7
 800863a:	47c8      	blx	r9
 800863c:	3001      	adds	r0, #1
 800863e:	d103      	bne.n	8008648 <_printf_common+0xac>
 8008640:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008648:	3501      	adds	r5, #1
 800864a:	e7c6      	b.n	80085da <_printf_common+0x3e>
 800864c:	18e1      	adds	r1, r4, r3
 800864e:	1c5a      	adds	r2, r3, #1
 8008650:	2030      	movs	r0, #48	@ 0x30
 8008652:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008656:	4422      	add	r2, r4
 8008658:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800865c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008660:	3302      	adds	r3, #2
 8008662:	e7c7      	b.n	80085f4 <_printf_common+0x58>
 8008664:	2301      	movs	r3, #1
 8008666:	4622      	mov	r2, r4
 8008668:	4641      	mov	r1, r8
 800866a:	4638      	mov	r0, r7
 800866c:	47c8      	blx	r9
 800866e:	3001      	adds	r0, #1
 8008670:	d0e6      	beq.n	8008640 <_printf_common+0xa4>
 8008672:	3601      	adds	r6, #1
 8008674:	e7d9      	b.n	800862a <_printf_common+0x8e>
	...

08008678 <_printf_i>:
 8008678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800867c:	7e0f      	ldrb	r7, [r1, #24]
 800867e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008680:	2f78      	cmp	r7, #120	@ 0x78
 8008682:	4691      	mov	r9, r2
 8008684:	4680      	mov	r8, r0
 8008686:	460c      	mov	r4, r1
 8008688:	469a      	mov	sl, r3
 800868a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800868e:	d807      	bhi.n	80086a0 <_printf_i+0x28>
 8008690:	2f62      	cmp	r7, #98	@ 0x62
 8008692:	d80a      	bhi.n	80086aa <_printf_i+0x32>
 8008694:	2f00      	cmp	r7, #0
 8008696:	f000 80d2 	beq.w	800883e <_printf_i+0x1c6>
 800869a:	2f58      	cmp	r7, #88	@ 0x58
 800869c:	f000 80b9 	beq.w	8008812 <_printf_i+0x19a>
 80086a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80086a8:	e03a      	b.n	8008720 <_printf_i+0xa8>
 80086aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80086ae:	2b15      	cmp	r3, #21
 80086b0:	d8f6      	bhi.n	80086a0 <_printf_i+0x28>
 80086b2:	a101      	add	r1, pc, #4	@ (adr r1, 80086b8 <_printf_i+0x40>)
 80086b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086b8:	08008711 	.word	0x08008711
 80086bc:	08008725 	.word	0x08008725
 80086c0:	080086a1 	.word	0x080086a1
 80086c4:	080086a1 	.word	0x080086a1
 80086c8:	080086a1 	.word	0x080086a1
 80086cc:	080086a1 	.word	0x080086a1
 80086d0:	08008725 	.word	0x08008725
 80086d4:	080086a1 	.word	0x080086a1
 80086d8:	080086a1 	.word	0x080086a1
 80086dc:	080086a1 	.word	0x080086a1
 80086e0:	080086a1 	.word	0x080086a1
 80086e4:	08008825 	.word	0x08008825
 80086e8:	0800874f 	.word	0x0800874f
 80086ec:	080087df 	.word	0x080087df
 80086f0:	080086a1 	.word	0x080086a1
 80086f4:	080086a1 	.word	0x080086a1
 80086f8:	08008847 	.word	0x08008847
 80086fc:	080086a1 	.word	0x080086a1
 8008700:	0800874f 	.word	0x0800874f
 8008704:	080086a1 	.word	0x080086a1
 8008708:	080086a1 	.word	0x080086a1
 800870c:	080087e7 	.word	0x080087e7
 8008710:	6833      	ldr	r3, [r6, #0]
 8008712:	1d1a      	adds	r2, r3, #4
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	6032      	str	r2, [r6, #0]
 8008718:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800871c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008720:	2301      	movs	r3, #1
 8008722:	e09d      	b.n	8008860 <_printf_i+0x1e8>
 8008724:	6833      	ldr	r3, [r6, #0]
 8008726:	6820      	ldr	r0, [r4, #0]
 8008728:	1d19      	adds	r1, r3, #4
 800872a:	6031      	str	r1, [r6, #0]
 800872c:	0606      	lsls	r6, r0, #24
 800872e:	d501      	bpl.n	8008734 <_printf_i+0xbc>
 8008730:	681d      	ldr	r5, [r3, #0]
 8008732:	e003      	b.n	800873c <_printf_i+0xc4>
 8008734:	0645      	lsls	r5, r0, #25
 8008736:	d5fb      	bpl.n	8008730 <_printf_i+0xb8>
 8008738:	f9b3 5000 	ldrsh.w	r5, [r3]
 800873c:	2d00      	cmp	r5, #0
 800873e:	da03      	bge.n	8008748 <_printf_i+0xd0>
 8008740:	232d      	movs	r3, #45	@ 0x2d
 8008742:	426d      	negs	r5, r5
 8008744:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008748:	4859      	ldr	r0, [pc, #356]	@ (80088b0 <_printf_i+0x238>)
 800874a:	230a      	movs	r3, #10
 800874c:	e011      	b.n	8008772 <_printf_i+0xfa>
 800874e:	6821      	ldr	r1, [r4, #0]
 8008750:	6833      	ldr	r3, [r6, #0]
 8008752:	0608      	lsls	r0, r1, #24
 8008754:	f853 5b04 	ldr.w	r5, [r3], #4
 8008758:	d402      	bmi.n	8008760 <_printf_i+0xe8>
 800875a:	0649      	lsls	r1, r1, #25
 800875c:	bf48      	it	mi
 800875e:	b2ad      	uxthmi	r5, r5
 8008760:	2f6f      	cmp	r7, #111	@ 0x6f
 8008762:	4853      	ldr	r0, [pc, #332]	@ (80088b0 <_printf_i+0x238>)
 8008764:	6033      	str	r3, [r6, #0]
 8008766:	bf14      	ite	ne
 8008768:	230a      	movne	r3, #10
 800876a:	2308      	moveq	r3, #8
 800876c:	2100      	movs	r1, #0
 800876e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008772:	6866      	ldr	r6, [r4, #4]
 8008774:	60a6      	str	r6, [r4, #8]
 8008776:	2e00      	cmp	r6, #0
 8008778:	bfa2      	ittt	ge
 800877a:	6821      	ldrge	r1, [r4, #0]
 800877c:	f021 0104 	bicge.w	r1, r1, #4
 8008780:	6021      	strge	r1, [r4, #0]
 8008782:	b90d      	cbnz	r5, 8008788 <_printf_i+0x110>
 8008784:	2e00      	cmp	r6, #0
 8008786:	d04b      	beq.n	8008820 <_printf_i+0x1a8>
 8008788:	4616      	mov	r6, r2
 800878a:	fbb5 f1f3 	udiv	r1, r5, r3
 800878e:	fb03 5711 	mls	r7, r3, r1, r5
 8008792:	5dc7      	ldrb	r7, [r0, r7]
 8008794:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008798:	462f      	mov	r7, r5
 800879a:	42bb      	cmp	r3, r7
 800879c:	460d      	mov	r5, r1
 800879e:	d9f4      	bls.n	800878a <_printf_i+0x112>
 80087a0:	2b08      	cmp	r3, #8
 80087a2:	d10b      	bne.n	80087bc <_printf_i+0x144>
 80087a4:	6823      	ldr	r3, [r4, #0]
 80087a6:	07df      	lsls	r7, r3, #31
 80087a8:	d508      	bpl.n	80087bc <_printf_i+0x144>
 80087aa:	6923      	ldr	r3, [r4, #16]
 80087ac:	6861      	ldr	r1, [r4, #4]
 80087ae:	4299      	cmp	r1, r3
 80087b0:	bfde      	ittt	le
 80087b2:	2330      	movle	r3, #48	@ 0x30
 80087b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80087b8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80087bc:	1b92      	subs	r2, r2, r6
 80087be:	6122      	str	r2, [r4, #16]
 80087c0:	f8cd a000 	str.w	sl, [sp]
 80087c4:	464b      	mov	r3, r9
 80087c6:	aa03      	add	r2, sp, #12
 80087c8:	4621      	mov	r1, r4
 80087ca:	4640      	mov	r0, r8
 80087cc:	f7ff fee6 	bl	800859c <_printf_common>
 80087d0:	3001      	adds	r0, #1
 80087d2:	d14a      	bne.n	800886a <_printf_i+0x1f2>
 80087d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087d8:	b004      	add	sp, #16
 80087da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087de:	6823      	ldr	r3, [r4, #0]
 80087e0:	f043 0320 	orr.w	r3, r3, #32
 80087e4:	6023      	str	r3, [r4, #0]
 80087e6:	4833      	ldr	r0, [pc, #204]	@ (80088b4 <_printf_i+0x23c>)
 80087e8:	2778      	movs	r7, #120	@ 0x78
 80087ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80087ee:	6823      	ldr	r3, [r4, #0]
 80087f0:	6831      	ldr	r1, [r6, #0]
 80087f2:	061f      	lsls	r7, r3, #24
 80087f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80087f8:	d402      	bmi.n	8008800 <_printf_i+0x188>
 80087fa:	065f      	lsls	r7, r3, #25
 80087fc:	bf48      	it	mi
 80087fe:	b2ad      	uxthmi	r5, r5
 8008800:	6031      	str	r1, [r6, #0]
 8008802:	07d9      	lsls	r1, r3, #31
 8008804:	bf44      	itt	mi
 8008806:	f043 0320 	orrmi.w	r3, r3, #32
 800880a:	6023      	strmi	r3, [r4, #0]
 800880c:	b11d      	cbz	r5, 8008816 <_printf_i+0x19e>
 800880e:	2310      	movs	r3, #16
 8008810:	e7ac      	b.n	800876c <_printf_i+0xf4>
 8008812:	4827      	ldr	r0, [pc, #156]	@ (80088b0 <_printf_i+0x238>)
 8008814:	e7e9      	b.n	80087ea <_printf_i+0x172>
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	f023 0320 	bic.w	r3, r3, #32
 800881c:	6023      	str	r3, [r4, #0]
 800881e:	e7f6      	b.n	800880e <_printf_i+0x196>
 8008820:	4616      	mov	r6, r2
 8008822:	e7bd      	b.n	80087a0 <_printf_i+0x128>
 8008824:	6833      	ldr	r3, [r6, #0]
 8008826:	6825      	ldr	r5, [r4, #0]
 8008828:	6961      	ldr	r1, [r4, #20]
 800882a:	1d18      	adds	r0, r3, #4
 800882c:	6030      	str	r0, [r6, #0]
 800882e:	062e      	lsls	r6, r5, #24
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	d501      	bpl.n	8008838 <_printf_i+0x1c0>
 8008834:	6019      	str	r1, [r3, #0]
 8008836:	e002      	b.n	800883e <_printf_i+0x1c6>
 8008838:	0668      	lsls	r0, r5, #25
 800883a:	d5fb      	bpl.n	8008834 <_printf_i+0x1bc>
 800883c:	8019      	strh	r1, [r3, #0]
 800883e:	2300      	movs	r3, #0
 8008840:	6123      	str	r3, [r4, #16]
 8008842:	4616      	mov	r6, r2
 8008844:	e7bc      	b.n	80087c0 <_printf_i+0x148>
 8008846:	6833      	ldr	r3, [r6, #0]
 8008848:	1d1a      	adds	r2, r3, #4
 800884a:	6032      	str	r2, [r6, #0]
 800884c:	681e      	ldr	r6, [r3, #0]
 800884e:	6862      	ldr	r2, [r4, #4]
 8008850:	2100      	movs	r1, #0
 8008852:	4630      	mov	r0, r6
 8008854:	f7f7 fcbc 	bl	80001d0 <memchr>
 8008858:	b108      	cbz	r0, 800885e <_printf_i+0x1e6>
 800885a:	1b80      	subs	r0, r0, r6
 800885c:	6060      	str	r0, [r4, #4]
 800885e:	6863      	ldr	r3, [r4, #4]
 8008860:	6123      	str	r3, [r4, #16]
 8008862:	2300      	movs	r3, #0
 8008864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008868:	e7aa      	b.n	80087c0 <_printf_i+0x148>
 800886a:	6923      	ldr	r3, [r4, #16]
 800886c:	4632      	mov	r2, r6
 800886e:	4649      	mov	r1, r9
 8008870:	4640      	mov	r0, r8
 8008872:	47d0      	blx	sl
 8008874:	3001      	adds	r0, #1
 8008876:	d0ad      	beq.n	80087d4 <_printf_i+0x15c>
 8008878:	6823      	ldr	r3, [r4, #0]
 800887a:	079b      	lsls	r3, r3, #30
 800887c:	d413      	bmi.n	80088a6 <_printf_i+0x22e>
 800887e:	68e0      	ldr	r0, [r4, #12]
 8008880:	9b03      	ldr	r3, [sp, #12]
 8008882:	4298      	cmp	r0, r3
 8008884:	bfb8      	it	lt
 8008886:	4618      	movlt	r0, r3
 8008888:	e7a6      	b.n	80087d8 <_printf_i+0x160>
 800888a:	2301      	movs	r3, #1
 800888c:	4632      	mov	r2, r6
 800888e:	4649      	mov	r1, r9
 8008890:	4640      	mov	r0, r8
 8008892:	47d0      	blx	sl
 8008894:	3001      	adds	r0, #1
 8008896:	d09d      	beq.n	80087d4 <_printf_i+0x15c>
 8008898:	3501      	adds	r5, #1
 800889a:	68e3      	ldr	r3, [r4, #12]
 800889c:	9903      	ldr	r1, [sp, #12]
 800889e:	1a5b      	subs	r3, r3, r1
 80088a0:	42ab      	cmp	r3, r5
 80088a2:	dcf2      	bgt.n	800888a <_printf_i+0x212>
 80088a4:	e7eb      	b.n	800887e <_printf_i+0x206>
 80088a6:	2500      	movs	r5, #0
 80088a8:	f104 0619 	add.w	r6, r4, #25
 80088ac:	e7f5      	b.n	800889a <_printf_i+0x222>
 80088ae:	bf00      	nop
 80088b0:	08008fde 	.word	0x08008fde
 80088b4:	08008fef 	.word	0x08008fef

080088b8 <__sflush_r>:
 80088b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088c0:	0716      	lsls	r6, r2, #28
 80088c2:	4605      	mov	r5, r0
 80088c4:	460c      	mov	r4, r1
 80088c6:	d454      	bmi.n	8008972 <__sflush_r+0xba>
 80088c8:	684b      	ldr	r3, [r1, #4]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	dc02      	bgt.n	80088d4 <__sflush_r+0x1c>
 80088ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	dd48      	ble.n	8008966 <__sflush_r+0xae>
 80088d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088d6:	2e00      	cmp	r6, #0
 80088d8:	d045      	beq.n	8008966 <__sflush_r+0xae>
 80088da:	2300      	movs	r3, #0
 80088dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80088e0:	682f      	ldr	r7, [r5, #0]
 80088e2:	6a21      	ldr	r1, [r4, #32]
 80088e4:	602b      	str	r3, [r5, #0]
 80088e6:	d030      	beq.n	800894a <__sflush_r+0x92>
 80088e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80088ea:	89a3      	ldrh	r3, [r4, #12]
 80088ec:	0759      	lsls	r1, r3, #29
 80088ee:	d505      	bpl.n	80088fc <__sflush_r+0x44>
 80088f0:	6863      	ldr	r3, [r4, #4]
 80088f2:	1ad2      	subs	r2, r2, r3
 80088f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80088f6:	b10b      	cbz	r3, 80088fc <__sflush_r+0x44>
 80088f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80088fa:	1ad2      	subs	r2, r2, r3
 80088fc:	2300      	movs	r3, #0
 80088fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008900:	6a21      	ldr	r1, [r4, #32]
 8008902:	4628      	mov	r0, r5
 8008904:	47b0      	blx	r6
 8008906:	1c43      	adds	r3, r0, #1
 8008908:	89a3      	ldrh	r3, [r4, #12]
 800890a:	d106      	bne.n	800891a <__sflush_r+0x62>
 800890c:	6829      	ldr	r1, [r5, #0]
 800890e:	291d      	cmp	r1, #29
 8008910:	d82b      	bhi.n	800896a <__sflush_r+0xb2>
 8008912:	4a2a      	ldr	r2, [pc, #168]	@ (80089bc <__sflush_r+0x104>)
 8008914:	410a      	asrs	r2, r1
 8008916:	07d6      	lsls	r6, r2, #31
 8008918:	d427      	bmi.n	800896a <__sflush_r+0xb2>
 800891a:	2200      	movs	r2, #0
 800891c:	6062      	str	r2, [r4, #4]
 800891e:	04d9      	lsls	r1, r3, #19
 8008920:	6922      	ldr	r2, [r4, #16]
 8008922:	6022      	str	r2, [r4, #0]
 8008924:	d504      	bpl.n	8008930 <__sflush_r+0x78>
 8008926:	1c42      	adds	r2, r0, #1
 8008928:	d101      	bne.n	800892e <__sflush_r+0x76>
 800892a:	682b      	ldr	r3, [r5, #0]
 800892c:	b903      	cbnz	r3, 8008930 <__sflush_r+0x78>
 800892e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008930:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008932:	602f      	str	r7, [r5, #0]
 8008934:	b1b9      	cbz	r1, 8008966 <__sflush_r+0xae>
 8008936:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800893a:	4299      	cmp	r1, r3
 800893c:	d002      	beq.n	8008944 <__sflush_r+0x8c>
 800893e:	4628      	mov	r0, r5
 8008940:	f7ff fa9a 	bl	8007e78 <_free_r>
 8008944:	2300      	movs	r3, #0
 8008946:	6363      	str	r3, [r4, #52]	@ 0x34
 8008948:	e00d      	b.n	8008966 <__sflush_r+0xae>
 800894a:	2301      	movs	r3, #1
 800894c:	4628      	mov	r0, r5
 800894e:	47b0      	blx	r6
 8008950:	4602      	mov	r2, r0
 8008952:	1c50      	adds	r0, r2, #1
 8008954:	d1c9      	bne.n	80088ea <__sflush_r+0x32>
 8008956:	682b      	ldr	r3, [r5, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d0c6      	beq.n	80088ea <__sflush_r+0x32>
 800895c:	2b1d      	cmp	r3, #29
 800895e:	d001      	beq.n	8008964 <__sflush_r+0xac>
 8008960:	2b16      	cmp	r3, #22
 8008962:	d11e      	bne.n	80089a2 <__sflush_r+0xea>
 8008964:	602f      	str	r7, [r5, #0]
 8008966:	2000      	movs	r0, #0
 8008968:	e022      	b.n	80089b0 <__sflush_r+0xf8>
 800896a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800896e:	b21b      	sxth	r3, r3
 8008970:	e01b      	b.n	80089aa <__sflush_r+0xf2>
 8008972:	690f      	ldr	r7, [r1, #16]
 8008974:	2f00      	cmp	r7, #0
 8008976:	d0f6      	beq.n	8008966 <__sflush_r+0xae>
 8008978:	0793      	lsls	r3, r2, #30
 800897a:	680e      	ldr	r6, [r1, #0]
 800897c:	bf08      	it	eq
 800897e:	694b      	ldreq	r3, [r1, #20]
 8008980:	600f      	str	r7, [r1, #0]
 8008982:	bf18      	it	ne
 8008984:	2300      	movne	r3, #0
 8008986:	eba6 0807 	sub.w	r8, r6, r7
 800898a:	608b      	str	r3, [r1, #8]
 800898c:	f1b8 0f00 	cmp.w	r8, #0
 8008990:	dde9      	ble.n	8008966 <__sflush_r+0xae>
 8008992:	6a21      	ldr	r1, [r4, #32]
 8008994:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008996:	4643      	mov	r3, r8
 8008998:	463a      	mov	r2, r7
 800899a:	4628      	mov	r0, r5
 800899c:	47b0      	blx	r6
 800899e:	2800      	cmp	r0, #0
 80089a0:	dc08      	bgt.n	80089b4 <__sflush_r+0xfc>
 80089a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089aa:	81a3      	strh	r3, [r4, #12]
 80089ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089b4:	4407      	add	r7, r0
 80089b6:	eba8 0800 	sub.w	r8, r8, r0
 80089ba:	e7e7      	b.n	800898c <__sflush_r+0xd4>
 80089bc:	dfbffffe 	.word	0xdfbffffe

080089c0 <_fflush_r>:
 80089c0:	b538      	push	{r3, r4, r5, lr}
 80089c2:	690b      	ldr	r3, [r1, #16]
 80089c4:	4605      	mov	r5, r0
 80089c6:	460c      	mov	r4, r1
 80089c8:	b913      	cbnz	r3, 80089d0 <_fflush_r+0x10>
 80089ca:	2500      	movs	r5, #0
 80089cc:	4628      	mov	r0, r5
 80089ce:	bd38      	pop	{r3, r4, r5, pc}
 80089d0:	b118      	cbz	r0, 80089da <_fflush_r+0x1a>
 80089d2:	6a03      	ldr	r3, [r0, #32]
 80089d4:	b90b      	cbnz	r3, 80089da <_fflush_r+0x1a>
 80089d6:	f7ff f813 	bl	8007a00 <__sinit>
 80089da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d0f3      	beq.n	80089ca <_fflush_r+0xa>
 80089e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80089e4:	07d0      	lsls	r0, r2, #31
 80089e6:	d404      	bmi.n	80089f2 <_fflush_r+0x32>
 80089e8:	0599      	lsls	r1, r3, #22
 80089ea:	d402      	bmi.n	80089f2 <_fflush_r+0x32>
 80089ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089ee:	f7ff fa32 	bl	8007e56 <__retarget_lock_acquire_recursive>
 80089f2:	4628      	mov	r0, r5
 80089f4:	4621      	mov	r1, r4
 80089f6:	f7ff ff5f 	bl	80088b8 <__sflush_r>
 80089fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80089fc:	07da      	lsls	r2, r3, #31
 80089fe:	4605      	mov	r5, r0
 8008a00:	d4e4      	bmi.n	80089cc <_fflush_r+0xc>
 8008a02:	89a3      	ldrh	r3, [r4, #12]
 8008a04:	059b      	lsls	r3, r3, #22
 8008a06:	d4e1      	bmi.n	80089cc <_fflush_r+0xc>
 8008a08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a0a:	f7ff fa25 	bl	8007e58 <__retarget_lock_release_recursive>
 8008a0e:	e7dd      	b.n	80089cc <_fflush_r+0xc>

08008a10 <__swhatbuf_r>:
 8008a10:	b570      	push	{r4, r5, r6, lr}
 8008a12:	460c      	mov	r4, r1
 8008a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a18:	2900      	cmp	r1, #0
 8008a1a:	b096      	sub	sp, #88	@ 0x58
 8008a1c:	4615      	mov	r5, r2
 8008a1e:	461e      	mov	r6, r3
 8008a20:	da0d      	bge.n	8008a3e <__swhatbuf_r+0x2e>
 8008a22:	89a3      	ldrh	r3, [r4, #12]
 8008a24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008a28:	f04f 0100 	mov.w	r1, #0
 8008a2c:	bf14      	ite	ne
 8008a2e:	2340      	movne	r3, #64	@ 0x40
 8008a30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008a34:	2000      	movs	r0, #0
 8008a36:	6031      	str	r1, [r6, #0]
 8008a38:	602b      	str	r3, [r5, #0]
 8008a3a:	b016      	add	sp, #88	@ 0x58
 8008a3c:	bd70      	pop	{r4, r5, r6, pc}
 8008a3e:	466a      	mov	r2, sp
 8008a40:	f000 f862 	bl	8008b08 <_fstat_r>
 8008a44:	2800      	cmp	r0, #0
 8008a46:	dbec      	blt.n	8008a22 <__swhatbuf_r+0x12>
 8008a48:	9901      	ldr	r1, [sp, #4]
 8008a4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008a4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008a52:	4259      	negs	r1, r3
 8008a54:	4159      	adcs	r1, r3
 8008a56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a5a:	e7eb      	b.n	8008a34 <__swhatbuf_r+0x24>

08008a5c <__smakebuf_r>:
 8008a5c:	898b      	ldrh	r3, [r1, #12]
 8008a5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a60:	079d      	lsls	r5, r3, #30
 8008a62:	4606      	mov	r6, r0
 8008a64:	460c      	mov	r4, r1
 8008a66:	d507      	bpl.n	8008a78 <__smakebuf_r+0x1c>
 8008a68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a6c:	6023      	str	r3, [r4, #0]
 8008a6e:	6123      	str	r3, [r4, #16]
 8008a70:	2301      	movs	r3, #1
 8008a72:	6163      	str	r3, [r4, #20]
 8008a74:	b003      	add	sp, #12
 8008a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a78:	ab01      	add	r3, sp, #4
 8008a7a:	466a      	mov	r2, sp
 8008a7c:	f7ff ffc8 	bl	8008a10 <__swhatbuf_r>
 8008a80:	9f00      	ldr	r7, [sp, #0]
 8008a82:	4605      	mov	r5, r0
 8008a84:	4639      	mov	r1, r7
 8008a86:	4630      	mov	r0, r6
 8008a88:	f7ff fa62 	bl	8007f50 <_malloc_r>
 8008a8c:	b948      	cbnz	r0, 8008aa2 <__smakebuf_r+0x46>
 8008a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a92:	059a      	lsls	r2, r3, #22
 8008a94:	d4ee      	bmi.n	8008a74 <__smakebuf_r+0x18>
 8008a96:	f023 0303 	bic.w	r3, r3, #3
 8008a9a:	f043 0302 	orr.w	r3, r3, #2
 8008a9e:	81a3      	strh	r3, [r4, #12]
 8008aa0:	e7e2      	b.n	8008a68 <__smakebuf_r+0xc>
 8008aa2:	89a3      	ldrh	r3, [r4, #12]
 8008aa4:	6020      	str	r0, [r4, #0]
 8008aa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008aaa:	81a3      	strh	r3, [r4, #12]
 8008aac:	9b01      	ldr	r3, [sp, #4]
 8008aae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008ab2:	b15b      	cbz	r3, 8008acc <__smakebuf_r+0x70>
 8008ab4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ab8:	4630      	mov	r0, r6
 8008aba:	f000 f837 	bl	8008b2c <_isatty_r>
 8008abe:	b128      	cbz	r0, 8008acc <__smakebuf_r+0x70>
 8008ac0:	89a3      	ldrh	r3, [r4, #12]
 8008ac2:	f023 0303 	bic.w	r3, r3, #3
 8008ac6:	f043 0301 	orr.w	r3, r3, #1
 8008aca:	81a3      	strh	r3, [r4, #12]
 8008acc:	89a3      	ldrh	r3, [r4, #12]
 8008ace:	431d      	orrs	r5, r3
 8008ad0:	81a5      	strh	r5, [r4, #12]
 8008ad2:	e7cf      	b.n	8008a74 <__smakebuf_r+0x18>

08008ad4 <memmove>:
 8008ad4:	4288      	cmp	r0, r1
 8008ad6:	b510      	push	{r4, lr}
 8008ad8:	eb01 0402 	add.w	r4, r1, r2
 8008adc:	d902      	bls.n	8008ae4 <memmove+0x10>
 8008ade:	4284      	cmp	r4, r0
 8008ae0:	4623      	mov	r3, r4
 8008ae2:	d807      	bhi.n	8008af4 <memmove+0x20>
 8008ae4:	1e43      	subs	r3, r0, #1
 8008ae6:	42a1      	cmp	r1, r4
 8008ae8:	d008      	beq.n	8008afc <memmove+0x28>
 8008aea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008aee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008af2:	e7f8      	b.n	8008ae6 <memmove+0x12>
 8008af4:	4402      	add	r2, r0
 8008af6:	4601      	mov	r1, r0
 8008af8:	428a      	cmp	r2, r1
 8008afa:	d100      	bne.n	8008afe <memmove+0x2a>
 8008afc:	bd10      	pop	{r4, pc}
 8008afe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b06:	e7f7      	b.n	8008af8 <memmove+0x24>

08008b08 <_fstat_r>:
 8008b08:	b538      	push	{r3, r4, r5, lr}
 8008b0a:	4d07      	ldr	r5, [pc, #28]	@ (8008b28 <_fstat_r+0x20>)
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	4604      	mov	r4, r0
 8008b10:	4608      	mov	r0, r1
 8008b12:	4611      	mov	r1, r2
 8008b14:	602b      	str	r3, [r5, #0]
 8008b16:	f7f8 f934 	bl	8000d82 <_fstat>
 8008b1a:	1c43      	adds	r3, r0, #1
 8008b1c:	d102      	bne.n	8008b24 <_fstat_r+0x1c>
 8008b1e:	682b      	ldr	r3, [r5, #0]
 8008b20:	b103      	cbz	r3, 8008b24 <_fstat_r+0x1c>
 8008b22:	6023      	str	r3, [r4, #0]
 8008b24:	bd38      	pop	{r3, r4, r5, pc}
 8008b26:	bf00      	nop
 8008b28:	2000584c 	.word	0x2000584c

08008b2c <_isatty_r>:
 8008b2c:	b538      	push	{r3, r4, r5, lr}
 8008b2e:	4d06      	ldr	r5, [pc, #24]	@ (8008b48 <_isatty_r+0x1c>)
 8008b30:	2300      	movs	r3, #0
 8008b32:	4604      	mov	r4, r0
 8008b34:	4608      	mov	r0, r1
 8008b36:	602b      	str	r3, [r5, #0]
 8008b38:	f7f8 f933 	bl	8000da2 <_isatty>
 8008b3c:	1c43      	adds	r3, r0, #1
 8008b3e:	d102      	bne.n	8008b46 <_isatty_r+0x1a>
 8008b40:	682b      	ldr	r3, [r5, #0]
 8008b42:	b103      	cbz	r3, 8008b46 <_isatty_r+0x1a>
 8008b44:	6023      	str	r3, [r4, #0]
 8008b46:	bd38      	pop	{r3, r4, r5, pc}
 8008b48:	2000584c 	.word	0x2000584c

08008b4c <_sbrk_r>:
 8008b4c:	b538      	push	{r3, r4, r5, lr}
 8008b4e:	4d06      	ldr	r5, [pc, #24]	@ (8008b68 <_sbrk_r+0x1c>)
 8008b50:	2300      	movs	r3, #0
 8008b52:	4604      	mov	r4, r0
 8008b54:	4608      	mov	r0, r1
 8008b56:	602b      	str	r3, [r5, #0]
 8008b58:	f7f8 f93c 	bl	8000dd4 <_sbrk>
 8008b5c:	1c43      	adds	r3, r0, #1
 8008b5e:	d102      	bne.n	8008b66 <_sbrk_r+0x1a>
 8008b60:	682b      	ldr	r3, [r5, #0]
 8008b62:	b103      	cbz	r3, 8008b66 <_sbrk_r+0x1a>
 8008b64:	6023      	str	r3, [r4, #0]
 8008b66:	bd38      	pop	{r3, r4, r5, pc}
 8008b68:	2000584c 	.word	0x2000584c

08008b6c <_realloc_r>:
 8008b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b70:	4680      	mov	r8, r0
 8008b72:	4615      	mov	r5, r2
 8008b74:	460c      	mov	r4, r1
 8008b76:	b921      	cbnz	r1, 8008b82 <_realloc_r+0x16>
 8008b78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b7c:	4611      	mov	r1, r2
 8008b7e:	f7ff b9e7 	b.w	8007f50 <_malloc_r>
 8008b82:	b92a      	cbnz	r2, 8008b90 <_realloc_r+0x24>
 8008b84:	f7ff f978 	bl	8007e78 <_free_r>
 8008b88:	2400      	movs	r4, #0
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b90:	f000 f81a 	bl	8008bc8 <_malloc_usable_size_r>
 8008b94:	4285      	cmp	r5, r0
 8008b96:	4606      	mov	r6, r0
 8008b98:	d802      	bhi.n	8008ba0 <_realloc_r+0x34>
 8008b9a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008b9e:	d8f4      	bhi.n	8008b8a <_realloc_r+0x1e>
 8008ba0:	4629      	mov	r1, r5
 8008ba2:	4640      	mov	r0, r8
 8008ba4:	f7ff f9d4 	bl	8007f50 <_malloc_r>
 8008ba8:	4607      	mov	r7, r0
 8008baa:	2800      	cmp	r0, #0
 8008bac:	d0ec      	beq.n	8008b88 <_realloc_r+0x1c>
 8008bae:	42b5      	cmp	r5, r6
 8008bb0:	462a      	mov	r2, r5
 8008bb2:	4621      	mov	r1, r4
 8008bb4:	bf28      	it	cs
 8008bb6:	4632      	movcs	r2, r6
 8008bb8:	f7ff f94f 	bl	8007e5a <memcpy>
 8008bbc:	4621      	mov	r1, r4
 8008bbe:	4640      	mov	r0, r8
 8008bc0:	f7ff f95a 	bl	8007e78 <_free_r>
 8008bc4:	463c      	mov	r4, r7
 8008bc6:	e7e0      	b.n	8008b8a <_realloc_r+0x1e>

08008bc8 <_malloc_usable_size_r>:
 8008bc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bcc:	1f18      	subs	r0, r3, #4
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	bfbc      	itt	lt
 8008bd2:	580b      	ldrlt	r3, [r1, r0]
 8008bd4:	18c0      	addlt	r0, r0, r3
 8008bd6:	4770      	bx	lr

08008bd8 <_init>:
 8008bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bda:	bf00      	nop
 8008bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bde:	bc08      	pop	{r3}
 8008be0:	469e      	mov	lr, r3
 8008be2:	4770      	bx	lr

08008be4 <_fini>:
 8008be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be6:	bf00      	nop
 8008be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bea:	bc08      	pop	{r3}
 8008bec:	469e      	mov	lr, r3
 8008bee:	4770      	bx	lr
