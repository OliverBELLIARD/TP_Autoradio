
TP_Autoradio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009360  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  080094f0  080094f0  0000a4f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099d8  080099d8  0000b068  2**0
                  CONTENTS
  4 .ARM          00000008  080099d8  080099d8  0000a9d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099e0  080099e0  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099e0  080099e0  0000a9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080099e4  080099e4  0000a9e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080099e8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b5c  20000068  08009a50  0000b068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bc4  08009a50  0000bbc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eff1  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045c7  00000000  00000000  0002a089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa0  00000000  00000000  0002e650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014bb  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ae5a  00000000  00000000  000315ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021dc4  00000000  00000000  0005c405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104b87  00000000  00000000  0007e1c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00182d50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000761c  00000000  00000000  00182d94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0018a3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080094d8 	.word	0x080094d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080094d8 	.word	0x080094d8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000566:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <MX_DMA_Init+0x48>)
 8000568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800056a:	4a0f      	ldr	r2, [pc, #60]	@ (80005a8 <MX_DMA_Init+0x48>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6493      	str	r3, [r2, #72]	@ 0x48
 8000572:	4b0d      	ldr	r3, [pc, #52]	@ (80005a8 <MX_DMA_Init+0x48>)
 8000574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2105      	movs	r1, #5
 8000582:	2010      	movs	r0, #16
 8000584:	f001 f9e2 	bl	800194c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000588:	2010      	movs	r0, #16
 800058a:	f001 f9fb 	bl	8001984 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2105      	movs	r1, #5
 8000592:	2011      	movs	r0, #17
 8000594:	f001 f9da 	bl	800194c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000598:	2011      	movs	r0, #17
 800059a:	f001 f9f3 	bl	8001984 <HAL_NVIC_EnableIRQ>

}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40021000 	.word	0x40021000

080005ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	@ 0x28
 80005b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c2:	4b35      	ldr	r3, [pc, #212]	@ (8000698 <MX_GPIO_Init+0xec>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c6:	4a34      	ldr	r2, [pc, #208]	@ (8000698 <MX_GPIO_Init+0xec>)
 80005c8:	f043 0304 	orr.w	r3, r3, #4
 80005cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ce:	4b32      	ldr	r3, [pc, #200]	@ (8000698 <MX_GPIO_Init+0xec>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d2:	f003 0304 	and.w	r3, r3, #4
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005da:	4b2f      	ldr	r3, [pc, #188]	@ (8000698 <MX_GPIO_Init+0xec>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005de:	4a2e      	ldr	r2, [pc, #184]	@ (8000698 <MX_GPIO_Init+0xec>)
 80005e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000698 <MX_GPIO_Init+0xec>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b29      	ldr	r3, [pc, #164]	@ (8000698 <MX_GPIO_Init+0xec>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f6:	4a28      	ldr	r2, [pc, #160]	@ (8000698 <MX_GPIO_Init+0xec>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005fe:	4b26      	ldr	r3, [pc, #152]	@ (8000698 <MX_GPIO_Init+0xec>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	4b23      	ldr	r3, [pc, #140]	@ (8000698 <MX_GPIO_Init+0xec>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060e:	4a22      	ldr	r2, [pc, #136]	@ (8000698 <MX_GPIO_Init+0xec>)
 8000610:	f043 0302 	orr.w	r3, r3, #2
 8000614:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000616:	4b20      	ldr	r3, [pc, #128]	@ (8000698 <MX_GPIO_Init+0xec>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061a:	f003 0302 	and.w	r3, r3, #2
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VU_nRESET_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	2121      	movs	r1, #33	@ 0x21
 8000626:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800062a:	f001 fdd9 	bl	80021e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2180      	movs	r1, #128	@ 0x80
 8000632:	481a      	ldr	r0, [pc, #104]	@ (800069c <MX_GPIO_Init+0xf0>)
 8000634:	f001 fdd4 	bl	80021e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000638:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800063c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800063e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	4619      	mov	r1, r3
 800064e:	4814      	ldr	r0, [pc, #80]	@ (80006a0 <MX_GPIO_Init+0xf4>)
 8000650:	f001 fc1c 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : VU_nRESET_Pin LD2_Pin */
  GPIO_InitStruct.Pin = VU_nRESET_Pin|LD2_Pin;
 8000654:	2321      	movs	r3, #33	@ 0x21
 8000656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000658:	2301      	movs	r3, #1
 800065a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	2300      	movs	r3, #0
 8000662:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	4619      	mov	r1, r3
 800066a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800066e:	f001 fc0d 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : VU_nCS_Pin */
  GPIO_InitStruct.Pin = VU_nCS_Pin;
 8000672:	2380      	movs	r3, #128	@ 0x80
 8000674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VU_nCS_GPIO_Port, &GPIO_InitStruct);
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	4619      	mov	r1, r3
 8000688:	4804      	ldr	r0, [pc, #16]	@ (800069c <MX_GPIO_Init+0xf0>)
 800068a:	f001 fbff 	bl	8001e8c <HAL_GPIO_Init>

}
 800068e:	bf00      	nop
 8000690:	3728      	adds	r7, #40	@ 0x28
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40021000 	.word	0x40021000
 800069c:	48000400 	.word	0x48000400
 80006a0:	48000800 	.word	0x48000800

080006a4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000718 <MX_I2C2_Init+0x74>)
 80006aa:	4a1c      	ldr	r2, [pc, #112]	@ (800071c <MX_I2C2_Init+0x78>)
 80006ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 80006ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000718 <MX_I2C2_Init+0x74>)
 80006b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000720 <MX_I2C2_Init+0x7c>)
 80006b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006b4:	4b18      	ldr	r3, [pc, #96]	@ (8000718 <MX_I2C2_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ba:	4b17      	ldr	r3, [pc, #92]	@ (8000718 <MX_I2C2_Init+0x74>)
 80006bc:	2201      	movs	r2, #1
 80006be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c0:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <MX_I2C2_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006c6:	4b14      	ldr	r3, [pc, #80]	@ (8000718 <MX_I2C2_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <MX_I2C2_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <MX_I2C2_Init+0x74>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <MX_I2C2_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006de:	480e      	ldr	r0, [pc, #56]	@ (8000718 <MX_I2C2_Init+0x74>)
 80006e0:	f001 fd96 	bl	8002210 <HAL_I2C_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006ea:	f000 f9e3 	bl	8000ab4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ee:	2100      	movs	r1, #0
 80006f0:	4809      	ldr	r0, [pc, #36]	@ (8000718 <MX_I2C2_Init+0x74>)
 80006f2:	f002 fb19 	bl	8002d28 <HAL_I2CEx_ConfigAnalogFilter>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006fc:	f000 f9da 	bl	8000ab4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000700:	2100      	movs	r1, #0
 8000702:	4805      	ldr	r0, [pc, #20]	@ (8000718 <MX_I2C2_Init+0x74>)
 8000704:	f002 fb5b 	bl	8002dbe <HAL_I2CEx_ConfigDigitalFilter>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800070e:	f000 f9d1 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000084 	.word	0x20000084
 800071c:	40005800 	.word	0x40005800
 8000720:	10d19ce4 	.word	0x10d19ce4

08000724 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b0ac      	sub	sp, #176	@ 0xb0
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	2288      	movs	r2, #136	@ 0x88
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f008 f943 	bl	80089d0 <memset>
  if(i2cHandle->Instance==I2C2)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a21      	ldr	r2, [pc, #132]	@ (80007d4 <HAL_I2C_MspInit+0xb0>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d13b      	bne.n	80007cc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000754:	2380      	movs	r3, #128	@ 0x80
 8000756:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000758:	2300      	movs	r3, #0
 800075a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4618      	mov	r0, r3
 8000762:	f003 fa0f 	bl	8003b84 <HAL_RCCEx_PeriphCLKConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800076c:	f000 f9a2 	bl	8000ab4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000770:	4b19      	ldr	r3, [pc, #100]	@ (80007d8 <HAL_I2C_MspInit+0xb4>)
 8000772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000774:	4a18      	ldr	r2, [pc, #96]	@ (80007d8 <HAL_I2C_MspInit+0xb4>)
 8000776:	f043 0302 	orr.w	r3, r3, #2
 800077a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800077c:	4b16      	ldr	r3, [pc, #88]	@ (80007d8 <HAL_I2C_MspInit+0xb4>)
 800077e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000780:	f003 0302 	and.w	r3, r3, #2
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000788:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800078c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000790:	2312      	movs	r3, #18
 8000792:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079c:	2303      	movs	r3, #3
 800079e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80007a2:	2304      	movs	r3, #4
 80007a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007ac:	4619      	mov	r1, r3
 80007ae:	480b      	ldr	r0, [pc, #44]	@ (80007dc <HAL_I2C_MspInit+0xb8>)
 80007b0:	f001 fb6c 	bl	8001e8c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007b4:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <HAL_I2C_MspInit+0xb4>)
 80007b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007b8:	4a07      	ldr	r2, [pc, #28]	@ (80007d8 <HAL_I2C_MspInit+0xb4>)
 80007ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007be:	6593      	str	r3, [r2, #88]	@ 0x58
 80007c0:	4b05      	ldr	r3, [pc, #20]	@ (80007d8 <HAL_I2C_MspInit+0xb4>)
 80007c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80007cc:	bf00      	nop
 80007ce:	37b0      	adds	r7, #176	@ 0xb0
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40005800 	.word	0x40005800
 80007d8:	40021000 	.word	0x40021000
 80007dc:	48000400 	.word	0x48000400

080007e0 <__io_putchar>:
 * @brief Transmit a character over UART.
 * @param ch: Character to transmit.
 * @retval int: The transmitted character.
 */
int __io_putchar(int ch)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80007e8:	1d39      	adds	r1, r7, #4
 80007ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007ee:	2201      	movs	r2, #1
 80007f0:	4803      	ldr	r0, [pc, #12]	@ (8000800 <__io_putchar+0x20>)
 80007f2:	f006 fc1b 	bl	800702c <HAL_UART_Transmit>

	return ch;
 80007f6:	687b      	ldr	r3, [r7, #4]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000928 	.word	0x20000928

08000804 <GenerateTriangleWave>:
 * @param buffer: Pointer to the buffer to hold the waveform.
 * @param length: Number of samples in the waveform.
 * @param amplitude: Peak amplitude of the waveform.
 */
void GenerateTriangleWave(uint16_t* buffer, uint16_t length, uint16_t amplitude)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	460b      	mov	r3, r1
 800080e:	807b      	strh	r3, [r7, #2]
 8000810:	4613      	mov	r3, r2
 8000812:	803b      	strh	r3, [r7, #0]
	uint16_t step = (2 * amplitude) / length;
 8000814:	883b      	ldrh	r3, [r7, #0]
 8000816:	005a      	lsls	r2, r3, #1
 8000818:	887b      	ldrh	r3, [r7, #2]
 800081a:	fb92 f3f3 	sdiv	r3, r2, r3
 800081e:	813b      	strh	r3, [r7, #8]
	uint16_t value = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	81fb      	strh	r3, [r7, #14]
	int8_t direction = 1;
 8000824:	2301      	movs	r3, #1
 8000826:	737b      	strb	r3, [r7, #13]

	for (uint16_t i = 0; i < length; i++) {
 8000828:	2300      	movs	r3, #0
 800082a:	817b      	strh	r3, [r7, #10]
 800082c:	e022      	b.n	8000874 <GenerateTriangleWave+0x70>
		buffer[i] = value;
 800082e:	897b      	ldrh	r3, [r7, #10]
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	4413      	add	r3, r2
 8000836:	89fa      	ldrh	r2, [r7, #14]
 8000838:	801a      	strh	r2, [r3, #0]
		value += step * direction;
 800083a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800083e:	b29b      	uxth	r3, r3
 8000840:	893a      	ldrh	r2, [r7, #8]
 8000842:	fb12 f303 	smulbb	r3, r2, r3
 8000846:	b29a      	uxth	r2, r3
 8000848:	89fb      	ldrh	r3, [r7, #14]
 800084a:	4413      	add	r3, r2
 800084c:	81fb      	strh	r3, [r7, #14]

		if (value >= amplitude) {
 800084e:	89fa      	ldrh	r2, [r7, #14]
 8000850:	883b      	ldrh	r3, [r7, #0]
 8000852:	429a      	cmp	r2, r3
 8000854:	d304      	bcc.n	8000860 <GenerateTriangleWave+0x5c>
			value = amplitude;
 8000856:	883b      	ldrh	r3, [r7, #0]
 8000858:	81fb      	strh	r3, [r7, #14]
			direction = -1; // Start decreasing
 800085a:	23ff      	movs	r3, #255	@ 0xff
 800085c:	737b      	strb	r3, [r7, #13]
 800085e:	e006      	b.n	800086e <GenerateTriangleWave+0x6a>
		} else if (value <= 0) {
 8000860:	89fb      	ldrh	r3, [r7, #14]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d103      	bne.n	800086e <GenerateTriangleWave+0x6a>
			value = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	81fb      	strh	r3, [r7, #14]
			direction = 1; // Start increasing
 800086a:	2301      	movs	r3, #1
 800086c:	737b      	strb	r3, [r7, #13]
	for (uint16_t i = 0; i < length; i++) {
 800086e:	897b      	ldrh	r3, [r7, #10]
 8000870:	3301      	adds	r3, #1
 8000872:	817b      	strh	r3, [r7, #10]
 8000874:	897a      	ldrh	r2, [r7, #10]
 8000876:	887b      	ldrh	r3, [r7, #2]
 8000878:	429a      	cmp	r2, r3
 800087a:	d3d8      	bcc.n	800082e <GenerateTriangleWave+0x2a>
		}
	}
}
 800087c:	bf00      	nop
 800087e:	bf00      	nop
 8000880:	3714      	adds	r7, #20
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
	...

0800088c <HAL_SAI_ErrorCallback>:
/**
 * @brief SAI error callback.
 * @param hsai: Pointer to the SAI handle.
 */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
    printf("Error: SAI encountered an error\r\n");
 8000894:	4811      	ldr	r0, [pc, #68]	@ (80008dc <HAL_SAI_ErrorCallback+0x50>)
 8000896:	f007 ffbb 	bl	8008810 <puts>

    // Attempt to restart DMA transmission and reception
    if (HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)triangleWave, TRIANGLE_SAMPLES) != HAL_OK) {
 800089a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800089e:	4910      	ldr	r1, [pc, #64]	@ (80008e0 <HAL_SAI_ErrorCallback+0x54>)
 80008a0:	4810      	ldr	r0, [pc, #64]	@ (80008e4 <HAL_SAI_ErrorCallback+0x58>)
 80008a2:	f004 fe93 	bl	80055cc <HAL_SAI_Transmit_DMA>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d004      	beq.n	80008b6 <HAL_SAI_ErrorCallback+0x2a>
        printf("Error: Failed to restart SAI DMA transmission\r\n");
 80008ac:	480e      	ldr	r0, [pc, #56]	@ (80008e8 <HAL_SAI_ErrorCallback+0x5c>)
 80008ae:	f007 ffaf 	bl	8008810 <puts>
        Error_Handler();
 80008b2:	f000 f8ff 	bl	8000ab4 <Error_Handler>
    }

    if (HAL_SAI_Receive_DMA(&hsai_BlockA2, rxSAI, SAI_BUFFER_LENGTH) != HAL_OK) {
 80008b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008ba:	490c      	ldr	r1, [pc, #48]	@ (80008ec <HAL_SAI_ErrorCallback+0x60>)
 80008bc:	4809      	ldr	r0, [pc, #36]	@ (80008e4 <HAL_SAI_ErrorCallback+0x58>)
 80008be:	f004 ff35 	bl	800572c <HAL_SAI_Receive_DMA>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d004      	beq.n	80008d2 <HAL_SAI_ErrorCallback+0x46>
        printf("Error: Failed to restart SAI DMA reception\r\n");
 80008c8:	4809      	ldr	r0, [pc, #36]	@ (80008f0 <HAL_SAI_ErrorCallback+0x64>)
 80008ca:	f007 ffa1 	bl	8008810 <puts>
        Error_Handler();
 80008ce:	f000 f8f1 	bl	8000ab4 <Error_Handler>
    }
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	080095cc 	.word	0x080095cc
 80008e0:	200004d8 	.word	0x200004d8
 80008e4:	200006d8 	.word	0x200006d8
 80008e8:	080095f0 	.word	0x080095f0
 80008ec:	200000d8 	.word	0x200000d8
 80008f0:	08009620 	.word	0x08009620

080008f4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80008f8:	f000 ff30 	bl	800175c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008fc:	f000 f84c 	bl	8000998 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000900:	f000 f89b 	bl	8000a3a <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000904:	f7ff fe52 	bl	80005ac <MX_GPIO_Init>
	MX_DMA_Init();
 8000908:	f7ff fe2a 	bl	8000560 <MX_DMA_Init>
	MX_USART2_UART_Init();
 800090c:	f000 fc78 	bl	8001200 <MX_USART2_UART_Init>
	MX_I2C2_Init();
 8000910:	f7ff fec8 	bl	80006a4 <MX_I2C2_Init>
	MX_SPI3_Init();
 8000914:	f000 fa18 	bl	8000d48 <MX_SPI3_Init>
	MX_SAI2_Init();
 8000918:	f000 f8d2 	bl	8000ac0 <MX_SAI2_Init>
	/* USER CODE BEGIN 2 */
	// Initialize GPIO expander
	MCP23S17_Init();
 800091c:	f000 fd9a 	bl	8001454 <MCP23S17_Init>
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 8000920:	4b17      	ldr	r3, [pc, #92]	@ (8000980 <main+0x8c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	4b16      	ldr	r3, [pc, #88]	@ (8000980 <main+0x8c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800092e:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB2);
 8000930:	4b14      	ldr	r3, [pc, #80]	@ (8000984 <main+0x90>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	4b13      	ldr	r3, [pc, #76]	@ (8000984 <main+0x90>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800093e:	601a      	str	r2, [r3, #0]
	SGTL5000_Init();
 8000940:	f000 fe78 	bl	8001634 <SGTL5000_Init>

	// Generate the triangular waveform
	GenerateTriangleWave(triangleWave, TRIANGLE_SAMPLES, 0x7FFF); // 16-bit amplitude (0x7FFF)
 8000944:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000948:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800094c:	480e      	ldr	r0, [pc, #56]	@ (8000988 <main+0x94>)
 800094e:	f7ff ff59 	bl	8000804 <GenerateTriangleWave>
	printf("Triangle Wave generation\r\n");
 8000952:	480e      	ldr	r0, [pc, #56]	@ (800098c <main+0x98>)
 8000954:	f007 ff5c 	bl	8008810 <puts>

	// Start SAI DMA transmission
	if (HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)triangleWave, TRIANGLE_SAMPLES) != HAL_OK) {
 8000958:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800095c:	490a      	ldr	r1, [pc, #40]	@ (8000988 <main+0x94>)
 800095e:	4808      	ldr	r0, [pc, #32]	@ (8000980 <main+0x8c>)
 8000960:	f004 fe34 	bl	80055cc <HAL_SAI_Transmit_DMA>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d004      	beq.n	8000974 <main+0x80>
		printf("Error: Failed to start SAI DMA transmission\r\n");
 800096a:	4809      	ldr	r0, [pc, #36]	@ (8000990 <main+0x9c>)
 800096c:	f007 ff50 	bl	8008810 <puts>
		Error_Handler();
 8000970:	f000 f8a0 	bl	8000ab4 <Error_Handler>
		Error_Handler();
	}
	*/

	// Test printf
	printf("******* TP Autoradio *******\r\n");
 8000974:	4807      	ldr	r0, [pc, #28]	@ (8000994 <main+0xa0>)
 8000976:	f007 ff4b 	bl	8008810 <puts>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800097a:	bf00      	nop
 800097c:	e7fd      	b.n	800097a <main+0x86>
 800097e:	bf00      	nop
 8000980:	200006d8 	.word	0x200006d8
 8000984:	2000075c 	.word	0x2000075c
 8000988:	200004d8 	.word	0x200004d8
 800098c:	0800964c 	.word	0x0800964c
 8000990:	08009668 	.word	0x08009668
 8000994:	08009698 	.word	0x08009698

08000998 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b096      	sub	sp, #88	@ 0x58
 800099c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	2244      	movs	r2, #68	@ 0x44
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f008 f812 	bl	80089d0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ac:	463b      	mov	r3, r7
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009be:	f002 fa59 	bl	8002e74 <HAL_PWREx_ControlVoltageScaling>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <SystemClock_Config+0x34>
	{
		Error_Handler();
 80009c8:	f000 f874 	bl	8000ab4 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009cc:	2302      	movs	r3, #2
 80009ce:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009d4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d6:	2310      	movs	r3, #16
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009da:	2302      	movs	r3, #2
 80009dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009de:	2302      	movs	r3, #2
 80009e0:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80009e2:	2301      	movs	r3, #1
 80009e4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80009e6:	230a      	movs	r3, #10
 80009e8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009ea:	2307      	movs	r3, #7
 80009ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009ee:	2302      	movs	r3, #2
 80009f0:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009f2:	2302      	movs	r3, #2
 80009f4:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4618      	mov	r0, r3
 80009fc:	f002 fa90 	bl	8002f20 <HAL_RCC_OscConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0x72>
	{
		Error_Handler();
 8000a06:	f000 f855 	bl	8000ab4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0a:	230f      	movs	r3, #15
 8000a0c:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a1e:	463b      	mov	r3, r7
 8000a20:	2104      	movs	r1, #4
 8000a22:	4618      	mov	r0, r3
 8000a24:	f002 fe58 	bl	80036d8 <HAL_RCC_ClockConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000a2e:	f000 f841 	bl	8000ab4 <Error_Handler>
	}
}
 8000a32:	bf00      	nop
 8000a34:	3758      	adds	r7, #88	@ 0x58
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b0a2      	sub	sp, #136	@ 0x88
 8000a3e:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a40:	463b      	mov	r3, r7
 8000a42:	2288      	movs	r2, #136	@ 0x88
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f007 ffc2 	bl	80089d0 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000a4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a50:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000a52:	2300      	movs	r3, #0
 8000a54:	66bb      	str	r3, [r7, #104]	@ 0x68
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000a56:	2302      	movs	r3, #2
 8000a58:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 8000a5e:	230d      	movs	r3, #13
 8000a60:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8000a62:	2311      	movs	r3, #17
 8000a64:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a66:	2302      	movs	r3, #2
 8000a68:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000a6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a72:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a74:	463b      	mov	r3, r7
 8000a76:	4618      	mov	r0, r3
 8000a78:	f003 f884 	bl	8003b84 <HAL_RCCEx_PeriphCLKConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <PeriphCommonClock_Config+0x4c>
	{
		Error_Handler();
 8000a82:	f000 f817 	bl	8000ab4 <Error_Handler>
	}
}
 8000a86:	bf00      	nop
 8000a88:	3788      	adds	r7, #136	@ 0x88
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a04      	ldr	r2, [pc, #16]	@ (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d101      	bne.n	8000aa6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000aa2:	f000 fe7b 	bl	800179c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40001000 	.word	0x40001000

08000ab4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <Error_Handler+0x8>

08000ac0 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8000ac4:	4b2a      	ldr	r3, [pc, #168]	@ (8000b70 <MX_SAI2_Init+0xb0>)
 8000ac6:	4a2b      	ldr	r2, [pc, #172]	@ (8000b74 <MX_SAI2_Init+0xb4>)
 8000ac8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000aca:	4b29      	ldr	r3, [pc, #164]	@ (8000b70 <MX_SAI2_Init+0xb0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000ad0:	4b27      	ldr	r3, [pc, #156]	@ (8000b70 <MX_SAI2_Init+0xb0>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000ad6:	4b26      	ldr	r3, [pc, #152]	@ (8000b70 <MX_SAI2_Init+0xb0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000adc:	4b24      	ldr	r3, [pc, #144]	@ (8000b70 <MX_SAI2_Init+0xb0>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000ae2:	4b23      	ldr	r3, [pc, #140]	@ (8000b70 <MX_SAI2_Init+0xb0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000ae8:	4b21      	ldr	r3, [pc, #132]	@ (8000b70 <MX_SAI2_Init+0xb0>)
 8000aea:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000aee:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000af0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b70 <MX_SAI2_Init+0xb0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000af6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b70 <MX_SAI2_Init+0xb0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000afc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b70 <MX_SAI2_Init+0xb0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000b02:	4b1b      	ldr	r3, [pc, #108]	@ (8000b70 <MX_SAI2_Init+0xb0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000b08:	2302      	movs	r3, #2
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4818      	ldr	r0, [pc, #96]	@ (8000b70 <MX_SAI2_Init+0xb0>)
 8000b10:	f004 fb52 	bl	80051b8 <HAL_SAI_InitProtocol>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
 8000b1a:	f7ff ffcb 	bl	8000ab4 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000b1e:	4b16      	ldr	r3, [pc, #88]	@ (8000b78 <MX_SAI2_Init+0xb8>)
 8000b20:	4a16      	ldr	r2, [pc, #88]	@ (8000b7c <MX_SAI2_Init+0xbc>)
 8000b22:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000b24:	4b14      	ldr	r3, [pc, #80]	@ (8000b78 <MX_SAI2_Init+0xb8>)
 8000b26:	2203      	movs	r2, #3
 8000b28:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000b2a:	4b13      	ldr	r3, [pc, #76]	@ (8000b78 <MX_SAI2_Init+0xb8>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b30:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <MX_SAI2_Init+0xb8>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b36:	4b10      	ldr	r3, [pc, #64]	@ (8000b78 <MX_SAI2_Init+0xb8>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <MX_SAI2_Init+0xb8>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b42:	4b0d      	ldr	r3, [pc, #52]	@ (8000b78 <MX_SAI2_Init+0xb8>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b48:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <MX_SAI2_Init+0xb8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b78 <MX_SAI2_Init+0xb8>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000b54:	2302      	movs	r3, #2
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4807      	ldr	r0, [pc, #28]	@ (8000b78 <MX_SAI2_Init+0xb8>)
 8000b5c:	f004 fb2c 	bl	80051b8 <HAL_SAI_InitProtocol>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 8000b66:	f7ff ffa5 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200006d8 	.word	0x200006d8
 8000b74:	40015804 	.word	0x40015804
 8000b78:	2000075c 	.word	0x2000075c
 8000b7c:	40015824 	.word	0x40015824

08000b80 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	@ 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a64      	ldr	r2, [pc, #400]	@ (8000d20 <HAL_SAI_MspInit+0x1a0>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d15e      	bne.n	8000c50 <HAL_SAI_MspInit+0xd0>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8000b92:	4b64      	ldr	r3, [pc, #400]	@ (8000d24 <HAL_SAI_MspInit+0x1a4>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d113      	bne.n	8000bc2 <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000b9a:	4b63      	ldr	r3, [pc, #396]	@ (8000d28 <HAL_SAI_MspInit+0x1a8>)
 8000b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b9e:	4a62      	ldr	r2, [pc, #392]	@ (8000d28 <HAL_SAI_MspInit+0x1a8>)
 8000ba0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ba4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ba6:	4b60      	ldr	r3, [pc, #384]	@ (8000d28 <HAL_SAI_MspInit+0x1a8>)
 8000ba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000baa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2105      	movs	r1, #5
 8000bb6:	204b      	movs	r0, #75	@ 0x4b
 8000bb8:	f000 fec8 	bl	800194c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000bbc:	204b      	movs	r0, #75	@ 0x4b
 8000bbe:	f000 fee1 	bl	8001984 <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 8000bc2:	4b58      	ldr	r3, [pc, #352]	@ (8000d24 <HAL_SAI_MspInit+0x1a4>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	4a56      	ldr	r2, [pc, #344]	@ (8000d24 <HAL_SAI_MspInit+0x1a4>)
 8000bca:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000bcc:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000bde:	230d      	movs	r3, #13
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4850      	ldr	r0, [pc, #320]	@ (8000d2c <HAL_SAI_MspInit+0x1ac>)
 8000bea:	f001 f94f 	bl	8001e8c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000bee:	4b50      	ldr	r3, [pc, #320]	@ (8000d30 <HAL_SAI_MspInit+0x1b0>)
 8000bf0:	4a50      	ldr	r2, [pc, #320]	@ (8000d34 <HAL_SAI_MspInit+0x1b4>)
 8000bf2:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000bf4:	4b4e      	ldr	r3, [pc, #312]	@ (8000d30 <HAL_SAI_MspInit+0x1b0>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bfa:	4b4d      	ldr	r3, [pc, #308]	@ (8000d30 <HAL_SAI_MspInit+0x1b0>)
 8000bfc:	2210      	movs	r2, #16
 8000bfe:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c00:	4b4b      	ldr	r3, [pc, #300]	@ (8000d30 <HAL_SAI_MspInit+0x1b0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000c06:	4b4a      	ldr	r3, [pc, #296]	@ (8000d30 <HAL_SAI_MspInit+0x1b0>)
 8000c08:	2280      	movs	r2, #128	@ 0x80
 8000c0a:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c0c:	4b48      	ldr	r3, [pc, #288]	@ (8000d30 <HAL_SAI_MspInit+0x1b0>)
 8000c0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c12:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c14:	4b46      	ldr	r3, [pc, #280]	@ (8000d30 <HAL_SAI_MspInit+0x1b0>)
 8000c16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c1a:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000c1c:	4b44      	ldr	r3, [pc, #272]	@ (8000d30 <HAL_SAI_MspInit+0x1b0>)
 8000c1e:	2220      	movs	r2, #32
 8000c20:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8000c22:	4b43      	ldr	r3, [pc, #268]	@ (8000d30 <HAL_SAI_MspInit+0x1b0>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000c28:	4841      	ldr	r0, [pc, #260]	@ (8000d30 <HAL_SAI_MspInit+0x1b0>)
 8000c2a:	f000 feb9 	bl	80019a0 <HAL_DMA_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8000c34:	f7ff ff3e 	bl	8000ab4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a3d      	ldr	r2, [pc, #244]	@ (8000d30 <HAL_SAI_MspInit+0x1b0>)
 8000c3c:	671a      	str	r2, [r3, #112]	@ 0x70
 8000c3e:	4a3c      	ldr	r2, [pc, #240]	@ (8000d30 <HAL_SAI_MspInit+0x1b0>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a3a      	ldr	r2, [pc, #232]	@ (8000d30 <HAL_SAI_MspInit+0x1b0>)
 8000c48:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000c4a:	4a39      	ldr	r2, [pc, #228]	@ (8000d30 <HAL_SAI_MspInit+0x1b0>)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a38      	ldr	r2, [pc, #224]	@ (8000d38 <HAL_SAI_MspInit+0x1b8>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d15e      	bne.n	8000d18 <HAL_SAI_MspInit+0x198>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8000c5a:	4b32      	ldr	r3, [pc, #200]	@ (8000d24 <HAL_SAI_MspInit+0x1a4>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d113      	bne.n	8000c8a <HAL_SAI_MspInit+0x10a>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000c62:	4b31      	ldr	r3, [pc, #196]	@ (8000d28 <HAL_SAI_MspInit+0x1a8>)
 8000c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c66:	4a30      	ldr	r2, [pc, #192]	@ (8000d28 <HAL_SAI_MspInit+0x1a8>)
 8000c68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c6e:	4b2e      	ldr	r3, [pc, #184]	@ (8000d28 <HAL_SAI_MspInit+0x1a8>)
 8000c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2105      	movs	r1, #5
 8000c7e:	204b      	movs	r0, #75	@ 0x4b
 8000c80:	f000 fe64 	bl	800194c <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000c84:	204b      	movs	r0, #75	@ 0x4b
 8000c86:	f000 fe7d 	bl	8001984 <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8000c8a:	4b26      	ldr	r3, [pc, #152]	@ (8000d24 <HAL_SAI_MspInit+0x1a4>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	4a24      	ldr	r2, [pc, #144]	@ (8000d24 <HAL_SAI_MspInit+0x1a4>)
 8000c92:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000ca6:	230d      	movs	r3, #13
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4822      	ldr	r0, [pc, #136]	@ (8000d3c <HAL_SAI_MspInit+0x1bc>)
 8000cb2:	f001 f8eb 	bl	8001e8c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 8000cb6:	4b22      	ldr	r3, [pc, #136]	@ (8000d40 <HAL_SAI_MspInit+0x1c0>)
 8000cb8:	4a22      	ldr	r2, [pc, #136]	@ (8000d44 <HAL_SAI_MspInit+0x1c4>)
 8000cba:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 8000cbc:	4b20      	ldr	r3, [pc, #128]	@ (8000d40 <HAL_SAI_MspInit+0x1c0>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d40 <HAL_SAI_MspInit+0x1c0>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d40 <HAL_SAI_MspInit+0x1c0>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8000cce:	4b1c      	ldr	r3, [pc, #112]	@ (8000d40 <HAL_SAI_MspInit+0x1c0>)
 8000cd0:	2280      	movs	r2, #128	@ 0x80
 8000cd2:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d40 <HAL_SAI_MspInit+0x1c0>)
 8000cd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cda:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cdc:	4b18      	ldr	r3, [pc, #96]	@ (8000d40 <HAL_SAI_MspInit+0x1c0>)
 8000cde:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ce2:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8000ce4:	4b16      	ldr	r3, [pc, #88]	@ (8000d40 <HAL_SAI_MspInit+0x1c0>)
 8000ce6:	2220      	movs	r2, #32
 8000ce8:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <HAL_SAI_MspInit+0x1c0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8000cf0:	4813      	ldr	r0, [pc, #76]	@ (8000d40 <HAL_SAI_MspInit+0x1c0>)
 8000cf2:	f000 fe55 	bl	80019a0 <HAL_DMA_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 8000cfc:	f7ff feda 	bl	8000ab4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a0f      	ldr	r2, [pc, #60]	@ (8000d40 <HAL_SAI_MspInit+0x1c0>)
 8000d04:	671a      	str	r2, [r3, #112]	@ 0x70
 8000d06:	4a0e      	ldr	r2, [pc, #56]	@ (8000d40 <HAL_SAI_MspInit+0x1c0>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a0c      	ldr	r2, [pc, #48]	@ (8000d40 <HAL_SAI_MspInit+0x1c0>)
 8000d10:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000d12:	4a0b      	ldr	r2, [pc, #44]	@ (8000d40 <HAL_SAI_MspInit+0x1c0>)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 8000d18:	bf00      	nop
 8000d1a:	3728      	adds	r7, #40	@ 0x28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40015804 	.word	0x40015804
 8000d24:	20000870 	.word	0x20000870
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	48000400 	.word	0x48000400
 8000d30:	200007e0 	.word	0x200007e0
 8000d34:	4002006c 	.word	0x4002006c
 8000d38:	40015824 	.word	0x40015824
 8000d3c:	48000800 	.word	0x48000800
 8000d40:	20000828 	.word	0x20000828
 8000d44:	40020080 	.word	0x40020080

08000d48 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dbc <MX_SPI3_Init+0x74>)
 8000d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000dc0 <MX_SPI3_Init+0x78>)
 8000d50:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d52:	4b1a      	ldr	r3, [pc, #104]	@ (8000dbc <MX_SPI3_Init+0x74>)
 8000d54:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d58:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d5a:	4b18      	ldr	r3, [pc, #96]	@ (8000dbc <MX_SPI3_Init+0x74>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d60:	4b16      	ldr	r3, [pc, #88]	@ (8000dbc <MX_SPI3_Init+0x74>)
 8000d62:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000d66:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d68:	4b14      	ldr	r3, [pc, #80]	@ (8000dbc <MX_SPI3_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d6e:	4b13      	ldr	r3, [pc, #76]	@ (8000dbc <MX_SPI3_Init+0x74>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d74:	4b11      	ldr	r3, [pc, #68]	@ (8000dbc <MX_SPI3_Init+0x74>)
 8000d76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d7a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <MX_SPI3_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <MX_SPI3_Init+0x74>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <MX_SPI3_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dbc <MX_SPI3_Init+0x74>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d94:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <MX_SPI3_Init+0x74>)
 8000d96:	2207      	movs	r2, #7
 8000d98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d9a:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <MX_SPI3_Init+0x74>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <MX_SPI3_Init+0x74>)
 8000da2:	2208      	movs	r2, #8
 8000da4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000da6:	4805      	ldr	r0, [pc, #20]	@ (8000dbc <MX_SPI3_Init+0x74>)
 8000da8:	f005 f99a 	bl	80060e0 <HAL_SPI_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000db2:	f7ff fe7f 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000874 	.word	0x20000874
 8000dc0:	40003c00 	.word	0x40003c00

08000dc4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	@ 0x28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a29      	ldr	r2, [pc, #164]	@ (8000e88 <HAL_SPI_MspInit+0xc4>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d14c      	bne.n	8000e80 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000de6:	4b29      	ldr	r3, [pc, #164]	@ (8000e8c <HAL_SPI_MspInit+0xc8>)
 8000de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dea:	4a28      	ldr	r2, [pc, #160]	@ (8000e8c <HAL_SPI_MspInit+0xc8>)
 8000dec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000df0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000df2:	4b26      	ldr	r3, [pc, #152]	@ (8000e8c <HAL_SPI_MspInit+0xc8>)
 8000df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfe:	4b23      	ldr	r3, [pc, #140]	@ (8000e8c <HAL_SPI_MspInit+0xc8>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	4a22      	ldr	r2, [pc, #136]	@ (8000e8c <HAL_SPI_MspInit+0xc8>)
 8000e04:	f043 0304 	orr.w	r3, r3, #4
 8000e08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0a:	4b20      	ldr	r3, [pc, #128]	@ (8000e8c <HAL_SPI_MspInit+0xc8>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0e:	f003 0304 	and.w	r3, r3, #4
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	4b1d      	ldr	r3, [pc, #116]	@ (8000e8c <HAL_SPI_MspInit+0xc8>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000e8c <HAL_SPI_MspInit+0xc8>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e22:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <HAL_SPI_MspInit+0xc8>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = VU_SCK_Pin|VU_MISO_Pin;
 8000e2e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e40:	2306      	movs	r3, #6
 8000e42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4811      	ldr	r0, [pc, #68]	@ (8000e90 <HAL_SPI_MspInit+0xcc>)
 8000e4c:	f001 f81e 	bl	8001e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VU_MOSI_Pin;
 8000e50:	2320      	movs	r3, #32
 8000e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e60:	2306      	movs	r3, #6
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(VU_MOSI_GPIO_Port, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	480a      	ldr	r0, [pc, #40]	@ (8000e94 <HAL_SPI_MspInit+0xd0>)
 8000e6c:	f001 f80e 	bl	8001e8c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2105      	movs	r1, #5
 8000e74:	2033      	movs	r0, #51	@ 0x33
 8000e76:	f000 fd69 	bl	800194c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000e7a:	2033      	movs	r0, #51	@ 0x33
 8000e7c:	f000 fd82 	bl	8001984 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000e80:	bf00      	nop
 8000e82:	3728      	adds	r7, #40	@ 0x28
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40003c00 	.word	0x40003c00
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	48000800 	.word	0x48000800
 8000e94:	48000400 	.word	0x48000400

08000e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <HAL_MspInit+0x4c>)
 8000ea0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ea2:	4a10      	ldr	r2, [pc, #64]	@ (8000ee4 <HAL_MspInit+0x4c>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <HAL_MspInit+0x4c>)
 8000eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee4 <HAL_MspInit+0x4c>)
 8000eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee4 <HAL_MspInit+0x4c>)
 8000ebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ec0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ec2:	4b08      	ldr	r3, [pc, #32]	@ (8000ee4 <HAL_MspInit+0x4c>)
 8000ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	210f      	movs	r1, #15
 8000ed2:	f06f 0001 	mvn.w	r0, #1
 8000ed6:	f000 fd39 	bl	800194c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08e      	sub	sp, #56	@ 0x38
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ef6:	4b34      	ldr	r3, [pc, #208]	@ (8000fc8 <HAL_InitTick+0xe0>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000efa:	4a33      	ldr	r2, [pc, #204]	@ (8000fc8 <HAL_InitTick+0xe0>)
 8000efc:	f043 0310 	orr.w	r3, r3, #16
 8000f00:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f02:	4b31      	ldr	r3, [pc, #196]	@ (8000fc8 <HAL_InitTick+0xe0>)
 8000f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f06:	f003 0310 	and.w	r3, r3, #16
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f0e:	f107 0210 	add.w	r2, r7, #16
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4611      	mov	r1, r2
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f002 fda1 	bl	8003a60 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f1e:	6a3b      	ldr	r3, [r7, #32]
 8000f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d103      	bne.n	8000f30 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f28:	f002 fd6e 	bl	8003a08 <HAL_RCC_GetPCLK1Freq>
 8000f2c:	6378      	str	r0, [r7, #52]	@ 0x34
 8000f2e:	e004      	b.n	8000f3a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f30:	f002 fd6a 	bl	8003a08 <HAL_RCC_GetPCLK1Freq>
 8000f34:	4603      	mov	r3, r0
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f3c:	4a23      	ldr	r2, [pc, #140]	@ (8000fcc <HAL_InitTick+0xe4>)
 8000f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f42:	0c9b      	lsrs	r3, r3, #18
 8000f44:	3b01      	subs	r3, #1
 8000f46:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f48:	4b21      	ldr	r3, [pc, #132]	@ (8000fd0 <HAL_InitTick+0xe8>)
 8000f4a:	4a22      	ldr	r2, [pc, #136]	@ (8000fd4 <HAL_InitTick+0xec>)
 8000f4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f4e:	4b20      	ldr	r3, [pc, #128]	@ (8000fd0 <HAL_InitTick+0xe8>)
 8000f50:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f54:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f56:	4a1e      	ldr	r2, [pc, #120]	@ (8000fd0 <HAL_InitTick+0xe8>)
 8000f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f5a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <HAL_InitTick+0xe8>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f62:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd0 <HAL_InitTick+0xe8>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f68:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <HAL_InitTick+0xe8>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000f6e:	4818      	ldr	r0, [pc, #96]	@ (8000fd0 <HAL_InitTick+0xe8>)
 8000f70:	f005 fd48 	bl	8006a04 <HAL_TIM_Base_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000f7a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d11b      	bne.n	8000fba <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f82:	4813      	ldr	r0, [pc, #76]	@ (8000fd0 <HAL_InitTick+0xe8>)
 8000f84:	f005 fda0 	bl	8006ac8 <HAL_TIM_Base_Start_IT>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000f8e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d111      	bne.n	8000fba <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f96:	2036      	movs	r0, #54	@ 0x36
 8000f98:	f000 fcf4 	bl	8001984 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b0f      	cmp	r3, #15
 8000fa0:	d808      	bhi.n	8000fb4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	6879      	ldr	r1, [r7, #4]
 8000fa6:	2036      	movs	r0, #54	@ 0x36
 8000fa8:	f000 fcd0 	bl	800194c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fac:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd8 <HAL_InitTick+0xf0>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	e002      	b.n	8000fba <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000fba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3738      	adds	r7, #56	@ 0x38
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	431bde83 	.word	0x431bde83
 8000fd0:	200008d8 	.word	0x200008d8
 8000fd4:	40001000 	.word	0x40001000
 8000fd8:	20000004 	.word	0x20000004

08000fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <NMI_Handler+0x4>

08000fe4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <HardFault_Handler+0x4>

08000fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <MemManage_Handler+0x4>

08000ff4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <UsageFault_Handler+0x4>

08001004 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8001018:	4802      	ldr	r0, [pc, #8]	@ (8001024 <DMA1_Channel6_IRQHandler+0x10>)
 800101a:	f000 fe58 	bl	8001cce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200007e0 	.word	0x200007e0

08001028 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 800102c:	4802      	ldr	r0, [pc, #8]	@ (8001038 <DMA1_Channel7_IRQHandler+0x10>)
 800102e:	f000 fe4e 	bl	8001cce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000828 	.word	0x20000828

0800103c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001040:	4802      	ldr	r0, [pc, #8]	@ (800104c <USART2_IRQHandler+0x10>)
 8001042:	f006 f87d 	bl	8007140 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000928 	.word	0x20000928

08001050 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001054:	4802      	ldr	r0, [pc, #8]	@ (8001060 <SPI3_IRQHandler+0x10>)
 8001056:	f005 fa5d 	bl	8006514 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000874 	.word	0x20000874

08001064 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001068:	4802      	ldr	r0, [pc, #8]	@ (8001074 <TIM6_DAC_IRQHandler+0x10>)
 800106a:	f005 fd9d 	bl	8006ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200008d8 	.word	0x200008d8

08001078 <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 800107c:	4803      	ldr	r0, [pc, #12]	@ (800108c <SAI2_IRQHandler+0x14>)
 800107e:	f004 fbe3 	bl	8005848 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 8001082:	4803      	ldr	r0, [pc, #12]	@ (8001090 <SAI2_IRQHandler+0x18>)
 8001084:	f004 fbe0 	bl	8005848 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200006d8 	.word	0x200006d8
 8001090:	2000075c 	.word	0x2000075c

08001094 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	e00a      	b.n	80010bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010a6:	f3af 8000 	nop.w
 80010aa:	4601      	mov	r1, r0
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	60ba      	str	r2, [r7, #8]
 80010b2:	b2ca      	uxtb	r2, r1
 80010b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	3301      	adds	r3, #1
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	dbf0      	blt.n	80010a6 <_read+0x12>
  }

  return len;
 80010c4:	687b      	ldr	r3, [r7, #4]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	60f8      	str	r0, [r7, #12]
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	e009      	b.n	80010f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	1c5a      	adds	r2, r3, #1
 80010e4:	60ba      	str	r2, [r7, #8]
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fb79 	bl	80007e0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	3301      	adds	r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	dbf1      	blt.n	80010e0 <_write+0x12>
  }
  return len;
 80010fc:	687b      	ldr	r3, [r7, #4]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <_close>:

int _close(int file)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800110e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001112:	4618      	mov	r0, r3
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
 8001126:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800112e:	605a      	str	r2, [r3, #4]
  return 0;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <_isatty>:

int _isatty(int file)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001178:	4a14      	ldr	r2, [pc, #80]	@ (80011cc <_sbrk+0x5c>)
 800117a:	4b15      	ldr	r3, [pc, #84]	@ (80011d0 <_sbrk+0x60>)
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001184:	4b13      	ldr	r3, [pc, #76]	@ (80011d4 <_sbrk+0x64>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d102      	bne.n	8001192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800118c:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <_sbrk+0x64>)
 800118e:	4a12      	ldr	r2, [pc, #72]	@ (80011d8 <_sbrk+0x68>)
 8001190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001192:	4b10      	ldr	r3, [pc, #64]	@ (80011d4 <_sbrk+0x64>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	429a      	cmp	r2, r3
 800119e:	d207      	bcs.n	80011b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a0:	f007 fc64 	bl	8008a6c <__errno>
 80011a4:	4603      	mov	r3, r0
 80011a6:	220c      	movs	r2, #12
 80011a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011ae:	e009      	b.n	80011c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b0:	4b08      	ldr	r3, [pc, #32]	@ (80011d4 <_sbrk+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b6:	4b07      	ldr	r3, [pc, #28]	@ (80011d4 <_sbrk+0x64>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	4a05      	ldr	r2, [pc, #20]	@ (80011d4 <_sbrk+0x64>)
 80011c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011c2:	68fb      	ldr	r3, [r7, #12]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20018000 	.word	0x20018000
 80011d0:	00000400 	.word	0x00000400
 80011d4:	20000924 	.word	0x20000924
 80011d8:	20000bc8 	.word	0x20000bc8

080011dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011e0:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <SystemInit+0x20>)
 80011e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011e6:	4a05      	ldr	r2, [pc, #20]	@ (80011fc <SystemInit+0x20>)
 80011e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001204:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <MX_USART2_UART_Init+0x58>)
 8001206:	4a15      	ldr	r2, [pc, #84]	@ (800125c <MX_USART2_UART_Init+0x5c>)
 8001208:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800120a:	4b13      	ldr	r3, [pc, #76]	@ (8001258 <MX_USART2_UART_Init+0x58>)
 800120c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001210:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001212:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <MX_USART2_UART_Init+0x58>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001218:	4b0f      	ldr	r3, [pc, #60]	@ (8001258 <MX_USART2_UART_Init+0x58>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800121e:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <MX_USART2_UART_Init+0x58>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001224:	4b0c      	ldr	r3, [pc, #48]	@ (8001258 <MX_USART2_UART_Init+0x58>)
 8001226:	220c      	movs	r2, #12
 8001228:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122a:	4b0b      	ldr	r3, [pc, #44]	@ (8001258 <MX_USART2_UART_Init+0x58>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001230:	4b09      	ldr	r3, [pc, #36]	@ (8001258 <MX_USART2_UART_Init+0x58>)
 8001232:	2200      	movs	r2, #0
 8001234:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001236:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <MX_USART2_UART_Init+0x58>)
 8001238:	2200      	movs	r2, #0
 800123a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800123c:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <MX_USART2_UART_Init+0x58>)
 800123e:	2200      	movs	r2, #0
 8001240:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001242:	4805      	ldr	r0, [pc, #20]	@ (8001258 <MX_USART2_UART_Init+0x58>)
 8001244:	f005 fea4 	bl	8006f90 <HAL_UART_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800124e:	f7ff fc31 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000928 	.word	0x20000928
 800125c:	40004400 	.word	0x40004400

08001260 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b0ac      	sub	sp, #176	@ 0xb0
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	2288      	movs	r2, #136	@ 0x88
 800127e:	2100      	movs	r1, #0
 8001280:	4618      	mov	r0, r3
 8001282:	f007 fba5 	bl	80089d0 <memset>
  if(uartHandle->Instance==USART2)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a25      	ldr	r2, [pc, #148]	@ (8001320 <HAL_UART_MspInit+0xc0>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d143      	bne.n	8001318 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001290:	2302      	movs	r3, #2
 8001292:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001294:	2300      	movs	r3, #0
 8001296:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	4618      	mov	r0, r3
 800129e:	f002 fc71 	bl	8003b84 <HAL_RCCEx_PeriphCLKConfig>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012a8:	f7ff fc04 	bl	8000ab4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <HAL_UART_MspInit+0xc4>)
 80012ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b0:	4a1c      	ldr	r2, [pc, #112]	@ (8001324 <HAL_UART_MspInit+0xc4>)
 80012b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80012b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <HAL_UART_MspInit+0xc4>)
 80012ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c4:	4b17      	ldr	r3, [pc, #92]	@ (8001324 <HAL_UART_MspInit+0xc4>)
 80012c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c8:	4a16      	ldr	r2, [pc, #88]	@ (8001324 <HAL_UART_MspInit+0xc4>)
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d0:	4b14      	ldr	r3, [pc, #80]	@ (8001324 <HAL_UART_MspInit+0xc4>)
 80012d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012dc:	230c      	movs	r3, #12
 80012de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ee:	2303      	movs	r3, #3
 80012f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012f4:	2307      	movs	r3, #7
 80012f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012fe:	4619      	mov	r1, r3
 8001300:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001304:	f000 fdc2 	bl	8001e8c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001308:	2200      	movs	r2, #0
 800130a:	2105      	movs	r1, #5
 800130c:	2026      	movs	r0, #38	@ 0x26
 800130e:	f000 fb1d 	bl	800194c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001312:	2026      	movs	r0, #38	@ 0x26
 8001314:	f000 fb36 	bl	8001984 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001318:	bf00      	nop
 800131a:	37b0      	adds	r7, #176	@ 0xb0
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40004400 	.word	0x40004400
 8001324:	40021000 	.word	0x40021000

08001328 <Reset_Handler>:
 8001328:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001360 <LoopForever+0x2>
 800132c:	f7ff ff56 	bl	80011dc <SystemInit>
 8001330:	480c      	ldr	r0, [pc, #48]	@ (8001364 <LoopForever+0x6>)
 8001332:	490d      	ldr	r1, [pc, #52]	@ (8001368 <LoopForever+0xa>)
 8001334:	4a0d      	ldr	r2, [pc, #52]	@ (800136c <LoopForever+0xe>)
 8001336:	2300      	movs	r3, #0
 8001338:	e002      	b.n	8001340 <LoopCopyDataInit>

0800133a <CopyDataInit>:
 800133a:	58d4      	ldr	r4, [r2, r3]
 800133c:	50c4      	str	r4, [r0, r3]
 800133e:	3304      	adds	r3, #4

08001340 <LoopCopyDataInit>:
 8001340:	18c4      	adds	r4, r0, r3
 8001342:	428c      	cmp	r4, r1
 8001344:	d3f9      	bcc.n	800133a <CopyDataInit>
 8001346:	4a0a      	ldr	r2, [pc, #40]	@ (8001370 <LoopForever+0x12>)
 8001348:	4c0a      	ldr	r4, [pc, #40]	@ (8001374 <LoopForever+0x16>)
 800134a:	2300      	movs	r3, #0
 800134c:	e001      	b.n	8001352 <LoopFillZerobss>

0800134e <FillZerobss>:
 800134e:	6013      	str	r3, [r2, #0]
 8001350:	3204      	adds	r2, #4

08001352 <LoopFillZerobss>:
 8001352:	42a2      	cmp	r2, r4
 8001354:	d3fb      	bcc.n	800134e <FillZerobss>
 8001356:	f007 fb8f 	bl	8008a78 <__libc_init_array>
 800135a:	f7ff facb 	bl	80008f4 <main>

0800135e <LoopForever>:
 800135e:	e7fe      	b.n	800135e <LoopForever>
 8001360:	20018000 	.word	0x20018000
 8001364:	20000000 	.word	0x20000000
 8001368:	20000068 	.word	0x20000068
 800136c:	080099e8 	.word	0x080099e8
 8001370:	20000068 	.word	0x20000068
 8001374:	20000bc4 	.word	0x20000bc4

08001378 <ADC1_2_IRQHandler>:
 8001378:	e7fe      	b.n	8001378 <ADC1_2_IRQHandler>
	...

0800137c <MCP23S17_WriteRegister>:
h_MCP23S17_t hMCP23S17;


// Function to write to a register of MCP23S17 with error handling
void MCP23S17_WriteRegister(uint8_t reg, uint8_t data)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	460a      	mov	r2, r1
 8001386:	71fb      	strb	r3, [r7, #7]
 8001388:	4613      	mov	r3, r2
 800138a:	71bb      	strb	r3, [r7, #6]
	uint8_t control_byte = MCP23S17_CONTROL_BYTE(MCP23S17_CONTROL_ADDR, VU_WRITE); // Address = 0b000
 800138c:	2340      	movs	r3, #64	@ 0x40
 800138e:	73bb      	strb	r3, [r7, #14]

	uint8_t buffer[2] = {reg, data};
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	733b      	strb	r3, [r7, #12]
 8001394:	79bb      	ldrb	r3, [r7, #6]
 8001396:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status;

	// Assert chip select
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 8001398:	2200      	movs	r2, #0
 800139a:	2180      	movs	r1, #128	@ 0x80
 800139c:	4820      	ldr	r0, [pc, #128]	@ (8001420 <MCP23S17_WriteRegister+0xa4>)
 800139e:	f000 ff1f 	bl	80021e0 <HAL_GPIO_WritePin>

	// Transmit control byte
	status = HAL_SPI_Transmit(hMCP23S17.hspi, &control_byte, 1, HAL_MAX_DELAY);
 80013a2:	4b20      	ldr	r3, [pc, #128]	@ (8001424 <MCP23S17_WriteRegister+0xa8>)
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	f107 010e 	add.w	r1, r7, #14
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013ae:	2201      	movs	r2, #1
 80013b0:	f004 ff39 	bl	8006226 <HAL_SPI_Transmit>
 80013b4:	4603      	mov	r3, r0
 80013b6:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d00c      	beq.n	80013d8 <MCP23S17_WriteRegister+0x5c>
		HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET); // Deassert chip select
 80013be:	2201      	movs	r2, #1
 80013c0:	2180      	movs	r1, #128	@ 0x80
 80013c2:	4817      	ldr	r0, [pc, #92]	@ (8001420 <MCP23S17_WriteRegister+0xa4>)
 80013c4:	f000 ff0c 	bl	80021e0 <HAL_GPIO_WritePin>
		printf("Error: Failed to transmit control byte (HAL_SPI_Transmit returned %d)\r\n", status);
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	4619      	mov	r1, r3
 80013cc:	4816      	ldr	r0, [pc, #88]	@ (8001428 <MCP23S17_WriteRegister+0xac>)
 80013ce:	f007 f9b7 	bl	8008740 <iprintf>
		Error_Handler(); // Handle the error
 80013d2:	f7ff fb6f 	bl	8000ab4 <Error_Handler>
		return; // Prevent further execution
 80013d6:	e01f      	b.n	8001418 <MCP23S17_WriteRegister+0x9c>
#if (LOGS)
	printf("SPI3 control transmission status: %d\r\n", status);
#endif

	// Transmit register address and data
	status = HAL_SPI_Transmit(hMCP23S17.hspi, buffer, 2, HAL_MAX_DELAY);
 80013d8:	4b12      	ldr	r3, [pc, #72]	@ (8001424 <MCP23S17_WriteRegister+0xa8>)
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	f107 010c 	add.w	r1, r7, #12
 80013e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013e4:	2202      	movs	r2, #2
 80013e6:	f004 ff1e 	bl	8006226 <HAL_SPI_Transmit>
 80013ea:	4603      	mov	r3, r0
 80013ec:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d00c      	beq.n	800140e <MCP23S17_WriteRegister+0x92>
		HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET); // Deassert chip select
 80013f4:	2201      	movs	r2, #1
 80013f6:	2180      	movs	r1, #128	@ 0x80
 80013f8:	4809      	ldr	r0, [pc, #36]	@ (8001420 <MCP23S17_WriteRegister+0xa4>)
 80013fa:	f000 fef1 	bl	80021e0 <HAL_GPIO_WritePin>
		printf("Error: Failed to transmit register data (HAL_SPI_Transmit returned %d)\r\n", status);
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	4619      	mov	r1, r3
 8001402:	480a      	ldr	r0, [pc, #40]	@ (800142c <MCP23S17_WriteRegister+0xb0>)
 8001404:	f007 f99c 	bl	8008740 <iprintf>
		Error_Handler(); // Handle the error
 8001408:	f7ff fb54 	bl	8000ab4 <Error_Handler>
		return; // Prevent further execution
 800140c:	e004      	b.n	8001418 <MCP23S17_WriteRegister+0x9c>
#if (LOGS)
	printf("SPI3 data Ox%X transmission to register 0x%X status: %d\r\n", data, reg, status);
#endif

	// Deassert chip select
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 800140e:	2201      	movs	r2, #1
 8001410:	2180      	movs	r1, #128	@ 0x80
 8001412:	4803      	ldr	r0, [pc, #12]	@ (8001420 <MCP23S17_WriteRegister+0xa4>)
 8001414:	f000 fee4 	bl	80021e0 <HAL_GPIO_WritePin>
}
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	48000400 	.word	0x48000400
 8001424:	200009b0 	.word	0x200009b0
 8001428:	080096b8 	.word	0x080096b8
 800142c:	08009700 	.word	0x08009700

08001430 <MCP23S17_Update_LEDs>:

void MCP23S17_Update_LEDs()
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	MCP23S17_WriteRegister(MCP23S17_OLATA, hMCP23S17.GPA);
 8001434:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <MCP23S17_Update_LEDs+0x20>)
 8001436:	791b      	ldrb	r3, [r3, #4]
 8001438:	4619      	mov	r1, r3
 800143a:	2014      	movs	r0, #20
 800143c:	f7ff ff9e 	bl	800137c <MCP23S17_WriteRegister>
	MCP23S17_WriteRegister(MCP23S17_OLATB, hMCP23S17.GPB);
 8001440:	4b03      	ldr	r3, [pc, #12]	@ (8001450 <MCP23S17_Update_LEDs+0x20>)
 8001442:	795b      	ldrb	r3, [r3, #5]
 8001444:	4619      	mov	r1, r3
 8001446:	2015      	movs	r0, #21
 8001448:	f7ff ff98 	bl	800137c <MCP23S17_WriteRegister>
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200009b0 	.word	0x200009b0

08001454 <MCP23S17_Init>:

void MCP23S17_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	hMCP23S17.hspi = &hspi3;
 8001458:	4b12      	ldr	r3, [pc, #72]	@ (80014a4 <MCP23S17_Init+0x50>)
 800145a:	4a13      	ldr	r2, [pc, #76]	@ (80014a8 <MCP23S17_Init+0x54>)
 800145c:	601a      	str	r2, [r3, #0]

	HAL_SPI_Init(hMCP23S17.hspi);
 800145e:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <MCP23S17_Init+0x50>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f004 fe3c 	bl	80060e0 <HAL_SPI_Init>

	// nRESET to base state
	HAL_GPIO_WritePin(VU_nRESET_GPIO_Port, VU_nRESET_Pin, GPIO_PIN_SET);
 8001468:	2201      	movs	r2, #1
 800146a:	2101      	movs	r1, #1
 800146c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001470:	f000 feb6 	bl	80021e0 <HAL_GPIO_WritePin>

	// nCS to reset state
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 8001474:	2201      	movs	r2, #1
 8001476:	2180      	movs	r1, #128	@ 0x80
 8001478:	480c      	ldr	r0, [pc, #48]	@ (80014ac <MCP23S17_Init+0x58>)
 800147a:	f000 feb1 	bl	80021e0 <HAL_GPIO_WritePin>

	// Set all GPIOA and GPIOB pins as outputs
	MCP23S17_WriteRegister(MCP23S17_IODIRA, MCP23S17_ALL_ON); // GPA as output
 800147e:	2100      	movs	r1, #0
 8001480:	2000      	movs	r0, #0
 8001482:	f7ff ff7b 	bl	800137c <MCP23S17_WriteRegister>
	MCP23S17_WriteRegister(MCP23S17_IODIRB, MCP23S17_ALL_ON); // GPB as output
 8001486:	2100      	movs	r1, #0
 8001488:	2001      	movs	r0, #1
 800148a:	f7ff ff77 	bl	800137c <MCP23S17_WriteRegister>

	hMCP23S17.GPA = 0xFF;	// All LEDs on GPIOA OFF
 800148e:	4b05      	ldr	r3, [pc, #20]	@ (80014a4 <MCP23S17_Init+0x50>)
 8001490:	22ff      	movs	r2, #255	@ 0xff
 8001492:	711a      	strb	r2, [r3, #4]
	hMCP23S17.GPB = 0xFF;	// All LEDs on GPIOB OFF
 8001494:	4b03      	ldr	r3, [pc, #12]	@ (80014a4 <MCP23S17_Init+0x50>)
 8001496:	22ff      	movs	r2, #255	@ 0xff
 8001498:	715a      	strb	r2, [r3, #5]

	MCP23S17_Update_LEDs();
 800149a:	f7ff ffc9 	bl	8001430 <MCP23S17_Update_LEDs>
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200009b0 	.word	0x200009b0
 80014a8:	20000874 	.word	0x20000874
 80014ac:	48000400 	.word	0x48000400

080014b0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014b4:	f3bf 8f4f 	dsb	sy
}
 80014b8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80014ba:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <__NVIC_SystemReset+0x24>)
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80014c2:	4904      	ldr	r1, [pc, #16]	@ (80014d4 <__NVIC_SystemReset+0x24>)
 80014c4:	4b04      	ldr	r3, [pc, #16]	@ (80014d8 <__NVIC_SystemReset+0x28>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80014ca:	f3bf 8f4f 	dsb	sy
}
 80014ce:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <__NVIC_SystemReset+0x20>
 80014d4:	e000ed00 	.word	0xe000ed00
 80014d8:	05fa0004 	.word	0x05fa0004

080014dc <SGTL5000_ErrorHandler>:
/**
 * @brief Error handler for SGTL5000 operations.
 * @param message: Error message to display.
 */
void SGTL5000_ErrorHandler(const char* message)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	printf("SGTL5000 Error: %s\r\n", message);
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	4803      	ldr	r0, [pc, #12]	@ (80014f4 <SGTL5000_ErrorHandler+0x18>)
 80014e8:	f007 f92a 	bl	8008740 <iprintf>
	Error_Handler();
 80014ec:	f7ff fae2 	bl	8000ab4 <Error_Handler>
	NVIC_SystemReset();
 80014f0:	f7ff ffde 	bl	80014b0 <__NVIC_SystemReset>
 80014f4:	0800974c 	.word	0x0800974c

080014f8 <SGTL5000_i2c_ReadRegister>:
 * @param address: Register address to read from.
 * @param pData: Pointer to data buffer for storing the read data.
 * @param length: Number of bytes to read.
 */
void SGTL5000_i2c_ReadRegister(uint16_t address, uint8_t* pData, uint16_t length)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af04      	add	r7, sp, #16
 80014fe:	4603      	mov	r3, r0
 8001500:	6039      	str	r1, [r7, #0]
 8001502:	80fb      	strh	r3, [r7, #6]
 8001504:	4613      	mov	r3, r2
 8001506:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hSGTL5000.hi2c, SGTL5000_CODEC,
 8001508:	4b0f      	ldr	r3, [pc, #60]	@ (8001548 <SGTL5000_i2c_ReadRegister+0x50>)
 800150a:	6818      	ldr	r0, [r3, #0]
 800150c:	88fa      	ldrh	r2, [r7, #6]
 800150e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001512:	9302      	str	r3, [sp, #8]
 8001514:	88bb      	ldrh	r3, [r7, #4]
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2302      	movs	r3, #2
 800151e:	2114      	movs	r1, #20
 8001520:	f001 f826 	bl	8002570 <HAL_I2C_Mem_Read>
 8001524:	4603      	mov	r3, r0
 8001526:	73fb      	strb	r3, [r7, #15]
			address, SGTL5000_MEM_SIZE, pData, length, HAL_MAX_DELAY);

	if (status != HAL_OK) {
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d007      	beq.n	800153e <SGTL5000_i2c_ReadRegister+0x46>
		printf("Error: Failed to read from address 0x%04X\r\n", address);
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	4619      	mov	r1, r3
 8001532:	4806      	ldr	r0, [pc, #24]	@ (800154c <SGTL5000_i2c_ReadRegister+0x54>)
 8001534:	f007 f904 	bl	8008740 <iprintf>
		SGTL5000_ErrorHandler("ReadRegister failed");
 8001538:	4805      	ldr	r0, [pc, #20]	@ (8001550 <SGTL5000_i2c_ReadRegister+0x58>)
 800153a:	f7ff ffcf 	bl	80014dc <SGTL5000_ErrorHandler>
	}
}
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200009b8 	.word	0x200009b8
 800154c:	08009764 	.word	0x08009764
 8001550:	08009790 	.word	0x08009790

08001554 <SGTL5000_i2c_WriteRegister>:
 * @brief Writes data to a register of SGTL5000 with error management.
 * @param address: Register address to write to.
 * @param value: Data value to write to the register.
 */
void SGTL5000_i2c_WriteRegister(uint16_t address, uint16_t value)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af04      	add	r7, sp, #16
 800155a:	4603      	mov	r3, r0
 800155c:	460a      	mov	r2, r1
 800155e:	80fb      	strh	r3, [r7, #6]
 8001560:	4613      	mov	r3, r2
 8001562:	80bb      	strh	r3, [r7, #4]
	uint8_t data[2] = { (uint8_t)(value >> 8), (uint8_t)(value & 0xFF) };
 8001564:	88bb      	ldrh	r3, [r7, #4]
 8001566:	0a1b      	lsrs	r3, r3, #8
 8001568:	b29b      	uxth	r3, r3
 800156a:	b2db      	uxtb	r3, r3
 800156c:	733b      	strb	r3, [r7, #12]
 800156e:	88bb      	ldrh	r3, [r7, #4]
 8001570:	b2db      	uxtb	r3, r3
 8001572:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(hSGTL5000.hi2c, SGTL5000_CODEC,
 8001574:	4b26      	ldr	r3, [pc, #152]	@ (8001610 <SGTL5000_i2c_WriteRegister+0xbc>)
 8001576:	6818      	ldr	r0, [r3, #0]
 8001578:	88fa      	ldrh	r2, [r7, #6]
 800157a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800157e:	9302      	str	r3, [sp, #8]
 8001580:	2302      	movs	r3, #2
 8001582:	9301      	str	r3, [sp, #4]
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	2302      	movs	r3, #2
 800158c:	2114      	movs	r1, #20
 800158e:	f000 fedb 	bl	8002348 <HAL_I2C_Mem_Write>
 8001592:	4603      	mov	r3, r0
 8001594:	73fb      	strb	r3, [r7, #15]
			address, SGTL5000_MEM_SIZE, data, 2, HAL_MAX_DELAY);

	// Handle all possible I2C errors
	switch (status) {
 8001596:	7bfb      	ldrb	r3, [r7, #15]
 8001598:	2b03      	cmp	r3, #3
 800159a:	d829      	bhi.n	80015f0 <SGTL5000_i2c_WriteRegister+0x9c>
 800159c:	a201      	add	r2, pc, #4	@ (adr r2, 80015a4 <SGTL5000_i2c_WriteRegister+0x50>)
 800159e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a2:	bf00      	nop
 80015a4:	08001605 	.word	0x08001605
 80015a8:	080015b5 	.word	0x080015b5
 80015ac:	080015c9 	.word	0x080015c9
 80015b0:	080015dd 	.word	0x080015dd
#endif
		break;

	case HAL_ERROR:
		// General HAL error
		printf("Error: HAL_ERROR while writing 0x%04X to address 0x%04X\r\n", value, address);
 80015b4:	88bb      	ldrh	r3, [r7, #4]
 80015b6:	88fa      	ldrh	r2, [r7, #6]
 80015b8:	4619      	mov	r1, r3
 80015ba:	4816      	ldr	r0, [pc, #88]	@ (8001614 <SGTL5000_i2c_WriteRegister+0xc0>)
 80015bc:	f007 f8c0 	bl	8008740 <iprintf>
		SGTL5000_ErrorHandler("General HAL_ERROR during WriteRegister");
 80015c0:	4815      	ldr	r0, [pc, #84]	@ (8001618 <SGTL5000_i2c_WriteRegister+0xc4>)
 80015c2:	f7ff ff8b 	bl	80014dc <SGTL5000_ErrorHandler>
		break;
 80015c6:	e01e      	b.n	8001606 <SGTL5000_i2c_WriteRegister+0xb2>

	case HAL_BUSY:
		// HAL busy error
		printf("Error: HAL_BUSY, I2C bus is busy while writing 0x%04X to 0x%04X\r\n", value, address);
 80015c8:	88bb      	ldrh	r3, [r7, #4]
 80015ca:	88fa      	ldrh	r2, [r7, #6]
 80015cc:	4619      	mov	r1, r3
 80015ce:	4813      	ldr	r0, [pc, #76]	@ (800161c <SGTL5000_i2c_WriteRegister+0xc8>)
 80015d0:	f007 f8b6 	bl	8008740 <iprintf>
		SGTL5000_ErrorHandler("I2C bus busy during WriteRegister");
 80015d4:	4812      	ldr	r0, [pc, #72]	@ (8001620 <SGTL5000_i2c_WriteRegister+0xcc>)
 80015d6:	f7ff ff81 	bl	80014dc <SGTL5000_ErrorHandler>
		break;
 80015da:	e014      	b.n	8001606 <SGTL5000_i2c_WriteRegister+0xb2>

	case HAL_TIMEOUT:
		// Timeout error
		printf("Error: HAL_TIMEOUT while writing 0x%04X to address 0x%04X\r\n", value, address);
 80015dc:	88bb      	ldrh	r3, [r7, #4]
 80015de:	88fa      	ldrh	r2, [r7, #6]
 80015e0:	4619      	mov	r1, r3
 80015e2:	4810      	ldr	r0, [pc, #64]	@ (8001624 <SGTL5000_i2c_WriteRegister+0xd0>)
 80015e4:	f007 f8ac 	bl	8008740 <iprintf>
		SGTL5000_ErrorHandler("Timeout during WriteRegister");
 80015e8:	480f      	ldr	r0, [pc, #60]	@ (8001628 <SGTL5000_i2c_WriteRegister+0xd4>)
 80015ea:	f7ff ff77 	bl	80014dc <SGTL5000_ErrorHandler>
		break;
 80015ee:	e00a      	b.n	8001606 <SGTL5000_i2c_WriteRegister+0xb2>

	default:
		// Unexpected error code
		printf("Error: Unknown error (status code: %d) while writing 0x%04X to address 0x%04X\r\n", status, value, address);
 80015f0:	7bf9      	ldrb	r1, [r7, #15]
 80015f2:	88ba      	ldrh	r2, [r7, #4]
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	480d      	ldr	r0, [pc, #52]	@ (800162c <SGTL5000_i2c_WriteRegister+0xd8>)
 80015f8:	f007 f8a2 	bl	8008740 <iprintf>
		SGTL5000_ErrorHandler("Unknown error during WriteRegister");
 80015fc:	480c      	ldr	r0, [pc, #48]	@ (8001630 <SGTL5000_i2c_WriteRegister+0xdc>)
 80015fe:	f7ff ff6d 	bl	80014dc <SGTL5000_ErrorHandler>
		break;
 8001602:	e000      	b.n	8001606 <SGTL5000_i2c_WriteRegister+0xb2>
		break;
 8001604:	bf00      	nop
	}
}
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200009b8 	.word	0x200009b8
 8001614:	080097a4 	.word	0x080097a4
 8001618:	080097e0 	.word	0x080097e0
 800161c:	08009808 	.word	0x08009808
 8001620:	0800984c 	.word	0x0800984c
 8001624:	08009870 	.word	0x08009870
 8001628:	080098ac 	.word	0x080098ac
 800162c:	080098cc 	.word	0x080098cc
 8001630:	0800991c 	.word	0x0800991c

08001634 <SGTL5000_Init>:

/**
 * @brief Initializes the SGTL5000 codec.
 */
void SGTL5000_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
	hSGTL5000.hi2c = &hi2c2;
 800163a:	4b45      	ldr	r3, [pc, #276]	@ (8001750 <SGTL5000_Init+0x11c>)
 800163c:	4a45      	ldr	r2, [pc, #276]	@ (8001754 <SGTL5000_Init+0x120>)
 800163e:	601a      	str	r2, [r3, #0]

	uint8_t chip_id_data[2];
	SGTL5000_i2c_ReadRegister(SGTL5000_CHIP_ID, chip_id_data, SGTL5000_MEM_SIZE);
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	2202      	movs	r2, #2
 8001644:	4619      	mov	r1, r3
 8001646:	2000      	movs	r0, #0
 8001648:	f7ff ff56 	bl	80014f8 <SGTL5000_i2c_ReadRegister>
	hSGTL5000.chip_id = (chip_id_data[0] << 8) | chip_id_data[1];
 800164c:	793b      	ldrb	r3, [r7, #4]
 800164e:	021b      	lsls	r3, r3, #8
 8001650:	b21a      	sxth	r2, r3
 8001652:	797b      	ldrb	r3, [r7, #5]
 8001654:	b21b      	sxth	r3, r3
 8001656:	4313      	orrs	r3, r2
 8001658:	b21b      	sxth	r3, r3
 800165a:	b29a      	uxth	r2, r3
 800165c:	4b3c      	ldr	r3, [pc, #240]	@ (8001750 <SGTL5000_Init+0x11c>)
 800165e:	809a      	strh	r2, [r3, #4]

	if (hSGTL5000.chip_id != 0xA011) { // Example CHIP_ID, replace with actual expected ID
 8001660:	4b3b      	ldr	r3, [pc, #236]	@ (8001750 <SGTL5000_Init+0x11c>)
 8001662:	889b      	ldrh	r3, [r3, #4]
 8001664:	f24a 0211 	movw	r2, #40977	@ 0xa011
 8001668:	4293      	cmp	r3, r2
 800166a:	d002      	beq.n	8001672 <SGTL5000_Init+0x3e>
		SGTL5000_ErrorHandler("Invalid CHIP_ID detected");
 800166c:	483a      	ldr	r0, [pc, #232]	@ (8001758 <SGTL5000_Init+0x124>)
 800166e:	f7ff ff35 	bl	80014dc <SGTL5000_ErrorHandler>

	// NOTE: This next Write call is needed ONLY if VDDD is
	// externally driven
	// Turn off startup power supplies to save power (Clear bit 12 and 13)
	// Write CHIP_ANA_POWER 0x4260
	mask = (1 << 12) | (1 << 13);
 8001672:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001676:	80fb      	strh	r3, [r7, #6]
	//mask = 0b0111001011111111;
	SGTL5000_i2c_WriteRegister(SGTL5000_CHIP_ANA_POWER, mask);
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	4619      	mov	r1, r3
 800167c:	2030      	movs	r0, #48	@ 0x30
 800167e:	f7ff ff69 	bl	8001554 <SGTL5000_i2c_WriteRegister>
	// NOTE: The next modify call is only needed if both VDDA and
	// VDDIO are greater than 3.1 V
	// Configure the charge pump to use the VDDIO rail (set bit 5 and bit 6)
	// Write CHIP_LINREG_CTRL 0x006C
	// VDDA and VDDIO = 3.3V so it IS necessary
	mask = (1 << 5) | (1 << 6);
 8001682:	2360      	movs	r3, #96	@ 0x60
 8001684:	80fb      	strh	r3, [r7, #6]
	SGTL5000_i2c_WriteRegister(SGTL5000_CHIP_LINREG_CTRL, mask);
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	4619      	mov	r1, r3
 800168a:	2026      	movs	r0, #38	@ 0x26
 800168c:	f7ff ff62 	bl	8001554 <SGTL5000_i2c_WriteRegister>
	// on the VDDA voltage value.
	// Set ground, ADC, DAC reference voltage (bits 8:4). The value should
	// be set to VDDA/2. This example assumes VDDA = 1.8 V. VDDA/2 = 0.9 V.
	// The bias current should be set to 50% of the nominal value (bits 3:1)
	// Write CHIP_REF_CTRL 0x004E
	mask = 0x01FF;	// VAG_VAL = 1.575V, BIAS_CTRL = -50%, SMALL_POP = 1
 8001690:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8001694:	80fb      	strh	r3, [r7, #6]
	SGTL5000_i2c_WriteRegister(SGTL5000_CHIP_REF_CTRL, mask);
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	4619      	mov	r1, r3
 800169a:	2028      	movs	r0, #40	@ 0x28
 800169c:	f7ff ff5a 	bl	8001554 <SGTL5000_i2c_WriteRegister>
	// Set LINEOUT reference voltage to VDDIO/2 (1.65 V) (bits 5:0)
	// and bias current (bits 11:8) to the recommended value of 0.36 mA
	// for 10 kOhm load with 1.0 nF capacitance
	// Write CHIP_LINE_OUT_CTRL 0x0322
	//	mask = 0x0322;	// LO_VAGCNTRL = 1.65V, OUT_CURRENT = 0.36mA (?)
	mask = 0x031E;
 80016a0:	f240 331e 	movw	r3, #798	@ 0x31e
 80016a4:	80fb      	strh	r3, [r7, #6]
	SGTL5000_i2c_WriteRegister(SGTL5000_CHIP_LINE_OUT_CTRL, mask);
 80016a6:	88fb      	ldrh	r3, [r7, #6]
 80016a8:	4619      	mov	r1, r3
 80016aa:	202c      	movs	r0, #44	@ 0x2c
 80016ac:	f7ff ff52 	bl	8001554 <SGTL5000_i2c_WriteRegister>

	// Enable short detect mode for headphone left/right
	// and center channel and set short detect current trip level
	// to 75 mA
	// Write CHIP_SHORT_CTRL 0x1106
	mask = 0x1106;	// MODE_CM = 2, MODE_LR = 1, LVLADJC = 200mA, LVLADJL = 75mA, LVLADJR = 50mA
 80016b0:	f241 1306 	movw	r3, #4358	@ 0x1106
 80016b4:	80fb      	strh	r3, [r7, #6]
	SGTL5000_i2c_WriteRegister(SGTL5000_CHIP_SHORT_CTRL, mask);
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	4619      	mov	r1, r3
 80016ba:	203c      	movs	r0, #60	@ 0x3c
 80016bc:	f7ff ff4a 	bl	8001554 <SGTL5000_i2c_WriteRegister>
	printf("SGTL5000_CHIP_SHORT_CTRL set as: 0x%04X\r\n", mask);
#endif

	// Enable Zero-cross detect if needed for HP_OUT (bit 5) and ADC (bit 1)
	// Write CHIP_ANA_CTRL 0x0133
	mask = 0x0004;	// Unmute all + SELECT_ADC = LINEIN
 80016c0:	2304      	movs	r3, #4
 80016c2:	80fb      	strh	r3, [r7, #6]
	//	mask = 0x0000;	// Unmute all + SELECT_ADC = MIC
	SGTL5000_i2c_WriteRegister(SGTL5000_CHIP_ANA_CTRL, mask);
 80016c4:	88fb      	ldrh	r3, [r7, #6]
 80016c6:	4619      	mov	r1, r3
 80016c8:	2024      	movs	r0, #36	@ 0x24
 80016ca:	f7ff ff43 	bl	8001554 <SGTL5000_i2c_WriteRegister>
#endif

	//------------Power up Inputs/Outputs/Digital Blocks---------
	// Power up LINEOUT, HP, ADC, DAC
	// Write CHIP_ANA_POWER 0x6AFF
	mask = 0x6AFF;	// LINEOUT_POWERUP, ADC_POWERUP, CAPLESS_HEADPHONE_POWERUP, DAC_POWERUP, HEADPHONE_POWERUP, REFTOP_POWERUP, ADC_MONO = stereo
 80016ce:	f646 23ff 	movw	r3, #27391	@ 0x6aff
 80016d2:	80fb      	strh	r3, [r7, #6]
	// VAG_POWERUP, VCOAMP_POWERUP = 0, LINREG_D_POWERUP, PLL_POWERUP = 0, VDDC_CHRGPMP_POWERUP, STARTUP_POWERUP = 0, LINREG_SIMPLE_POWERUP,
	// DAC_MONO = stereo
	SGTL5000_i2c_WriteRegister(SGTL5000_CHIP_ANA_POWER, mask);
 80016d4:	88fb      	ldrh	r3, [r7, #6]
 80016d6:	4619      	mov	r1, r3
 80016d8:	2030      	movs	r0, #48	@ 0x30
 80016da:	f7ff ff3b 	bl	8001554 <SGTL5000_i2c_WriteRegister>
#endif
	// Power up desired digital blocks
	// I2S_IN (bit 0), I2S_OUT (bit 1), DAP (bit 4), DAC (bit 5),
	// ADC (bit 6) are powered on
	// Write CHIP_DIG_POWER 0x0073
	mask = 0x0073;	// I2S_IN_POWERUP, I2S_OUT_POWERUP, DAP_POWERUP, DAC_POWERUP, ADC_POWERUP
 80016de:	2373      	movs	r3, #115	@ 0x73
 80016e0:	80fb      	strh	r3, [r7, #6]
	SGTL5000_i2c_WriteRegister(SGTL5000_CHIP_DIG_POWER, mask);
 80016e2:	88fb      	ldrh	r3, [r7, #6]
 80016e4:	4619      	mov	r1, r3
 80016e6:	2002      	movs	r0, #2
 80016e8:	f7ff ff34 	bl	8001554 <SGTL5000_i2c_WriteRegister>
	// Value = (int)(40*log(VAG_VAL/LO_VAGCNTRL) + 15)
	// Assuming VAG_VAL and LO_VAGCNTRL is set to 0.9 V and
	// 1.65 V respectively, the // left LO vol (bits 12:8) and right LO
	// volume (bits 4:0) value should be set // to 5
	// Write CHIP_LINE_OUT_VOL 0x0505
	mask = 0x1111;	// TODO recalculer
 80016ec:	f241 1311 	movw	r3, #4369	@ 0x1111
 80016f0:	80fb      	strh	r3, [r7, #6]
	SGTL5000_i2c_WriteRegister(SGTL5000_CHIP_LINE_OUT_VOL, mask);
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	4619      	mov	r1, r3
 80016f6:	202e      	movs	r0, #46	@ 0x2e
 80016f8:	f7ff ff2c 	bl	8001554 <SGTL5000_i2c_WriteRegister>

	// Configure SYS_FS clock to 48 kHz
	// Configure MCLK_FREQ to 256*Fs
	// Modify CHIP_CLK_CTRL->SYS_FS 0x0002 // bits 3:2
	// Modify CHIP_CLK_CTRL->MCLK_FREQ 0x0000 // bits 1:0
	mask = 0x0004;	// SYS_FS = 48kHz
 80016fc:	2304      	movs	r3, #4
 80016fe:	80fb      	strh	r3, [r7, #6]
	SGTL5000_i2c_WriteRegister(SGTL5000_CHIP_CLK_CTRL, mask);
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	4619      	mov	r1, r3
 8001704:	2004      	movs	r0, #4
 8001706:	f7ff ff25 	bl	8001554 <SGTL5000_i2c_WriteRegister>
#endif
	// Configure the I2S clocks in master mode
	// NOTE: I2S LRCLK is same as the system sample clock
	// Modify CHIP_I2S_CTRL->MS 0x0001 // bit 7
	// Non, on reste en slave!
	mask = 0x0130;	// DLEN = 16 bits
 800170a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800170e:	80fb      	strh	r3, [r7, #6]
	SGTL5000_i2c_WriteRegister(SGTL5000_CHIP_I2S_CTRL, mask);
 8001710:	88fb      	ldrh	r3, [r7, #6]
 8001712:	4619      	mov	r1, r3
 8001714:	2006      	movs	r0, #6
 8001716:	f7ff ff1d 	bl	8001554 <SGTL5000_i2c_WriteRegister>
	// Laissons tout par défaut pour l'instant
	//	mask = 0x0000;	// ADC -> DAC
	//	SGTL5000_i2c_WriteRegister(SGTL5000_CHIP_SSS_CTRL, mask);

	/* Le reste */
	mask = 0x0000;	// Unmute
 800171a:	2300      	movs	r3, #0
 800171c:	80fb      	strh	r3, [r7, #6]
	SGTL5000_i2c_WriteRegister(SGTL5000_CHIP_ADCDAC_CTRL, mask);
 800171e:	88fb      	ldrh	r3, [r7, #6]
 8001720:	4619      	mov	r1, r3
 8001722:	200e      	movs	r0, #14
 8001724:	f7ff ff16 	bl	8001554 <SGTL5000_i2c_WriteRegister>
#if (DEBUG)
	printf("SGTL5000_CHIP_ADCDAC_CTRL set as: 0x%04X\r\n", mask);
#endif

	mask = 0x3C3C;
 8001728:	f643 433c 	movw	r3, #15420	@ 0x3c3c
 800172c:	80fb      	strh	r3, [r7, #6]
	//	mask = 0x4747;
	SGTL5000_i2c_WriteRegister(SGTL5000_CHIP_DAC_VOL, mask);
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	4619      	mov	r1, r3
 8001732:	2010      	movs	r0, #16
 8001734:	f7ff ff0e 	bl	8001554 <SGTL5000_i2c_WriteRegister>
#if (DEBUG)
	printf("SGTL5000_CHIP_DAC_VOL set as: 0x%04X\r\n", mask);
#endif

	mask = 0x0251;	// BIAS_RESISTOR = 2, BIAS_VOLT = 5, GAIN = 1
 8001738:	f240 2351 	movw	r3, #593	@ 0x251
 800173c:	80fb      	strh	r3, [r7, #6]
	SGTL5000_i2c_WriteRegister(SGTL5000_CHIP_MIC_CTRL, mask);
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	4619      	mov	r1, r3
 8001742:	202a      	movs	r0, #42	@ 0x2a
 8001744:	f7ff ff06 	bl	8001554 <SGTL5000_i2c_WriteRegister>
	//	}

#if (LOGS)
	printf("SGTL5000 initialized successfully, CHIP_ID: 0x%04X\r\n", hSGTL5000.chip_id);
#endif
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	200009b8 	.word	0x200009b8
 8001754:	20000084 	.word	0x20000084
 8001758:	08009940 	.word	0x08009940

0800175c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001766:	4b0c      	ldr	r3, [pc, #48]	@ (8001798 <HAL_Init+0x3c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a0b      	ldr	r2, [pc, #44]	@ (8001798 <HAL_Init+0x3c>)
 800176c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001770:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001772:	2003      	movs	r0, #3
 8001774:	f000 f8df 	bl	8001936 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001778:	200f      	movs	r0, #15
 800177a:	f7ff fbb5 	bl	8000ee8 <HAL_InitTick>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d002      	beq.n	800178a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	71fb      	strb	r3, [r7, #7]
 8001788:	e001      	b.n	800178e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800178a:	f7ff fb85 	bl	8000e98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800178e:	79fb      	ldrb	r3, [r7, #7]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40022000 	.word	0x40022000

0800179c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017a0:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <HAL_IncTick+0x20>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <HAL_IncTick+0x24>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	4a04      	ldr	r2, [pc, #16]	@ (80017c0 <HAL_IncTick+0x24>)
 80017ae:	6013      	str	r3, [r2, #0]
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	20000008 	.word	0x20000008
 80017c0:	200009c0 	.word	0x200009c0

080017c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return uwTick;
 80017c8:	4b03      	ldr	r3, [pc, #12]	@ (80017d8 <HAL_GetTick+0x14>)
 80017ca:	681b      	ldr	r3, [r3, #0]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	200009c0 	.word	0x200009c0

080017dc <__NVIC_SetPriorityGrouping>:
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001820 <__NVIC_SetPriorityGrouping+0x44>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017f8:	4013      	ands	r3, r2
 80017fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001804:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800180c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800180e:	4a04      	ldr	r2, [pc, #16]	@ (8001820 <__NVIC_SetPriorityGrouping+0x44>)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	60d3      	str	r3, [r2, #12]
}
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <__NVIC_GetPriorityGrouping>:
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001828:	4b04      	ldr	r3, [pc, #16]	@ (800183c <__NVIC_GetPriorityGrouping+0x18>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	0a1b      	lsrs	r3, r3, #8
 800182e:	f003 0307 	and.w	r3, r3, #7
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_EnableIRQ>:
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	2b00      	cmp	r3, #0
 8001850:	db0b      	blt.n	800186a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	f003 021f 	and.w	r2, r3, #31
 8001858:	4907      	ldr	r1, [pc, #28]	@ (8001878 <__NVIC_EnableIRQ+0x38>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	095b      	lsrs	r3, r3, #5
 8001860:	2001      	movs	r0, #1
 8001862:	fa00 f202 	lsl.w	r2, r0, r2
 8001866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000e100 	.word	0xe000e100

0800187c <__NVIC_SetPriority>:
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188c:	2b00      	cmp	r3, #0
 800188e:	db0a      	blt.n	80018a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	b2da      	uxtb	r2, r3
 8001894:	490c      	ldr	r1, [pc, #48]	@ (80018c8 <__NVIC_SetPriority+0x4c>)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	0112      	lsls	r2, r2, #4
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	440b      	add	r3, r1
 80018a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80018a4:	e00a      	b.n	80018bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4908      	ldr	r1, [pc, #32]	@ (80018cc <__NVIC_SetPriority+0x50>)
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	3b04      	subs	r3, #4
 80018b4:	0112      	lsls	r2, r2, #4
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	440b      	add	r3, r1
 80018ba:	761a      	strb	r2, [r3, #24]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000e100 	.word	0xe000e100
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <NVIC_EncodePriority>:
{
 80018d0:	b480      	push	{r7}
 80018d2:	b089      	sub	sp, #36	@ 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f1c3 0307 	rsb	r3, r3, #7
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	bf28      	it	cs
 80018ee:	2304      	movcs	r3, #4
 80018f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3304      	adds	r3, #4
 80018f6:	2b06      	cmp	r3, #6
 80018f8:	d902      	bls.n	8001900 <NVIC_EncodePriority+0x30>
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3b03      	subs	r3, #3
 80018fe:	e000      	b.n	8001902 <NVIC_EncodePriority+0x32>
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43da      	mvns	r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	401a      	ands	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001918:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	43d9      	mvns	r1, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	4313      	orrs	r3, r2
}
 800192a:	4618      	mov	r0, r3
 800192c:	3724      	adds	r7, #36	@ 0x24
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff ff4c 	bl	80017dc <__NVIC_SetPriorityGrouping>
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
 8001958:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800195e:	f7ff ff61 	bl	8001824 <__NVIC_GetPriorityGrouping>
 8001962:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	68b9      	ldr	r1, [r7, #8]
 8001968:	6978      	ldr	r0, [r7, #20]
 800196a:	f7ff ffb1 	bl	80018d0 <NVIC_EncodePriority>
 800196e:	4602      	mov	r2, r0
 8001970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001974:	4611      	mov	r1, r2
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ff80 	bl	800187c <__NVIC_SetPriority>
}
 800197c:	bf00      	nop
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff ff54 	bl	8001840 <__NVIC_EnableIRQ>
}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e098      	b.n	8001ae4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	4b4d      	ldr	r3, [pc, #308]	@ (8001af0 <HAL_DMA_Init+0x150>)
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d80f      	bhi.n	80019de <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	461a      	mov	r2, r3
 80019c4:	4b4b      	ldr	r3, [pc, #300]	@ (8001af4 <HAL_DMA_Init+0x154>)
 80019c6:	4413      	add	r3, r2
 80019c8:	4a4b      	ldr	r2, [pc, #300]	@ (8001af8 <HAL_DMA_Init+0x158>)
 80019ca:	fba2 2303 	umull	r2, r3, r2, r3
 80019ce:	091b      	lsrs	r3, r3, #4
 80019d0:	009a      	lsls	r2, r3, #2
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a48      	ldr	r2, [pc, #288]	@ (8001afc <HAL_DMA_Init+0x15c>)
 80019da:	641a      	str	r2, [r3, #64]	@ 0x40
 80019dc:	e00e      	b.n	80019fc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	4b46      	ldr	r3, [pc, #280]	@ (8001b00 <HAL_DMA_Init+0x160>)
 80019e6:	4413      	add	r3, r2
 80019e8:	4a43      	ldr	r2, [pc, #268]	@ (8001af8 <HAL_DMA_Init+0x158>)
 80019ea:	fba2 2303 	umull	r2, r3, r2, r3
 80019ee:	091b      	lsrs	r3, r3, #4
 80019f0:	009a      	lsls	r2, r3, #2
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a42      	ldr	r2, [pc, #264]	@ (8001b04 <HAL_DMA_Init+0x164>)
 80019fa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2202      	movs	r2, #2
 8001a00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001a12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001a20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001a56:	d039      	beq.n	8001acc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5c:	4a27      	ldr	r2, [pc, #156]	@ (8001afc <HAL_DMA_Init+0x15c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d11a      	bne.n	8001a98 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001a62:	4b29      	ldr	r3, [pc, #164]	@ (8001b08 <HAL_DMA_Init+0x168>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6a:	f003 031c 	and.w	r3, r3, #28
 8001a6e:	210f      	movs	r1, #15
 8001a70:	fa01 f303 	lsl.w	r3, r1, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	4924      	ldr	r1, [pc, #144]	@ (8001b08 <HAL_DMA_Init+0x168>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a7c:	4b22      	ldr	r3, [pc, #136]	@ (8001b08 <HAL_DMA_Init+0x168>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6859      	ldr	r1, [r3, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a88:	f003 031c 	and.w	r3, r3, #28
 8001a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a90:	491d      	ldr	r1, [pc, #116]	@ (8001b08 <HAL_DMA_Init+0x168>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	600b      	str	r3, [r1, #0]
 8001a96:	e019      	b.n	8001acc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001a98:	4b1c      	ldr	r3, [pc, #112]	@ (8001b0c <HAL_DMA_Init+0x16c>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa0:	f003 031c 	and.w	r3, r3, #28
 8001aa4:	210f      	movs	r1, #15
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	4917      	ldr	r1, [pc, #92]	@ (8001b0c <HAL_DMA_Init+0x16c>)
 8001aae:	4013      	ands	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001ab2:	4b16      	ldr	r3, [pc, #88]	@ (8001b0c <HAL_DMA_Init+0x16c>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6859      	ldr	r1, [r3, #4]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001abe:	f003 031c 	and.w	r3, r3, #28
 8001ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac6:	4911      	ldr	r1, [pc, #68]	@ (8001b0c <HAL_DMA_Init+0x16c>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	40020407 	.word	0x40020407
 8001af4:	bffdfff8 	.word	0xbffdfff8
 8001af8:	cccccccd 	.word	0xcccccccd
 8001afc:	40020000 	.word	0x40020000
 8001b00:	bffdfbf8 	.word	0xbffdfbf8
 8001b04:	40020400 	.word	0x40020400
 8001b08:	400200a8 	.word	0x400200a8
 8001b0c:	400204a8 	.word	0x400204a8

08001b10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
 8001b1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d101      	bne.n	8001b30 <HAL_DMA_Start_IT+0x20>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	e04b      	b.n	8001bc8 <HAL_DMA_Start_IT+0xb8>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d13a      	bne.n	8001bba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2202      	movs	r2, #2
 8001b48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0201 	bic.w	r2, r2, #1
 8001b60:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	68b9      	ldr	r1, [r7, #8]
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f000 f95f 	bl	8001e2c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d008      	beq.n	8001b88 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f042 020e 	orr.w	r2, r2, #14
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	e00f      	b.n	8001ba8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0204 	bic.w	r2, r2, #4
 8001b96:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 020a 	orr.w	r2, r2, #10
 8001ba6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0201 	orr.w	r2, r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	e005      	b.n	8001bc6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d008      	beq.n	8001bfa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2204      	movs	r2, #4
 8001bec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e022      	b.n	8001c40 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 020e 	bic.w	r2, r2, #14
 8001c08:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0201 	bic.w	r2, r2, #1
 8001c18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1e:	f003 021c 	and.w	r2, r3, #28
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c26:	2101      	movs	r1, #1
 8001c28:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d005      	beq.n	8001c70 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2204      	movs	r2, #4
 8001c68:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	73fb      	strb	r3, [r7, #15]
 8001c6e:	e029      	b.n	8001cc4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 020e 	bic.w	r2, r2, #14
 8001c7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0201 	bic.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c94:	f003 021c 	and.w	r2, r3, #28
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	4798      	blx	r3
    }
  }
  return status;
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b084      	sub	sp, #16
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cea:	f003 031c 	and.w	r3, r3, #28
 8001cee:	2204      	movs	r2, #4
 8001cf0:	409a      	lsls	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d026      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x7a>
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d021      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0320 	and.w	r3, r3, #32
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d107      	bne.n	8001d22 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 0204 	bic.w	r2, r2, #4
 8001d20:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d26:	f003 021c 	and.w	r2, r3, #28
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	2104      	movs	r1, #4
 8001d30:	fa01 f202 	lsl.w	r2, r1, r2
 8001d34:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d071      	beq.n	8001e22 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001d46:	e06c      	b.n	8001e22 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4c:	f003 031c 	and.w	r3, r3, #28
 8001d50:	2202      	movs	r2, #2
 8001d52:	409a      	lsls	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d02e      	beq.n	8001dba <HAL_DMA_IRQHandler+0xec>
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d029      	beq.n	8001dba <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0320 	and.w	r3, r3, #32
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d10b      	bne.n	8001d8c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 020a 	bic.w	r2, r2, #10
 8001d82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d90:	f003 021c 	and.w	r2, r3, #28
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d98:	2102      	movs	r1, #2
 8001d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d9e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d038      	beq.n	8001e22 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001db8:	e033      	b.n	8001e22 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dbe:	f003 031c 	and.w	r3, r3, #28
 8001dc2:	2208      	movs	r2, #8
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d02a      	beq.n	8001e24 <HAL_DMA_IRQHandler+0x156>
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d025      	beq.n	8001e24 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 020e 	bic.w	r2, r2, #14
 8001de6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dec:	f003 021c 	and.w	r2, r3, #28
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df4:	2101      	movs	r1, #1
 8001df6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dfa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d004      	beq.n	8001e24 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001e22:	bf00      	nop
 8001e24:	bf00      	nop
}
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
 8001e38:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3e:	f003 021c 	and.w	r2, r3, #28
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	2101      	movs	r1, #1
 8001e48:	fa01 f202 	lsl.w	r2, r1, r2
 8001e4c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2b10      	cmp	r3, #16
 8001e5c:	d108      	bne.n	8001e70 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e6e:	e007      	b.n	8001e80 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68ba      	ldr	r2, [r7, #8]
 8001e76:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	60da      	str	r2, [r3, #12]
}
 8001e80:	bf00      	nop
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e9a:	e17f      	b.n	800219c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 8171 	beq.w	8002196 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d005      	beq.n	8001ecc <HAL_GPIO_Init+0x40>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d130      	bne.n	8001f2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f02:	2201      	movs	r2, #1
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	091b      	lsrs	r3, r3, #4
 8001f18:	f003 0201 	and.w	r2, r3, #1
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	d118      	bne.n	8001f6c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f40:	2201      	movs	r2, #1
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	08db      	lsrs	r3, r3, #3
 8001f56:	f003 0201 	and.w	r2, r3, #1
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d017      	beq.n	8001fa8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	2203      	movs	r2, #3
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d123      	bne.n	8001ffc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	08da      	lsrs	r2, r3, #3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3208      	adds	r2, #8
 8001fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	220f      	movs	r2, #15
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	08da      	lsrs	r2, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3208      	adds	r2, #8
 8001ff6:	6939      	ldr	r1, [r7, #16]
 8001ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	2203      	movs	r2, #3
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	4013      	ands	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 0203 	and.w	r2, r3, #3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	4313      	orrs	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 80ac 	beq.w	8002196 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203e:	4b5f      	ldr	r3, [pc, #380]	@ (80021bc <HAL_GPIO_Init+0x330>)
 8002040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002042:	4a5e      	ldr	r2, [pc, #376]	@ (80021bc <HAL_GPIO_Init+0x330>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6613      	str	r3, [r2, #96]	@ 0x60
 800204a:	4b5c      	ldr	r3, [pc, #368]	@ (80021bc <HAL_GPIO_Init+0x330>)
 800204c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002056:	4a5a      	ldr	r2, [pc, #360]	@ (80021c0 <HAL_GPIO_Init+0x334>)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	089b      	lsrs	r3, r3, #2
 800205c:	3302      	adds	r3, #2
 800205e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002062:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	220f      	movs	r2, #15
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4013      	ands	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002080:	d025      	beq.n	80020ce <HAL_GPIO_Init+0x242>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a4f      	ldr	r2, [pc, #316]	@ (80021c4 <HAL_GPIO_Init+0x338>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d01f      	beq.n	80020ca <HAL_GPIO_Init+0x23e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a4e      	ldr	r2, [pc, #312]	@ (80021c8 <HAL_GPIO_Init+0x33c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d019      	beq.n	80020c6 <HAL_GPIO_Init+0x23a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a4d      	ldr	r2, [pc, #308]	@ (80021cc <HAL_GPIO_Init+0x340>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d013      	beq.n	80020c2 <HAL_GPIO_Init+0x236>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a4c      	ldr	r2, [pc, #304]	@ (80021d0 <HAL_GPIO_Init+0x344>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d00d      	beq.n	80020be <HAL_GPIO_Init+0x232>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a4b      	ldr	r2, [pc, #300]	@ (80021d4 <HAL_GPIO_Init+0x348>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d007      	beq.n	80020ba <HAL_GPIO_Init+0x22e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4a      	ldr	r2, [pc, #296]	@ (80021d8 <HAL_GPIO_Init+0x34c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d101      	bne.n	80020b6 <HAL_GPIO_Init+0x22a>
 80020b2:	2306      	movs	r3, #6
 80020b4:	e00c      	b.n	80020d0 <HAL_GPIO_Init+0x244>
 80020b6:	2307      	movs	r3, #7
 80020b8:	e00a      	b.n	80020d0 <HAL_GPIO_Init+0x244>
 80020ba:	2305      	movs	r3, #5
 80020bc:	e008      	b.n	80020d0 <HAL_GPIO_Init+0x244>
 80020be:	2304      	movs	r3, #4
 80020c0:	e006      	b.n	80020d0 <HAL_GPIO_Init+0x244>
 80020c2:	2303      	movs	r3, #3
 80020c4:	e004      	b.n	80020d0 <HAL_GPIO_Init+0x244>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e002      	b.n	80020d0 <HAL_GPIO_Init+0x244>
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <HAL_GPIO_Init+0x244>
 80020ce:	2300      	movs	r3, #0
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	f002 0203 	and.w	r2, r2, #3
 80020d6:	0092      	lsls	r2, r2, #2
 80020d8:	4093      	lsls	r3, r2
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	4313      	orrs	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020e0:	4937      	ldr	r1, [pc, #220]	@ (80021c0 <HAL_GPIO_Init+0x334>)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	089b      	lsrs	r3, r3, #2
 80020e6:	3302      	adds	r3, #2
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020ee:	4b3b      	ldr	r3, [pc, #236]	@ (80021dc <HAL_GPIO_Init+0x350>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4013      	ands	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4313      	orrs	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002112:	4a32      	ldr	r2, [pc, #200]	@ (80021dc <HAL_GPIO_Init+0x350>)
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002118:	4b30      	ldr	r3, [pc, #192]	@ (80021dc <HAL_GPIO_Init+0x350>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	43db      	mvns	r3, r3
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4013      	ands	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4313      	orrs	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800213c:	4a27      	ldr	r2, [pc, #156]	@ (80021dc <HAL_GPIO_Init+0x350>)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002142:	4b26      	ldr	r3, [pc, #152]	@ (80021dc <HAL_GPIO_Init+0x350>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	43db      	mvns	r3, r3
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	4013      	ands	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002166:	4a1d      	ldr	r2, [pc, #116]	@ (80021dc <HAL_GPIO_Init+0x350>)
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800216c:	4b1b      	ldr	r3, [pc, #108]	@ (80021dc <HAL_GPIO_Init+0x350>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	43db      	mvns	r3, r3
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4013      	ands	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002190:	4a12      	ldr	r2, [pc, #72]	@ (80021dc <HAL_GPIO_Init+0x350>)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	3301      	adds	r3, #1
 800219a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	fa22 f303 	lsr.w	r3, r2, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f47f ae78 	bne.w	8001e9c <HAL_GPIO_Init+0x10>
  }
}
 80021ac:	bf00      	nop
 80021ae:	bf00      	nop
 80021b0:	371c      	adds	r7, #28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40010000 	.word	0x40010000
 80021c4:	48000400 	.word	0x48000400
 80021c8:	48000800 	.word	0x48000800
 80021cc:	48000c00 	.word	0x48000c00
 80021d0:	48001000 	.word	0x48001000
 80021d4:	48001400 	.word	0x48001400
 80021d8:	48001800 	.word	0x48001800
 80021dc:	40010400 	.word	0x40010400

080021e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	807b      	strh	r3, [r7, #2]
 80021ec:	4613      	mov	r3, r2
 80021ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021f0:	787b      	ldrb	r3, [r7, #1]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021f6:	887a      	ldrh	r2, [r7, #2]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021fc:	e002      	b.n	8002204 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021fe:	887a      	ldrh	r2, [r7, #2]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e08d      	b.n	800233e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d106      	bne.n	800223c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7fe fa74 	bl	8000724 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2224      	movs	r2, #36	@ 0x24
 8002240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0201 	bic.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002260:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002270:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d107      	bne.n	800228a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	e006      	b.n	8002298 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002296:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b02      	cmp	r3, #2
 800229e:	d108      	bne.n	80022b2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	e007      	b.n	80022c2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6812      	ldr	r2, [r2, #0]
 80022cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80022d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691a      	ldr	r2, [r3, #16]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69d9      	ldr	r1, [r3, #28]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1a      	ldr	r2, [r3, #32]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2220      	movs	r2, #32
 800232a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af02      	add	r7, sp, #8
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	4608      	mov	r0, r1
 8002352:	4611      	mov	r1, r2
 8002354:	461a      	mov	r2, r3
 8002356:	4603      	mov	r3, r0
 8002358:	817b      	strh	r3, [r7, #10]
 800235a:	460b      	mov	r3, r1
 800235c:	813b      	strh	r3, [r7, #8]
 800235e:	4613      	mov	r3, r2
 8002360:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b20      	cmp	r3, #32
 800236c:	f040 80f9 	bne.w	8002562 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002370:	6a3b      	ldr	r3, [r7, #32]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d002      	beq.n	800237c <HAL_I2C_Mem_Write+0x34>
 8002376:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002378:	2b00      	cmp	r3, #0
 800237a:	d105      	bne.n	8002388 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002382:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0ed      	b.n	8002564 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800238e:	2b01      	cmp	r3, #1
 8002390:	d101      	bne.n	8002396 <HAL_I2C_Mem_Write+0x4e>
 8002392:	2302      	movs	r3, #2
 8002394:	e0e6      	b.n	8002564 <HAL_I2C_Mem_Write+0x21c>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800239e:	f7ff fa11 	bl	80017c4 <HAL_GetTick>
 80023a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	2319      	movs	r3, #25
 80023aa:	2201      	movs	r2, #1
 80023ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 fac3 	bl	800293c <I2C_WaitOnFlagUntilTimeout>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0d1      	b.n	8002564 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2221      	movs	r2, #33	@ 0x21
 80023c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2240      	movs	r2, #64	@ 0x40
 80023cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6a3a      	ldr	r2, [r7, #32]
 80023da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80023e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023e8:	88f8      	ldrh	r0, [r7, #6]
 80023ea:	893a      	ldrh	r2, [r7, #8]
 80023ec:	8979      	ldrh	r1, [r7, #10]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	9301      	str	r3, [sp, #4]
 80023f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	4603      	mov	r3, r0
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 f9d3 	bl	80027a4 <I2C_RequestMemoryWrite>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e0a9      	b.n	8002564 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002414:	b29b      	uxth	r3, r3
 8002416:	2bff      	cmp	r3, #255	@ 0xff
 8002418:	d90e      	bls.n	8002438 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	22ff      	movs	r2, #255	@ 0xff
 800241e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002424:	b2da      	uxtb	r2, r3
 8002426:	8979      	ldrh	r1, [r7, #10]
 8002428:	2300      	movs	r3, #0
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 fc47 	bl	8002cc4 <I2C_TransferConfig>
 8002436:	e00f      	b.n	8002458 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800243c:	b29a      	uxth	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002446:	b2da      	uxtb	r2, r3
 8002448:	8979      	ldrh	r1, [r7, #10]
 800244a:	2300      	movs	r3, #0
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 fc36 	bl	8002cc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 fac6 	bl	80029ee <I2C_WaitOnTXISFlagUntilTimeout>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e07b      	b.n	8002564 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002470:	781a      	ldrb	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002486:	b29b      	uxth	r3, r3
 8002488:	3b01      	subs	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002494:	3b01      	subs	r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d034      	beq.n	8002510 <HAL_I2C_Mem_Write+0x1c8>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d130      	bne.n	8002510 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b4:	2200      	movs	r2, #0
 80024b6:	2180      	movs	r1, #128	@ 0x80
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 fa3f 	bl	800293c <I2C_WaitOnFlagUntilTimeout>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e04d      	b.n	8002564 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	2bff      	cmp	r3, #255	@ 0xff
 80024d0:	d90e      	bls.n	80024f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	22ff      	movs	r2, #255	@ 0xff
 80024d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	8979      	ldrh	r1, [r7, #10]
 80024e0:	2300      	movs	r3, #0
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 fbeb 	bl	8002cc4 <I2C_TransferConfig>
 80024ee:	e00f      	b.n	8002510 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	8979      	ldrh	r1, [r7, #10]
 8002502:	2300      	movs	r3, #0
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 fbda 	bl	8002cc4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002514:	b29b      	uxth	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d19e      	bne.n	8002458 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 faac 	bl	8002a7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e01a      	b.n	8002564 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2220      	movs	r2, #32
 8002534:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6859      	ldr	r1, [r3, #4]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4b0a      	ldr	r3, [pc, #40]	@ (800256c <HAL_I2C_Mem_Write+0x224>)
 8002542:	400b      	ands	r3, r1
 8002544:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2220      	movs	r2, #32
 800254a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	e000      	b.n	8002564 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002562:	2302      	movs	r3, #2
  }
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	fe00e800 	.word	0xfe00e800

08002570 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af02      	add	r7, sp, #8
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	4608      	mov	r0, r1
 800257a:	4611      	mov	r1, r2
 800257c:	461a      	mov	r2, r3
 800257e:	4603      	mov	r3, r0
 8002580:	817b      	strh	r3, [r7, #10]
 8002582:	460b      	mov	r3, r1
 8002584:	813b      	strh	r3, [r7, #8]
 8002586:	4613      	mov	r3, r2
 8002588:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b20      	cmp	r3, #32
 8002594:	f040 80fd 	bne.w	8002792 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d002      	beq.n	80025a4 <HAL_I2C_Mem_Read+0x34>
 800259e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d105      	bne.n	80025b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025aa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e0f1      	b.n	8002794 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_I2C_Mem_Read+0x4e>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e0ea      	b.n	8002794 <HAL_I2C_Mem_Read+0x224>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025c6:	f7ff f8fd 	bl	80017c4 <HAL_GetTick>
 80025ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	2319      	movs	r3, #25
 80025d2:	2201      	movs	r2, #1
 80025d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 f9af 	bl	800293c <I2C_WaitOnFlagUntilTimeout>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0d5      	b.n	8002794 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2222      	movs	r2, #34	@ 0x22
 80025ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2240      	movs	r2, #64	@ 0x40
 80025f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6a3a      	ldr	r2, [r7, #32]
 8002602:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002608:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002610:	88f8      	ldrh	r0, [r7, #6]
 8002612:	893a      	ldrh	r2, [r7, #8]
 8002614:	8979      	ldrh	r1, [r7, #10]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	9301      	str	r3, [sp, #4]
 800261a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	4603      	mov	r3, r0
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 f913 	bl	800284c <I2C_RequestMemoryRead>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e0ad      	b.n	8002794 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800263c:	b29b      	uxth	r3, r3
 800263e:	2bff      	cmp	r3, #255	@ 0xff
 8002640:	d90e      	bls.n	8002660 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2201      	movs	r2, #1
 8002646:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800264c:	b2da      	uxtb	r2, r3
 800264e:	8979      	ldrh	r1, [r7, #10]
 8002650:	4b52      	ldr	r3, [pc, #328]	@ (800279c <HAL_I2C_Mem_Read+0x22c>)
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 fb33 	bl	8002cc4 <I2C_TransferConfig>
 800265e:	e00f      	b.n	8002680 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800266e:	b2da      	uxtb	r2, r3
 8002670:	8979      	ldrh	r1, [r7, #10]
 8002672:	4b4a      	ldr	r3, [pc, #296]	@ (800279c <HAL_I2C_Mem_Read+0x22c>)
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 fb22 	bl	8002cc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002686:	2200      	movs	r2, #0
 8002688:	2104      	movs	r1, #4
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 f956 	bl	800293c <I2C_WaitOnFlagUntilTimeout>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e07c      	b.n	8002794 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ac:	1c5a      	adds	r2, r3, #1
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d034      	beq.n	8002740 <HAL_I2C_Mem_Read+0x1d0>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d130      	bne.n	8002740 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e4:	2200      	movs	r2, #0
 80026e6:	2180      	movs	r1, #128	@ 0x80
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 f927 	bl	800293c <I2C_WaitOnFlagUntilTimeout>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e04d      	b.n	8002794 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	2bff      	cmp	r3, #255	@ 0xff
 8002700:	d90e      	bls.n	8002720 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2201      	movs	r2, #1
 8002706:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800270c:	b2da      	uxtb	r2, r3
 800270e:	8979      	ldrh	r1, [r7, #10]
 8002710:	2300      	movs	r3, #0
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 fad3 	bl	8002cc4 <I2C_TransferConfig>
 800271e:	e00f      	b.n	8002740 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002724:	b29a      	uxth	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800272e:	b2da      	uxtb	r2, r3
 8002730:	8979      	ldrh	r1, [r7, #10]
 8002732:	2300      	movs	r3, #0
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 fac2 	bl	8002cc4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002744:	b29b      	uxth	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d19a      	bne.n	8002680 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 f994 	bl	8002a7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e01a      	b.n	8002794 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2220      	movs	r2, #32
 8002764:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6859      	ldr	r1, [r3, #4]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4b0b      	ldr	r3, [pc, #44]	@ (80027a0 <HAL_I2C_Mem_Read+0x230>)
 8002772:	400b      	ands	r3, r1
 8002774:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2220      	movs	r2, #32
 800277a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800278e:	2300      	movs	r3, #0
 8002790:	e000      	b.n	8002794 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002792:	2302      	movs	r3, #2
  }
}
 8002794:	4618      	mov	r0, r3
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	80002400 	.word	0x80002400
 80027a0:	fe00e800 	.word	0xfe00e800

080027a4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	4608      	mov	r0, r1
 80027ae:	4611      	mov	r1, r2
 80027b0:	461a      	mov	r2, r3
 80027b2:	4603      	mov	r3, r0
 80027b4:	817b      	strh	r3, [r7, #10]
 80027b6:	460b      	mov	r3, r1
 80027b8:	813b      	strh	r3, [r7, #8]
 80027ba:	4613      	mov	r3, r2
 80027bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	8979      	ldrh	r1, [r7, #10]
 80027c4:	4b20      	ldr	r3, [pc, #128]	@ (8002848 <I2C_RequestMemoryWrite+0xa4>)
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 fa79 	bl	8002cc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027d2:	69fa      	ldr	r2, [r7, #28]
 80027d4:	69b9      	ldr	r1, [r7, #24]
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 f909 	bl	80029ee <I2C_WaitOnTXISFlagUntilTimeout>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e02c      	b.n	8002840 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027e6:	88fb      	ldrh	r3, [r7, #6]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d105      	bne.n	80027f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027ec:	893b      	ldrh	r3, [r7, #8]
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80027f6:	e015      	b.n	8002824 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027f8:	893b      	ldrh	r3, [r7, #8]
 80027fa:	0a1b      	lsrs	r3, r3, #8
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002806:	69fa      	ldr	r2, [r7, #28]
 8002808:	69b9      	ldr	r1, [r7, #24]
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 f8ef 	bl	80029ee <I2C_WaitOnTXISFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e012      	b.n	8002840 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800281a:	893b      	ldrh	r3, [r7, #8]
 800281c:	b2da      	uxtb	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	2200      	movs	r2, #0
 800282c:	2180      	movs	r1, #128	@ 0x80
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 f884 	bl	800293c <I2C_WaitOnFlagUntilTimeout>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	80002000 	.word	0x80002000

0800284c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af02      	add	r7, sp, #8
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	4608      	mov	r0, r1
 8002856:	4611      	mov	r1, r2
 8002858:	461a      	mov	r2, r3
 800285a:	4603      	mov	r3, r0
 800285c:	817b      	strh	r3, [r7, #10]
 800285e:	460b      	mov	r3, r1
 8002860:	813b      	strh	r3, [r7, #8]
 8002862:	4613      	mov	r3, r2
 8002864:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002866:	88fb      	ldrh	r3, [r7, #6]
 8002868:	b2da      	uxtb	r2, r3
 800286a:	8979      	ldrh	r1, [r7, #10]
 800286c:	4b20      	ldr	r3, [pc, #128]	@ (80028f0 <I2C_RequestMemoryRead+0xa4>)
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	2300      	movs	r3, #0
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 fa26 	bl	8002cc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002878:	69fa      	ldr	r2, [r7, #28]
 800287a:	69b9      	ldr	r1, [r7, #24]
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 f8b6 	bl	80029ee <I2C_WaitOnTXISFlagUntilTimeout>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e02c      	b.n	80028e6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d105      	bne.n	800289e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002892:	893b      	ldrh	r3, [r7, #8]
 8002894:	b2da      	uxtb	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	629a      	str	r2, [r3, #40]	@ 0x28
 800289c:	e015      	b.n	80028ca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800289e:	893b      	ldrh	r3, [r7, #8]
 80028a0:	0a1b      	lsrs	r3, r3, #8
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ac:	69fa      	ldr	r2, [r7, #28]
 80028ae:	69b9      	ldr	r1, [r7, #24]
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 f89c 	bl	80029ee <I2C_WaitOnTXISFlagUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e012      	b.n	80028e6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028c0:	893b      	ldrh	r3, [r7, #8]
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	2200      	movs	r2, #0
 80028d2:	2140      	movs	r1, #64	@ 0x40
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 f831 	bl	800293c <I2C_WaitOnFlagUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e000      	b.n	80028e6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	80002000 	.word	0x80002000

080028f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b02      	cmp	r3, #2
 8002908:	d103      	bne.n	8002912 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2200      	movs	r2, #0
 8002910:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b01      	cmp	r3, #1
 800291e:	d007      	beq.n	8002930 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699a      	ldr	r2, [r3, #24]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0201 	orr.w	r2, r2, #1
 800292e:	619a      	str	r2, [r3, #24]
  }
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	4613      	mov	r3, r2
 800294a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800294c:	e03b      	b.n	80029c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	6839      	ldr	r1, [r7, #0]
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 f8d6 	bl	8002b04 <I2C_IsErrorOccurred>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e041      	b.n	80029e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002968:	d02d      	beq.n	80029c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800296a:	f7fe ff2b 	bl	80017c4 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d302      	bcc.n	8002980 <I2C_WaitOnFlagUntilTimeout+0x44>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d122      	bne.n	80029c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699a      	ldr	r2, [r3, #24]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	4013      	ands	r3, r2
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	429a      	cmp	r2, r3
 800298e:	bf0c      	ite	eq
 8002990:	2301      	moveq	r3, #1
 8002992:	2300      	movne	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	461a      	mov	r2, r3
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	429a      	cmp	r2, r3
 800299c:	d113      	bne.n	80029c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a2:	f043 0220 	orr.w	r2, r3, #32
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2220      	movs	r2, #32
 80029ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e00f      	b.n	80029e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	699a      	ldr	r2, [r3, #24]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	4013      	ands	r3, r2
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	bf0c      	ite	eq
 80029d6:	2301      	moveq	r3, #1
 80029d8:	2300      	movne	r3, #0
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d0b4      	beq.n	800294e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	60f8      	str	r0, [r7, #12]
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029fa:	e033      	b.n	8002a64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	68b9      	ldr	r1, [r7, #8]
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 f87f 	bl	8002b04 <I2C_IsErrorOccurred>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e031      	b.n	8002a74 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a16:	d025      	beq.n	8002a64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a18:	f7fe fed4 	bl	80017c4 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d302      	bcc.n	8002a2e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d11a      	bne.n	8002a64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d013      	beq.n	8002a64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a40:	f043 0220 	orr.w	r2, r3, #32
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e007      	b.n	8002a74 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d1c4      	bne.n	80029fc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a88:	e02f      	b.n	8002aea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	68b9      	ldr	r1, [r7, #8]
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 f838 	bl	8002b04 <I2C_IsErrorOccurred>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e02d      	b.n	8002afa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a9e:	f7fe fe91 	bl	80017c4 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d302      	bcc.n	8002ab4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d11a      	bne.n	8002aea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	f003 0320 	and.w	r3, r3, #32
 8002abe:	2b20      	cmp	r3, #32
 8002ac0:	d013      	beq.n	8002aea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac6:	f043 0220 	orr.w	r2, r3, #32
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e007      	b.n	8002afa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	f003 0320 	and.w	r3, r3, #32
 8002af4:	2b20      	cmp	r3, #32
 8002af6:	d1c8      	bne.n	8002a8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08a      	sub	sp, #40	@ 0x28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	f003 0310 	and.w	r3, r3, #16
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d068      	beq.n	8002c02 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2210      	movs	r2, #16
 8002b36:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b38:	e049      	b.n	8002bce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b40:	d045      	beq.n	8002bce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b42:	f7fe fe3f 	bl	80017c4 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d302      	bcc.n	8002b58 <I2C_IsErrorOccurred+0x54>
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d13a      	bne.n	8002bce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b62:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b6a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b7a:	d121      	bne.n	8002bc0 <I2C_IsErrorOccurred+0xbc>
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b82:	d01d      	beq.n	8002bc0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002b84:	7cfb      	ldrb	r3, [r7, #19]
 8002b86:	2b20      	cmp	r3, #32
 8002b88:	d01a      	beq.n	8002bc0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b98:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b9a:	f7fe fe13 	bl	80017c4 <HAL_GetTick>
 8002b9e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ba0:	e00e      	b.n	8002bc0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ba2:	f7fe fe0f 	bl	80017c4 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b19      	cmp	r3, #25
 8002bae:	d907      	bls.n	8002bc0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	f043 0320 	orr.w	r3, r3, #32
 8002bb6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002bbe:	e006      	b.n	8002bce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	f003 0320 	and.w	r3, r3, #32
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	d1e9      	bne.n	8002ba2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	f003 0320 	and.w	r3, r3, #32
 8002bd8:	2b20      	cmp	r3, #32
 8002bda:	d003      	beq.n	8002be4 <I2C_IsErrorOccurred+0xe0>
 8002bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0aa      	beq.n	8002b3a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002be4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d103      	bne.n	8002bf4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	f043 0304 	orr.w	r3, r3, #4
 8002bfa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00b      	beq.n	8002c2c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00b      	beq.n	8002c4e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	f043 0308 	orr.w	r3, r3, #8
 8002c3c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00b      	beq.n	8002c70 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	f043 0302 	orr.w	r3, r3, #2
 8002c5e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002c70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d01c      	beq.n	8002cb2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f7ff fe3b 	bl	80028f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6859      	ldr	r1, [r3, #4]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc0 <I2C_IsErrorOccurred+0x1bc>)
 8002c8a:	400b      	ands	r3, r1
 8002c8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	431a      	orrs	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002cb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3728      	adds	r7, #40	@ 0x28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	fe00e800 	.word	0xfe00e800

08002cc4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	607b      	str	r3, [r7, #4]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	817b      	strh	r3, [r7, #10]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cd6:	897b      	ldrh	r3, [r7, #10]
 8002cd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cdc:	7a7b      	ldrb	r3, [r7, #9]
 8002cde:	041b      	lsls	r3, r3, #16
 8002ce0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ce4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cf2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	0d5b      	lsrs	r3, r3, #21
 8002cfe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002d02:	4b08      	ldr	r3, [pc, #32]	@ (8002d24 <I2C_TransferConfig+0x60>)
 8002d04:	430b      	orrs	r3, r1
 8002d06:	43db      	mvns	r3, r3
 8002d08:	ea02 0103 	and.w	r1, r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d16:	bf00      	nop
 8002d18:	371c      	adds	r7, #28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	03ff63ff 	.word	0x03ff63ff

08002d28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b20      	cmp	r3, #32
 8002d3c:	d138      	bne.n	8002db0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e032      	b.n	8002db2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2224      	movs	r2, #36	@ 0x24
 8002d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0201 	bic.w	r2, r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6819      	ldr	r1, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0201 	orr.w	r2, r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	e000      	b.n	8002db2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002db0:	2302      	movs	r3, #2
  }
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b085      	sub	sp, #20
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b20      	cmp	r3, #32
 8002dd2:	d139      	bne.n	8002e48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e033      	b.n	8002e4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2224      	movs	r2, #36	@ 0x24
 8002dee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0201 	bic.w	r2, r2, #1
 8002e00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	021b      	lsls	r3, r3, #8
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0201 	orr.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	e000      	b.n	8002e4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e48:	2302      	movs	r3, #2
  }
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
	...

08002e58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e5c:	4b04      	ldr	r3, [pc, #16]	@ (8002e70 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40007000 	.word	0x40007000

08002e74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e82:	d130      	bne.n	8002ee6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e84:	4b23      	ldr	r3, [pc, #140]	@ (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e90:	d038      	beq.n	8002f04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e92:	4b20      	ldr	r3, [pc, #128]	@ (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e9a:	4a1e      	ldr	r2, [pc, #120]	@ (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e9c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ea0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2232      	movs	r2, #50	@ 0x32
 8002ea8:	fb02 f303 	mul.w	r3, r2, r3
 8002eac:	4a1b      	ldr	r2, [pc, #108]	@ (8002f1c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002eae:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb2:	0c9b      	lsrs	r3, r3, #18
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eb8:	e002      	b.n	8002ec0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ec0:	4b14      	ldr	r3, [pc, #80]	@ (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ec8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ecc:	d102      	bne.n	8002ed4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1f2      	bne.n	8002eba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002edc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ee0:	d110      	bne.n	8002f04 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e00f      	b.n	8002f06 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002eee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ef2:	d007      	beq.n	8002f04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ef4:	4b07      	ldr	r3, [pc, #28]	@ (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002efc:	4a05      	ldr	r2, [pc, #20]	@ (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002efe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f02:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40007000 	.word	0x40007000
 8002f18:	20000000 	.word	0x20000000
 8002f1c:	431bde83 	.word	0x431bde83

08002f20 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e3ca      	b.n	80036c8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f32:	4b97      	ldr	r3, [pc, #604]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 030c 	and.w	r3, r3, #12
 8002f3a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f3c:	4b94      	ldr	r3, [pc, #592]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f003 0303 	and.w	r3, r3, #3
 8002f44:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0310 	and.w	r3, r3, #16
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 80e4 	beq.w	800311c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d007      	beq.n	8002f6a <HAL_RCC_OscConfig+0x4a>
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	2b0c      	cmp	r3, #12
 8002f5e:	f040 808b 	bne.w	8003078 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	f040 8087 	bne.w	8003078 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f6a:	4b89      	ldr	r3, [pc, #548]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d005      	beq.n	8002f82 <HAL_RCC_OscConfig+0x62>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e3a2      	b.n	80036c8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a1a      	ldr	r2, [r3, #32]
 8002f86:	4b82      	ldr	r3, [pc, #520]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d004      	beq.n	8002f9c <HAL_RCC_OscConfig+0x7c>
 8002f92:	4b7f      	ldr	r3, [pc, #508]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f9a:	e005      	b.n	8002fa8 <HAL_RCC_OscConfig+0x88>
 8002f9c:	4b7c      	ldr	r3, [pc, #496]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 8002f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fa2:	091b      	lsrs	r3, r3, #4
 8002fa4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d223      	bcs.n	8002ff4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 fd87 	bl	8003ac4 <RCC_SetFlashLatencyFromMSIRange>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e383      	b.n	80036c8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fc0:	4b73      	ldr	r3, [pc, #460]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a72      	ldr	r2, [pc, #456]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 8002fc6:	f043 0308 	orr.w	r3, r3, #8
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	4b70      	ldr	r3, [pc, #448]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	496d      	ldr	r1, [pc, #436]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fde:	4b6c      	ldr	r3, [pc, #432]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	021b      	lsls	r3, r3, #8
 8002fec:	4968      	ldr	r1, [pc, #416]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	604b      	str	r3, [r1, #4]
 8002ff2:	e025      	b.n	8003040 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ff4:	4b66      	ldr	r3, [pc, #408]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a65      	ldr	r2, [pc, #404]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 8002ffa:	f043 0308 	orr.w	r3, r3, #8
 8002ffe:	6013      	str	r3, [r2, #0]
 8003000:	4b63      	ldr	r3, [pc, #396]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	4960      	ldr	r1, [pc, #384]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 800300e:	4313      	orrs	r3, r2
 8003010:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003012:	4b5f      	ldr	r3, [pc, #380]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	021b      	lsls	r3, r3, #8
 8003020:	495b      	ldr	r1, [pc, #364]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 8003022:	4313      	orrs	r3, r2
 8003024:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d109      	bne.n	8003040 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	4618      	mov	r0, r3
 8003032:	f000 fd47 	bl	8003ac4 <RCC_SetFlashLatencyFromMSIRange>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e343      	b.n	80036c8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003040:	f000 fc4a 	bl	80038d8 <HAL_RCC_GetSysClockFreq>
 8003044:	4602      	mov	r2, r0
 8003046:	4b52      	ldr	r3, [pc, #328]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	091b      	lsrs	r3, r3, #4
 800304c:	f003 030f 	and.w	r3, r3, #15
 8003050:	4950      	ldr	r1, [pc, #320]	@ (8003194 <HAL_RCC_OscConfig+0x274>)
 8003052:	5ccb      	ldrb	r3, [r1, r3]
 8003054:	f003 031f 	and.w	r3, r3, #31
 8003058:	fa22 f303 	lsr.w	r3, r2, r3
 800305c:	4a4e      	ldr	r2, [pc, #312]	@ (8003198 <HAL_RCC_OscConfig+0x278>)
 800305e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003060:	4b4e      	ldr	r3, [pc, #312]	@ (800319c <HAL_RCC_OscConfig+0x27c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f7fd ff3f 	bl	8000ee8 <HAL_InitTick>
 800306a:	4603      	mov	r3, r0
 800306c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d052      	beq.n	800311a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	e327      	b.n	80036c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d032      	beq.n	80030e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003080:	4b43      	ldr	r3, [pc, #268]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a42      	ldr	r2, [pc, #264]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800308c:	f7fe fb9a 	bl	80017c4 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003094:	f7fe fb96 	bl	80017c4 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e310      	b.n	80036c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030a6:	4b3a      	ldr	r3, [pc, #232]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0f0      	beq.n	8003094 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030b2:	4b37      	ldr	r3, [pc, #220]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a36      	ldr	r2, [pc, #216]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 80030b8:	f043 0308 	orr.w	r3, r3, #8
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	4b34      	ldr	r3, [pc, #208]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	4931      	ldr	r1, [pc, #196]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030d0:	4b2f      	ldr	r3, [pc, #188]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	021b      	lsls	r3, r3, #8
 80030de:	492c      	ldr	r1, [pc, #176]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	604b      	str	r3, [r1, #4]
 80030e4:	e01a      	b.n	800311c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a29      	ldr	r2, [pc, #164]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 80030ec:	f023 0301 	bic.w	r3, r3, #1
 80030f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030f2:	f7fe fb67 	bl	80017c4 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030fa:	f7fe fb63 	bl	80017c4 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e2dd      	b.n	80036c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800310c:	4b20      	ldr	r3, [pc, #128]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1f0      	bne.n	80030fa <HAL_RCC_OscConfig+0x1da>
 8003118:	e000      	b.n	800311c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800311a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d074      	beq.n	8003212 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	2b08      	cmp	r3, #8
 800312c:	d005      	beq.n	800313a <HAL_RCC_OscConfig+0x21a>
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	2b0c      	cmp	r3, #12
 8003132:	d10e      	bne.n	8003152 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	2b03      	cmp	r3, #3
 8003138:	d10b      	bne.n	8003152 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800313a:	4b15      	ldr	r3, [pc, #84]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d064      	beq.n	8003210 <HAL_RCC_OscConfig+0x2f0>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d160      	bne.n	8003210 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e2ba      	b.n	80036c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800315a:	d106      	bne.n	800316a <HAL_RCC_OscConfig+0x24a>
 800315c:	4b0c      	ldr	r3, [pc, #48]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a0b      	ldr	r2, [pc, #44]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 8003162:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003166:	6013      	str	r3, [r2, #0]
 8003168:	e026      	b.n	80031b8 <HAL_RCC_OscConfig+0x298>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003172:	d115      	bne.n	80031a0 <HAL_RCC_OscConfig+0x280>
 8003174:	4b06      	ldr	r3, [pc, #24]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a05      	ldr	r2, [pc, #20]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 800317a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800317e:	6013      	str	r3, [r2, #0]
 8003180:	4b03      	ldr	r3, [pc, #12]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a02      	ldr	r2, [pc, #8]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 8003186:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800318a:	6013      	str	r3, [r2, #0]
 800318c:	e014      	b.n	80031b8 <HAL_RCC_OscConfig+0x298>
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000
 8003194:	0800995c 	.word	0x0800995c
 8003198:	20000000 	.word	0x20000000
 800319c:	20000004 	.word	0x20000004
 80031a0:	4ba0      	ldr	r3, [pc, #640]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a9f      	ldr	r2, [pc, #636]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 80031a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031aa:	6013      	str	r3, [r2, #0]
 80031ac:	4b9d      	ldr	r3, [pc, #628]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a9c      	ldr	r2, [pc, #624]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 80031b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d013      	beq.n	80031e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7fe fb00 	bl	80017c4 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c8:	f7fe fafc 	bl	80017c4 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b64      	cmp	r3, #100	@ 0x64
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e276      	b.n	80036c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031da:	4b92      	ldr	r3, [pc, #584]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0x2a8>
 80031e6:	e014      	b.n	8003212 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e8:	f7fe faec 	bl	80017c4 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f0:	f7fe fae8 	bl	80017c4 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b64      	cmp	r3, #100	@ 0x64
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e262      	b.n	80036c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003202:	4b88      	ldr	r3, [pc, #544]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x2d0>
 800320e:	e000      	b.n	8003212 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d060      	beq.n	80032e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	2b04      	cmp	r3, #4
 8003222:	d005      	beq.n	8003230 <HAL_RCC_OscConfig+0x310>
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	2b0c      	cmp	r3, #12
 8003228:	d119      	bne.n	800325e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2b02      	cmp	r3, #2
 800322e:	d116      	bne.n	800325e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003230:	4b7c      	ldr	r3, [pc, #496]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003238:	2b00      	cmp	r3, #0
 800323a:	d005      	beq.n	8003248 <HAL_RCC_OscConfig+0x328>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e23f      	b.n	80036c8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003248:	4b76      	ldr	r3, [pc, #472]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	061b      	lsls	r3, r3, #24
 8003256:	4973      	ldr	r1, [pc, #460]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 8003258:	4313      	orrs	r3, r2
 800325a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800325c:	e040      	b.n	80032e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d023      	beq.n	80032ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003266:	4b6f      	ldr	r3, [pc, #444]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a6e      	ldr	r2, [pc, #440]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 800326c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003272:	f7fe faa7 	bl	80017c4 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800327a:	f7fe faa3 	bl	80017c4 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e21d      	b.n	80036c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800328c:	4b65      	ldr	r3, [pc, #404]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0f0      	beq.n	800327a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003298:	4b62      	ldr	r3, [pc, #392]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	061b      	lsls	r3, r3, #24
 80032a6:	495f      	ldr	r1, [pc, #380]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	604b      	str	r3, [r1, #4]
 80032ac:	e018      	b.n	80032e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ae:	4b5d      	ldr	r3, [pc, #372]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a5c      	ldr	r2, [pc, #368]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 80032b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ba:	f7fe fa83 	bl	80017c4 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c2:	f7fe fa7f 	bl	80017c4 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e1f9      	b.n	80036c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032d4:	4b53      	ldr	r3, [pc, #332]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1f0      	bne.n	80032c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d03c      	beq.n	8003366 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d01c      	beq.n	800332e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032f4:	4b4b      	ldr	r3, [pc, #300]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 80032f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032fa:	4a4a      	ldr	r2, [pc, #296]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003304:	f7fe fa5e 	bl	80017c4 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800330c:	f7fe fa5a 	bl	80017c4 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e1d4      	b.n	80036c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800331e:	4b41      	ldr	r3, [pc, #260]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 8003320:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0ef      	beq.n	800330c <HAL_RCC_OscConfig+0x3ec>
 800332c:	e01b      	b.n	8003366 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800332e:	4b3d      	ldr	r3, [pc, #244]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 8003330:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003334:	4a3b      	ldr	r2, [pc, #236]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 8003336:	f023 0301 	bic.w	r3, r3, #1
 800333a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333e:	f7fe fa41 	bl	80017c4 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003346:	f7fe fa3d 	bl	80017c4 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e1b7      	b.n	80036c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003358:	4b32      	ldr	r3, [pc, #200]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 800335a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1ef      	bne.n	8003346 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 80a6 	beq.w	80034c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003374:	2300      	movs	r3, #0
 8003376:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003378:	4b2a      	ldr	r3, [pc, #168]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 800337a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800337c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10d      	bne.n	80033a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003384:	4b27      	ldr	r3, [pc, #156]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 8003386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003388:	4a26      	ldr	r2, [pc, #152]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 800338a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800338e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003390:	4b24      	ldr	r3, [pc, #144]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 8003392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003394:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003398:	60bb      	str	r3, [r7, #8]
 800339a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800339c:	2301      	movs	r3, #1
 800339e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033a0:	4b21      	ldr	r3, [pc, #132]	@ (8003428 <HAL_RCC_OscConfig+0x508>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d118      	bne.n	80033de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033ac:	4b1e      	ldr	r3, [pc, #120]	@ (8003428 <HAL_RCC_OscConfig+0x508>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003428 <HAL_RCC_OscConfig+0x508>)
 80033b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033b8:	f7fe fa04 	bl	80017c4 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c0:	f7fe fa00 	bl	80017c4 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e17a      	b.n	80036c8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033d2:	4b15      	ldr	r3, [pc, #84]	@ (8003428 <HAL_RCC_OscConfig+0x508>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d108      	bne.n	80033f8 <HAL_RCC_OscConfig+0x4d8>
 80033e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 80033e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033f6:	e029      	b.n	800344c <HAL_RCC_OscConfig+0x52c>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2b05      	cmp	r3, #5
 80033fe:	d115      	bne.n	800342c <HAL_RCC_OscConfig+0x50c>
 8003400:	4b08      	ldr	r3, [pc, #32]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 8003402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003406:	4a07      	ldr	r2, [pc, #28]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 8003408:	f043 0304 	orr.w	r3, r3, #4
 800340c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003410:	4b04      	ldr	r3, [pc, #16]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 8003412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003416:	4a03      	ldr	r2, [pc, #12]	@ (8003424 <HAL_RCC_OscConfig+0x504>)
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003420:	e014      	b.n	800344c <HAL_RCC_OscConfig+0x52c>
 8003422:	bf00      	nop
 8003424:	40021000 	.word	0x40021000
 8003428:	40007000 	.word	0x40007000
 800342c:	4b9c      	ldr	r3, [pc, #624]	@ (80036a0 <HAL_RCC_OscConfig+0x780>)
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003432:	4a9b      	ldr	r2, [pc, #620]	@ (80036a0 <HAL_RCC_OscConfig+0x780>)
 8003434:	f023 0301 	bic.w	r3, r3, #1
 8003438:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800343c:	4b98      	ldr	r3, [pc, #608]	@ (80036a0 <HAL_RCC_OscConfig+0x780>)
 800343e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003442:	4a97      	ldr	r2, [pc, #604]	@ (80036a0 <HAL_RCC_OscConfig+0x780>)
 8003444:	f023 0304 	bic.w	r3, r3, #4
 8003448:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d016      	beq.n	8003482 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003454:	f7fe f9b6 	bl	80017c4 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800345a:	e00a      	b.n	8003472 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800345c:	f7fe f9b2 	bl	80017c4 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800346a:	4293      	cmp	r3, r2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e12a      	b.n	80036c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003472:	4b8b      	ldr	r3, [pc, #556]	@ (80036a0 <HAL_RCC_OscConfig+0x780>)
 8003474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0ed      	beq.n	800345c <HAL_RCC_OscConfig+0x53c>
 8003480:	e015      	b.n	80034ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003482:	f7fe f99f 	bl	80017c4 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003488:	e00a      	b.n	80034a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348a:	f7fe f99b 	bl	80017c4 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003498:	4293      	cmp	r3, r2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e113      	b.n	80036c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034a0:	4b7f      	ldr	r3, [pc, #508]	@ (80036a0 <HAL_RCC_OscConfig+0x780>)
 80034a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1ed      	bne.n	800348a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ae:	7ffb      	ldrb	r3, [r7, #31]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d105      	bne.n	80034c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b4:	4b7a      	ldr	r3, [pc, #488]	@ (80036a0 <HAL_RCC_OscConfig+0x780>)
 80034b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b8:	4a79      	ldr	r2, [pc, #484]	@ (80036a0 <HAL_RCC_OscConfig+0x780>)
 80034ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034be:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 80fe 	beq.w	80036c6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	f040 80d0 	bne.w	8003674 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034d4:	4b72      	ldr	r3, [pc, #456]	@ (80036a0 <HAL_RCC_OscConfig+0x780>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f003 0203 	and.w	r2, r3, #3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d130      	bne.n	800354a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f2:	3b01      	subs	r3, #1
 80034f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d127      	bne.n	800354a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003504:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003506:	429a      	cmp	r2, r3
 8003508:	d11f      	bne.n	800354a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003514:	2a07      	cmp	r2, #7
 8003516:	bf14      	ite	ne
 8003518:	2201      	movne	r2, #1
 800351a:	2200      	moveq	r2, #0
 800351c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800351e:	4293      	cmp	r3, r2
 8003520:	d113      	bne.n	800354a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800352c:	085b      	lsrs	r3, r3, #1
 800352e:	3b01      	subs	r3, #1
 8003530:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003532:	429a      	cmp	r2, r3
 8003534:	d109      	bne.n	800354a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003540:	085b      	lsrs	r3, r3, #1
 8003542:	3b01      	subs	r3, #1
 8003544:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003546:	429a      	cmp	r2, r3
 8003548:	d06e      	beq.n	8003628 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	2b0c      	cmp	r3, #12
 800354e:	d069      	beq.n	8003624 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003550:	4b53      	ldr	r3, [pc, #332]	@ (80036a0 <HAL_RCC_OscConfig+0x780>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d105      	bne.n	8003568 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800355c:	4b50      	ldr	r3, [pc, #320]	@ (80036a0 <HAL_RCC_OscConfig+0x780>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e0ad      	b.n	80036c8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800356c:	4b4c      	ldr	r3, [pc, #304]	@ (80036a0 <HAL_RCC_OscConfig+0x780>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a4b      	ldr	r2, [pc, #300]	@ (80036a0 <HAL_RCC_OscConfig+0x780>)
 8003572:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003576:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003578:	f7fe f924 	bl	80017c4 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003580:	f7fe f920 	bl	80017c4 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e09a      	b.n	80036c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003592:	4b43      	ldr	r3, [pc, #268]	@ (80036a0 <HAL_RCC_OscConfig+0x780>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800359e:	4b40      	ldr	r3, [pc, #256]	@ (80036a0 <HAL_RCC_OscConfig+0x780>)
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	4b40      	ldr	r3, [pc, #256]	@ (80036a4 <HAL_RCC_OscConfig+0x784>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80035ae:	3a01      	subs	r2, #1
 80035b0:	0112      	lsls	r2, r2, #4
 80035b2:	4311      	orrs	r1, r2
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80035b8:	0212      	lsls	r2, r2, #8
 80035ba:	4311      	orrs	r1, r2
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80035c0:	0852      	lsrs	r2, r2, #1
 80035c2:	3a01      	subs	r2, #1
 80035c4:	0552      	lsls	r2, r2, #21
 80035c6:	4311      	orrs	r1, r2
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80035cc:	0852      	lsrs	r2, r2, #1
 80035ce:	3a01      	subs	r2, #1
 80035d0:	0652      	lsls	r2, r2, #25
 80035d2:	4311      	orrs	r1, r2
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80035d8:	0912      	lsrs	r2, r2, #4
 80035da:	0452      	lsls	r2, r2, #17
 80035dc:	430a      	orrs	r2, r1
 80035de:	4930      	ldr	r1, [pc, #192]	@ (80036a0 <HAL_RCC_OscConfig+0x780>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035e4:	4b2e      	ldr	r3, [pc, #184]	@ (80036a0 <HAL_RCC_OscConfig+0x780>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a2d      	ldr	r2, [pc, #180]	@ (80036a0 <HAL_RCC_OscConfig+0x780>)
 80035ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035f0:	4b2b      	ldr	r3, [pc, #172]	@ (80036a0 <HAL_RCC_OscConfig+0x780>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	4a2a      	ldr	r2, [pc, #168]	@ (80036a0 <HAL_RCC_OscConfig+0x780>)
 80035f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035fc:	f7fe f8e2 	bl	80017c4 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003604:	f7fe f8de 	bl	80017c4 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e058      	b.n	80036c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003616:	4b22      	ldr	r3, [pc, #136]	@ (80036a0 <HAL_RCC_OscConfig+0x780>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0f0      	beq.n	8003604 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003622:	e050      	b.n	80036c6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e04f      	b.n	80036c8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003628:	4b1d      	ldr	r3, [pc, #116]	@ (80036a0 <HAL_RCC_OscConfig+0x780>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d148      	bne.n	80036c6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003634:	4b1a      	ldr	r3, [pc, #104]	@ (80036a0 <HAL_RCC_OscConfig+0x780>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a19      	ldr	r2, [pc, #100]	@ (80036a0 <HAL_RCC_OscConfig+0x780>)
 800363a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800363e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003640:	4b17      	ldr	r3, [pc, #92]	@ (80036a0 <HAL_RCC_OscConfig+0x780>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	4a16      	ldr	r2, [pc, #88]	@ (80036a0 <HAL_RCC_OscConfig+0x780>)
 8003646:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800364a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800364c:	f7fe f8ba 	bl	80017c4 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003654:	f7fe f8b6 	bl	80017c4 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e030      	b.n	80036c8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003666:	4b0e      	ldr	r3, [pc, #56]	@ (80036a0 <HAL_RCC_OscConfig+0x780>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0f0      	beq.n	8003654 <HAL_RCC_OscConfig+0x734>
 8003672:	e028      	b.n	80036c6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	2b0c      	cmp	r3, #12
 8003678:	d023      	beq.n	80036c2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800367a:	4b09      	ldr	r3, [pc, #36]	@ (80036a0 <HAL_RCC_OscConfig+0x780>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a08      	ldr	r2, [pc, #32]	@ (80036a0 <HAL_RCC_OscConfig+0x780>)
 8003680:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003684:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003686:	f7fe f89d 	bl	80017c4 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800368c:	e00c      	b.n	80036a8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368e:	f7fe f899 	bl	80017c4 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d905      	bls.n	80036a8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e013      	b.n	80036c8 <HAL_RCC_OscConfig+0x7a8>
 80036a0:	40021000 	.word	0x40021000
 80036a4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036a8:	4b09      	ldr	r3, [pc, #36]	@ (80036d0 <HAL_RCC_OscConfig+0x7b0>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1ec      	bne.n	800368e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036b4:	4b06      	ldr	r3, [pc, #24]	@ (80036d0 <HAL_RCC_OscConfig+0x7b0>)
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	4905      	ldr	r1, [pc, #20]	@ (80036d0 <HAL_RCC_OscConfig+0x7b0>)
 80036ba:	4b06      	ldr	r3, [pc, #24]	@ (80036d4 <HAL_RCC_OscConfig+0x7b4>)
 80036bc:	4013      	ands	r3, r2
 80036be:	60cb      	str	r3, [r1, #12]
 80036c0:	e001      	b.n	80036c6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e000      	b.n	80036c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3720      	adds	r7, #32
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40021000 	.word	0x40021000
 80036d4:	feeefffc 	.word	0xfeeefffc

080036d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0e7      	b.n	80038bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036ec:	4b75      	ldr	r3, [pc, #468]	@ (80038c4 <HAL_RCC_ClockConfig+0x1ec>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d910      	bls.n	800371c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fa:	4b72      	ldr	r3, [pc, #456]	@ (80038c4 <HAL_RCC_ClockConfig+0x1ec>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f023 0207 	bic.w	r2, r3, #7
 8003702:	4970      	ldr	r1, [pc, #448]	@ (80038c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	4313      	orrs	r3, r2
 8003708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800370a:	4b6e      	ldr	r3, [pc, #440]	@ (80038c4 <HAL_RCC_ClockConfig+0x1ec>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0307 	and.w	r3, r3, #7
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d001      	beq.n	800371c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e0cf      	b.n	80038bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d010      	beq.n	800374a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	4b66      	ldr	r3, [pc, #408]	@ (80038c8 <HAL_RCC_ClockConfig+0x1f0>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003734:	429a      	cmp	r2, r3
 8003736:	d908      	bls.n	800374a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003738:	4b63      	ldr	r3, [pc, #396]	@ (80038c8 <HAL_RCC_ClockConfig+0x1f0>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	4960      	ldr	r1, [pc, #384]	@ (80038c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003746:	4313      	orrs	r3, r2
 8003748:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d04c      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b03      	cmp	r3, #3
 800375c:	d107      	bne.n	800376e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800375e:	4b5a      	ldr	r3, [pc, #360]	@ (80038c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d121      	bne.n	80037ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e0a6      	b.n	80038bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d107      	bne.n	8003786 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003776:	4b54      	ldr	r3, [pc, #336]	@ (80038c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d115      	bne.n	80037ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e09a      	b.n	80038bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d107      	bne.n	800379e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800378e:	4b4e      	ldr	r3, [pc, #312]	@ (80038c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d109      	bne.n	80037ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e08e      	b.n	80038bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800379e:	4b4a      	ldr	r3, [pc, #296]	@ (80038c8 <HAL_RCC_ClockConfig+0x1f0>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e086      	b.n	80038bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037ae:	4b46      	ldr	r3, [pc, #280]	@ (80038c8 <HAL_RCC_ClockConfig+0x1f0>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f023 0203 	bic.w	r2, r3, #3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	4943      	ldr	r1, [pc, #268]	@ (80038c8 <HAL_RCC_ClockConfig+0x1f0>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037c0:	f7fe f800 	bl	80017c4 <HAL_GetTick>
 80037c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c6:	e00a      	b.n	80037de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c8:	f7fd fffc 	bl	80017c4 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e06e      	b.n	80038bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037de:	4b3a      	ldr	r3, [pc, #232]	@ (80038c8 <HAL_RCC_ClockConfig+0x1f0>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 020c 	and.w	r2, r3, #12
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d1eb      	bne.n	80037c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d010      	beq.n	800381e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	4b31      	ldr	r3, [pc, #196]	@ (80038c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003808:	429a      	cmp	r2, r3
 800380a:	d208      	bcs.n	800381e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800380c:	4b2e      	ldr	r3, [pc, #184]	@ (80038c8 <HAL_RCC_ClockConfig+0x1f0>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	492b      	ldr	r1, [pc, #172]	@ (80038c8 <HAL_RCC_ClockConfig+0x1f0>)
 800381a:	4313      	orrs	r3, r2
 800381c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800381e:	4b29      	ldr	r3, [pc, #164]	@ (80038c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	429a      	cmp	r2, r3
 800382a:	d210      	bcs.n	800384e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382c:	4b25      	ldr	r3, [pc, #148]	@ (80038c4 <HAL_RCC_ClockConfig+0x1ec>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f023 0207 	bic.w	r2, r3, #7
 8003834:	4923      	ldr	r1, [pc, #140]	@ (80038c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	4313      	orrs	r3, r2
 800383a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800383c:	4b21      	ldr	r3, [pc, #132]	@ (80038c4 <HAL_RCC_ClockConfig+0x1ec>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d001      	beq.n	800384e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e036      	b.n	80038bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0304 	and.w	r3, r3, #4
 8003856:	2b00      	cmp	r3, #0
 8003858:	d008      	beq.n	800386c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800385a:	4b1b      	ldr	r3, [pc, #108]	@ (80038c8 <HAL_RCC_ClockConfig+0x1f0>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	4918      	ldr	r1, [pc, #96]	@ (80038c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003868:	4313      	orrs	r3, r2
 800386a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0308 	and.w	r3, r3, #8
 8003874:	2b00      	cmp	r3, #0
 8003876:	d009      	beq.n	800388c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003878:	4b13      	ldr	r3, [pc, #76]	@ (80038c8 <HAL_RCC_ClockConfig+0x1f0>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	4910      	ldr	r1, [pc, #64]	@ (80038c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003888:	4313      	orrs	r3, r2
 800388a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800388c:	f000 f824 	bl	80038d8 <HAL_RCC_GetSysClockFreq>
 8003890:	4602      	mov	r2, r0
 8003892:	4b0d      	ldr	r3, [pc, #52]	@ (80038c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	091b      	lsrs	r3, r3, #4
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	490b      	ldr	r1, [pc, #44]	@ (80038cc <HAL_RCC_ClockConfig+0x1f4>)
 800389e:	5ccb      	ldrb	r3, [r1, r3]
 80038a0:	f003 031f 	and.w	r3, r3, #31
 80038a4:	fa22 f303 	lsr.w	r3, r2, r3
 80038a8:	4a09      	ldr	r2, [pc, #36]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f8>)
 80038aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038ac:	4b09      	ldr	r3, [pc, #36]	@ (80038d4 <HAL_RCC_ClockConfig+0x1fc>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7fd fb19 	bl	8000ee8 <HAL_InitTick>
 80038b6:	4603      	mov	r3, r0
 80038b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80038ba:	7afb      	ldrb	r3, [r7, #11]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40022000 	.word	0x40022000
 80038c8:	40021000 	.word	0x40021000
 80038cc:	0800995c 	.word	0x0800995c
 80038d0:	20000000 	.word	0x20000000
 80038d4:	20000004 	.word	0x20000004

080038d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	b089      	sub	sp, #36	@ 0x24
 80038dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	61fb      	str	r3, [r7, #28]
 80038e2:	2300      	movs	r3, #0
 80038e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038e6:	4b3e      	ldr	r3, [pc, #248]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 030c 	and.w	r3, r3, #12
 80038ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038f0:	4b3b      	ldr	r3, [pc, #236]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f003 0303 	and.w	r3, r3, #3
 80038f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d005      	beq.n	800390c <HAL_RCC_GetSysClockFreq+0x34>
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	2b0c      	cmp	r3, #12
 8003904:	d121      	bne.n	800394a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d11e      	bne.n	800394a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800390c:	4b34      	ldr	r3, [pc, #208]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0308 	and.w	r3, r3, #8
 8003914:	2b00      	cmp	r3, #0
 8003916:	d107      	bne.n	8003928 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003918:	4b31      	ldr	r3, [pc, #196]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800391a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800391e:	0a1b      	lsrs	r3, r3, #8
 8003920:	f003 030f 	and.w	r3, r3, #15
 8003924:	61fb      	str	r3, [r7, #28]
 8003926:	e005      	b.n	8003934 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003928:	4b2d      	ldr	r3, [pc, #180]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	091b      	lsrs	r3, r3, #4
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003934:	4a2b      	ldr	r2, [pc, #172]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800393c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10d      	bne.n	8003960 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003948:	e00a      	b.n	8003960 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	2b04      	cmp	r3, #4
 800394e:	d102      	bne.n	8003956 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003950:	4b25      	ldr	r3, [pc, #148]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003952:	61bb      	str	r3, [r7, #24]
 8003954:	e004      	b.n	8003960 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	2b08      	cmp	r3, #8
 800395a:	d101      	bne.n	8003960 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800395c:	4b23      	ldr	r3, [pc, #140]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x114>)
 800395e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	2b0c      	cmp	r3, #12
 8003964:	d134      	bne.n	80039d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003966:	4b1e      	ldr	r3, [pc, #120]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2b02      	cmp	r3, #2
 8003974:	d003      	beq.n	800397e <HAL_RCC_GetSysClockFreq+0xa6>
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2b03      	cmp	r3, #3
 800397a:	d003      	beq.n	8003984 <HAL_RCC_GetSysClockFreq+0xac>
 800397c:	e005      	b.n	800398a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800397e:	4b1a      	ldr	r3, [pc, #104]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003980:	617b      	str	r3, [r7, #20]
      break;
 8003982:	e005      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003984:	4b19      	ldr	r3, [pc, #100]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x114>)
 8003986:	617b      	str	r3, [r7, #20]
      break;
 8003988:	e002      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	617b      	str	r3, [r7, #20]
      break;
 800398e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003990:	4b13      	ldr	r3, [pc, #76]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	091b      	lsrs	r3, r3, #4
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	3301      	adds	r3, #1
 800399c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800399e:	4b10      	ldr	r3, [pc, #64]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	0a1b      	lsrs	r3, r3, #8
 80039a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	fb03 f202 	mul.w	r2, r3, r2
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039b6:	4b0a      	ldr	r3, [pc, #40]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	0e5b      	lsrs	r3, r3, #25
 80039bc:	f003 0303 	and.w	r3, r3, #3
 80039c0:	3301      	adds	r3, #1
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039d0:	69bb      	ldr	r3, [r7, #24]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3724      	adds	r7, #36	@ 0x24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	40021000 	.word	0x40021000
 80039e4:	08009974 	.word	0x08009974
 80039e8:	00f42400 	.word	0x00f42400
 80039ec:	007a1200 	.word	0x007a1200

080039f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039f4:	4b03      	ldr	r3, [pc, #12]	@ (8003a04 <HAL_RCC_GetHCLKFreq+0x14>)
 80039f6:	681b      	ldr	r3, [r3, #0]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	20000000 	.word	0x20000000

08003a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a0c:	f7ff fff0 	bl	80039f0 <HAL_RCC_GetHCLKFreq>
 8003a10:	4602      	mov	r2, r0
 8003a12:	4b06      	ldr	r3, [pc, #24]	@ (8003a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	0a1b      	lsrs	r3, r3, #8
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	4904      	ldr	r1, [pc, #16]	@ (8003a30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a1e:	5ccb      	ldrb	r3, [r1, r3]
 8003a20:	f003 031f 	and.w	r3, r3, #31
 8003a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	0800996c 	.word	0x0800996c

08003a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a38:	f7ff ffda 	bl	80039f0 <HAL_RCC_GetHCLKFreq>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	4b06      	ldr	r3, [pc, #24]	@ (8003a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	0adb      	lsrs	r3, r3, #11
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	4904      	ldr	r1, [pc, #16]	@ (8003a5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a4a:	5ccb      	ldrb	r3, [r1, r3]
 8003a4c:	f003 031f 	and.w	r3, r3, #31
 8003a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	0800996c 	.word	0x0800996c

08003a60 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	220f      	movs	r2, #15
 8003a6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003a70:	4b12      	ldr	r3, [pc, #72]	@ (8003abc <HAL_RCC_GetClockConfig+0x5c>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f003 0203 	and.w	r2, r3, #3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8003abc <HAL_RCC_GetClockConfig+0x5c>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003a88:	4b0c      	ldr	r3, [pc, #48]	@ (8003abc <HAL_RCC_GetClockConfig+0x5c>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003a94:	4b09      	ldr	r3, [pc, #36]	@ (8003abc <HAL_RCC_GetClockConfig+0x5c>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	08db      	lsrs	r3, r3, #3
 8003a9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003aa2:	4b07      	ldr	r3, [pc, #28]	@ (8003ac0 <HAL_RCC_GetClockConfig+0x60>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0207 	and.w	r2, r3, #7
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	601a      	str	r2, [r3, #0]
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	40022000 	.word	0x40022000

08003ac4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003acc:	2300      	movs	r3, #0
 8003ace:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8003b7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003adc:	f7ff f9bc 	bl	8002e58 <HAL_PWREx_GetVoltageRange>
 8003ae0:	6178      	str	r0, [r7, #20]
 8003ae2:	e014      	b.n	8003b0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ae4:	4b25      	ldr	r3, [pc, #148]	@ (8003b7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae8:	4a24      	ldr	r2, [pc, #144]	@ (8003b7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aee:	6593      	str	r3, [r2, #88]	@ 0x58
 8003af0:	4b22      	ldr	r3, [pc, #136]	@ (8003b7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003afc:	f7ff f9ac 	bl	8002e58 <HAL_PWREx_GetVoltageRange>
 8003b00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b02:	4b1e      	ldr	r3, [pc, #120]	@ (8003b7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b06:	4a1d      	ldr	r2, [pc, #116]	@ (8003b7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b0c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b14:	d10b      	bne.n	8003b2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b80      	cmp	r3, #128	@ 0x80
 8003b1a:	d919      	bls.n	8003b50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003b20:	d902      	bls.n	8003b28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b22:	2302      	movs	r3, #2
 8003b24:	613b      	str	r3, [r7, #16]
 8003b26:	e013      	b.n	8003b50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b28:	2301      	movs	r3, #1
 8003b2a:	613b      	str	r3, [r7, #16]
 8003b2c:	e010      	b.n	8003b50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b80      	cmp	r3, #128	@ 0x80
 8003b32:	d902      	bls.n	8003b3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b34:	2303      	movs	r3, #3
 8003b36:	613b      	str	r3, [r7, #16]
 8003b38:	e00a      	b.n	8003b50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b80      	cmp	r3, #128	@ 0x80
 8003b3e:	d102      	bne.n	8003b46 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b40:	2302      	movs	r3, #2
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	e004      	b.n	8003b50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b70      	cmp	r3, #112	@ 0x70
 8003b4a:	d101      	bne.n	8003b50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b50:	4b0b      	ldr	r3, [pc, #44]	@ (8003b80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f023 0207 	bic.w	r2, r3, #7
 8003b58:	4909      	ldr	r1, [pc, #36]	@ (8003b80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b60:	4b07      	ldr	r3, [pc, #28]	@ (8003b80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d001      	beq.n	8003b72 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	40022000 	.word	0x40022000

08003b84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b90:	2300      	movs	r3, #0
 8003b92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d041      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ba4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ba8:	d02a      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003baa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003bae:	d824      	bhi.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bb0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003bb4:	d008      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003bb6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003bba:	d81e      	bhi.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00a      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003bc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bc4:	d010      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003bc6:	e018      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bc8:	4b86      	ldr	r3, [pc, #536]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	4a85      	ldr	r2, [pc, #532]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bd2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bd4:	e015      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3304      	adds	r3, #4
 8003bda:	2100      	movs	r1, #0
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f001 f829 	bl	8004c34 <RCCEx_PLLSAI1_Config>
 8003be2:	4603      	mov	r3, r0
 8003be4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003be6:	e00c      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3320      	adds	r3, #32
 8003bec:	2100      	movs	r1, #0
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f001 f914 	bl	8004e1c <RCCEx_PLLSAI2_Config>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bf8:	e003      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	74fb      	strb	r3, [r7, #19]
      break;
 8003bfe:	e000      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c02:	7cfb      	ldrb	r3, [r7, #19]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10b      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c08:	4b76      	ldr	r3, [pc, #472]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c0e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c16:	4973      	ldr	r1, [pc, #460]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c1e:	e001      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c20:	7cfb      	ldrb	r3, [r7, #19]
 8003c22:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d041      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c34:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c38:	d02a      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c3a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c3e:	d824      	bhi.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c44:	d008      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c4a:	d81e      	bhi.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00a      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c54:	d010      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c56:	e018      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c58:	4b62      	ldr	r3, [pc, #392]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	4a61      	ldr	r2, [pc, #388]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c62:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c64:	e015      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3304      	adds	r3, #4
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 ffe1 	bl	8004c34 <RCCEx_PLLSAI1_Config>
 8003c72:	4603      	mov	r3, r0
 8003c74:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c76:	e00c      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3320      	adds	r3, #32
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f001 f8cc 	bl	8004e1c <RCCEx_PLLSAI2_Config>
 8003c84:	4603      	mov	r3, r0
 8003c86:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c88:	e003      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	74fb      	strb	r3, [r7, #19]
      break;
 8003c8e:	e000      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c92:	7cfb      	ldrb	r3, [r7, #19]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10b      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c98:	4b52      	ldr	r3, [pc, #328]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c9e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ca6:	494f      	ldr	r1, [pc, #316]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003cae:	e001      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb0:	7cfb      	ldrb	r3, [r7, #19]
 8003cb2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 80a0 	beq.w	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cc6:	4b47      	ldr	r3, [pc, #284]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00d      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cdc:	4b41      	ldr	r3, [pc, #260]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce0:	4a40      	ldr	r2, [pc, #256]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ce6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ce8:	4b3e      	ldr	r3, [pc, #248]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cf0:	60bb      	str	r3, [r7, #8]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cf8:	4b3b      	ldr	r3, [pc, #236]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a3a      	ldr	r2, [pc, #232]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d04:	f7fd fd5e 	bl	80017c4 <HAL_GetTick>
 8003d08:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d0a:	e009      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d0c:	f7fd fd5a 	bl	80017c4 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d902      	bls.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	74fb      	strb	r3, [r7, #19]
        break;
 8003d1e:	e005      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d20:	4b31      	ldr	r3, [pc, #196]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0ef      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d2c:	7cfb      	ldrb	r3, [r7, #19]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d15c      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d32:	4b2c      	ldr	r3, [pc, #176]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d3c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d01f      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d019      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d50:	4b24      	ldr	r3, [pc, #144]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d5c:	4b21      	ldr	r3, [pc, #132]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d62:	4a20      	ldr	r2, [pc, #128]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d72:	4a1c      	ldr	r2, [pc, #112]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d7c:	4a19      	ldr	r2, [pc, #100]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d016      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8e:	f7fd fd19 	bl	80017c4 <HAL_GetTick>
 8003d92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d94:	e00b      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d96:	f7fd fd15 	bl	80017c4 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d902      	bls.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	74fb      	strb	r3, [r7, #19]
            break;
 8003dac:	e006      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dae:	4b0d      	ldr	r3, [pc, #52]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0ec      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003dbc:	7cfb      	ldrb	r3, [r7, #19]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10c      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dc2:	4b08      	ldr	r3, [pc, #32]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dd2:	4904      	ldr	r1, [pc, #16]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003dda:	e009      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ddc:	7cfb      	ldrb	r3, [r7, #19]
 8003dde:	74bb      	strb	r3, [r7, #18]
 8003de0:	e006      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003de2:	bf00      	nop
 8003de4:	40021000 	.word	0x40021000
 8003de8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dec:	7cfb      	ldrb	r3, [r7, #19]
 8003dee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003df0:	7c7b      	ldrb	r3, [r7, #17]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d105      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df6:	4b9e      	ldr	r3, [pc, #632]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dfa:	4a9d      	ldr	r2, [pc, #628]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e00:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e0e:	4b98      	ldr	r3, [pc, #608]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e14:	f023 0203 	bic.w	r2, r3, #3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e1c:	4994      	ldr	r1, [pc, #592]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e30:	4b8f      	ldr	r3, [pc, #572]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e36:	f023 020c 	bic.w	r2, r3, #12
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e3e:	498c      	ldr	r1, [pc, #560]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0304 	and.w	r3, r3, #4
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e52:	4b87      	ldr	r3, [pc, #540]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e58:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e60:	4983      	ldr	r1, [pc, #524]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0308 	and.w	r3, r3, #8
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e74:	4b7e      	ldr	r3, [pc, #504]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e7a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e82:	497b      	ldr	r1, [pc, #492]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0310 	and.w	r3, r3, #16
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e96:	4b76      	ldr	r3, [pc, #472]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ea4:	4972      	ldr	r1, [pc, #456]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0320 	and.w	r3, r3, #32
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003eb8:	4b6d      	ldr	r3, [pc, #436]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ebe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ec6:	496a      	ldr	r1, [pc, #424]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eda:	4b65      	ldr	r3, [pc, #404]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee8:	4961      	ldr	r1, [pc, #388]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003efc:	4b5c      	ldr	r3, [pc, #368]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f02:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f0a:	4959      	ldr	r1, [pc, #356]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f1e:	4b54      	ldr	r3, [pc, #336]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f24:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f2c:	4950      	ldr	r1, [pc, #320]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f40:	4b4b      	ldr	r3, [pc, #300]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f46:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f4e:	4948      	ldr	r1, [pc, #288]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f62:	4b43      	ldr	r3, [pc, #268]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f68:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f70:	493f      	ldr	r1, [pc, #252]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d028      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f84:	4b3a      	ldr	r3, [pc, #232]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f92:	4937      	ldr	r1, [pc, #220]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fa2:	d106      	bne.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fa4:	4b32      	ldr	r3, [pc, #200]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	4a31      	ldr	r2, [pc, #196]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003faa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fae:	60d3      	str	r3, [r2, #12]
 8003fb0:	e011      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fb6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fba:	d10c      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 fe36 	bl	8004c34 <RCCEx_PLLSAI1_Config>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fcc:	7cfb      	ldrb	r3, [r7, #19]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003fd2:	7cfb      	ldrb	r3, [r7, #19]
 8003fd4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d028      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fe2:	4b23      	ldr	r3, [pc, #140]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff0:	491f      	ldr	r1, [pc, #124]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ffc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004000:	d106      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004002:	4b1b      	ldr	r3, [pc, #108]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	4a1a      	ldr	r2, [pc, #104]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004008:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800400c:	60d3      	str	r3, [r2, #12]
 800400e:	e011      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004014:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004018:	d10c      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3304      	adds	r3, #4
 800401e:	2101      	movs	r1, #1
 8004020:	4618      	mov	r0, r3
 8004022:	f000 fe07 	bl	8004c34 <RCCEx_PLLSAI1_Config>
 8004026:	4603      	mov	r3, r0
 8004028:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800402a:	7cfb      	ldrb	r3, [r7, #19]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004030:	7cfb      	ldrb	r3, [r7, #19]
 8004032:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d02b      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004040:	4b0b      	ldr	r3, [pc, #44]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004046:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800404e:	4908      	ldr	r1, [pc, #32]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800405a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800405e:	d109      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004060:	4b03      	ldr	r3, [pc, #12]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	4a02      	ldr	r2, [pc, #8]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004066:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800406a:	60d3      	str	r3, [r2, #12]
 800406c:	e014      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800406e:	bf00      	nop
 8004070:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004078:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800407c:	d10c      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3304      	adds	r3, #4
 8004082:	2101      	movs	r1, #1
 8004084:	4618      	mov	r0, r3
 8004086:	f000 fdd5 	bl	8004c34 <RCCEx_PLLSAI1_Config>
 800408a:	4603      	mov	r3, r0
 800408c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800408e:	7cfb      	ldrb	r3, [r7, #19]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004094:	7cfb      	ldrb	r3, [r7, #19]
 8004096:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d02f      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040aa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040b2:	4928      	ldr	r1, [pc, #160]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040c2:	d10d      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3304      	adds	r3, #4
 80040c8:	2102      	movs	r1, #2
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 fdb2 	bl	8004c34 <RCCEx_PLLSAI1_Config>
 80040d0:	4603      	mov	r3, r0
 80040d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040d4:	7cfb      	ldrb	r3, [r7, #19]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d014      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040da:	7cfb      	ldrb	r3, [r7, #19]
 80040dc:	74bb      	strb	r3, [r7, #18]
 80040de:	e011      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040e8:	d10c      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3320      	adds	r3, #32
 80040ee:	2102      	movs	r1, #2
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 fe93 	bl	8004e1c <RCCEx_PLLSAI2_Config>
 80040f6:	4603      	mov	r3, r0
 80040f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040fa:	7cfb      	ldrb	r3, [r7, #19]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004100:	7cfb      	ldrb	r3, [r7, #19]
 8004102:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004110:	4b10      	ldr	r3, [pc, #64]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004116:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800411e:	490d      	ldr	r1, [pc, #52]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00b      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004132:	4b08      	ldr	r3, [pc, #32]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004138:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004142:	4904      	ldr	r1, [pc, #16]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800414a:	7cbb      	ldrb	r3, [r7, #18]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40021000 	.word	0x40021000

08004158 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b088      	sub	sp, #32
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004160:	2300      	movs	r3, #0
 8004162:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800416a:	d13e      	bne.n	80041ea <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800416c:	4bb2      	ldr	r3, [pc, #712]	@ (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004172:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004176:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800417e:	d028      	beq.n	80041d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004186:	f200 8542 	bhi.w	8004c0e <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004190:	d005      	beq.n	800419e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004198:	d00e      	beq.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800419a:	f000 bd38 	b.w	8004c0e <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800419e:	4ba6      	ldr	r3, [pc, #664]	@ (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80041a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	f040 8532 	bne.w	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 80041ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041b2:	61fb      	str	r3, [r7, #28]
      break;
 80041b4:	f000 bd2d 	b.w	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80041b8:	4b9f      	ldr	r3, [pc, #636]	@ (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80041ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	f040 8527 	bne.w	8004c16 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 80041c8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80041cc:	61fb      	str	r3, [r7, #28]
      break;
 80041ce:	f000 bd22 	b.w	8004c16 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80041d2:	4b99      	ldr	r3, [pc, #612]	@ (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041de:	f040 851c 	bne.w	8004c1a <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 80041e2:	4b96      	ldr	r3, [pc, #600]	@ (800443c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80041e4:	61fb      	str	r3, [r7, #28]
      break;
 80041e6:	f000 bd18 	b.w	8004c1a <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041ea:	4b93      	ldr	r3, [pc, #588]	@ (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	2b03      	cmp	r3, #3
 80041f8:	d036      	beq.n	8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2b03      	cmp	r3, #3
 80041fe:	d840      	bhi.n	8004282 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d003      	beq.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2b02      	cmp	r3, #2
 800420a:	d020      	beq.n	800424e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800420c:	e039      	b.n	8004282 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800420e:	4b8a      	ldr	r3, [pc, #552]	@ (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b02      	cmp	r3, #2
 8004218:	d116      	bne.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800421a:	4b87      	ldr	r3, [pc, #540]	@ (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0308 	and.w	r3, r3, #8
 8004222:	2b00      	cmp	r3, #0
 8004224:	d005      	beq.n	8004232 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8004226:	4b84      	ldr	r3, [pc, #528]	@ (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	091b      	lsrs	r3, r3, #4
 800422c:	f003 030f 	and.w	r3, r3, #15
 8004230:	e005      	b.n	800423e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8004232:	4b81      	ldr	r3, [pc, #516]	@ (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004234:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004238:	0a1b      	lsrs	r3, r3, #8
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	4a80      	ldr	r2, [pc, #512]	@ (8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8004240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004244:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004246:	e01f      	b.n	8004288 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	61bb      	str	r3, [r7, #24]
      break;
 800424c:	e01c      	b.n	8004288 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800424e:	4b7a      	ldr	r3, [pc, #488]	@ (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800425a:	d102      	bne.n	8004262 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800425c:	4b79      	ldr	r3, [pc, #484]	@ (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800425e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004260:	e012      	b.n	8004288 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004262:	2300      	movs	r3, #0
 8004264:	61bb      	str	r3, [r7, #24]
      break;
 8004266:	e00f      	b.n	8004288 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004268:	4b73      	ldr	r3, [pc, #460]	@ (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004270:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004274:	d102      	bne.n	800427c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8004276:	4b74      	ldr	r3, [pc, #464]	@ (8004448 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004278:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800427a:	e005      	b.n	8004288 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	61bb      	str	r3, [r7, #24]
      break;
 8004280:	e002      	b.n	8004288 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8004282:	2300      	movs	r3, #0
 8004284:	61bb      	str	r3, [r7, #24]
      break;
 8004286:	bf00      	nop
    }

    switch(PeriphClk)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800428e:	f000 80dd 	beq.w	800444c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004298:	f200 84c1 	bhi.w	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042a2:	f000 80d3 	beq.w	800444c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042ac:	f200 84b7 	bhi.w	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042b6:	f000 835f 	beq.w	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042c0:	f200 84ad 	bhi.w	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042ca:	f000 847e 	beq.w	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042d4:	f200 84a3 	bhi.w	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042de:	f000 82cd 	beq.w	800487c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042e8:	f200 8499 	bhi.w	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042f2:	f000 80ab 	beq.w	800444c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042fc:	f200 848f 	bhi.w	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004306:	f000 8090 	beq.w	800442a <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004310:	f200 8485 	bhi.w	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800431a:	d07f      	beq.n	800441c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004322:	f200 847c 	bhi.w	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800432c:	f000 8403 	beq.w	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004336:	f200 8472 	bhi.w	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004340:	f000 83af 	beq.w	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800434a:	f200 8468 	bhi.w	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004354:	f000 8379 	beq.w	8004a4a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800435e:	f200 845e 	bhi.w	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b80      	cmp	r3, #128	@ 0x80
 8004366:	f000 8344 	beq.w	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b80      	cmp	r3, #128	@ 0x80
 800436e:	f200 8456 	bhi.w	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b20      	cmp	r3, #32
 8004376:	d84b      	bhi.n	8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 844f 	beq.w	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3b01      	subs	r3, #1
 8004384:	2b1f      	cmp	r3, #31
 8004386:	f200 844a 	bhi.w	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800438a:	a201      	add	r2, pc, #4	@ (adr r2, 8004390 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 800438c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004390:	08004579 	.word	0x08004579
 8004394:	080045e7 	.word	0x080045e7
 8004398:	08004c1f 	.word	0x08004c1f
 800439c:	0800467b 	.word	0x0800467b
 80043a0:	08004c1f 	.word	0x08004c1f
 80043a4:	08004c1f 	.word	0x08004c1f
 80043a8:	08004c1f 	.word	0x08004c1f
 80043ac:	08004701 	.word	0x08004701
 80043b0:	08004c1f 	.word	0x08004c1f
 80043b4:	08004c1f 	.word	0x08004c1f
 80043b8:	08004c1f 	.word	0x08004c1f
 80043bc:	08004c1f 	.word	0x08004c1f
 80043c0:	08004c1f 	.word	0x08004c1f
 80043c4:	08004c1f 	.word	0x08004c1f
 80043c8:	08004c1f 	.word	0x08004c1f
 80043cc:	08004779 	.word	0x08004779
 80043d0:	08004c1f 	.word	0x08004c1f
 80043d4:	08004c1f 	.word	0x08004c1f
 80043d8:	08004c1f 	.word	0x08004c1f
 80043dc:	08004c1f 	.word	0x08004c1f
 80043e0:	08004c1f 	.word	0x08004c1f
 80043e4:	08004c1f 	.word	0x08004c1f
 80043e8:	08004c1f 	.word	0x08004c1f
 80043ec:	08004c1f 	.word	0x08004c1f
 80043f0:	08004c1f 	.word	0x08004c1f
 80043f4:	08004c1f 	.word	0x08004c1f
 80043f8:	08004c1f 	.word	0x08004c1f
 80043fc:	08004c1f 	.word	0x08004c1f
 8004400:	08004c1f 	.word	0x08004c1f
 8004404:	08004c1f 	.word	0x08004c1f
 8004408:	08004c1f 	.word	0x08004c1f
 800440c:	080047fb 	.word	0x080047fb
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b40      	cmp	r3, #64	@ 0x40
 8004414:	f000 82c1 	beq.w	800499a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004418:	f000 bc01 	b.w	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800441c:	69b9      	ldr	r1, [r7, #24]
 800441e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004422:	f000 fdd9 	bl	8004fd8 <RCCEx_GetSAIxPeriphCLKFreq>
 8004426:	61f8      	str	r0, [r7, #28]
      break;
 8004428:	e3fa      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800442a:	69b9      	ldr	r1, [r7, #24]
 800442c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004430:	f000 fdd2 	bl	8004fd8 <RCCEx_GetSAIxPeriphCLKFreq>
 8004434:	61f8      	str	r0, [r7, #28]
      break;
 8004436:	e3f3      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004438:	40021000 	.word	0x40021000
 800443c:	0003d090 	.word	0x0003d090
 8004440:	08009974 	.word	0x08009974
 8004444:	00f42400 	.word	0x00f42400
 8004448:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800444c:	4ba9      	ldr	r3, [pc, #676]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004452:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004456:	613b      	str	r3, [r7, #16]
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800445e:	d00c      	beq.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004466:	d87f      	bhi.n	8004568 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800446e:	d04e      	beq.n	800450e <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004476:	d01d      	beq.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8004478:	e076      	b.n	8004568 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800447a:	4b9e      	ldr	r3, [pc, #632]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b02      	cmp	r3, #2
 8004484:	d172      	bne.n	800456c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004486:	4b9b      	ldr	r3, [pc, #620]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d005      	beq.n	800449e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8004492:	4b98      	ldr	r3, [pc, #608]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	091b      	lsrs	r3, r3, #4
 8004498:	f003 030f 	and.w	r3, r3, #15
 800449c:	e005      	b.n	80044aa <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 800449e:	4b95      	ldr	r3, [pc, #596]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80044a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044a4:	0a1b      	lsrs	r3, r3, #8
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	4a93      	ldr	r2, [pc, #588]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80044ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044b0:	61fb      	str	r3, [r7, #28]
          break;
 80044b2:	e05b      	b.n	800456c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80044b4:	4b8f      	ldr	r3, [pc, #572]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80044c0:	d156      	bne.n	8004570 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80044c2:	4b8c      	ldr	r3, [pc, #560]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044ce:	d14f      	bne.n	8004570 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80044d0:	4b88      	ldr	r3, [pc, #544]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	0a1b      	lsrs	r3, r3, #8
 80044d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044da:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	fb03 f202 	mul.w	r2, r3, r2
 80044e4:	4b83      	ldr	r3, [pc, #524]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	091b      	lsrs	r3, r3, #4
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	3301      	adds	r3, #1
 80044f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80044f6:	4b7f      	ldr	r3, [pc, #508]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	0d5b      	lsrs	r3, r3, #21
 80044fc:	f003 0303 	and.w	r3, r3, #3
 8004500:	3301      	adds	r3, #1
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	fbb2 f3f3 	udiv	r3, r2, r3
 800450a:	61fb      	str	r3, [r7, #28]
          break;
 800450c:	e030      	b.n	8004570 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800450e:	4b79      	ldr	r3, [pc, #484]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004516:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800451a:	d12b      	bne.n	8004574 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800451c:	4b75      	ldr	r3, [pc, #468]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004524:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004528:	d124      	bne.n	8004574 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800452a:	4b72      	ldr	r3, [pc, #456]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	0a1b      	lsrs	r3, r3, #8
 8004530:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004534:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	fb03 f202 	mul.w	r2, r3, r2
 800453e:	4b6d      	ldr	r3, [pc, #436]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	091b      	lsrs	r3, r3, #4
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	3301      	adds	r3, #1
 800454a:	fbb2 f3f3 	udiv	r3, r2, r3
 800454e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004550:	4b68      	ldr	r3, [pc, #416]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	0d5b      	lsrs	r3, r3, #21
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	3301      	adds	r3, #1
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	fbb2 f3f3 	udiv	r3, r2, r3
 8004564:	61fb      	str	r3, [r7, #28]
          break;
 8004566:	e005      	b.n	8004574 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8004568:	bf00      	nop
 800456a:	e359      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800456c:	bf00      	nop
 800456e:	e357      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004570:	bf00      	nop
 8004572:	e355      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004574:	bf00      	nop
        break;
 8004576:	e353      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004578:	4b5e      	ldr	r3, [pc, #376]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800457a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	613b      	str	r3, [r7, #16]
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	2b03      	cmp	r3, #3
 8004588:	d827      	bhi.n	80045da <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 800458a:	a201      	add	r2, pc, #4	@ (adr r2, 8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 800458c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004590:	080045a1 	.word	0x080045a1
 8004594:	080045a9 	.word	0x080045a9
 8004598:	080045b1 	.word	0x080045b1
 800459c:	080045c5 	.word	0x080045c5
          frequency = HAL_RCC_GetPCLK2Freq();
 80045a0:	f7ff fa48 	bl	8003a34 <HAL_RCC_GetPCLK2Freq>
 80045a4:	61f8      	str	r0, [r7, #28]
          break;
 80045a6:	e01d      	b.n	80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 80045a8:	f7ff f996 	bl	80038d8 <HAL_RCC_GetSysClockFreq>
 80045ac:	61f8      	str	r0, [r7, #28]
          break;
 80045ae:	e019      	b.n	80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80045b0:	4b50      	ldr	r3, [pc, #320]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045bc:	d10f      	bne.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 80045be:	4b4f      	ldr	r3, [pc, #316]	@ (80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80045c0:	61fb      	str	r3, [r7, #28]
          break;
 80045c2:	e00c      	b.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80045c4:	4b4b      	ldr	r3, [pc, #300]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80045c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d107      	bne.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 80045d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045d6:	61fb      	str	r3, [r7, #28]
          break;
 80045d8:	e003      	b.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 80045da:	bf00      	nop
 80045dc:	e320      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80045de:	bf00      	nop
 80045e0:	e31e      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80045e2:	bf00      	nop
        break;
 80045e4:	e31c      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80045e6:	4b43      	ldr	r3, [pc, #268]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80045e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ec:	f003 030c 	and.w	r3, r3, #12
 80045f0:	613b      	str	r3, [r7, #16]
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	2b0c      	cmp	r3, #12
 80045f6:	d83a      	bhi.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80045f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004600 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 80045fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fe:	bf00      	nop
 8004600:	08004635 	.word	0x08004635
 8004604:	0800466f 	.word	0x0800466f
 8004608:	0800466f 	.word	0x0800466f
 800460c:	0800466f 	.word	0x0800466f
 8004610:	0800463d 	.word	0x0800463d
 8004614:	0800466f 	.word	0x0800466f
 8004618:	0800466f 	.word	0x0800466f
 800461c:	0800466f 	.word	0x0800466f
 8004620:	08004645 	.word	0x08004645
 8004624:	0800466f 	.word	0x0800466f
 8004628:	0800466f 	.word	0x0800466f
 800462c:	0800466f 	.word	0x0800466f
 8004630:	08004659 	.word	0x08004659
          frequency = HAL_RCC_GetPCLK1Freq();
 8004634:	f7ff f9e8 	bl	8003a08 <HAL_RCC_GetPCLK1Freq>
 8004638:	61f8      	str	r0, [r7, #28]
          break;
 800463a:	e01d      	b.n	8004678 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 800463c:	f7ff f94c 	bl	80038d8 <HAL_RCC_GetSysClockFreq>
 8004640:	61f8      	str	r0, [r7, #28]
          break;
 8004642:	e019      	b.n	8004678 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004644:	4b2b      	ldr	r3, [pc, #172]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800464c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004650:	d10f      	bne.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8004652:	4b2a      	ldr	r3, [pc, #168]	@ (80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004654:	61fb      	str	r3, [r7, #28]
          break;
 8004656:	e00c      	b.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004658:	4b26      	ldr	r3, [pc, #152]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800465a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b02      	cmp	r3, #2
 8004664:	d107      	bne.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8004666:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800466a:	61fb      	str	r3, [r7, #28]
          break;
 800466c:	e003      	b.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 800466e:	bf00      	nop
 8004670:	e2d6      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004672:	bf00      	nop
 8004674:	e2d4      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004676:	bf00      	nop
        break;
 8004678:	e2d2      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800467a:	4b1e      	ldr	r3, [pc, #120]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800467c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004680:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	2b30      	cmp	r3, #48	@ 0x30
 800468a:	d021      	beq.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	2b30      	cmp	r3, #48	@ 0x30
 8004690:	d829      	bhi.n	80046e6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	2b20      	cmp	r3, #32
 8004696:	d011      	beq.n	80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	2b20      	cmp	r3, #32
 800469c:	d823      	bhi.n	80046e6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	2b10      	cmp	r3, #16
 80046a8:	d004      	beq.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 80046aa:	e01c      	b.n	80046e6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80046ac:	f7ff f9ac 	bl	8003a08 <HAL_RCC_GetPCLK1Freq>
 80046b0:	61f8      	str	r0, [r7, #28]
          break;
 80046b2:	e01d      	b.n	80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 80046b4:	f7ff f910 	bl	80038d8 <HAL_RCC_GetSysClockFreq>
 80046b8:	61f8      	str	r0, [r7, #28]
          break;
 80046ba:	e019      	b.n	80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80046bc:	4b0d      	ldr	r3, [pc, #52]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046c8:	d10f      	bne.n	80046ea <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 80046ca:	4b0c      	ldr	r3, [pc, #48]	@ (80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80046cc:	61fb      	str	r3, [r7, #28]
          break;
 80046ce:	e00c      	b.n	80046ea <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80046d0:	4b08      	ldr	r3, [pc, #32]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80046d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d107      	bne.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 80046de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046e2:	61fb      	str	r3, [r7, #28]
          break;
 80046e4:	e003      	b.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 80046e6:	bf00      	nop
 80046e8:	e29a      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80046ea:	bf00      	nop
 80046ec:	e298      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80046ee:	bf00      	nop
        break;
 80046f0:	e296      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80046f2:	bf00      	nop
 80046f4:	40021000 	.word	0x40021000
 80046f8:	08009974 	.word	0x08009974
 80046fc:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004700:	4b9b      	ldr	r3, [pc, #620]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004706:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800470a:	613b      	str	r3, [r7, #16]
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004710:	d021      	beq.n	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	2bc0      	cmp	r3, #192	@ 0xc0
 8004716:	d829      	bhi.n	800476c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	2b80      	cmp	r3, #128	@ 0x80
 800471c:	d011      	beq.n	8004742 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	2b80      	cmp	r3, #128	@ 0x80
 8004722:	d823      	bhi.n	800476c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	2b40      	cmp	r3, #64	@ 0x40
 800472e:	d004      	beq.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8004730:	e01c      	b.n	800476c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004732:	f7ff f969 	bl	8003a08 <HAL_RCC_GetPCLK1Freq>
 8004736:	61f8      	str	r0, [r7, #28]
          break;
 8004738:	e01d      	b.n	8004776 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 800473a:	f7ff f8cd 	bl	80038d8 <HAL_RCC_GetSysClockFreq>
 800473e:	61f8      	str	r0, [r7, #28]
          break;
 8004740:	e019      	b.n	8004776 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004742:	4b8b      	ldr	r3, [pc, #556]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800474a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800474e:	d10f      	bne.n	8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8004750:	4b88      	ldr	r3, [pc, #544]	@ (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004752:	61fb      	str	r3, [r7, #28]
          break;
 8004754:	e00c      	b.n	8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004756:	4b86      	ldr	r3, [pc, #536]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b02      	cmp	r3, #2
 8004762:	d107      	bne.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8004764:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004768:	61fb      	str	r3, [r7, #28]
          break;
 800476a:	e003      	b.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 800476c:	bf00      	nop
 800476e:	e257      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004770:	bf00      	nop
 8004772:	e255      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004774:	bf00      	nop
        break;
 8004776:	e253      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004778:	4b7d      	ldr	r3, [pc, #500]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800477a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800477e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004782:	613b      	str	r3, [r7, #16]
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800478a:	d025      	beq.n	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004792:	d82c      	bhi.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800479a:	d013      	beq.n	80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047a2:	d824      	bhi.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d004      	beq.n	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047b0:	d004      	beq.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 80047b2:	e01c      	b.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 80047b4:	f7ff f928 	bl	8003a08 <HAL_RCC_GetPCLK1Freq>
 80047b8:	61f8      	str	r0, [r7, #28]
          break;
 80047ba:	e01d      	b.n	80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 80047bc:	f7ff f88c 	bl	80038d8 <HAL_RCC_GetSysClockFreq>
 80047c0:	61f8      	str	r0, [r7, #28]
          break;
 80047c2:	e019      	b.n	80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80047c4:	4b6a      	ldr	r3, [pc, #424]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047d0:	d10f      	bne.n	80047f2 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 80047d2:	4b68      	ldr	r3, [pc, #416]	@ (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80047d4:	61fb      	str	r3, [r7, #28]
          break;
 80047d6:	e00c      	b.n	80047f2 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80047d8:	4b65      	ldr	r3, [pc, #404]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d107      	bne.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 80047e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047ea:	61fb      	str	r3, [r7, #28]
          break;
 80047ec:	e003      	b.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 80047ee:	bf00      	nop
 80047f0:	e216      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80047f2:	bf00      	nop
 80047f4:	e214      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80047f6:	bf00      	nop
        break;
 80047f8:	e212      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80047fa:	4b5d      	ldr	r3, [pc, #372]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80047fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004800:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004804:	613b      	str	r3, [r7, #16]
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800480c:	d025      	beq.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004814:	d82c      	bhi.n	8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800481c:	d013      	beq.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004824:	d824      	bhi.n	8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d004      	beq.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004832:	d004      	beq.n	800483e <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8004834:	e01c      	b.n	8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004836:	f7ff f8e7 	bl	8003a08 <HAL_RCC_GetPCLK1Freq>
 800483a:	61f8      	str	r0, [r7, #28]
          break;
 800483c:	e01d      	b.n	800487a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 800483e:	f7ff f84b 	bl	80038d8 <HAL_RCC_GetSysClockFreq>
 8004842:	61f8      	str	r0, [r7, #28]
          break;
 8004844:	e019      	b.n	800487a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004846:	4b4a      	ldr	r3, [pc, #296]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800484e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004852:	d10f      	bne.n	8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8004854:	4b47      	ldr	r3, [pc, #284]	@ (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004856:	61fb      	str	r3, [r7, #28]
          break;
 8004858:	e00c      	b.n	8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800485a:	4b45      	ldr	r3, [pc, #276]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800485c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b02      	cmp	r3, #2
 8004866:	d107      	bne.n	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8004868:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800486c:	61fb      	str	r3, [r7, #28]
          break;
 800486e:	e003      	b.n	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8004870:	bf00      	nop
 8004872:	e1d5      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004874:	bf00      	nop
 8004876:	e1d3      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004878:	bf00      	nop
        break;
 800487a:	e1d1      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800487c:	4b3c      	ldr	r3, [pc, #240]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800487e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004882:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004886:	613b      	str	r3, [r7, #16]
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800488e:	d00c      	beq.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004896:	d864      	bhi.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800489e:	d008      	beq.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048a6:	d030      	beq.n	800490a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 80048a8:	e05b      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 80048aa:	f7ff f815 	bl	80038d8 <HAL_RCC_GetSysClockFreq>
 80048ae:	61f8      	str	r0, [r7, #28]
          break;
 80048b0:	e05c      	b.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80048b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048be:	d152      	bne.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 80048c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d04c      	beq.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80048cc:	4b28      	ldr	r3, [pc, #160]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	0a1b      	lsrs	r3, r3, #8
 80048d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048d6:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	fb03 f202 	mul.w	r2, r3, r2
 80048e0:	4b23      	ldr	r3, [pc, #140]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	091b      	lsrs	r3, r3, #4
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	3301      	adds	r3, #1
 80048ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80048f2:	4b1f      	ldr	r3, [pc, #124]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	0e5b      	lsrs	r3, r3, #25
 80048f8:	f003 0303 	and.w	r3, r3, #3
 80048fc:	3301      	adds	r3, #1
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	fbb2 f3f3 	udiv	r3, r2, r3
 8004906:	61fb      	str	r3, [r7, #28]
          break;
 8004908:	e02d      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800490a:	4b19      	ldr	r3, [pc, #100]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004912:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004916:	d128      	bne.n	800496a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8004918:	4b15      	ldr	r3, [pc, #84]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d022      	beq.n	800496a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004924:	4b12      	ldr	r3, [pc, #72]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	0a1b      	lsrs	r3, r3, #8
 800492a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800492e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	fb03 f202 	mul.w	r2, r3, r2
 8004938:	4b0d      	ldr	r3, [pc, #52]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	091b      	lsrs	r3, r3, #4
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	3301      	adds	r3, #1
 8004944:	fbb2 f3f3 	udiv	r3, r2, r3
 8004948:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800494a:	4b09      	ldr	r3, [pc, #36]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	0e5b      	lsrs	r3, r3, #25
 8004950:	f003 0303 	and.w	r3, r3, #3
 8004954:	3301      	adds	r3, #1
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	fbb2 f3f3 	udiv	r3, r2, r3
 800495e:	61fb      	str	r3, [r7, #28]
          break;
 8004960:	e003      	b.n	800496a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8004962:	bf00      	nop
 8004964:	e15c      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004966:	bf00      	nop
 8004968:	e15a      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800496a:	bf00      	nop
        break;
 800496c:	e158      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800496e:	bf00      	nop
 8004970:	40021000 	.word	0x40021000
 8004974:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004978:	4b9d      	ldr	r3, [pc, #628]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800497a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800497e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004982:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d103      	bne.n	8004992 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 800498a:	f7ff f853 	bl	8003a34 <HAL_RCC_GetPCLK2Freq>
 800498e:	61f8      	str	r0, [r7, #28]
        break;
 8004990:	e146      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8004992:	f7fe ffa1 	bl	80038d8 <HAL_RCC_GetSysClockFreq>
 8004996:	61f8      	str	r0, [r7, #28]
        break;
 8004998:	e142      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800499a:	4b95      	ldr	r3, [pc, #596]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800499c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80049a4:	613b      	str	r3, [r7, #16]
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049ac:	d013      	beq.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049b4:	d819      	bhi.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d004      	beq.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049c2:	d004      	beq.n	80049ce <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 80049c4:	e011      	b.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 80049c6:	f7ff f81f 	bl	8003a08 <HAL_RCC_GetPCLK1Freq>
 80049ca:	61f8      	str	r0, [r7, #28]
          break;
 80049cc:	e010      	b.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 80049ce:	f7fe ff83 	bl	80038d8 <HAL_RCC_GetSysClockFreq>
 80049d2:	61f8      	str	r0, [r7, #28]
          break;
 80049d4:	e00c      	b.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80049d6:	4b86      	ldr	r3, [pc, #536]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049e2:	d104      	bne.n	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 80049e4:	4b83      	ldr	r3, [pc, #524]	@ (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80049e6:	61fb      	str	r3, [r7, #28]
          break;
 80049e8:	e001      	b.n	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 80049ea:	bf00      	nop
 80049ec:	e118      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80049ee:	bf00      	nop
        break;
 80049f0:	e116      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80049f2:	4b7f      	ldr	r3, [pc, #508]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80049f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80049fc:	613b      	str	r3, [r7, #16]
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a04:	d013      	beq.n	8004a2e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a0c:	d819      	bhi.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d004      	beq.n	8004a1e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a1a:	d004      	beq.n	8004a26 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8004a1c:	e011      	b.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004a1e:	f7fe fff3 	bl	8003a08 <HAL_RCC_GetPCLK1Freq>
 8004a22:	61f8      	str	r0, [r7, #28]
          break;
 8004a24:	e010      	b.n	8004a48 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004a26:	f7fe ff57 	bl	80038d8 <HAL_RCC_GetSysClockFreq>
 8004a2a:	61f8      	str	r0, [r7, #28]
          break;
 8004a2c:	e00c      	b.n	8004a48 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a2e:	4b70      	ldr	r3, [pc, #448]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a3a:	d104      	bne.n	8004a46 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8004a3c:	4b6d      	ldr	r3, [pc, #436]	@ (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004a3e:	61fb      	str	r3, [r7, #28]
          break;
 8004a40:	e001      	b.n	8004a46 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8004a42:	bf00      	nop
 8004a44:	e0ec      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004a46:	bf00      	nop
        break;
 8004a48:	e0ea      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004a4a:	4b69      	ldr	r3, [pc, #420]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a54:	613b      	str	r3, [r7, #16]
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a5c:	d013      	beq.n	8004a86 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a64:	d819      	bhi.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d004      	beq.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a72:	d004      	beq.n	8004a7e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8004a74:	e011      	b.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004a76:	f7fe ffc7 	bl	8003a08 <HAL_RCC_GetPCLK1Freq>
 8004a7a:	61f8      	str	r0, [r7, #28]
          break;
 8004a7c:	e010      	b.n	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8004a7e:	f7fe ff2b 	bl	80038d8 <HAL_RCC_GetSysClockFreq>
 8004a82:	61f8      	str	r0, [r7, #28]
          break;
 8004a84:	e00c      	b.n	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a86:	4b5a      	ldr	r3, [pc, #360]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a92:	d104      	bne.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8004a94:	4b57      	ldr	r3, [pc, #348]	@ (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004a96:	61fb      	str	r3, [r7, #28]
          break;
 8004a98:	e001      	b.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8004a9a:	bf00      	nop
 8004a9c:	e0c0      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004a9e:	bf00      	nop
        break;
 8004aa0:	e0be      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004aa2:	4b53      	ldr	r3, [pc, #332]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004aac:	613b      	str	r3, [r7, #16]
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004ab4:	d02c      	beq.n	8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004abc:	d833      	bhi.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004ac4:	d01a      	beq.n	8004afc <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004acc:	d82b      	bhi.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d004      	beq.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ada:	d004      	beq.n	8004ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8004adc:	e023      	b.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004ade:	f7fe ff93 	bl	8003a08 <HAL_RCC_GetPCLK1Freq>
 8004ae2:	61f8      	str	r0, [r7, #28]
          break;
 8004ae4:	e026      	b.n	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004ae6:	4b42      	ldr	r3, [pc, #264]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d11a      	bne.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8004af4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004af8:	61fb      	str	r3, [r7, #28]
          break;
 8004afa:	e016      	b.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004afc:	4b3c      	ldr	r3, [pc, #240]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b08:	d111      	bne.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8004b0a:	4b3a      	ldr	r3, [pc, #232]	@ (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004b0c:	61fb      	str	r3, [r7, #28]
          break;
 8004b0e:	e00e      	b.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004b10:	4b37      	ldr	r3, [pc, #220]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d109      	bne.n	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8004b1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b22:	61fb      	str	r3, [r7, #28]
          break;
 8004b24:	e005      	b.n	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8004b26:	bf00      	nop
 8004b28:	e07a      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004b2a:	bf00      	nop
 8004b2c:	e078      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004b2e:	bf00      	nop
 8004b30:	e076      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004b32:	bf00      	nop
        break;
 8004b34:	e074      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004b36:	4b2e      	ldr	r3, [pc, #184]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004b40:	613b      	str	r3, [r7, #16]
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b48:	d02c      	beq.n	8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b50:	d833      	bhi.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b58:	d01a      	beq.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b60:	d82b      	bhi.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d004      	beq.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b6e:	d004      	beq.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8004b70:	e023      	b.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b72:	f7fe ff49 	bl	8003a08 <HAL_RCC_GetPCLK1Freq>
 8004b76:	61f8      	str	r0, [r7, #28]
          break;
 8004b78:	e026      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d11a      	bne.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8004b88:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004b8c:	61fb      	str	r3, [r7, #28]
          break;
 8004b8e:	e016      	b.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b90:	4b17      	ldr	r3, [pc, #92]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b9c:	d111      	bne.n	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8004b9e:	4b15      	ldr	r3, [pc, #84]	@ (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004ba0:	61fb      	str	r3, [r7, #28]
          break;
 8004ba2:	e00e      	b.n	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004ba4:	4b12      	ldr	r3, [pc, #72]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d109      	bne.n	8004bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8004bb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bb6:	61fb      	str	r3, [r7, #28]
          break;
 8004bb8:	e005      	b.n	8004bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8004bba:	bf00      	nop
 8004bbc:	e030      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004bbe:	bf00      	nop
 8004bc0:	e02e      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004bc2:	bf00      	nop
 8004bc4:	e02c      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004bc6:	bf00      	nop
        break;
 8004bc8:	e02a      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8004bca:	4b09      	ldr	r3, [pc, #36]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004bd4:	613b      	str	r3, [r7, #16]
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d004      	beq.n	8004be6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004be2:	d009      	beq.n	8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8004be4:	e012      	b.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004be6:	f7fe ff0f 	bl	8003a08 <HAL_RCC_GetPCLK1Freq>
 8004bea:	61f8      	str	r0, [r7, #28]
          break;
 8004bec:	e00e      	b.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8004bee:	bf00      	nop
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c04:	d101      	bne.n	8004c0a <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8004c06:	4b0a      	ldr	r3, [pc, #40]	@ (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004c08:	61fb      	str	r3, [r7, #28]
          break;
 8004c0a:	bf00      	nop
        break;
 8004c0c:	e008      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004c0e:	bf00      	nop
 8004c10:	e006      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004c12:	bf00      	nop
 8004c14:	e004      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004c16:	bf00      	nop
 8004c18:	e002      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004c1a:	bf00      	nop
 8004c1c:	e000      	b.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004c1e:	bf00      	nop
    }
  }

  return(frequency);
 8004c20:	69fb      	ldr	r3, [r7, #28]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3720      	adds	r7, #32
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	40021000 	.word	0x40021000
 8004c30:	00f42400 	.word	0x00f42400

08004c34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c42:	4b75      	ldr	r3, [pc, #468]	@ (8004e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d018      	beq.n	8004c80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c4e:	4b72      	ldr	r3, [pc, #456]	@ (8004e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f003 0203 	and.w	r2, r3, #3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d10d      	bne.n	8004c7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
       ||
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d009      	beq.n	8004c7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004c66:	4b6c      	ldr	r3, [pc, #432]	@ (8004e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	091b      	lsrs	r3, r3, #4
 8004c6c:	f003 0307 	and.w	r3, r3, #7
 8004c70:	1c5a      	adds	r2, r3, #1
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
       ||
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d047      	beq.n	8004d0a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	73fb      	strb	r3, [r7, #15]
 8004c7e:	e044      	b.n	8004d0a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b03      	cmp	r3, #3
 8004c86:	d018      	beq.n	8004cba <RCCEx_PLLSAI1_Config+0x86>
 8004c88:	2b03      	cmp	r3, #3
 8004c8a:	d825      	bhi.n	8004cd8 <RCCEx_PLLSAI1_Config+0xa4>
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d002      	beq.n	8004c96 <RCCEx_PLLSAI1_Config+0x62>
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d009      	beq.n	8004ca8 <RCCEx_PLLSAI1_Config+0x74>
 8004c94:	e020      	b.n	8004cd8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c96:	4b60      	ldr	r3, [pc, #384]	@ (8004e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d11d      	bne.n	8004cde <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ca6:	e01a      	b.n	8004cde <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ca8:	4b5b      	ldr	r3, [pc, #364]	@ (8004e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d116      	bne.n	8004ce2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cb8:	e013      	b.n	8004ce2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cba:	4b57      	ldr	r3, [pc, #348]	@ (8004e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10f      	bne.n	8004ce6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004cc6:	4b54      	ldr	r3, [pc, #336]	@ (8004e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d109      	bne.n	8004ce6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004cd6:	e006      	b.n	8004ce6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	73fb      	strb	r3, [r7, #15]
      break;
 8004cdc:	e004      	b.n	8004ce8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004cde:	bf00      	nop
 8004ce0:	e002      	b.n	8004ce8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ce2:	bf00      	nop
 8004ce4:	e000      	b.n	8004ce8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ce6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10d      	bne.n	8004d0a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004cee:	4b4a      	ldr	r3, [pc, #296]	@ (8004e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6819      	ldr	r1, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	011b      	lsls	r3, r3, #4
 8004d02:	430b      	orrs	r3, r1
 8004d04:	4944      	ldr	r1, [pc, #272]	@ (8004e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d17d      	bne.n	8004e0c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d10:	4b41      	ldr	r3, [pc, #260]	@ (8004e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a40      	ldr	r2, [pc, #256]	@ (8004e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d1c:	f7fc fd52 	bl	80017c4 <HAL_GetTick>
 8004d20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d22:	e009      	b.n	8004d38 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d24:	f7fc fd4e 	bl	80017c4 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d902      	bls.n	8004d38 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	73fb      	strb	r3, [r7, #15]
        break;
 8004d36:	e005      	b.n	8004d44 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d38:	4b37      	ldr	r3, [pc, #220]	@ (8004e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1ef      	bne.n	8004d24 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d160      	bne.n	8004e0c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d111      	bne.n	8004d74 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d50:	4b31      	ldr	r3, [pc, #196]	@ (8004e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004d58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	6892      	ldr	r2, [r2, #8]
 8004d60:	0211      	lsls	r1, r2, #8
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	68d2      	ldr	r2, [r2, #12]
 8004d66:	0912      	lsrs	r2, r2, #4
 8004d68:	0452      	lsls	r2, r2, #17
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	492a      	ldr	r1, [pc, #168]	@ (8004e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	610b      	str	r3, [r1, #16]
 8004d72:	e027      	b.n	8004dc4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d112      	bne.n	8004da0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d7a:	4b27      	ldr	r3, [pc, #156]	@ (8004e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004d82:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	6892      	ldr	r2, [r2, #8]
 8004d8a:	0211      	lsls	r1, r2, #8
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	6912      	ldr	r2, [r2, #16]
 8004d90:	0852      	lsrs	r2, r2, #1
 8004d92:	3a01      	subs	r2, #1
 8004d94:	0552      	lsls	r2, r2, #21
 8004d96:	430a      	orrs	r2, r1
 8004d98:	491f      	ldr	r1, [pc, #124]	@ (8004e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	610b      	str	r3, [r1, #16]
 8004d9e:	e011      	b.n	8004dc4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004da0:	4b1d      	ldr	r3, [pc, #116]	@ (8004e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004da8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6892      	ldr	r2, [r2, #8]
 8004db0:	0211      	lsls	r1, r2, #8
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	6952      	ldr	r2, [r2, #20]
 8004db6:	0852      	lsrs	r2, r2, #1
 8004db8:	3a01      	subs	r2, #1
 8004dba:	0652      	lsls	r2, r2, #25
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	4916      	ldr	r1, [pc, #88]	@ (8004e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004dc4:	4b14      	ldr	r3, [pc, #80]	@ (8004e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a13      	ldr	r2, [pc, #76]	@ (8004e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004dce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd0:	f7fc fcf8 	bl	80017c4 <HAL_GetTick>
 8004dd4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004dd6:	e009      	b.n	8004dec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004dd8:	f7fc fcf4 	bl	80017c4 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d902      	bls.n	8004dec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	73fb      	strb	r3, [r7, #15]
          break;
 8004dea:	e005      	b.n	8004df8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004dec:	4b0a      	ldr	r3, [pc, #40]	@ (8004e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0ef      	beq.n	8004dd8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004df8:	7bfb      	ldrb	r3, [r7, #15]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d106      	bne.n	8004e0c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004dfe:	4b06      	ldr	r3, [pc, #24]	@ (8004e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e00:	691a      	ldr	r2, [r3, #16]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	4904      	ldr	r1, [pc, #16]	@ (8004e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	40021000 	.word	0x40021000

08004e1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e2a:	4b6a      	ldr	r3, [pc, #424]	@ (8004fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f003 0303 	and.w	r3, r3, #3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d018      	beq.n	8004e68 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004e36:	4b67      	ldr	r3, [pc, #412]	@ (8004fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f003 0203 	and.w	r2, r3, #3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d10d      	bne.n	8004e62 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
       ||
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d009      	beq.n	8004e62 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004e4e:	4b61      	ldr	r3, [pc, #388]	@ (8004fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	091b      	lsrs	r3, r3, #4
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	1c5a      	adds	r2, r3, #1
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
       ||
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d047      	beq.n	8004ef2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	73fb      	strb	r3, [r7, #15]
 8004e66:	e044      	b.n	8004ef2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b03      	cmp	r3, #3
 8004e6e:	d018      	beq.n	8004ea2 <RCCEx_PLLSAI2_Config+0x86>
 8004e70:	2b03      	cmp	r3, #3
 8004e72:	d825      	bhi.n	8004ec0 <RCCEx_PLLSAI2_Config+0xa4>
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d002      	beq.n	8004e7e <RCCEx_PLLSAI2_Config+0x62>
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d009      	beq.n	8004e90 <RCCEx_PLLSAI2_Config+0x74>
 8004e7c:	e020      	b.n	8004ec0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e7e:	4b55      	ldr	r3, [pc, #340]	@ (8004fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d11d      	bne.n	8004ec6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e8e:	e01a      	b.n	8004ec6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e90:	4b50      	ldr	r3, [pc, #320]	@ (8004fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d116      	bne.n	8004eca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ea0:	e013      	b.n	8004eca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ea2:	4b4c      	ldr	r3, [pc, #304]	@ (8004fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10f      	bne.n	8004ece <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004eae:	4b49      	ldr	r3, [pc, #292]	@ (8004fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d109      	bne.n	8004ece <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ebe:	e006      	b.n	8004ece <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ec4:	e004      	b.n	8004ed0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ec6:	bf00      	nop
 8004ec8:	e002      	b.n	8004ed0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004eca:	bf00      	nop
 8004ecc:	e000      	b.n	8004ed0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ece:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10d      	bne.n	8004ef2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ed6:	4b3f      	ldr	r3, [pc, #252]	@ (8004fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6819      	ldr	r1, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	430b      	orrs	r3, r1
 8004eec:	4939      	ldr	r1, [pc, #228]	@ (8004fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ef2:	7bfb      	ldrb	r3, [r7, #15]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d167      	bne.n	8004fc8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ef8:	4b36      	ldr	r3, [pc, #216]	@ (8004fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a35      	ldr	r2, [pc, #212]	@ (8004fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004efe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f04:	f7fc fc5e 	bl	80017c4 <HAL_GetTick>
 8004f08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f0a:	e009      	b.n	8004f20 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f0c:	f7fc fc5a 	bl	80017c4 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d902      	bls.n	8004f20 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	73fb      	strb	r3, [r7, #15]
        break;
 8004f1e:	e005      	b.n	8004f2c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f20:	4b2c      	ldr	r3, [pc, #176]	@ (8004fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1ef      	bne.n	8004f0c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f2c:	7bfb      	ldrb	r3, [r7, #15]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d14a      	bne.n	8004fc8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d111      	bne.n	8004f5c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f38:	4b26      	ldr	r3, [pc, #152]	@ (8004fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004f40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6892      	ldr	r2, [r2, #8]
 8004f48:	0211      	lsls	r1, r2, #8
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	68d2      	ldr	r2, [r2, #12]
 8004f4e:	0912      	lsrs	r2, r2, #4
 8004f50:	0452      	lsls	r2, r2, #17
 8004f52:	430a      	orrs	r2, r1
 8004f54:	491f      	ldr	r1, [pc, #124]	@ (8004fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	614b      	str	r3, [r1, #20]
 8004f5a:	e011      	b.n	8004f80 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8004fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004f64:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6892      	ldr	r2, [r2, #8]
 8004f6c:	0211      	lsls	r1, r2, #8
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	6912      	ldr	r2, [r2, #16]
 8004f72:	0852      	lsrs	r2, r2, #1
 8004f74:	3a01      	subs	r2, #1
 8004f76:	0652      	lsls	r2, r2, #25
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	4916      	ldr	r1, [pc, #88]	@ (8004fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f80:	4b14      	ldr	r3, [pc, #80]	@ (8004fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a13      	ldr	r2, [pc, #76]	@ (8004fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f8c:	f7fc fc1a 	bl	80017c4 <HAL_GetTick>
 8004f90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f92:	e009      	b.n	8004fa8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f94:	f7fc fc16 	bl	80017c4 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d902      	bls.n	8004fa8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	73fb      	strb	r3, [r7, #15]
          break;
 8004fa6:	e005      	b.n	8004fb4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8004fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0ef      	beq.n	8004f94 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004fb4:	7bfb      	ldrb	r3, [r7, #15]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d106      	bne.n	8004fc8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004fba:	4b06      	ldr	r3, [pc, #24]	@ (8004fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fbc:	695a      	ldr	r2, [r3, #20]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	4904      	ldr	r1, [pc, #16]	@ (8004fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	40021000 	.word	0x40021000

08004fd8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b089      	sub	sp, #36	@ 0x24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ff4:	d10c      	bne.n	8005010 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004ff6:	4b6e      	ldr	r3, [pc, #440]	@ (80051b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ffc:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005000:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005008:	d112      	bne.n	8005030 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800500a:	4b6a      	ldr	r3, [pc, #424]	@ (80051b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800500c:	61fb      	str	r3, [r7, #28]
 800500e:	e00f      	b.n	8005030 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005016:	d10b      	bne.n	8005030 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005018:	4b65      	ldr	r3, [pc, #404]	@ (80051b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800501a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800501e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8005022:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800502a:	d101      	bne.n	8005030 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800502c:	4b61      	ldr	r3, [pc, #388]	@ (80051b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800502e:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	2b00      	cmp	r3, #0
 8005034:	f040 80b4 	bne.w	80051a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005042:	d003      	beq.n	800504c <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800504a:	d135      	bne.n	80050b8 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800504c:	4b58      	ldr	r3, [pc, #352]	@ (80051b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005054:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005058:	f040 80a1 	bne.w	800519e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 800505c:	4b54      	ldr	r3, [pc, #336]	@ (80051b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 809a 	beq.w	800519e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800506a:	4b51      	ldr	r3, [pc, #324]	@ (80051b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	091b      	lsrs	r3, r3, #4
 8005070:	f003 0307 	and.w	r3, r3, #7
 8005074:	3301      	adds	r3, #1
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	fbb2 f3f3 	udiv	r3, r2, r3
 800507c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800507e:	4b4c      	ldr	r3, [pc, #304]	@ (80051b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	0a1b      	lsrs	r3, r3, #8
 8005084:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005088:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10a      	bne.n	80050a6 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005090:	4b47      	ldr	r3, [pc, #284]	@ (80051b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 800509c:	2311      	movs	r3, #17
 800509e:	617b      	str	r3, [r7, #20]
 80050a0:	e001      	b.n	80050a6 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 80050a2:	2307      	movs	r3, #7
 80050a4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	fb03 f202 	mul.w	r2, r3, r2
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b4:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80050b6:	e072      	b.n	800519e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d133      	bne.n	8005126 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80050be:	4b3c      	ldr	r3, [pc, #240]	@ (80051b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050ca:	d169      	bne.n	80051a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80050cc:	4b38      	ldr	r3, [pc, #224]	@ (80051b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d063      	beq.n	80051a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80050d8:	4b35      	ldr	r3, [pc, #212]	@ (80051b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	091b      	lsrs	r3, r3, #4
 80050de:	f003 0307 	and.w	r3, r3, #7
 80050e2:	3301      	adds	r3, #1
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ea:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80050ec:	4b30      	ldr	r3, [pc, #192]	@ (80051b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	0a1b      	lsrs	r3, r3, #8
 80050f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050f6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10a      	bne.n	8005114 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80050fe:	4b2c      	ldr	r3, [pc, #176]	@ (80051b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d002      	beq.n	8005110 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800510a:	2311      	movs	r3, #17
 800510c:	617b      	str	r3, [r7, #20]
 800510e:	e001      	b.n	8005114 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8005110:	2307      	movs	r3, #7
 8005112:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	fb03 f202 	mul.w	r2, r3, r2
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005122:	61fb      	str	r3, [r7, #28]
 8005124:	e03c      	b.n	80051a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800512c:	d003      	beq.n	8005136 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005134:	d134      	bne.n	80051a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8005136:	4b1e      	ldr	r3, [pc, #120]	@ (80051b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800513e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005142:	d12d      	bne.n	80051a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005144:	4b1a      	ldr	r3, [pc, #104]	@ (80051b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d027      	beq.n	80051a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005150:	4b17      	ldr	r3, [pc, #92]	@ (80051b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	091b      	lsrs	r3, r3, #4
 8005156:	f003 0307 	and.w	r3, r3, #7
 800515a:	3301      	adds	r3, #1
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005162:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005164:	4b12      	ldr	r3, [pc, #72]	@ (80051b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	0a1b      	lsrs	r3, r3, #8
 800516a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800516e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10a      	bne.n	800518c <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005176:	4b0e      	ldr	r3, [pc, #56]	@ (80051b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d002      	beq.n	8005188 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8005182:	2311      	movs	r3, #17
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	e001      	b.n	800518c <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8005188:	2307      	movs	r3, #7
 800518a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	fb03 f202 	mul.w	r2, r3, r2
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	fbb2 f3f3 	udiv	r3, r2, r3
 800519a:	61fb      	str	r3, [r7, #28]
 800519c:	e000      	b.n	80051a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800519e:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80051a0:	69fb      	ldr	r3, [r7, #28]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3724      	adds	r7, #36	@ 0x24
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40021000 	.word	0x40021000
 80051b4:	001fff68 	.word	0x001fff68

080051b8 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
 80051c4:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d904      	bls.n	80051d6 <HAL_SAI_InitProtocol+0x1e>
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	3b03      	subs	r3, #3
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d812      	bhi.n	80051fa <HAL_SAI_InitProtocol+0x42>
 80051d4:	e008      	b.n	80051e8 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	68b9      	ldr	r1, [r7, #8]
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 fcff 	bl	8005be0 <SAI_InitI2S>
 80051e2:	4603      	mov	r3, r0
 80051e4:	75fb      	strb	r3, [r7, #23]
      break;
 80051e6:	e00b      	b.n	8005200 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	68b9      	ldr	r1, [r7, #8]
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 fda8 	bl	8005d44 <SAI_InitPCM>
 80051f4:	4603      	mov	r3, r0
 80051f6:	75fb      	strb	r3, [r7, #23]
      break;
 80051f8:	e002      	b.n	8005200 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	75fb      	strb	r3, [r7, #23]
      break;
 80051fe:	bf00      	nop
  }

  if (status == HAL_OK)
 8005200:	7dfb      	ldrb	r3, [r7, #23]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d104      	bne.n	8005210 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 f808 	bl	800521c <HAL_SAI_Init>
 800520c:	4603      	mov	r3, r0
 800520e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005210:	7dfb      	ldrb	r3, [r7, #23]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3718      	adds	r7, #24
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
	...

0800521c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b088      	sub	sp, #32
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e155      	b.n	80054da <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fb fc9c 	bl	8000b80 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 fe35 	bl	8005eb8 <SAI_Disable>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d001      	beq.n	8005258 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e140      	b.n	80054da <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	2b02      	cmp	r3, #2
 8005266:	d00c      	beq.n	8005282 <HAL_SAI_Init+0x66>
 8005268:	2b02      	cmp	r3, #2
 800526a:	d80d      	bhi.n	8005288 <HAL_SAI_Init+0x6c>
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <HAL_SAI_Init+0x5a>
 8005270:	2b01      	cmp	r3, #1
 8005272:	d003      	beq.n	800527c <HAL_SAI_Init+0x60>
 8005274:	e008      	b.n	8005288 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8005276:	2300      	movs	r3, #0
 8005278:	61fb      	str	r3, [r7, #28]
      break;
 800527a:	e008      	b.n	800528e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800527c:	2310      	movs	r3, #16
 800527e:	61fb      	str	r3, [r7, #28]
      break;
 8005280:	e005      	b.n	800528e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005282:	2320      	movs	r3, #32
 8005284:	61fb      	str	r3, [r7, #28]
      break;
 8005286:	e002      	b.n	800528e <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8005288:	2300      	movs	r3, #0
 800528a:	61fb      	str	r3, [r7, #28]
      break;
 800528c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	2b03      	cmp	r3, #3
 8005294:	d81d      	bhi.n	80052d2 <HAL_SAI_Init+0xb6>
 8005296:	a201      	add	r2, pc, #4	@ (adr r2, 800529c <HAL_SAI_Init+0x80>)
 8005298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529c:	080052ad 	.word	0x080052ad
 80052a0:	080052b3 	.word	0x080052b3
 80052a4:	080052bb 	.word	0x080052bb
 80052a8:	080052c3 	.word	0x080052c3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80052ac:	2300      	movs	r3, #0
 80052ae:	617b      	str	r3, [r7, #20]
      break;
 80052b0:	e012      	b.n	80052d8 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80052b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052b6:	617b      	str	r3, [r7, #20]
      break;
 80052b8:	e00e      	b.n	80052d8 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80052ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80052be:	617b      	str	r3, [r7, #20]
      break;
 80052c0:	e00a      	b.n	80052d8 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80052c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80052c6:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	f043 0301 	orr.w	r3, r3, #1
 80052ce:	61fb      	str	r3, [r7, #28]
      break;
 80052d0:	e002      	b.n	80052d8 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 80052d2:	2300      	movs	r3, #0
 80052d4:	617b      	str	r3, [r7, #20]
      break;
 80052d6:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a81      	ldr	r2, [pc, #516]	@ (80054e4 <HAL_SAI_Init+0x2c8>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d004      	beq.n	80052ec <HAL_SAI_Init+0xd0>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a80      	ldr	r2, [pc, #512]	@ (80054e8 <HAL_SAI_Init+0x2cc>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d103      	bne.n	80052f4 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 80052ec:	4a7f      	ldr	r2, [pc, #508]	@ (80054ec <HAL_SAI_Init+0x2d0>)
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	e002      	b.n	80052fa <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80052f4:	4a7e      	ldr	r2, [pc, #504]	@ (80054f0 <HAL_SAI_Init+0x2d4>)
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d041      	beq.n	8005386 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a77      	ldr	r2, [pc, #476]	@ (80054e4 <HAL_SAI_Init+0x2c8>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d004      	beq.n	8005316 <HAL_SAI_Init+0xfa>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a75      	ldr	r2, [pc, #468]	@ (80054e8 <HAL_SAI_Init+0x2cc>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d105      	bne.n	8005322 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005316:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800531a:	f7fe ff1d 	bl	8004158 <HAL_RCCEx_GetPeriphCLKFreq>
 800531e:	6138      	str	r0, [r7, #16]
 8005320:	e004      	b.n	800532c <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005322:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005326:	f7fe ff17 	bl	8004158 <HAL_RCCEx_GetPeriphCLKFreq>
 800532a:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	4613      	mov	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	461a      	mov	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	025b      	lsls	r3, r3, #9
 800533e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005342:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4a6b      	ldr	r2, [pc, #428]	@ (80054f4 <HAL_SAI_Init+0x2d8>)
 8005348:	fba2 2303 	umull	r2, r3, r2, r3
 800534c:	08da      	lsrs	r2, r3, #3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8005352:	68f9      	ldr	r1, [r7, #12]
 8005354:	4b67      	ldr	r3, [pc, #412]	@ (80054f4 <HAL_SAI_Init+0x2d8>)
 8005356:	fba3 2301 	umull	r2, r3, r3, r1
 800535a:	08da      	lsrs	r2, r3, #3
 800535c:	4613      	mov	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	005b      	lsls	r3, r3, #1
 8005364:	1aca      	subs	r2, r1, r3
 8005366:	2a08      	cmp	r2, #8
 8005368:	d904      	bls.n	8005374 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	1c5a      	adds	r2, r3, #1
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005378:	2b04      	cmp	r3, #4
 800537a:	d104      	bne.n	8005386 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	085a      	lsrs	r2, r3, #1
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <HAL_SAI_Init+0x17a>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2b02      	cmp	r3, #2
 8005394:	d109      	bne.n	80053aa <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800539a:	2b01      	cmp	r3, #1
 800539c:	d101      	bne.n	80053a2 <HAL_SAI_Init+0x186>
 800539e:	2300      	movs	r3, #0
 80053a0:	e001      	b.n	80053a6 <HAL_SAI_Init+0x18a>
 80053a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80053a6:	61bb      	str	r3, [r7, #24]
 80053a8:	e008      	b.n	80053bc <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d102      	bne.n	80053b8 <HAL_SAI_Init+0x19c>
 80053b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80053b6:	e000      	b.n	80053ba <HAL_SAI_Init+0x19e>
 80053b8:	2300      	movs	r3, #0
 80053ba:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6819      	ldr	r1, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	4b4c      	ldr	r3, [pc, #304]	@ (80054f8 <HAL_SAI_Init+0x2dc>)
 80053c8:	400b      	ands	r3, r1
 80053ca:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6819      	ldr	r1, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053da:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80053e0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e6:	431a      	orrs	r2, r3
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 80053f4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005400:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	051b      	lsls	r3, r3, #20
 8005408:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6812      	ldr	r2, [r2, #0]
 800541c:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005420:	f023 030f 	bic.w	r3, r3, #15
 8005424:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6859      	ldr	r1, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	699a      	ldr	r2, [r3, #24]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005434:	431a      	orrs	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	430a      	orrs	r2, r1
 8005442:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6899      	ldr	r1, [r3, #8]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	4b2b      	ldr	r3, [pc, #172]	@ (80054fc <HAL_SAI_Init+0x2e0>)
 8005450:	400b      	ands	r3, r1
 8005452:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6899      	ldr	r1, [r3, #8]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005464:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800546a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8005470:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005476:	3b01      	subs	r3, #1
 8005478:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800547a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68d9      	ldr	r1, [r3, #12]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8005492:	400b      	ands	r3, r1
 8005494:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68d9      	ldr	r1, [r3, #12]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054aa:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80054ac:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054b2:	3b01      	subs	r3, #1
 80054b4:	021b      	lsls	r3, r3, #8
 80054b6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3720      	adds	r7, #32
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	40015404 	.word	0x40015404
 80054e8:	40015424 	.word	0x40015424
 80054ec:	40015400 	.word	0x40015400
 80054f0:	40015800 	.word	0x40015800
 80054f4:	cccccccd 	.word	0xcccccccd
 80054f8:	ff05c010 	.word	0xff05c010
 80054fc:	fff88000 	.word	0xfff88000

08005500 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005508:	2300      	movs	r3, #0
 800550a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005512:	2b01      	cmp	r3, #1
 8005514:	d101      	bne.n	800551a <HAL_SAI_Abort+0x1a>
 8005516:	2302      	movs	r3, #2
 8005518:	e053      	b.n	80055c2 <HAL_SAI_Abort+0xc2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 fcc8 	bl	8005eb8 <SAI_Disable>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800553c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005540:	d125      	bne.n	800558e <HAL_SAI_Abort+0x8e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005550:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b12      	cmp	r3, #18
 800555c:	d108      	bne.n	8005570 <HAL_SAI_Abort+0x70>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005562:	2b00      	cmp	r3, #0
 8005564:	d004      	beq.n	8005570 <HAL_SAI_Abort+0x70>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800556a:	4618      	mov	r0, r3
 800556c:	f7fc fb30 	bl	8001bd0 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b22      	cmp	r3, #34	@ 0x22
 800557a:	d108      	bne.n	800558e <HAL_SAI_Abort+0x8e>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005580:	2b00      	cmp	r3, #0
 8005582:	d004      	beq.n	800558e <HAL_SAI_Abort+0x8e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005588:	4618      	mov	r0, r3
 800558a:	f7fc fb21 	bl	8001bd0 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2200      	movs	r2, #0
 8005594:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800559e:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0208 	orr.w	r2, r2, #8
 80055ae:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
	...

080055cc <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	4613      	mov	r3, r2
 80055d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 80055da:	f7fc f8f3 	bl	80017c4 <HAL_GetTick>
 80055de:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d002      	beq.n	80055ec <HAL_SAI_Transmit_DMA+0x20>
 80055e6:	88fb      	ldrh	r3, [r7, #6]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e093      	b.n	8005718 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	f040 808c 	bne.w	8005716 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005604:	2b01      	cmp	r3, #1
 8005606:	d101      	bne.n	800560c <HAL_SAI_Transmit_DMA+0x40>
 8005608:	2302      	movs	r3, #2
 800560a:	e085      	b.n	8005718 <HAL_SAI_Transmit_DMA+0x14c>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	88fa      	ldrh	r2, [r7, #6]
 800561e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	88fa      	ldrh	r2, [r7, #6]
 8005626:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2212      	movs	r2, #18
 8005636:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800563e:	4a38      	ldr	r2, [pc, #224]	@ (8005720 <HAL_SAI_Transmit_DMA+0x154>)
 8005640:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005646:	4a37      	ldr	r2, [pc, #220]	@ (8005724 <HAL_SAI_Transmit_DMA+0x158>)
 8005648:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800564e:	4a36      	ldr	r2, [pc, #216]	@ (8005728 <HAL_SAI_Transmit_DMA+0x15c>)
 8005650:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005656:	2200      	movs	r2, #0
 8005658:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005662:	4619      	mov	r1, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	331c      	adds	r3, #28
 800566a:	461a      	mov	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005672:	f7fc fa4d 	bl	8001b10 <HAL_DMA_Start_IT>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d005      	beq.n	8005688 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e047      	b.n	8005718 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005688:	2100      	movs	r1, #0
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 fbdc 	bl	8005e48 <SAI_InterruptFlag>
 8005690:	4601      	mov	r1, r0
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	691a      	ldr	r2, [r3, #16]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80056ae:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80056b0:	e015      	b.n	80056de <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 80056b2:	f7fc f887 	bl	80017c4 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80056c0:	d90d      	bls.n	80056de <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056c8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e01c      	b.n	8005718 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d0e2      	beq.n	80056b2 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d107      	bne.n	800570a <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005708:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005712:	2300      	movs	r3, #0
 8005714:	e000      	b.n	8005718 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 8005716:	2302      	movs	r3, #2
  }
}
 8005718:	4618      	mov	r0, r3
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	08005f8b 	.word	0x08005f8b
 8005724:	08005f2d 	.word	0x08005f2d
 8005728:	08006021 	.word	0x08006021

0800572c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	4613      	mov	r3, r2
 8005738:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <HAL_SAI_Receive_DMA+0x1a>
 8005740:	88fb      	ldrh	r3, [r7, #6]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e074      	b.n	8005834 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b01      	cmp	r3, #1
 8005754:	d16d      	bne.n	8005832 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800575c:	2b01      	cmp	r3, #1
 800575e:	d101      	bne.n	8005764 <HAL_SAI_Receive_DMA+0x38>
 8005760:	2302      	movs	r3, #2
 8005762:	e067      	b.n	8005834 <HAL_SAI_Receive_DMA+0x108>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	88fa      	ldrh	r2, [r7, #6]
 8005776:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	88fa      	ldrh	r2, [r7, #6]
 800577e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2222      	movs	r2, #34	@ 0x22
 800578e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005796:	4a29      	ldr	r2, [pc, #164]	@ (800583c <HAL_SAI_Receive_DMA+0x110>)
 8005798:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800579e:	4a28      	ldr	r2, [pc, #160]	@ (8005840 <HAL_SAI_Receive_DMA+0x114>)
 80057a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057a6:	4a27      	ldr	r2, [pc, #156]	@ (8005844 <HAL_SAI_Receive_DMA+0x118>)
 80057a8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ae:	2200      	movs	r2, #0
 80057b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	331c      	adds	r3, #28
 80057bc:	4619      	mov	r1, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057c2:	461a      	mov	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80057ca:	f7fc f9a1 	bl	8001b10 <HAL_DMA_Start_IT>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d005      	beq.n	80057e0 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e029      	b.n	8005834 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80057e0:	2100      	movs	r1, #0
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f000 fb30 	bl	8005e48 <SAI_InterruptFlag>
 80057e8:	4601      	mov	r1, r0
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	691a      	ldr	r2, [r3, #16]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	430a      	orrs	r2, r1
 80057f6:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005806:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d107      	bne.n	8005826 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005824:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	e000      	b.n	8005834 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8005832:	2302      	movs	r3, #2
  }
}
 8005834:	4618      	mov	r0, r3
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	08006005 	.word	0x08006005
 8005840:	08005fa7 	.word	0x08005fa7
 8005844:	08006021 	.word	0x08006021

08005848 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 8192 	beq.w	8005b82 <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f003 0308 	and.w	r3, r3, #8
 800587c:	2b00      	cmp	r3, #0
 800587e:	d009      	beq.n	8005894 <HAL_SAI_IRQHandler+0x4c>
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f003 0308 	and.w	r3, r3, #8
 8005886:	2b00      	cmp	r3, #0
 8005888:	d004      	beq.n	8005894 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	4798      	blx	r3
 8005892:	e176      	b.n	8005b82 <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b00      	cmp	r3, #0
 800589c:	d01e      	beq.n	80058dc <HAL_SAI_IRQHandler+0x94>
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d019      	beq.n	80058dc <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2201      	movs	r2, #1
 80058ae:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b22      	cmp	r3, #34	@ 0x22
 80058ba:	d101      	bne.n	80058c0 <HAL_SAI_IRQHandler+0x78>
 80058bc:	2301      	movs	r3, #1
 80058be:	e000      	b.n	80058c2 <HAL_SAI_IRQHandler+0x7a>
 80058c0:	2302      	movs	r3, #2
 80058c2:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	431a      	orrs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7fa ffd9 	bl	800088c <HAL_SAI_ErrorCallback>
 80058da:	e152      	b.n	8005b82 <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d011      	beq.n	800590a <HAL_SAI_IRQHandler+0xc2>
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00c      	beq.n	800590a <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2202      	movs	r2, #2
 80058f6:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f000 8140 	beq.w	8005b82 <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005906:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 8005908:	e13b      	b.n	8005b82 <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f003 0320 	and.w	r3, r3, #32
 8005910:	2b00      	cmp	r3, #0
 8005912:	d055      	beq.n	80059c0 <HAL_SAI_IRQHandler+0x178>
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	f003 0320 	and.w	r3, r3, #32
 800591a:	2b00      	cmp	r3, #0
 800591c:	d050      	beq.n	80059c0 <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2220      	movs	r2, #32
 8005924:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800592c:	f043 0204 	orr.w	r2, r3, #4
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d038      	beq.n	80059b2 <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005944:	2b00      	cmp	r3, #0
 8005946:	d016      	beq.n	8005976 <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800594c:	4a8f      	ldr	r2, [pc, #572]	@ (8005b8c <HAL_SAI_IRQHandler+0x344>)
 800594e:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005954:	4618      	mov	r0, r3
 8005956:	f7fc f979 	bl	8001c4c <HAL_DMA_Abort_IT>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00a      	beq.n	8005976 <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005966:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7fa ff8b 	bl	800088c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 80fc 	beq.w	8005b78 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005984:	4a81      	ldr	r2, [pc, #516]	@ (8005b8c <HAL_SAI_IRQHandler+0x344>)
 8005986:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800598c:	4618      	mov	r0, r3
 800598e:	f7fc f95d 	bl	8001c4c <HAL_DMA_Abort_IT>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 80ef 	beq.w	8005b78 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059a0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7fa ff6e 	bl	800088c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80059b0:	e0e2      	b.n	8005b78 <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f7ff fda4 	bl	8005500 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f7fa ff67 	bl	800088c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80059be:	e0db      	b.n	8005b78 <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d055      	beq.n	8005a76 <HAL_SAI_IRQHandler+0x22e>
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d050      	beq.n	8005a76 <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2240      	movs	r2, #64	@ 0x40
 80059da:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059e2:	f043 0208 	orr.w	r2, r3, #8
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d038      	beq.n	8005a68 <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d016      	beq.n	8005a2c <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a02:	4a62      	ldr	r2, [pc, #392]	@ (8005b8c <HAL_SAI_IRQHandler+0x344>)
 8005a04:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fc f91e 	bl	8001c4c <HAL_DMA_Abort_IT>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a1c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fa ff30 	bl	800088c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 80a3 	beq.w	8005b7c <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a3a:	4a54      	ldr	r2, [pc, #336]	@ (8005b8c <HAL_SAI_IRQHandler+0x344>)
 8005a3c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7fc f902 	bl	8001c4c <HAL_DMA_Abort_IT>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f000 8096 	beq.w	8005b7c <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a56:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7fa ff13 	bl	800088c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005a66:	e089      	b.n	8005b7c <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7ff fd49 	bl	8005500 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f7fa ff0c 	bl	800088c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005a74:	e082      	b.n	8005b7c <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d061      	beq.n	8005b44 <HAL_SAI_IRQHandler+0x2fc>
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	f003 0304 	and.w	r3, r3, #4
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d05c      	beq.n	8005b44 <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2204      	movs	r2, #4
 8005a90:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a98:	f043 0220 	orr.w	r2, r3, #32
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d036      	beq.n	8005b1a <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d016      	beq.n	8005ae2 <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ab8:	4a34      	ldr	r2, [pc, #208]	@ (8005b8c <HAL_SAI_IRQHandler+0x344>)
 8005aba:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7fc f8c3 	bl	8001c4c <HAL_DMA_Abort_IT>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00a      	beq.n	8005ae2 <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ad2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f7fa fed5 	bl	800088c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d04a      	beq.n	8005b80 <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aee:	4a27      	ldr	r2, [pc, #156]	@ (8005b8c <HAL_SAI_IRQHandler+0x344>)
 8005af0:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7fc f8a8 	bl	8001c4c <HAL_DMA_Abort_IT>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d03e      	beq.n	8005b80 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b08:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7fa feba 	bl	800088c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005b18:	e032      	b.n	8005b80 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b2a:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f7fa fea5 	bl	800088c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005b42:	e01d      	b.n	8005b80 <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f003 0310 	and.w	r3, r3, #16
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d019      	beq.n	8005b82 <HAL_SAI_IRQHandler+0x33a>
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f003 0310 	and.w	r3, r3, #16
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d014      	beq.n	8005b82 <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2210      	movs	r2, #16
 8005b5e:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b66:	f043 0210 	orr.w	r2, r3, #16
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7fa fe8b 	bl	800088c <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8005b76:	e004      	b.n	8005b82 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005b78:	bf00      	nop
 8005b7a:	e002      	b.n	8005b82 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005b7c:	bf00      	nop
 8005b7e:	e000      	b.n	8005b82 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005b80:	bf00      	nop
}
 8005b82:	bf00      	nop
 8005b84:	3718      	adds	r7, #24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	08006073 	.word	0x08006073

08005b90 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
 8005bec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <SAI_InitI2S+0x2e>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d103      	bne.n	8005c16 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005c14:	e002      	b.n	8005c1c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005c22:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005c2a:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e077      	b.n	8005d36 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d107      	bne.n	8005c5c <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005c58:	651a      	str	r2, [r3, #80]	@ 0x50
 8005c5a:	e006      	b.n	8005c6a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005c62:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b03      	cmp	r3, #3
 8005c6e:	d84f      	bhi.n	8005d10 <SAI_InitI2S+0x130>
 8005c70:	a201      	add	r2, pc, #4	@ (adr r2, 8005c78 <SAI_InitI2S+0x98>)
 8005c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c76:	bf00      	nop
 8005c78:	08005c89 	.word	0x08005c89
 8005c7c:	08005cab 	.word	0x08005cab
 8005c80:	08005ccd 	.word	0x08005ccd
 8005c84:	08005cef 	.word	0x08005cef
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2280      	movs	r2, #128	@ 0x80
 8005c8c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	085b      	lsrs	r3, r3, #1
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	085b      	lsrs	r3, r3, #1
 8005c9c:	011a      	lsls	r2, r3, #4
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2240      	movs	r2, #64	@ 0x40
 8005ca6:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005ca8:	e035      	b.n	8005d16 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2280      	movs	r2, #128	@ 0x80
 8005cae:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	085b      	lsrs	r3, r3, #1
 8005cb4:	019a      	lsls	r2, r3, #6
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	085b      	lsrs	r3, r3, #1
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2280      	movs	r2, #128	@ 0x80
 8005cc8:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005cca:	e024      	b.n	8005d16 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	22c0      	movs	r2, #192	@ 0xc0
 8005cd0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	085b      	lsrs	r3, r3, #1
 8005cd6:	019a      	lsls	r2, r3, #6
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	085b      	lsrs	r3, r3, #1
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2280      	movs	r2, #128	@ 0x80
 8005cea:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005cec:	e013      	b.n	8005d16 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	22e0      	movs	r2, #224	@ 0xe0
 8005cf2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	085b      	lsrs	r3, r3, #1
 8005cf8:	019a      	lsls	r2, r3, #6
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	085b      	lsrs	r3, r3, #1
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2280      	movs	r2, #128	@ 0x80
 8005d0c:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005d0e:	e002      	b.n	8005d16 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	75fb      	strb	r3, [r7, #23]
      break;
 8005d14:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d10b      	bne.n	8005d34 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d102      	bne.n	8005d28 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2210      	movs	r2, #16
 8005d26:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d102      	bne.n	8005d34 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2208      	movs	r2, #8
 8005d32:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 8005d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	371c      	adds	r7, #28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop

08005d44 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
 8005d50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d52:	2300      	movs	r3, #0
 8005d54:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <SAI_InitPCM+0x2e>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d103      	bne.n	8005d7a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2201      	movs	r2, #1
 8005d76:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005d78:	e002      	b.n	8005d80 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005d8c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005d94:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005da8:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	2b04      	cmp	r3, #4
 8005dae:	d103      	bne.n	8005db8 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2201      	movs	r2, #1
 8005db4:	645a      	str	r2, [r3, #68]	@ 0x44
 8005db6:	e002      	b.n	8005dbe <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	220d      	movs	r2, #13
 8005dbc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b03      	cmp	r3, #3
 8005dc2:	d837      	bhi.n	8005e34 <SAI_InitPCM+0xf0>
 8005dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8005dcc <SAI_InitPCM+0x88>)
 8005dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dca:	bf00      	nop
 8005dcc:	08005ddd 	.word	0x08005ddd
 8005dd0:	08005df3 	.word	0x08005df3
 8005dd4:	08005e09 	.word	0x08005e09
 8005dd8:	08005e1f 	.word	0x08005e1f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2280      	movs	r2, #128	@ 0x80
 8005de0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	011a      	lsls	r2, r3, #4
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2240      	movs	r2, #64	@ 0x40
 8005dee:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005df0:	e023      	b.n	8005e3a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2280      	movs	r2, #128	@ 0x80
 8005df6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2280      	movs	r2, #128	@ 0x80
 8005e04:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005e06:	e018      	b.n	8005e3a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	22c0      	movs	r2, #192	@ 0xc0
 8005e0c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2280      	movs	r2, #128	@ 0x80
 8005e1a:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005e1c:	e00d      	b.n	8005e3a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	22e0      	movs	r2, #224	@ 0xe0
 8005e22:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2280      	movs	r2, #128	@ 0x80
 8005e30:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005e32:	e002      	b.n	8005e3a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	75fb      	strb	r3, [r7, #23]
      break;
 8005e38:	bf00      	nop
  }

  return status;
 8005e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	371c      	adds	r7, #28
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	460b      	mov	r3, r1
 8005e52:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8005e58:	78fb      	ldrb	r3, [r7, #3]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d103      	bne.n	8005e66 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f043 0308 	orr.w	r3, r3, #8
 8005e64:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e6a:	2b08      	cmp	r3, #8
 8005e6c:	d10b      	bne.n	8005e86 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005e72:	2b03      	cmp	r3, #3
 8005e74:	d003      	beq.n	8005e7e <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d103      	bne.n	8005e86 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f043 0310 	orr.w	r3, r3, #16
 8005e84:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	2b03      	cmp	r3, #3
 8005e8c:	d003      	beq.n	8005e96 <SAI_InterruptFlag+0x4e>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d104      	bne.n	8005ea0 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005e9c:	60fb      	str	r3, [r7, #12]
 8005e9e:	e003      	b.n	8005ea8 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f043 0304 	orr.w	r3, r3, #4
 8005ea6:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
	...

08005eb8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005ec0:	4b18      	ldr	r3, [pc, #96]	@ (8005f24 <SAI_Disable+0x6c>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a18      	ldr	r2, [pc, #96]	@ (8005f28 <SAI_Disable+0x70>)
 8005ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eca:	0b1b      	lsrs	r3, r3, #12
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005ee2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10a      	bne.n	8005f00 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ef0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	72fb      	strb	r3, [r7, #11]
      break;
 8005efe:	e009      	b.n	8005f14 <SAI_Disable+0x5c>
    }
    count--;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	3b01      	subs	r3, #1
 8005f04:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1e7      	bne.n	8005ee4 <SAI_Disable+0x2c>

  return status;
 8005f14:	7afb      	ldrb	r3, [r7, #11]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	20000000 	.word	0x20000000
 8005f28:	95cbec1b 	.word	0x95cbec1b

08005f2c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f38:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	2b20      	cmp	r3, #32
 8005f40:	d01c      	beq.n	8005f7c <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005f58:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f7ff ff73 	bl	8005e48 <SAI_InterruptFlag>
 8005f62:	4603      	mov	r3, r0
 8005f64:	43d9      	mvns	r1, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	691a      	ldr	r2, [r3, #16]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	400a      	ands	r2, r1
 8005f72:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f7ff fe07 	bl	8005b90 <HAL_SAI_TxCpltCallback>
#endif
}
 8005f82:	bf00      	nop
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b084      	sub	sp, #16
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f96:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f7ff fe03 	bl	8005ba4 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8005f9e:	bf00      	nop
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b084      	sub	sp, #16
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb2:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	69db      	ldr	r3, [r3, #28]
 8005fb8:	2b20      	cmp	r3, #32
 8005fba:	d01c      	beq.n	8005ff6 <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005fca:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f7ff ff36 	bl	8005e48 <SAI_InterruptFlag>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	43d9      	mvns	r1, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	691a      	ldr	r2, [r3, #16]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	400a      	ands	r2, r1
 8005fec:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f7ff fdde 	bl	8005bb8 <HAL_SAI_RxCpltCallback>
#endif
}
 8005ffc:	bf00      	nop
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006010:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f7ff fdda 	bl	8005bcc <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8006018:	bf00      	nop
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800602c:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006034:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800604c:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f7ff ff32 	bl	8005eb8 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f7fa fc11 	bl	800088c <HAL_SAI_ErrorCallback>
#endif
}
 800606a:	bf00      	nop
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b084      	sub	sp, #16
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800607e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800608e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2200      	movs	r2, #0
 8006096:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80060a0:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060a8:	2b20      	cmp	r3, #32
 80060aa:	d00a      	beq.n	80060c2 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f7ff ff03 	bl	8005eb8 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f042 0208 	orr.w	r2, r2, #8
 80060c0:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f7fa fbda 	bl	800088c <HAL_SAI_ErrorCallback>
#endif
}
 80060d8:	bf00      	nop
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e095      	b.n	800621e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d108      	bne.n	800610c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006102:	d009      	beq.n	8006118 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	61da      	str	r2, [r3, #28]
 800610a:	e005      	b.n	8006118 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d106      	bne.n	8006138 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7fa fe46 	bl	8000dc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2202      	movs	r2, #2
 800613c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800614e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006158:	d902      	bls.n	8006160 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800615a:	2300      	movs	r3, #0
 800615c:	60fb      	str	r3, [r7, #12]
 800615e:	e002      	b.n	8006166 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006160:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006164:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800616e:	d007      	beq.n	8006180 <HAL_SPI_Init+0xa0>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006178:	d002      	beq.n	8006180 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006190:	431a      	orrs	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	431a      	orrs	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	f003 0301 	and.w	r3, r3, #1
 80061a4:	431a      	orrs	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061ae:	431a      	orrs	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	69db      	ldr	r3, [r3, #28]
 80061b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061b8:	431a      	orrs	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061c2:	ea42 0103 	orr.w	r1, r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ca:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	0c1b      	lsrs	r3, r3, #16
 80061dc:	f003 0204 	and.w	r2, r3, #4
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e4:	f003 0310 	and.w	r3, r3, #16
 80061e8:	431a      	orrs	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ee:	f003 0308 	and.w	r3, r3, #8
 80061f2:	431a      	orrs	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80061fc:	ea42 0103 	orr.w	r1, r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b088      	sub	sp, #32
 800622a:	af00      	add	r7, sp, #0
 800622c:	60f8      	str	r0, [r7, #12]
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	603b      	str	r3, [r7, #0]
 8006232:	4613      	mov	r3, r2
 8006234:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006236:	f7fb fac5 	bl	80017c4 <HAL_GetTick>
 800623a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800623c:	88fb      	ldrh	r3, [r7, #6]
 800623e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006246:	b2db      	uxtb	r3, r3
 8006248:	2b01      	cmp	r3, #1
 800624a:	d001      	beq.n	8006250 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800624c:	2302      	movs	r3, #2
 800624e:	e15c      	b.n	800650a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d002      	beq.n	800625c <HAL_SPI_Transmit+0x36>
 8006256:	88fb      	ldrh	r3, [r7, #6]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d101      	bne.n	8006260 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e154      	b.n	800650a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006266:	2b01      	cmp	r3, #1
 8006268:	d101      	bne.n	800626e <HAL_SPI_Transmit+0x48>
 800626a:	2302      	movs	r3, #2
 800626c:	e14d      	b.n	800650a <HAL_SPI_Transmit+0x2e4>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2203      	movs	r2, #3
 800627a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	88fa      	ldrh	r2, [r7, #6]
 800628e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	88fa      	ldrh	r2, [r7, #6]
 8006294:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062c0:	d10f      	bne.n	80062e2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ec:	2b40      	cmp	r3, #64	@ 0x40
 80062ee:	d007      	beq.n	8006300 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006308:	d952      	bls.n	80063b0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d002      	beq.n	8006318 <HAL_SPI_Transmit+0xf2>
 8006312:	8b7b      	ldrh	r3, [r7, #26]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d145      	bne.n	80063a4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800631c:	881a      	ldrh	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006328:	1c9a      	adds	r2, r3, #2
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006332:	b29b      	uxth	r3, r3
 8006334:	3b01      	subs	r3, #1
 8006336:	b29a      	uxth	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800633c:	e032      	b.n	80063a4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f003 0302 	and.w	r3, r3, #2
 8006348:	2b02      	cmp	r3, #2
 800634a:	d112      	bne.n	8006372 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006350:	881a      	ldrh	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800635c:	1c9a      	adds	r2, r3, #2
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006366:	b29b      	uxth	r3, r3
 8006368:	3b01      	subs	r3, #1
 800636a:	b29a      	uxth	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006370:	e018      	b.n	80063a4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006372:	f7fb fa27 	bl	80017c4 <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	429a      	cmp	r2, r3
 8006380:	d803      	bhi.n	800638a <HAL_SPI_Transmit+0x164>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006388:	d102      	bne.n	8006390 <HAL_SPI_Transmit+0x16a>
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d109      	bne.n	80063a4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e0b2      	b.n	800650a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1c7      	bne.n	800633e <HAL_SPI_Transmit+0x118>
 80063ae:	e083      	b.n	80064b8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d002      	beq.n	80063be <HAL_SPI_Transmit+0x198>
 80063b8:	8b7b      	ldrh	r3, [r7, #26]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d177      	bne.n	80064ae <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d912      	bls.n	80063ee <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063cc:	881a      	ldrh	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d8:	1c9a      	adds	r2, r3, #2
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	3b02      	subs	r3, #2
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80063ec:	e05f      	b.n	80064ae <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	330c      	adds	r3, #12
 80063f8:	7812      	ldrb	r2, [r2, #0]
 80063fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006400:	1c5a      	adds	r2, r3, #1
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800640a:	b29b      	uxth	r3, r3
 800640c:	3b01      	subs	r3, #1
 800640e:	b29a      	uxth	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006414:	e04b      	b.n	80064ae <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f003 0302 	and.w	r3, r3, #2
 8006420:	2b02      	cmp	r3, #2
 8006422:	d12b      	bne.n	800647c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006428:	b29b      	uxth	r3, r3
 800642a:	2b01      	cmp	r3, #1
 800642c:	d912      	bls.n	8006454 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006432:	881a      	ldrh	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800643e:	1c9a      	adds	r2, r3, #2
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006448:	b29b      	uxth	r3, r3
 800644a:	3b02      	subs	r3, #2
 800644c:	b29a      	uxth	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006452:	e02c      	b.n	80064ae <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	330c      	adds	r3, #12
 800645e:	7812      	ldrb	r2, [r2, #0]
 8006460:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006466:	1c5a      	adds	r2, r3, #1
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006470:	b29b      	uxth	r3, r3
 8006472:	3b01      	subs	r3, #1
 8006474:	b29a      	uxth	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800647a:	e018      	b.n	80064ae <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800647c:	f7fb f9a2 	bl	80017c4 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	429a      	cmp	r2, r3
 800648a:	d803      	bhi.n	8006494 <HAL_SPI_Transmit+0x26e>
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006492:	d102      	bne.n	800649a <HAL_SPI_Transmit+0x274>
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d109      	bne.n	80064ae <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e02d      	b.n	800650a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1ae      	bne.n	8006416 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064b8:	69fa      	ldr	r2, [r7, #28]
 80064ba:	6839      	ldr	r1, [r7, #0]
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 fa5b 	bl	8006978 <SPI_EndRxTxTransaction>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d002      	beq.n	80064ce <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2220      	movs	r2, #32
 80064cc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10a      	bne.n	80064ec <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064d6:	2300      	movs	r3, #0
 80064d8:	617b      	str	r3, [r7, #20]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	617b      	str	r3, [r7, #20]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	617b      	str	r3, [r7, #20]
 80064ea:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006500:	2b00      	cmp	r3, #0
 8006502:	d001      	beq.n	8006508 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e000      	b.n	800650a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8006508:	2300      	movs	r3, #0
  }
}
 800650a:	4618      	mov	r0, r3
 800650c:	3720      	adds	r7, #32
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
	...

08006514 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b088      	sub	sp, #32
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10e      	bne.n	8006554 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800653c:	2b00      	cmp	r3, #0
 800653e:	d009      	beq.n	8006554 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006546:	2b00      	cmp	r3, #0
 8006548:	d004      	beq.n	8006554 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	4798      	blx	r3
    return;
 8006552:	e0ce      	b.n	80066f2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d009      	beq.n	8006572 <HAL_SPI_IRQHandler+0x5e>
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006564:	2b00      	cmp	r3, #0
 8006566:	d004      	beq.n	8006572 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	4798      	blx	r3
    return;
 8006570:	e0bf      	b.n	80066f2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	f003 0320 	and.w	r3, r3, #32
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10a      	bne.n	8006592 <HAL_SPI_IRQHandler+0x7e>
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006582:	2b00      	cmp	r3, #0
 8006584:	d105      	bne.n	8006592 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 80b0 	beq.w	80066f2 <HAL_SPI_IRQHandler+0x1de>
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	f003 0320 	and.w	r3, r3, #32
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 80aa 	beq.w	80066f2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d023      	beq.n	80065f0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b03      	cmp	r3, #3
 80065b2:	d011      	beq.n	80065d8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065b8:	f043 0204 	orr.w	r2, r3, #4
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065c0:	2300      	movs	r3, #0
 80065c2:	617b      	str	r3, [r7, #20]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	617b      	str	r3, [r7, #20]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	617b      	str	r3, [r7, #20]
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	e00b      	b.n	80065f0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065d8:	2300      	movs	r3, #0
 80065da:	613b      	str	r3, [r7, #16]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	613b      	str	r3, [r7, #16]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	613b      	str	r3, [r7, #16]
 80065ec:	693b      	ldr	r3, [r7, #16]
        return;
 80065ee:	e080      	b.n	80066f2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	f003 0320 	and.w	r3, r3, #32
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d014      	beq.n	8006624 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065fe:	f043 0201 	orr.w	r2, r3, #1
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006606:	2300      	movs	r3, #0
 8006608:	60fb      	str	r3, [r7, #12]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	60fb      	str	r3, [r7, #12]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006620:	601a      	str	r2, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00c      	beq.n	8006648 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006632:	f043 0208 	orr.w	r2, r3, #8
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800663a:	2300      	movs	r3, #0
 800663c:	60bb      	str	r3, [r7, #8]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	60bb      	str	r3, [r7, #8]
 8006646:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800664c:	2b00      	cmp	r3, #0
 800664e:	d04f      	beq.n	80066f0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800665e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	f003 0302 	and.w	r3, r3, #2
 800666e:	2b00      	cmp	r3, #0
 8006670:	d104      	bne.n	800667c <HAL_SPI_IRQHandler+0x168>
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	f003 0301 	and.w	r3, r3, #1
 8006678:	2b00      	cmp	r3, #0
 800667a:	d034      	beq.n	80066e6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f022 0203 	bic.w	r2, r2, #3
 800668a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006690:	2b00      	cmp	r3, #0
 8006692:	d011      	beq.n	80066b8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006698:	4a17      	ldr	r2, [pc, #92]	@ (80066f8 <HAL_SPI_IRQHandler+0x1e4>)
 800669a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7fb fad3 	bl	8001c4c <HAL_DMA_Abort_IT>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d005      	beq.n	80066b8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d016      	beq.n	80066ee <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066c4:	4a0c      	ldr	r2, [pc, #48]	@ (80066f8 <HAL_SPI_IRQHandler+0x1e4>)
 80066c6:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7fb fabd 	bl	8001c4c <HAL_DMA_Abort_IT>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00a      	beq.n	80066ee <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066dc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80066e4:	e003      	b.n	80066ee <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f808 	bl	80066fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80066ec:	e000      	b.n	80066f0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80066ee:	bf00      	nop
    return;
 80066f0:	bf00      	nop
  }
}
 80066f2:	3720      	adds	r7, #32
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	08006711 	.word	0x08006711

080066fc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800671c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f7ff ffe5 	bl	80066fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006732:	bf00      	nop
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
	...

0800673c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b088      	sub	sp, #32
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	603b      	str	r3, [r7, #0]
 8006748:	4613      	mov	r3, r2
 800674a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800674c:	f7fb f83a 	bl	80017c4 <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006754:	1a9b      	subs	r3, r3, r2
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	4413      	add	r3, r2
 800675a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800675c:	f7fb f832 	bl	80017c4 <HAL_GetTick>
 8006760:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006762:	4b39      	ldr	r3, [pc, #228]	@ (8006848 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	015b      	lsls	r3, r3, #5
 8006768:	0d1b      	lsrs	r3, r3, #20
 800676a:	69fa      	ldr	r2, [r7, #28]
 800676c:	fb02 f303 	mul.w	r3, r2, r3
 8006770:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006772:	e054      	b.n	800681e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800677a:	d050      	beq.n	800681e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800677c:	f7fb f822 	bl	80017c4 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	69fa      	ldr	r2, [r7, #28]
 8006788:	429a      	cmp	r2, r3
 800678a:	d902      	bls.n	8006792 <SPI_WaitFlagStateUntilTimeout+0x56>
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d13d      	bne.n	800680e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80067a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067aa:	d111      	bne.n	80067d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067b4:	d004      	beq.n	80067c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067be:	d107      	bne.n	80067d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067d8:	d10f      	bne.n	80067fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80067e8:	601a      	str	r2, [r3, #0]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80067f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e017      	b.n	800683e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d101      	bne.n	8006818 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006814:	2300      	movs	r3, #0
 8006816:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	3b01      	subs	r3, #1
 800681c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	689a      	ldr	r2, [r3, #8]
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	4013      	ands	r3, r2
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	429a      	cmp	r2, r3
 800682c:	bf0c      	ite	eq
 800682e:	2301      	moveq	r3, #1
 8006830:	2300      	movne	r3, #0
 8006832:	b2db      	uxtb	r3, r3
 8006834:	461a      	mov	r2, r3
 8006836:	79fb      	ldrb	r3, [r7, #7]
 8006838:	429a      	cmp	r2, r3
 800683a:	d19b      	bne.n	8006774 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3720      	adds	r7, #32
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	20000000 	.word	0x20000000

0800684c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b08a      	sub	sp, #40	@ 0x28
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
 8006858:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800685a:	2300      	movs	r3, #0
 800685c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800685e:	f7fa ffb1 	bl	80017c4 <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006866:	1a9b      	subs	r3, r3, r2
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	4413      	add	r3, r2
 800686c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800686e:	f7fa ffa9 	bl	80017c4 <HAL_GetTick>
 8006872:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	330c      	adds	r3, #12
 800687a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800687c:	4b3d      	ldr	r3, [pc, #244]	@ (8006974 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	4613      	mov	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	00da      	lsls	r2, r3, #3
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	0d1b      	lsrs	r3, r3, #20
 800688c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800688e:	fb02 f303 	mul.w	r3, r2, r3
 8006892:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006894:	e060      	b.n	8006958 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800689c:	d107      	bne.n	80068ae <SPI_WaitFifoStateUntilTimeout+0x62>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d104      	bne.n	80068ae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80068ac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068b4:	d050      	beq.n	8006958 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068b6:	f7fa ff85 	bl	80017c4 <HAL_GetTick>
 80068ba:	4602      	mov	r2, r0
 80068bc:	6a3b      	ldr	r3, [r7, #32]
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d902      	bls.n	80068cc <SPI_WaitFifoStateUntilTimeout+0x80>
 80068c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d13d      	bne.n	8006948 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80068da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068e4:	d111      	bne.n	800690a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068ee:	d004      	beq.n	80068fa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068f8:	d107      	bne.n	800690a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006908:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800690e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006912:	d10f      	bne.n	8006934 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006922:	601a      	str	r2, [r3, #0]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006932:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e010      	b.n	800696a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800694e:	2300      	movs	r3, #0
 8006950:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	3b01      	subs	r3, #1
 8006956:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689a      	ldr	r2, [r3, #8]
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	4013      	ands	r3, r2
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	429a      	cmp	r2, r3
 8006966:	d196      	bne.n	8006896 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3728      	adds	r7, #40	@ 0x28
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20000000 	.word	0x20000000

08006978 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af02      	add	r7, sp, #8
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	2200      	movs	r2, #0
 800698c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f7ff ff5b 	bl	800684c <SPI_WaitFifoStateUntilTimeout>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d007      	beq.n	80069ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069a0:	f043 0220 	orr.w	r2, r3, #32
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e027      	b.n	80069fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	2200      	movs	r2, #0
 80069b4:	2180      	movs	r1, #128	@ 0x80
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f7ff fec0 	bl	800673c <SPI_WaitFlagStateUntilTimeout>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d007      	beq.n	80069d2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069c6:	f043 0220 	orr.w	r2, r3, #32
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e014      	b.n	80069fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	2200      	movs	r2, #0
 80069da:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f7ff ff34 	bl	800684c <SPI_WaitFifoStateUntilTimeout>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d007      	beq.n	80069fa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069ee:	f043 0220 	orr.w	r2, r3, #32
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e000      	b.n	80069fc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e049      	b.n	8006aaa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d106      	bne.n	8006a30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f841 	bl	8006ab2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2202      	movs	r2, #2
 8006a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	3304      	adds	r3, #4
 8006a40:	4619      	mov	r1, r3
 8006a42:	4610      	mov	r0, r2
 8006a44:	f000 f9e0 	bl	8006e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3708      	adds	r7, #8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	b083      	sub	sp, #12
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006aba:	bf00      	nop
 8006abc:	370c      	adds	r7, #12
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
	...

08006ac8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d001      	beq.n	8006ae0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e04f      	b.n	8006b80 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68da      	ldr	r2, [r3, #12]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f042 0201 	orr.w	r2, r2, #1
 8006af6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a23      	ldr	r2, [pc, #140]	@ (8006b8c <HAL_TIM_Base_Start_IT+0xc4>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d01d      	beq.n	8006b3e <HAL_TIM_Base_Start_IT+0x76>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b0a:	d018      	beq.n	8006b3e <HAL_TIM_Base_Start_IT+0x76>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a1f      	ldr	r2, [pc, #124]	@ (8006b90 <HAL_TIM_Base_Start_IT+0xc8>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d013      	beq.n	8006b3e <HAL_TIM_Base_Start_IT+0x76>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a1e      	ldr	r2, [pc, #120]	@ (8006b94 <HAL_TIM_Base_Start_IT+0xcc>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d00e      	beq.n	8006b3e <HAL_TIM_Base_Start_IT+0x76>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a1c      	ldr	r2, [pc, #112]	@ (8006b98 <HAL_TIM_Base_Start_IT+0xd0>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d009      	beq.n	8006b3e <HAL_TIM_Base_Start_IT+0x76>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a1b      	ldr	r2, [pc, #108]	@ (8006b9c <HAL_TIM_Base_Start_IT+0xd4>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d004      	beq.n	8006b3e <HAL_TIM_Base_Start_IT+0x76>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a19      	ldr	r2, [pc, #100]	@ (8006ba0 <HAL_TIM_Base_Start_IT+0xd8>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d115      	bne.n	8006b6a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	689a      	ldr	r2, [r3, #8]
 8006b44:	4b17      	ldr	r3, [pc, #92]	@ (8006ba4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006b46:	4013      	ands	r3, r2
 8006b48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2b06      	cmp	r3, #6
 8006b4e:	d015      	beq.n	8006b7c <HAL_TIM_Base_Start_IT+0xb4>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b56:	d011      	beq.n	8006b7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f042 0201 	orr.w	r2, r2, #1
 8006b66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b68:	e008      	b.n	8006b7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f042 0201 	orr.w	r2, r2, #1
 8006b78:	601a      	str	r2, [r3, #0]
 8006b7a:	e000      	b.n	8006b7e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3714      	adds	r7, #20
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr
 8006b8c:	40012c00 	.word	0x40012c00
 8006b90:	40000400 	.word	0x40000400
 8006b94:	40000800 	.word	0x40000800
 8006b98:	40000c00 	.word	0x40000c00
 8006b9c:	40013400 	.word	0x40013400
 8006ba0:	40014000 	.word	0x40014000
 8006ba4:	00010007 	.word	0x00010007

08006ba8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d020      	beq.n	8006c0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f003 0302 	and.w	r3, r3, #2
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d01b      	beq.n	8006c0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f06f 0202 	mvn.w	r2, #2
 8006bdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	f003 0303 	and.w	r3, r3, #3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d003      	beq.n	8006bfa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f8e9 	bl	8006dca <HAL_TIM_IC_CaptureCallback>
 8006bf8:	e005      	b.n	8006c06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f8db 	bl	8006db6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 f8ec 	bl	8006dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	f003 0304 	and.w	r3, r3, #4
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d020      	beq.n	8006c58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f003 0304 	and.w	r3, r3, #4
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d01b      	beq.n	8006c58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f06f 0204 	mvn.w	r2, #4
 8006c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2202      	movs	r2, #2
 8006c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d003      	beq.n	8006c46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f8c3 	bl	8006dca <HAL_TIM_IC_CaptureCallback>
 8006c44:	e005      	b.n	8006c52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f8b5 	bl	8006db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f8c6 	bl	8006dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	f003 0308 	and.w	r3, r3, #8
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d020      	beq.n	8006ca4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f003 0308 	and.w	r3, r3, #8
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d01b      	beq.n	8006ca4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f06f 0208 	mvn.w	r2, #8
 8006c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2204      	movs	r2, #4
 8006c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	69db      	ldr	r3, [r3, #28]
 8006c82:	f003 0303 	and.w	r3, r3, #3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f89d 	bl	8006dca <HAL_TIM_IC_CaptureCallback>
 8006c90:	e005      	b.n	8006c9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f88f 	bl	8006db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f8a0 	bl	8006dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	f003 0310 	and.w	r3, r3, #16
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d020      	beq.n	8006cf0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f003 0310 	and.w	r3, r3, #16
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d01b      	beq.n	8006cf0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f06f 0210 	mvn.w	r2, #16
 8006cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2208      	movs	r2, #8
 8006cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f877 	bl	8006dca <HAL_TIM_IC_CaptureCallback>
 8006cdc:	e005      	b.n	8006cea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f869 	bl	8006db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 f87a 	bl	8006dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00c      	beq.n	8006d14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f003 0301 	and.w	r3, r3, #1
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d007      	beq.n	8006d14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f06f 0201 	mvn.w	r2, #1
 8006d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7f9 febe 	bl	8000a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d104      	bne.n	8006d28 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00c      	beq.n	8006d42 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d007      	beq.n	8006d42 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 f913 	bl	8006f68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00c      	beq.n	8006d66 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d007      	beq.n	8006d66 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f90b 	bl	8006f7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00c      	beq.n	8006d8a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d007      	beq.n	8006d8a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f834 	bl	8006df2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	f003 0320 	and.w	r3, r3, #32
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00c      	beq.n	8006dae <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f003 0320 	and.w	r3, r3, #32
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d007      	beq.n	8006dae <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f06f 0220 	mvn.w	r2, #32
 8006da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 f8d3 	bl	8006f54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006dae:	bf00      	nop
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006db6:	b480      	push	{r7}
 8006db8:	b083      	sub	sp, #12
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006dbe:	bf00      	nop
 8006dc0:	370c      	adds	r7, #12
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b083      	sub	sp, #12
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006dd2:	bf00      	nop
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b083      	sub	sp, #12
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006de6:	bf00      	nop
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b083      	sub	sp, #12
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006dfa:	bf00      	nop
 8006dfc:	370c      	adds	r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
	...

08006e08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a46      	ldr	r2, [pc, #280]	@ (8006f34 <TIM_Base_SetConfig+0x12c>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d013      	beq.n	8006e48 <TIM_Base_SetConfig+0x40>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e26:	d00f      	beq.n	8006e48 <TIM_Base_SetConfig+0x40>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a43      	ldr	r2, [pc, #268]	@ (8006f38 <TIM_Base_SetConfig+0x130>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d00b      	beq.n	8006e48 <TIM_Base_SetConfig+0x40>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a42      	ldr	r2, [pc, #264]	@ (8006f3c <TIM_Base_SetConfig+0x134>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d007      	beq.n	8006e48 <TIM_Base_SetConfig+0x40>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a41      	ldr	r2, [pc, #260]	@ (8006f40 <TIM_Base_SetConfig+0x138>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d003      	beq.n	8006e48 <TIM_Base_SetConfig+0x40>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a40      	ldr	r2, [pc, #256]	@ (8006f44 <TIM_Base_SetConfig+0x13c>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d108      	bne.n	8006e5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a35      	ldr	r2, [pc, #212]	@ (8006f34 <TIM_Base_SetConfig+0x12c>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d01f      	beq.n	8006ea2 <TIM_Base_SetConfig+0x9a>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e68:	d01b      	beq.n	8006ea2 <TIM_Base_SetConfig+0x9a>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a32      	ldr	r2, [pc, #200]	@ (8006f38 <TIM_Base_SetConfig+0x130>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d017      	beq.n	8006ea2 <TIM_Base_SetConfig+0x9a>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a31      	ldr	r2, [pc, #196]	@ (8006f3c <TIM_Base_SetConfig+0x134>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d013      	beq.n	8006ea2 <TIM_Base_SetConfig+0x9a>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a30      	ldr	r2, [pc, #192]	@ (8006f40 <TIM_Base_SetConfig+0x138>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d00f      	beq.n	8006ea2 <TIM_Base_SetConfig+0x9a>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a2f      	ldr	r2, [pc, #188]	@ (8006f44 <TIM_Base_SetConfig+0x13c>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d00b      	beq.n	8006ea2 <TIM_Base_SetConfig+0x9a>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a2e      	ldr	r2, [pc, #184]	@ (8006f48 <TIM_Base_SetConfig+0x140>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d007      	beq.n	8006ea2 <TIM_Base_SetConfig+0x9a>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a2d      	ldr	r2, [pc, #180]	@ (8006f4c <TIM_Base_SetConfig+0x144>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d003      	beq.n	8006ea2 <TIM_Base_SetConfig+0x9a>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a2c      	ldr	r2, [pc, #176]	@ (8006f50 <TIM_Base_SetConfig+0x148>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d108      	bne.n	8006eb4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	689a      	ldr	r2, [r3, #8]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a16      	ldr	r2, [pc, #88]	@ (8006f34 <TIM_Base_SetConfig+0x12c>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d00f      	beq.n	8006f00 <TIM_Base_SetConfig+0xf8>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a18      	ldr	r2, [pc, #96]	@ (8006f44 <TIM_Base_SetConfig+0x13c>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d00b      	beq.n	8006f00 <TIM_Base_SetConfig+0xf8>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a17      	ldr	r2, [pc, #92]	@ (8006f48 <TIM_Base_SetConfig+0x140>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d007      	beq.n	8006f00 <TIM_Base_SetConfig+0xf8>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a16      	ldr	r2, [pc, #88]	@ (8006f4c <TIM_Base_SetConfig+0x144>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d003      	beq.n	8006f00 <TIM_Base_SetConfig+0xf8>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a15      	ldr	r2, [pc, #84]	@ (8006f50 <TIM_Base_SetConfig+0x148>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d103      	bne.n	8006f08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	691a      	ldr	r2, [r3, #16]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	f003 0301 	and.w	r3, r3, #1
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d105      	bne.n	8006f26 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	f023 0201 	bic.w	r2, r3, #1
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	611a      	str	r2, [r3, #16]
  }
}
 8006f26:	bf00      	nop
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	40012c00 	.word	0x40012c00
 8006f38:	40000400 	.word	0x40000400
 8006f3c:	40000800 	.word	0x40000800
 8006f40:	40000c00 	.word	0x40000c00
 8006f44:	40013400 	.word	0x40013400
 8006f48:	40014000 	.word	0x40014000
 8006f4c:	40014400 	.word	0x40014400
 8006f50:	40014800 	.word	0x40014800

08006f54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f70:	bf00      	nop
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d101      	bne.n	8006fa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e040      	b.n	8007024 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d106      	bne.n	8006fb8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7fa f954 	bl	8001260 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2224      	movs	r2, #36	@ 0x24
 8006fbc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f022 0201 	bic.w	r2, r2, #1
 8006fcc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d002      	beq.n	8006fdc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fe90 	bl	8007cfc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fbd5 	bl	800778c <UART_SetConfig>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d101      	bne.n	8006fec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e01b      	b.n	8007024 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	685a      	ldr	r2, [r3, #4]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ffa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689a      	ldr	r2, [r3, #8]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800700a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f042 0201 	orr.w	r2, r2, #1
 800701a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 ff0f 	bl	8007e40 <UART_CheckIdleState>
 8007022:	4603      	mov	r3, r0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3708      	adds	r7, #8
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b08a      	sub	sp, #40	@ 0x28
 8007030:	af02      	add	r7, sp, #8
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	603b      	str	r3, [r7, #0]
 8007038:	4613      	mov	r3, r2
 800703a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007040:	2b20      	cmp	r3, #32
 8007042:	d177      	bne.n	8007134 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d002      	beq.n	8007050 <HAL_UART_Transmit+0x24>
 800704a:	88fb      	ldrh	r3, [r7, #6]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e070      	b.n	8007136 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2221      	movs	r2, #33	@ 0x21
 8007060:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007062:	f7fa fbaf 	bl	80017c4 <HAL_GetTick>
 8007066:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	88fa      	ldrh	r2, [r7, #6]
 800706c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	88fa      	ldrh	r2, [r7, #6]
 8007074:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007080:	d108      	bne.n	8007094 <HAL_UART_Transmit+0x68>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d104      	bne.n	8007094 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800708a:	2300      	movs	r3, #0
 800708c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	61bb      	str	r3, [r7, #24]
 8007092:	e003      	b.n	800709c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007098:	2300      	movs	r3, #0
 800709a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800709c:	e02f      	b.n	80070fe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	2200      	movs	r2, #0
 80070a6:	2180      	movs	r1, #128	@ 0x80
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f000 ff71 	bl	8007f90 <UART_WaitOnFlagUntilTimeout>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d004      	beq.n	80070be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2220      	movs	r2, #32
 80070b8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e03b      	b.n	8007136 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10b      	bne.n	80070dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	881a      	ldrh	r2, [r3, #0]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070d0:	b292      	uxth	r2, r2
 80070d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	3302      	adds	r3, #2
 80070d8:	61bb      	str	r3, [r7, #24]
 80070da:	e007      	b.n	80070ec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	781a      	ldrb	r2, [r3, #0]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	3301      	adds	r3, #1
 80070ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	3b01      	subs	r3, #1
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007104:	b29b      	uxth	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1c9      	bne.n	800709e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	9300      	str	r3, [sp, #0]
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	2200      	movs	r2, #0
 8007112:	2140      	movs	r1, #64	@ 0x40
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f000 ff3b 	bl	8007f90 <UART_WaitOnFlagUntilTimeout>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d004      	beq.n	800712a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2220      	movs	r2, #32
 8007124:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e005      	b.n	8007136 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2220      	movs	r2, #32
 800712e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007130:	2300      	movs	r3, #0
 8007132:	e000      	b.n	8007136 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007134:	2302      	movs	r3, #2
  }
}
 8007136:	4618      	mov	r0, r3
 8007138:	3720      	adds	r7, #32
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
	...

08007140 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b0ba      	sub	sp, #232	@ 0xe8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	69db      	ldr	r3, [r3, #28]
 800714e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007166:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800716a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800716e:	4013      	ands	r3, r2
 8007170:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007174:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007178:	2b00      	cmp	r3, #0
 800717a:	d115      	bne.n	80071a8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800717c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007180:	f003 0320 	and.w	r3, r3, #32
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00f      	beq.n	80071a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800718c:	f003 0320 	and.w	r3, r3, #32
 8007190:	2b00      	cmp	r3, #0
 8007192:	d009      	beq.n	80071a8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 82ca 	beq.w	8007732 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	4798      	blx	r3
      }
      return;
 80071a6:	e2c4      	b.n	8007732 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80071a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 8117 	beq.w	80073e0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80071b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071b6:	f003 0301 	and.w	r3, r3, #1
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d106      	bne.n	80071cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80071be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80071c2:	4b85      	ldr	r3, [pc, #532]	@ (80073d8 <HAL_UART_IRQHandler+0x298>)
 80071c4:	4013      	ands	r3, r2
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f000 810a 	beq.w	80073e0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80071cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071d0:	f003 0301 	and.w	r3, r3, #1
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d011      	beq.n	80071fc <HAL_UART_IRQHandler+0xbc>
 80071d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00b      	beq.n	80071fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2201      	movs	r2, #1
 80071ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071f2:	f043 0201 	orr.w	r2, r3, #1
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007200:	f003 0302 	and.w	r3, r3, #2
 8007204:	2b00      	cmp	r3, #0
 8007206:	d011      	beq.n	800722c <HAL_UART_IRQHandler+0xec>
 8007208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00b      	beq.n	800722c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2202      	movs	r2, #2
 800721a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007222:	f043 0204 	orr.w	r2, r3, #4
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800722c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007230:	f003 0304 	and.w	r3, r3, #4
 8007234:	2b00      	cmp	r3, #0
 8007236:	d011      	beq.n	800725c <HAL_UART_IRQHandler+0x11c>
 8007238:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800723c:	f003 0301 	and.w	r3, r3, #1
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00b      	beq.n	800725c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2204      	movs	r2, #4
 800724a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007252:	f043 0202 	orr.w	r2, r3, #2
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800725c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007260:	f003 0308 	and.w	r3, r3, #8
 8007264:	2b00      	cmp	r3, #0
 8007266:	d017      	beq.n	8007298 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800726c:	f003 0320 	and.w	r3, r3, #32
 8007270:	2b00      	cmp	r3, #0
 8007272:	d105      	bne.n	8007280 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007278:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00b      	beq.n	8007298 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2208      	movs	r2, #8
 8007286:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800728e:	f043 0208 	orr.w	r2, r3, #8
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800729c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d012      	beq.n	80072ca <HAL_UART_IRQHandler+0x18a>
 80072a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00c      	beq.n	80072ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80072b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072c0:	f043 0220 	orr.w	r2, r3, #32
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 8230 	beq.w	8007736 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80072d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072da:	f003 0320 	and.w	r3, r3, #32
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00d      	beq.n	80072fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80072e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072e6:	f003 0320 	and.w	r3, r3, #32
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d007      	beq.n	80072fe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d003      	beq.n	80072fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007304:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007312:	2b40      	cmp	r3, #64	@ 0x40
 8007314:	d005      	beq.n	8007322 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007316:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800731a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800731e:	2b00      	cmp	r3, #0
 8007320:	d04f      	beq.n	80073c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fea1 	bl	800806a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007332:	2b40      	cmp	r3, #64	@ 0x40
 8007334:	d141      	bne.n	80073ba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	3308      	adds	r3, #8
 800733c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007340:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007344:	e853 3f00 	ldrex	r3, [r3]
 8007348:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800734c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007350:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007354:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	3308      	adds	r3, #8
 800735e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007362:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007366:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800736e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007372:	e841 2300 	strex	r3, r2, [r1]
 8007376:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800737a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1d9      	bne.n	8007336 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007386:	2b00      	cmp	r3, #0
 8007388:	d013      	beq.n	80073b2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800738e:	4a13      	ldr	r2, [pc, #76]	@ (80073dc <HAL_UART_IRQHandler+0x29c>)
 8007390:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007396:	4618      	mov	r0, r3
 8007398:	f7fa fc58 	bl	8001c4c <HAL_DMA_Abort_IT>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d017      	beq.n	80073d2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80073ac:	4610      	mov	r0, r2
 80073ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073b0:	e00f      	b.n	80073d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f9d4 	bl	8007760 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073b8:	e00b      	b.n	80073d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f9d0 	bl	8007760 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c0:	e007      	b.n	80073d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 f9cc 	bl	8007760 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80073d0:	e1b1      	b.n	8007736 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073d2:	bf00      	nop
    return;
 80073d4:	e1af      	b.n	8007736 <HAL_UART_IRQHandler+0x5f6>
 80073d6:	bf00      	nop
 80073d8:	04000120 	.word	0x04000120
 80073dc:	08008133 	.word	0x08008133

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	f040 816a 	bne.w	80076be <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80073ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073ee:	f003 0310 	and.w	r3, r3, #16
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f000 8163 	beq.w	80076be <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80073f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073fc:	f003 0310 	and.w	r3, r3, #16
 8007400:	2b00      	cmp	r3, #0
 8007402:	f000 815c 	beq.w	80076be <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2210      	movs	r2, #16
 800740c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007418:	2b40      	cmp	r3, #64	@ 0x40
 800741a:	f040 80d4 	bne.w	80075c6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800742a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800742e:	2b00      	cmp	r3, #0
 8007430:	f000 80ad 	beq.w	800758e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800743a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800743e:	429a      	cmp	r2, r3
 8007440:	f080 80a5 	bcs.w	800758e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800744a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 0320 	and.w	r3, r3, #32
 800745a:	2b00      	cmp	r3, #0
 800745c:	f040 8086 	bne.w	800756c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007468:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800746c:	e853 3f00 	ldrex	r3, [r3]
 8007470:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007474:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007478:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800747c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	461a      	mov	r2, r3
 8007486:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800748a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800748e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007492:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007496:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800749a:	e841 2300 	strex	r3, r2, [r1]
 800749e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80074a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1da      	bne.n	8007460 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	3308      	adds	r3, #8
 80074b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80074b4:	e853 3f00 	ldrex	r3, [r3]
 80074b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80074ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80074bc:	f023 0301 	bic.w	r3, r3, #1
 80074c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3308      	adds	r3, #8
 80074ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80074ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80074d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80074d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80074da:	e841 2300 	strex	r3, r2, [r1]
 80074de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80074e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1e1      	bne.n	80074aa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	3308      	adds	r3, #8
 80074ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80074f0:	e853 3f00 	ldrex	r3, [r3]
 80074f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80074f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	3308      	adds	r3, #8
 8007506:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800750a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800750c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007510:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007512:	e841 2300 	strex	r3, r2, [r1]
 8007516:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007518:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1e3      	bne.n	80074e6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2220      	movs	r2, #32
 8007522:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007532:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007534:	e853 3f00 	ldrex	r3, [r3]
 8007538:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800753a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800753c:	f023 0310 	bic.w	r3, r3, #16
 8007540:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	461a      	mov	r2, r3
 800754a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800754e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007550:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007552:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007554:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007556:	e841 2300 	strex	r3, r2, [r1]
 800755a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800755c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1e4      	bne.n	800752c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007566:	4618      	mov	r0, r3
 8007568:	f7fa fb32 	bl	8001bd0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2202      	movs	r2, #2
 8007570:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800757e:	b29b      	uxth	r3, r3
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	b29b      	uxth	r3, r3
 8007584:	4619      	mov	r1, r3
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f8f4 	bl	8007774 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800758c:	e0d5      	b.n	800773a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007594:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007598:	429a      	cmp	r2, r3
 800759a:	f040 80ce 	bne.w	800773a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0320 	and.w	r3, r3, #32
 80075aa:	2b20      	cmp	r3, #32
 80075ac:	f040 80c5 	bne.w	800773a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2202      	movs	r2, #2
 80075b4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80075bc:	4619      	mov	r1, r3
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f8d8 	bl	8007774 <HAL_UARTEx_RxEventCallback>
      return;
 80075c4:	e0b9      	b.n	800773a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f000 80ab 	beq.w	800773e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80075e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f000 80a6 	beq.w	800773e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075fa:	e853 3f00 	ldrex	r3, [r3]
 80075fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007602:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007606:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	461a      	mov	r2, r3
 8007610:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007614:	647b      	str	r3, [r7, #68]	@ 0x44
 8007616:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007618:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800761a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800761c:	e841 2300 	strex	r3, r2, [r1]
 8007620:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1e4      	bne.n	80075f2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	3308      	adds	r3, #8
 800762e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007632:	e853 3f00 	ldrex	r3, [r3]
 8007636:	623b      	str	r3, [r7, #32]
   return(result);
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	f023 0301 	bic.w	r3, r3, #1
 800763e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	3308      	adds	r3, #8
 8007648:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800764c:	633a      	str	r2, [r7, #48]	@ 0x30
 800764e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007650:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007652:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007654:	e841 2300 	strex	r3, r2, [r1]
 8007658:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800765a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e3      	bne.n	8007628 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2220      	movs	r2, #32
 8007664:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	e853 3f00 	ldrex	r3, [r3]
 8007680:	60fb      	str	r3, [r7, #12]
   return(result);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f023 0310 	bic.w	r3, r3, #16
 8007688:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	461a      	mov	r2, r3
 8007692:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007696:	61fb      	str	r3, [r7, #28]
 8007698:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769a:	69b9      	ldr	r1, [r7, #24]
 800769c:	69fa      	ldr	r2, [r7, #28]
 800769e:	e841 2300 	strex	r3, r2, [r1]
 80076a2:	617b      	str	r3, [r7, #20]
   return(result);
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1e4      	bne.n	8007674 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2202      	movs	r2, #2
 80076ae:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80076b4:	4619      	mov	r1, r3
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f85c 	bl	8007774 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80076bc:	e03f      	b.n	800773e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80076be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00e      	beq.n	80076e8 <HAL_UART_IRQHandler+0x5a8>
 80076ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d008      	beq.n	80076e8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80076de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fd66 	bl	80081b2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80076e6:	e02d      	b.n	8007744 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80076e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00e      	beq.n	8007712 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80076f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d008      	beq.n	8007712 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007704:	2b00      	cmp	r3, #0
 8007706:	d01c      	beq.n	8007742 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	4798      	blx	r3
    }
    return;
 8007710:	e017      	b.n	8007742 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800771a:	2b00      	cmp	r3, #0
 800771c:	d012      	beq.n	8007744 <HAL_UART_IRQHandler+0x604>
 800771e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00c      	beq.n	8007744 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fd17 	bl	800815e <UART_EndTransmit_IT>
    return;
 8007730:	e008      	b.n	8007744 <HAL_UART_IRQHandler+0x604>
      return;
 8007732:	bf00      	nop
 8007734:	e006      	b.n	8007744 <HAL_UART_IRQHandler+0x604>
    return;
 8007736:	bf00      	nop
 8007738:	e004      	b.n	8007744 <HAL_UART_IRQHandler+0x604>
      return;
 800773a:	bf00      	nop
 800773c:	e002      	b.n	8007744 <HAL_UART_IRQHandler+0x604>
      return;
 800773e:	bf00      	nop
 8007740:	e000      	b.n	8007744 <HAL_UART_IRQHandler+0x604>
    return;
 8007742:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007744:	37e8      	adds	r7, #232	@ 0xe8
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop

0800774c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	460b      	mov	r3, r1
 800777e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007780:	bf00      	nop
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800778c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007790:	b08a      	sub	sp, #40	@ 0x28
 8007792:	af00      	add	r7, sp, #0
 8007794:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	689a      	ldr	r2, [r3, #8]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	431a      	orrs	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	431a      	orrs	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	69db      	ldr	r3, [r3, #28]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	4ba4      	ldr	r3, [pc, #656]	@ (8007a4c <UART_SetConfig+0x2c0>)
 80077bc:	4013      	ands	r3, r2
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	6812      	ldr	r2, [r2, #0]
 80077c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80077c4:	430b      	orrs	r3, r1
 80077c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	68da      	ldr	r2, [r3, #12]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	430a      	orrs	r2, r1
 80077dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a99      	ldr	r2, [pc, #612]	@ (8007a50 <UART_SetConfig+0x2c4>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d004      	beq.n	80077f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6a1b      	ldr	r3, [r3, #32]
 80077f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077f4:	4313      	orrs	r3, r2
 80077f6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007808:	430a      	orrs	r2, r1
 800780a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a90      	ldr	r2, [pc, #576]	@ (8007a54 <UART_SetConfig+0x2c8>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d126      	bne.n	8007864 <UART_SetConfig+0xd8>
 8007816:	4b90      	ldr	r3, [pc, #576]	@ (8007a58 <UART_SetConfig+0x2cc>)
 8007818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800781c:	f003 0303 	and.w	r3, r3, #3
 8007820:	2b03      	cmp	r3, #3
 8007822:	d81b      	bhi.n	800785c <UART_SetConfig+0xd0>
 8007824:	a201      	add	r2, pc, #4	@ (adr r2, 800782c <UART_SetConfig+0xa0>)
 8007826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782a:	bf00      	nop
 800782c:	0800783d 	.word	0x0800783d
 8007830:	0800784d 	.word	0x0800784d
 8007834:	08007845 	.word	0x08007845
 8007838:	08007855 	.word	0x08007855
 800783c:	2301      	movs	r3, #1
 800783e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007842:	e116      	b.n	8007a72 <UART_SetConfig+0x2e6>
 8007844:	2302      	movs	r3, #2
 8007846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800784a:	e112      	b.n	8007a72 <UART_SetConfig+0x2e6>
 800784c:	2304      	movs	r3, #4
 800784e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007852:	e10e      	b.n	8007a72 <UART_SetConfig+0x2e6>
 8007854:	2308      	movs	r3, #8
 8007856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800785a:	e10a      	b.n	8007a72 <UART_SetConfig+0x2e6>
 800785c:	2310      	movs	r3, #16
 800785e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007862:	e106      	b.n	8007a72 <UART_SetConfig+0x2e6>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a7c      	ldr	r2, [pc, #496]	@ (8007a5c <UART_SetConfig+0x2d0>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d138      	bne.n	80078e0 <UART_SetConfig+0x154>
 800786e:	4b7a      	ldr	r3, [pc, #488]	@ (8007a58 <UART_SetConfig+0x2cc>)
 8007870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007874:	f003 030c 	and.w	r3, r3, #12
 8007878:	2b0c      	cmp	r3, #12
 800787a:	d82d      	bhi.n	80078d8 <UART_SetConfig+0x14c>
 800787c:	a201      	add	r2, pc, #4	@ (adr r2, 8007884 <UART_SetConfig+0xf8>)
 800787e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007882:	bf00      	nop
 8007884:	080078b9 	.word	0x080078b9
 8007888:	080078d9 	.word	0x080078d9
 800788c:	080078d9 	.word	0x080078d9
 8007890:	080078d9 	.word	0x080078d9
 8007894:	080078c9 	.word	0x080078c9
 8007898:	080078d9 	.word	0x080078d9
 800789c:	080078d9 	.word	0x080078d9
 80078a0:	080078d9 	.word	0x080078d9
 80078a4:	080078c1 	.word	0x080078c1
 80078a8:	080078d9 	.word	0x080078d9
 80078ac:	080078d9 	.word	0x080078d9
 80078b0:	080078d9 	.word	0x080078d9
 80078b4:	080078d1 	.word	0x080078d1
 80078b8:	2300      	movs	r3, #0
 80078ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078be:	e0d8      	b.n	8007a72 <UART_SetConfig+0x2e6>
 80078c0:	2302      	movs	r3, #2
 80078c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078c6:	e0d4      	b.n	8007a72 <UART_SetConfig+0x2e6>
 80078c8:	2304      	movs	r3, #4
 80078ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078ce:	e0d0      	b.n	8007a72 <UART_SetConfig+0x2e6>
 80078d0:	2308      	movs	r3, #8
 80078d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078d6:	e0cc      	b.n	8007a72 <UART_SetConfig+0x2e6>
 80078d8:	2310      	movs	r3, #16
 80078da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078de:	e0c8      	b.n	8007a72 <UART_SetConfig+0x2e6>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a5e      	ldr	r2, [pc, #376]	@ (8007a60 <UART_SetConfig+0x2d4>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d125      	bne.n	8007936 <UART_SetConfig+0x1aa>
 80078ea:	4b5b      	ldr	r3, [pc, #364]	@ (8007a58 <UART_SetConfig+0x2cc>)
 80078ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078f0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80078f4:	2b30      	cmp	r3, #48	@ 0x30
 80078f6:	d016      	beq.n	8007926 <UART_SetConfig+0x19a>
 80078f8:	2b30      	cmp	r3, #48	@ 0x30
 80078fa:	d818      	bhi.n	800792e <UART_SetConfig+0x1a2>
 80078fc:	2b20      	cmp	r3, #32
 80078fe:	d00a      	beq.n	8007916 <UART_SetConfig+0x18a>
 8007900:	2b20      	cmp	r3, #32
 8007902:	d814      	bhi.n	800792e <UART_SetConfig+0x1a2>
 8007904:	2b00      	cmp	r3, #0
 8007906:	d002      	beq.n	800790e <UART_SetConfig+0x182>
 8007908:	2b10      	cmp	r3, #16
 800790a:	d008      	beq.n	800791e <UART_SetConfig+0x192>
 800790c:	e00f      	b.n	800792e <UART_SetConfig+0x1a2>
 800790e:	2300      	movs	r3, #0
 8007910:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007914:	e0ad      	b.n	8007a72 <UART_SetConfig+0x2e6>
 8007916:	2302      	movs	r3, #2
 8007918:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800791c:	e0a9      	b.n	8007a72 <UART_SetConfig+0x2e6>
 800791e:	2304      	movs	r3, #4
 8007920:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007924:	e0a5      	b.n	8007a72 <UART_SetConfig+0x2e6>
 8007926:	2308      	movs	r3, #8
 8007928:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800792c:	e0a1      	b.n	8007a72 <UART_SetConfig+0x2e6>
 800792e:	2310      	movs	r3, #16
 8007930:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007934:	e09d      	b.n	8007a72 <UART_SetConfig+0x2e6>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a4a      	ldr	r2, [pc, #296]	@ (8007a64 <UART_SetConfig+0x2d8>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d125      	bne.n	800798c <UART_SetConfig+0x200>
 8007940:	4b45      	ldr	r3, [pc, #276]	@ (8007a58 <UART_SetConfig+0x2cc>)
 8007942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007946:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800794a:	2bc0      	cmp	r3, #192	@ 0xc0
 800794c:	d016      	beq.n	800797c <UART_SetConfig+0x1f0>
 800794e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007950:	d818      	bhi.n	8007984 <UART_SetConfig+0x1f8>
 8007952:	2b80      	cmp	r3, #128	@ 0x80
 8007954:	d00a      	beq.n	800796c <UART_SetConfig+0x1e0>
 8007956:	2b80      	cmp	r3, #128	@ 0x80
 8007958:	d814      	bhi.n	8007984 <UART_SetConfig+0x1f8>
 800795a:	2b00      	cmp	r3, #0
 800795c:	d002      	beq.n	8007964 <UART_SetConfig+0x1d8>
 800795e:	2b40      	cmp	r3, #64	@ 0x40
 8007960:	d008      	beq.n	8007974 <UART_SetConfig+0x1e8>
 8007962:	e00f      	b.n	8007984 <UART_SetConfig+0x1f8>
 8007964:	2300      	movs	r3, #0
 8007966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800796a:	e082      	b.n	8007a72 <UART_SetConfig+0x2e6>
 800796c:	2302      	movs	r3, #2
 800796e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007972:	e07e      	b.n	8007a72 <UART_SetConfig+0x2e6>
 8007974:	2304      	movs	r3, #4
 8007976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800797a:	e07a      	b.n	8007a72 <UART_SetConfig+0x2e6>
 800797c:	2308      	movs	r3, #8
 800797e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007982:	e076      	b.n	8007a72 <UART_SetConfig+0x2e6>
 8007984:	2310      	movs	r3, #16
 8007986:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800798a:	e072      	b.n	8007a72 <UART_SetConfig+0x2e6>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a35      	ldr	r2, [pc, #212]	@ (8007a68 <UART_SetConfig+0x2dc>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d12a      	bne.n	80079ec <UART_SetConfig+0x260>
 8007996:	4b30      	ldr	r3, [pc, #192]	@ (8007a58 <UART_SetConfig+0x2cc>)
 8007998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800799c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079a4:	d01a      	beq.n	80079dc <UART_SetConfig+0x250>
 80079a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079aa:	d81b      	bhi.n	80079e4 <UART_SetConfig+0x258>
 80079ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079b0:	d00c      	beq.n	80079cc <UART_SetConfig+0x240>
 80079b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079b6:	d815      	bhi.n	80079e4 <UART_SetConfig+0x258>
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d003      	beq.n	80079c4 <UART_SetConfig+0x238>
 80079bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079c0:	d008      	beq.n	80079d4 <UART_SetConfig+0x248>
 80079c2:	e00f      	b.n	80079e4 <UART_SetConfig+0x258>
 80079c4:	2300      	movs	r3, #0
 80079c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079ca:	e052      	b.n	8007a72 <UART_SetConfig+0x2e6>
 80079cc:	2302      	movs	r3, #2
 80079ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079d2:	e04e      	b.n	8007a72 <UART_SetConfig+0x2e6>
 80079d4:	2304      	movs	r3, #4
 80079d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079da:	e04a      	b.n	8007a72 <UART_SetConfig+0x2e6>
 80079dc:	2308      	movs	r3, #8
 80079de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079e2:	e046      	b.n	8007a72 <UART_SetConfig+0x2e6>
 80079e4:	2310      	movs	r3, #16
 80079e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079ea:	e042      	b.n	8007a72 <UART_SetConfig+0x2e6>
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a17      	ldr	r2, [pc, #92]	@ (8007a50 <UART_SetConfig+0x2c4>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d13a      	bne.n	8007a6c <UART_SetConfig+0x2e0>
 80079f6:	4b18      	ldr	r3, [pc, #96]	@ (8007a58 <UART_SetConfig+0x2cc>)
 80079f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007a00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a04:	d01a      	beq.n	8007a3c <UART_SetConfig+0x2b0>
 8007a06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a0a:	d81b      	bhi.n	8007a44 <UART_SetConfig+0x2b8>
 8007a0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a10:	d00c      	beq.n	8007a2c <UART_SetConfig+0x2a0>
 8007a12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a16:	d815      	bhi.n	8007a44 <UART_SetConfig+0x2b8>
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d003      	beq.n	8007a24 <UART_SetConfig+0x298>
 8007a1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a20:	d008      	beq.n	8007a34 <UART_SetConfig+0x2a8>
 8007a22:	e00f      	b.n	8007a44 <UART_SetConfig+0x2b8>
 8007a24:	2300      	movs	r3, #0
 8007a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a2a:	e022      	b.n	8007a72 <UART_SetConfig+0x2e6>
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a32:	e01e      	b.n	8007a72 <UART_SetConfig+0x2e6>
 8007a34:	2304      	movs	r3, #4
 8007a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a3a:	e01a      	b.n	8007a72 <UART_SetConfig+0x2e6>
 8007a3c:	2308      	movs	r3, #8
 8007a3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a42:	e016      	b.n	8007a72 <UART_SetConfig+0x2e6>
 8007a44:	2310      	movs	r3, #16
 8007a46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a4a:	e012      	b.n	8007a72 <UART_SetConfig+0x2e6>
 8007a4c:	efff69f3 	.word	0xefff69f3
 8007a50:	40008000 	.word	0x40008000
 8007a54:	40013800 	.word	0x40013800
 8007a58:	40021000 	.word	0x40021000
 8007a5c:	40004400 	.word	0x40004400
 8007a60:	40004800 	.word	0x40004800
 8007a64:	40004c00 	.word	0x40004c00
 8007a68:	40005000 	.word	0x40005000
 8007a6c:	2310      	movs	r3, #16
 8007a6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a9f      	ldr	r2, [pc, #636]	@ (8007cf4 <UART_SetConfig+0x568>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d17a      	bne.n	8007b72 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a80:	2b08      	cmp	r3, #8
 8007a82:	d824      	bhi.n	8007ace <UART_SetConfig+0x342>
 8007a84:	a201      	add	r2, pc, #4	@ (adr r2, 8007a8c <UART_SetConfig+0x300>)
 8007a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8a:	bf00      	nop
 8007a8c:	08007ab1 	.word	0x08007ab1
 8007a90:	08007acf 	.word	0x08007acf
 8007a94:	08007ab9 	.word	0x08007ab9
 8007a98:	08007acf 	.word	0x08007acf
 8007a9c:	08007abf 	.word	0x08007abf
 8007aa0:	08007acf 	.word	0x08007acf
 8007aa4:	08007acf 	.word	0x08007acf
 8007aa8:	08007acf 	.word	0x08007acf
 8007aac:	08007ac7 	.word	0x08007ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ab0:	f7fb ffaa 	bl	8003a08 <HAL_RCC_GetPCLK1Freq>
 8007ab4:	61f8      	str	r0, [r7, #28]
        break;
 8007ab6:	e010      	b.n	8007ada <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ab8:	4b8f      	ldr	r3, [pc, #572]	@ (8007cf8 <UART_SetConfig+0x56c>)
 8007aba:	61fb      	str	r3, [r7, #28]
        break;
 8007abc:	e00d      	b.n	8007ada <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007abe:	f7fb ff0b 	bl	80038d8 <HAL_RCC_GetSysClockFreq>
 8007ac2:	61f8      	str	r0, [r7, #28]
        break;
 8007ac4:	e009      	b.n	8007ada <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ac6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007aca:	61fb      	str	r3, [r7, #28]
        break;
 8007acc:	e005      	b.n	8007ada <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007ad8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 80fb 	beq.w	8007cd8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	005b      	lsls	r3, r3, #1
 8007aea:	4413      	add	r3, r2
 8007aec:	69fa      	ldr	r2, [r7, #28]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d305      	bcc.n	8007afe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007af8:	69fa      	ldr	r2, [r7, #28]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d903      	bls.n	8007b06 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007b04:	e0e8      	b.n	8007cd8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	461c      	mov	r4, r3
 8007b0c:	4615      	mov	r5, r2
 8007b0e:	f04f 0200 	mov.w	r2, #0
 8007b12:	f04f 0300 	mov.w	r3, #0
 8007b16:	022b      	lsls	r3, r5, #8
 8007b18:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007b1c:	0222      	lsls	r2, r4, #8
 8007b1e:	68f9      	ldr	r1, [r7, #12]
 8007b20:	6849      	ldr	r1, [r1, #4]
 8007b22:	0849      	lsrs	r1, r1, #1
 8007b24:	2000      	movs	r0, #0
 8007b26:	4688      	mov	r8, r1
 8007b28:	4681      	mov	r9, r0
 8007b2a:	eb12 0a08 	adds.w	sl, r2, r8
 8007b2e:	eb43 0b09 	adc.w	fp, r3, r9
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	603b      	str	r3, [r7, #0]
 8007b3a:	607a      	str	r2, [r7, #4]
 8007b3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b40:	4650      	mov	r0, sl
 8007b42:	4659      	mov	r1, fp
 8007b44:	f7f8 fb94 	bl	8000270 <__aeabi_uldivmod>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b56:	d308      	bcc.n	8007b6a <UART_SetConfig+0x3de>
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b5e:	d204      	bcs.n	8007b6a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	69ba      	ldr	r2, [r7, #24]
 8007b66:	60da      	str	r2, [r3, #12]
 8007b68:	e0b6      	b.n	8007cd8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007b70:	e0b2      	b.n	8007cd8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	69db      	ldr	r3, [r3, #28]
 8007b76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b7a:	d15e      	bne.n	8007c3a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007b7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007b80:	2b08      	cmp	r3, #8
 8007b82:	d828      	bhi.n	8007bd6 <UART_SetConfig+0x44a>
 8007b84:	a201      	add	r2, pc, #4	@ (adr r2, 8007b8c <UART_SetConfig+0x400>)
 8007b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8a:	bf00      	nop
 8007b8c:	08007bb1 	.word	0x08007bb1
 8007b90:	08007bb9 	.word	0x08007bb9
 8007b94:	08007bc1 	.word	0x08007bc1
 8007b98:	08007bd7 	.word	0x08007bd7
 8007b9c:	08007bc7 	.word	0x08007bc7
 8007ba0:	08007bd7 	.word	0x08007bd7
 8007ba4:	08007bd7 	.word	0x08007bd7
 8007ba8:	08007bd7 	.word	0x08007bd7
 8007bac:	08007bcf 	.word	0x08007bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bb0:	f7fb ff2a 	bl	8003a08 <HAL_RCC_GetPCLK1Freq>
 8007bb4:	61f8      	str	r0, [r7, #28]
        break;
 8007bb6:	e014      	b.n	8007be2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bb8:	f7fb ff3c 	bl	8003a34 <HAL_RCC_GetPCLK2Freq>
 8007bbc:	61f8      	str	r0, [r7, #28]
        break;
 8007bbe:	e010      	b.n	8007be2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bc0:	4b4d      	ldr	r3, [pc, #308]	@ (8007cf8 <UART_SetConfig+0x56c>)
 8007bc2:	61fb      	str	r3, [r7, #28]
        break;
 8007bc4:	e00d      	b.n	8007be2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bc6:	f7fb fe87 	bl	80038d8 <HAL_RCC_GetSysClockFreq>
 8007bca:	61f8      	str	r0, [r7, #28]
        break;
 8007bcc:	e009      	b.n	8007be2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bd2:	61fb      	str	r3, [r7, #28]
        break;
 8007bd4:	e005      	b.n	8007be2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007be0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d077      	beq.n	8007cd8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	005a      	lsls	r2, r3, #1
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	085b      	lsrs	r3, r3, #1
 8007bf2:	441a      	add	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bfc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	2b0f      	cmp	r3, #15
 8007c02:	d916      	bls.n	8007c32 <UART_SetConfig+0x4a6>
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c0a:	d212      	bcs.n	8007c32 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	f023 030f 	bic.w	r3, r3, #15
 8007c14:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	085b      	lsrs	r3, r3, #1
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	f003 0307 	and.w	r3, r3, #7
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	8afb      	ldrh	r3, [r7, #22]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	8afa      	ldrh	r2, [r7, #22]
 8007c2e:	60da      	str	r2, [r3, #12]
 8007c30:	e052      	b.n	8007cd8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007c38:	e04e      	b.n	8007cd8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c3a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007c3e:	2b08      	cmp	r3, #8
 8007c40:	d827      	bhi.n	8007c92 <UART_SetConfig+0x506>
 8007c42:	a201      	add	r2, pc, #4	@ (adr r2, 8007c48 <UART_SetConfig+0x4bc>)
 8007c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c48:	08007c6d 	.word	0x08007c6d
 8007c4c:	08007c75 	.word	0x08007c75
 8007c50:	08007c7d 	.word	0x08007c7d
 8007c54:	08007c93 	.word	0x08007c93
 8007c58:	08007c83 	.word	0x08007c83
 8007c5c:	08007c93 	.word	0x08007c93
 8007c60:	08007c93 	.word	0x08007c93
 8007c64:	08007c93 	.word	0x08007c93
 8007c68:	08007c8b 	.word	0x08007c8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c6c:	f7fb fecc 	bl	8003a08 <HAL_RCC_GetPCLK1Freq>
 8007c70:	61f8      	str	r0, [r7, #28]
        break;
 8007c72:	e014      	b.n	8007c9e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c74:	f7fb fede 	bl	8003a34 <HAL_RCC_GetPCLK2Freq>
 8007c78:	61f8      	str	r0, [r7, #28]
        break;
 8007c7a:	e010      	b.n	8007c9e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8007cf8 <UART_SetConfig+0x56c>)
 8007c7e:	61fb      	str	r3, [r7, #28]
        break;
 8007c80:	e00d      	b.n	8007c9e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c82:	f7fb fe29 	bl	80038d8 <HAL_RCC_GetSysClockFreq>
 8007c86:	61f8      	str	r0, [r7, #28]
        break;
 8007c88:	e009      	b.n	8007c9e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c8e:	61fb      	str	r3, [r7, #28]
        break;
 8007c90:	e005      	b.n	8007c9e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007c92:	2300      	movs	r3, #0
 8007c94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007c9c:	bf00      	nop
    }

    if (pclk != 0U)
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d019      	beq.n	8007cd8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	085a      	lsrs	r2, r3, #1
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	441a      	add	r2, r3
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	2b0f      	cmp	r3, #15
 8007cbc:	d909      	bls.n	8007cd2 <UART_SetConfig+0x546>
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cc4:	d205      	bcs.n	8007cd2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	60da      	str	r2, [r3, #12]
 8007cd0:	e002      	b.n	8007cd8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007ce4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3728      	adds	r7, #40	@ 0x28
 8007cec:	46bd      	mov	sp, r7
 8007cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cf2:	bf00      	nop
 8007cf4:	40008000 	.word	0x40008000
 8007cf8:	00f42400 	.word	0x00f42400

08007cfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d08:	f003 0308 	and.w	r3, r3, #8
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00a      	beq.n	8007d26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	430a      	orrs	r2, r1
 8007d24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d2a:	f003 0301 	and.w	r3, r3, #1
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00a      	beq.n	8007d48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	430a      	orrs	r2, r1
 8007d46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d4c:	f003 0302 	and.w	r3, r3, #2
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00a      	beq.n	8007d6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	430a      	orrs	r2, r1
 8007d68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d6e:	f003 0304 	and.w	r3, r3, #4
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00a      	beq.n	8007d8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	430a      	orrs	r2, r1
 8007d8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d90:	f003 0310 	and.w	r3, r3, #16
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00a      	beq.n	8007dae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	430a      	orrs	r2, r1
 8007dac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007db2:	f003 0320 	and.w	r3, r3, #32
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00a      	beq.n	8007dd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	430a      	orrs	r2, r1
 8007dce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d01a      	beq.n	8007e12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	430a      	orrs	r2, r1
 8007df0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007df6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dfa:	d10a      	bne.n	8007e12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	430a      	orrs	r2, r1
 8007e10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00a      	beq.n	8007e34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	430a      	orrs	r2, r1
 8007e32:	605a      	str	r2, [r3, #4]
  }
}
 8007e34:	bf00      	nop
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b098      	sub	sp, #96	@ 0x60
 8007e44:	af02      	add	r7, sp, #8
 8007e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e50:	f7f9 fcb8 	bl	80017c4 <HAL_GetTick>
 8007e54:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 0308 	and.w	r3, r3, #8
 8007e60:	2b08      	cmp	r3, #8
 8007e62:	d12e      	bne.n	8007ec2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e68:	9300      	str	r3, [sp, #0]
 8007e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 f88c 	bl	8007f90 <UART_WaitOnFlagUntilTimeout>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d021      	beq.n	8007ec2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e86:	e853 3f00 	ldrex	r3, [r3]
 8007e8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e92:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	461a      	mov	r2, r3
 8007e9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e9e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ea2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ea4:	e841 2300 	strex	r3, r2, [r1]
 8007ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d1e6      	bne.n	8007e7e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2220      	movs	r2, #32
 8007eb4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e062      	b.n	8007f88 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 0304 	and.w	r3, r3, #4
 8007ecc:	2b04      	cmp	r3, #4
 8007ece:	d149      	bne.n	8007f64 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ed0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ed4:	9300      	str	r3, [sp, #0]
 8007ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 f856 	bl	8007f90 <UART_WaitOnFlagUntilTimeout>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d03c      	beq.n	8007f64 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef2:	e853 3f00 	ldrex	r3, [r3]
 8007ef6:	623b      	str	r3, [r7, #32]
   return(result);
 8007ef8:	6a3b      	ldr	r3, [r7, #32]
 8007efa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	461a      	mov	r2, r3
 8007f06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f08:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f10:	e841 2300 	strex	r3, r2, [r1]
 8007f14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d1e6      	bne.n	8007eea <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	3308      	adds	r3, #8
 8007f22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	e853 3f00 	ldrex	r3, [r3]
 8007f2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f023 0301 	bic.w	r3, r3, #1
 8007f32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	3308      	adds	r3, #8
 8007f3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f3c:	61fa      	str	r2, [r7, #28]
 8007f3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f40:	69b9      	ldr	r1, [r7, #24]
 8007f42:	69fa      	ldr	r2, [r7, #28]
 8007f44:	e841 2300 	strex	r3, r2, [r1]
 8007f48:	617b      	str	r3, [r7, #20]
   return(result);
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1e5      	bne.n	8007f1c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2220      	movs	r2, #32
 8007f54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f60:	2303      	movs	r3, #3
 8007f62:	e011      	b.n	8007f88 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2220      	movs	r2, #32
 8007f68:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2220      	movs	r2, #32
 8007f6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3758      	adds	r7, #88	@ 0x58
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	603b      	str	r3, [r7, #0]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fa0:	e04f      	b.n	8008042 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fa8:	d04b      	beq.n	8008042 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007faa:	f7f9 fc0b 	bl	80017c4 <HAL_GetTick>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	1ad3      	subs	r3, r2, r3
 8007fb4:	69ba      	ldr	r2, [r7, #24]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d302      	bcc.n	8007fc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d101      	bne.n	8007fc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	e04e      	b.n	8008062 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 0304 	and.w	r3, r3, #4
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d037      	beq.n	8008042 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	2b80      	cmp	r3, #128	@ 0x80
 8007fd6:	d034      	beq.n	8008042 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	2b40      	cmp	r3, #64	@ 0x40
 8007fdc:	d031      	beq.n	8008042 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	69db      	ldr	r3, [r3, #28]
 8007fe4:	f003 0308 	and.w	r3, r3, #8
 8007fe8:	2b08      	cmp	r3, #8
 8007fea:	d110      	bne.n	800800e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2208      	movs	r2, #8
 8007ff2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f000 f838 	bl	800806a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2208      	movs	r2, #8
 8007ffe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2200      	movs	r2, #0
 8008006:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	e029      	b.n	8008062 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	69db      	ldr	r3, [r3, #28]
 8008014:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008018:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800801c:	d111      	bne.n	8008042 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008026:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f000 f81e 	bl	800806a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2220      	movs	r2, #32
 8008032:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800803e:	2303      	movs	r3, #3
 8008040:	e00f      	b.n	8008062 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	69da      	ldr	r2, [r3, #28]
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	4013      	ands	r3, r2
 800804c:	68ba      	ldr	r2, [r7, #8]
 800804e:	429a      	cmp	r2, r3
 8008050:	bf0c      	ite	eq
 8008052:	2301      	moveq	r3, #1
 8008054:	2300      	movne	r3, #0
 8008056:	b2db      	uxtb	r3, r3
 8008058:	461a      	mov	r2, r3
 800805a:	79fb      	ldrb	r3, [r7, #7]
 800805c:	429a      	cmp	r2, r3
 800805e:	d0a0      	beq.n	8007fa2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800806a:	b480      	push	{r7}
 800806c:	b095      	sub	sp, #84	@ 0x54
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800807a:	e853 3f00 	ldrex	r3, [r3]
 800807e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008082:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008086:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	461a      	mov	r2, r3
 800808e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008090:	643b      	str	r3, [r7, #64]	@ 0x40
 8008092:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008094:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008096:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008098:	e841 2300 	strex	r3, r2, [r1]
 800809c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800809e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d1e6      	bne.n	8008072 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	3308      	adds	r3, #8
 80080aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ac:	6a3b      	ldr	r3, [r7, #32]
 80080ae:	e853 3f00 	ldrex	r3, [r3]
 80080b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	f023 0301 	bic.w	r3, r3, #1
 80080ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	3308      	adds	r3, #8
 80080c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80080c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080cc:	e841 2300 	strex	r3, r2, [r1]
 80080d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80080d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1e5      	bne.n	80080a4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d118      	bne.n	8008112 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	e853 3f00 	ldrex	r3, [r3]
 80080ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	f023 0310 	bic.w	r3, r3, #16
 80080f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	461a      	mov	r2, r3
 80080fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080fe:	61bb      	str	r3, [r7, #24]
 8008100:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008102:	6979      	ldr	r1, [r7, #20]
 8008104:	69ba      	ldr	r2, [r7, #24]
 8008106:	e841 2300 	strex	r3, r2, [r1]
 800810a:	613b      	str	r3, [r7, #16]
   return(result);
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1e6      	bne.n	80080e0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2220      	movs	r2, #32
 8008116:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008126:	bf00      	nop
 8008128:	3754      	adds	r7, #84	@ 0x54
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr

08008132 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b084      	sub	sp, #16
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800813e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2200      	movs	r2, #0
 800814c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f7ff fb05 	bl	8007760 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008156:	bf00      	nop
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b088      	sub	sp, #32
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	e853 3f00 	ldrex	r3, [r3]
 8008172:	60bb      	str	r3, [r7, #8]
   return(result);
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800817a:	61fb      	str	r3, [r7, #28]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	461a      	mov	r2, r3
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	61bb      	str	r3, [r7, #24]
 8008186:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008188:	6979      	ldr	r1, [r7, #20]
 800818a:	69ba      	ldr	r2, [r7, #24]
 800818c:	e841 2300 	strex	r3, r2, [r1]
 8008190:	613b      	str	r3, [r7, #16]
   return(result);
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1e6      	bne.n	8008166 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2220      	movs	r2, #32
 800819c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f7ff fad1 	bl	800774c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081aa:	bf00      	nop
 80081ac:	3720      	adds	r7, #32
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b083      	sub	sp, #12
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80081ba:	bf00      	nop
 80081bc:	370c      	adds	r7, #12
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081c6:	b480      	push	{r7}
 80081c8:	b085      	sub	sp, #20
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
 80081ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	689a      	ldr	r2, [r3, #8]
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	683a      	ldr	r2, [r7, #0]
 80081ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	1c5a      	adds	r2, r3, #1
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	601a      	str	r2, [r3, #0]
}
 8008202:	bf00      	nop
 8008204:	3714      	adds	r7, #20
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800820e:	b480      	push	{r7}
 8008210:	b085      	sub	sp, #20
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	6892      	ldr	r2, [r2, #8]
 8008224:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	6852      	ldr	r2, [r2, #4]
 800822e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	429a      	cmp	r2, r3
 8008238:	d103      	bne.n	8008242 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	689a      	ldr	r2, [r3, #8]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	1e5a      	subs	r2, r3, #1
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
}
 8008256:	4618      	mov	r0, r3
 8008258:	3714      	adds	r7, #20
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
	...

08008264 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b086      	sub	sp, #24
 8008268:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800826a:	2300      	movs	r3, #0
 800826c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800826e:	4b4f      	ldr	r3, [pc, #316]	@ (80083ac <xTaskIncrementTick+0x148>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	f040 808f 	bne.w	8008396 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008278:	4b4d      	ldr	r3, [pc, #308]	@ (80083b0 <xTaskIncrementTick+0x14c>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	3301      	adds	r3, #1
 800827e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008280:	4a4b      	ldr	r2, [pc, #300]	@ (80083b0 <xTaskIncrementTick+0x14c>)
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d121      	bne.n	80082d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800828c:	4b49      	ldr	r3, [pc, #292]	@ (80083b4 <xTaskIncrementTick+0x150>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00b      	beq.n	80082ae <xTaskIncrementTick+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800829a:	f383 8811 	msr	BASEPRI, r3
 800829e:	f3bf 8f6f 	isb	sy
 80082a2:	f3bf 8f4f 	dsb	sy
 80082a6:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80082a8:	bf00      	nop
 80082aa:	bf00      	nop
 80082ac:	e7fd      	b.n	80082aa <xTaskIncrementTick+0x46>
 80082ae:	4b41      	ldr	r3, [pc, #260]	@ (80083b4 <xTaskIncrementTick+0x150>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	4b40      	ldr	r3, [pc, #256]	@ (80083b8 <xTaskIncrementTick+0x154>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a3e      	ldr	r2, [pc, #248]	@ (80083b4 <xTaskIncrementTick+0x150>)
 80082ba:	6013      	str	r3, [r2, #0]
 80082bc:	4a3e      	ldr	r2, [pc, #248]	@ (80083b8 <xTaskIncrementTick+0x154>)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6013      	str	r3, [r2, #0]
 80082c2:	4b3e      	ldr	r3, [pc, #248]	@ (80083bc <xTaskIncrementTick+0x158>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	3301      	adds	r3, #1
 80082c8:	4a3c      	ldr	r2, [pc, #240]	@ (80083bc <xTaskIncrementTick+0x158>)
 80082ca:	6013      	str	r3, [r2, #0]
 80082cc:	f000 f8e8 	bl	80084a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80082d0:	4b3b      	ldr	r3, [pc, #236]	@ (80083c0 <xTaskIncrementTick+0x15c>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	693a      	ldr	r2, [r7, #16]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d348      	bcc.n	800836c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082da:	4b36      	ldr	r3, [pc, #216]	@ (80083b4 <xTaskIncrementTick+0x150>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d104      	bne.n	80082ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082e4:	4b36      	ldr	r3, [pc, #216]	@ (80083c0 <xTaskIncrementTick+0x15c>)
 80082e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80082ea:	601a      	str	r2, [r3, #0]
					break;
 80082ec:	e03e      	b.n	800836c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082ee:	4b31      	ldr	r3, [pc, #196]	@ (80083b4 <xTaskIncrementTick+0x150>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80082fe:	693a      	ldr	r2, [r7, #16]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	429a      	cmp	r2, r3
 8008304:	d203      	bcs.n	800830e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008306:	4a2e      	ldr	r2, [pc, #184]	@ (80083c0 <xTaskIncrementTick+0x15c>)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800830c:	e02e      	b.n	800836c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	3304      	adds	r3, #4
 8008312:	4618      	mov	r0, r3
 8008314:	f7ff ff7b 	bl	800820e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800831c:	2b00      	cmp	r3, #0
 800831e:	d004      	beq.n	800832a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	3318      	adds	r3, #24
 8008324:	4618      	mov	r0, r3
 8008326:	f7ff ff72 	bl	800820e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800832e:	2201      	movs	r2, #1
 8008330:	409a      	lsls	r2, r3
 8008332:	4b24      	ldr	r3, [pc, #144]	@ (80083c4 <xTaskIncrementTick+0x160>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4313      	orrs	r3, r2
 8008338:	4a22      	ldr	r2, [pc, #136]	@ (80083c4 <xTaskIncrementTick+0x160>)
 800833a:	6013      	str	r3, [r2, #0]
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008340:	4613      	mov	r3, r2
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	4413      	add	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4a1f      	ldr	r2, [pc, #124]	@ (80083c8 <xTaskIncrementTick+0x164>)
 800834a:	441a      	add	r2, r3
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	3304      	adds	r3, #4
 8008350:	4619      	mov	r1, r3
 8008352:	4610      	mov	r0, r2
 8008354:	f7ff ff37 	bl	80081c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800835c:	4b1b      	ldr	r3, [pc, #108]	@ (80083cc <xTaskIncrementTick+0x168>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008362:	429a      	cmp	r2, r3
 8008364:	d3b9      	bcc.n	80082da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008366:	2301      	movs	r3, #1
 8008368:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800836a:	e7b6      	b.n	80082da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800836c:	4b17      	ldr	r3, [pc, #92]	@ (80083cc <xTaskIncrementTick+0x168>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008372:	4915      	ldr	r1, [pc, #84]	@ (80083c8 <xTaskIncrementTick+0x164>)
 8008374:	4613      	mov	r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4413      	add	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	440b      	add	r3, r1
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d901      	bls.n	8008388 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008384:	2301      	movs	r3, #1
 8008386:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008388:	4b11      	ldr	r3, [pc, #68]	@ (80083d0 <xTaskIncrementTick+0x16c>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d007      	beq.n	80083a0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008390:	2301      	movs	r3, #1
 8008392:	617b      	str	r3, [r7, #20]
 8008394:	e004      	b.n	80083a0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008396:	4b0f      	ldr	r3, [pc, #60]	@ (80083d4 <xTaskIncrementTick+0x170>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3301      	adds	r3, #1
 800839c:	4a0d      	ldr	r2, [pc, #52]	@ (80083d4 <xTaskIncrementTick+0x170>)
 800839e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80083a0:	697b      	ldr	r3, [r7, #20]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3718      	adds	r7, #24
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	20000a74 	.word	0x20000a74
 80083b0:	20000a5c 	.word	0x20000a5c
 80083b4:	20000a54 	.word	0x20000a54
 80083b8:	20000a58 	.word	0x20000a58
 80083bc:	20000a6c 	.word	0x20000a6c
 80083c0:	20000a70 	.word	0x20000a70
 80083c4:	20000a60 	.word	0x20000a60
 80083c8:	200009c8 	.word	0x200009c8
 80083cc:	200009c4 	.word	0x200009c4
 80083d0:	20000a68 	.word	0x20000a68
 80083d4:	20000a64 	.word	0x20000a64

080083d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80083d8:	b480      	push	{r7}
 80083da:	b087      	sub	sp, #28
 80083dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80083de:	4b2a      	ldr	r3, [pc, #168]	@ (8008488 <vTaskSwitchContext+0xb0>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d003      	beq.n	80083ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80083e6:	4b29      	ldr	r3, [pc, #164]	@ (800848c <vTaskSwitchContext+0xb4>)
 80083e8:	2201      	movs	r2, #1
 80083ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80083ec:	e045      	b.n	800847a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80083ee:	4b27      	ldr	r3, [pc, #156]	@ (800848c <vTaskSwitchContext+0xb4>)
 80083f0:	2200      	movs	r2, #0
 80083f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083f4:	4b26      	ldr	r3, [pc, #152]	@ (8008490 <vTaskSwitchContext+0xb8>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	fab3 f383 	clz	r3, r3
 8008400:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008402:	7afb      	ldrb	r3, [r7, #11]
 8008404:	f1c3 031f 	rsb	r3, r3, #31
 8008408:	617b      	str	r3, [r7, #20]
 800840a:	4922      	ldr	r1, [pc, #136]	@ (8008494 <vTaskSwitchContext+0xbc>)
 800840c:	697a      	ldr	r2, [r7, #20]
 800840e:	4613      	mov	r3, r2
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	4413      	add	r3, r2
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	440b      	add	r3, r1
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d10b      	bne.n	8008436 <vTaskSwitchContext+0x5e>
	__asm volatile
 800841e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008422:	f383 8811 	msr	BASEPRI, r3
 8008426:	f3bf 8f6f 	isb	sy
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	607b      	str	r3, [r7, #4]
}
 8008430:	bf00      	nop
 8008432:	bf00      	nop
 8008434:	e7fd      	b.n	8008432 <vTaskSwitchContext+0x5a>
 8008436:	697a      	ldr	r2, [r7, #20]
 8008438:	4613      	mov	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4413      	add	r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4a14      	ldr	r2, [pc, #80]	@ (8008494 <vTaskSwitchContext+0xbc>)
 8008442:	4413      	add	r3, r2
 8008444:	613b      	str	r3, [r7, #16]
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	685a      	ldr	r2, [r3, #4]
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	605a      	str	r2, [r3, #4]
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	685a      	ldr	r2, [r3, #4]
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	3308      	adds	r3, #8
 8008458:	429a      	cmp	r2, r3
 800845a:	d104      	bne.n	8008466 <vTaskSwitchContext+0x8e>
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	685a      	ldr	r2, [r3, #4]
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	605a      	str	r2, [r3, #4]
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	4a0a      	ldr	r2, [pc, #40]	@ (8008498 <vTaskSwitchContext+0xc0>)
 800846e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008470:	4b09      	ldr	r3, [pc, #36]	@ (8008498 <vTaskSwitchContext+0xc0>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	334c      	adds	r3, #76	@ 0x4c
 8008476:	4a09      	ldr	r2, [pc, #36]	@ (800849c <vTaskSwitchContext+0xc4>)
 8008478:	6013      	str	r3, [r2, #0]
}
 800847a:	bf00      	nop
 800847c:	371c      	adds	r7, #28
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	20000a74 	.word	0x20000a74
 800848c:	20000a68 	.word	0x20000a68
 8008490:	20000a60 	.word	0x20000a60
 8008494:	200009c8 	.word	0x200009c8
 8008498:	200009c4 	.word	0x200009c4
 800849c:	20000018 	.word	0x20000018

080084a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084a6:	4b0c      	ldr	r3, [pc, #48]	@ (80084d8 <prvResetNextTaskUnblockTime+0x38>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d104      	bne.n	80084ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80084b0:	4b0a      	ldr	r3, [pc, #40]	@ (80084dc <prvResetNextTaskUnblockTime+0x3c>)
 80084b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80084b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80084b8:	e008      	b.n	80084cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084ba:	4b07      	ldr	r3, [pc, #28]	@ (80084d8 <prvResetNextTaskUnblockTime+0x38>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	4a04      	ldr	r2, [pc, #16]	@ (80084dc <prvResetNextTaskUnblockTime+0x3c>)
 80084ca:	6013      	str	r3, [r2, #0]
}
 80084cc:	bf00      	nop
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr
 80084d8:	20000a54 	.word	0x20000a54
 80084dc:	20000a70 	.word	0x20000a70

080084e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80084e0:	4b07      	ldr	r3, [pc, #28]	@ (8008500 <pxCurrentTCBConst2>)
 80084e2:	6819      	ldr	r1, [r3, #0]
 80084e4:	6808      	ldr	r0, [r1, #0]
 80084e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ea:	f380 8809 	msr	PSP, r0
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f04f 0000 	mov.w	r0, #0
 80084f6:	f380 8811 	msr	BASEPRI, r0
 80084fa:	4770      	bx	lr
 80084fc:	f3af 8000 	nop.w

08008500 <pxCurrentTCBConst2>:
 8008500:	200009c4 	.word	0x200009c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008504:	bf00      	nop
 8008506:	bf00      	nop
	...

08008510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008510:	f3ef 8009 	mrs	r0, PSP
 8008514:	f3bf 8f6f 	isb	sy
 8008518:	4b15      	ldr	r3, [pc, #84]	@ (8008570 <pxCurrentTCBConst>)
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	f01e 0f10 	tst.w	lr, #16
 8008520:	bf08      	it	eq
 8008522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800852a:	6010      	str	r0, [r2, #0]
 800852c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008530:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008534:	f380 8811 	msr	BASEPRI, r0
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	f3bf 8f6f 	isb	sy
 8008540:	f7ff ff4a 	bl	80083d8 <vTaskSwitchContext>
 8008544:	f04f 0000 	mov.w	r0, #0
 8008548:	f380 8811 	msr	BASEPRI, r0
 800854c:	bc09      	pop	{r0, r3}
 800854e:	6819      	ldr	r1, [r3, #0]
 8008550:	6808      	ldr	r0, [r1, #0]
 8008552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008556:	f01e 0f10 	tst.w	lr, #16
 800855a:	bf08      	it	eq
 800855c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008560:	f380 8809 	msr	PSP, r0
 8008564:	f3bf 8f6f 	isb	sy
 8008568:	4770      	bx	lr
 800856a:	bf00      	nop
 800856c:	f3af 8000 	nop.w

08008570 <pxCurrentTCBConst>:
 8008570:	200009c4 	.word	0x200009c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008574:	bf00      	nop
 8008576:	bf00      	nop

08008578 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
	__asm volatile
 800857e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008582:	f383 8811 	msr	BASEPRI, r3
 8008586:	f3bf 8f6f 	isb	sy
 800858a:	f3bf 8f4f 	dsb	sy
 800858e:	607b      	str	r3, [r7, #4]
}
 8008590:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008592:	f7ff fe67 	bl	8008264 <xTaskIncrementTick>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d003      	beq.n	80085a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800859c:	4b06      	ldr	r3, [pc, #24]	@ (80085b8 <SysTick_Handler+0x40>)
 800859e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085a2:	601a      	str	r2, [r3, #0]
 80085a4:	2300      	movs	r3, #0
 80085a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80085ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80085b0:	bf00      	nop
 80085b2:	3708      	adds	r7, #8
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	e000ed04 	.word	0xe000ed04

080085bc <std>:
 80085bc:	2300      	movs	r3, #0
 80085be:	b510      	push	{r4, lr}
 80085c0:	4604      	mov	r4, r0
 80085c2:	e9c0 3300 	strd	r3, r3, [r0]
 80085c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80085ca:	6083      	str	r3, [r0, #8]
 80085cc:	8181      	strh	r1, [r0, #12]
 80085ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80085d0:	81c2      	strh	r2, [r0, #14]
 80085d2:	6183      	str	r3, [r0, #24]
 80085d4:	4619      	mov	r1, r3
 80085d6:	2208      	movs	r2, #8
 80085d8:	305c      	adds	r0, #92	@ 0x5c
 80085da:	f000 f9f9 	bl	80089d0 <memset>
 80085de:	4b0d      	ldr	r3, [pc, #52]	@ (8008614 <std+0x58>)
 80085e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80085e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008618 <std+0x5c>)
 80085e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80085e6:	4b0d      	ldr	r3, [pc, #52]	@ (800861c <std+0x60>)
 80085e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80085ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008620 <std+0x64>)
 80085ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80085ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008624 <std+0x68>)
 80085f0:	6224      	str	r4, [r4, #32]
 80085f2:	429c      	cmp	r4, r3
 80085f4:	d006      	beq.n	8008604 <std+0x48>
 80085f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80085fa:	4294      	cmp	r4, r2
 80085fc:	d002      	beq.n	8008604 <std+0x48>
 80085fe:	33d0      	adds	r3, #208	@ 0xd0
 8008600:	429c      	cmp	r4, r3
 8008602:	d105      	bne.n	8008610 <std+0x54>
 8008604:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800860c:	f000 ba58 	b.w	8008ac0 <__retarget_lock_init_recursive>
 8008610:	bd10      	pop	{r4, pc}
 8008612:	bf00      	nop
 8008614:	08008821 	.word	0x08008821
 8008618:	08008843 	.word	0x08008843
 800861c:	0800887b 	.word	0x0800887b
 8008620:	0800889f 	.word	0x0800889f
 8008624:	20000a78 	.word	0x20000a78

08008628 <stdio_exit_handler>:
 8008628:	4a02      	ldr	r2, [pc, #8]	@ (8008634 <stdio_exit_handler+0xc>)
 800862a:	4903      	ldr	r1, [pc, #12]	@ (8008638 <stdio_exit_handler+0x10>)
 800862c:	4803      	ldr	r0, [pc, #12]	@ (800863c <stdio_exit_handler+0x14>)
 800862e:	f000 b869 	b.w	8008704 <_fwalk_sglue>
 8008632:	bf00      	nop
 8008634:	2000000c 	.word	0x2000000c
 8008638:	08009361 	.word	0x08009361
 800863c:	2000001c 	.word	0x2000001c

08008640 <cleanup_stdio>:
 8008640:	6841      	ldr	r1, [r0, #4]
 8008642:	4b0c      	ldr	r3, [pc, #48]	@ (8008674 <cleanup_stdio+0x34>)
 8008644:	4299      	cmp	r1, r3
 8008646:	b510      	push	{r4, lr}
 8008648:	4604      	mov	r4, r0
 800864a:	d001      	beq.n	8008650 <cleanup_stdio+0x10>
 800864c:	f000 fe88 	bl	8009360 <_fflush_r>
 8008650:	68a1      	ldr	r1, [r4, #8]
 8008652:	4b09      	ldr	r3, [pc, #36]	@ (8008678 <cleanup_stdio+0x38>)
 8008654:	4299      	cmp	r1, r3
 8008656:	d002      	beq.n	800865e <cleanup_stdio+0x1e>
 8008658:	4620      	mov	r0, r4
 800865a:	f000 fe81 	bl	8009360 <_fflush_r>
 800865e:	68e1      	ldr	r1, [r4, #12]
 8008660:	4b06      	ldr	r3, [pc, #24]	@ (800867c <cleanup_stdio+0x3c>)
 8008662:	4299      	cmp	r1, r3
 8008664:	d004      	beq.n	8008670 <cleanup_stdio+0x30>
 8008666:	4620      	mov	r0, r4
 8008668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800866c:	f000 be78 	b.w	8009360 <_fflush_r>
 8008670:	bd10      	pop	{r4, pc}
 8008672:	bf00      	nop
 8008674:	20000a78 	.word	0x20000a78
 8008678:	20000ae0 	.word	0x20000ae0
 800867c:	20000b48 	.word	0x20000b48

08008680 <global_stdio_init.part.0>:
 8008680:	b510      	push	{r4, lr}
 8008682:	4b0b      	ldr	r3, [pc, #44]	@ (80086b0 <global_stdio_init.part.0+0x30>)
 8008684:	4c0b      	ldr	r4, [pc, #44]	@ (80086b4 <global_stdio_init.part.0+0x34>)
 8008686:	4a0c      	ldr	r2, [pc, #48]	@ (80086b8 <global_stdio_init.part.0+0x38>)
 8008688:	601a      	str	r2, [r3, #0]
 800868a:	4620      	mov	r0, r4
 800868c:	2200      	movs	r2, #0
 800868e:	2104      	movs	r1, #4
 8008690:	f7ff ff94 	bl	80085bc <std>
 8008694:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008698:	2201      	movs	r2, #1
 800869a:	2109      	movs	r1, #9
 800869c:	f7ff ff8e 	bl	80085bc <std>
 80086a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80086a4:	2202      	movs	r2, #2
 80086a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086aa:	2112      	movs	r1, #18
 80086ac:	f7ff bf86 	b.w	80085bc <std>
 80086b0:	20000bb0 	.word	0x20000bb0
 80086b4:	20000a78 	.word	0x20000a78
 80086b8:	08008629 	.word	0x08008629

080086bc <__sfp_lock_acquire>:
 80086bc:	4801      	ldr	r0, [pc, #4]	@ (80086c4 <__sfp_lock_acquire+0x8>)
 80086be:	f000 ba00 	b.w	8008ac2 <__retarget_lock_acquire_recursive>
 80086c2:	bf00      	nop
 80086c4:	20000bb9 	.word	0x20000bb9

080086c8 <__sfp_lock_release>:
 80086c8:	4801      	ldr	r0, [pc, #4]	@ (80086d0 <__sfp_lock_release+0x8>)
 80086ca:	f000 b9fb 	b.w	8008ac4 <__retarget_lock_release_recursive>
 80086ce:	bf00      	nop
 80086d0:	20000bb9 	.word	0x20000bb9

080086d4 <__sinit>:
 80086d4:	b510      	push	{r4, lr}
 80086d6:	4604      	mov	r4, r0
 80086d8:	f7ff fff0 	bl	80086bc <__sfp_lock_acquire>
 80086dc:	6a23      	ldr	r3, [r4, #32]
 80086de:	b11b      	cbz	r3, 80086e8 <__sinit+0x14>
 80086e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086e4:	f7ff bff0 	b.w	80086c8 <__sfp_lock_release>
 80086e8:	4b04      	ldr	r3, [pc, #16]	@ (80086fc <__sinit+0x28>)
 80086ea:	6223      	str	r3, [r4, #32]
 80086ec:	4b04      	ldr	r3, [pc, #16]	@ (8008700 <__sinit+0x2c>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d1f5      	bne.n	80086e0 <__sinit+0xc>
 80086f4:	f7ff ffc4 	bl	8008680 <global_stdio_init.part.0>
 80086f8:	e7f2      	b.n	80086e0 <__sinit+0xc>
 80086fa:	bf00      	nop
 80086fc:	08008641 	.word	0x08008641
 8008700:	20000bb0 	.word	0x20000bb0

08008704 <_fwalk_sglue>:
 8008704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008708:	4607      	mov	r7, r0
 800870a:	4688      	mov	r8, r1
 800870c:	4614      	mov	r4, r2
 800870e:	2600      	movs	r6, #0
 8008710:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008714:	f1b9 0901 	subs.w	r9, r9, #1
 8008718:	d505      	bpl.n	8008726 <_fwalk_sglue+0x22>
 800871a:	6824      	ldr	r4, [r4, #0]
 800871c:	2c00      	cmp	r4, #0
 800871e:	d1f7      	bne.n	8008710 <_fwalk_sglue+0xc>
 8008720:	4630      	mov	r0, r6
 8008722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008726:	89ab      	ldrh	r3, [r5, #12]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d907      	bls.n	800873c <_fwalk_sglue+0x38>
 800872c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008730:	3301      	adds	r3, #1
 8008732:	d003      	beq.n	800873c <_fwalk_sglue+0x38>
 8008734:	4629      	mov	r1, r5
 8008736:	4638      	mov	r0, r7
 8008738:	47c0      	blx	r8
 800873a:	4306      	orrs	r6, r0
 800873c:	3568      	adds	r5, #104	@ 0x68
 800873e:	e7e9      	b.n	8008714 <_fwalk_sglue+0x10>

08008740 <iprintf>:
 8008740:	b40f      	push	{r0, r1, r2, r3}
 8008742:	b507      	push	{r0, r1, r2, lr}
 8008744:	4906      	ldr	r1, [pc, #24]	@ (8008760 <iprintf+0x20>)
 8008746:	ab04      	add	r3, sp, #16
 8008748:	6808      	ldr	r0, [r1, #0]
 800874a:	f853 2b04 	ldr.w	r2, [r3], #4
 800874e:	6881      	ldr	r1, [r0, #8]
 8008750:	9301      	str	r3, [sp, #4]
 8008752:	f000 fadb 	bl	8008d0c <_vfiprintf_r>
 8008756:	b003      	add	sp, #12
 8008758:	f85d eb04 	ldr.w	lr, [sp], #4
 800875c:	b004      	add	sp, #16
 800875e:	4770      	bx	lr
 8008760:	20000018 	.word	0x20000018

08008764 <_puts_r>:
 8008764:	6a03      	ldr	r3, [r0, #32]
 8008766:	b570      	push	{r4, r5, r6, lr}
 8008768:	6884      	ldr	r4, [r0, #8]
 800876a:	4605      	mov	r5, r0
 800876c:	460e      	mov	r6, r1
 800876e:	b90b      	cbnz	r3, 8008774 <_puts_r+0x10>
 8008770:	f7ff ffb0 	bl	80086d4 <__sinit>
 8008774:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008776:	07db      	lsls	r3, r3, #31
 8008778:	d405      	bmi.n	8008786 <_puts_r+0x22>
 800877a:	89a3      	ldrh	r3, [r4, #12]
 800877c:	0598      	lsls	r0, r3, #22
 800877e:	d402      	bmi.n	8008786 <_puts_r+0x22>
 8008780:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008782:	f000 f99e 	bl	8008ac2 <__retarget_lock_acquire_recursive>
 8008786:	89a3      	ldrh	r3, [r4, #12]
 8008788:	0719      	lsls	r1, r3, #28
 800878a:	d502      	bpl.n	8008792 <_puts_r+0x2e>
 800878c:	6923      	ldr	r3, [r4, #16]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d135      	bne.n	80087fe <_puts_r+0x9a>
 8008792:	4621      	mov	r1, r4
 8008794:	4628      	mov	r0, r5
 8008796:	f000 f8c5 	bl	8008924 <__swsetup_r>
 800879a:	b380      	cbz	r0, 80087fe <_puts_r+0x9a>
 800879c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80087a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087a2:	07da      	lsls	r2, r3, #31
 80087a4:	d405      	bmi.n	80087b2 <_puts_r+0x4e>
 80087a6:	89a3      	ldrh	r3, [r4, #12]
 80087a8:	059b      	lsls	r3, r3, #22
 80087aa:	d402      	bmi.n	80087b2 <_puts_r+0x4e>
 80087ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087ae:	f000 f989 	bl	8008ac4 <__retarget_lock_release_recursive>
 80087b2:	4628      	mov	r0, r5
 80087b4:	bd70      	pop	{r4, r5, r6, pc}
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	da04      	bge.n	80087c4 <_puts_r+0x60>
 80087ba:	69a2      	ldr	r2, [r4, #24]
 80087bc:	429a      	cmp	r2, r3
 80087be:	dc17      	bgt.n	80087f0 <_puts_r+0x8c>
 80087c0:	290a      	cmp	r1, #10
 80087c2:	d015      	beq.n	80087f0 <_puts_r+0x8c>
 80087c4:	6823      	ldr	r3, [r4, #0]
 80087c6:	1c5a      	adds	r2, r3, #1
 80087c8:	6022      	str	r2, [r4, #0]
 80087ca:	7019      	strb	r1, [r3, #0]
 80087cc:	68a3      	ldr	r3, [r4, #8]
 80087ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80087d2:	3b01      	subs	r3, #1
 80087d4:	60a3      	str	r3, [r4, #8]
 80087d6:	2900      	cmp	r1, #0
 80087d8:	d1ed      	bne.n	80087b6 <_puts_r+0x52>
 80087da:	2b00      	cmp	r3, #0
 80087dc:	da11      	bge.n	8008802 <_puts_r+0x9e>
 80087de:	4622      	mov	r2, r4
 80087e0:	210a      	movs	r1, #10
 80087e2:	4628      	mov	r0, r5
 80087e4:	f000 f85f 	bl	80088a6 <__swbuf_r>
 80087e8:	3001      	adds	r0, #1
 80087ea:	d0d7      	beq.n	800879c <_puts_r+0x38>
 80087ec:	250a      	movs	r5, #10
 80087ee:	e7d7      	b.n	80087a0 <_puts_r+0x3c>
 80087f0:	4622      	mov	r2, r4
 80087f2:	4628      	mov	r0, r5
 80087f4:	f000 f857 	bl	80088a6 <__swbuf_r>
 80087f8:	3001      	adds	r0, #1
 80087fa:	d1e7      	bne.n	80087cc <_puts_r+0x68>
 80087fc:	e7ce      	b.n	800879c <_puts_r+0x38>
 80087fe:	3e01      	subs	r6, #1
 8008800:	e7e4      	b.n	80087cc <_puts_r+0x68>
 8008802:	6823      	ldr	r3, [r4, #0]
 8008804:	1c5a      	adds	r2, r3, #1
 8008806:	6022      	str	r2, [r4, #0]
 8008808:	220a      	movs	r2, #10
 800880a:	701a      	strb	r2, [r3, #0]
 800880c:	e7ee      	b.n	80087ec <_puts_r+0x88>
	...

08008810 <puts>:
 8008810:	4b02      	ldr	r3, [pc, #8]	@ (800881c <puts+0xc>)
 8008812:	4601      	mov	r1, r0
 8008814:	6818      	ldr	r0, [r3, #0]
 8008816:	f7ff bfa5 	b.w	8008764 <_puts_r>
 800881a:	bf00      	nop
 800881c:	20000018 	.word	0x20000018

08008820 <__sread>:
 8008820:	b510      	push	{r4, lr}
 8008822:	460c      	mov	r4, r1
 8008824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008828:	f000 f8fc 	bl	8008a24 <_read_r>
 800882c:	2800      	cmp	r0, #0
 800882e:	bfab      	itete	ge
 8008830:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008832:	89a3      	ldrhlt	r3, [r4, #12]
 8008834:	181b      	addge	r3, r3, r0
 8008836:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800883a:	bfac      	ite	ge
 800883c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800883e:	81a3      	strhlt	r3, [r4, #12]
 8008840:	bd10      	pop	{r4, pc}

08008842 <__swrite>:
 8008842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008846:	461f      	mov	r7, r3
 8008848:	898b      	ldrh	r3, [r1, #12]
 800884a:	05db      	lsls	r3, r3, #23
 800884c:	4605      	mov	r5, r0
 800884e:	460c      	mov	r4, r1
 8008850:	4616      	mov	r6, r2
 8008852:	d505      	bpl.n	8008860 <__swrite+0x1e>
 8008854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008858:	2302      	movs	r3, #2
 800885a:	2200      	movs	r2, #0
 800885c:	f000 f8d0 	bl	8008a00 <_lseek_r>
 8008860:	89a3      	ldrh	r3, [r4, #12]
 8008862:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008866:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800886a:	81a3      	strh	r3, [r4, #12]
 800886c:	4632      	mov	r2, r6
 800886e:	463b      	mov	r3, r7
 8008870:	4628      	mov	r0, r5
 8008872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008876:	f000 b8e7 	b.w	8008a48 <_write_r>

0800887a <__sseek>:
 800887a:	b510      	push	{r4, lr}
 800887c:	460c      	mov	r4, r1
 800887e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008882:	f000 f8bd 	bl	8008a00 <_lseek_r>
 8008886:	1c43      	adds	r3, r0, #1
 8008888:	89a3      	ldrh	r3, [r4, #12]
 800888a:	bf15      	itete	ne
 800888c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800888e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008892:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008896:	81a3      	strheq	r3, [r4, #12]
 8008898:	bf18      	it	ne
 800889a:	81a3      	strhne	r3, [r4, #12]
 800889c:	bd10      	pop	{r4, pc}

0800889e <__sclose>:
 800889e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088a2:	f000 b89d 	b.w	80089e0 <_close_r>

080088a6 <__swbuf_r>:
 80088a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088a8:	460e      	mov	r6, r1
 80088aa:	4614      	mov	r4, r2
 80088ac:	4605      	mov	r5, r0
 80088ae:	b118      	cbz	r0, 80088b8 <__swbuf_r+0x12>
 80088b0:	6a03      	ldr	r3, [r0, #32]
 80088b2:	b90b      	cbnz	r3, 80088b8 <__swbuf_r+0x12>
 80088b4:	f7ff ff0e 	bl	80086d4 <__sinit>
 80088b8:	69a3      	ldr	r3, [r4, #24]
 80088ba:	60a3      	str	r3, [r4, #8]
 80088bc:	89a3      	ldrh	r3, [r4, #12]
 80088be:	071a      	lsls	r2, r3, #28
 80088c0:	d501      	bpl.n	80088c6 <__swbuf_r+0x20>
 80088c2:	6923      	ldr	r3, [r4, #16]
 80088c4:	b943      	cbnz	r3, 80088d8 <__swbuf_r+0x32>
 80088c6:	4621      	mov	r1, r4
 80088c8:	4628      	mov	r0, r5
 80088ca:	f000 f82b 	bl	8008924 <__swsetup_r>
 80088ce:	b118      	cbz	r0, 80088d8 <__swbuf_r+0x32>
 80088d0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80088d4:	4638      	mov	r0, r7
 80088d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088d8:	6823      	ldr	r3, [r4, #0]
 80088da:	6922      	ldr	r2, [r4, #16]
 80088dc:	1a98      	subs	r0, r3, r2
 80088de:	6963      	ldr	r3, [r4, #20]
 80088e0:	b2f6      	uxtb	r6, r6
 80088e2:	4283      	cmp	r3, r0
 80088e4:	4637      	mov	r7, r6
 80088e6:	dc05      	bgt.n	80088f4 <__swbuf_r+0x4e>
 80088e8:	4621      	mov	r1, r4
 80088ea:	4628      	mov	r0, r5
 80088ec:	f000 fd38 	bl	8009360 <_fflush_r>
 80088f0:	2800      	cmp	r0, #0
 80088f2:	d1ed      	bne.n	80088d0 <__swbuf_r+0x2a>
 80088f4:	68a3      	ldr	r3, [r4, #8]
 80088f6:	3b01      	subs	r3, #1
 80088f8:	60a3      	str	r3, [r4, #8]
 80088fa:	6823      	ldr	r3, [r4, #0]
 80088fc:	1c5a      	adds	r2, r3, #1
 80088fe:	6022      	str	r2, [r4, #0]
 8008900:	701e      	strb	r6, [r3, #0]
 8008902:	6962      	ldr	r2, [r4, #20]
 8008904:	1c43      	adds	r3, r0, #1
 8008906:	429a      	cmp	r2, r3
 8008908:	d004      	beq.n	8008914 <__swbuf_r+0x6e>
 800890a:	89a3      	ldrh	r3, [r4, #12]
 800890c:	07db      	lsls	r3, r3, #31
 800890e:	d5e1      	bpl.n	80088d4 <__swbuf_r+0x2e>
 8008910:	2e0a      	cmp	r6, #10
 8008912:	d1df      	bne.n	80088d4 <__swbuf_r+0x2e>
 8008914:	4621      	mov	r1, r4
 8008916:	4628      	mov	r0, r5
 8008918:	f000 fd22 	bl	8009360 <_fflush_r>
 800891c:	2800      	cmp	r0, #0
 800891e:	d0d9      	beq.n	80088d4 <__swbuf_r+0x2e>
 8008920:	e7d6      	b.n	80088d0 <__swbuf_r+0x2a>
	...

08008924 <__swsetup_r>:
 8008924:	b538      	push	{r3, r4, r5, lr}
 8008926:	4b29      	ldr	r3, [pc, #164]	@ (80089cc <__swsetup_r+0xa8>)
 8008928:	4605      	mov	r5, r0
 800892a:	6818      	ldr	r0, [r3, #0]
 800892c:	460c      	mov	r4, r1
 800892e:	b118      	cbz	r0, 8008938 <__swsetup_r+0x14>
 8008930:	6a03      	ldr	r3, [r0, #32]
 8008932:	b90b      	cbnz	r3, 8008938 <__swsetup_r+0x14>
 8008934:	f7ff fece 	bl	80086d4 <__sinit>
 8008938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800893c:	0719      	lsls	r1, r3, #28
 800893e:	d422      	bmi.n	8008986 <__swsetup_r+0x62>
 8008940:	06da      	lsls	r2, r3, #27
 8008942:	d407      	bmi.n	8008954 <__swsetup_r+0x30>
 8008944:	2209      	movs	r2, #9
 8008946:	602a      	str	r2, [r5, #0]
 8008948:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800894c:	81a3      	strh	r3, [r4, #12]
 800894e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008952:	e033      	b.n	80089bc <__swsetup_r+0x98>
 8008954:	0758      	lsls	r0, r3, #29
 8008956:	d512      	bpl.n	800897e <__swsetup_r+0x5a>
 8008958:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800895a:	b141      	cbz	r1, 800896e <__swsetup_r+0x4a>
 800895c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008960:	4299      	cmp	r1, r3
 8008962:	d002      	beq.n	800896a <__swsetup_r+0x46>
 8008964:	4628      	mov	r0, r5
 8008966:	f000 f8af 	bl	8008ac8 <_free_r>
 800896a:	2300      	movs	r3, #0
 800896c:	6363      	str	r3, [r4, #52]	@ 0x34
 800896e:	89a3      	ldrh	r3, [r4, #12]
 8008970:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008974:	81a3      	strh	r3, [r4, #12]
 8008976:	2300      	movs	r3, #0
 8008978:	6063      	str	r3, [r4, #4]
 800897a:	6923      	ldr	r3, [r4, #16]
 800897c:	6023      	str	r3, [r4, #0]
 800897e:	89a3      	ldrh	r3, [r4, #12]
 8008980:	f043 0308 	orr.w	r3, r3, #8
 8008984:	81a3      	strh	r3, [r4, #12]
 8008986:	6923      	ldr	r3, [r4, #16]
 8008988:	b94b      	cbnz	r3, 800899e <__swsetup_r+0x7a>
 800898a:	89a3      	ldrh	r3, [r4, #12]
 800898c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008990:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008994:	d003      	beq.n	800899e <__swsetup_r+0x7a>
 8008996:	4621      	mov	r1, r4
 8008998:	4628      	mov	r0, r5
 800899a:	f000 fd2f 	bl	80093fc <__smakebuf_r>
 800899e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089a2:	f013 0201 	ands.w	r2, r3, #1
 80089a6:	d00a      	beq.n	80089be <__swsetup_r+0x9a>
 80089a8:	2200      	movs	r2, #0
 80089aa:	60a2      	str	r2, [r4, #8]
 80089ac:	6962      	ldr	r2, [r4, #20]
 80089ae:	4252      	negs	r2, r2
 80089b0:	61a2      	str	r2, [r4, #24]
 80089b2:	6922      	ldr	r2, [r4, #16]
 80089b4:	b942      	cbnz	r2, 80089c8 <__swsetup_r+0xa4>
 80089b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80089ba:	d1c5      	bne.n	8008948 <__swsetup_r+0x24>
 80089bc:	bd38      	pop	{r3, r4, r5, pc}
 80089be:	0799      	lsls	r1, r3, #30
 80089c0:	bf58      	it	pl
 80089c2:	6962      	ldrpl	r2, [r4, #20]
 80089c4:	60a2      	str	r2, [r4, #8]
 80089c6:	e7f4      	b.n	80089b2 <__swsetup_r+0x8e>
 80089c8:	2000      	movs	r0, #0
 80089ca:	e7f7      	b.n	80089bc <__swsetup_r+0x98>
 80089cc:	20000018 	.word	0x20000018

080089d0 <memset>:
 80089d0:	4402      	add	r2, r0
 80089d2:	4603      	mov	r3, r0
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d100      	bne.n	80089da <memset+0xa>
 80089d8:	4770      	bx	lr
 80089da:	f803 1b01 	strb.w	r1, [r3], #1
 80089de:	e7f9      	b.n	80089d4 <memset+0x4>

080089e0 <_close_r>:
 80089e0:	b538      	push	{r3, r4, r5, lr}
 80089e2:	4d06      	ldr	r5, [pc, #24]	@ (80089fc <_close_r+0x1c>)
 80089e4:	2300      	movs	r3, #0
 80089e6:	4604      	mov	r4, r0
 80089e8:	4608      	mov	r0, r1
 80089ea:	602b      	str	r3, [r5, #0]
 80089ec:	f7f8 fb8b 	bl	8001106 <_close>
 80089f0:	1c43      	adds	r3, r0, #1
 80089f2:	d102      	bne.n	80089fa <_close_r+0x1a>
 80089f4:	682b      	ldr	r3, [r5, #0]
 80089f6:	b103      	cbz	r3, 80089fa <_close_r+0x1a>
 80089f8:	6023      	str	r3, [r4, #0]
 80089fa:	bd38      	pop	{r3, r4, r5, pc}
 80089fc:	20000bb4 	.word	0x20000bb4

08008a00 <_lseek_r>:
 8008a00:	b538      	push	{r3, r4, r5, lr}
 8008a02:	4d07      	ldr	r5, [pc, #28]	@ (8008a20 <_lseek_r+0x20>)
 8008a04:	4604      	mov	r4, r0
 8008a06:	4608      	mov	r0, r1
 8008a08:	4611      	mov	r1, r2
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	602a      	str	r2, [r5, #0]
 8008a0e:	461a      	mov	r2, r3
 8008a10:	f7f8 fba0 	bl	8001154 <_lseek>
 8008a14:	1c43      	adds	r3, r0, #1
 8008a16:	d102      	bne.n	8008a1e <_lseek_r+0x1e>
 8008a18:	682b      	ldr	r3, [r5, #0]
 8008a1a:	b103      	cbz	r3, 8008a1e <_lseek_r+0x1e>
 8008a1c:	6023      	str	r3, [r4, #0]
 8008a1e:	bd38      	pop	{r3, r4, r5, pc}
 8008a20:	20000bb4 	.word	0x20000bb4

08008a24 <_read_r>:
 8008a24:	b538      	push	{r3, r4, r5, lr}
 8008a26:	4d07      	ldr	r5, [pc, #28]	@ (8008a44 <_read_r+0x20>)
 8008a28:	4604      	mov	r4, r0
 8008a2a:	4608      	mov	r0, r1
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	2200      	movs	r2, #0
 8008a30:	602a      	str	r2, [r5, #0]
 8008a32:	461a      	mov	r2, r3
 8008a34:	f7f8 fb2e 	bl	8001094 <_read>
 8008a38:	1c43      	adds	r3, r0, #1
 8008a3a:	d102      	bne.n	8008a42 <_read_r+0x1e>
 8008a3c:	682b      	ldr	r3, [r5, #0]
 8008a3e:	b103      	cbz	r3, 8008a42 <_read_r+0x1e>
 8008a40:	6023      	str	r3, [r4, #0]
 8008a42:	bd38      	pop	{r3, r4, r5, pc}
 8008a44:	20000bb4 	.word	0x20000bb4

08008a48 <_write_r>:
 8008a48:	b538      	push	{r3, r4, r5, lr}
 8008a4a:	4d07      	ldr	r5, [pc, #28]	@ (8008a68 <_write_r+0x20>)
 8008a4c:	4604      	mov	r4, r0
 8008a4e:	4608      	mov	r0, r1
 8008a50:	4611      	mov	r1, r2
 8008a52:	2200      	movs	r2, #0
 8008a54:	602a      	str	r2, [r5, #0]
 8008a56:	461a      	mov	r2, r3
 8008a58:	f7f8 fb39 	bl	80010ce <_write>
 8008a5c:	1c43      	adds	r3, r0, #1
 8008a5e:	d102      	bne.n	8008a66 <_write_r+0x1e>
 8008a60:	682b      	ldr	r3, [r5, #0]
 8008a62:	b103      	cbz	r3, 8008a66 <_write_r+0x1e>
 8008a64:	6023      	str	r3, [r4, #0]
 8008a66:	bd38      	pop	{r3, r4, r5, pc}
 8008a68:	20000bb4 	.word	0x20000bb4

08008a6c <__errno>:
 8008a6c:	4b01      	ldr	r3, [pc, #4]	@ (8008a74 <__errno+0x8>)
 8008a6e:	6818      	ldr	r0, [r3, #0]
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	20000018 	.word	0x20000018

08008a78 <__libc_init_array>:
 8008a78:	b570      	push	{r4, r5, r6, lr}
 8008a7a:	4d0d      	ldr	r5, [pc, #52]	@ (8008ab0 <__libc_init_array+0x38>)
 8008a7c:	4c0d      	ldr	r4, [pc, #52]	@ (8008ab4 <__libc_init_array+0x3c>)
 8008a7e:	1b64      	subs	r4, r4, r5
 8008a80:	10a4      	asrs	r4, r4, #2
 8008a82:	2600      	movs	r6, #0
 8008a84:	42a6      	cmp	r6, r4
 8008a86:	d109      	bne.n	8008a9c <__libc_init_array+0x24>
 8008a88:	4d0b      	ldr	r5, [pc, #44]	@ (8008ab8 <__libc_init_array+0x40>)
 8008a8a:	4c0c      	ldr	r4, [pc, #48]	@ (8008abc <__libc_init_array+0x44>)
 8008a8c:	f000 fd24 	bl	80094d8 <_init>
 8008a90:	1b64      	subs	r4, r4, r5
 8008a92:	10a4      	asrs	r4, r4, #2
 8008a94:	2600      	movs	r6, #0
 8008a96:	42a6      	cmp	r6, r4
 8008a98:	d105      	bne.n	8008aa6 <__libc_init_array+0x2e>
 8008a9a:	bd70      	pop	{r4, r5, r6, pc}
 8008a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aa0:	4798      	blx	r3
 8008aa2:	3601      	adds	r6, #1
 8008aa4:	e7ee      	b.n	8008a84 <__libc_init_array+0xc>
 8008aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aaa:	4798      	blx	r3
 8008aac:	3601      	adds	r6, #1
 8008aae:	e7f2      	b.n	8008a96 <__libc_init_array+0x1e>
 8008ab0:	080099e0 	.word	0x080099e0
 8008ab4:	080099e0 	.word	0x080099e0
 8008ab8:	080099e0 	.word	0x080099e0
 8008abc:	080099e4 	.word	0x080099e4

08008ac0 <__retarget_lock_init_recursive>:
 8008ac0:	4770      	bx	lr

08008ac2 <__retarget_lock_acquire_recursive>:
 8008ac2:	4770      	bx	lr

08008ac4 <__retarget_lock_release_recursive>:
 8008ac4:	4770      	bx	lr
	...

08008ac8 <_free_r>:
 8008ac8:	b538      	push	{r3, r4, r5, lr}
 8008aca:	4605      	mov	r5, r0
 8008acc:	2900      	cmp	r1, #0
 8008ace:	d041      	beq.n	8008b54 <_free_r+0x8c>
 8008ad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ad4:	1f0c      	subs	r4, r1, #4
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	bfb8      	it	lt
 8008ada:	18e4      	addlt	r4, r4, r3
 8008adc:	f000 f8e0 	bl	8008ca0 <__malloc_lock>
 8008ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8008b58 <_free_r+0x90>)
 8008ae2:	6813      	ldr	r3, [r2, #0]
 8008ae4:	b933      	cbnz	r3, 8008af4 <_free_r+0x2c>
 8008ae6:	6063      	str	r3, [r4, #4]
 8008ae8:	6014      	str	r4, [r2, #0]
 8008aea:	4628      	mov	r0, r5
 8008aec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008af0:	f000 b8dc 	b.w	8008cac <__malloc_unlock>
 8008af4:	42a3      	cmp	r3, r4
 8008af6:	d908      	bls.n	8008b0a <_free_r+0x42>
 8008af8:	6820      	ldr	r0, [r4, #0]
 8008afa:	1821      	adds	r1, r4, r0
 8008afc:	428b      	cmp	r3, r1
 8008afe:	bf01      	itttt	eq
 8008b00:	6819      	ldreq	r1, [r3, #0]
 8008b02:	685b      	ldreq	r3, [r3, #4]
 8008b04:	1809      	addeq	r1, r1, r0
 8008b06:	6021      	streq	r1, [r4, #0]
 8008b08:	e7ed      	b.n	8008ae6 <_free_r+0x1e>
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	b10b      	cbz	r3, 8008b14 <_free_r+0x4c>
 8008b10:	42a3      	cmp	r3, r4
 8008b12:	d9fa      	bls.n	8008b0a <_free_r+0x42>
 8008b14:	6811      	ldr	r1, [r2, #0]
 8008b16:	1850      	adds	r0, r2, r1
 8008b18:	42a0      	cmp	r0, r4
 8008b1a:	d10b      	bne.n	8008b34 <_free_r+0x6c>
 8008b1c:	6820      	ldr	r0, [r4, #0]
 8008b1e:	4401      	add	r1, r0
 8008b20:	1850      	adds	r0, r2, r1
 8008b22:	4283      	cmp	r3, r0
 8008b24:	6011      	str	r1, [r2, #0]
 8008b26:	d1e0      	bne.n	8008aea <_free_r+0x22>
 8008b28:	6818      	ldr	r0, [r3, #0]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	6053      	str	r3, [r2, #4]
 8008b2e:	4408      	add	r0, r1
 8008b30:	6010      	str	r0, [r2, #0]
 8008b32:	e7da      	b.n	8008aea <_free_r+0x22>
 8008b34:	d902      	bls.n	8008b3c <_free_r+0x74>
 8008b36:	230c      	movs	r3, #12
 8008b38:	602b      	str	r3, [r5, #0]
 8008b3a:	e7d6      	b.n	8008aea <_free_r+0x22>
 8008b3c:	6820      	ldr	r0, [r4, #0]
 8008b3e:	1821      	adds	r1, r4, r0
 8008b40:	428b      	cmp	r3, r1
 8008b42:	bf04      	itt	eq
 8008b44:	6819      	ldreq	r1, [r3, #0]
 8008b46:	685b      	ldreq	r3, [r3, #4]
 8008b48:	6063      	str	r3, [r4, #4]
 8008b4a:	bf04      	itt	eq
 8008b4c:	1809      	addeq	r1, r1, r0
 8008b4e:	6021      	streq	r1, [r4, #0]
 8008b50:	6054      	str	r4, [r2, #4]
 8008b52:	e7ca      	b.n	8008aea <_free_r+0x22>
 8008b54:	bd38      	pop	{r3, r4, r5, pc}
 8008b56:	bf00      	nop
 8008b58:	20000bc0 	.word	0x20000bc0

08008b5c <sbrk_aligned>:
 8008b5c:	b570      	push	{r4, r5, r6, lr}
 8008b5e:	4e0f      	ldr	r6, [pc, #60]	@ (8008b9c <sbrk_aligned+0x40>)
 8008b60:	460c      	mov	r4, r1
 8008b62:	6831      	ldr	r1, [r6, #0]
 8008b64:	4605      	mov	r5, r0
 8008b66:	b911      	cbnz	r1, 8008b6e <sbrk_aligned+0x12>
 8008b68:	f000 fca6 	bl	80094b8 <_sbrk_r>
 8008b6c:	6030      	str	r0, [r6, #0]
 8008b6e:	4621      	mov	r1, r4
 8008b70:	4628      	mov	r0, r5
 8008b72:	f000 fca1 	bl	80094b8 <_sbrk_r>
 8008b76:	1c43      	adds	r3, r0, #1
 8008b78:	d103      	bne.n	8008b82 <sbrk_aligned+0x26>
 8008b7a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008b7e:	4620      	mov	r0, r4
 8008b80:	bd70      	pop	{r4, r5, r6, pc}
 8008b82:	1cc4      	adds	r4, r0, #3
 8008b84:	f024 0403 	bic.w	r4, r4, #3
 8008b88:	42a0      	cmp	r0, r4
 8008b8a:	d0f8      	beq.n	8008b7e <sbrk_aligned+0x22>
 8008b8c:	1a21      	subs	r1, r4, r0
 8008b8e:	4628      	mov	r0, r5
 8008b90:	f000 fc92 	bl	80094b8 <_sbrk_r>
 8008b94:	3001      	adds	r0, #1
 8008b96:	d1f2      	bne.n	8008b7e <sbrk_aligned+0x22>
 8008b98:	e7ef      	b.n	8008b7a <sbrk_aligned+0x1e>
 8008b9a:	bf00      	nop
 8008b9c:	20000bbc 	.word	0x20000bbc

08008ba0 <_malloc_r>:
 8008ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ba4:	1ccd      	adds	r5, r1, #3
 8008ba6:	f025 0503 	bic.w	r5, r5, #3
 8008baa:	3508      	adds	r5, #8
 8008bac:	2d0c      	cmp	r5, #12
 8008bae:	bf38      	it	cc
 8008bb0:	250c      	movcc	r5, #12
 8008bb2:	2d00      	cmp	r5, #0
 8008bb4:	4606      	mov	r6, r0
 8008bb6:	db01      	blt.n	8008bbc <_malloc_r+0x1c>
 8008bb8:	42a9      	cmp	r1, r5
 8008bba:	d904      	bls.n	8008bc6 <_malloc_r+0x26>
 8008bbc:	230c      	movs	r3, #12
 8008bbe:	6033      	str	r3, [r6, #0]
 8008bc0:	2000      	movs	r0, #0
 8008bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c9c <_malloc_r+0xfc>
 8008bca:	f000 f869 	bl	8008ca0 <__malloc_lock>
 8008bce:	f8d8 3000 	ldr.w	r3, [r8]
 8008bd2:	461c      	mov	r4, r3
 8008bd4:	bb44      	cbnz	r4, 8008c28 <_malloc_r+0x88>
 8008bd6:	4629      	mov	r1, r5
 8008bd8:	4630      	mov	r0, r6
 8008bda:	f7ff ffbf 	bl	8008b5c <sbrk_aligned>
 8008bde:	1c43      	adds	r3, r0, #1
 8008be0:	4604      	mov	r4, r0
 8008be2:	d158      	bne.n	8008c96 <_malloc_r+0xf6>
 8008be4:	f8d8 4000 	ldr.w	r4, [r8]
 8008be8:	4627      	mov	r7, r4
 8008bea:	2f00      	cmp	r7, #0
 8008bec:	d143      	bne.n	8008c76 <_malloc_r+0xd6>
 8008bee:	2c00      	cmp	r4, #0
 8008bf0:	d04b      	beq.n	8008c8a <_malloc_r+0xea>
 8008bf2:	6823      	ldr	r3, [r4, #0]
 8008bf4:	4639      	mov	r1, r7
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	eb04 0903 	add.w	r9, r4, r3
 8008bfc:	f000 fc5c 	bl	80094b8 <_sbrk_r>
 8008c00:	4581      	cmp	r9, r0
 8008c02:	d142      	bne.n	8008c8a <_malloc_r+0xea>
 8008c04:	6821      	ldr	r1, [r4, #0]
 8008c06:	1a6d      	subs	r5, r5, r1
 8008c08:	4629      	mov	r1, r5
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	f7ff ffa6 	bl	8008b5c <sbrk_aligned>
 8008c10:	3001      	adds	r0, #1
 8008c12:	d03a      	beq.n	8008c8a <_malloc_r+0xea>
 8008c14:	6823      	ldr	r3, [r4, #0]
 8008c16:	442b      	add	r3, r5
 8008c18:	6023      	str	r3, [r4, #0]
 8008c1a:	f8d8 3000 	ldr.w	r3, [r8]
 8008c1e:	685a      	ldr	r2, [r3, #4]
 8008c20:	bb62      	cbnz	r2, 8008c7c <_malloc_r+0xdc>
 8008c22:	f8c8 7000 	str.w	r7, [r8]
 8008c26:	e00f      	b.n	8008c48 <_malloc_r+0xa8>
 8008c28:	6822      	ldr	r2, [r4, #0]
 8008c2a:	1b52      	subs	r2, r2, r5
 8008c2c:	d420      	bmi.n	8008c70 <_malloc_r+0xd0>
 8008c2e:	2a0b      	cmp	r2, #11
 8008c30:	d917      	bls.n	8008c62 <_malloc_r+0xc2>
 8008c32:	1961      	adds	r1, r4, r5
 8008c34:	42a3      	cmp	r3, r4
 8008c36:	6025      	str	r5, [r4, #0]
 8008c38:	bf18      	it	ne
 8008c3a:	6059      	strne	r1, [r3, #4]
 8008c3c:	6863      	ldr	r3, [r4, #4]
 8008c3e:	bf08      	it	eq
 8008c40:	f8c8 1000 	streq.w	r1, [r8]
 8008c44:	5162      	str	r2, [r4, r5]
 8008c46:	604b      	str	r3, [r1, #4]
 8008c48:	4630      	mov	r0, r6
 8008c4a:	f000 f82f 	bl	8008cac <__malloc_unlock>
 8008c4e:	f104 000b 	add.w	r0, r4, #11
 8008c52:	1d23      	adds	r3, r4, #4
 8008c54:	f020 0007 	bic.w	r0, r0, #7
 8008c58:	1ac2      	subs	r2, r0, r3
 8008c5a:	bf1c      	itt	ne
 8008c5c:	1a1b      	subne	r3, r3, r0
 8008c5e:	50a3      	strne	r3, [r4, r2]
 8008c60:	e7af      	b.n	8008bc2 <_malloc_r+0x22>
 8008c62:	6862      	ldr	r2, [r4, #4]
 8008c64:	42a3      	cmp	r3, r4
 8008c66:	bf0c      	ite	eq
 8008c68:	f8c8 2000 	streq.w	r2, [r8]
 8008c6c:	605a      	strne	r2, [r3, #4]
 8008c6e:	e7eb      	b.n	8008c48 <_malloc_r+0xa8>
 8008c70:	4623      	mov	r3, r4
 8008c72:	6864      	ldr	r4, [r4, #4]
 8008c74:	e7ae      	b.n	8008bd4 <_malloc_r+0x34>
 8008c76:	463c      	mov	r4, r7
 8008c78:	687f      	ldr	r7, [r7, #4]
 8008c7a:	e7b6      	b.n	8008bea <_malloc_r+0x4a>
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	42a3      	cmp	r3, r4
 8008c82:	d1fb      	bne.n	8008c7c <_malloc_r+0xdc>
 8008c84:	2300      	movs	r3, #0
 8008c86:	6053      	str	r3, [r2, #4]
 8008c88:	e7de      	b.n	8008c48 <_malloc_r+0xa8>
 8008c8a:	230c      	movs	r3, #12
 8008c8c:	6033      	str	r3, [r6, #0]
 8008c8e:	4630      	mov	r0, r6
 8008c90:	f000 f80c 	bl	8008cac <__malloc_unlock>
 8008c94:	e794      	b.n	8008bc0 <_malloc_r+0x20>
 8008c96:	6005      	str	r5, [r0, #0]
 8008c98:	e7d6      	b.n	8008c48 <_malloc_r+0xa8>
 8008c9a:	bf00      	nop
 8008c9c:	20000bc0 	.word	0x20000bc0

08008ca0 <__malloc_lock>:
 8008ca0:	4801      	ldr	r0, [pc, #4]	@ (8008ca8 <__malloc_lock+0x8>)
 8008ca2:	f7ff bf0e 	b.w	8008ac2 <__retarget_lock_acquire_recursive>
 8008ca6:	bf00      	nop
 8008ca8:	20000bb8 	.word	0x20000bb8

08008cac <__malloc_unlock>:
 8008cac:	4801      	ldr	r0, [pc, #4]	@ (8008cb4 <__malloc_unlock+0x8>)
 8008cae:	f7ff bf09 	b.w	8008ac4 <__retarget_lock_release_recursive>
 8008cb2:	bf00      	nop
 8008cb4:	20000bb8 	.word	0x20000bb8

08008cb8 <__sfputc_r>:
 8008cb8:	6893      	ldr	r3, [r2, #8]
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	b410      	push	{r4}
 8008cc0:	6093      	str	r3, [r2, #8]
 8008cc2:	da08      	bge.n	8008cd6 <__sfputc_r+0x1e>
 8008cc4:	6994      	ldr	r4, [r2, #24]
 8008cc6:	42a3      	cmp	r3, r4
 8008cc8:	db01      	blt.n	8008cce <__sfputc_r+0x16>
 8008cca:	290a      	cmp	r1, #10
 8008ccc:	d103      	bne.n	8008cd6 <__sfputc_r+0x1e>
 8008cce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cd2:	f7ff bde8 	b.w	80088a6 <__swbuf_r>
 8008cd6:	6813      	ldr	r3, [r2, #0]
 8008cd8:	1c58      	adds	r0, r3, #1
 8008cda:	6010      	str	r0, [r2, #0]
 8008cdc:	7019      	strb	r1, [r3, #0]
 8008cde:	4608      	mov	r0, r1
 8008ce0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ce4:	4770      	bx	lr

08008ce6 <__sfputs_r>:
 8008ce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce8:	4606      	mov	r6, r0
 8008cea:	460f      	mov	r7, r1
 8008cec:	4614      	mov	r4, r2
 8008cee:	18d5      	adds	r5, r2, r3
 8008cf0:	42ac      	cmp	r4, r5
 8008cf2:	d101      	bne.n	8008cf8 <__sfputs_r+0x12>
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	e007      	b.n	8008d08 <__sfputs_r+0x22>
 8008cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cfc:	463a      	mov	r2, r7
 8008cfe:	4630      	mov	r0, r6
 8008d00:	f7ff ffda 	bl	8008cb8 <__sfputc_r>
 8008d04:	1c43      	adds	r3, r0, #1
 8008d06:	d1f3      	bne.n	8008cf0 <__sfputs_r+0xa>
 8008d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d0c <_vfiprintf_r>:
 8008d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d10:	460d      	mov	r5, r1
 8008d12:	b09d      	sub	sp, #116	@ 0x74
 8008d14:	4614      	mov	r4, r2
 8008d16:	4698      	mov	r8, r3
 8008d18:	4606      	mov	r6, r0
 8008d1a:	b118      	cbz	r0, 8008d24 <_vfiprintf_r+0x18>
 8008d1c:	6a03      	ldr	r3, [r0, #32]
 8008d1e:	b90b      	cbnz	r3, 8008d24 <_vfiprintf_r+0x18>
 8008d20:	f7ff fcd8 	bl	80086d4 <__sinit>
 8008d24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d26:	07d9      	lsls	r1, r3, #31
 8008d28:	d405      	bmi.n	8008d36 <_vfiprintf_r+0x2a>
 8008d2a:	89ab      	ldrh	r3, [r5, #12]
 8008d2c:	059a      	lsls	r2, r3, #22
 8008d2e:	d402      	bmi.n	8008d36 <_vfiprintf_r+0x2a>
 8008d30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d32:	f7ff fec6 	bl	8008ac2 <__retarget_lock_acquire_recursive>
 8008d36:	89ab      	ldrh	r3, [r5, #12]
 8008d38:	071b      	lsls	r3, r3, #28
 8008d3a:	d501      	bpl.n	8008d40 <_vfiprintf_r+0x34>
 8008d3c:	692b      	ldr	r3, [r5, #16]
 8008d3e:	b99b      	cbnz	r3, 8008d68 <_vfiprintf_r+0x5c>
 8008d40:	4629      	mov	r1, r5
 8008d42:	4630      	mov	r0, r6
 8008d44:	f7ff fdee 	bl	8008924 <__swsetup_r>
 8008d48:	b170      	cbz	r0, 8008d68 <_vfiprintf_r+0x5c>
 8008d4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d4c:	07dc      	lsls	r4, r3, #31
 8008d4e:	d504      	bpl.n	8008d5a <_vfiprintf_r+0x4e>
 8008d50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d54:	b01d      	add	sp, #116	@ 0x74
 8008d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d5a:	89ab      	ldrh	r3, [r5, #12]
 8008d5c:	0598      	lsls	r0, r3, #22
 8008d5e:	d4f7      	bmi.n	8008d50 <_vfiprintf_r+0x44>
 8008d60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d62:	f7ff feaf 	bl	8008ac4 <__retarget_lock_release_recursive>
 8008d66:	e7f3      	b.n	8008d50 <_vfiprintf_r+0x44>
 8008d68:	2300      	movs	r3, #0
 8008d6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d6c:	2320      	movs	r3, #32
 8008d6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d72:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d76:	2330      	movs	r3, #48	@ 0x30
 8008d78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008f28 <_vfiprintf_r+0x21c>
 8008d7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d80:	f04f 0901 	mov.w	r9, #1
 8008d84:	4623      	mov	r3, r4
 8008d86:	469a      	mov	sl, r3
 8008d88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d8c:	b10a      	cbz	r2, 8008d92 <_vfiprintf_r+0x86>
 8008d8e:	2a25      	cmp	r2, #37	@ 0x25
 8008d90:	d1f9      	bne.n	8008d86 <_vfiprintf_r+0x7a>
 8008d92:	ebba 0b04 	subs.w	fp, sl, r4
 8008d96:	d00b      	beq.n	8008db0 <_vfiprintf_r+0xa4>
 8008d98:	465b      	mov	r3, fp
 8008d9a:	4622      	mov	r2, r4
 8008d9c:	4629      	mov	r1, r5
 8008d9e:	4630      	mov	r0, r6
 8008da0:	f7ff ffa1 	bl	8008ce6 <__sfputs_r>
 8008da4:	3001      	adds	r0, #1
 8008da6:	f000 80a7 	beq.w	8008ef8 <_vfiprintf_r+0x1ec>
 8008daa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008dac:	445a      	add	r2, fp
 8008dae:	9209      	str	r2, [sp, #36]	@ 0x24
 8008db0:	f89a 3000 	ldrb.w	r3, [sl]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f000 809f 	beq.w	8008ef8 <_vfiprintf_r+0x1ec>
 8008dba:	2300      	movs	r3, #0
 8008dbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008dc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dc4:	f10a 0a01 	add.w	sl, sl, #1
 8008dc8:	9304      	str	r3, [sp, #16]
 8008dca:	9307      	str	r3, [sp, #28]
 8008dcc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008dd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8008dd2:	4654      	mov	r4, sl
 8008dd4:	2205      	movs	r2, #5
 8008dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dda:	4853      	ldr	r0, [pc, #332]	@ (8008f28 <_vfiprintf_r+0x21c>)
 8008ddc:	f7f7 f9f8 	bl	80001d0 <memchr>
 8008de0:	9a04      	ldr	r2, [sp, #16]
 8008de2:	b9d8      	cbnz	r0, 8008e1c <_vfiprintf_r+0x110>
 8008de4:	06d1      	lsls	r1, r2, #27
 8008de6:	bf44      	itt	mi
 8008de8:	2320      	movmi	r3, #32
 8008dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dee:	0713      	lsls	r3, r2, #28
 8008df0:	bf44      	itt	mi
 8008df2:	232b      	movmi	r3, #43	@ 0x2b
 8008df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008df8:	f89a 3000 	ldrb.w	r3, [sl]
 8008dfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dfe:	d015      	beq.n	8008e2c <_vfiprintf_r+0x120>
 8008e00:	9a07      	ldr	r2, [sp, #28]
 8008e02:	4654      	mov	r4, sl
 8008e04:	2000      	movs	r0, #0
 8008e06:	f04f 0c0a 	mov.w	ip, #10
 8008e0a:	4621      	mov	r1, r4
 8008e0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e10:	3b30      	subs	r3, #48	@ 0x30
 8008e12:	2b09      	cmp	r3, #9
 8008e14:	d94b      	bls.n	8008eae <_vfiprintf_r+0x1a2>
 8008e16:	b1b0      	cbz	r0, 8008e46 <_vfiprintf_r+0x13a>
 8008e18:	9207      	str	r2, [sp, #28]
 8008e1a:	e014      	b.n	8008e46 <_vfiprintf_r+0x13a>
 8008e1c:	eba0 0308 	sub.w	r3, r0, r8
 8008e20:	fa09 f303 	lsl.w	r3, r9, r3
 8008e24:	4313      	orrs	r3, r2
 8008e26:	9304      	str	r3, [sp, #16]
 8008e28:	46a2      	mov	sl, r4
 8008e2a:	e7d2      	b.n	8008dd2 <_vfiprintf_r+0xc6>
 8008e2c:	9b03      	ldr	r3, [sp, #12]
 8008e2e:	1d19      	adds	r1, r3, #4
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	9103      	str	r1, [sp, #12]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	bfbb      	ittet	lt
 8008e38:	425b      	neglt	r3, r3
 8008e3a:	f042 0202 	orrlt.w	r2, r2, #2
 8008e3e:	9307      	strge	r3, [sp, #28]
 8008e40:	9307      	strlt	r3, [sp, #28]
 8008e42:	bfb8      	it	lt
 8008e44:	9204      	strlt	r2, [sp, #16]
 8008e46:	7823      	ldrb	r3, [r4, #0]
 8008e48:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e4a:	d10a      	bne.n	8008e62 <_vfiprintf_r+0x156>
 8008e4c:	7863      	ldrb	r3, [r4, #1]
 8008e4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e50:	d132      	bne.n	8008eb8 <_vfiprintf_r+0x1ac>
 8008e52:	9b03      	ldr	r3, [sp, #12]
 8008e54:	1d1a      	adds	r2, r3, #4
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	9203      	str	r2, [sp, #12]
 8008e5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e5e:	3402      	adds	r4, #2
 8008e60:	9305      	str	r3, [sp, #20]
 8008e62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008f38 <_vfiprintf_r+0x22c>
 8008e66:	7821      	ldrb	r1, [r4, #0]
 8008e68:	2203      	movs	r2, #3
 8008e6a:	4650      	mov	r0, sl
 8008e6c:	f7f7 f9b0 	bl	80001d0 <memchr>
 8008e70:	b138      	cbz	r0, 8008e82 <_vfiprintf_r+0x176>
 8008e72:	9b04      	ldr	r3, [sp, #16]
 8008e74:	eba0 000a 	sub.w	r0, r0, sl
 8008e78:	2240      	movs	r2, #64	@ 0x40
 8008e7a:	4082      	lsls	r2, r0
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	3401      	adds	r4, #1
 8008e80:	9304      	str	r3, [sp, #16]
 8008e82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e86:	4829      	ldr	r0, [pc, #164]	@ (8008f2c <_vfiprintf_r+0x220>)
 8008e88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e8c:	2206      	movs	r2, #6
 8008e8e:	f7f7 f99f 	bl	80001d0 <memchr>
 8008e92:	2800      	cmp	r0, #0
 8008e94:	d03f      	beq.n	8008f16 <_vfiprintf_r+0x20a>
 8008e96:	4b26      	ldr	r3, [pc, #152]	@ (8008f30 <_vfiprintf_r+0x224>)
 8008e98:	bb1b      	cbnz	r3, 8008ee2 <_vfiprintf_r+0x1d6>
 8008e9a:	9b03      	ldr	r3, [sp, #12]
 8008e9c:	3307      	adds	r3, #7
 8008e9e:	f023 0307 	bic.w	r3, r3, #7
 8008ea2:	3308      	adds	r3, #8
 8008ea4:	9303      	str	r3, [sp, #12]
 8008ea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ea8:	443b      	add	r3, r7
 8008eaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8008eac:	e76a      	b.n	8008d84 <_vfiprintf_r+0x78>
 8008eae:	fb0c 3202 	mla	r2, ip, r2, r3
 8008eb2:	460c      	mov	r4, r1
 8008eb4:	2001      	movs	r0, #1
 8008eb6:	e7a8      	b.n	8008e0a <_vfiprintf_r+0xfe>
 8008eb8:	2300      	movs	r3, #0
 8008eba:	3401      	adds	r4, #1
 8008ebc:	9305      	str	r3, [sp, #20]
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	f04f 0c0a 	mov.w	ip, #10
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008eca:	3a30      	subs	r2, #48	@ 0x30
 8008ecc:	2a09      	cmp	r2, #9
 8008ece:	d903      	bls.n	8008ed8 <_vfiprintf_r+0x1cc>
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d0c6      	beq.n	8008e62 <_vfiprintf_r+0x156>
 8008ed4:	9105      	str	r1, [sp, #20]
 8008ed6:	e7c4      	b.n	8008e62 <_vfiprintf_r+0x156>
 8008ed8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008edc:	4604      	mov	r4, r0
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e7f0      	b.n	8008ec4 <_vfiprintf_r+0x1b8>
 8008ee2:	ab03      	add	r3, sp, #12
 8008ee4:	9300      	str	r3, [sp, #0]
 8008ee6:	462a      	mov	r2, r5
 8008ee8:	4b12      	ldr	r3, [pc, #72]	@ (8008f34 <_vfiprintf_r+0x228>)
 8008eea:	a904      	add	r1, sp, #16
 8008eec:	4630      	mov	r0, r6
 8008eee:	f3af 8000 	nop.w
 8008ef2:	4607      	mov	r7, r0
 8008ef4:	1c78      	adds	r0, r7, #1
 8008ef6:	d1d6      	bne.n	8008ea6 <_vfiprintf_r+0x19a>
 8008ef8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008efa:	07d9      	lsls	r1, r3, #31
 8008efc:	d405      	bmi.n	8008f0a <_vfiprintf_r+0x1fe>
 8008efe:	89ab      	ldrh	r3, [r5, #12]
 8008f00:	059a      	lsls	r2, r3, #22
 8008f02:	d402      	bmi.n	8008f0a <_vfiprintf_r+0x1fe>
 8008f04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f06:	f7ff fddd 	bl	8008ac4 <__retarget_lock_release_recursive>
 8008f0a:	89ab      	ldrh	r3, [r5, #12]
 8008f0c:	065b      	lsls	r3, r3, #25
 8008f0e:	f53f af1f 	bmi.w	8008d50 <_vfiprintf_r+0x44>
 8008f12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f14:	e71e      	b.n	8008d54 <_vfiprintf_r+0x48>
 8008f16:	ab03      	add	r3, sp, #12
 8008f18:	9300      	str	r3, [sp, #0]
 8008f1a:	462a      	mov	r2, r5
 8008f1c:	4b05      	ldr	r3, [pc, #20]	@ (8008f34 <_vfiprintf_r+0x228>)
 8008f1e:	a904      	add	r1, sp, #16
 8008f20:	4630      	mov	r0, r6
 8008f22:	f000 f879 	bl	8009018 <_printf_i>
 8008f26:	e7e4      	b.n	8008ef2 <_vfiprintf_r+0x1e6>
 8008f28:	080099a4 	.word	0x080099a4
 8008f2c:	080099ae 	.word	0x080099ae
 8008f30:	00000000 	.word	0x00000000
 8008f34:	08008ce7 	.word	0x08008ce7
 8008f38:	080099aa 	.word	0x080099aa

08008f3c <_printf_common>:
 8008f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f40:	4616      	mov	r6, r2
 8008f42:	4698      	mov	r8, r3
 8008f44:	688a      	ldr	r2, [r1, #8]
 8008f46:	690b      	ldr	r3, [r1, #16]
 8008f48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	bfb8      	it	lt
 8008f50:	4613      	movlt	r3, r2
 8008f52:	6033      	str	r3, [r6, #0]
 8008f54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008f58:	4607      	mov	r7, r0
 8008f5a:	460c      	mov	r4, r1
 8008f5c:	b10a      	cbz	r2, 8008f62 <_printf_common+0x26>
 8008f5e:	3301      	adds	r3, #1
 8008f60:	6033      	str	r3, [r6, #0]
 8008f62:	6823      	ldr	r3, [r4, #0]
 8008f64:	0699      	lsls	r1, r3, #26
 8008f66:	bf42      	ittt	mi
 8008f68:	6833      	ldrmi	r3, [r6, #0]
 8008f6a:	3302      	addmi	r3, #2
 8008f6c:	6033      	strmi	r3, [r6, #0]
 8008f6e:	6825      	ldr	r5, [r4, #0]
 8008f70:	f015 0506 	ands.w	r5, r5, #6
 8008f74:	d106      	bne.n	8008f84 <_printf_common+0x48>
 8008f76:	f104 0a19 	add.w	sl, r4, #25
 8008f7a:	68e3      	ldr	r3, [r4, #12]
 8008f7c:	6832      	ldr	r2, [r6, #0]
 8008f7e:	1a9b      	subs	r3, r3, r2
 8008f80:	42ab      	cmp	r3, r5
 8008f82:	dc26      	bgt.n	8008fd2 <_printf_common+0x96>
 8008f84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008f88:	6822      	ldr	r2, [r4, #0]
 8008f8a:	3b00      	subs	r3, #0
 8008f8c:	bf18      	it	ne
 8008f8e:	2301      	movne	r3, #1
 8008f90:	0692      	lsls	r2, r2, #26
 8008f92:	d42b      	bmi.n	8008fec <_printf_common+0xb0>
 8008f94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f98:	4641      	mov	r1, r8
 8008f9a:	4638      	mov	r0, r7
 8008f9c:	47c8      	blx	r9
 8008f9e:	3001      	adds	r0, #1
 8008fa0:	d01e      	beq.n	8008fe0 <_printf_common+0xa4>
 8008fa2:	6823      	ldr	r3, [r4, #0]
 8008fa4:	6922      	ldr	r2, [r4, #16]
 8008fa6:	f003 0306 	and.w	r3, r3, #6
 8008faa:	2b04      	cmp	r3, #4
 8008fac:	bf02      	ittt	eq
 8008fae:	68e5      	ldreq	r5, [r4, #12]
 8008fb0:	6833      	ldreq	r3, [r6, #0]
 8008fb2:	1aed      	subeq	r5, r5, r3
 8008fb4:	68a3      	ldr	r3, [r4, #8]
 8008fb6:	bf0c      	ite	eq
 8008fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fbc:	2500      	movne	r5, #0
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	bfc4      	itt	gt
 8008fc2:	1a9b      	subgt	r3, r3, r2
 8008fc4:	18ed      	addgt	r5, r5, r3
 8008fc6:	2600      	movs	r6, #0
 8008fc8:	341a      	adds	r4, #26
 8008fca:	42b5      	cmp	r5, r6
 8008fcc:	d11a      	bne.n	8009004 <_printf_common+0xc8>
 8008fce:	2000      	movs	r0, #0
 8008fd0:	e008      	b.n	8008fe4 <_printf_common+0xa8>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	4652      	mov	r2, sl
 8008fd6:	4641      	mov	r1, r8
 8008fd8:	4638      	mov	r0, r7
 8008fda:	47c8      	blx	r9
 8008fdc:	3001      	adds	r0, #1
 8008fde:	d103      	bne.n	8008fe8 <_printf_common+0xac>
 8008fe0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe8:	3501      	adds	r5, #1
 8008fea:	e7c6      	b.n	8008f7a <_printf_common+0x3e>
 8008fec:	18e1      	adds	r1, r4, r3
 8008fee:	1c5a      	adds	r2, r3, #1
 8008ff0:	2030      	movs	r0, #48	@ 0x30
 8008ff2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008ff6:	4422      	add	r2, r4
 8008ff8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ffc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009000:	3302      	adds	r3, #2
 8009002:	e7c7      	b.n	8008f94 <_printf_common+0x58>
 8009004:	2301      	movs	r3, #1
 8009006:	4622      	mov	r2, r4
 8009008:	4641      	mov	r1, r8
 800900a:	4638      	mov	r0, r7
 800900c:	47c8      	blx	r9
 800900e:	3001      	adds	r0, #1
 8009010:	d0e6      	beq.n	8008fe0 <_printf_common+0xa4>
 8009012:	3601      	adds	r6, #1
 8009014:	e7d9      	b.n	8008fca <_printf_common+0x8e>
	...

08009018 <_printf_i>:
 8009018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800901c:	7e0f      	ldrb	r7, [r1, #24]
 800901e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009020:	2f78      	cmp	r7, #120	@ 0x78
 8009022:	4691      	mov	r9, r2
 8009024:	4680      	mov	r8, r0
 8009026:	460c      	mov	r4, r1
 8009028:	469a      	mov	sl, r3
 800902a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800902e:	d807      	bhi.n	8009040 <_printf_i+0x28>
 8009030:	2f62      	cmp	r7, #98	@ 0x62
 8009032:	d80a      	bhi.n	800904a <_printf_i+0x32>
 8009034:	2f00      	cmp	r7, #0
 8009036:	f000 80d2 	beq.w	80091de <_printf_i+0x1c6>
 800903a:	2f58      	cmp	r7, #88	@ 0x58
 800903c:	f000 80b9 	beq.w	80091b2 <_printf_i+0x19a>
 8009040:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009044:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009048:	e03a      	b.n	80090c0 <_printf_i+0xa8>
 800904a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800904e:	2b15      	cmp	r3, #21
 8009050:	d8f6      	bhi.n	8009040 <_printf_i+0x28>
 8009052:	a101      	add	r1, pc, #4	@ (adr r1, 8009058 <_printf_i+0x40>)
 8009054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009058:	080090b1 	.word	0x080090b1
 800905c:	080090c5 	.word	0x080090c5
 8009060:	08009041 	.word	0x08009041
 8009064:	08009041 	.word	0x08009041
 8009068:	08009041 	.word	0x08009041
 800906c:	08009041 	.word	0x08009041
 8009070:	080090c5 	.word	0x080090c5
 8009074:	08009041 	.word	0x08009041
 8009078:	08009041 	.word	0x08009041
 800907c:	08009041 	.word	0x08009041
 8009080:	08009041 	.word	0x08009041
 8009084:	080091c5 	.word	0x080091c5
 8009088:	080090ef 	.word	0x080090ef
 800908c:	0800917f 	.word	0x0800917f
 8009090:	08009041 	.word	0x08009041
 8009094:	08009041 	.word	0x08009041
 8009098:	080091e7 	.word	0x080091e7
 800909c:	08009041 	.word	0x08009041
 80090a0:	080090ef 	.word	0x080090ef
 80090a4:	08009041 	.word	0x08009041
 80090a8:	08009041 	.word	0x08009041
 80090ac:	08009187 	.word	0x08009187
 80090b0:	6833      	ldr	r3, [r6, #0]
 80090b2:	1d1a      	adds	r2, r3, #4
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	6032      	str	r2, [r6, #0]
 80090b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80090c0:	2301      	movs	r3, #1
 80090c2:	e09d      	b.n	8009200 <_printf_i+0x1e8>
 80090c4:	6833      	ldr	r3, [r6, #0]
 80090c6:	6820      	ldr	r0, [r4, #0]
 80090c8:	1d19      	adds	r1, r3, #4
 80090ca:	6031      	str	r1, [r6, #0]
 80090cc:	0606      	lsls	r6, r0, #24
 80090ce:	d501      	bpl.n	80090d4 <_printf_i+0xbc>
 80090d0:	681d      	ldr	r5, [r3, #0]
 80090d2:	e003      	b.n	80090dc <_printf_i+0xc4>
 80090d4:	0645      	lsls	r5, r0, #25
 80090d6:	d5fb      	bpl.n	80090d0 <_printf_i+0xb8>
 80090d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80090dc:	2d00      	cmp	r5, #0
 80090de:	da03      	bge.n	80090e8 <_printf_i+0xd0>
 80090e0:	232d      	movs	r3, #45	@ 0x2d
 80090e2:	426d      	negs	r5, r5
 80090e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090e8:	4859      	ldr	r0, [pc, #356]	@ (8009250 <_printf_i+0x238>)
 80090ea:	230a      	movs	r3, #10
 80090ec:	e011      	b.n	8009112 <_printf_i+0xfa>
 80090ee:	6821      	ldr	r1, [r4, #0]
 80090f0:	6833      	ldr	r3, [r6, #0]
 80090f2:	0608      	lsls	r0, r1, #24
 80090f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80090f8:	d402      	bmi.n	8009100 <_printf_i+0xe8>
 80090fa:	0649      	lsls	r1, r1, #25
 80090fc:	bf48      	it	mi
 80090fe:	b2ad      	uxthmi	r5, r5
 8009100:	2f6f      	cmp	r7, #111	@ 0x6f
 8009102:	4853      	ldr	r0, [pc, #332]	@ (8009250 <_printf_i+0x238>)
 8009104:	6033      	str	r3, [r6, #0]
 8009106:	bf14      	ite	ne
 8009108:	230a      	movne	r3, #10
 800910a:	2308      	moveq	r3, #8
 800910c:	2100      	movs	r1, #0
 800910e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009112:	6866      	ldr	r6, [r4, #4]
 8009114:	60a6      	str	r6, [r4, #8]
 8009116:	2e00      	cmp	r6, #0
 8009118:	bfa2      	ittt	ge
 800911a:	6821      	ldrge	r1, [r4, #0]
 800911c:	f021 0104 	bicge.w	r1, r1, #4
 8009120:	6021      	strge	r1, [r4, #0]
 8009122:	b90d      	cbnz	r5, 8009128 <_printf_i+0x110>
 8009124:	2e00      	cmp	r6, #0
 8009126:	d04b      	beq.n	80091c0 <_printf_i+0x1a8>
 8009128:	4616      	mov	r6, r2
 800912a:	fbb5 f1f3 	udiv	r1, r5, r3
 800912e:	fb03 5711 	mls	r7, r3, r1, r5
 8009132:	5dc7      	ldrb	r7, [r0, r7]
 8009134:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009138:	462f      	mov	r7, r5
 800913a:	42bb      	cmp	r3, r7
 800913c:	460d      	mov	r5, r1
 800913e:	d9f4      	bls.n	800912a <_printf_i+0x112>
 8009140:	2b08      	cmp	r3, #8
 8009142:	d10b      	bne.n	800915c <_printf_i+0x144>
 8009144:	6823      	ldr	r3, [r4, #0]
 8009146:	07df      	lsls	r7, r3, #31
 8009148:	d508      	bpl.n	800915c <_printf_i+0x144>
 800914a:	6923      	ldr	r3, [r4, #16]
 800914c:	6861      	ldr	r1, [r4, #4]
 800914e:	4299      	cmp	r1, r3
 8009150:	bfde      	ittt	le
 8009152:	2330      	movle	r3, #48	@ 0x30
 8009154:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009158:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800915c:	1b92      	subs	r2, r2, r6
 800915e:	6122      	str	r2, [r4, #16]
 8009160:	f8cd a000 	str.w	sl, [sp]
 8009164:	464b      	mov	r3, r9
 8009166:	aa03      	add	r2, sp, #12
 8009168:	4621      	mov	r1, r4
 800916a:	4640      	mov	r0, r8
 800916c:	f7ff fee6 	bl	8008f3c <_printf_common>
 8009170:	3001      	adds	r0, #1
 8009172:	d14a      	bne.n	800920a <_printf_i+0x1f2>
 8009174:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009178:	b004      	add	sp, #16
 800917a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800917e:	6823      	ldr	r3, [r4, #0]
 8009180:	f043 0320 	orr.w	r3, r3, #32
 8009184:	6023      	str	r3, [r4, #0]
 8009186:	4833      	ldr	r0, [pc, #204]	@ (8009254 <_printf_i+0x23c>)
 8009188:	2778      	movs	r7, #120	@ 0x78
 800918a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800918e:	6823      	ldr	r3, [r4, #0]
 8009190:	6831      	ldr	r1, [r6, #0]
 8009192:	061f      	lsls	r7, r3, #24
 8009194:	f851 5b04 	ldr.w	r5, [r1], #4
 8009198:	d402      	bmi.n	80091a0 <_printf_i+0x188>
 800919a:	065f      	lsls	r7, r3, #25
 800919c:	bf48      	it	mi
 800919e:	b2ad      	uxthmi	r5, r5
 80091a0:	6031      	str	r1, [r6, #0]
 80091a2:	07d9      	lsls	r1, r3, #31
 80091a4:	bf44      	itt	mi
 80091a6:	f043 0320 	orrmi.w	r3, r3, #32
 80091aa:	6023      	strmi	r3, [r4, #0]
 80091ac:	b11d      	cbz	r5, 80091b6 <_printf_i+0x19e>
 80091ae:	2310      	movs	r3, #16
 80091b0:	e7ac      	b.n	800910c <_printf_i+0xf4>
 80091b2:	4827      	ldr	r0, [pc, #156]	@ (8009250 <_printf_i+0x238>)
 80091b4:	e7e9      	b.n	800918a <_printf_i+0x172>
 80091b6:	6823      	ldr	r3, [r4, #0]
 80091b8:	f023 0320 	bic.w	r3, r3, #32
 80091bc:	6023      	str	r3, [r4, #0]
 80091be:	e7f6      	b.n	80091ae <_printf_i+0x196>
 80091c0:	4616      	mov	r6, r2
 80091c2:	e7bd      	b.n	8009140 <_printf_i+0x128>
 80091c4:	6833      	ldr	r3, [r6, #0]
 80091c6:	6825      	ldr	r5, [r4, #0]
 80091c8:	6961      	ldr	r1, [r4, #20]
 80091ca:	1d18      	adds	r0, r3, #4
 80091cc:	6030      	str	r0, [r6, #0]
 80091ce:	062e      	lsls	r6, r5, #24
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	d501      	bpl.n	80091d8 <_printf_i+0x1c0>
 80091d4:	6019      	str	r1, [r3, #0]
 80091d6:	e002      	b.n	80091de <_printf_i+0x1c6>
 80091d8:	0668      	lsls	r0, r5, #25
 80091da:	d5fb      	bpl.n	80091d4 <_printf_i+0x1bc>
 80091dc:	8019      	strh	r1, [r3, #0]
 80091de:	2300      	movs	r3, #0
 80091e0:	6123      	str	r3, [r4, #16]
 80091e2:	4616      	mov	r6, r2
 80091e4:	e7bc      	b.n	8009160 <_printf_i+0x148>
 80091e6:	6833      	ldr	r3, [r6, #0]
 80091e8:	1d1a      	adds	r2, r3, #4
 80091ea:	6032      	str	r2, [r6, #0]
 80091ec:	681e      	ldr	r6, [r3, #0]
 80091ee:	6862      	ldr	r2, [r4, #4]
 80091f0:	2100      	movs	r1, #0
 80091f2:	4630      	mov	r0, r6
 80091f4:	f7f6 ffec 	bl	80001d0 <memchr>
 80091f8:	b108      	cbz	r0, 80091fe <_printf_i+0x1e6>
 80091fa:	1b80      	subs	r0, r0, r6
 80091fc:	6060      	str	r0, [r4, #4]
 80091fe:	6863      	ldr	r3, [r4, #4]
 8009200:	6123      	str	r3, [r4, #16]
 8009202:	2300      	movs	r3, #0
 8009204:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009208:	e7aa      	b.n	8009160 <_printf_i+0x148>
 800920a:	6923      	ldr	r3, [r4, #16]
 800920c:	4632      	mov	r2, r6
 800920e:	4649      	mov	r1, r9
 8009210:	4640      	mov	r0, r8
 8009212:	47d0      	blx	sl
 8009214:	3001      	adds	r0, #1
 8009216:	d0ad      	beq.n	8009174 <_printf_i+0x15c>
 8009218:	6823      	ldr	r3, [r4, #0]
 800921a:	079b      	lsls	r3, r3, #30
 800921c:	d413      	bmi.n	8009246 <_printf_i+0x22e>
 800921e:	68e0      	ldr	r0, [r4, #12]
 8009220:	9b03      	ldr	r3, [sp, #12]
 8009222:	4298      	cmp	r0, r3
 8009224:	bfb8      	it	lt
 8009226:	4618      	movlt	r0, r3
 8009228:	e7a6      	b.n	8009178 <_printf_i+0x160>
 800922a:	2301      	movs	r3, #1
 800922c:	4632      	mov	r2, r6
 800922e:	4649      	mov	r1, r9
 8009230:	4640      	mov	r0, r8
 8009232:	47d0      	blx	sl
 8009234:	3001      	adds	r0, #1
 8009236:	d09d      	beq.n	8009174 <_printf_i+0x15c>
 8009238:	3501      	adds	r5, #1
 800923a:	68e3      	ldr	r3, [r4, #12]
 800923c:	9903      	ldr	r1, [sp, #12]
 800923e:	1a5b      	subs	r3, r3, r1
 8009240:	42ab      	cmp	r3, r5
 8009242:	dcf2      	bgt.n	800922a <_printf_i+0x212>
 8009244:	e7eb      	b.n	800921e <_printf_i+0x206>
 8009246:	2500      	movs	r5, #0
 8009248:	f104 0619 	add.w	r6, r4, #25
 800924c:	e7f5      	b.n	800923a <_printf_i+0x222>
 800924e:	bf00      	nop
 8009250:	080099b5 	.word	0x080099b5
 8009254:	080099c6 	.word	0x080099c6

08009258 <__sflush_r>:
 8009258:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800925c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009260:	0716      	lsls	r6, r2, #28
 8009262:	4605      	mov	r5, r0
 8009264:	460c      	mov	r4, r1
 8009266:	d454      	bmi.n	8009312 <__sflush_r+0xba>
 8009268:	684b      	ldr	r3, [r1, #4]
 800926a:	2b00      	cmp	r3, #0
 800926c:	dc02      	bgt.n	8009274 <__sflush_r+0x1c>
 800926e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009270:	2b00      	cmp	r3, #0
 8009272:	dd48      	ble.n	8009306 <__sflush_r+0xae>
 8009274:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009276:	2e00      	cmp	r6, #0
 8009278:	d045      	beq.n	8009306 <__sflush_r+0xae>
 800927a:	2300      	movs	r3, #0
 800927c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009280:	682f      	ldr	r7, [r5, #0]
 8009282:	6a21      	ldr	r1, [r4, #32]
 8009284:	602b      	str	r3, [r5, #0]
 8009286:	d030      	beq.n	80092ea <__sflush_r+0x92>
 8009288:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800928a:	89a3      	ldrh	r3, [r4, #12]
 800928c:	0759      	lsls	r1, r3, #29
 800928e:	d505      	bpl.n	800929c <__sflush_r+0x44>
 8009290:	6863      	ldr	r3, [r4, #4]
 8009292:	1ad2      	subs	r2, r2, r3
 8009294:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009296:	b10b      	cbz	r3, 800929c <__sflush_r+0x44>
 8009298:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800929a:	1ad2      	subs	r2, r2, r3
 800929c:	2300      	movs	r3, #0
 800929e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80092a0:	6a21      	ldr	r1, [r4, #32]
 80092a2:	4628      	mov	r0, r5
 80092a4:	47b0      	blx	r6
 80092a6:	1c43      	adds	r3, r0, #1
 80092a8:	89a3      	ldrh	r3, [r4, #12]
 80092aa:	d106      	bne.n	80092ba <__sflush_r+0x62>
 80092ac:	6829      	ldr	r1, [r5, #0]
 80092ae:	291d      	cmp	r1, #29
 80092b0:	d82b      	bhi.n	800930a <__sflush_r+0xb2>
 80092b2:	4a2a      	ldr	r2, [pc, #168]	@ (800935c <__sflush_r+0x104>)
 80092b4:	410a      	asrs	r2, r1
 80092b6:	07d6      	lsls	r6, r2, #31
 80092b8:	d427      	bmi.n	800930a <__sflush_r+0xb2>
 80092ba:	2200      	movs	r2, #0
 80092bc:	6062      	str	r2, [r4, #4]
 80092be:	04d9      	lsls	r1, r3, #19
 80092c0:	6922      	ldr	r2, [r4, #16]
 80092c2:	6022      	str	r2, [r4, #0]
 80092c4:	d504      	bpl.n	80092d0 <__sflush_r+0x78>
 80092c6:	1c42      	adds	r2, r0, #1
 80092c8:	d101      	bne.n	80092ce <__sflush_r+0x76>
 80092ca:	682b      	ldr	r3, [r5, #0]
 80092cc:	b903      	cbnz	r3, 80092d0 <__sflush_r+0x78>
 80092ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80092d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092d2:	602f      	str	r7, [r5, #0]
 80092d4:	b1b9      	cbz	r1, 8009306 <__sflush_r+0xae>
 80092d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092da:	4299      	cmp	r1, r3
 80092dc:	d002      	beq.n	80092e4 <__sflush_r+0x8c>
 80092de:	4628      	mov	r0, r5
 80092e0:	f7ff fbf2 	bl	8008ac8 <_free_r>
 80092e4:	2300      	movs	r3, #0
 80092e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80092e8:	e00d      	b.n	8009306 <__sflush_r+0xae>
 80092ea:	2301      	movs	r3, #1
 80092ec:	4628      	mov	r0, r5
 80092ee:	47b0      	blx	r6
 80092f0:	4602      	mov	r2, r0
 80092f2:	1c50      	adds	r0, r2, #1
 80092f4:	d1c9      	bne.n	800928a <__sflush_r+0x32>
 80092f6:	682b      	ldr	r3, [r5, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d0c6      	beq.n	800928a <__sflush_r+0x32>
 80092fc:	2b1d      	cmp	r3, #29
 80092fe:	d001      	beq.n	8009304 <__sflush_r+0xac>
 8009300:	2b16      	cmp	r3, #22
 8009302:	d11e      	bne.n	8009342 <__sflush_r+0xea>
 8009304:	602f      	str	r7, [r5, #0]
 8009306:	2000      	movs	r0, #0
 8009308:	e022      	b.n	8009350 <__sflush_r+0xf8>
 800930a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800930e:	b21b      	sxth	r3, r3
 8009310:	e01b      	b.n	800934a <__sflush_r+0xf2>
 8009312:	690f      	ldr	r7, [r1, #16]
 8009314:	2f00      	cmp	r7, #0
 8009316:	d0f6      	beq.n	8009306 <__sflush_r+0xae>
 8009318:	0793      	lsls	r3, r2, #30
 800931a:	680e      	ldr	r6, [r1, #0]
 800931c:	bf08      	it	eq
 800931e:	694b      	ldreq	r3, [r1, #20]
 8009320:	600f      	str	r7, [r1, #0]
 8009322:	bf18      	it	ne
 8009324:	2300      	movne	r3, #0
 8009326:	eba6 0807 	sub.w	r8, r6, r7
 800932a:	608b      	str	r3, [r1, #8]
 800932c:	f1b8 0f00 	cmp.w	r8, #0
 8009330:	dde9      	ble.n	8009306 <__sflush_r+0xae>
 8009332:	6a21      	ldr	r1, [r4, #32]
 8009334:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009336:	4643      	mov	r3, r8
 8009338:	463a      	mov	r2, r7
 800933a:	4628      	mov	r0, r5
 800933c:	47b0      	blx	r6
 800933e:	2800      	cmp	r0, #0
 8009340:	dc08      	bgt.n	8009354 <__sflush_r+0xfc>
 8009342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800934a:	81a3      	strh	r3, [r4, #12]
 800934c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009354:	4407      	add	r7, r0
 8009356:	eba8 0800 	sub.w	r8, r8, r0
 800935a:	e7e7      	b.n	800932c <__sflush_r+0xd4>
 800935c:	dfbffffe 	.word	0xdfbffffe

08009360 <_fflush_r>:
 8009360:	b538      	push	{r3, r4, r5, lr}
 8009362:	690b      	ldr	r3, [r1, #16]
 8009364:	4605      	mov	r5, r0
 8009366:	460c      	mov	r4, r1
 8009368:	b913      	cbnz	r3, 8009370 <_fflush_r+0x10>
 800936a:	2500      	movs	r5, #0
 800936c:	4628      	mov	r0, r5
 800936e:	bd38      	pop	{r3, r4, r5, pc}
 8009370:	b118      	cbz	r0, 800937a <_fflush_r+0x1a>
 8009372:	6a03      	ldr	r3, [r0, #32]
 8009374:	b90b      	cbnz	r3, 800937a <_fflush_r+0x1a>
 8009376:	f7ff f9ad 	bl	80086d4 <__sinit>
 800937a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d0f3      	beq.n	800936a <_fflush_r+0xa>
 8009382:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009384:	07d0      	lsls	r0, r2, #31
 8009386:	d404      	bmi.n	8009392 <_fflush_r+0x32>
 8009388:	0599      	lsls	r1, r3, #22
 800938a:	d402      	bmi.n	8009392 <_fflush_r+0x32>
 800938c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800938e:	f7ff fb98 	bl	8008ac2 <__retarget_lock_acquire_recursive>
 8009392:	4628      	mov	r0, r5
 8009394:	4621      	mov	r1, r4
 8009396:	f7ff ff5f 	bl	8009258 <__sflush_r>
 800939a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800939c:	07da      	lsls	r2, r3, #31
 800939e:	4605      	mov	r5, r0
 80093a0:	d4e4      	bmi.n	800936c <_fflush_r+0xc>
 80093a2:	89a3      	ldrh	r3, [r4, #12]
 80093a4:	059b      	lsls	r3, r3, #22
 80093a6:	d4e1      	bmi.n	800936c <_fflush_r+0xc>
 80093a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093aa:	f7ff fb8b 	bl	8008ac4 <__retarget_lock_release_recursive>
 80093ae:	e7dd      	b.n	800936c <_fflush_r+0xc>

080093b0 <__swhatbuf_r>:
 80093b0:	b570      	push	{r4, r5, r6, lr}
 80093b2:	460c      	mov	r4, r1
 80093b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093b8:	2900      	cmp	r1, #0
 80093ba:	b096      	sub	sp, #88	@ 0x58
 80093bc:	4615      	mov	r5, r2
 80093be:	461e      	mov	r6, r3
 80093c0:	da0d      	bge.n	80093de <__swhatbuf_r+0x2e>
 80093c2:	89a3      	ldrh	r3, [r4, #12]
 80093c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80093c8:	f04f 0100 	mov.w	r1, #0
 80093cc:	bf14      	ite	ne
 80093ce:	2340      	movne	r3, #64	@ 0x40
 80093d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80093d4:	2000      	movs	r0, #0
 80093d6:	6031      	str	r1, [r6, #0]
 80093d8:	602b      	str	r3, [r5, #0]
 80093da:	b016      	add	sp, #88	@ 0x58
 80093dc:	bd70      	pop	{r4, r5, r6, pc}
 80093de:	466a      	mov	r2, sp
 80093e0:	f000 f848 	bl	8009474 <_fstat_r>
 80093e4:	2800      	cmp	r0, #0
 80093e6:	dbec      	blt.n	80093c2 <__swhatbuf_r+0x12>
 80093e8:	9901      	ldr	r1, [sp, #4]
 80093ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80093ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80093f2:	4259      	negs	r1, r3
 80093f4:	4159      	adcs	r1, r3
 80093f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093fa:	e7eb      	b.n	80093d4 <__swhatbuf_r+0x24>

080093fc <__smakebuf_r>:
 80093fc:	898b      	ldrh	r3, [r1, #12]
 80093fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009400:	079d      	lsls	r5, r3, #30
 8009402:	4606      	mov	r6, r0
 8009404:	460c      	mov	r4, r1
 8009406:	d507      	bpl.n	8009418 <__smakebuf_r+0x1c>
 8009408:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800940c:	6023      	str	r3, [r4, #0]
 800940e:	6123      	str	r3, [r4, #16]
 8009410:	2301      	movs	r3, #1
 8009412:	6163      	str	r3, [r4, #20]
 8009414:	b003      	add	sp, #12
 8009416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009418:	ab01      	add	r3, sp, #4
 800941a:	466a      	mov	r2, sp
 800941c:	f7ff ffc8 	bl	80093b0 <__swhatbuf_r>
 8009420:	9f00      	ldr	r7, [sp, #0]
 8009422:	4605      	mov	r5, r0
 8009424:	4639      	mov	r1, r7
 8009426:	4630      	mov	r0, r6
 8009428:	f7ff fbba 	bl	8008ba0 <_malloc_r>
 800942c:	b948      	cbnz	r0, 8009442 <__smakebuf_r+0x46>
 800942e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009432:	059a      	lsls	r2, r3, #22
 8009434:	d4ee      	bmi.n	8009414 <__smakebuf_r+0x18>
 8009436:	f023 0303 	bic.w	r3, r3, #3
 800943a:	f043 0302 	orr.w	r3, r3, #2
 800943e:	81a3      	strh	r3, [r4, #12]
 8009440:	e7e2      	b.n	8009408 <__smakebuf_r+0xc>
 8009442:	89a3      	ldrh	r3, [r4, #12]
 8009444:	6020      	str	r0, [r4, #0]
 8009446:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800944a:	81a3      	strh	r3, [r4, #12]
 800944c:	9b01      	ldr	r3, [sp, #4]
 800944e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009452:	b15b      	cbz	r3, 800946c <__smakebuf_r+0x70>
 8009454:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009458:	4630      	mov	r0, r6
 800945a:	f000 f81d 	bl	8009498 <_isatty_r>
 800945e:	b128      	cbz	r0, 800946c <__smakebuf_r+0x70>
 8009460:	89a3      	ldrh	r3, [r4, #12]
 8009462:	f023 0303 	bic.w	r3, r3, #3
 8009466:	f043 0301 	orr.w	r3, r3, #1
 800946a:	81a3      	strh	r3, [r4, #12]
 800946c:	89a3      	ldrh	r3, [r4, #12]
 800946e:	431d      	orrs	r5, r3
 8009470:	81a5      	strh	r5, [r4, #12]
 8009472:	e7cf      	b.n	8009414 <__smakebuf_r+0x18>

08009474 <_fstat_r>:
 8009474:	b538      	push	{r3, r4, r5, lr}
 8009476:	4d07      	ldr	r5, [pc, #28]	@ (8009494 <_fstat_r+0x20>)
 8009478:	2300      	movs	r3, #0
 800947a:	4604      	mov	r4, r0
 800947c:	4608      	mov	r0, r1
 800947e:	4611      	mov	r1, r2
 8009480:	602b      	str	r3, [r5, #0]
 8009482:	f7f7 fe4c 	bl	800111e <_fstat>
 8009486:	1c43      	adds	r3, r0, #1
 8009488:	d102      	bne.n	8009490 <_fstat_r+0x1c>
 800948a:	682b      	ldr	r3, [r5, #0]
 800948c:	b103      	cbz	r3, 8009490 <_fstat_r+0x1c>
 800948e:	6023      	str	r3, [r4, #0]
 8009490:	bd38      	pop	{r3, r4, r5, pc}
 8009492:	bf00      	nop
 8009494:	20000bb4 	.word	0x20000bb4

08009498 <_isatty_r>:
 8009498:	b538      	push	{r3, r4, r5, lr}
 800949a:	4d06      	ldr	r5, [pc, #24]	@ (80094b4 <_isatty_r+0x1c>)
 800949c:	2300      	movs	r3, #0
 800949e:	4604      	mov	r4, r0
 80094a0:	4608      	mov	r0, r1
 80094a2:	602b      	str	r3, [r5, #0]
 80094a4:	f7f7 fe4b 	bl	800113e <_isatty>
 80094a8:	1c43      	adds	r3, r0, #1
 80094aa:	d102      	bne.n	80094b2 <_isatty_r+0x1a>
 80094ac:	682b      	ldr	r3, [r5, #0]
 80094ae:	b103      	cbz	r3, 80094b2 <_isatty_r+0x1a>
 80094b0:	6023      	str	r3, [r4, #0]
 80094b2:	bd38      	pop	{r3, r4, r5, pc}
 80094b4:	20000bb4 	.word	0x20000bb4

080094b8 <_sbrk_r>:
 80094b8:	b538      	push	{r3, r4, r5, lr}
 80094ba:	4d06      	ldr	r5, [pc, #24]	@ (80094d4 <_sbrk_r+0x1c>)
 80094bc:	2300      	movs	r3, #0
 80094be:	4604      	mov	r4, r0
 80094c0:	4608      	mov	r0, r1
 80094c2:	602b      	str	r3, [r5, #0]
 80094c4:	f7f7 fe54 	bl	8001170 <_sbrk>
 80094c8:	1c43      	adds	r3, r0, #1
 80094ca:	d102      	bne.n	80094d2 <_sbrk_r+0x1a>
 80094cc:	682b      	ldr	r3, [r5, #0]
 80094ce:	b103      	cbz	r3, 80094d2 <_sbrk_r+0x1a>
 80094d0:	6023      	str	r3, [r4, #0]
 80094d2:	bd38      	pop	{r3, r4, r5, pc}
 80094d4:	20000bb4 	.word	0x20000bb4

080094d8 <_init>:
 80094d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094da:	bf00      	nop
 80094dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094de:	bc08      	pop	{r3}
 80094e0:	469e      	mov	lr, r3
 80094e2:	4770      	bx	lr

080094e4 <_fini>:
 80094e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094e6:	bf00      	nop
 80094e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ea:	bc08      	pop	{r3}
 80094ec:	469e      	mov	lr, r3
 80094ee:	4770      	bx	lr
