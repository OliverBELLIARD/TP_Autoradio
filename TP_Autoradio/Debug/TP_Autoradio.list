
TP_Autoradio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010774  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a50  08010908  08010908  00011908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011358  08011358  000131e0  2**0
                  CONTENTS
  4 .ARM          00000008  08011358  08011358  00012358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011360  08011360  000131e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011360  08011360  00012360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011364  08011364  00012364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08011368  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005e2c  200001e0  08011548  000131e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000600c  08011548  0001400c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000131e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024aed  00000000  00000000  00013210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000552d  00000000  00000000  00037cfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ea0  00000000  00000000  0003d230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017bf  00000000  00000000  0003f0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d12a  00000000  00000000  0004088f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026a16  00000000  00000000  0006d9b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106818  00000000  00000000  000943cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019abe7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009598  00000000  00000000  0019ac2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  001a41c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080108ec 	.word	0x080108ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080108ec 	.word	0x080108ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fea:	4b10      	ldr	r3, [pc, #64]	@ (800102c <MX_DMA_Init+0x48>)
 8000fec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fee:	4a0f      	ldr	r2, [pc, #60]	@ (800102c <MX_DMA_Init+0x48>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800102c <MX_DMA_Init+0x48>)
 8000ff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2105      	movs	r1, #5
 8001006:	2010      	movs	r0, #16
 8001008:	f001 ff62 	bl	8002ed0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800100c:	2010      	movs	r0, #16
 800100e:	f001 ff7b 	bl	8002f08 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2105      	movs	r1, #5
 8001016:	2011      	movs	r0, #17
 8001018:	f001 ff5a 	bl	8002ed0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800101c:	2011      	movs	r0, #17
 800101e:	f001 ff73 	bl	8002f08 <HAL_NVIC_EnableIRQ>

}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40021000 	.word	0x40021000

08001030 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4a07      	ldr	r2, [pc, #28]	@ (800105c <vApplicationGetIdleTaskMemory+0x2c>)
 8001040:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	4a06      	ldr	r2, [pc, #24]	@ (8001060 <vApplicationGetIdleTaskMemory+0x30>)
 8001046:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2280      	movs	r2, #128	@ 0x80
 800104c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000200 	.word	0x20000200
 8001060:	200002a0 	.word	0x200002a0

08001064 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001064:	b5b0      	push	{r4, r5, r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800106a:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <MX_FREERTOS_Init+0x30>)
 800106c:	1d3c      	adds	r4, r7, #4
 800106e:	461d      	mov	r5, r3
 8001070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001074:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001078:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f008 fe6a 	bl	8009d5a <osThreadCreate>
 8001086:	4603      	mov	r3, r0
 8001088:	4a03      	ldr	r2, [pc, #12]	@ (8001098 <MX_FREERTOS_Init+0x34>)
 800108a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800108c:	bf00      	nop
 800108e:	3720      	adds	r7, #32
 8001090:	46bd      	mov	sp, r7
 8001092:	bdb0      	pop	{r4, r5, r7, pc}
 8001094:	08010914 	.word	0x08010914
 8001098:	200001fc 	.word	0x200001fc

0800109c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f008 fea4 	bl	8009df2 <osDelay>
 80010aa:	e7fb      	b.n	80010a4 <StartDefaultTask+0x8>

080010ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	@ 0x28
 80010b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c2:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <MX_GPIO_Init+0xec>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c6:	4a34      	ldr	r2, [pc, #208]	@ (8001198 <MX_GPIO_Init+0xec>)
 80010c8:	f043 0304 	orr.w	r3, r3, #4
 80010cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ce:	4b32      	ldr	r3, [pc, #200]	@ (8001198 <MX_GPIO_Init+0xec>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010da:	4b2f      	ldr	r3, [pc, #188]	@ (8001198 <MX_GPIO_Init+0xec>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010de:	4a2e      	ldr	r2, [pc, #184]	@ (8001198 <MX_GPIO_Init+0xec>)
 80010e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001198 <MX_GPIO_Init+0xec>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	4b29      	ldr	r3, [pc, #164]	@ (8001198 <MX_GPIO_Init+0xec>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f6:	4a28      	ldr	r2, [pc, #160]	@ (8001198 <MX_GPIO_Init+0xec>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010fe:	4b26      	ldr	r3, [pc, #152]	@ (8001198 <MX_GPIO_Init+0xec>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	4b23      	ldr	r3, [pc, #140]	@ (8001198 <MX_GPIO_Init+0xec>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110e:	4a22      	ldr	r2, [pc, #136]	@ (8001198 <MX_GPIO_Init+0xec>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001116:	4b20      	ldr	r3, [pc, #128]	@ (8001198 <MX_GPIO_Init+0xec>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VU_nRESET_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	2121      	movs	r1, #33	@ 0x21
 8001126:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800112a:	f002 fb1b 	bl	8003764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	2180      	movs	r1, #128	@ 0x80
 8001132:	481a      	ldr	r0, [pc, #104]	@ (800119c <MX_GPIO_Init+0xf0>)
 8001134:	f002 fb16 	bl	8003764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001138:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800113c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800113e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	4814      	ldr	r0, [pc, #80]	@ (80011a0 <MX_GPIO_Init+0xf4>)
 8001150:	f002 f95e 	bl	8003410 <HAL_GPIO_Init>

  /*Configure GPIO pins : VU_nRESET_Pin LD2_Pin */
  GPIO_InitStruct.Pin = VU_nRESET_Pin|LD2_Pin;
 8001154:	2321      	movs	r3, #33	@ 0x21
 8001156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001158:	2301      	movs	r3, #1
 800115a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4619      	mov	r1, r3
 800116a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800116e:	f002 f94f 	bl	8003410 <HAL_GPIO_Init>

  /*Configure GPIO pin : VU_nCS_Pin */
  GPIO_InitStruct.Pin = VU_nCS_Pin;
 8001172:	2380      	movs	r3, #128	@ 0x80
 8001174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	2301      	movs	r3, #1
 8001178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VU_nCS_GPIO_Port, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	4804      	ldr	r0, [pc, #16]	@ (800119c <MX_GPIO_Init+0xf0>)
 800118a:	f002 f941 	bl	8003410 <HAL_GPIO_Init>

}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	@ 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000
 800119c:	48000400 	.word	0x48000400
 80011a0:	48000800 	.word	0x48000800

080011a4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011aa:	4a1c      	ldr	r2, [pc, #112]	@ (800121c <MX_I2C2_Init+0x78>)
 80011ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 80011ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001220 <MX_I2C2_Init+0x7c>)
 80011b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80011b4:	4b18      	ldr	r3, [pc, #96]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ba:	4b17      	ldr	r3, [pc, #92]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011bc:	2201      	movs	r2, #1
 80011be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c0:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80011c6:	4b14      	ldr	r3, [pc, #80]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011cc:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011de:	480e      	ldr	r0, [pc, #56]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011e0:	f002 faf2 	bl	80037c8 <HAL_I2C_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80011ea:	f000 fb67 	bl	80018bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011ee:	2100      	movs	r1, #0
 80011f0:	4809      	ldr	r0, [pc, #36]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011f2:	f003 f875 	bl	80042e0 <HAL_I2CEx_ConfigAnalogFilter>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80011fc:	f000 fb5e 	bl	80018bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001200:	2100      	movs	r1, #0
 8001202:	4805      	ldr	r0, [pc, #20]	@ (8001218 <MX_I2C2_Init+0x74>)
 8001204:	f003 f8b7 	bl	8004376 <HAL_I2CEx_ConfigDigitalFilter>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800120e:	f000 fb55 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200004a0 	.word	0x200004a0
 800121c:	40005800 	.word	0x40005800
 8001220:	10d19ce4 	.word	0x10d19ce4

08001224 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b0ac      	sub	sp, #176	@ 0xb0
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	2288      	movs	r2, #136	@ 0x88
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f00b febb 	bl	800cfc0 <memset>
  if(i2cHandle->Instance==I2C2)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a21      	ldr	r2, [pc, #132]	@ (80012d4 <HAL_I2C_MspInit+0xb0>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d13b      	bne.n	80012cc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001254:	2380      	movs	r3, #128	@ 0x80
 8001256:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001258:	2300      	movs	r3, #0
 800125a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	4618      	mov	r0, r3
 8001262:	f003 ff6b 	bl	800513c <HAL_RCCEx_PeriphCLKConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800126c:	f000 fb26 	bl	80018bc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001270:	4b19      	ldr	r3, [pc, #100]	@ (80012d8 <HAL_I2C_MspInit+0xb4>)
 8001272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001274:	4a18      	ldr	r2, [pc, #96]	@ (80012d8 <HAL_I2C_MspInit+0xb4>)
 8001276:	f043 0302 	orr.w	r3, r3, #2
 800127a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127c:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <HAL_I2C_MspInit+0xb4>)
 800127e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001288:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800128c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001290:	2312      	movs	r3, #18
 8001292:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012a2:	2304      	movs	r3, #4
 80012a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012ac:	4619      	mov	r1, r3
 80012ae:	480b      	ldr	r0, [pc, #44]	@ (80012dc <HAL_I2C_MspInit+0xb8>)
 80012b0:	f002 f8ae 	bl	8003410 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012b4:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <HAL_I2C_MspInit+0xb4>)
 80012b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b8:	4a07      	ldr	r2, [pc, #28]	@ (80012d8 <HAL_I2C_MspInit+0xb4>)
 80012ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012be:	6593      	str	r3, [r2, #88]	@ 0x58
 80012c0:	4b05      	ldr	r3, [pc, #20]	@ (80012d8 <HAL_I2C_MspInit+0xb4>)
 80012c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80012cc:	bf00      	nop
 80012ce:	37b0      	adds	r7, #176	@ 0xb0
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40005800 	.word	0x40005800
 80012d8:	40021000 	.word	0x40021000
 80012dc:	48000400 	.word	0x48000400

080012e0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012e4:	f3bf 8f4f 	dsb	sy
}
 80012e8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80012ea:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <__NVIC_SystemReset+0x24>)
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80012f2:	4904      	ldr	r1, [pc, #16]	@ (8001304 <__NVIC_SystemReset+0x24>)
 80012f4:	4b04      	ldr	r3, [pc, #16]	@ (8001308 <__NVIC_SystemReset+0x28>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80012fa:	f3bf 8f4f 	dsb	sy
}
 80012fe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <__NVIC_SystemReset+0x20>
 8001304:	e000ed00 	.word	0xe000ed00
 8001308:	05fa0004 	.word	0x05fa0004

0800130c <__io_putchar>:
 * @brief Transmit a character over UART.
 * @param ch: Character to transmit.
 * @retval int: The transmitted character.
 */
int __io_putchar(int ch)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001314:	1d39      	adds	r1, r7, #4
 8001316:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800131a:	2201      	movs	r2, #1
 800131c:	4803      	ldr	r0, [pc, #12]	@ (800132c <__io_putchar+0x20>)
 800131e:	f007 f961 	bl	80085e4 <HAL_UART_Transmit>

	return ch;
 8001322:	687b      	ldr	r3, [r7, #4]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000b58 	.word	0x20000b58

08001330 <Error_Handler_xTaskCreate>:
/**
 * @brief  Gestion d'erreurs de création de tâche.
 * @param	BaseType_t	Retour de xTaskCreate.
 */
void Error_Handler_xTaskCreate(BaseType_t r)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	/* Vérification si la tâche a été créée avec succès */
	if (pdPASS == r) {
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d010      	beq.n	8001360 <Error_Handler_xTaskCreate+0x30>
		/* Si la tâche est créée avec succès, démarrer le scheduler */
#if (LOGS)
		printf("Tâche crée avec succès\r\n");
#endif
	} else if (errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY == r) {
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001344:	d105      	bne.n	8001352 <Error_Handler_xTaskCreate+0x22>
		printf("Erreur: Mémoire insuffisante\r\n");
 8001346:	4808      	ldr	r0, [pc, #32]	@ (8001368 <Error_Handler_xTaskCreate+0x38>)
 8001348:	f00b fd06 	bl	800cd58 <puts>
		Error_Handler();
 800134c:	f000 fab6 	bl	80018bc <Error_Handler>
		/* Cas improbable : code d'erreur non prévu pour xTaskCreate */
		printf("Erreur inconnue lors de la création de la tâche\r\n");
		Error_Handler();  	// Gestion d'erreur générique
		NVIC_SystemReset(); // Réinitialiser le microcontrôleur
	}
}
 8001350:	e006      	b.n	8001360 <Error_Handler_xTaskCreate+0x30>
		printf("Erreur inconnue lors de la création de la tâche\r\n");
 8001352:	4806      	ldr	r0, [pc, #24]	@ (800136c <Error_Handler_xTaskCreate+0x3c>)
 8001354:	f00b fd00 	bl	800cd58 <puts>
		Error_Handler();  	// Gestion d'erreur générique
 8001358:	f000 fab0 	bl	80018bc <Error_Handler>
		NVIC_SystemReset(); // Réinitialiser le microcontrôleur
 800135c:	f7ff ffc0 	bl	80012e0 <__NVIC_SystemReset>
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	08010930 	.word	0x08010930
 800136c:	08010950 	.word	0x08010950

08001370 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a04      	ldr	r2, [pc, #16]	@ (8001390 <HAL_UART_RxCpltCallback+0x20>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d101      	bne.n	8001386 <HAL_UART_RxCpltCallback+0x16>
	{
		shell_uart_receive_irq_cb();	// Function giving the semaphore!
 8001382:	f001 fad3 	bl	800292c <shell_uart_receive_irq_cb>
	}
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40004400 	.word	0x40004400

08001394 <task_LED>:

//////////////////////////////////////////////////////////////////////
// TASKS
////////////////////////////////////////////////////////////////////

void task_LED (void * pvParameters) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	int duree = (int) pvParameters;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	60fb      	str	r3, [r7, #12]
#if (LOGS)
	printf("Task %s created\r\n", pcTaskGetName(xTaskGetCurrentTaskHandle()));
#endif
	for (;;)
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80013a0:	2120      	movs	r1, #32
 80013a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a6:	f002 f9f5 	bl	8003794 <HAL_GPIO_TogglePin>
		vTaskDelay( duree / portTICK_PERIOD_MS );  // Délai de duree en ms
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f009 fa7d 	bl	800a8ac <vTaskDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80013b2:	bf00      	nop
 80013b4:	e7f4      	b.n	80013a0 <task_LED+0xc>
	...

080013b8 <task_shell>:
	}
}

void task_shell(void * unused)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
#if (LOGS)
	printf("Task %s created\r\n", pcTaskGetName(xTaskGetCurrentTaskHandle()));
#endif

	shell_init();	// Shell initialization
 80013c0:	f001 fb40 	bl	8002a44 <shell_init>

	// Creation of all commands
	shell_add('f', fonction, "Une fonction inutile");
 80013c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001404 <task_shell+0x4c>)
 80013c6:	4910      	ldr	r1, [pc, #64]	@ (8001408 <task_shell+0x50>)
 80013c8:	2066      	movs	r0, #102	@ 0x66
 80013ca:	f001 fb73 	bl	8002ab4 <shell_add>
	shell_add('a', addition, "Effectue une somme");
 80013ce:	4a0f      	ldr	r2, [pc, #60]	@ (800140c <task_shell+0x54>)
 80013d0:	490f      	ldr	r1, [pc, #60]	@ (8001410 <task_shell+0x58>)
 80013d2:	2061      	movs	r0, #97	@ 0x61
 80013d4:	f001 fb6e 	bl	8002ab4 <shell_add>
	shell_add('c', calcul, "Opération entre 2 nombres");
 80013d8:	4a0e      	ldr	r2, [pc, #56]	@ (8001414 <task_shell+0x5c>)
 80013da:	490f      	ldr	r1, [pc, #60]	@ (8001418 <task_shell+0x60>)
 80013dc:	2063      	movs	r0, #99	@ 0x63
 80013de:	f001 fb69 	bl	8002ab4 <shell_add>
	shell_add('t', GPIOExpander_toggle_LED, "Change l'état des LED avec les id");
 80013e2:	4a0e      	ldr	r2, [pc, #56]	@ (800141c <task_shell+0x64>)
 80013e4:	490e      	ldr	r1, [pc, #56]	@ (8001420 <task_shell+0x68>)
 80013e6:	2074      	movs	r0, #116	@ 0x74
 80013e8:	f001 fb64 	bl	8002ab4 <shell_add>
	shell_add('s', GPIOExpander_set_LED, "Allume une LED avec son id");
 80013ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001424 <task_shell+0x6c>)
 80013ee:	490e      	ldr	r1, [pc, #56]	@ (8001428 <task_shell+0x70>)
 80013f0:	2073      	movs	r0, #115	@ 0x73
 80013f2:	f001 fb5f 	bl	8002ab4 <shell_add>

	shell_run();	// boucle infinie
 80013f6:	f001 fc09 	bl	8002c0c <shell_run>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	08010984 	.word	0x08010984
 8001408:	08002705 	.word	0x08002705
 800140c:	0801099c 	.word	0x0801099c
 8001410:	08002849 	.word	0x08002849
 8001414:	080109b0 	.word	0x080109b0
 8001418:	0800274d 	.word	0x0800274d
 800141c:	080109cc 	.word	0x080109cc
 8001420:	080028b5 	.word	0x080028b5
 8001424:	080109f0 	.word	0x080109f0
 8001428:	080028fd 	.word	0x080028fd

0800142c <task_GPIO_expander>:
		i++;
		vTaskDelay( delay / portTICK_PERIOD_MS );  // Délai de duree en Dms
	}
}

void task_GPIO_expander (void * unused) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	//test_chenillard(100);

	for (;;)
	{
		// VU-Metre
		txSAI_volume = 0;
 8001434:	4b34      	ldr	r3, [pc, #208]	@ (8001508 <task_GPIO_expander+0xdc>)
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
		for (int i=0; i<SAI_BUFFER_LENGTH; i++)
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	e012      	b.n	8001468 <task_GPIO_expander+0x3c>
		{
			txSAI_volume += txSAI[i];
 8001442:	4a32      	ldr	r2, [pc, #200]	@ (800150c <task_GPIO_expander+0xe0>)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4413      	add	r3, r2
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	ee07 3a90 	vmov	s15, r3
 800144e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001452:	4b2d      	ldr	r3, [pc, #180]	@ (8001508 <task_GPIO_expander+0xdc>)
 8001454:	edd3 7a00 	vldr	s15, [r3]
 8001458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800145c:	4b2a      	ldr	r3, [pc, #168]	@ (8001508 <task_GPIO_expander+0xdc>)
 800145e:	edc3 7a00 	vstr	s15, [r3]
		for (int i=0; i<SAI_BUFFER_LENGTH; i++)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	3301      	adds	r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800146e:	dbe8      	blt.n	8001442 <task_GPIO_expander+0x16>
		}
		txSAI_volume = log10f((float)(txSAI_volume)/(SAI_BUFFER_LENGTH*0x7FFF));
 8001470:	4b25      	ldr	r3, [pc, #148]	@ (8001508 <task_GPIO_expander+0xdc>)
 8001472:	edd3 7a00 	vldr	s15, [r3]
 8001476:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001510 <task_GPIO_expander+0xe4>
 800147a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800147e:	eeb0 0a47 	vmov.f32	s0, s14
 8001482:	f00f f8bb 	bl	80105fc <log10f>
 8001486:	eef0 7a40 	vmov.f32	s15, s0
 800148a:	4b1f      	ldr	r3, [pc, #124]	@ (8001508 <task_GPIO_expander+0xdc>)
 800148c:	edc3 7a00 	vstr	s15, [r3]

		// 0 dB at 70%
		if (VU_level < txSAI_volume+70) VU_level += 1;
 8001490:	4b20      	ldr	r3, [pc, #128]	@ (8001514 <task_GPIO_expander+0xe8>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800149c:	4b1a      	ldr	r3, [pc, #104]	@ (8001508 <task_GPIO_expander+0xdc>)
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8001518 <task_GPIO_expander+0xec>
 80014a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80014aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b2:	d504      	bpl.n	80014be <task_GPIO_expander+0x92>
 80014b4:	4b17      	ldr	r3, [pc, #92]	@ (8001514 <task_GPIO_expander+0xe8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	3301      	adds	r3, #1
 80014ba:	4a16      	ldr	r2, [pc, #88]	@ (8001514 <task_GPIO_expander+0xe8>)
 80014bc:	6013      	str	r3, [r2, #0]
		if (VU_level > txSAI_volume+70) VU_level -= 1;
 80014be:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <task_GPIO_expander+0xe8>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001508 <task_GPIO_expander+0xdc>)
 80014cc:	edd3 7a00 	vldr	s15, [r3]
 80014d0:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8001518 <task_GPIO_expander+0xec>
 80014d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80014d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e0:	dd04      	ble.n	80014ec <task_GPIO_expander+0xc0>
 80014e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <task_GPIO_expander+0xe8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001514 <task_GPIO_expander+0xe8>)
 80014ea:	6013      	str	r3, [r2, #0]

		MCP23S17_level_L(VU_level);
 80014ec:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <task_GPIO_expander+0xe8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 ff87 	bl	8002404 <MCP23S17_level_L>
		MCP23S17_level_R(VU_level);
 80014f6:	4b07      	ldr	r3, [pc, #28]	@ (8001514 <task_GPIO_expander+0xe8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 ff58 	bl	80023b0 <MCP23S17_level_R>

		vTaskDelay( 4/portTICK_PERIOD_MS );  // 1 ms delay
 8001500:	2004      	movs	r0, #4
 8001502:	f009 f9d3 	bl	800a8ac <vTaskDelay>
		txSAI_volume = 0;
 8001506:	e795      	b.n	8001434 <task_GPIO_expander+0x8>
 8001508:	20000900 	.word	0x20000900
 800150c:	20000700 	.word	0x20000700
 8001510:	4b7ffe00 	.word	0x4b7ffe00
 8001514:	20000904 	.word	0x20000904
 8001518:	428c0000 	.word	0x428c0000

0800151c <GenerateTriangleWave>:
 * @param buffer: Pointer to the buffer to hold the waveform.
 * @param length: Number of samples in the waveform.
 * @param amplitude: Peak amplitude of the waveform.
 */
void GenerateTriangleWave(uint8_t* buffer, uint16_t length, uint16_t amplitude)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	807b      	strh	r3, [r7, #2]
 8001528:	4613      	mov	r3, r2
 800152a:	803b      	strh	r3, [r7, #0]
	uint16_t step = (2 * amplitude) / length;
 800152c:	883b      	ldrh	r3, [r7, #0]
 800152e:	005a      	lsls	r2, r3, #1
 8001530:	887b      	ldrh	r3, [r7, #2]
 8001532:	fb92 f3f3 	sdiv	r3, r2, r3
 8001536:	813b      	strh	r3, [r7, #8]
	uint16_t value = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	81fb      	strh	r3, [r7, #14]
	int8_t direction = 1;
 800153c:	2301      	movs	r3, #1
 800153e:	737b      	strb	r3, [r7, #13]

	for (uint16_t i = 0; i < length; i++) {
 8001540:	2300      	movs	r3, #0
 8001542:	817b      	strh	r3, [r7, #10]
 8001544:	e022      	b.n	800158c <GenerateTriangleWave+0x70>
		buffer[i] = value;
 8001546:	897b      	ldrh	r3, [r7, #10]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	89fa      	ldrh	r2, [r7, #14]
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	701a      	strb	r2, [r3, #0]
		value += step * direction;
 8001552:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001556:	b29b      	uxth	r3, r3
 8001558:	893a      	ldrh	r2, [r7, #8]
 800155a:	fb12 f303 	smulbb	r3, r2, r3
 800155e:	b29a      	uxth	r2, r3
 8001560:	89fb      	ldrh	r3, [r7, #14]
 8001562:	4413      	add	r3, r2
 8001564:	81fb      	strh	r3, [r7, #14]

		if (value >= amplitude) {
 8001566:	89fa      	ldrh	r2, [r7, #14]
 8001568:	883b      	ldrh	r3, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d304      	bcc.n	8001578 <GenerateTriangleWave+0x5c>
			value = amplitude;
 800156e:	883b      	ldrh	r3, [r7, #0]
 8001570:	81fb      	strh	r3, [r7, #14]
			direction = -1; // Start decreasing
 8001572:	23ff      	movs	r3, #255	@ 0xff
 8001574:	737b      	strb	r3, [r7, #13]
 8001576:	e006      	b.n	8001586 <GenerateTriangleWave+0x6a>
		} else if (value <= 0) {
 8001578:	89fb      	ldrh	r3, [r7, #14]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d103      	bne.n	8001586 <GenerateTriangleWave+0x6a>
			value = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	81fb      	strh	r3, [r7, #14]
			direction = 1; // Start increasing
 8001582:	2301      	movs	r3, #1
 8001584:	737b      	strb	r3, [r7, #13]
	for (uint16_t i = 0; i < length; i++) {
 8001586:	897b      	ldrh	r3, [r7, #10]
 8001588:	3301      	adds	r3, #1
 800158a:	817b      	strh	r3, [r7, #10]
 800158c:	897a      	ldrh	r2, [r7, #10]
 800158e:	887b      	ldrh	r3, [r7, #2]
 8001590:	429a      	cmp	r2, r3
 8001592:	d3d8      	bcc.n	8001546 <GenerateTriangleWave+0x2a>
		}
	}
}
 8001594:	bf00      	nop
 8001596:	bf00      	nop
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <HAL_SAI_ErrorCallback>:
/**
 * @brief SAI error callback.
 * @param hsai: Pointer to the SAI handle.
 */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
    printf("Error: SAI encountered an error\r\n");
 80015ac:	4811      	ldr	r0, [pc, #68]	@ (80015f4 <HAL_SAI_ErrorCallback+0x50>)
 80015ae:	f00b fbd3 	bl	800cd58 <puts>

    // Attempt to restart DMA transmission and reception
    if (HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)txSAI, SAI_BUFFER_LENGTH) != HAL_OK) {
 80015b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015b6:	4910      	ldr	r1, [pc, #64]	@ (80015f8 <HAL_SAI_ErrorCallback+0x54>)
 80015b8:	4810      	ldr	r0, [pc, #64]	@ (80015fc <HAL_SAI_ErrorCallback+0x58>)
 80015ba:	f005 fae3 	bl	8006b84 <HAL_SAI_Transmit_DMA>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d004      	beq.n	80015ce <HAL_SAI_ErrorCallback+0x2a>
        printf("Error: Failed to restart SAI DMA transmission\r\n");
 80015c4:	480e      	ldr	r0, [pc, #56]	@ (8001600 <HAL_SAI_ErrorCallback+0x5c>)
 80015c6:	f00b fbc7 	bl	800cd58 <puts>
        Error_Handler();
 80015ca:	f000 f977 	bl	80018bc <Error_Handler>
    }

    if (HAL_SAI_Receive_DMA(&hsai_BlockA2, rxSAI, SAI_BUFFER_LENGTH) != HAL_OK) {
 80015ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015d2:	490c      	ldr	r1, [pc, #48]	@ (8001604 <HAL_SAI_ErrorCallback+0x60>)
 80015d4:	4809      	ldr	r0, [pc, #36]	@ (80015fc <HAL_SAI_ErrorCallback+0x58>)
 80015d6:	f005 fb85 	bl	8006ce4 <HAL_SAI_Receive_DMA>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d004      	beq.n	80015ea <HAL_SAI_ErrorCallback+0x46>
        printf("Error: Failed to restart SAI DMA reception\r\n");
 80015e0:	4809      	ldr	r0, [pc, #36]	@ (8001608 <HAL_SAI_ErrorCallback+0x64>)
 80015e2:	f00b fbb9 	bl	800cd58 <puts>
        Error_Handler();
 80015e6:	f000 f969 	bl	80018bc <Error_Handler>
    }
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	08010a0c 	.word	0x08010a0c
 80015f8:	20000700 	.word	0x20000700
 80015fc:	20000908 	.word	0x20000908
 8001600:	08010a30 	.word	0x08010a30
 8001604:	20000500 	.word	0x20000500
 8001608:	08010a60 	.word	0x08010a60

0800160c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001612:	f001 fb65 	bl	8002ce0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001616:	f000 f8c3 	bl	80017a0 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 800161a:	f000 f912 	bl	8001842 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800161e:	f7ff fd45 	bl	80010ac <MX_GPIO_Init>
	MX_DMA_Init();
 8001622:	f7ff fcdf 	bl	8000fe4 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001626:	f000 fd11 	bl	800204c <MX_USART2_UART_Init>
	MX_I2C2_Init();
 800162a:	f7ff fdbb 	bl	80011a4 <MX_I2C2_Init>
	MX_SPI3_Init();
 800162e:	f000 fa8f 	bl	8001b50 <MX_SPI3_Init>
	MX_SAI2_Init();
 8001632:	f000 f949 	bl	80018c8 <MX_SAI2_Init>
	/* USER CODE BEGIN 2 */
	// Initialize GPIO expander
	MCP23S17_Init();
 8001636:	f000 fe33 	bl	80022a0 <MCP23S17_Init>
	__HAL_RCC_SAI2_CLK_ENABLE();
 800163a:	4b47      	ldr	r3, [pc, #284]	@ (8001758 <main+0x14c>)
 800163c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800163e:	4a46      	ldr	r2, [pc, #280]	@ (8001758 <main+0x14c>)
 8001640:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001644:	6613      	str	r3, [r2, #96]	@ 0x60
 8001646:	4b44      	ldr	r3, [pc, #272]	@ (8001758 <main+0x14c>)
 8001648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800164a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001652:	4b41      	ldr	r3, [pc, #260]	@ (8001758 <main+0x14c>)
 8001654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001656:	4a40      	ldr	r2, [pc, #256]	@ (8001758 <main+0x14c>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	6493      	str	r3, [r2, #72]	@ 0x48
 800165e:	4b3e      	ldr	r3, [pc, #248]	@ (8001758 <main+0x14c>)
 8001660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	683b      	ldr	r3, [r7, #0]
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 800166a:	4b3c      	ldr	r3, [pc, #240]	@ (800175c <main+0x150>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b3a      	ldr	r3, [pc, #232]	@ (800175c <main+0x150>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001678:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB2);
 800167a:	4b39      	ldr	r3, [pc, #228]	@ (8001760 <main+0x154>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b37      	ldr	r3, [pc, #220]	@ (8001760 <main+0x154>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001688:	601a      	str	r2, [r3, #0]
	SGTL5000_Init();
 800168a:	f000 ffa7 	bl	80025dc <SGTL5000_Init>

	// Generate the triangular waveform
	GenerateTriangleWave(txSAI, SAI_BUFFER_LENGTH, 0x7FFF); // 16-bit amplitude (0x7FFF)
 800168e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001692:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001696:	4833      	ldr	r0, [pc, #204]	@ (8001764 <main+0x158>)
 8001698:	f7ff ff40 	bl	800151c <GenerateTriangleWave>
	printf("Triangle Wave generation\r\n");
 800169c:	4832      	ldr	r0, [pc, #200]	@ (8001768 <main+0x15c>)
 800169e:	f00b fb5b 	bl	800cd58 <puts>

	// Start SAI DMA transmission
	if (HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)txSAI, SAI_BUFFER_LENGTH) != HAL_OK) {
 80016a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016a6:	492f      	ldr	r1, [pc, #188]	@ (8001764 <main+0x158>)
 80016a8:	482c      	ldr	r0, [pc, #176]	@ (800175c <main+0x150>)
 80016aa:	f005 fa6b 	bl	8006b84 <HAL_SAI_Transmit_DMA>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d004      	beq.n	80016be <main+0xb2>
		printf("Error: Failed to start SAI DMA transmission\r\n");
 80016b4:	482d      	ldr	r0, [pc, #180]	@ (800176c <main+0x160>)
 80016b6:	f00b fb4f 	bl	800cd58 <puts>
		Error_Handler();
 80016ba:	f000 f8ff 	bl	80018bc <Error_Handler>
	}

	// Start SAI DMA reception
	if (HAL_SAI_Receive_DMA(&hsai_BlockA2, rxSAI, SAI_BUFFER_LENGTH) != HAL_OK) {
 80016be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016c2:	492b      	ldr	r1, [pc, #172]	@ (8001770 <main+0x164>)
 80016c4:	4825      	ldr	r0, [pc, #148]	@ (800175c <main+0x150>)
 80016c6:	f005 fb0d 	bl	8006ce4 <HAL_SAI_Receive_DMA>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d004      	beq.n	80016da <main+0xce>
		printf("Error: Failed to start SAI DMA reception\r\n");
 80016d0:	4828      	ldr	r0, [pc, #160]	@ (8001774 <main+0x168>)
 80016d2:	f00b fb41 	bl	800cd58 <puts>
		Error_Handler();
 80016d6:	f000 f8f1 	bl	80018bc <Error_Handler>
	}

	// Test printf
	printf("******* TP Autoradio *******\r\n");
 80016da:	4827      	ldr	r0, [pc, #156]	@ (8001778 <main+0x16c>)
 80016dc:	f00b fb3c 	bl	800cd58 <puts>

	// Create the task, storing the handle.
	Error_Handler_xTaskCreate(
 80016e0:	4b26      	ldr	r3, [pc, #152]	@ (800177c <main+0x170>)
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	2302      	movs	r3, #2
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80016ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016f0:	4923      	ldr	r1, [pc, #140]	@ (8001780 <main+0x174>)
 80016f2:	4824      	ldr	r0, [pc, #144]	@ (8001784 <main+0x178>)
 80016f4:	f008 ff8a 	bl	800a60c <xTaskCreate>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fe18 	bl	8001330 <Error_Handler_xTaskCreate>
					(void *) 500, // 500 ms
					TASK_MCP23S17_PRIORITY, // Priority at which the task is created.
					&h_task_GPIOExpander)); // Used to pass out the created task's handle.

	// Turn on LED2 (Green)
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001700:	2120      	movs	r1, #32
 8001702:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001706:	f002 f845 	bl	8003794 <HAL_GPIO_TogglePin>

	// Create the task, storing the handle.
	Error_Handler_xTaskCreate(
 800170a:	4b1f      	ldr	r3, [pc, #124]	@ (8001788 <main+0x17c>)
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	2301      	movs	r3, #1
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	23c8      	movs	r3, #200	@ 0xc8
 8001714:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001718:	491c      	ldr	r1, [pc, #112]	@ (800178c <main+0x180>)
 800171a:	481d      	ldr	r0, [pc, #116]	@ (8001790 <main+0x184>)
 800171c:	f008 ff76 	bl	800a60c <xTaskCreate>
 8001720:	4603      	mov	r3, r0
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fe04 	bl	8001330 <Error_Handler_xTaskCreate>
					STACK_DEPTH, // Stack size in words, not bytes.
					(void *) DELAY_LED_TOGGLE, // Parameter passed into the task.
					1,// Priority at which the task is created.
					&h_task_LED)); // Used to pass out the created task's handle.
	// Shell task
	Error_Handler_xTaskCreate(
 8001728:	4b1a      	ldr	r3, [pc, #104]	@ (8001794 <main+0x188>)
 800172a:	9301      	str	r3, [sp, #4]
 800172c:	2303      	movs	r3, #3
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	2300      	movs	r3, #0
 8001732:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001736:	4918      	ldr	r1, [pc, #96]	@ (8001798 <main+0x18c>)
 8001738:	4818      	ldr	r0, [pc, #96]	@ (800179c <main+0x190>)
 800173a:	f008 ff67 	bl	800a60c <xTaskCreate>
 800173e:	4603      	mov	r3, r0
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fdf5 	bl	8001330 <Error_Handler_xTaskCreate>
					NULL,
					TASK_SHELL_PRIORITY,
					&h_task_shell));

	// OS Start
	vTaskStartScheduler();
 8001746:	f009 f8e7 	bl	800a918 <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 800174a:	f7ff fc8b 	bl	8001064 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 800174e:	f008 fafd 	bl	8009d4c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001752:	bf00      	nop
 8001754:	e7fd      	b.n	8001752 <main+0x146>
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000
 800175c:	20000908 	.word	0x20000908
 8001760:	2000098c 	.word	0x2000098c
 8001764:	20000700 	.word	0x20000700
 8001768:	08010a8c 	.word	0x08010a8c
 800176c:	08010aa8 	.word	0x08010aa8
 8001770:	20000500 	.word	0x20000500
 8001774:	08010ad8 	.word	0x08010ad8
 8001778:	08010b04 	.word	0x08010b04
 800177c:	200004fc 	.word	0x200004fc
 8001780:	08010b24 	.word	0x08010b24
 8001784:	0800142d 	.word	0x0800142d
 8001788:	200004f4 	.word	0x200004f4
 800178c:	08010b34 	.word	0x08010b34
 8001790:	08001395 	.word	0x08001395
 8001794:	200004f8 	.word	0x200004f8
 8001798:	08010b3c 	.word	0x08010b3c
 800179c:	080013b9 	.word	0x080013b9

080017a0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b096      	sub	sp, #88	@ 0x58
 80017a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	2244      	movs	r2, #68	@ 0x44
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f00b fc06 	bl	800cfc0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b4:	463b      	mov	r3, r7
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
 80017c0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017c2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80017c6:	f002 fe31 	bl	800442c <HAL_PWREx_ControlVoltageScaling>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <SystemClock_Config+0x34>
	{
		Error_Handler();
 80017d0:	f000 f874 	bl	80018bc <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017d4:	2302      	movs	r3, #2
 80017d6:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017dc:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017de:	2310      	movs	r3, #16
 80017e0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017e2:	2302      	movs	r3, #2
 80017e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017e6:	2302      	movs	r3, #2
 80017e8:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80017ea:	2301      	movs	r3, #1
 80017ec:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80017ee:	230a      	movs	r3, #10
 80017f0:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80017f2:	2307      	movs	r3, #7
 80017f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017f6:	2302      	movs	r3, #2
 80017f8:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017fa:	2302      	movs	r3, #2
 80017fc:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	4618      	mov	r0, r3
 8001804:	f002 fe68 	bl	80044d8 <HAL_RCC_OscConfig>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <SystemClock_Config+0x72>
	{
		Error_Handler();
 800180e:	f000 f855 	bl	80018bc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001812:	230f      	movs	r3, #15
 8001814:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001816:	2303      	movs	r3, #3
 8001818:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001826:	463b      	mov	r3, r7
 8001828:	2104      	movs	r1, #4
 800182a:	4618      	mov	r0, r3
 800182c:	f003 fa30 	bl	8004c90 <HAL_RCC_ClockConfig>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8001836:	f000 f841 	bl	80018bc <Error_Handler>
	}
}
 800183a:	bf00      	nop
 800183c:	3758      	adds	r7, #88	@ 0x58
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b0a2      	sub	sp, #136	@ 0x88
 8001846:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001848:	463b      	mov	r3, r7
 800184a:	2288      	movs	r2, #136	@ 0x88
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f00b fbb6 	bl	800cfc0 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8001854:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001858:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 800185a:	2300      	movs	r3, #0
 800185c:	66bb      	str	r3, [r7, #104]	@ 0x68
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800185e:	2302      	movs	r3, #2
 8001860:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001862:	2301      	movs	r3, #1
 8001864:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 8001866:	230d      	movs	r3, #13
 8001868:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 800186a:	2311      	movs	r3, #17
 800186c:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800186e:	2302      	movs	r3, #2
 8001870:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001872:	2302      	movs	r3, #2
 8001874:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8001876:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800187a:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800187c:	463b      	mov	r3, r7
 800187e:	4618      	mov	r0, r3
 8001880:	f003 fc5c 	bl	800513c <HAL_RCCEx_PeriphCLKConfig>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <PeriphCommonClock_Config+0x4c>
	{
		Error_Handler();
 800188a:	f000 f817 	bl	80018bc <Error_Handler>
	}
}
 800188e:	bf00      	nop
 8001890:	3788      	adds	r7, #136	@ 0x88
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a04      	ldr	r2, [pc, #16]	@ (80018b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d101      	bne.n	80018ae <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80018aa:	f001 fa39 	bl	8002d20 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40001000 	.word	0x40001000

080018bc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018c0:	b672      	cpsid	i
}
 80018c2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <Error_Handler+0x8>

080018c8 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 80018cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001978 <MX_SAI2_Init+0xb0>)
 80018ce:	4a2b      	ldr	r2, [pc, #172]	@ (800197c <MX_SAI2_Init+0xb4>)
 80018d0:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80018d2:	4b29      	ldr	r3, [pc, #164]	@ (8001978 <MX_SAI2_Init+0xb0>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80018d8:	4b27      	ldr	r3, [pc, #156]	@ (8001978 <MX_SAI2_Init+0xb0>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80018de:	4b26      	ldr	r3, [pc, #152]	@ (8001978 <MX_SAI2_Init+0xb0>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80018e4:	4b24      	ldr	r3, [pc, #144]	@ (8001978 <MX_SAI2_Init+0xb0>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80018ea:	4b23      	ldr	r3, [pc, #140]	@ (8001978 <MX_SAI2_Init+0xb0>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80018f0:	4b21      	ldr	r3, [pc, #132]	@ (8001978 <MX_SAI2_Init+0xb0>)
 80018f2:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80018f6:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80018f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001978 <MX_SAI2_Init+0xb0>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80018fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001978 <MX_SAI2_Init+0xb0>)
 8001900:	2200      	movs	r2, #0
 8001902:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001904:	4b1c      	ldr	r3, [pc, #112]	@ (8001978 <MX_SAI2_Init+0xb0>)
 8001906:	2200      	movs	r2, #0
 8001908:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800190a:	4b1b      	ldr	r3, [pc, #108]	@ (8001978 <MX_SAI2_Init+0xb0>)
 800190c:	2200      	movs	r2, #0
 800190e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8001910:	2302      	movs	r3, #2
 8001912:	2200      	movs	r2, #0
 8001914:	2100      	movs	r1, #0
 8001916:	4818      	ldr	r0, [pc, #96]	@ (8001978 <MX_SAI2_Init+0xb0>)
 8001918:	f004 ff2a 	bl	8006770 <HAL_SAI_InitProtocol>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
 8001922:	f7ff ffcb 	bl	80018bc <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001926:	4b16      	ldr	r3, [pc, #88]	@ (8001980 <MX_SAI2_Init+0xb8>)
 8001928:	4a16      	ldr	r2, [pc, #88]	@ (8001984 <MX_SAI2_Init+0xbc>)
 800192a:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800192c:	4b14      	ldr	r3, [pc, #80]	@ (8001980 <MX_SAI2_Init+0xb8>)
 800192e:	2203      	movs	r2, #3
 8001930:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001932:	4b13      	ldr	r3, [pc, #76]	@ (8001980 <MX_SAI2_Init+0xb8>)
 8001934:	2201      	movs	r2, #1
 8001936:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001938:	4b11      	ldr	r3, [pc, #68]	@ (8001980 <MX_SAI2_Init+0xb8>)
 800193a:	2200      	movs	r2, #0
 800193c:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800193e:	4b10      	ldr	r3, [pc, #64]	@ (8001980 <MX_SAI2_Init+0xb8>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001944:	4b0e      	ldr	r3, [pc, #56]	@ (8001980 <MX_SAI2_Init+0xb8>)
 8001946:	2200      	movs	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800194a:	4b0d      	ldr	r3, [pc, #52]	@ (8001980 <MX_SAI2_Init+0xb8>)
 800194c:	2200      	movs	r2, #0
 800194e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001950:	4b0b      	ldr	r3, [pc, #44]	@ (8001980 <MX_SAI2_Init+0xb8>)
 8001952:	2200      	movs	r2, #0
 8001954:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001956:	4b0a      	ldr	r3, [pc, #40]	@ (8001980 <MX_SAI2_Init+0xb8>)
 8001958:	2200      	movs	r2, #0
 800195a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800195c:	2302      	movs	r3, #2
 800195e:	2200      	movs	r2, #0
 8001960:	2100      	movs	r1, #0
 8001962:	4807      	ldr	r0, [pc, #28]	@ (8001980 <MX_SAI2_Init+0xb8>)
 8001964:	f004 ff04 	bl	8006770 <HAL_SAI_InitProtocol>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 800196e:	f7ff ffa5 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000908 	.word	0x20000908
 800197c:	40015804 	.word	0x40015804
 8001980:	2000098c 	.word	0x2000098c
 8001984:	40015824 	.word	0x40015824

08001988 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	@ 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a64      	ldr	r2, [pc, #400]	@ (8001b28 <HAL_SAI_MspInit+0x1a0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d15e      	bne.n	8001a58 <HAL_SAI_MspInit+0xd0>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 800199a:	4b64      	ldr	r3, [pc, #400]	@ (8001b2c <HAL_SAI_MspInit+0x1a4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d113      	bne.n	80019ca <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80019a2:	4b63      	ldr	r3, [pc, #396]	@ (8001b30 <HAL_SAI_MspInit+0x1a8>)
 80019a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019a6:	4a62      	ldr	r2, [pc, #392]	@ (8001b30 <HAL_SAI_MspInit+0x1a8>)
 80019a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80019ae:	4b60      	ldr	r3, [pc, #384]	@ (8001b30 <HAL_SAI_MspInit+0x1a8>)
 80019b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2105      	movs	r1, #5
 80019be:	204b      	movs	r0, #75	@ 0x4b
 80019c0:	f001 fa86 	bl	8002ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 80019c4:	204b      	movs	r0, #75	@ 0x4b
 80019c6:	f001 fa9f 	bl	8002f08 <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 80019ca:	4b58      	ldr	r3, [pc, #352]	@ (8001b2c <HAL_SAI_MspInit+0x1a4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	3301      	adds	r3, #1
 80019d0:	4a56      	ldr	r2, [pc, #344]	@ (8001b2c <HAL_SAI_MspInit+0x1a4>)
 80019d2:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80019d4:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80019d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019da:	2302      	movs	r3, #2
 80019dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e2:	2300      	movs	r3, #0
 80019e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80019e6:	230d      	movs	r3, #13
 80019e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ea:	f107 0314 	add.w	r3, r7, #20
 80019ee:	4619      	mov	r1, r3
 80019f0:	4850      	ldr	r0, [pc, #320]	@ (8001b34 <HAL_SAI_MspInit+0x1ac>)
 80019f2:	f001 fd0d 	bl	8003410 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 80019f6:	4b50      	ldr	r3, [pc, #320]	@ (8001b38 <HAL_SAI_MspInit+0x1b0>)
 80019f8:	4a50      	ldr	r2, [pc, #320]	@ (8001b3c <HAL_SAI_MspInit+0x1b4>)
 80019fa:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 80019fc:	4b4e      	ldr	r3, [pc, #312]	@ (8001b38 <HAL_SAI_MspInit+0x1b0>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a02:	4b4d      	ldr	r3, [pc, #308]	@ (8001b38 <HAL_SAI_MspInit+0x1b0>)
 8001a04:	2210      	movs	r2, #16
 8001a06:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a08:	4b4b      	ldr	r3, [pc, #300]	@ (8001b38 <HAL_SAI_MspInit+0x1b0>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8001a0e:	4b4a      	ldr	r3, [pc, #296]	@ (8001b38 <HAL_SAI_MspInit+0x1b0>)
 8001a10:	2280      	movs	r2, #128	@ 0x80
 8001a12:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a14:	4b48      	ldr	r3, [pc, #288]	@ (8001b38 <HAL_SAI_MspInit+0x1b0>)
 8001a16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a1a:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a1c:	4b46      	ldr	r3, [pc, #280]	@ (8001b38 <HAL_SAI_MspInit+0x1b0>)
 8001a1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a22:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8001a24:	4b44      	ldr	r3, [pc, #272]	@ (8001b38 <HAL_SAI_MspInit+0x1b0>)
 8001a26:	2220      	movs	r2, #32
 8001a28:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8001a2a:	4b43      	ldr	r3, [pc, #268]	@ (8001b38 <HAL_SAI_MspInit+0x1b0>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8001a30:	4841      	ldr	r0, [pc, #260]	@ (8001b38 <HAL_SAI_MspInit+0x1b0>)
 8001a32:	f001 fa77 	bl	8002f24 <HAL_DMA_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8001a3c:	f7ff ff3e 	bl	80018bc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a3d      	ldr	r2, [pc, #244]	@ (8001b38 <HAL_SAI_MspInit+0x1b0>)
 8001a44:	671a      	str	r2, [r3, #112]	@ 0x70
 8001a46:	4a3c      	ldr	r2, [pc, #240]	@ (8001b38 <HAL_SAI_MspInit+0x1b0>)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a3a      	ldr	r2, [pc, #232]	@ (8001b38 <HAL_SAI_MspInit+0x1b0>)
 8001a50:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001a52:	4a39      	ldr	r2, [pc, #228]	@ (8001b38 <HAL_SAI_MspInit+0x1b0>)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a38      	ldr	r2, [pc, #224]	@ (8001b40 <HAL_SAI_MspInit+0x1b8>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d15e      	bne.n	8001b20 <HAL_SAI_MspInit+0x198>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8001a62:	4b32      	ldr	r3, [pc, #200]	@ (8001b2c <HAL_SAI_MspInit+0x1a4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d113      	bne.n	8001a92 <HAL_SAI_MspInit+0x10a>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001a6a:	4b31      	ldr	r3, [pc, #196]	@ (8001b30 <HAL_SAI_MspInit+0x1a8>)
 8001a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a6e:	4a30      	ldr	r2, [pc, #192]	@ (8001b30 <HAL_SAI_MspInit+0x1a8>)
 8001a70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a74:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a76:	4b2e      	ldr	r3, [pc, #184]	@ (8001b30 <HAL_SAI_MspInit+0x1a8>)
 8001a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2105      	movs	r1, #5
 8001a86:	204b      	movs	r0, #75	@ 0x4b
 8001a88:	f001 fa22 	bl	8002ed0 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8001a8c:	204b      	movs	r0, #75	@ 0x4b
 8001a8e:	f001 fa3b 	bl	8002f08 <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8001a92:	4b26      	ldr	r3, [pc, #152]	@ (8001b2c <HAL_SAI_MspInit+0x1a4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	3301      	adds	r3, #1
 8001a98:	4a24      	ldr	r2, [pc, #144]	@ (8001b2c <HAL_SAI_MspInit+0x1a4>)
 8001a9a:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001aae:	230d      	movs	r3, #13
 8001ab0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4822      	ldr	r0, [pc, #136]	@ (8001b44 <HAL_SAI_MspInit+0x1bc>)
 8001aba:	f001 fca9 	bl	8003410 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 8001abe:	4b22      	ldr	r3, [pc, #136]	@ (8001b48 <HAL_SAI_MspInit+0x1c0>)
 8001ac0:	4a22      	ldr	r2, [pc, #136]	@ (8001b4c <HAL_SAI_MspInit+0x1c4>)
 8001ac2:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 8001ac4:	4b20      	ldr	r3, [pc, #128]	@ (8001b48 <HAL_SAI_MspInit+0x1c0>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aca:	4b1f      	ldr	r3, [pc, #124]	@ (8001b48 <HAL_SAI_MspInit+0x1c0>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b48 <HAL_SAI_MspInit+0x1c0>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8001ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b48 <HAL_SAI_MspInit+0x1c0>)
 8001ad8:	2280      	movs	r2, #128	@ 0x80
 8001ada:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001adc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b48 <HAL_SAI_MspInit+0x1c0>)
 8001ade:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ae2:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ae4:	4b18      	ldr	r3, [pc, #96]	@ (8001b48 <HAL_SAI_MspInit+0x1c0>)
 8001ae6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001aea:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8001aec:	4b16      	ldr	r3, [pc, #88]	@ (8001b48 <HAL_SAI_MspInit+0x1c0>)
 8001aee:	2220      	movs	r2, #32
 8001af0:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8001af2:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <HAL_SAI_MspInit+0x1c0>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8001af8:	4813      	ldr	r0, [pc, #76]	@ (8001b48 <HAL_SAI_MspInit+0x1c0>)
 8001afa:	f001 fa13 	bl	8002f24 <HAL_DMA_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 8001b04:	f7ff feda 	bl	80018bc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a0f      	ldr	r2, [pc, #60]	@ (8001b48 <HAL_SAI_MspInit+0x1c0>)
 8001b0c:	671a      	str	r2, [r3, #112]	@ 0x70
 8001b0e:	4a0e      	ldr	r2, [pc, #56]	@ (8001b48 <HAL_SAI_MspInit+0x1c0>)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a0c      	ldr	r2, [pc, #48]	@ (8001b48 <HAL_SAI_MspInit+0x1c0>)
 8001b18:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001b1a:	4a0b      	ldr	r2, [pc, #44]	@ (8001b48 <HAL_SAI_MspInit+0x1c0>)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 8001b20:	bf00      	nop
 8001b22:	3728      	adds	r7, #40	@ 0x28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40015804 	.word	0x40015804
 8001b2c:	20000aa0 	.word	0x20000aa0
 8001b30:	40021000 	.word	0x40021000
 8001b34:	48000400 	.word	0x48000400
 8001b38:	20000a10 	.word	0x20000a10
 8001b3c:	4002006c 	.word	0x4002006c
 8001b40:	40015824 	.word	0x40015824
 8001b44:	48000800 	.word	0x48000800
 8001b48:	20000a58 	.word	0x20000a58
 8001b4c:	40020080 	.word	0x40020080

08001b50 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001b54:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc4 <MX_SPI3_Init+0x74>)
 8001b56:	4a1c      	ldr	r2, [pc, #112]	@ (8001bc8 <MX_SPI3_Init+0x78>)
 8001b58:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc4 <MX_SPI3_Init+0x74>)
 8001b5c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b60:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001b62:	4b18      	ldr	r3, [pc, #96]	@ (8001bc4 <MX_SPI3_Init+0x74>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b68:	4b16      	ldr	r3, [pc, #88]	@ (8001bc4 <MX_SPI3_Init+0x74>)
 8001b6a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001b6e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b70:	4b14      	ldr	r3, [pc, #80]	@ (8001bc4 <MX_SPI3_Init+0x74>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b76:	4b13      	ldr	r3, [pc, #76]	@ (8001bc4 <MX_SPI3_Init+0x74>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	@ (8001bc4 <MX_SPI3_Init+0x74>)
 8001b7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b82:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b84:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc4 <MX_SPI3_Init+0x74>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc4 <MX_SPI3_Init+0x74>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b90:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc4 <MX_SPI3_Init+0x74>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b96:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc4 <MX_SPI3_Init+0x74>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001b9c:	4b09      	ldr	r3, [pc, #36]	@ (8001bc4 <MX_SPI3_Init+0x74>)
 8001b9e:	2207      	movs	r2, #7
 8001ba0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ba2:	4b08      	ldr	r3, [pc, #32]	@ (8001bc4 <MX_SPI3_Init+0x74>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <MX_SPI3_Init+0x74>)
 8001baa:	2208      	movs	r2, #8
 8001bac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001bae:	4805      	ldr	r0, [pc, #20]	@ (8001bc4 <MX_SPI3_Init+0x74>)
 8001bb0:	f005 fd72 	bl	8007698 <HAL_SPI_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001bba:	f7ff fe7f 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000aa4 	.word	0x20000aa4
 8001bc8:	40003c00 	.word	0x40003c00

08001bcc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08a      	sub	sp, #40	@ 0x28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a29      	ldr	r2, [pc, #164]	@ (8001c90 <HAL_SPI_MspInit+0xc4>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d14c      	bne.n	8001c88 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001bee:	4b29      	ldr	r3, [pc, #164]	@ (8001c94 <HAL_SPI_MspInit+0xc8>)
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf2:	4a28      	ldr	r2, [pc, #160]	@ (8001c94 <HAL_SPI_MspInit+0xc8>)
 8001bf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bf8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bfa:	4b26      	ldr	r3, [pc, #152]	@ (8001c94 <HAL_SPI_MspInit+0xc8>)
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c06:	4b23      	ldr	r3, [pc, #140]	@ (8001c94 <HAL_SPI_MspInit+0xc8>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0a:	4a22      	ldr	r2, [pc, #136]	@ (8001c94 <HAL_SPI_MspInit+0xc8>)
 8001c0c:	f043 0304 	orr.w	r3, r3, #4
 8001c10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c12:	4b20      	ldr	r3, [pc, #128]	@ (8001c94 <HAL_SPI_MspInit+0xc8>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001c94 <HAL_SPI_MspInit+0xc8>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c22:	4a1c      	ldr	r2, [pc, #112]	@ (8001c94 <HAL_SPI_MspInit+0xc8>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c94 <HAL_SPI_MspInit+0xc8>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = VU_SCK_Pin|VU_MISO_Pin;
 8001c36:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c44:	2303      	movs	r3, #3
 8001c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c48:	2306      	movs	r3, #6
 8001c4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	4619      	mov	r1, r3
 8001c52:	4811      	ldr	r0, [pc, #68]	@ (8001c98 <HAL_SPI_MspInit+0xcc>)
 8001c54:	f001 fbdc 	bl	8003410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VU_MOSI_Pin;
 8001c58:	2320      	movs	r3, #32
 8001c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c64:	2303      	movs	r3, #3
 8001c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c68:	2306      	movs	r3, #6
 8001c6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(VU_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	4619      	mov	r1, r3
 8001c72:	480a      	ldr	r0, [pc, #40]	@ (8001c9c <HAL_SPI_MspInit+0xd0>)
 8001c74:	f001 fbcc 	bl	8003410 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2105      	movs	r1, #5
 8001c7c:	2033      	movs	r0, #51	@ 0x33
 8001c7e:	f001 f927 	bl	8002ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001c82:	2033      	movs	r0, #51	@ 0x33
 8001c84:	f001 f940 	bl	8002f08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001c88:	bf00      	nop
 8001c8a:	3728      	adds	r7, #40	@ 0x28
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40003c00 	.word	0x40003c00
 8001c94:	40021000 	.word	0x40021000
 8001c98:	48000800 	.word	0x48000800
 8001c9c:	48000400 	.word	0x48000400

08001ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca6:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <HAL_MspInit+0x4c>)
 8001ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001caa:	4a10      	ldr	r2, [pc, #64]	@ (8001cec <HAL_MspInit+0x4c>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cec <HAL_MspInit+0x4c>)
 8001cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001cec <HAL_MspInit+0x4c>)
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cec <HAL_MspInit+0x4c>)
 8001cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cca:	4b08      	ldr	r3, [pc, #32]	@ (8001cec <HAL_MspInit+0x4c>)
 8001ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	210f      	movs	r1, #15
 8001cda:	f06f 0001 	mvn.w	r0, #1
 8001cde:	f001 f8f7 	bl	8002ed0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000

08001cf0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08e      	sub	sp, #56	@ 0x38
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001cfe:	4b34      	ldr	r3, [pc, #208]	@ (8001dd0 <HAL_InitTick+0xe0>)
 8001d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d02:	4a33      	ldr	r2, [pc, #204]	@ (8001dd0 <HAL_InitTick+0xe0>)
 8001d04:	f043 0310 	orr.w	r3, r3, #16
 8001d08:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d0a:	4b31      	ldr	r3, [pc, #196]	@ (8001dd0 <HAL_InitTick+0xe0>)
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d0e:	f003 0310 	and.w	r3, r3, #16
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d16:	f107 0210 	add.w	r2, r7, #16
 8001d1a:	f107 0314 	add.w	r3, r7, #20
 8001d1e:	4611      	mov	r1, r2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f003 f979 	bl	8005018 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d26:	6a3b      	ldr	r3, [r7, #32]
 8001d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d103      	bne.n	8001d38 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d30:	f003 f946 	bl	8004fc0 <HAL_RCC_GetPCLK1Freq>
 8001d34:	6378      	str	r0, [r7, #52]	@ 0x34
 8001d36:	e004      	b.n	8001d42 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d38:	f003 f942 	bl	8004fc0 <HAL_RCC_GetPCLK1Freq>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d44:	4a23      	ldr	r2, [pc, #140]	@ (8001dd4 <HAL_InitTick+0xe4>)
 8001d46:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4a:	0c9b      	lsrs	r3, r3, #18
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d50:	4b21      	ldr	r3, [pc, #132]	@ (8001dd8 <HAL_InitTick+0xe8>)
 8001d52:	4a22      	ldr	r2, [pc, #136]	@ (8001ddc <HAL_InitTick+0xec>)
 8001d54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d56:	4b20      	ldr	r3, [pc, #128]	@ (8001dd8 <HAL_InitTick+0xe8>)
 8001d58:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d5c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8001dd8 <HAL_InitTick+0xe8>)
 8001d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d62:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d64:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd8 <HAL_InitTick+0xe8>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd8 <HAL_InitTick+0xe8>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d70:	4b19      	ldr	r3, [pc, #100]	@ (8001dd8 <HAL_InitTick+0xe8>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001d76:	4818      	ldr	r0, [pc, #96]	@ (8001dd8 <HAL_InitTick+0xe8>)
 8001d78:	f006 f920 	bl	8007fbc <HAL_TIM_Base_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001d82:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d11b      	bne.n	8001dc2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001d8a:	4813      	ldr	r0, [pc, #76]	@ (8001dd8 <HAL_InitTick+0xe8>)
 8001d8c:	f006 f978 	bl	8008080 <HAL_TIM_Base_Start_IT>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001d96:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d111      	bne.n	8001dc2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d9e:	2036      	movs	r0, #54	@ 0x36
 8001da0:	f001 f8b2 	bl	8002f08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b0f      	cmp	r3, #15
 8001da8:	d808      	bhi.n	8001dbc <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001daa:	2200      	movs	r2, #0
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	2036      	movs	r0, #54	@ 0x36
 8001db0:	f001 f88e 	bl	8002ed0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001db4:	4a0a      	ldr	r2, [pc, #40]	@ (8001de0 <HAL_InitTick+0xf0>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	e002      	b.n	8001dc2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001dc2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3738      	adds	r7, #56	@ 0x38
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	431bde83 	.word	0x431bde83
 8001dd8:	20000b08 	.word	0x20000b08
 8001ddc:	40001000 	.word	0x40001000
 8001de0:	2000000c 	.word	0x2000000c

08001de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <NMI_Handler+0x4>

08001dec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <HardFault_Handler+0x4>

08001df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df8:	bf00      	nop
 8001dfa:	e7fd      	b.n	8001df8 <MemManage_Handler+0x4>

08001dfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e00:	bf00      	nop
 8001e02:	e7fd      	b.n	8001e00 <BusFault_Handler+0x4>

08001e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <UsageFault_Handler+0x4>

08001e0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8001e20:	4802      	ldr	r0, [pc, #8]	@ (8001e2c <DMA1_Channel6_IRQHandler+0x10>)
 8001e22:	f001 fa16 	bl	8003252 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000a10 	.word	0x20000a10

08001e30 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8001e34:	4802      	ldr	r0, [pc, #8]	@ (8001e40 <DMA1_Channel7_IRQHandler+0x10>)
 8001e36:	f001 fa0c 	bl	8003252 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000a58 	.word	0x20000a58

08001e44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e48:	4802      	ldr	r0, [pc, #8]	@ (8001e54 <USART2_IRQHandler+0x10>)
 8001e4a:	f006 fca1 	bl	8008790 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000b58 	.word	0x20000b58

08001e58 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001e5c:	4802      	ldr	r0, [pc, #8]	@ (8001e68 <SPI3_IRQHandler+0x10>)
 8001e5e:	f005 fe35 	bl	8007acc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000aa4 	.word	0x20000aa4

08001e6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e70:	4802      	ldr	r0, [pc, #8]	@ (8001e7c <TIM6_DAC_IRQHandler+0x10>)
 8001e72:	f006 f975 	bl	8008160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000b08 	.word	0x20000b08

08001e80 <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 8001e84:	4803      	ldr	r0, [pc, #12]	@ (8001e94 <SAI2_IRQHandler+0x14>)
 8001e86:	f004 ffbb 	bl	8006e00 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 8001e8a:	4803      	ldr	r0, [pc, #12]	@ (8001e98 <SAI2_IRQHandler+0x18>)
 8001e8c:	f004 ffb8 	bl	8006e00 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000908 	.word	0x20000908
 8001e98:	2000098c 	.word	0x2000098c

08001e9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return 1;
 8001ea0:	2301      	movs	r3, #1
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <_kill>:

int _kill(int pid, int sig)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001eb6:	f00b f92b 	bl	800d110 <__errno>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2216      	movs	r2, #22
 8001ebe:	601a      	str	r2, [r3, #0]
  return -1;
 8001ec0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <_exit>:

void _exit (int status)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ed4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff ffe7 	bl	8001eac <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ede:	bf00      	nop
 8001ee0:	e7fd      	b.n	8001ede <_exit+0x12>

08001ee2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b086      	sub	sp, #24
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	e00a      	b.n	8001f0a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ef4:	f3af 8000 	nop.w
 8001ef8:	4601      	mov	r1, r0
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	60ba      	str	r2, [r7, #8]
 8001f00:	b2ca      	uxtb	r2, r1
 8001f02:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	3301      	adds	r3, #1
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	dbf0      	blt.n	8001ef4 <_read+0x12>
  }

  return len;
 8001f12:	687b      	ldr	r3, [r7, #4]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	e009      	b.n	8001f42 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	1c5a      	adds	r2, r3, #1
 8001f32:	60ba      	str	r2, [r7, #8]
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff f9e8 	bl	800130c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	dbf1      	blt.n	8001f2e <_write+0x12>
  }
  return len;
 8001f4a:	687b      	ldr	r3, [r7, #4]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <_close>:

int _close(int file)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f7c:	605a      	str	r2, [r3, #4]
  return 0;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <_isatty>:

int _isatty(int file)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f94:	2301      	movs	r3, #1
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b085      	sub	sp, #20
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fc4:	4a14      	ldr	r2, [pc, #80]	@ (8002018 <_sbrk+0x5c>)
 8001fc6:	4b15      	ldr	r3, [pc, #84]	@ (800201c <_sbrk+0x60>)
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fd0:	4b13      	ldr	r3, [pc, #76]	@ (8002020 <_sbrk+0x64>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d102      	bne.n	8001fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fd8:	4b11      	ldr	r3, [pc, #68]	@ (8002020 <_sbrk+0x64>)
 8001fda:	4a12      	ldr	r2, [pc, #72]	@ (8002024 <_sbrk+0x68>)
 8001fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fde:	4b10      	ldr	r3, [pc, #64]	@ (8002020 <_sbrk+0x64>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d207      	bcs.n	8001ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fec:	f00b f890 	bl	800d110 <__errno>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ffa:	e009      	b.n	8002010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ffc:	4b08      	ldr	r3, [pc, #32]	@ (8002020 <_sbrk+0x64>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002002:	4b07      	ldr	r3, [pc, #28]	@ (8002020 <_sbrk+0x64>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	4a05      	ldr	r2, [pc, #20]	@ (8002020 <_sbrk+0x64>)
 800200c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800200e:	68fb      	ldr	r3, [r7, #12]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20018000 	.word	0x20018000
 800201c:	00000400 	.word	0x00000400
 8002020:	20000b54 	.word	0x20000b54
 8002024:	20006010 	.word	0x20006010

08002028 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800202c:	4b06      	ldr	r3, [pc, #24]	@ (8002048 <SystemInit+0x20>)
 800202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002032:	4a05      	ldr	r2, [pc, #20]	@ (8002048 <SystemInit+0x20>)
 8002034:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002038:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002050:	4b14      	ldr	r3, [pc, #80]	@ (80020a4 <MX_USART2_UART_Init+0x58>)
 8002052:	4a15      	ldr	r2, [pc, #84]	@ (80020a8 <MX_USART2_UART_Init+0x5c>)
 8002054:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002056:	4b13      	ldr	r3, [pc, #76]	@ (80020a4 <MX_USART2_UART_Init+0x58>)
 8002058:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800205c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800205e:	4b11      	ldr	r3, [pc, #68]	@ (80020a4 <MX_USART2_UART_Init+0x58>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002064:	4b0f      	ldr	r3, [pc, #60]	@ (80020a4 <MX_USART2_UART_Init+0x58>)
 8002066:	2200      	movs	r2, #0
 8002068:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800206a:	4b0e      	ldr	r3, [pc, #56]	@ (80020a4 <MX_USART2_UART_Init+0x58>)
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002070:	4b0c      	ldr	r3, [pc, #48]	@ (80020a4 <MX_USART2_UART_Init+0x58>)
 8002072:	220c      	movs	r2, #12
 8002074:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002076:	4b0b      	ldr	r3, [pc, #44]	@ (80020a4 <MX_USART2_UART_Init+0x58>)
 8002078:	2200      	movs	r2, #0
 800207a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800207c:	4b09      	ldr	r3, [pc, #36]	@ (80020a4 <MX_USART2_UART_Init+0x58>)
 800207e:	2200      	movs	r2, #0
 8002080:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002082:	4b08      	ldr	r3, [pc, #32]	@ (80020a4 <MX_USART2_UART_Init+0x58>)
 8002084:	2200      	movs	r2, #0
 8002086:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002088:	4b06      	ldr	r3, [pc, #24]	@ (80020a4 <MX_USART2_UART_Init+0x58>)
 800208a:	2200      	movs	r2, #0
 800208c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800208e:	4805      	ldr	r0, [pc, #20]	@ (80020a4 <MX_USART2_UART_Init+0x58>)
 8002090:	f006 fa5a 	bl	8008548 <HAL_UART_Init>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800209a:	f7ff fc0f 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000b58 	.word	0x20000b58
 80020a8:	40004400 	.word	0x40004400

080020ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b0ac      	sub	sp, #176	@ 0xb0
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020c4:	f107 0314 	add.w	r3, r7, #20
 80020c8:	2288      	movs	r2, #136	@ 0x88
 80020ca:	2100      	movs	r1, #0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f00a ff77 	bl	800cfc0 <memset>
  if(uartHandle->Instance==USART2)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a25      	ldr	r2, [pc, #148]	@ (800216c <HAL_UART_MspInit+0xc0>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d143      	bne.n	8002164 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020dc:	2302      	movs	r3, #2
 80020de:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020e0:	2300      	movs	r3, #0
 80020e2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	4618      	mov	r0, r3
 80020ea:	f003 f827 	bl	800513c <HAL_RCCEx_PeriphCLKConfig>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020f4:	f7ff fbe2 	bl	80018bc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002170 <HAL_UART_MspInit+0xc4>)
 80020fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002170 <HAL_UART_MspInit+0xc4>)
 80020fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002102:	6593      	str	r3, [r2, #88]	@ 0x58
 8002104:	4b1a      	ldr	r3, [pc, #104]	@ (8002170 <HAL_UART_MspInit+0xc4>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002108:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002110:	4b17      	ldr	r3, [pc, #92]	@ (8002170 <HAL_UART_MspInit+0xc4>)
 8002112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002114:	4a16      	ldr	r2, [pc, #88]	@ (8002170 <HAL_UART_MspInit+0xc4>)
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800211c:	4b14      	ldr	r3, [pc, #80]	@ (8002170 <HAL_UART_MspInit+0xc4>)
 800211e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002128:	230c      	movs	r3, #12
 800212a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212e:	2302      	movs	r3, #2
 8002130:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213a:	2303      	movs	r3, #3
 800213c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002140:	2307      	movs	r3, #7
 8002142:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002146:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800214a:	4619      	mov	r1, r3
 800214c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002150:	f001 f95e 	bl	8003410 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002154:	2200      	movs	r2, #0
 8002156:	2105      	movs	r1, #5
 8002158:	2026      	movs	r0, #38	@ 0x26
 800215a:	f000 feb9 	bl	8002ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800215e:	2026      	movs	r0, #38	@ 0x26
 8002160:	f000 fed2 	bl	8002f08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002164:	bf00      	nop
 8002166:	37b0      	adds	r7, #176	@ 0xb0
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40004400 	.word	0x40004400
 8002170:	40021000 	.word	0x40021000

08002174 <Reset_Handler>:
 8002174:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021ac <LoopForever+0x2>
 8002178:	f7ff ff56 	bl	8002028 <SystemInit>
 800217c:	480c      	ldr	r0, [pc, #48]	@ (80021b0 <LoopForever+0x6>)
 800217e:	490d      	ldr	r1, [pc, #52]	@ (80021b4 <LoopForever+0xa>)
 8002180:	4a0d      	ldr	r2, [pc, #52]	@ (80021b8 <LoopForever+0xe>)
 8002182:	2300      	movs	r3, #0
 8002184:	e002      	b.n	800218c <LoopCopyDataInit>

08002186 <CopyDataInit>:
 8002186:	58d4      	ldr	r4, [r2, r3]
 8002188:	50c4      	str	r4, [r0, r3]
 800218a:	3304      	adds	r3, #4

0800218c <LoopCopyDataInit>:
 800218c:	18c4      	adds	r4, r0, r3
 800218e:	428c      	cmp	r4, r1
 8002190:	d3f9      	bcc.n	8002186 <CopyDataInit>
 8002192:	4a0a      	ldr	r2, [pc, #40]	@ (80021bc <LoopForever+0x12>)
 8002194:	4c0a      	ldr	r4, [pc, #40]	@ (80021c0 <LoopForever+0x16>)
 8002196:	2300      	movs	r3, #0
 8002198:	e001      	b.n	800219e <LoopFillZerobss>

0800219a <FillZerobss>:
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	3204      	adds	r2, #4

0800219e <LoopFillZerobss>:
 800219e:	42a2      	cmp	r2, r4
 80021a0:	d3fb      	bcc.n	800219a <FillZerobss>
 80021a2:	f00a ffbb 	bl	800d11c <__libc_init_array>
 80021a6:	f7ff fa31 	bl	800160c <main>

080021aa <LoopForever>:
 80021aa:	e7fe      	b.n	80021aa <LoopForever>
 80021ac:	20018000 	.word	0x20018000
 80021b0:	20000000 	.word	0x20000000
 80021b4:	200001e0 	.word	0x200001e0
 80021b8:	08011368 	.word	0x08011368
 80021bc:	200001e0 	.word	0x200001e0
 80021c0:	2000600c 	.word	0x2000600c

080021c4 <ADC1_2_IRQHandler>:
 80021c4:	e7fe      	b.n	80021c4 <ADC1_2_IRQHandler>
	...

080021c8 <MCP23S17_WriteRegister>:
h_MCP23S17_t hMCP23S17;


// Function to write to a register of MCP23S17 with error handling
void MCP23S17_WriteRegister(uint8_t reg, uint8_t data)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	460a      	mov	r2, r1
 80021d2:	71fb      	strb	r3, [r7, #7]
 80021d4:	4613      	mov	r3, r2
 80021d6:	71bb      	strb	r3, [r7, #6]
	uint8_t control_byte = MCP23S17_CONTROL_BYTE(MCP23S17_CONTROL_ADDR, VU_WRITE); // Address = 0b000
 80021d8:	2340      	movs	r3, #64	@ 0x40
 80021da:	73bb      	strb	r3, [r7, #14]

	uint8_t buffer[2] = {reg, data};
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	733b      	strb	r3, [r7, #12]
 80021e0:	79bb      	ldrb	r3, [r7, #6]
 80021e2:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status;

	// Assert chip select
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 80021e4:	2200      	movs	r2, #0
 80021e6:	2180      	movs	r1, #128	@ 0x80
 80021e8:	4820      	ldr	r0, [pc, #128]	@ (800226c <MCP23S17_WriteRegister+0xa4>)
 80021ea:	f001 fabb 	bl	8003764 <HAL_GPIO_WritePin>

	// Transmit control byte
	status = HAL_SPI_Transmit(hMCP23S17.hspi, &control_byte, 1, HAL_MAX_DELAY);
 80021ee:	4b20      	ldr	r3, [pc, #128]	@ (8002270 <MCP23S17_WriteRegister+0xa8>)
 80021f0:	6818      	ldr	r0, [r3, #0]
 80021f2:	f107 010e 	add.w	r1, r7, #14
 80021f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021fa:	2201      	movs	r2, #1
 80021fc:	f005 faef 	bl	80077de <HAL_SPI_Transmit>
 8002200:	4603      	mov	r3, r0
 8002202:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00c      	beq.n	8002224 <MCP23S17_WriteRegister+0x5c>
		HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET); // Deassert chip select
 800220a:	2201      	movs	r2, #1
 800220c:	2180      	movs	r1, #128	@ 0x80
 800220e:	4817      	ldr	r0, [pc, #92]	@ (800226c <MCP23S17_WriteRegister+0xa4>)
 8002210:	f001 faa8 	bl	8003764 <HAL_GPIO_WritePin>
		printf("Error: Failed to transmit control byte (HAL_SPI_Transmit returned %d)\r\n", status);
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	4619      	mov	r1, r3
 8002218:	4816      	ldr	r0, [pc, #88]	@ (8002274 <MCP23S17_WriteRegister+0xac>)
 800221a:	f00a fd35 	bl	800cc88 <iprintf>
		Error_Handler(); // Handle the error
 800221e:	f7ff fb4d 	bl	80018bc <Error_Handler>
		return; // Prevent further execution
 8002222:	e01f      	b.n	8002264 <MCP23S17_WriteRegister+0x9c>
#if (LOGS)
	printf("SPI3 control transmission status: %d\r\n", status);
#endif

	// Transmit register address and data
	status = HAL_SPI_Transmit(hMCP23S17.hspi, buffer, 2, HAL_MAX_DELAY);
 8002224:	4b12      	ldr	r3, [pc, #72]	@ (8002270 <MCP23S17_WriteRegister+0xa8>)
 8002226:	6818      	ldr	r0, [r3, #0]
 8002228:	f107 010c 	add.w	r1, r7, #12
 800222c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002230:	2202      	movs	r2, #2
 8002232:	f005 fad4 	bl	80077de <HAL_SPI_Transmit>
 8002236:	4603      	mov	r3, r0
 8002238:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00c      	beq.n	800225a <MCP23S17_WriteRegister+0x92>
		HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET); // Deassert chip select
 8002240:	2201      	movs	r2, #1
 8002242:	2180      	movs	r1, #128	@ 0x80
 8002244:	4809      	ldr	r0, [pc, #36]	@ (800226c <MCP23S17_WriteRegister+0xa4>)
 8002246:	f001 fa8d 	bl	8003764 <HAL_GPIO_WritePin>
		printf("Error: Failed to transmit register data (HAL_SPI_Transmit returned %d)\r\n", status);
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	4619      	mov	r1, r3
 800224e:	480a      	ldr	r0, [pc, #40]	@ (8002278 <MCP23S17_WriteRegister+0xb0>)
 8002250:	f00a fd1a 	bl	800cc88 <iprintf>
		Error_Handler(); // Handle the error
 8002254:	f7ff fb32 	bl	80018bc <Error_Handler>
		return; // Prevent further execution
 8002258:	e004      	b.n	8002264 <MCP23S17_WriteRegister+0x9c>
#if (LOGS)
	printf("SPI3 data Ox%X transmission to register 0x%X status: %d\r\n", data, reg, status);
#endif

	// Deassert chip select
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 800225a:	2201      	movs	r2, #1
 800225c:	2180      	movs	r1, #128	@ 0x80
 800225e:	4803      	ldr	r0, [pc, #12]	@ (800226c <MCP23S17_WriteRegister+0xa4>)
 8002260:	f001 fa80 	bl	8003764 <HAL_GPIO_WritePin>
}
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	48000400 	.word	0x48000400
 8002270:	20000be0 	.word	0x20000be0
 8002274:	08010b44 	.word	0x08010b44
 8002278:	08010b8c 	.word	0x08010b8c

0800227c <MCP23S17_Update_LEDs>:

void MCP23S17_Update_LEDs()
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
	MCP23S17_WriteRegister(MCP23S17_OLATA, hMCP23S17.GPA);
 8002280:	4b06      	ldr	r3, [pc, #24]	@ (800229c <MCP23S17_Update_LEDs+0x20>)
 8002282:	791b      	ldrb	r3, [r3, #4]
 8002284:	4619      	mov	r1, r3
 8002286:	2014      	movs	r0, #20
 8002288:	f7ff ff9e 	bl	80021c8 <MCP23S17_WriteRegister>
	MCP23S17_WriteRegister(MCP23S17_OLATB, hMCP23S17.GPB);
 800228c:	4b03      	ldr	r3, [pc, #12]	@ (800229c <MCP23S17_Update_LEDs+0x20>)
 800228e:	795b      	ldrb	r3, [r3, #5]
 8002290:	4619      	mov	r1, r3
 8002292:	2015      	movs	r0, #21
 8002294:	f7ff ff98 	bl	80021c8 <MCP23S17_WriteRegister>
}
 8002298:	bf00      	nop
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000be0 	.word	0x20000be0

080022a0 <MCP23S17_Init>:

void MCP23S17_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
	hMCP23S17.hspi = &hspi3;
 80022a4:	4b12      	ldr	r3, [pc, #72]	@ (80022f0 <MCP23S17_Init+0x50>)
 80022a6:	4a13      	ldr	r2, [pc, #76]	@ (80022f4 <MCP23S17_Init+0x54>)
 80022a8:	601a      	str	r2, [r3, #0]

	HAL_SPI_Init(hMCP23S17.hspi);
 80022aa:	4b11      	ldr	r3, [pc, #68]	@ (80022f0 <MCP23S17_Init+0x50>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f005 f9f2 	bl	8007698 <HAL_SPI_Init>

	// nRESET to base state
	HAL_GPIO_WritePin(VU_nRESET_GPIO_Port, VU_nRESET_Pin, GPIO_PIN_SET);
 80022b4:	2201      	movs	r2, #1
 80022b6:	2101      	movs	r1, #1
 80022b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022bc:	f001 fa52 	bl	8003764 <HAL_GPIO_WritePin>

	// nCS to reset state
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 80022c0:	2201      	movs	r2, #1
 80022c2:	2180      	movs	r1, #128	@ 0x80
 80022c4:	480c      	ldr	r0, [pc, #48]	@ (80022f8 <MCP23S17_Init+0x58>)
 80022c6:	f001 fa4d 	bl	8003764 <HAL_GPIO_WritePin>

	// Set all GPIOA and GPIOB pins as outputs
	MCP23S17_WriteRegister(MCP23S17_IODIRA, MCP23S17_ALL_ON); // GPA as output
 80022ca:	2100      	movs	r1, #0
 80022cc:	2000      	movs	r0, #0
 80022ce:	f7ff ff7b 	bl	80021c8 <MCP23S17_WriteRegister>
	MCP23S17_WriteRegister(MCP23S17_IODIRB, MCP23S17_ALL_ON); // GPB as output
 80022d2:	2100      	movs	r1, #0
 80022d4:	2001      	movs	r0, #1
 80022d6:	f7ff ff77 	bl	80021c8 <MCP23S17_WriteRegister>

	hMCP23S17.GPA = 0xFF;	// All LEDs on GPIOA OFF
 80022da:	4b05      	ldr	r3, [pc, #20]	@ (80022f0 <MCP23S17_Init+0x50>)
 80022dc:	22ff      	movs	r2, #255	@ 0xff
 80022de:	711a      	strb	r2, [r3, #4]
	hMCP23S17.GPB = 0xFF;	// All LEDs on GPIOB OFF
 80022e0:	4b03      	ldr	r3, [pc, #12]	@ (80022f0 <MCP23S17_Init+0x50>)
 80022e2:	22ff      	movs	r2, #255	@ 0xff
 80022e4:	715a      	strb	r2, [r3, #5]

	MCP23S17_Update_LEDs();
 80022e6:	f7ff ffc9 	bl	800227c <MCP23S17_Update_LEDs>
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000be0 	.word	0x20000be0
 80022f4:	20000aa4 	.word	0x20000aa4
 80022f8:	48000400 	.word	0x48000400

080022fc <MCP23S17_Set_LED_id>:

void MCP23S17_Set_LED_id(uint8_t led)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	71fb      	strb	r3, [r7, #7]
	if (led > 7)
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	2b07      	cmp	r3, #7
 800230a:	d90e      	bls.n	800232a <MCP23S17_Set_LED_id+0x2e>
	{
		hMCP23S17.GPB = ~(1 << led%8);
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	2201      	movs	r2, #1
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	b2db      	uxtb	r3, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	b2da      	uxtb	r2, r3
 800231e:	4b0c      	ldr	r3, [pc, #48]	@ (8002350 <MCP23S17_Set_LED_id+0x54>)
 8002320:	715a      	strb	r2, [r3, #5]
		hMCP23S17.GPA = 0xFF; // All LEDs on GPIOA OFF
 8002322:	4b0b      	ldr	r3, [pc, #44]	@ (8002350 <MCP23S17_Set_LED_id+0x54>)
 8002324:	22ff      	movs	r2, #255	@ 0xff
 8002326:	711a      	strb	r2, [r3, #4]
 8002328:	e00b      	b.n	8002342 <MCP23S17_Set_LED_id+0x46>
	}
	else
	{
		hMCP23S17.GPA = ~(1 << led);
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	2201      	movs	r2, #1
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	b2db      	uxtb	r3, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	b2da      	uxtb	r2, r3
 8002338:	4b05      	ldr	r3, [pc, #20]	@ (8002350 <MCP23S17_Set_LED_id+0x54>)
 800233a:	711a      	strb	r2, [r3, #4]
		hMCP23S17.GPB = 0xFF; // All LEDs on GPIOB OFF
 800233c:	4b04      	ldr	r3, [pc, #16]	@ (8002350 <MCP23S17_Set_LED_id+0x54>)
 800233e:	22ff      	movs	r2, #255	@ 0xff
 8002340:	715a      	strb	r2, [r3, #5]
	}

	MCP23S17_Update_LEDs();
 8002342:	f7ff ff9b 	bl	800227c <MCP23S17_Update_LEDs>
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000be0 	.word	0x20000be0

08002354 <MCP23S17_Toggle_LED_id>:

void MCP23S17_Toggle_LED_id(uint8_t led)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	71fb      	strb	r3, [r7, #7]
	if (led > 7)
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	2b07      	cmp	r3, #7
 8002362:	d90f      	bls.n	8002384 <MCP23S17_Toggle_LED_id+0x30>
	{
		hMCP23S17.GPB = (hMCP23S17.GPB & ~(1 << led%8)) | (~hMCP23S17.GPB & (1 << led%8));
 8002364:	4b11      	ldr	r3, [pc, #68]	@ (80023ac <MCP23S17_Toggle_LED_id+0x58>)
 8002366:	795b      	ldrb	r3, [r3, #5]
 8002368:	b25a      	sxtb	r2, r3
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	2101      	movs	r1, #1
 8002372:	fa01 f303 	lsl.w	r3, r1, r3
 8002376:	b25b      	sxtb	r3, r3
 8002378:	4053      	eors	r3, r2
 800237a:	b25b      	sxtb	r3, r3
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4b0b      	ldr	r3, [pc, #44]	@ (80023ac <MCP23S17_Toggle_LED_id+0x58>)
 8002380:	715a      	strb	r2, [r3, #5]
 8002382:	e00c      	b.n	800239e <MCP23S17_Toggle_LED_id+0x4a>
	}
	else
	{
		hMCP23S17.GPA = (hMCP23S17.GPA & ~(1 << led)) | (~hMCP23S17.GPA & (1 << led));
 8002384:	4b09      	ldr	r3, [pc, #36]	@ (80023ac <MCP23S17_Toggle_LED_id+0x58>)
 8002386:	791b      	ldrb	r3, [r3, #4]
 8002388:	b25a      	sxtb	r2, r3
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	2101      	movs	r1, #1
 800238e:	fa01 f303 	lsl.w	r3, r1, r3
 8002392:	b25b      	sxtb	r3, r3
 8002394:	4053      	eors	r3, r2
 8002396:	b25b      	sxtb	r3, r3
 8002398:	b2da      	uxtb	r2, r3
 800239a:	4b04      	ldr	r3, [pc, #16]	@ (80023ac <MCP23S17_Toggle_LED_id+0x58>)
 800239c:	711a      	strb	r2, [r3, #4]
	}

	MCP23S17_Update_LEDs();
 800239e:	f7ff ff6d 	bl	800227c <MCP23S17_Update_LEDs>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000be0 	.word	0x20000be0

080023b0 <MCP23S17_level_R>:

/*
 * @param level in percentage
 */
void MCP23S17_level_R(int level)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
	if (level > 100) level = 100;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b64      	cmp	r3, #100	@ 0x64
 80023bc:	dd01      	ble.n	80023c2 <MCP23S17_level_R+0x12>
 80023be:	2364      	movs	r3, #100	@ 0x64
 80023c0:	607b      	str	r3, [r7, #4]
	if (level <= 0) level = 0;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	dc01      	bgt.n	80023cc <MCP23S17_level_R+0x1c>
 80023c8:	2300      	movs	r3, #0
 80023ca:	607b      	str	r3, [r7, #4]

	if (level <= 100)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b64      	cmp	r3, #100	@ 0x64
 80023d0:	dc0f      	bgt.n	80023f2 <MCP23S17_level_R+0x42>
	{
		hMCP23S17.GPA = 0xFF & (0x00FF << (int)(8*level/100));
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4a09      	ldr	r2, [pc, #36]	@ (80023fc <MCP23S17_level_R+0x4c>)
 80023d8:	fb82 1203 	smull	r1, r2, r2, r3
 80023dc:	1152      	asrs	r2, r2, #5
 80023de:	17db      	asrs	r3, r3, #31
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	22ff      	movs	r2, #255	@ 0xff
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	4b05      	ldr	r3, [pc, #20]	@ (8002400 <MCP23S17_level_R+0x50>)
 80023ec:	711a      	strb	r2, [r3, #4]

		MCP23S17_Update_LEDs();
 80023ee:	f7ff ff45 	bl	800227c <MCP23S17_Update_LEDs>
	}
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	51eb851f 	.word	0x51eb851f
 8002400:	20000be0 	.word	0x20000be0

08002404 <MCP23S17_level_L>:

/*
 * @param level in percentage
 */
void MCP23S17_level_L(int level)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
	if (level > 100) level = 100;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b64      	cmp	r3, #100	@ 0x64
 8002410:	dd01      	ble.n	8002416 <MCP23S17_level_L+0x12>
 8002412:	2364      	movs	r3, #100	@ 0x64
 8002414:	607b      	str	r3, [r7, #4]
	if (level <= 0) level = 0;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	dc01      	bgt.n	8002420 <MCP23S17_level_L+0x1c>
 800241c:	2300      	movs	r3, #0
 800241e:	607b      	str	r3, [r7, #4]

	if (level <= 100)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b64      	cmp	r3, #100	@ 0x64
 8002424:	dc0f      	bgt.n	8002446 <MCP23S17_level_L+0x42>
	{
		hMCP23S17.GPB = 0xFF & (0x00FF << (int)(8*level/100));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	4a09      	ldr	r2, [pc, #36]	@ (8002450 <MCP23S17_level_L+0x4c>)
 800242c:	fb82 1203 	smull	r1, r2, r2, r3
 8002430:	1152      	asrs	r2, r2, #5
 8002432:	17db      	asrs	r3, r3, #31
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	22ff      	movs	r2, #255	@ 0xff
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	b2da      	uxtb	r2, r3
 800243e:	4b05      	ldr	r3, [pc, #20]	@ (8002454 <MCP23S17_level_L+0x50>)
 8002440:	715a      	strb	r2, [r3, #5]

		MCP23S17_Update_LEDs();
 8002442:	f7ff ff1b 	bl	800227c <MCP23S17_Update_LEDs>
	}
}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	51eb851f 	.word	0x51eb851f
 8002454:	20000be0 	.word	0x20000be0

08002458 <__NVIC_SystemReset>:
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800245c:	f3bf 8f4f 	dsb	sy
}
 8002460:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002462:	4b06      	ldr	r3, [pc, #24]	@ (800247c <__NVIC_SystemReset+0x24>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800246a:	4904      	ldr	r1, [pc, #16]	@ (800247c <__NVIC_SystemReset+0x24>)
 800246c:	4b04      	ldr	r3, [pc, #16]	@ (8002480 <__NVIC_SystemReset+0x28>)
 800246e:	4313      	orrs	r3, r2
 8002470:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002472:	f3bf 8f4f 	dsb	sy
}
 8002476:	bf00      	nop
    __NOP();
 8002478:	bf00      	nop
 800247a:	e7fd      	b.n	8002478 <__NVIC_SystemReset+0x20>
 800247c:	e000ed00 	.word	0xe000ed00
 8002480:	05fa0004 	.word	0x05fa0004

08002484 <SGTL5000_ErrorHandler>:
/**
 * @brief Error handler for SGTL5000 operations.
 * @param message: Error message to display.
 */
void SGTL5000_ErrorHandler(const char* message)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
	printf("SGTL5000 Error: %s\r\n", message);
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	4803      	ldr	r0, [pc, #12]	@ (800249c <SGTL5000_ErrorHandler+0x18>)
 8002490:	f00a fbfa 	bl	800cc88 <iprintf>
	Error_Handler();
 8002494:	f7ff fa12 	bl	80018bc <Error_Handler>
	NVIC_SystemReset();
 8002498:	f7ff ffde 	bl	8002458 <__NVIC_SystemReset>
 800249c:	08010bd8 	.word	0x08010bd8

080024a0 <SGTL5000_i2c_ReadRegister>:
 * @param address: Register address to read from.
 * @param pData: Pointer to data buffer for storing the read data.
 * @param length: Number of bytes to read.
 */
void SGTL5000_i2c_ReadRegister(uint16_t address, uint8_t* pData, uint16_t length)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af04      	add	r7, sp, #16
 80024a6:	4603      	mov	r3, r0
 80024a8:	6039      	str	r1, [r7, #0]
 80024aa:	80fb      	strh	r3, [r7, #6]
 80024ac:	4613      	mov	r3, r2
 80024ae:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hSGTL5000.hi2c, SGTL5000_CODEC,
 80024b0:	4b0f      	ldr	r3, [pc, #60]	@ (80024f0 <SGTL5000_i2c_ReadRegister+0x50>)
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	88fa      	ldrh	r2, [r7, #6]
 80024b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024ba:	9302      	str	r3, [sp, #8]
 80024bc:	88bb      	ldrh	r3, [r7, #4]
 80024be:	9301      	str	r3, [sp, #4]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	2302      	movs	r3, #2
 80024c6:	2114      	movs	r1, #20
 80024c8:	f001 fb2e 	bl	8003b28 <HAL_I2C_Mem_Read>
 80024cc:	4603      	mov	r3, r0
 80024ce:	73fb      	strb	r3, [r7, #15]
			address, SGTL5000_MEM_SIZE, pData, length, HAL_MAX_DELAY);

	if (status != HAL_OK) {
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d007      	beq.n	80024e6 <SGTL5000_i2c_ReadRegister+0x46>
		printf("Error: Failed to read from address 0x%04X\r\n", address);
 80024d6:	88fb      	ldrh	r3, [r7, #6]
 80024d8:	4619      	mov	r1, r3
 80024da:	4806      	ldr	r0, [pc, #24]	@ (80024f4 <SGTL5000_i2c_ReadRegister+0x54>)
 80024dc:	f00a fbd4 	bl	800cc88 <iprintf>
		SGTL5000_ErrorHandler("ReadRegister failed");
 80024e0:	4805      	ldr	r0, [pc, #20]	@ (80024f8 <SGTL5000_i2c_ReadRegister+0x58>)
 80024e2:	f7ff ffcf 	bl	8002484 <SGTL5000_ErrorHandler>
	}
}
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000be8 	.word	0x20000be8
 80024f4:	08010bf0 	.word	0x08010bf0
 80024f8:	08010c1c 	.word	0x08010c1c

080024fc <SGTL5000_i2c_WriteRegister>:
 * @brief Writes data to a register of SGTL5000 with error management.
 * @param address: Register address to write to.
 * @param value: Data value to write to the register.
 */
void SGTL5000_i2c_WriteRegister(uint16_t address, uint16_t value)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af04      	add	r7, sp, #16
 8002502:	4603      	mov	r3, r0
 8002504:	460a      	mov	r2, r1
 8002506:	80fb      	strh	r3, [r7, #6]
 8002508:	4613      	mov	r3, r2
 800250a:	80bb      	strh	r3, [r7, #4]
	uint8_t data[2] = { (uint8_t)(value >> 8), (uint8_t)(value & 0xFF) };
 800250c:	88bb      	ldrh	r3, [r7, #4]
 800250e:	0a1b      	lsrs	r3, r3, #8
 8002510:	b29b      	uxth	r3, r3
 8002512:	b2db      	uxtb	r3, r3
 8002514:	733b      	strb	r3, [r7, #12]
 8002516:	88bb      	ldrh	r3, [r7, #4]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(hSGTL5000.hi2c, SGTL5000_CODEC,
 800251c:	4b26      	ldr	r3, [pc, #152]	@ (80025b8 <SGTL5000_i2c_WriteRegister+0xbc>)
 800251e:	6818      	ldr	r0, [r3, #0]
 8002520:	88fa      	ldrh	r2, [r7, #6]
 8002522:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002526:	9302      	str	r3, [sp, #8]
 8002528:	2302      	movs	r3, #2
 800252a:	9301      	str	r3, [sp, #4]
 800252c:	f107 030c 	add.w	r3, r7, #12
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	2302      	movs	r3, #2
 8002534:	2114      	movs	r1, #20
 8002536:	f001 f9e3 	bl	8003900 <HAL_I2C_Mem_Write>
 800253a:	4603      	mov	r3, r0
 800253c:	73fb      	strb	r3, [r7, #15]
			address, SGTL5000_MEM_SIZE, data, 2, HAL_MAX_DELAY);

	// Handle all possible I2C errors
	switch (status) {
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	2b03      	cmp	r3, #3
 8002542:	d829      	bhi.n	8002598 <SGTL5000_i2c_WriteRegister+0x9c>
 8002544:	a201      	add	r2, pc, #4	@ (adr r2, 800254c <SGTL5000_i2c_WriteRegister+0x50>)
 8002546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254a:	bf00      	nop
 800254c:	080025ad 	.word	0x080025ad
 8002550:	0800255d 	.word	0x0800255d
 8002554:	08002571 	.word	0x08002571
 8002558:	08002585 	.word	0x08002585
#endif
		break;

	case HAL_ERROR:
		// General HAL error
		printf("Error: HAL_ERROR while writing 0x%04X to address 0x%04X\r\n", value, address);
 800255c:	88bb      	ldrh	r3, [r7, #4]
 800255e:	88fa      	ldrh	r2, [r7, #6]
 8002560:	4619      	mov	r1, r3
 8002562:	4816      	ldr	r0, [pc, #88]	@ (80025bc <SGTL5000_i2c_WriteRegister+0xc0>)
 8002564:	f00a fb90 	bl	800cc88 <iprintf>
		SGTL5000_ErrorHandler("General HAL_ERROR during WriteRegister");
 8002568:	4815      	ldr	r0, [pc, #84]	@ (80025c0 <SGTL5000_i2c_WriteRegister+0xc4>)
 800256a:	f7ff ff8b 	bl	8002484 <SGTL5000_ErrorHandler>
		break;
 800256e:	e01e      	b.n	80025ae <SGTL5000_i2c_WriteRegister+0xb2>

	case HAL_BUSY:
		// HAL busy error
		printf("Error: HAL_BUSY, I2C bus is busy while writing 0x%04X to 0x%04X\r\n", value, address);
 8002570:	88bb      	ldrh	r3, [r7, #4]
 8002572:	88fa      	ldrh	r2, [r7, #6]
 8002574:	4619      	mov	r1, r3
 8002576:	4813      	ldr	r0, [pc, #76]	@ (80025c4 <SGTL5000_i2c_WriteRegister+0xc8>)
 8002578:	f00a fb86 	bl	800cc88 <iprintf>
		SGTL5000_ErrorHandler("I2C bus busy during WriteRegister");
 800257c:	4812      	ldr	r0, [pc, #72]	@ (80025c8 <SGTL5000_i2c_WriteRegister+0xcc>)
 800257e:	f7ff ff81 	bl	8002484 <SGTL5000_ErrorHandler>
		break;
 8002582:	e014      	b.n	80025ae <SGTL5000_i2c_WriteRegister+0xb2>

	case HAL_TIMEOUT:
		// Timeout error
		printf("Error: HAL_TIMEOUT while writing 0x%04X to address 0x%04X\r\n", value, address);
 8002584:	88bb      	ldrh	r3, [r7, #4]
 8002586:	88fa      	ldrh	r2, [r7, #6]
 8002588:	4619      	mov	r1, r3
 800258a:	4810      	ldr	r0, [pc, #64]	@ (80025cc <SGTL5000_i2c_WriteRegister+0xd0>)
 800258c:	f00a fb7c 	bl	800cc88 <iprintf>
		SGTL5000_ErrorHandler("Timeout during WriteRegister");
 8002590:	480f      	ldr	r0, [pc, #60]	@ (80025d0 <SGTL5000_i2c_WriteRegister+0xd4>)
 8002592:	f7ff ff77 	bl	8002484 <SGTL5000_ErrorHandler>
		break;
 8002596:	e00a      	b.n	80025ae <SGTL5000_i2c_WriteRegister+0xb2>

	default:
		// Unexpected error code
		printf("Error: Unknown error (status code: %d) while writing 0x%04X to address 0x%04X\r\n", status, value, address);
 8002598:	7bf9      	ldrb	r1, [r7, #15]
 800259a:	88ba      	ldrh	r2, [r7, #4]
 800259c:	88fb      	ldrh	r3, [r7, #6]
 800259e:	480d      	ldr	r0, [pc, #52]	@ (80025d4 <SGTL5000_i2c_WriteRegister+0xd8>)
 80025a0:	f00a fb72 	bl	800cc88 <iprintf>
		SGTL5000_ErrorHandler("Unknown error during WriteRegister");
 80025a4:	480c      	ldr	r0, [pc, #48]	@ (80025d8 <SGTL5000_i2c_WriteRegister+0xdc>)
 80025a6:	f7ff ff6d 	bl	8002484 <SGTL5000_ErrorHandler>
		break;
 80025aa:	e000      	b.n	80025ae <SGTL5000_i2c_WriteRegister+0xb2>
		break;
 80025ac:	bf00      	nop
	}
}
 80025ae:	bf00      	nop
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000be8 	.word	0x20000be8
 80025bc:	08010c30 	.word	0x08010c30
 80025c0:	08010c6c 	.word	0x08010c6c
 80025c4:	08010c94 	.word	0x08010c94
 80025c8:	08010cd8 	.word	0x08010cd8
 80025cc:	08010cfc 	.word	0x08010cfc
 80025d0:	08010d38 	.word	0x08010d38
 80025d4:	08010d58 	.word	0x08010d58
 80025d8:	08010da8 	.word	0x08010da8

080025dc <SGTL5000_Init>:

/**
 * @brief Initializes the SGTL5000 codec.
 */
void SGTL5000_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
	hSGTL5000.hi2c = &hi2c2;
 80025e2:	4b45      	ldr	r3, [pc, #276]	@ (80026f8 <SGTL5000_Init+0x11c>)
 80025e4:	4a45      	ldr	r2, [pc, #276]	@ (80026fc <SGTL5000_Init+0x120>)
 80025e6:	601a      	str	r2, [r3, #0]

	uint8_t chip_id_data[2];
	SGTL5000_i2c_ReadRegister(SGTL5000_CHIP_ID, chip_id_data, SGTL5000_MEM_SIZE);
 80025e8:	1d3b      	adds	r3, r7, #4
 80025ea:	2202      	movs	r2, #2
 80025ec:	4619      	mov	r1, r3
 80025ee:	2000      	movs	r0, #0
 80025f0:	f7ff ff56 	bl	80024a0 <SGTL5000_i2c_ReadRegister>
	hSGTL5000.chip_id = (chip_id_data[0] << 8) | chip_id_data[1];
 80025f4:	793b      	ldrb	r3, [r7, #4]
 80025f6:	021b      	lsls	r3, r3, #8
 80025f8:	b21a      	sxth	r2, r3
 80025fa:	797b      	ldrb	r3, [r7, #5]
 80025fc:	b21b      	sxth	r3, r3
 80025fe:	4313      	orrs	r3, r2
 8002600:	b21b      	sxth	r3, r3
 8002602:	b29a      	uxth	r2, r3
 8002604:	4b3c      	ldr	r3, [pc, #240]	@ (80026f8 <SGTL5000_Init+0x11c>)
 8002606:	809a      	strh	r2, [r3, #4]

	if (hSGTL5000.chip_id != 0xA011) { // Example CHIP_ID, replace with actual expected ID
 8002608:	4b3b      	ldr	r3, [pc, #236]	@ (80026f8 <SGTL5000_Init+0x11c>)
 800260a:	889b      	ldrh	r3, [r3, #4]
 800260c:	f24a 0211 	movw	r2, #40977	@ 0xa011
 8002610:	4293      	cmp	r3, r2
 8002612:	d002      	beq.n	800261a <SGTL5000_Init+0x3e>
		SGTL5000_ErrorHandler("Invalid CHIP_ID detected");
 8002614:	483a      	ldr	r0, [pc, #232]	@ (8002700 <SGTL5000_Init+0x124>)
 8002616:	f7ff ff35 	bl	8002484 <SGTL5000_ErrorHandler>

	// NOTE: This next Write call is needed ONLY if VDDD is
	// externally driven
	// Turn off startup power supplies to save power (Clear bit 12 and 13)
	// Write CHIP_ANA_POWER 0x4260
	mask = (1 << 12) | (1 << 13);
 800261a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800261e:	80fb      	strh	r3, [r7, #6]
	//mask = 0b0111001011111111;
	SGTL5000_i2c_WriteRegister(SGTL5000_CHIP_ANA_POWER, mask);
 8002620:	88fb      	ldrh	r3, [r7, #6]
 8002622:	4619      	mov	r1, r3
 8002624:	2030      	movs	r0, #48	@ 0x30
 8002626:	f7ff ff69 	bl	80024fc <SGTL5000_i2c_WriteRegister>
	// NOTE: The next modify call is only needed if both VDDA and
	// VDDIO are greater than 3.1 V
	// Configure the charge pump to use the VDDIO rail (set bit 5 and bit 6)
	// Write CHIP_LINREG_CTRL 0x006C
	// VDDA and VDDIO = 3.3V so it IS necessary
	mask = (1 << 5) | (1 << 6);
 800262a:	2360      	movs	r3, #96	@ 0x60
 800262c:	80fb      	strh	r3, [r7, #6]
	SGTL5000_i2c_WriteRegister(SGTL5000_CHIP_LINREG_CTRL, mask);
 800262e:	88fb      	ldrh	r3, [r7, #6]
 8002630:	4619      	mov	r1, r3
 8002632:	2026      	movs	r0, #38	@ 0x26
 8002634:	f7ff ff62 	bl	80024fc <SGTL5000_i2c_WriteRegister>
	// on the VDDA voltage value.
	// Set ground, ADC, DAC reference voltage (bits 8:4). The value should
	// be set to VDDA/2. This example assumes VDDA = 1.8 V. VDDA/2 = 0.9 V.
	// The bias current should be set to 50% of the nominal value (bits 3:1)
	// Write CHIP_REF_CTRL 0x004E
	mask = 0x01FF;	// VAG_VAL = 1.575V, BIAS_CTRL = -50%, SMALL_POP = 1
 8002638:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800263c:	80fb      	strh	r3, [r7, #6]
	SGTL5000_i2c_WriteRegister(SGTL5000_CHIP_REF_CTRL, mask);
 800263e:	88fb      	ldrh	r3, [r7, #6]
 8002640:	4619      	mov	r1, r3
 8002642:	2028      	movs	r0, #40	@ 0x28
 8002644:	f7ff ff5a 	bl	80024fc <SGTL5000_i2c_WriteRegister>
	// Set LINEOUT reference voltage to VDDIO/2 (1.65 V) (bits 5:0)
	// and bias current (bits 11:8) to the recommended value of 0.36 mA
	// for 10 kOhm load with 1.0 nF capacitance
	// Write CHIP_LINE_OUT_CTRL 0x0322
	//	mask = 0x0322;	// LO_VAGCNTRL = 1.65V, OUT_CURRENT = 0.36mA (?)
	mask = 0x031E;
 8002648:	f240 331e 	movw	r3, #798	@ 0x31e
 800264c:	80fb      	strh	r3, [r7, #6]
	SGTL5000_i2c_WriteRegister(SGTL5000_CHIP_LINE_OUT_CTRL, mask);
 800264e:	88fb      	ldrh	r3, [r7, #6]
 8002650:	4619      	mov	r1, r3
 8002652:	202c      	movs	r0, #44	@ 0x2c
 8002654:	f7ff ff52 	bl	80024fc <SGTL5000_i2c_WriteRegister>

	// Enable short detect mode for headphone left/right
	// and center channel and set short detect current trip level
	// to 75 mA
	// Write CHIP_SHORT_CTRL 0x1106
	mask = 0x1106;	// MODE_CM = 2, MODE_LR = 1, LVLADJC = 200mA, LVLADJL = 75mA, LVLADJR = 50mA
 8002658:	f241 1306 	movw	r3, #4358	@ 0x1106
 800265c:	80fb      	strh	r3, [r7, #6]
	SGTL5000_i2c_WriteRegister(SGTL5000_CHIP_SHORT_CTRL, mask);
 800265e:	88fb      	ldrh	r3, [r7, #6]
 8002660:	4619      	mov	r1, r3
 8002662:	203c      	movs	r0, #60	@ 0x3c
 8002664:	f7ff ff4a 	bl	80024fc <SGTL5000_i2c_WriteRegister>
	printf("SGTL5000_CHIP_SHORT_CTRL set as: 0x%04X\r\n", mask);
#endif

	// Enable Zero-cross detect if needed for HP_OUT (bit 5) and ADC (bit 1)
	// Write CHIP_ANA_CTRL 0x0133
	mask = 0x0004;	// Unmute all + SELECT_ADC = LINEIN
 8002668:	2304      	movs	r3, #4
 800266a:	80fb      	strh	r3, [r7, #6]
	//	mask = 0x0000;	// Unmute all + SELECT_ADC = MIC
	SGTL5000_i2c_WriteRegister(SGTL5000_CHIP_ANA_CTRL, mask);
 800266c:	88fb      	ldrh	r3, [r7, #6]
 800266e:	4619      	mov	r1, r3
 8002670:	2024      	movs	r0, #36	@ 0x24
 8002672:	f7ff ff43 	bl	80024fc <SGTL5000_i2c_WriteRegister>
#endif

	//------------Power up Inputs/Outputs/Digital Blocks---------
	// Power up LINEOUT, HP, ADC, DAC
	// Write CHIP_ANA_POWER 0x6AFF
	mask = 0x6AFF;	// LINEOUT_POWERUP, ADC_POWERUP, CAPLESS_HEADPHONE_POWERUP, DAC_POWERUP, HEADPHONE_POWERUP, REFTOP_POWERUP, ADC_MONO = stereo
 8002676:	f646 23ff 	movw	r3, #27391	@ 0x6aff
 800267a:	80fb      	strh	r3, [r7, #6]
	// VAG_POWERUP, VCOAMP_POWERUP = 0, LINREG_D_POWERUP, PLL_POWERUP = 0, VDDC_CHRGPMP_POWERUP, STARTUP_POWERUP = 0, LINREG_SIMPLE_POWERUP,
	// DAC_MONO = stereo
	SGTL5000_i2c_WriteRegister(SGTL5000_CHIP_ANA_POWER, mask);
 800267c:	88fb      	ldrh	r3, [r7, #6]
 800267e:	4619      	mov	r1, r3
 8002680:	2030      	movs	r0, #48	@ 0x30
 8002682:	f7ff ff3b 	bl	80024fc <SGTL5000_i2c_WriteRegister>
#endif
	// Power up desired digital blocks
	// I2S_IN (bit 0), I2S_OUT (bit 1), DAP (bit 4), DAC (bit 5),
	// ADC (bit 6) are powered on
	// Write CHIP_DIG_POWER 0x0073
	mask = 0x0073;	// I2S_IN_POWERUP, I2S_OUT_POWERUP, DAP_POWERUP, DAC_POWERUP, ADC_POWERUP
 8002686:	2373      	movs	r3, #115	@ 0x73
 8002688:	80fb      	strh	r3, [r7, #6]
	SGTL5000_i2c_WriteRegister(SGTL5000_CHIP_DIG_POWER, mask);
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	4619      	mov	r1, r3
 800268e:	2002      	movs	r0, #2
 8002690:	f7ff ff34 	bl	80024fc <SGTL5000_i2c_WriteRegister>
	// Value = (int)(40*log(VAG_VAL/LO_VAGCNTRL) + 15)
	// Assuming VAG_VAL and LO_VAGCNTRL is set to 0.9 V and
	// 1.65 V respectively, the // left LO vol (bits 12:8) and right LO
	// volume (bits 4:0) value should be set // to 5
	// Write CHIP_LINE_OUT_VOL 0x0505
	mask = 0x1111;	// TODO recalculer
 8002694:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002698:	80fb      	strh	r3, [r7, #6]
	SGTL5000_i2c_WriteRegister(SGTL5000_CHIP_LINE_OUT_VOL, mask);
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	4619      	mov	r1, r3
 800269e:	202e      	movs	r0, #46	@ 0x2e
 80026a0:	f7ff ff2c 	bl	80024fc <SGTL5000_i2c_WriteRegister>

	// Configure SYS_FS clock to 48 kHz
	// Configure MCLK_FREQ to 256*Fs
	// Modify CHIP_CLK_CTRL->SYS_FS 0x0002 // bits 3:2
	// Modify CHIP_CLK_CTRL->MCLK_FREQ 0x0000 // bits 1:0
	mask = 0x0004;	// SYS_FS = 48kHz
 80026a4:	2304      	movs	r3, #4
 80026a6:	80fb      	strh	r3, [r7, #6]
	SGTL5000_i2c_WriteRegister(SGTL5000_CHIP_CLK_CTRL, mask);
 80026a8:	88fb      	ldrh	r3, [r7, #6]
 80026aa:	4619      	mov	r1, r3
 80026ac:	2004      	movs	r0, #4
 80026ae:	f7ff ff25 	bl	80024fc <SGTL5000_i2c_WriteRegister>
#endif
	// Configure the I2S clocks in master mode
	// NOTE: I2S LRCLK is same as the system sample clock
	// Modify CHIP_I2S_CTRL->MS 0x0001 // bit 7
	// Non, on reste en slave!
	mask = 0x0130;	// DLEN = 16 bits
 80026b2:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80026b6:	80fb      	strh	r3, [r7, #6]
	SGTL5000_i2c_WriteRegister(SGTL5000_CHIP_I2S_CTRL, mask);
 80026b8:	88fb      	ldrh	r3, [r7, #6]
 80026ba:	4619      	mov	r1, r3
 80026bc:	2006      	movs	r0, #6
 80026be:	f7ff ff1d 	bl	80024fc <SGTL5000_i2c_WriteRegister>
	// Laissons tout par défaut pour l'instant
	//	mask = 0x0000;	// ADC -> DAC
	//	SGTL5000_i2c_WriteRegister(SGTL5000_CHIP_SSS_CTRL, mask);

	/* Le reste */
	mask = 0x0000;	// Unmute
 80026c2:	2300      	movs	r3, #0
 80026c4:	80fb      	strh	r3, [r7, #6]
	SGTL5000_i2c_WriteRegister(SGTL5000_CHIP_ADCDAC_CTRL, mask);
 80026c6:	88fb      	ldrh	r3, [r7, #6]
 80026c8:	4619      	mov	r1, r3
 80026ca:	200e      	movs	r0, #14
 80026cc:	f7ff ff16 	bl	80024fc <SGTL5000_i2c_WriteRegister>
#if (DEBUG)
	printf("SGTL5000_CHIP_ADCDAC_CTRL set as: 0x%04X\r\n", mask);
#endif

	mask = 0x3C3C;
 80026d0:	f643 433c 	movw	r3, #15420	@ 0x3c3c
 80026d4:	80fb      	strh	r3, [r7, #6]
	//	mask = 0x4747;
	SGTL5000_i2c_WriteRegister(SGTL5000_CHIP_DAC_VOL, mask);
 80026d6:	88fb      	ldrh	r3, [r7, #6]
 80026d8:	4619      	mov	r1, r3
 80026da:	2010      	movs	r0, #16
 80026dc:	f7ff ff0e 	bl	80024fc <SGTL5000_i2c_WriteRegister>
#if (DEBUG)
	printf("SGTL5000_CHIP_DAC_VOL set as: 0x%04X\r\n", mask);
#endif

	mask = 0x0251;	// BIAS_RESISTOR = 2, BIAS_VOLT = 5, GAIN = 1
 80026e0:	f240 2351 	movw	r3, #593	@ 0x251
 80026e4:	80fb      	strh	r3, [r7, #6]
	SGTL5000_i2c_WriteRegister(SGTL5000_CHIP_MIC_CTRL, mask);
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	4619      	mov	r1, r3
 80026ea:	202a      	movs	r0, #42	@ 0x2a
 80026ec:	f7ff ff06 	bl	80024fc <SGTL5000_i2c_WriteRegister>
	//	}

#if (LOGS)
	printf("SGTL5000 initialized successfully, CHIP_ID: 0x%04X\r\n", hSGTL5000.chip_id);
#endif
}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20000be8 	.word	0x20000be8
 80026fc:	200004a0 	.word	0x200004a0
 8002700:	08010dcc 	.word	0x08010dcc

08002704 <fonction>:

#include "../drivers/MCP23S17.h"


int fonction(int argc, char ** argv)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
	if (argc > 1)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b01      	cmp	r3, #1
 8002712:	dd14      	ble.n	800273e <fonction+0x3a>
	{
		for (int i = 0; i < argc; i++)
 8002714:	2300      	movs	r3, #0
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	e00d      	b.n	8002736 <fonction+0x32>
		{
			printf("Paramètre [%d] = %s\r\n", i+1, argv[i]);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1c59      	adds	r1, r3, #1
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	4413      	add	r3, r2
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	461a      	mov	r2, r3
 800272a:	4807      	ldr	r0, [pc, #28]	@ (8002748 <fonction+0x44>)
 800272c:	f00a faac 	bl	800cc88 <iprintf>
		for (int i = 0; i < argc; i++)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	3301      	adds	r3, #1
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	429a      	cmp	r2, r3
 800273c:	dbed      	blt.n	800271a <fonction+0x16>
		}
	}

	return 0;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	08010de8 	.word	0x08010de8

0800274c <calcul>:

int calcul(int argc, char ** argv)
{
 800274c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
	if (argc >= 4)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b03      	cmp	r3, #3
 800275a:	dd68      	ble.n	800282e <calcul+0xe2>
	{
		switch(argv[2][0])
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	3308      	adds	r3, #8
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b78      	cmp	r3, #120	@ 0x78
 8002766:	d03f      	beq.n	80027e8 <calcul+0x9c>
 8002768:	2b78      	cmp	r3, #120	@ 0x78
 800276a:	dc59      	bgt.n	8002820 <calcul+0xd4>
 800276c:	2b2d      	cmp	r3, #45	@ 0x2d
 800276e:	d020      	beq.n	80027b2 <calcul+0x66>
 8002770:	2b2d      	cmp	r3, #45	@ 0x2d
 8002772:	dc55      	bgt.n	8002820 <calcul+0xd4>
 8002774:	2b2a      	cmp	r3, #42	@ 0x2a
 8002776:	d037      	beq.n	80027e8 <calcul+0x9c>
 8002778:	2b2b      	cmp	r3, #43	@ 0x2b
 800277a:	d151      	bne.n	8002820 <calcul+0xd4>
		{
		case '+':
			printf("%s + %s = %d\r\n", argv[1], argv[3], atoi(argv[1])+atoi(argv[3]));
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	3304      	adds	r3, #4
 8002780:	681c      	ldr	r4, [r3, #0]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	330c      	adds	r3, #12
 8002786:	681d      	ldr	r5, [r3, #0]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	3304      	adds	r3, #4
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f009 fac2 	bl	800bd18 <atoi>
 8002794:	4606      	mov	r6, r0
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	330c      	adds	r3, #12
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f009 fabb 	bl	800bd18 <atoi>
 80027a2:	4603      	mov	r3, r0
 80027a4:	4433      	add	r3, r6
 80027a6:	462a      	mov	r2, r5
 80027a8:	4621      	mov	r1, r4
 80027aa:	4823      	ldr	r0, [pc, #140]	@ (8002838 <calcul+0xec>)
 80027ac:	f00a fa6c 	bl	800cc88 <iprintf>
			break;
 80027b0:	e03d      	b.n	800282e <calcul+0xe2>
		case '-':
			printf("%s - %s = %d\r\n", argv[1], argv[3], atoi(argv[1])-atoi(argv[3]));
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	3304      	adds	r3, #4
 80027b6:	681c      	ldr	r4, [r3, #0]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	330c      	adds	r3, #12
 80027bc:	681d      	ldr	r5, [r3, #0]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	3304      	adds	r3, #4
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f009 faa7 	bl	800bd18 <atoi>
 80027ca:	4606      	mov	r6, r0
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	330c      	adds	r3, #12
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f009 faa0 	bl	800bd18 <atoi>
 80027d8:	4603      	mov	r3, r0
 80027da:	1af3      	subs	r3, r6, r3
 80027dc:	462a      	mov	r2, r5
 80027de:	4621      	mov	r1, r4
 80027e0:	4816      	ldr	r0, [pc, #88]	@ (800283c <calcul+0xf0>)
 80027e2:	f00a fa51 	bl	800cc88 <iprintf>
			break;
 80027e6:	e022      	b.n	800282e <calcul+0xe2>
		case '*':
		case 'x':
			printf("%s * %s = %d\r\n", argv[1], argv[3], atoi(argv[1])*atoi(argv[3]));
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	3304      	adds	r3, #4
 80027ec:	681c      	ldr	r4, [r3, #0]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	330c      	adds	r3, #12
 80027f2:	681d      	ldr	r5, [r3, #0]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	3304      	adds	r3, #4
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f009 fa8c 	bl	800bd18 <atoi>
 8002800:	4606      	mov	r6, r0
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	330c      	adds	r3, #12
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f009 fa85 	bl	800bd18 <atoi>
 800280e:	4603      	mov	r3, r0
 8002810:	fb06 f303 	mul.w	r3, r6, r3
 8002814:	462a      	mov	r2, r5
 8002816:	4621      	mov	r1, r4
 8002818:	4809      	ldr	r0, [pc, #36]	@ (8002840 <calcul+0xf4>)
 800281a:	f00a fa35 	bl	800cc88 <iprintf>
			break;
 800281e:	e006      	b.n	800282e <calcul+0xe2>
		default:
			printf("Opération '%s' non supporté!\r\n", argv[2]);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	3308      	adds	r3, #8
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4619      	mov	r1, r3
 8002828:	4806      	ldr	r0, [pc, #24]	@ (8002844 <calcul+0xf8>)
 800282a:	f00a fa2d 	bl	800cc88 <iprintf>
		}
	}

	return 0;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002838:	08010e00 	.word	0x08010e00
 800283c:	08010e10 	.word	0x08010e10
 8002840:	08010e20 	.word	0x08010e20
 8002844:	08010e30 	.word	0x08010e30

08002848 <addition>:

int addition(int argc, char ** argv)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
	if (argc > 1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b01      	cmp	r3, #1
 8002856:	dd24      	ble.n	80028a2 <addition+0x5a>
	{
		int somme = 0;
 8002858:	2300      	movs	r3, #0
 800285a:	60fb      	str	r3, [r7, #12]
		for (int i = 1; i < argc; i++)
 800285c:	2301      	movs	r3, #1
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	e017      	b.n	8002892 <addition+0x4a>
		{
			printf(" + %s", argv[i]);
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	4413      	add	r3, r2
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4619      	mov	r1, r3
 800286e:	480f      	ldr	r0, [pc, #60]	@ (80028ac <addition+0x64>)
 8002870:	f00a fa0a 	bl	800cc88 <iprintf>
			somme = somme + atoi(argv[i]);
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	4413      	add	r3, r2
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f009 fa4a 	bl	800bd18 <atoi>
 8002884:	4602      	mov	r2, r0
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	4413      	add	r3, r2
 800288a:	60fb      	str	r3, [r7, #12]
		for (int i = 1; i < argc; i++)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	3301      	adds	r3, #1
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	429a      	cmp	r2, r3
 8002898:	dbe3      	blt.n	8002862 <addition+0x1a>
		}

		printf(" = %d\r\n", somme);
 800289a:	68f9      	ldr	r1, [r7, #12]
 800289c:	4804      	ldr	r0, [pc, #16]	@ (80028b0 <addition+0x68>)
 800289e:	f00a f9f3 	bl	800cc88 <iprintf>
	}
	return 0;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	08010e54 	.word	0x08010e54
 80028b0:	08010e5c 	.word	0x08010e5c

080028b4 <GPIOExpander_toggle_LED>:

int GPIOExpander_toggle_LED(int argc, char ** argv)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
	if (argc > 1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	dd16      	ble.n	80028f2 <GPIOExpander_toggle_LED+0x3e>
	{
		for (int i = 1; i < argc; i++)
 80028c4:	2301      	movs	r3, #1
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	e00f      	b.n	80028ea <GPIOExpander_toggle_LED+0x36>
		{
			MCP23S17_Toggle_LED_id(atoi(argv[i]));
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	4413      	add	r3, r2
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f009 fa1f 	bl	800bd18 <atoi>
 80028da:	4603      	mov	r3, r0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff fd38 	bl	8002354 <MCP23S17_Toggle_LED_id>
		for (int i = 1; i < argc; i++)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	3301      	adds	r3, #1
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	dbeb      	blt.n	80028ca <GPIOExpander_toggle_LED+0x16>
		}
	}

	return 0;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <GPIOExpander_set_LED>:

int GPIOExpander_set_LED(int argc, char ** argv)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
	if (argc > 1)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b01      	cmp	r3, #1
 800290a:	dd0a      	ble.n	8002922 <GPIOExpander_set_LED+0x26>
	{
		MCP23S17_Set_LED_id(atoi(argv[1]));
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	3304      	adds	r3, #4
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f009 fa00 	bl	800bd18 <atoi>
 8002918:	4603      	mov	r3, r0
 800291a:	b2db      	uxtb	r3, r3
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff fced 	bl	80022fc <MCP23S17_Set_LED_id>
	}

	return 0;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <shell_uart_receive_irq_cb>:
static char print_buffer[BUFFER_SIZE];
static SemaphoreHandle_t sem_uart_read = NULL;


void shell_uart_receive_irq_cb(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8002932:	2300      	movs	r3, #0
 8002934:	607b      	str	r3, [r7, #4]

	xSemaphoreGiveFromISR(sem_uart_read, &pxHigherPriorityTaskWoken);
 8002936:	4b0b      	ldr	r3, [pc, #44]	@ (8002964 <shell_uart_receive_irq_cb+0x38>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	1d3a      	adds	r2, r7, #4
 800293c:	4611      	mov	r1, r2
 800293e:	4618      	mov	r0, r3
 8002940:	f007 fbe4 	bl	800a10c <xQueueGiveFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d007      	beq.n	800295a <shell_uart_receive_irq_cb+0x2e>
 800294a:	4b07      	ldr	r3, [pc, #28]	@ (8002968 <shell_uart_receive_irq_cb+0x3c>)
 800294c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	f3bf 8f4f 	dsb	sy
 8002956:	f3bf 8f6f 	isb	sy
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20000f1c 	.word	0x20000f1c
 8002968:	e000ed04 	.word	0xe000ed04

0800296c <uart_read>:

static char uart_read() {
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
	char c;

	HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t*)(&c), 1);
 8002972:	1dfb      	adds	r3, r7, #7
 8002974:	2201      	movs	r2, #1
 8002976:	4619      	mov	r1, r3
 8002978:	4807      	ldr	r0, [pc, #28]	@ (8002998 <uart_read+0x2c>)
 800297a:	f005 febd 	bl	80086f8 <HAL_UART_Receive_IT>
	// il faut mettre la tâche shell dans l'état bloqué, jusqu'à l'interruption de réception de caractère
	// prendre un sémaphore vide par exemple
	xSemaphoreTake(sem_uart_read, portMAX_DELAY);
 800297e:	4b07      	ldr	r3, [pc, #28]	@ (800299c <uart_read+0x30>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002986:	4618      	mov	r0, r3
 8002988:	f007 fc50 	bl	800a22c <xQueueSemaphoreTake>

	return c;
 800298c:	79fb      	ldrb	r3, [r7, #7]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20000b58 	.word	0x20000b58
 800299c:	20000f1c 	.word	0x20000f1c

080029a0 <uart_write>:

static int uart_write(char * s, uint16_t size) {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
 80029ac:	887a      	ldrh	r2, [r7, #2]
 80029ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4803      	ldr	r0, [pc, #12]	@ (80029c4 <uart_write+0x24>)
 80029b6:	f005 fe15 	bl	80085e4 <HAL_UART_Transmit>
	return size;
 80029ba:	887b      	ldrh	r3, [r7, #2]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	20000b58 	.word	0x20000b58

080029c8 <sh_help>:

static int sh_help(int argc, char ** argv) {
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af02      	add	r7, sp, #8
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	e022      	b.n	8002a1e <sh_help+0x56>
		int size;
		size = snprintf (print_buffer, BUFFER_SIZE, "%c: %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 80029d8:	4916      	ldr	r1, [pc, #88]	@ (8002a34 <sh_help+0x6c>)
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	4613      	mov	r3, r2
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	4912      	ldr	r1, [pc, #72]	@ (8002a34 <sh_help+0x6c>)
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	4613      	mov	r3, r2
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	3308      	adds	r3, #8
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	4603      	mov	r3, r0
 8002a00:	4a0d      	ldr	r2, [pc, #52]	@ (8002a38 <sh_help+0x70>)
 8002a02:	2128      	movs	r1, #40	@ 0x28
 8002a04:	480d      	ldr	r0, [pc, #52]	@ (8002a3c <sh_help+0x74>)
 8002a06:	f00a f9af 	bl	800cd68 <sniprintf>
 8002a0a:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	4619      	mov	r1, r3
 8002a12:	480a      	ldr	r0, [pc, #40]	@ (8002a3c <sh_help+0x74>)
 8002a14:	f7ff ffc4 	bl	80029a0 <uart_write>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	4b08      	ldr	r3, [pc, #32]	@ (8002a40 <sh_help+0x78>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	dbd7      	blt.n	80029d8 <sh_help+0x10>
	}

	return 0;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000bf4 	.word	0x20000bf4
 8002a38:	08010e64 	.word	0x08010e64
 8002a3c:	20000ef4 	.word	0x20000ef4
 8002a40:	20000bf0 	.word	0x20000bf0

08002a44 <shell_init>:

void shell_init() {
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
	int size = 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	607b      	str	r3, [r7, #4]

	size = snprintf (print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8002a4e:	4a13      	ldr	r2, [pc, #76]	@ (8002a9c <shell_init+0x58>)
 8002a50:	2128      	movs	r1, #40	@ 0x28
 8002a52:	4813      	ldr	r0, [pc, #76]	@ (8002aa0 <shell_init+0x5c>)
 8002a54:	f00a f988 	bl	800cd68 <sniprintf>
 8002a58:	6078      	str	r0, [r7, #4]
	uart_write(print_buffer, size);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	4619      	mov	r1, r3
 8002a60:	480f      	ldr	r0, [pc, #60]	@ (8002aa0 <shell_init+0x5c>)
 8002a62:	f7ff ff9d 	bl	80029a0 <uart_write>

	sem_uart_read = xSemaphoreCreateBinary();
 8002a66:	2203      	movs	r2, #3
 8002a68:	2100      	movs	r1, #0
 8002a6a:	2001      	movs	r0, #1
 8002a6c:	f007 faf4 	bl	800a058 <xQueueGenericCreate>
 8002a70:	4603      	mov	r3, r0
 8002a72:	4a0c      	ldr	r2, [pc, #48]	@ (8002aa4 <shell_init+0x60>)
 8002a74:	6013      	str	r3, [r2, #0]
	if (sem_uart_read == NULL)
 8002a76:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa4 <shell_init+0x60>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d104      	bne.n	8002a88 <shell_init+0x44>
	{
		printf("Error semaphore shell\r\n");
 8002a7e:	480a      	ldr	r0, [pc, #40]	@ (8002aa8 <shell_init+0x64>)
 8002a80:	f00a f96a 	bl	800cd58 <puts>
		while(1);
 8002a84:	bf00      	nop
 8002a86:	e7fd      	b.n	8002a84 <shell_init+0x40>
	}

	shell_add('h', sh_help, "Help");
 8002a88:	4a08      	ldr	r2, [pc, #32]	@ (8002aac <shell_init+0x68>)
 8002a8a:	4909      	ldr	r1, [pc, #36]	@ (8002ab0 <shell_init+0x6c>)
 8002a8c:	2068      	movs	r0, #104	@ 0x68
 8002a8e:	f000 f811 	bl	8002ab4 <shell_add>
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	08010e70 	.word	0x08010e70
 8002aa0:	20000ef4 	.word	0x20000ef4
 8002aa4:	20000f1c 	.word	0x20000f1c
 8002aa8:	08010e98 	.word	0x08010e98
 8002aac:	08010eb0 	.word	0x08010eb0
 8002ab0:	080029c9 	.word	0x080029c9

08002ab4 <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8002ac2:	4b19      	ldr	r3, [pc, #100]	@ (8002b28 <shell_add+0x74>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ac8:	dc26      	bgt.n	8002b18 <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 8002aca:	4b17      	ldr	r3, [pc, #92]	@ (8002b28 <shell_add+0x74>)
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	4917      	ldr	r1, [pc, #92]	@ (8002b2c <shell_add+0x78>)
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	4413      	add	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	7bfa      	ldrb	r2, [r7, #15]
 8002adc:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 8002ade:	4b12      	ldr	r3, [pc, #72]	@ (8002b28 <shell_add+0x74>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	4912      	ldr	r1, [pc, #72]	@ (8002b2c <shell_add+0x78>)
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	4413      	add	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	3304      	adds	r3, #4
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 8002af4:	4b0c      	ldr	r3, [pc, #48]	@ (8002b28 <shell_add+0x74>)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	490c      	ldr	r1, [pc, #48]	@ (8002b2c <shell_add+0x78>)
 8002afa:	4613      	mov	r3, r2
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	4413      	add	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	3308      	adds	r3, #8
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 8002b0a:	4b07      	ldr	r3, [pc, #28]	@ (8002b28 <shell_add+0x74>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	4a05      	ldr	r2, [pc, #20]	@ (8002b28 <shell_add+0x74>)
 8002b12:	6013      	str	r3, [r2, #0]
		return 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	e001      	b.n	8002b1c <shell_add+0x68>
	}

	return -1;
 8002b18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	20000bf0 	.word	0x20000bf0
 8002b2c:	20000bf4 	.word	0x20000bf4

08002b30 <shell_exec>:

static int shell_exec(char * buf) {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b090      	sub	sp, #64	@ 0x40
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
	int i;

	char c = buf[0];
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 8002b40:	2300      	movs	r3, #0
 8002b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b44:	e040      	b.n	8002bc8 <shell_exec+0x98>
		if (shell_func_list[i].c == c) {
 8002b46:	492d      	ldr	r1, [pc, #180]	@ (8002bfc <shell_exec+0xcc>)
 8002b48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	4413      	add	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	440b      	add	r3, r1
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d131      	bne.n	8002bc2 <shell_exec+0x92>
			argc = 1;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b6a:	e013      	b.n	8002b94 <shell_exec+0x64>
				if(*p == ' ') {
 8002b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b20      	cmp	r3, #32
 8002b72:	d10c      	bne.n	8002b8e <shell_exec+0x5e>
					*p = '\0';
 8002b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b76:	2200      	movs	r2, #0
 8002b78:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 8002b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002b80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b82:	3201      	adds	r2, #1
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	3340      	adds	r3, #64	@ 0x40
 8002b88:	443b      	add	r3, r7
 8002b8a:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8002b8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b90:	3301      	adds	r3, #1
 8002b92:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <shell_exec+0x72>
 8002b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b9e:	2b07      	cmp	r3, #7
 8002ba0:	dde4      	ble.n	8002b6c <shell_exec+0x3c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 8002ba2:	4916      	ldr	r1, [pc, #88]	@ (8002bfc <shell_exec+0xcc>)
 8002ba4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	4413      	add	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	440b      	add	r3, r1
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f107 020c 	add.w	r2, r7, #12
 8002bb8:	4611      	mov	r1, r2
 8002bba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002bbc:	4798      	blx	r3
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	e017      	b.n	8002bf2 <shell_exec+0xc2>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8002bc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8002c00 <shell_exec+0xd0>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	dbb9      	blt.n	8002b46 <shell_exec+0x16>
		}
	}

	int size;
	size = snprintf (print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8002bd2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002bd6:	4a0b      	ldr	r2, [pc, #44]	@ (8002c04 <shell_exec+0xd4>)
 8002bd8:	2128      	movs	r1, #40	@ 0x28
 8002bda:	480b      	ldr	r0, [pc, #44]	@ (8002c08 <shell_exec+0xd8>)
 8002bdc:	f00a f8c4 	bl	800cd68 <sniprintf>
 8002be0:	62f8      	str	r0, [r7, #44]	@ 0x2c
	uart_write(print_buffer, size);
 8002be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	4619      	mov	r1, r3
 8002be8:	4807      	ldr	r0, [pc, #28]	@ (8002c08 <shell_exec+0xd8>)
 8002bea:	f7ff fed9 	bl	80029a0 <uart_write>
	return -1;
 8002bee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3740      	adds	r7, #64	@ 0x40
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20000bf4 	.word	0x20000bf4
 8002c00:	20000bf0 	.word	0x20000bf0
 8002c04:	08010eb8 	.word	0x08010eb8
 8002c08:	20000ef4 	.word	0x20000ef4

08002c0c <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run() {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
	int reading = 0;
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 8002c16:	2300      	movs	r3, #0
 8002c18:	60bb      	str	r3, [r7, #8]

	static char cmd_buffer[BUFFER_SIZE];

	while (1) {
		uart_write(prompt, 2);
 8002c1a:	2102      	movs	r1, #2
 8002c1c:	482a      	ldr	r0, [pc, #168]	@ (8002cc8 <shell_run+0xbc>)
 8002c1e:	f7ff febf 	bl	80029a0 <uart_write>
		reading = 1;
 8002c22:	2301      	movs	r3, #1
 8002c24:	60fb      	str	r3, [r7, #12]

		while(reading) {
 8002c26:	e047      	b.n	8002cb8 <shell_run+0xac>
			char c = uart_read();
 8002c28:	f7ff fea0 	bl	800296c <uart_read>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	70fb      	strb	r3, [r7, #3]
			int size;

			switch (c) {
 8002c30:	78fb      	ldrb	r3, [r7, #3]
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d025      	beq.n	8002c82 <shell_run+0x76>
 8002c36:	2b0d      	cmp	r3, #13
 8002c38:	d12e      	bne.n	8002c98 <shell_run+0x8c>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (print_buffer, BUFFER_SIZE, "\r\n");
 8002c3a:	4a24      	ldr	r2, [pc, #144]	@ (8002ccc <shell_run+0xc0>)
 8002c3c:	2128      	movs	r1, #40	@ 0x28
 8002c3e:	4824      	ldr	r0, [pc, #144]	@ (8002cd0 <shell_run+0xc4>)
 8002c40:	f00a f892 	bl	800cd68 <sniprintf>
 8002c44:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4820      	ldr	r0, [pc, #128]	@ (8002cd0 <shell_run+0xc4>)
 8002c4e:	f7ff fea7 	bl	80029a0 <uart_write>
				cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	60ba      	str	r2, [r7, #8]
 8002c58:	4a1e      	ldr	r2, [pc, #120]	@ (8002cd4 <shell_run+0xc8>)
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	54d1      	strb	r1, [r2, r3]
				size = snprintf (print_buffer, BUFFER_SIZE, ":%s\r\n", cmd_buffer);
 8002c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd4 <shell_run+0xc8>)
 8002c60:	4a1d      	ldr	r2, [pc, #116]	@ (8002cd8 <shell_run+0xcc>)
 8002c62:	2128      	movs	r1, #40	@ 0x28
 8002c64:	481a      	ldr	r0, [pc, #104]	@ (8002cd0 <shell_run+0xc4>)
 8002c66:	f00a f87f 	bl	800cd68 <sniprintf>
 8002c6a:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	4619      	mov	r1, r3
 8002c72:	4817      	ldr	r0, [pc, #92]	@ (8002cd0 <shell_run+0xc4>)
 8002c74:	f7ff fe94 	bl	80029a0 <uart_write>
				reading = 0;        //exit read loop
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]
				pos = 0;            //reset buffer
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60bb      	str	r3, [r7, #8]
				break;
 8002c80:	e01a      	b.n	8002cb8 <shell_run+0xac>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	dd16      	ble.n	8002cb6 <shell_run+0xaa>
					pos--;          //remove it in buffer
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	60bb      	str	r3, [r7, #8]

					uart_write(backspace, 3);	// delete the char on the terminal
 8002c8e:	2103      	movs	r1, #3
 8002c90:	4812      	ldr	r0, [pc, #72]	@ (8002cdc <shell_run+0xd0>)
 8002c92:	f7ff fe85 	bl	80029a0 <uart_write>
				}
				break;
 8002c96:	e00e      	b.n	8002cb6 <shell_run+0xaa>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2b27      	cmp	r3, #39	@ 0x27
 8002c9c:	dc0c      	bgt.n	8002cb8 <shell_run+0xac>
					uart_write(&c, 1);
 8002c9e:	1cfb      	adds	r3, r7, #3
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff fe7c 	bl	80029a0 <uart_write>
					cmd_buffer[pos++] = c; //store
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	60ba      	str	r2, [r7, #8]
 8002cae:	78f9      	ldrb	r1, [r7, #3]
 8002cb0:	4a08      	ldr	r2, [pc, #32]	@ (8002cd4 <shell_run+0xc8>)
 8002cb2:	54d1      	strb	r1, [r2, r3]
 8002cb4:	e000      	b.n	8002cb8 <shell_run+0xac>
				break;
 8002cb6:	bf00      	nop
		while(reading) {
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1b4      	bne.n	8002c28 <shell_run+0x1c>
				}
			}
		}
		shell_exec(cmd_buffer);
 8002cbe:	4805      	ldr	r0, [pc, #20]	@ (8002cd4 <shell_run+0xc8>)
 8002cc0:	f7ff ff36 	bl	8002b30 <shell_exec>
		uart_write(prompt, 2);
 8002cc4:	e7a9      	b.n	8002c1a <shell_run+0xe>
 8002cc6:	bf00      	nop
 8002cc8:	20000008 	.word	0x20000008
 8002ccc:	08010ed0 	.word	0x08010ed0
 8002cd0:	20000ef4 	.word	0x20000ef4
 8002cd4:	20000f20 	.word	0x20000f20
 8002cd8:	08010ed4 	.word	0x08010ed4
 8002cdc:	20000004 	.word	0x20000004

08002ce0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cea:	4b0c      	ldr	r3, [pc, #48]	@ (8002d1c <HAL_Init+0x3c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a0b      	ldr	r2, [pc, #44]	@ (8002d1c <HAL_Init+0x3c>)
 8002cf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cf4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cf6:	2003      	movs	r0, #3
 8002cf8:	f000 f8df 	bl	8002eba <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cfc:	200f      	movs	r0, #15
 8002cfe:	f7fe fff7 	bl	8001cf0 <HAL_InitTick>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	71fb      	strb	r3, [r7, #7]
 8002d0c:	e001      	b.n	8002d12 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d0e:	f7fe ffc7 	bl	8001ca0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d12:	79fb      	ldrb	r3, [r7, #7]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40022000 	.word	0x40022000

08002d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d24:	4b06      	ldr	r3, [pc, #24]	@ (8002d40 <HAL_IncTick+0x20>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4b06      	ldr	r3, [pc, #24]	@ (8002d44 <HAL_IncTick+0x24>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4413      	add	r3, r2
 8002d30:	4a04      	ldr	r2, [pc, #16]	@ (8002d44 <HAL_IncTick+0x24>)
 8002d32:	6013      	str	r3, [r2, #0]
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	20000010 	.word	0x20000010
 8002d44:	20000f48 	.word	0x20000f48

08002d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d4c:	4b03      	ldr	r3, [pc, #12]	@ (8002d5c <HAL_GetTick+0x14>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	20000f48 	.word	0x20000f48

08002d60 <__NVIC_SetPriorityGrouping>:
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d70:	4b0c      	ldr	r3, [pc, #48]	@ (8002da4 <__NVIC_SetPriorityGrouping+0x44>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d92:	4a04      	ldr	r2, [pc, #16]	@ (8002da4 <__NVIC_SetPriorityGrouping+0x44>)
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	60d3      	str	r3, [r2, #12]
}
 8002d98:	bf00      	nop
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <__NVIC_GetPriorityGrouping>:
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dac:	4b04      	ldr	r3, [pc, #16]	@ (8002dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	0a1b      	lsrs	r3, r3, #8
 8002db2:	f003 0307 	and.w	r3, r3, #7
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	e000ed00 	.word	0xe000ed00

08002dc4 <__NVIC_EnableIRQ>:
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	db0b      	blt.n	8002dee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	f003 021f 	and.w	r2, r3, #31
 8002ddc:	4907      	ldr	r1, [pc, #28]	@ (8002dfc <__NVIC_EnableIRQ+0x38>)
 8002dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de2:	095b      	lsrs	r3, r3, #5
 8002de4:	2001      	movs	r0, #1
 8002de6:	fa00 f202 	lsl.w	r2, r0, r2
 8002dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	e000e100 	.word	0xe000e100

08002e00 <__NVIC_SetPriority>:
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	6039      	str	r1, [r7, #0]
 8002e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	db0a      	blt.n	8002e2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	490c      	ldr	r1, [pc, #48]	@ (8002e4c <__NVIC_SetPriority+0x4c>)
 8002e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1e:	0112      	lsls	r2, r2, #4
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	440b      	add	r3, r1
 8002e24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002e28:	e00a      	b.n	8002e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	4908      	ldr	r1, [pc, #32]	@ (8002e50 <__NVIC_SetPriority+0x50>)
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	3b04      	subs	r3, #4
 8002e38:	0112      	lsls	r2, r2, #4
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	761a      	strb	r2, [r3, #24]
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	e000e100 	.word	0xe000e100
 8002e50:	e000ed00 	.word	0xe000ed00

08002e54 <NVIC_EncodePriority>:
{
 8002e54:	b480      	push	{r7}
 8002e56:	b089      	sub	sp, #36	@ 0x24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f1c3 0307 	rsb	r3, r3, #7
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	bf28      	it	cs
 8002e72:	2304      	movcs	r3, #4
 8002e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	3304      	adds	r3, #4
 8002e7a:	2b06      	cmp	r3, #6
 8002e7c:	d902      	bls.n	8002e84 <NVIC_EncodePriority+0x30>
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	3b03      	subs	r3, #3
 8002e82:	e000      	b.n	8002e86 <NVIC_EncodePriority+0x32>
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43da      	mvns	r2, r3
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	401a      	ands	r2, r3
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea6:	43d9      	mvns	r1, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eac:	4313      	orrs	r3, r2
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3724      	adds	r7, #36	@ 0x24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff ff4c 	bl	8002d60 <__NVIC_SetPriorityGrouping>
}
 8002ec8:	bf00      	nop
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ee2:	f7ff ff61 	bl	8002da8 <__NVIC_GetPriorityGrouping>
 8002ee6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	68b9      	ldr	r1, [r7, #8]
 8002eec:	6978      	ldr	r0, [r7, #20]
 8002eee:	f7ff ffb1 	bl	8002e54 <NVIC_EncodePriority>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef8:	4611      	mov	r1, r2
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff ff80 	bl	8002e00 <__NVIC_SetPriority>
}
 8002f00:	bf00      	nop
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff ff54 	bl	8002dc4 <__NVIC_EnableIRQ>
}
 8002f1c:	bf00      	nop
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e098      	b.n	8003068 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4b4d      	ldr	r3, [pc, #308]	@ (8003074 <HAL_DMA_Init+0x150>)
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d80f      	bhi.n	8002f62 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	461a      	mov	r2, r3
 8002f48:	4b4b      	ldr	r3, [pc, #300]	@ (8003078 <HAL_DMA_Init+0x154>)
 8002f4a:	4413      	add	r3, r2
 8002f4c:	4a4b      	ldr	r2, [pc, #300]	@ (800307c <HAL_DMA_Init+0x158>)
 8002f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f52:	091b      	lsrs	r3, r3, #4
 8002f54:	009a      	lsls	r2, r3, #2
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a48      	ldr	r2, [pc, #288]	@ (8003080 <HAL_DMA_Init+0x15c>)
 8002f5e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f60:	e00e      	b.n	8002f80 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	4b46      	ldr	r3, [pc, #280]	@ (8003084 <HAL_DMA_Init+0x160>)
 8002f6a:	4413      	add	r3, r2
 8002f6c:	4a43      	ldr	r2, [pc, #268]	@ (800307c <HAL_DMA_Init+0x158>)
 8002f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f72:	091b      	lsrs	r3, r3, #4
 8002f74:	009a      	lsls	r2, r3, #2
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a42      	ldr	r2, [pc, #264]	@ (8003088 <HAL_DMA_Init+0x164>)
 8002f7e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f9a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002fa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fda:	d039      	beq.n	8003050 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe0:	4a27      	ldr	r2, [pc, #156]	@ (8003080 <HAL_DMA_Init+0x15c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d11a      	bne.n	800301c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002fe6:	4b29      	ldr	r3, [pc, #164]	@ (800308c <HAL_DMA_Init+0x168>)
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fee:	f003 031c 	and.w	r3, r3, #28
 8002ff2:	210f      	movs	r1, #15
 8002ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	4924      	ldr	r1, [pc, #144]	@ (800308c <HAL_DMA_Init+0x168>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003000:	4b22      	ldr	r3, [pc, #136]	@ (800308c <HAL_DMA_Init+0x168>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6859      	ldr	r1, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300c:	f003 031c 	and.w	r3, r3, #28
 8003010:	fa01 f303 	lsl.w	r3, r1, r3
 8003014:	491d      	ldr	r1, [pc, #116]	@ (800308c <HAL_DMA_Init+0x168>)
 8003016:	4313      	orrs	r3, r2
 8003018:	600b      	str	r3, [r1, #0]
 800301a:	e019      	b.n	8003050 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800301c:	4b1c      	ldr	r3, [pc, #112]	@ (8003090 <HAL_DMA_Init+0x16c>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003024:	f003 031c 	and.w	r3, r3, #28
 8003028:	210f      	movs	r1, #15
 800302a:	fa01 f303 	lsl.w	r3, r1, r3
 800302e:	43db      	mvns	r3, r3
 8003030:	4917      	ldr	r1, [pc, #92]	@ (8003090 <HAL_DMA_Init+0x16c>)
 8003032:	4013      	ands	r3, r2
 8003034:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003036:	4b16      	ldr	r3, [pc, #88]	@ (8003090 <HAL_DMA_Init+0x16c>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6859      	ldr	r1, [r3, #4]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003042:	f003 031c 	and.w	r3, r3, #28
 8003046:	fa01 f303 	lsl.w	r3, r1, r3
 800304a:	4911      	ldr	r1, [pc, #68]	@ (8003090 <HAL_DMA_Init+0x16c>)
 800304c:	4313      	orrs	r3, r2
 800304e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	40020407 	.word	0x40020407
 8003078:	bffdfff8 	.word	0xbffdfff8
 800307c:	cccccccd 	.word	0xcccccccd
 8003080:	40020000 	.word	0x40020000
 8003084:	bffdfbf8 	.word	0xbffdfbf8
 8003088:	40020400 	.word	0x40020400
 800308c:	400200a8 	.word	0x400200a8
 8003090:	400204a8 	.word	0x400204a8

08003094 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_DMA_Start_IT+0x20>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e04b      	b.n	800314c <HAL_DMA_Start_IT+0xb8>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d13a      	bne.n	800313e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0201 	bic.w	r2, r2, #1
 80030e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	68b9      	ldr	r1, [r7, #8]
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 f95f 	bl	80033b0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d008      	beq.n	800310c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f042 020e 	orr.w	r2, r2, #14
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	e00f      	b.n	800312c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0204 	bic.w	r2, r2, #4
 800311a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 020a 	orr.w	r2, r2, #10
 800312a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	e005      	b.n	800314a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003146:	2302      	movs	r3, #2
 8003148:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800314a:	7dfb      	ldrb	r3, [r7, #23]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d008      	beq.n	800317e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2204      	movs	r2, #4
 8003170:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e022      	b.n	80031c4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 020e 	bic.w	r2, r2, #14
 800318c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0201 	bic.w	r2, r2, #1
 800319c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a2:	f003 021c 	and.w	r2, r3, #28
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031aa:	2101      	movs	r1, #1
 80031ac:	fa01 f202 	lsl.w	r2, r1, r2
 80031b0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d005      	beq.n	80031f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2204      	movs	r2, #4
 80031ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	73fb      	strb	r3, [r7, #15]
 80031f2:	e029      	b.n	8003248 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 020e 	bic.w	r2, r2, #14
 8003202:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0201 	bic.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003218:	f003 021c 	and.w	r2, r3, #28
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003220:	2101      	movs	r1, #1
 8003222:	fa01 f202 	lsl.w	r2, r1, r2
 8003226:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	4798      	blx	r3
    }
  }
  return status;
 8003248:	7bfb      	ldrb	r3, [r7, #15]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b084      	sub	sp, #16
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326e:	f003 031c 	and.w	r3, r3, #28
 8003272:	2204      	movs	r2, #4
 8003274:	409a      	lsls	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4013      	ands	r3, r2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d026      	beq.n	80032cc <HAL_DMA_IRQHandler+0x7a>
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d021      	beq.n	80032cc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b00      	cmp	r3, #0
 8003294:	d107      	bne.n	80032a6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0204 	bic.w	r2, r2, #4
 80032a4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032aa:	f003 021c 	and.w	r2, r3, #28
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b2:	2104      	movs	r1, #4
 80032b4:	fa01 f202 	lsl.w	r2, r1, r2
 80032b8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d071      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80032ca:	e06c      	b.n	80033a6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d0:	f003 031c 	and.w	r3, r3, #28
 80032d4:	2202      	movs	r2, #2
 80032d6:	409a      	lsls	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4013      	ands	r3, r2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d02e      	beq.n	800333e <HAL_DMA_IRQHandler+0xec>
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d029      	beq.n	800333e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0320 	and.w	r3, r3, #32
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10b      	bne.n	8003310 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 020a 	bic.w	r2, r2, #10
 8003306:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003314:	f003 021c 	and.w	r2, r3, #28
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331c:	2102      	movs	r1, #2
 800331e:	fa01 f202 	lsl.w	r2, r1, r2
 8003322:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003330:	2b00      	cmp	r3, #0
 8003332:	d038      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800333c:	e033      	b.n	80033a6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003342:	f003 031c 	and.w	r3, r3, #28
 8003346:	2208      	movs	r2, #8
 8003348:	409a      	lsls	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4013      	ands	r3, r2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d02a      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x156>
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	f003 0308 	and.w	r3, r3, #8
 8003358:	2b00      	cmp	r3, #0
 800335a:	d025      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 020e 	bic.w	r2, r2, #14
 800336a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003370:	f003 021c 	and.w	r2, r3, #28
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003378:	2101      	movs	r1, #1
 800337a:	fa01 f202 	lsl.w	r2, r1, r2
 800337e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800339a:	2b00      	cmp	r3, #0
 800339c:	d004      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80033a6:	bf00      	nop
 80033a8:	bf00      	nop
}
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
 80033bc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c2:	f003 021c 	and.w	r2, r3, #28
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ca:	2101      	movs	r1, #1
 80033cc:	fa01 f202 	lsl.w	r2, r1, r2
 80033d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	2b10      	cmp	r3, #16
 80033e0:	d108      	bne.n	80033f4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80033f2:	e007      	b.n	8003404 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	60da      	str	r2, [r3, #12]
}
 8003404:	bf00      	nop
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003410:	b480      	push	{r7}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800341a:	2300      	movs	r3, #0
 800341c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800341e:	e17f      	b.n	8003720 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	2101      	movs	r1, #1
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	fa01 f303 	lsl.w	r3, r1, r3
 800342c:	4013      	ands	r3, r2
 800342e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 8171 	beq.w	800371a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f003 0303 	and.w	r3, r3, #3
 8003440:	2b01      	cmp	r3, #1
 8003442:	d005      	beq.n	8003450 <HAL_GPIO_Init+0x40>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 0303 	and.w	r3, r3, #3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d130      	bne.n	80034b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	2203      	movs	r2, #3
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	4013      	ands	r3, r2
 8003466:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003486:	2201      	movs	r2, #1
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	43db      	mvns	r3, r3
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	4013      	ands	r3, r2
 8003494:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	091b      	lsrs	r3, r3, #4
 800349c:	f003 0201 	and.w	r2, r3, #1
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	2b03      	cmp	r3, #3
 80034bc:	d118      	bne.n	80034f0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80034c4:	2201      	movs	r2, #1
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4013      	ands	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	08db      	lsrs	r3, r3, #3
 80034da:	f003 0201 	and.w	r2, r3, #1
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d017      	beq.n	800352c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	2203      	movs	r2, #3
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	43db      	mvns	r3, r3
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	4013      	ands	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 0303 	and.w	r3, r3, #3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d123      	bne.n	8003580 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	08da      	lsrs	r2, r3, #3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3208      	adds	r2, #8
 8003540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003544:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	220f      	movs	r2, #15
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4013      	ands	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	08da      	lsrs	r2, r3, #3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3208      	adds	r2, #8
 800357a:	6939      	ldr	r1, [r7, #16]
 800357c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	2203      	movs	r2, #3
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	43db      	mvns	r3, r3
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	4013      	ands	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f003 0203 	and.w	r2, r3, #3
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 80ac 	beq.w	800371a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035c2:	4b5f      	ldr	r3, [pc, #380]	@ (8003740 <HAL_GPIO_Init+0x330>)
 80035c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035c6:	4a5e      	ldr	r2, [pc, #376]	@ (8003740 <HAL_GPIO_Init+0x330>)
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80035ce:	4b5c      	ldr	r3, [pc, #368]	@ (8003740 <HAL_GPIO_Init+0x330>)
 80035d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	60bb      	str	r3, [r7, #8]
 80035d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80035da:	4a5a      	ldr	r2, [pc, #360]	@ (8003744 <HAL_GPIO_Init+0x334>)
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	089b      	lsrs	r3, r3, #2
 80035e0:	3302      	adds	r3, #2
 80035e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	220f      	movs	r2, #15
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	43db      	mvns	r3, r3
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4013      	ands	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003604:	d025      	beq.n	8003652 <HAL_GPIO_Init+0x242>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a4f      	ldr	r2, [pc, #316]	@ (8003748 <HAL_GPIO_Init+0x338>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d01f      	beq.n	800364e <HAL_GPIO_Init+0x23e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a4e      	ldr	r2, [pc, #312]	@ (800374c <HAL_GPIO_Init+0x33c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d019      	beq.n	800364a <HAL_GPIO_Init+0x23a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a4d      	ldr	r2, [pc, #308]	@ (8003750 <HAL_GPIO_Init+0x340>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d013      	beq.n	8003646 <HAL_GPIO_Init+0x236>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a4c      	ldr	r2, [pc, #304]	@ (8003754 <HAL_GPIO_Init+0x344>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00d      	beq.n	8003642 <HAL_GPIO_Init+0x232>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a4b      	ldr	r2, [pc, #300]	@ (8003758 <HAL_GPIO_Init+0x348>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d007      	beq.n	800363e <HAL_GPIO_Init+0x22e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a4a      	ldr	r2, [pc, #296]	@ (800375c <HAL_GPIO_Init+0x34c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d101      	bne.n	800363a <HAL_GPIO_Init+0x22a>
 8003636:	2306      	movs	r3, #6
 8003638:	e00c      	b.n	8003654 <HAL_GPIO_Init+0x244>
 800363a:	2307      	movs	r3, #7
 800363c:	e00a      	b.n	8003654 <HAL_GPIO_Init+0x244>
 800363e:	2305      	movs	r3, #5
 8003640:	e008      	b.n	8003654 <HAL_GPIO_Init+0x244>
 8003642:	2304      	movs	r3, #4
 8003644:	e006      	b.n	8003654 <HAL_GPIO_Init+0x244>
 8003646:	2303      	movs	r3, #3
 8003648:	e004      	b.n	8003654 <HAL_GPIO_Init+0x244>
 800364a:	2302      	movs	r3, #2
 800364c:	e002      	b.n	8003654 <HAL_GPIO_Init+0x244>
 800364e:	2301      	movs	r3, #1
 8003650:	e000      	b.n	8003654 <HAL_GPIO_Init+0x244>
 8003652:	2300      	movs	r3, #0
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	f002 0203 	and.w	r2, r2, #3
 800365a:	0092      	lsls	r2, r2, #2
 800365c:	4093      	lsls	r3, r2
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003664:	4937      	ldr	r1, [pc, #220]	@ (8003744 <HAL_GPIO_Init+0x334>)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	089b      	lsrs	r3, r3, #2
 800366a:	3302      	adds	r3, #2
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003672:	4b3b      	ldr	r3, [pc, #236]	@ (8003760 <HAL_GPIO_Init+0x350>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	43db      	mvns	r3, r3
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	4013      	ands	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4313      	orrs	r3, r2
 8003694:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003696:	4a32      	ldr	r2, [pc, #200]	@ (8003760 <HAL_GPIO_Init+0x350>)
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800369c:	4b30      	ldr	r3, [pc, #192]	@ (8003760 <HAL_GPIO_Init+0x350>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	43db      	mvns	r3, r3
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	4013      	ands	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036c0:	4a27      	ldr	r2, [pc, #156]	@ (8003760 <HAL_GPIO_Init+0x350>)
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80036c6:	4b26      	ldr	r3, [pc, #152]	@ (8003760 <HAL_GPIO_Init+0x350>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	43db      	mvns	r3, r3
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4013      	ands	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003760 <HAL_GPIO_Init+0x350>)
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80036f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003760 <HAL_GPIO_Init+0x350>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	43db      	mvns	r3, r3
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	4013      	ands	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003714:	4a12      	ldr	r2, [pc, #72]	@ (8003760 <HAL_GPIO_Init+0x350>)
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	3301      	adds	r3, #1
 800371e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	fa22 f303 	lsr.w	r3, r2, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	f47f ae78 	bne.w	8003420 <HAL_GPIO_Init+0x10>
  }
}
 8003730:	bf00      	nop
 8003732:	bf00      	nop
 8003734:	371c      	adds	r7, #28
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40021000 	.word	0x40021000
 8003744:	40010000 	.word	0x40010000
 8003748:	48000400 	.word	0x48000400
 800374c:	48000800 	.word	0x48000800
 8003750:	48000c00 	.word	0x48000c00
 8003754:	48001000 	.word	0x48001000
 8003758:	48001400 	.word	0x48001400
 800375c:	48001800 	.word	0x48001800
 8003760:	40010400 	.word	0x40010400

08003764 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	460b      	mov	r3, r1
 800376e:	807b      	strh	r3, [r7, #2]
 8003770:	4613      	mov	r3, r2
 8003772:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003774:	787b      	ldrb	r3, [r7, #1]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800377a:	887a      	ldrh	r2, [r7, #2]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003780:	e002      	b.n	8003788 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003782:	887a      	ldrh	r2, [r7, #2]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	460b      	mov	r3, r1
 800379e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037a6:	887a      	ldrh	r2, [r7, #2]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4013      	ands	r3, r2
 80037ac:	041a      	lsls	r2, r3, #16
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	43d9      	mvns	r1, r3
 80037b2:	887b      	ldrh	r3, [r7, #2]
 80037b4:	400b      	ands	r3, r1
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	619a      	str	r2, [r3, #24]
}
 80037bc:	bf00      	nop
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e08d      	b.n	80038f6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d106      	bne.n	80037f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7fd fd18 	bl	8001224 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2224      	movs	r2, #36	@ 0x24
 80037f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0201 	bic.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003818:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003828:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d107      	bne.n	8003842 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	e006      	b.n	8003850 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800384e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	2b02      	cmp	r3, #2
 8003856:	d108      	bne.n	800386a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003866:	605a      	str	r2, [r3, #4]
 8003868:	e007      	b.n	800387a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003878:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6812      	ldr	r2, [r2, #0]
 8003884:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003888:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800388c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800389c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	69d9      	ldr	r1, [r3, #28]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a1a      	ldr	r2, [r3, #32]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0201 	orr.w	r2, r2, #1
 80038d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af02      	add	r7, sp, #8
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	4608      	mov	r0, r1
 800390a:	4611      	mov	r1, r2
 800390c:	461a      	mov	r2, r3
 800390e:	4603      	mov	r3, r0
 8003910:	817b      	strh	r3, [r7, #10]
 8003912:	460b      	mov	r3, r1
 8003914:	813b      	strh	r3, [r7, #8]
 8003916:	4613      	mov	r3, r2
 8003918:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b20      	cmp	r3, #32
 8003924:	f040 80f9 	bne.w	8003b1a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <HAL_I2C_Mem_Write+0x34>
 800392e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003930:	2b00      	cmp	r3, #0
 8003932:	d105      	bne.n	8003940 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800393a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e0ed      	b.n	8003b1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003946:	2b01      	cmp	r3, #1
 8003948:	d101      	bne.n	800394e <HAL_I2C_Mem_Write+0x4e>
 800394a:	2302      	movs	r3, #2
 800394c:	e0e6      	b.n	8003b1c <HAL_I2C_Mem_Write+0x21c>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003956:	f7ff f9f7 	bl	8002d48 <HAL_GetTick>
 800395a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	2319      	movs	r3, #25
 8003962:	2201      	movs	r2, #1
 8003964:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 fac3 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e0d1      	b.n	8003b1c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2221      	movs	r2, #33	@ 0x21
 800397c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2240      	movs	r2, #64	@ 0x40
 8003984:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a3a      	ldr	r2, [r7, #32]
 8003992:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003998:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039a0:	88f8      	ldrh	r0, [r7, #6]
 80039a2:	893a      	ldrh	r2, [r7, #8]
 80039a4:	8979      	ldrh	r1, [r7, #10]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	9301      	str	r3, [sp, #4]
 80039aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	4603      	mov	r3, r0
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 f9d3 	bl	8003d5c <I2C_RequestMemoryWrite>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e0a9      	b.n	8003b1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2bff      	cmp	r3, #255	@ 0xff
 80039d0:	d90e      	bls.n	80039f0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	22ff      	movs	r2, #255	@ 0xff
 80039d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	8979      	ldrh	r1, [r7, #10]
 80039e0:	2300      	movs	r3, #0
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 fc47 	bl	800427c <I2C_TransferConfig>
 80039ee:	e00f      	b.n	8003a10 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	8979      	ldrh	r1, [r7, #10]
 8003a02:	2300      	movs	r3, #0
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 fc36 	bl	800427c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 fac6 	bl	8003fa6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e07b      	b.n	8003b1c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a28:	781a      	ldrb	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d034      	beq.n	8003ac8 <HAL_I2C_Mem_Write+0x1c8>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d130      	bne.n	8003ac8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	2180      	movs	r1, #128	@ 0x80
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 fa3f 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e04d      	b.n	8003b1c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2bff      	cmp	r3, #255	@ 0xff
 8003a88:	d90e      	bls.n	8003aa8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	22ff      	movs	r2, #255	@ 0xff
 8003a8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	8979      	ldrh	r1, [r7, #10]
 8003a98:	2300      	movs	r3, #0
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 fbeb 	bl	800427c <I2C_TransferConfig>
 8003aa6:	e00f      	b.n	8003ac8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	8979      	ldrh	r1, [r7, #10]
 8003aba:	2300      	movs	r3, #0
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 fbda 	bl	800427c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d19e      	bne.n	8003a10 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 faac 	bl	8004034 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e01a      	b.n	8003b1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2220      	movs	r2, #32
 8003aec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6859      	ldr	r1, [r3, #4]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	4b0a      	ldr	r3, [pc, #40]	@ (8003b24 <HAL_I2C_Mem_Write+0x224>)
 8003afa:	400b      	ands	r3, r1
 8003afc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b16:	2300      	movs	r3, #0
 8003b18:	e000      	b.n	8003b1c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003b1a:	2302      	movs	r3, #2
  }
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	fe00e800 	.word	0xfe00e800

08003b28 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af02      	add	r7, sp, #8
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	4608      	mov	r0, r1
 8003b32:	4611      	mov	r1, r2
 8003b34:	461a      	mov	r2, r3
 8003b36:	4603      	mov	r3, r0
 8003b38:	817b      	strh	r3, [r7, #10]
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	813b      	strh	r3, [r7, #8]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b20      	cmp	r3, #32
 8003b4c:	f040 80fd 	bne.w	8003d4a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <HAL_I2C_Mem_Read+0x34>
 8003b56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d105      	bne.n	8003b68 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b62:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e0f1      	b.n	8003d4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d101      	bne.n	8003b76 <HAL_I2C_Mem_Read+0x4e>
 8003b72:	2302      	movs	r3, #2
 8003b74:	e0ea      	b.n	8003d4c <HAL_I2C_Mem_Read+0x224>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b7e:	f7ff f8e3 	bl	8002d48 <HAL_GetTick>
 8003b82:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	2319      	movs	r3, #25
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 f9af 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e0d5      	b.n	8003d4c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2222      	movs	r2, #34	@ 0x22
 8003ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2240      	movs	r2, #64	@ 0x40
 8003bac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a3a      	ldr	r2, [r7, #32]
 8003bba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003bc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bc8:	88f8      	ldrh	r0, [r7, #6]
 8003bca:	893a      	ldrh	r2, [r7, #8]
 8003bcc:	8979      	ldrh	r1, [r7, #10]
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	9301      	str	r3, [sp, #4]
 8003bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 f913 	bl	8003e04 <I2C_RequestMemoryRead>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d005      	beq.n	8003bf0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e0ad      	b.n	8003d4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2bff      	cmp	r3, #255	@ 0xff
 8003bf8:	d90e      	bls.n	8003c18 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	8979      	ldrh	r1, [r7, #10]
 8003c08:	4b52      	ldr	r3, [pc, #328]	@ (8003d54 <HAL_I2C_Mem_Read+0x22c>)
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 fb33 	bl	800427c <I2C_TransferConfig>
 8003c16:	e00f      	b.n	8003c38 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	8979      	ldrh	r1, [r7, #10]
 8003c2a:	4b4a      	ldr	r3, [pc, #296]	@ (8003d54 <HAL_I2C_Mem_Read+0x22c>)
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 fb22 	bl	800427c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3e:	2200      	movs	r2, #0
 8003c40:	2104      	movs	r1, #4
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 f956 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e07c      	b.n	8003d4c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c64:	1c5a      	adds	r2, r3, #1
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d034      	beq.n	8003cf8 <HAL_I2C_Mem_Read+0x1d0>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d130      	bne.n	8003cf8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	2180      	movs	r1, #128	@ 0x80
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 f927 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e04d      	b.n	8003d4c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2bff      	cmp	r3, #255	@ 0xff
 8003cb8:	d90e      	bls.n	8003cd8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	8979      	ldrh	r1, [r7, #10]
 8003cc8:	2300      	movs	r3, #0
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 fad3 	bl	800427c <I2C_TransferConfig>
 8003cd6:	e00f      	b.n	8003cf8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	8979      	ldrh	r1, [r7, #10]
 8003cea:	2300      	movs	r3, #0
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 fac2 	bl	800427c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d19a      	bne.n	8003c38 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 f994 	bl	8004034 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e01a      	b.n	8003d4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6859      	ldr	r1, [r3, #4]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	4b0b      	ldr	r3, [pc, #44]	@ (8003d58 <HAL_I2C_Mem_Read+0x230>)
 8003d2a:	400b      	ands	r3, r1
 8003d2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	e000      	b.n	8003d4c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003d4a:	2302      	movs	r3, #2
  }
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	80002400 	.word	0x80002400
 8003d58:	fe00e800 	.word	0xfe00e800

08003d5c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af02      	add	r7, sp, #8
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	4608      	mov	r0, r1
 8003d66:	4611      	mov	r1, r2
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	817b      	strh	r3, [r7, #10]
 8003d6e:	460b      	mov	r3, r1
 8003d70:	813b      	strh	r3, [r7, #8]
 8003d72:	4613      	mov	r3, r2
 8003d74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003d76:	88fb      	ldrh	r3, [r7, #6]
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	8979      	ldrh	r1, [r7, #10]
 8003d7c:	4b20      	ldr	r3, [pc, #128]	@ (8003e00 <I2C_RequestMemoryWrite+0xa4>)
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 fa79 	bl	800427c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d8a:	69fa      	ldr	r2, [r7, #28]
 8003d8c:	69b9      	ldr	r1, [r7, #24]
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 f909 	bl	8003fa6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e02c      	b.n	8003df8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d9e:	88fb      	ldrh	r3, [r7, #6]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d105      	bne.n	8003db0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003da4:	893b      	ldrh	r3, [r7, #8]
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	629a      	str	r2, [r3, #40]	@ 0x28
 8003dae:	e015      	b.n	8003ddc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003db0:	893b      	ldrh	r3, [r7, #8]
 8003db2:	0a1b      	lsrs	r3, r3, #8
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dbe:	69fa      	ldr	r2, [r7, #28]
 8003dc0:	69b9      	ldr	r1, [r7, #24]
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 f8ef 	bl	8003fa6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e012      	b.n	8003df8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dd2:	893b      	ldrh	r3, [r7, #8]
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	2200      	movs	r2, #0
 8003de4:	2180      	movs	r1, #128	@ 0x80
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f884 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	80002000 	.word	0x80002000

08003e04 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af02      	add	r7, sp, #8
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	4608      	mov	r0, r1
 8003e0e:	4611      	mov	r1, r2
 8003e10:	461a      	mov	r2, r3
 8003e12:	4603      	mov	r3, r0
 8003e14:	817b      	strh	r3, [r7, #10]
 8003e16:	460b      	mov	r3, r1
 8003e18:	813b      	strh	r3, [r7, #8]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003e1e:	88fb      	ldrh	r3, [r7, #6]
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	8979      	ldrh	r1, [r7, #10]
 8003e24:	4b20      	ldr	r3, [pc, #128]	@ (8003ea8 <I2C_RequestMemoryRead+0xa4>)
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	2300      	movs	r3, #0
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 fa26 	bl	800427c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e30:	69fa      	ldr	r2, [r7, #28]
 8003e32:	69b9      	ldr	r1, [r7, #24]
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 f8b6 	bl	8003fa6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e02c      	b.n	8003e9e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e44:	88fb      	ldrh	r3, [r7, #6]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d105      	bne.n	8003e56 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e4a:	893b      	ldrh	r3, [r7, #8]
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e54:	e015      	b.n	8003e82 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e56:	893b      	ldrh	r3, [r7, #8]
 8003e58:	0a1b      	lsrs	r3, r3, #8
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e64:	69fa      	ldr	r2, [r7, #28]
 8003e66:	69b9      	ldr	r1, [r7, #24]
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 f89c 	bl	8003fa6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e012      	b.n	8003e9e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e78:	893b      	ldrh	r3, [r7, #8]
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2140      	movs	r1, #64	@ 0x40
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 f831 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e000      	b.n	8003e9e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	80002000 	.word	0x80002000

08003eac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d103      	bne.n	8003eca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d007      	beq.n	8003ee8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699a      	ldr	r2, [r3, #24]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	619a      	str	r2, [r3, #24]
  }
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	603b      	str	r3, [r7, #0]
 8003f00:	4613      	mov	r3, r2
 8003f02:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f04:	e03b      	b.n	8003f7e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	6839      	ldr	r1, [r7, #0]
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 f8d6 	bl	80040bc <I2C_IsErrorOccurred>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e041      	b.n	8003f9e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f20:	d02d      	beq.n	8003f7e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f22:	f7fe ff11 	bl	8002d48 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d302      	bcc.n	8003f38 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d122      	bne.n	8003f7e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	699a      	ldr	r2, [r3, #24]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	4013      	ands	r3, r2
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	bf0c      	ite	eq
 8003f48:	2301      	moveq	r3, #1
 8003f4a:	2300      	movne	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	461a      	mov	r2, r3
 8003f50:	79fb      	ldrb	r3, [r7, #7]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d113      	bne.n	8003f7e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f5a:	f043 0220 	orr.w	r2, r3, #32
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2220      	movs	r2, #32
 8003f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e00f      	b.n	8003f9e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	699a      	ldr	r2, [r3, #24]
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	4013      	ands	r3, r2
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	bf0c      	ite	eq
 8003f8e:	2301      	moveq	r3, #1
 8003f90:	2300      	movne	r3, #0
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	461a      	mov	r2, r3
 8003f96:	79fb      	ldrb	r3, [r7, #7]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d0b4      	beq.n	8003f06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b084      	sub	sp, #16
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	60f8      	str	r0, [r7, #12]
 8003fae:	60b9      	str	r1, [r7, #8]
 8003fb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fb2:	e033      	b.n	800401c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	68b9      	ldr	r1, [r7, #8]
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 f87f 	bl	80040bc <I2C_IsErrorOccurred>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e031      	b.n	800402c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fce:	d025      	beq.n	800401c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd0:	f7fe feba 	bl	8002d48 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d302      	bcc.n	8003fe6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d11a      	bne.n	800401c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d013      	beq.n	800401c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff8:	f043 0220 	orr.w	r2, r3, #32
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e007      	b.n	800402c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b02      	cmp	r3, #2
 8004028:	d1c4      	bne.n	8003fb4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004040:	e02f      	b.n	80040a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	68b9      	ldr	r1, [r7, #8]
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 f838 	bl	80040bc <I2C_IsErrorOccurred>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e02d      	b.n	80040b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004056:	f7fe fe77 	bl	8002d48 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	429a      	cmp	r2, r3
 8004064:	d302      	bcc.n	800406c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d11a      	bne.n	80040a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	f003 0320 	and.w	r3, r3, #32
 8004076:	2b20      	cmp	r3, #32
 8004078:	d013      	beq.n	80040a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407e:	f043 0220 	orr.w	r2, r3, #32
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2220      	movs	r2, #32
 800408a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e007      	b.n	80040b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	f003 0320 	and.w	r3, r3, #32
 80040ac:	2b20      	cmp	r3, #32
 80040ae:	d1c8      	bne.n	8004042 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08a      	sub	sp, #40	@ 0x28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040c8:	2300      	movs	r3, #0
 80040ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	f003 0310 	and.w	r3, r3, #16
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d068      	beq.n	80041ba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2210      	movs	r2, #16
 80040ee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040f0:	e049      	b.n	8004186 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040f8:	d045      	beq.n	8004186 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040fa:	f7fe fe25 	bl	8002d48 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	429a      	cmp	r2, r3
 8004108:	d302      	bcc.n	8004110 <I2C_IsErrorOccurred+0x54>
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d13a      	bne.n	8004186 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800411a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004122:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800412e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004132:	d121      	bne.n	8004178 <I2C_IsErrorOccurred+0xbc>
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800413a:	d01d      	beq.n	8004178 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800413c:	7cfb      	ldrb	r3, [r7, #19]
 800413e:	2b20      	cmp	r3, #32
 8004140:	d01a      	beq.n	8004178 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004150:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004152:	f7fe fdf9 	bl	8002d48 <HAL_GetTick>
 8004156:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004158:	e00e      	b.n	8004178 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800415a:	f7fe fdf5 	bl	8002d48 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b19      	cmp	r3, #25
 8004166:	d907      	bls.n	8004178 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	f043 0320 	orr.w	r3, r3, #32
 800416e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004176:	e006      	b.n	8004186 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	f003 0320 	and.w	r3, r3, #32
 8004182:	2b20      	cmp	r3, #32
 8004184:	d1e9      	bne.n	800415a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	f003 0320 	and.w	r3, r3, #32
 8004190:	2b20      	cmp	r3, #32
 8004192:	d003      	beq.n	800419c <I2C_IsErrorOccurred+0xe0>
 8004194:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0aa      	beq.n	80040f2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800419c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d103      	bne.n	80041ac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2220      	movs	r2, #32
 80041aa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	f043 0304 	orr.w	r3, r3, #4
 80041b2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00b      	beq.n	80041e4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	f043 0301 	orr.w	r3, r3, #1
 80041d2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80041dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00b      	beq.n	8004206 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80041ee:	6a3b      	ldr	r3, [r7, #32]
 80041f0:	f043 0308 	orr.w	r3, r3, #8
 80041f4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00b      	beq.n	8004228 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	f043 0302 	orr.w	r3, r3, #2
 8004216:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004220:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004228:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800422c:	2b00      	cmp	r3, #0
 800422e:	d01c      	beq.n	800426a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f7ff fe3b 	bl	8003eac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6859      	ldr	r1, [r3, #4]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	4b0d      	ldr	r3, [pc, #52]	@ (8004278 <I2C_IsErrorOccurred+0x1bc>)
 8004242:	400b      	ands	r3, r1
 8004244:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800424a:	6a3b      	ldr	r3, [r7, #32]
 800424c:	431a      	orrs	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2220      	movs	r2, #32
 8004256:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800426a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800426e:	4618      	mov	r0, r3
 8004270:	3728      	adds	r7, #40	@ 0x28
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	fe00e800 	.word	0xfe00e800

0800427c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	607b      	str	r3, [r7, #4]
 8004286:	460b      	mov	r3, r1
 8004288:	817b      	strh	r3, [r7, #10]
 800428a:	4613      	mov	r3, r2
 800428c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800428e:	897b      	ldrh	r3, [r7, #10]
 8004290:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004294:	7a7b      	ldrb	r3, [r7, #9]
 8004296:	041b      	lsls	r3, r3, #16
 8004298:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800429c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80042aa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	0d5b      	lsrs	r3, r3, #21
 80042b6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80042ba:	4b08      	ldr	r3, [pc, #32]	@ (80042dc <I2C_TransferConfig+0x60>)
 80042bc:	430b      	orrs	r3, r1
 80042be:	43db      	mvns	r3, r3
 80042c0:	ea02 0103 	and.w	r1, r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80042ce:	bf00      	nop
 80042d0:	371c      	adds	r7, #28
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	03ff63ff 	.word	0x03ff63ff

080042e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b20      	cmp	r3, #32
 80042f4:	d138      	bne.n	8004368 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d101      	bne.n	8004304 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004300:	2302      	movs	r3, #2
 8004302:	e032      	b.n	800436a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2224      	movs	r2, #36	@ 0x24
 8004310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0201 	bic.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004332:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6819      	ldr	r1, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 0201 	orr.w	r2, r2, #1
 8004352:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2220      	movs	r2, #32
 8004358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004364:	2300      	movs	r3, #0
 8004366:	e000      	b.n	800436a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004368:	2302      	movs	r3, #2
  }
}
 800436a:	4618      	mov	r0, r3
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004376:	b480      	push	{r7}
 8004378:	b085      	sub	sp, #20
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
 800437e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b20      	cmp	r3, #32
 800438a:	d139      	bne.n	8004400 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004392:	2b01      	cmp	r3, #1
 8004394:	d101      	bne.n	800439a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004396:	2302      	movs	r3, #2
 8004398:	e033      	b.n	8004402 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2224      	movs	r2, #36	@ 0x24
 80043a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0201 	bic.w	r2, r2, #1
 80043b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80043c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	021b      	lsls	r3, r3, #8
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0201 	orr.w	r2, r2, #1
 80043ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80043fc:	2300      	movs	r3, #0
 80043fe:	e000      	b.n	8004402 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004400:	2302      	movs	r3, #2
  }
}
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
	...

08004410 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004414:	4b04      	ldr	r3, [pc, #16]	@ (8004428 <HAL_PWREx_GetVoltageRange+0x18>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800441c:	4618      	mov	r0, r3
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40007000 	.word	0x40007000

0800442c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800443a:	d130      	bne.n	800449e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800443c:	4b23      	ldr	r3, [pc, #140]	@ (80044cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004444:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004448:	d038      	beq.n	80044bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800444a:	4b20      	ldr	r3, [pc, #128]	@ (80044cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004452:	4a1e      	ldr	r2, [pc, #120]	@ (80044cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004454:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004458:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800445a:	4b1d      	ldr	r3, [pc, #116]	@ (80044d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2232      	movs	r2, #50	@ 0x32
 8004460:	fb02 f303 	mul.w	r3, r2, r3
 8004464:	4a1b      	ldr	r2, [pc, #108]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004466:	fba2 2303 	umull	r2, r3, r2, r3
 800446a:	0c9b      	lsrs	r3, r3, #18
 800446c:	3301      	adds	r3, #1
 800446e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004470:	e002      	b.n	8004478 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	3b01      	subs	r3, #1
 8004476:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004478:	4b14      	ldr	r3, [pc, #80]	@ (80044cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004480:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004484:	d102      	bne.n	800448c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1f2      	bne.n	8004472 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800448c:	4b0f      	ldr	r3, [pc, #60]	@ (80044cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004494:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004498:	d110      	bne.n	80044bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e00f      	b.n	80044be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800449e:	4b0b      	ldr	r3, [pc, #44]	@ (80044cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80044a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044aa:	d007      	beq.n	80044bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044ac:	4b07      	ldr	r3, [pc, #28]	@ (80044cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044b4:	4a05      	ldr	r2, [pc, #20]	@ (80044cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80044ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40007000 	.word	0x40007000
 80044d0:	20000000 	.word	0x20000000
 80044d4:	431bde83 	.word	0x431bde83

080044d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e3ca      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044ea:	4b97      	ldr	r3, [pc, #604]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f003 030c 	and.w	r3, r3, #12
 80044f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044f4:	4b94      	ldr	r3, [pc, #592]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f003 0303 	and.w	r3, r3, #3
 80044fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0310 	and.w	r3, r3, #16
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 80e4 	beq.w	80046d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d007      	beq.n	8004522 <HAL_RCC_OscConfig+0x4a>
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	2b0c      	cmp	r3, #12
 8004516:	f040 808b 	bne.w	8004630 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2b01      	cmp	r3, #1
 800451e:	f040 8087 	bne.w	8004630 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004522:	4b89      	ldr	r3, [pc, #548]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d005      	beq.n	800453a <HAL_RCC_OscConfig+0x62>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e3a2      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1a      	ldr	r2, [r3, #32]
 800453e:	4b82      	ldr	r3, [pc, #520]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0308 	and.w	r3, r3, #8
 8004546:	2b00      	cmp	r3, #0
 8004548:	d004      	beq.n	8004554 <HAL_RCC_OscConfig+0x7c>
 800454a:	4b7f      	ldr	r3, [pc, #508]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004552:	e005      	b.n	8004560 <HAL_RCC_OscConfig+0x88>
 8004554:	4b7c      	ldr	r3, [pc, #496]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 8004556:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800455a:	091b      	lsrs	r3, r3, #4
 800455c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004560:	4293      	cmp	r3, r2
 8004562:	d223      	bcs.n	80045ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fd87 	bl	800507c <RCC_SetFlashLatencyFromMSIRange>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e383      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004578:	4b73      	ldr	r3, [pc, #460]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a72      	ldr	r2, [pc, #456]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 800457e:	f043 0308 	orr.w	r3, r3, #8
 8004582:	6013      	str	r3, [r2, #0]
 8004584:	4b70      	ldr	r3, [pc, #448]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	496d      	ldr	r1, [pc, #436]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 8004592:	4313      	orrs	r3, r2
 8004594:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004596:	4b6c      	ldr	r3, [pc, #432]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	021b      	lsls	r3, r3, #8
 80045a4:	4968      	ldr	r1, [pc, #416]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	604b      	str	r3, [r1, #4]
 80045aa:	e025      	b.n	80045f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045ac:	4b66      	ldr	r3, [pc, #408]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a65      	ldr	r2, [pc, #404]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 80045b2:	f043 0308 	orr.w	r3, r3, #8
 80045b6:	6013      	str	r3, [r2, #0]
 80045b8:	4b63      	ldr	r3, [pc, #396]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	4960      	ldr	r1, [pc, #384]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045ca:	4b5f      	ldr	r3, [pc, #380]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	021b      	lsls	r3, r3, #8
 80045d8:	495b      	ldr	r1, [pc, #364]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d109      	bne.n	80045f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 fd47 	bl	800507c <RCC_SetFlashLatencyFromMSIRange>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e343      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045f8:	f000 fc4a 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 80045fc:	4602      	mov	r2, r0
 80045fe:	4b52      	ldr	r3, [pc, #328]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	091b      	lsrs	r3, r3, #4
 8004604:	f003 030f 	and.w	r3, r3, #15
 8004608:	4950      	ldr	r1, [pc, #320]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 800460a:	5ccb      	ldrb	r3, [r1, r3]
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	fa22 f303 	lsr.w	r3, r2, r3
 8004614:	4a4e      	ldr	r2, [pc, #312]	@ (8004750 <HAL_RCC_OscConfig+0x278>)
 8004616:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004618:	4b4e      	ldr	r3, [pc, #312]	@ (8004754 <HAL_RCC_OscConfig+0x27c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4618      	mov	r0, r3
 800461e:	f7fd fb67 	bl	8001cf0 <HAL_InitTick>
 8004622:	4603      	mov	r3, r0
 8004624:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004626:	7bfb      	ldrb	r3, [r7, #15]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d052      	beq.n	80046d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800462c:	7bfb      	ldrb	r3, [r7, #15]
 800462e:	e327      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d032      	beq.n	800469e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004638:	4b43      	ldr	r3, [pc, #268]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a42      	ldr	r2, [pc, #264]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 800463e:	f043 0301 	orr.w	r3, r3, #1
 8004642:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004644:	f7fe fb80 	bl	8002d48 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800464c:	f7fe fb7c 	bl	8002d48 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e310      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800465e:	4b3a      	ldr	r3, [pc, #232]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0f0      	beq.n	800464c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800466a:	4b37      	ldr	r3, [pc, #220]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a36      	ldr	r2, [pc, #216]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 8004670:	f043 0308 	orr.w	r3, r3, #8
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	4b34      	ldr	r3, [pc, #208]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	4931      	ldr	r1, [pc, #196]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 8004684:	4313      	orrs	r3, r2
 8004686:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004688:	4b2f      	ldr	r3, [pc, #188]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	69db      	ldr	r3, [r3, #28]
 8004694:	021b      	lsls	r3, r3, #8
 8004696:	492c      	ldr	r1, [pc, #176]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 8004698:	4313      	orrs	r3, r2
 800469a:	604b      	str	r3, [r1, #4]
 800469c:	e01a      	b.n	80046d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800469e:	4b2a      	ldr	r3, [pc, #168]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a29      	ldr	r2, [pc, #164]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 80046a4:	f023 0301 	bic.w	r3, r3, #1
 80046a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046aa:	f7fe fb4d 	bl	8002d48 <HAL_GetTick>
 80046ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046b0:	e008      	b.n	80046c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046b2:	f7fe fb49 	bl	8002d48 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e2dd      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046c4:	4b20      	ldr	r3, [pc, #128]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1f0      	bne.n	80046b2 <HAL_RCC_OscConfig+0x1da>
 80046d0:	e000      	b.n	80046d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d074      	beq.n	80047ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	2b08      	cmp	r3, #8
 80046e4:	d005      	beq.n	80046f2 <HAL_RCC_OscConfig+0x21a>
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	2b0c      	cmp	r3, #12
 80046ea:	d10e      	bne.n	800470a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d10b      	bne.n	800470a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f2:	4b15      	ldr	r3, [pc, #84]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d064      	beq.n	80047c8 <HAL_RCC_OscConfig+0x2f0>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d160      	bne.n	80047c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e2ba      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004712:	d106      	bne.n	8004722 <HAL_RCC_OscConfig+0x24a>
 8004714:	4b0c      	ldr	r3, [pc, #48]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a0b      	ldr	r2, [pc, #44]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 800471a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800471e:	6013      	str	r3, [r2, #0]
 8004720:	e026      	b.n	8004770 <HAL_RCC_OscConfig+0x298>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800472a:	d115      	bne.n	8004758 <HAL_RCC_OscConfig+0x280>
 800472c:	4b06      	ldr	r3, [pc, #24]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a05      	ldr	r2, [pc, #20]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 8004732:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	4b03      	ldr	r3, [pc, #12]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a02      	ldr	r2, [pc, #8]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 800473e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	e014      	b.n	8004770 <HAL_RCC_OscConfig+0x298>
 8004746:	bf00      	nop
 8004748:	40021000 	.word	0x40021000
 800474c:	08010ee4 	.word	0x08010ee4
 8004750:	20000000 	.word	0x20000000
 8004754:	2000000c 	.word	0x2000000c
 8004758:	4ba0      	ldr	r3, [pc, #640]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a9f      	ldr	r2, [pc, #636]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 800475e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004762:	6013      	str	r3, [r2, #0]
 8004764:	4b9d      	ldr	r3, [pc, #628]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a9c      	ldr	r2, [pc, #624]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 800476a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800476e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d013      	beq.n	80047a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004778:	f7fe fae6 	bl	8002d48 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004780:	f7fe fae2 	bl	8002d48 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b64      	cmp	r3, #100	@ 0x64
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e276      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004792:	4b92      	ldr	r3, [pc, #584]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f0      	beq.n	8004780 <HAL_RCC_OscConfig+0x2a8>
 800479e:	e014      	b.n	80047ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a0:	f7fe fad2 	bl	8002d48 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047a8:	f7fe face 	bl	8002d48 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b64      	cmp	r3, #100	@ 0x64
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e262      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047ba:	4b88      	ldr	r3, [pc, #544]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f0      	bne.n	80047a8 <HAL_RCC_OscConfig+0x2d0>
 80047c6:	e000      	b.n	80047ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d060      	beq.n	8004898 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d005      	beq.n	80047e8 <HAL_RCC_OscConfig+0x310>
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2b0c      	cmp	r3, #12
 80047e0:	d119      	bne.n	8004816 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d116      	bne.n	8004816 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047e8:	4b7c      	ldr	r3, [pc, #496]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d005      	beq.n	8004800 <HAL_RCC_OscConfig+0x328>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e23f      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004800:	4b76      	ldr	r3, [pc, #472]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	061b      	lsls	r3, r3, #24
 800480e:	4973      	ldr	r1, [pc, #460]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 8004810:	4313      	orrs	r3, r2
 8004812:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004814:	e040      	b.n	8004898 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d023      	beq.n	8004866 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800481e:	4b6f      	ldr	r3, [pc, #444]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a6e      	ldr	r2, [pc, #440]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 8004824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482a:	f7fe fa8d 	bl	8002d48 <HAL_GetTick>
 800482e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004830:	e008      	b.n	8004844 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004832:	f7fe fa89 	bl	8002d48 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e21d      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004844:	4b65      	ldr	r3, [pc, #404]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800484c:	2b00      	cmp	r3, #0
 800484e:	d0f0      	beq.n	8004832 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004850:	4b62      	ldr	r3, [pc, #392]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	061b      	lsls	r3, r3, #24
 800485e:	495f      	ldr	r1, [pc, #380]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 8004860:	4313      	orrs	r3, r2
 8004862:	604b      	str	r3, [r1, #4]
 8004864:	e018      	b.n	8004898 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004866:	4b5d      	ldr	r3, [pc, #372]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a5c      	ldr	r2, [pc, #368]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 800486c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004872:	f7fe fa69 	bl	8002d48 <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800487a:	f7fe fa65 	bl	8002d48 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e1f9      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800488c:	4b53      	ldr	r3, [pc, #332]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1f0      	bne.n	800487a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d03c      	beq.n	800491e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d01c      	beq.n	80048e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ac:	4b4b      	ldr	r3, [pc, #300]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 80048ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048b2:	4a4a      	ldr	r2, [pc, #296]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 80048b4:	f043 0301 	orr.w	r3, r3, #1
 80048b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048bc:	f7fe fa44 	bl	8002d48 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048c4:	f7fe fa40 	bl	8002d48 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e1d4      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048d6:	4b41      	ldr	r3, [pc, #260]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 80048d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d0ef      	beq.n	80048c4 <HAL_RCC_OscConfig+0x3ec>
 80048e4:	e01b      	b.n	800491e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048e6:	4b3d      	ldr	r3, [pc, #244]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 80048e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048ec:	4a3b      	ldr	r2, [pc, #236]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 80048ee:	f023 0301 	bic.w	r3, r3, #1
 80048f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f6:	f7fe fa27 	bl	8002d48 <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048fc:	e008      	b.n	8004910 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048fe:	f7fe fa23 	bl	8002d48 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e1b7      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004910:	4b32      	ldr	r3, [pc, #200]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 8004912:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1ef      	bne.n	80048fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 80a6 	beq.w	8004a78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800492c:	2300      	movs	r3, #0
 800492e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004930:	4b2a      	ldr	r3, [pc, #168]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 8004932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10d      	bne.n	8004958 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800493c:	4b27      	ldr	r3, [pc, #156]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 800493e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004940:	4a26      	ldr	r2, [pc, #152]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 8004942:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004946:	6593      	str	r3, [r2, #88]	@ 0x58
 8004948:	4b24      	ldr	r3, [pc, #144]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 800494a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800494c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004950:	60bb      	str	r3, [r7, #8]
 8004952:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004954:	2301      	movs	r3, #1
 8004956:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004958:	4b21      	ldr	r3, [pc, #132]	@ (80049e0 <HAL_RCC_OscConfig+0x508>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004960:	2b00      	cmp	r3, #0
 8004962:	d118      	bne.n	8004996 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004964:	4b1e      	ldr	r3, [pc, #120]	@ (80049e0 <HAL_RCC_OscConfig+0x508>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a1d      	ldr	r2, [pc, #116]	@ (80049e0 <HAL_RCC_OscConfig+0x508>)
 800496a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800496e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004970:	f7fe f9ea 	bl	8002d48 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004978:	f7fe f9e6 	bl	8002d48 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e17a      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800498a:	4b15      	ldr	r3, [pc, #84]	@ (80049e0 <HAL_RCC_OscConfig+0x508>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0f0      	beq.n	8004978 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d108      	bne.n	80049b0 <HAL_RCC_OscConfig+0x4d8>
 800499e:	4b0f      	ldr	r3, [pc, #60]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 80049a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a4:	4a0d      	ldr	r2, [pc, #52]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 80049a6:	f043 0301 	orr.w	r3, r3, #1
 80049aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049ae:	e029      	b.n	8004a04 <HAL_RCC_OscConfig+0x52c>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	2b05      	cmp	r3, #5
 80049b6:	d115      	bne.n	80049e4 <HAL_RCC_OscConfig+0x50c>
 80049b8:	4b08      	ldr	r3, [pc, #32]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 80049ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049be:	4a07      	ldr	r2, [pc, #28]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 80049c0:	f043 0304 	orr.w	r3, r3, #4
 80049c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049c8:	4b04      	ldr	r3, [pc, #16]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 80049ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ce:	4a03      	ldr	r2, [pc, #12]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 80049d0:	f043 0301 	orr.w	r3, r3, #1
 80049d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049d8:	e014      	b.n	8004a04 <HAL_RCC_OscConfig+0x52c>
 80049da:	bf00      	nop
 80049dc:	40021000 	.word	0x40021000
 80049e0:	40007000 	.word	0x40007000
 80049e4:	4b9c      	ldr	r3, [pc, #624]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 80049e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ea:	4a9b      	ldr	r2, [pc, #620]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 80049ec:	f023 0301 	bic.w	r3, r3, #1
 80049f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049f4:	4b98      	ldr	r3, [pc, #608]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 80049f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049fa:	4a97      	ldr	r2, [pc, #604]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 80049fc:	f023 0304 	bic.w	r3, r3, #4
 8004a00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d016      	beq.n	8004a3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a0c:	f7fe f99c 	bl	8002d48 <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a12:	e00a      	b.n	8004a2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a14:	f7fe f998 	bl	8002d48 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e12a      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a2a:	4b8b      	ldr	r3, [pc, #556]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0ed      	beq.n	8004a14 <HAL_RCC_OscConfig+0x53c>
 8004a38:	e015      	b.n	8004a66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a3a:	f7fe f985 	bl	8002d48 <HAL_GetTick>
 8004a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a40:	e00a      	b.n	8004a58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a42:	f7fe f981 	bl	8002d48 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e113      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a58:	4b7f      	ldr	r3, [pc, #508]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1ed      	bne.n	8004a42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a66:	7ffb      	ldrb	r3, [r7, #31]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d105      	bne.n	8004a78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a6c:	4b7a      	ldr	r3, [pc, #488]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a70:	4a79      	ldr	r2, [pc, #484]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004a72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a76:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 80fe 	beq.w	8004c7e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	f040 80d0 	bne.w	8004c2c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a8c:	4b72      	ldr	r3, [pc, #456]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f003 0203 	and.w	r2, r3, #3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d130      	bne.n	8004b02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d127      	bne.n	8004b02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004abc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d11f      	bne.n	8004b02 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004acc:	2a07      	cmp	r2, #7
 8004ace:	bf14      	ite	ne
 8004ad0:	2201      	movne	r2, #1
 8004ad2:	2200      	moveq	r2, #0
 8004ad4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d113      	bne.n	8004b02 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ae4:	085b      	lsrs	r3, r3, #1
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d109      	bne.n	8004b02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af8:	085b      	lsrs	r3, r3, #1
 8004afa:	3b01      	subs	r3, #1
 8004afc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d06e      	beq.n	8004be0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	2b0c      	cmp	r3, #12
 8004b06:	d069      	beq.n	8004bdc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b08:	4b53      	ldr	r3, [pc, #332]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d105      	bne.n	8004b20 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b14:	4b50      	ldr	r3, [pc, #320]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e0ad      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b24:	4b4c      	ldr	r3, [pc, #304]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a4b      	ldr	r2, [pc, #300]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004b2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b2e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b30:	f7fe f90a 	bl	8002d48 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b38:	f7fe f906 	bl	8002d48 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e09a      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b4a:	4b43      	ldr	r3, [pc, #268]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1f0      	bne.n	8004b38 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b56:	4b40      	ldr	r3, [pc, #256]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	4b40      	ldr	r3, [pc, #256]	@ (8004c5c <HAL_RCC_OscConfig+0x784>)
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004b66:	3a01      	subs	r2, #1
 8004b68:	0112      	lsls	r2, r2, #4
 8004b6a:	4311      	orrs	r1, r2
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b70:	0212      	lsls	r2, r2, #8
 8004b72:	4311      	orrs	r1, r2
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b78:	0852      	lsrs	r2, r2, #1
 8004b7a:	3a01      	subs	r2, #1
 8004b7c:	0552      	lsls	r2, r2, #21
 8004b7e:	4311      	orrs	r1, r2
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004b84:	0852      	lsrs	r2, r2, #1
 8004b86:	3a01      	subs	r2, #1
 8004b88:	0652      	lsls	r2, r2, #25
 8004b8a:	4311      	orrs	r1, r2
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b90:	0912      	lsrs	r2, r2, #4
 8004b92:	0452      	lsls	r2, r2, #17
 8004b94:	430a      	orrs	r2, r1
 8004b96:	4930      	ldr	r1, [pc, #192]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b9c:	4b2e      	ldr	r3, [pc, #184]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a2d      	ldr	r2, [pc, #180]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004ba2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ba6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ba8:	4b2b      	ldr	r3, [pc, #172]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	4a2a      	ldr	r2, [pc, #168]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004bae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bb4:	f7fe f8c8 	bl	8002d48 <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bbc:	f7fe f8c4 	bl	8002d48 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e058      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bce:	4b22      	ldr	r3, [pc, #136]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0f0      	beq.n	8004bbc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bda:	e050      	b.n	8004c7e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e04f      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be0:	4b1d      	ldr	r3, [pc, #116]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d148      	bne.n	8004c7e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004bec:	4b1a      	ldr	r3, [pc, #104]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a19      	ldr	r2, [pc, #100]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004bf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bf6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bf8:	4b17      	ldr	r3, [pc, #92]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	4a16      	ldr	r2, [pc, #88]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004bfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c04:	f7fe f8a0 	bl	8002d48 <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c0c:	f7fe f89c 	bl	8002d48 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e030      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0f0      	beq.n	8004c0c <HAL_RCC_OscConfig+0x734>
 8004c2a:	e028      	b.n	8004c7e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	2b0c      	cmp	r3, #12
 8004c30:	d023      	beq.n	8004c7a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c32:	4b09      	ldr	r3, [pc, #36]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a08      	ldr	r2, [pc, #32]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004c38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3e:	f7fe f883 	bl	8002d48 <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c44:	e00c      	b.n	8004c60 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c46:	f7fe f87f 	bl	8002d48 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d905      	bls.n	8004c60 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e013      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c60:	4b09      	ldr	r3, [pc, #36]	@ (8004c88 <HAL_RCC_OscConfig+0x7b0>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1ec      	bne.n	8004c46 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c6c:	4b06      	ldr	r3, [pc, #24]	@ (8004c88 <HAL_RCC_OscConfig+0x7b0>)
 8004c6e:	68da      	ldr	r2, [r3, #12]
 8004c70:	4905      	ldr	r1, [pc, #20]	@ (8004c88 <HAL_RCC_OscConfig+0x7b0>)
 8004c72:	4b06      	ldr	r3, [pc, #24]	@ (8004c8c <HAL_RCC_OscConfig+0x7b4>)
 8004c74:	4013      	ands	r3, r2
 8004c76:	60cb      	str	r3, [r1, #12]
 8004c78:	e001      	b.n	8004c7e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e000      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3720      	adds	r7, #32
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	feeefffc 	.word	0xfeeefffc

08004c90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e0e7      	b.n	8004e74 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ca4:	4b75      	ldr	r3, [pc, #468]	@ (8004e7c <HAL_RCC_ClockConfig+0x1ec>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d910      	bls.n	8004cd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cb2:	4b72      	ldr	r3, [pc, #456]	@ (8004e7c <HAL_RCC_ClockConfig+0x1ec>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f023 0207 	bic.w	r2, r3, #7
 8004cba:	4970      	ldr	r1, [pc, #448]	@ (8004e7c <HAL_RCC_ClockConfig+0x1ec>)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc2:	4b6e      	ldr	r3, [pc, #440]	@ (8004e7c <HAL_RCC_ClockConfig+0x1ec>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d001      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e0cf      	b.n	8004e74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d010      	beq.n	8004d02 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	4b66      	ldr	r3, [pc, #408]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d908      	bls.n	8004d02 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cf0:	4b63      	ldr	r3, [pc, #396]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	4960      	ldr	r1, [pc, #384]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d04c      	beq.n	8004da8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d107      	bne.n	8004d26 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d16:	4b5a      	ldr	r3, [pc, #360]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d121      	bne.n	8004d66 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e0a6      	b.n	8004e74 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d107      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d2e:	4b54      	ldr	r3, [pc, #336]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d115      	bne.n	8004d66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e09a      	b.n	8004e74 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d107      	bne.n	8004d56 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d46:	4b4e      	ldr	r3, [pc, #312]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d109      	bne.n	8004d66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e08e      	b.n	8004e74 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d56:	4b4a      	ldr	r3, [pc, #296]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e086      	b.n	8004e74 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d66:	4b46      	ldr	r3, [pc, #280]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f023 0203 	bic.w	r2, r3, #3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	4943      	ldr	r1, [pc, #268]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d78:	f7fd ffe6 	bl	8002d48 <HAL_GetTick>
 8004d7c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7e:	e00a      	b.n	8004d96 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d80:	f7fd ffe2 	bl	8002d48 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e06e      	b.n	8004e74 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d96:	4b3a      	ldr	r3, [pc, #232]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 020c 	and.w	r2, r3, #12
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d1eb      	bne.n	8004d80 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d010      	beq.n	8004dd6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	4b31      	ldr	r3, [pc, #196]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d208      	bcs.n	8004dd6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dc4:	4b2e      	ldr	r3, [pc, #184]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	492b      	ldr	r1, [pc, #172]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dd6:	4b29      	ldr	r3, [pc, #164]	@ (8004e7c <HAL_RCC_ClockConfig+0x1ec>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0307 	and.w	r3, r3, #7
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d210      	bcs.n	8004e06 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de4:	4b25      	ldr	r3, [pc, #148]	@ (8004e7c <HAL_RCC_ClockConfig+0x1ec>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f023 0207 	bic.w	r2, r3, #7
 8004dec:	4923      	ldr	r1, [pc, #140]	@ (8004e7c <HAL_RCC_ClockConfig+0x1ec>)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df4:	4b21      	ldr	r3, [pc, #132]	@ (8004e7c <HAL_RCC_ClockConfig+0x1ec>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d001      	beq.n	8004e06 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e036      	b.n	8004e74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0304 	and.w	r3, r3, #4
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d008      	beq.n	8004e24 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e12:	4b1b      	ldr	r3, [pc, #108]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	4918      	ldr	r1, [pc, #96]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0308 	and.w	r3, r3, #8
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d009      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e30:	4b13      	ldr	r3, [pc, #76]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	00db      	lsls	r3, r3, #3
 8004e3e:	4910      	ldr	r1, [pc, #64]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e44:	f000 f824 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	091b      	lsrs	r3, r3, #4
 8004e50:	f003 030f 	and.w	r3, r3, #15
 8004e54:	490b      	ldr	r1, [pc, #44]	@ (8004e84 <HAL_RCC_ClockConfig+0x1f4>)
 8004e56:	5ccb      	ldrb	r3, [r1, r3]
 8004e58:	f003 031f 	and.w	r3, r3, #31
 8004e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e60:	4a09      	ldr	r2, [pc, #36]	@ (8004e88 <HAL_RCC_ClockConfig+0x1f8>)
 8004e62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e64:	4b09      	ldr	r3, [pc, #36]	@ (8004e8c <HAL_RCC_ClockConfig+0x1fc>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7fc ff41 	bl	8001cf0 <HAL_InitTick>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e72:	7afb      	ldrb	r3, [r7, #11]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	40022000 	.word	0x40022000
 8004e80:	40021000 	.word	0x40021000
 8004e84:	08010ee4 	.word	0x08010ee4
 8004e88:	20000000 	.word	0x20000000
 8004e8c:	2000000c 	.word	0x2000000c

08004e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b089      	sub	sp, #36	@ 0x24
 8004e94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	61fb      	str	r3, [r7, #28]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e9e:	4b3e      	ldr	r3, [pc, #248]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 030c 	and.w	r3, r3, #12
 8004ea6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ea8:	4b3b      	ldr	r3, [pc, #236]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f003 0303 	and.w	r3, r3, #3
 8004eb0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d005      	beq.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x34>
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	2b0c      	cmp	r3, #12
 8004ebc:	d121      	bne.n	8004f02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d11e      	bne.n	8004f02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ec4:	4b34      	ldr	r3, [pc, #208]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d107      	bne.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ed0:	4b31      	ldr	r3, [pc, #196]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ed6:	0a1b      	lsrs	r3, r3, #8
 8004ed8:	f003 030f 	and.w	r3, r3, #15
 8004edc:	61fb      	str	r3, [r7, #28]
 8004ede:	e005      	b.n	8004eec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ee0:	4b2d      	ldr	r3, [pc, #180]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	091b      	lsrs	r3, r3, #4
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004eec:	4a2b      	ldr	r2, [pc, #172]	@ (8004f9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ef4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10d      	bne.n	8004f18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f00:	e00a      	b.n	8004f18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d102      	bne.n	8004f0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f08:	4b25      	ldr	r3, [pc, #148]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f0a:	61bb      	str	r3, [r7, #24]
 8004f0c:	e004      	b.n	8004f18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	2b08      	cmp	r3, #8
 8004f12:	d101      	bne.n	8004f18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f14:	4b23      	ldr	r3, [pc, #140]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	2b0c      	cmp	r3, #12
 8004f1c:	d134      	bne.n	8004f88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d003      	beq.n	8004f36 <HAL_RCC_GetSysClockFreq+0xa6>
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d003      	beq.n	8004f3c <HAL_RCC_GetSysClockFreq+0xac>
 8004f34:	e005      	b.n	8004f42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f36:	4b1a      	ldr	r3, [pc, #104]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f38:	617b      	str	r3, [r7, #20]
      break;
 8004f3a:	e005      	b.n	8004f48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f3c:	4b19      	ldr	r3, [pc, #100]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f3e:	617b      	str	r3, [r7, #20]
      break;
 8004f40:	e002      	b.n	8004f48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	617b      	str	r3, [r7, #20]
      break;
 8004f46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f48:	4b13      	ldr	r3, [pc, #76]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	091b      	lsrs	r3, r3, #4
 8004f4e:	f003 0307 	and.w	r3, r3, #7
 8004f52:	3301      	adds	r3, #1
 8004f54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f56:	4b10      	ldr	r3, [pc, #64]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	0a1b      	lsrs	r3, r3, #8
 8004f5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	fb03 f202 	mul.w	r2, r3, r2
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	0e5b      	lsrs	r3, r3, #25
 8004f74:	f003 0303 	and.w	r3, r3, #3
 8004f78:	3301      	adds	r3, #1
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f88:	69bb      	ldr	r3, [r7, #24]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3724      	adds	r7, #36	@ 0x24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	08010efc 	.word	0x08010efc
 8004fa0:	00f42400 	.word	0x00f42400
 8004fa4:	007a1200 	.word	0x007a1200

08004fa8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fac:	4b03      	ldr	r3, [pc, #12]	@ (8004fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8004fae:	681b      	ldr	r3, [r3, #0]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	20000000 	.word	0x20000000

08004fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004fc4:	f7ff fff0 	bl	8004fa8 <HAL_RCC_GetHCLKFreq>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	4b06      	ldr	r3, [pc, #24]	@ (8004fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	0a1b      	lsrs	r3, r3, #8
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	4904      	ldr	r1, [pc, #16]	@ (8004fe8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fd6:	5ccb      	ldrb	r3, [r1, r3]
 8004fd8:	f003 031f 	and.w	r3, r3, #31
 8004fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	40021000 	.word	0x40021000
 8004fe8:	08010ef4 	.word	0x08010ef4

08004fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ff0:	f7ff ffda 	bl	8004fa8 <HAL_RCC_GetHCLKFreq>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	4b06      	ldr	r3, [pc, #24]	@ (8005010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	0adb      	lsrs	r3, r3, #11
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	4904      	ldr	r1, [pc, #16]	@ (8005014 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005002:	5ccb      	ldrb	r3, [r1, r3]
 8005004:	f003 031f 	and.w	r3, r3, #31
 8005008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800500c:	4618      	mov	r0, r3
 800500e:	bd80      	pop	{r7, pc}
 8005010:	40021000 	.word	0x40021000
 8005014:	08010ef4 	.word	0x08010ef4

08005018 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	220f      	movs	r2, #15
 8005026:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005028:	4b12      	ldr	r3, [pc, #72]	@ (8005074 <HAL_RCC_GetClockConfig+0x5c>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f003 0203 	and.w	r2, r3, #3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005034:	4b0f      	ldr	r3, [pc, #60]	@ (8005074 <HAL_RCC_GetClockConfig+0x5c>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005040:	4b0c      	ldr	r3, [pc, #48]	@ (8005074 <HAL_RCC_GetClockConfig+0x5c>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800504c:	4b09      	ldr	r3, [pc, #36]	@ (8005074 <HAL_RCC_GetClockConfig+0x5c>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	08db      	lsrs	r3, r3, #3
 8005052:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800505a:	4b07      	ldr	r3, [pc, #28]	@ (8005078 <HAL_RCC_GetClockConfig+0x60>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0207 	and.w	r2, r3, #7
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	601a      	str	r2, [r3, #0]
}
 8005066:	bf00      	nop
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	40021000 	.word	0x40021000
 8005078:	40022000 	.word	0x40022000

0800507c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005084:	2300      	movs	r3, #0
 8005086:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005088:	4b2a      	ldr	r3, [pc, #168]	@ (8005134 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800508a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800508c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d003      	beq.n	800509c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005094:	f7ff f9bc 	bl	8004410 <HAL_PWREx_GetVoltageRange>
 8005098:	6178      	str	r0, [r7, #20]
 800509a:	e014      	b.n	80050c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800509c:	4b25      	ldr	r3, [pc, #148]	@ (8005134 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800509e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a0:	4a24      	ldr	r2, [pc, #144]	@ (8005134 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80050a8:	4b22      	ldr	r3, [pc, #136]	@ (8005134 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80050b4:	f7ff f9ac 	bl	8004410 <HAL_PWREx_GetVoltageRange>
 80050b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80050ba:	4b1e      	ldr	r3, [pc, #120]	@ (8005134 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050be:	4a1d      	ldr	r2, [pc, #116]	@ (8005134 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050cc:	d10b      	bne.n	80050e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b80      	cmp	r3, #128	@ 0x80
 80050d2:	d919      	bls.n	8005108 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2ba0      	cmp	r3, #160	@ 0xa0
 80050d8:	d902      	bls.n	80050e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050da:	2302      	movs	r3, #2
 80050dc:	613b      	str	r3, [r7, #16]
 80050de:	e013      	b.n	8005108 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050e0:	2301      	movs	r3, #1
 80050e2:	613b      	str	r3, [r7, #16]
 80050e4:	e010      	b.n	8005108 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b80      	cmp	r3, #128	@ 0x80
 80050ea:	d902      	bls.n	80050f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80050ec:	2303      	movs	r3, #3
 80050ee:	613b      	str	r3, [r7, #16]
 80050f0:	e00a      	b.n	8005108 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b80      	cmp	r3, #128	@ 0x80
 80050f6:	d102      	bne.n	80050fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050f8:	2302      	movs	r3, #2
 80050fa:	613b      	str	r3, [r7, #16]
 80050fc:	e004      	b.n	8005108 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b70      	cmp	r3, #112	@ 0x70
 8005102:	d101      	bne.n	8005108 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005104:	2301      	movs	r3, #1
 8005106:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005108:	4b0b      	ldr	r3, [pc, #44]	@ (8005138 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f023 0207 	bic.w	r2, r3, #7
 8005110:	4909      	ldr	r1, [pc, #36]	@ (8005138 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005118:	4b07      	ldr	r3, [pc, #28]	@ (8005138 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0307 	and.w	r3, r3, #7
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	429a      	cmp	r2, r3
 8005124:	d001      	beq.n	800512a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e000      	b.n	800512c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	40021000 	.word	0x40021000
 8005138:	40022000 	.word	0x40022000

0800513c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005144:	2300      	movs	r3, #0
 8005146:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005148:	2300      	movs	r3, #0
 800514a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005154:	2b00      	cmp	r3, #0
 8005156:	d041      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800515c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005160:	d02a      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005162:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005166:	d824      	bhi.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005168:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800516c:	d008      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800516e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005172:	d81e      	bhi.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00a      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005178:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800517c:	d010      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800517e:	e018      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005180:	4b86      	ldr	r3, [pc, #536]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	4a85      	ldr	r2, [pc, #532]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005186:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800518a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800518c:	e015      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	3304      	adds	r3, #4
 8005192:	2100      	movs	r1, #0
 8005194:	4618      	mov	r0, r3
 8005196:	f001 f829 	bl	80061ec <RCCEx_PLLSAI1_Config>
 800519a:	4603      	mov	r3, r0
 800519c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800519e:	e00c      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	3320      	adds	r3, #32
 80051a4:	2100      	movs	r1, #0
 80051a6:	4618      	mov	r0, r3
 80051a8:	f001 f914 	bl	80063d4 <RCCEx_PLLSAI2_Config>
 80051ac:	4603      	mov	r3, r0
 80051ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051b0:	e003      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	74fb      	strb	r3, [r7, #19]
      break;
 80051b6:	e000      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80051b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051ba:	7cfb      	ldrb	r3, [r7, #19]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10b      	bne.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051c0:	4b76      	ldr	r3, [pc, #472]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051ce:	4973      	ldr	r1, [pc, #460]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80051d6:	e001      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d8:	7cfb      	ldrb	r3, [r7, #19]
 80051da:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d041      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80051f0:	d02a      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80051f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80051f6:	d824      	bhi.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80051f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80051fc:	d008      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80051fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005202:	d81e      	bhi.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00a      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005208:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800520c:	d010      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800520e:	e018      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005210:	4b62      	ldr	r3, [pc, #392]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	4a61      	ldr	r2, [pc, #388]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005216:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800521a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800521c:	e015      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	3304      	adds	r3, #4
 8005222:	2100      	movs	r1, #0
 8005224:	4618      	mov	r0, r3
 8005226:	f000 ffe1 	bl	80061ec <RCCEx_PLLSAI1_Config>
 800522a:	4603      	mov	r3, r0
 800522c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800522e:	e00c      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3320      	adds	r3, #32
 8005234:	2100      	movs	r1, #0
 8005236:	4618      	mov	r0, r3
 8005238:	f001 f8cc 	bl	80063d4 <RCCEx_PLLSAI2_Config>
 800523c:	4603      	mov	r3, r0
 800523e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005240:	e003      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	74fb      	strb	r3, [r7, #19]
      break;
 8005246:	e000      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005248:	bf00      	nop
    }

    if(ret == HAL_OK)
 800524a:	7cfb      	ldrb	r3, [r7, #19]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10b      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005250:	4b52      	ldr	r3, [pc, #328]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005256:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800525e:	494f      	ldr	r1, [pc, #316]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005266:	e001      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005268:	7cfb      	ldrb	r3, [r7, #19]
 800526a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 80a0 	beq.w	80053ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800527a:	2300      	movs	r3, #0
 800527c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800527e:	4b47      	ldr	r3, [pc, #284]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800528a:	2301      	movs	r3, #1
 800528c:	e000      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800528e:	2300      	movs	r3, #0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00d      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005294:	4b41      	ldr	r3, [pc, #260]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005298:	4a40      	ldr	r2, [pc, #256]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800529a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800529e:	6593      	str	r3, [r2, #88]	@ 0x58
 80052a0:	4b3e      	ldr	r3, [pc, #248]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052a8:	60bb      	str	r3, [r7, #8]
 80052aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052ac:	2301      	movs	r3, #1
 80052ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052b0:	4b3b      	ldr	r3, [pc, #236]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a3a      	ldr	r2, [pc, #232]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052bc:	f7fd fd44 	bl	8002d48 <HAL_GetTick>
 80052c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052c2:	e009      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052c4:	f7fd fd40 	bl	8002d48 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d902      	bls.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	74fb      	strb	r3, [r7, #19]
        break;
 80052d6:	e005      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052d8:	4b31      	ldr	r3, [pc, #196]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0ef      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80052e4:	7cfb      	ldrb	r3, [r7, #19]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d15c      	bne.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052ea:	4b2c      	ldr	r3, [pc, #176]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d01f      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	429a      	cmp	r2, r3
 8005306:	d019      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005308:	4b24      	ldr	r3, [pc, #144]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800530a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800530e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005312:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005314:	4b21      	ldr	r3, [pc, #132]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800531a:	4a20      	ldr	r2, [pc, #128]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800531c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005320:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005324:	4b1d      	ldr	r3, [pc, #116]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800532a:	4a1c      	ldr	r2, [pc, #112]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800532c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005330:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005334:	4a19      	ldr	r2, [pc, #100]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b00      	cmp	r3, #0
 8005344:	d016      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005346:	f7fd fcff 	bl	8002d48 <HAL_GetTick>
 800534a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800534c:	e00b      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800534e:	f7fd fcfb 	bl	8002d48 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	f241 3288 	movw	r2, #5000	@ 0x1388
 800535c:	4293      	cmp	r3, r2
 800535e:	d902      	bls.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	74fb      	strb	r3, [r7, #19]
            break;
 8005364:	e006      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005366:	4b0d      	ldr	r3, [pc, #52]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0ec      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005374:	7cfb      	ldrb	r3, [r7, #19]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10c      	bne.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800537a:	4b08      	ldr	r3, [pc, #32]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800537c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005380:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800538a:	4904      	ldr	r1, [pc, #16]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800538c:	4313      	orrs	r3, r2
 800538e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005392:	e009      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005394:	7cfb      	ldrb	r3, [r7, #19]
 8005396:	74bb      	strb	r3, [r7, #18]
 8005398:	e006      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800539a:	bf00      	nop
 800539c:	40021000 	.word	0x40021000
 80053a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a4:	7cfb      	ldrb	r3, [r7, #19]
 80053a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053a8:	7c7b      	ldrb	r3, [r7, #17]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d105      	bne.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053ae:	4b9e      	ldr	r3, [pc, #632]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b2:	4a9d      	ldr	r2, [pc, #628]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053b8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053c6:	4b98      	ldr	r3, [pc, #608]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053cc:	f023 0203 	bic.w	r2, r3, #3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d4:	4994      	ldr	r1, [pc, #592]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0302 	and.w	r3, r3, #2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00a      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053e8:	4b8f      	ldr	r3, [pc, #572]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ee:	f023 020c 	bic.w	r2, r3, #12
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053f6:	498c      	ldr	r1, [pc, #560]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0304 	and.w	r3, r3, #4
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00a      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800540a:	4b87      	ldr	r3, [pc, #540]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800540c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005410:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005418:	4983      	ldr	r1, [pc, #524]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541a:	4313      	orrs	r3, r2
 800541c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0308 	and.w	r3, r3, #8
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00a      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800542c:	4b7e      	ldr	r3, [pc, #504]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800542e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005432:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800543a:	497b      	ldr	r1, [pc, #492]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800543c:	4313      	orrs	r3, r2
 800543e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0310 	and.w	r3, r3, #16
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00a      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800544e:	4b76      	ldr	r3, [pc, #472]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005454:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800545c:	4972      	ldr	r1, [pc, #456]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800545e:	4313      	orrs	r3, r2
 8005460:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0320 	and.w	r3, r3, #32
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00a      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005470:	4b6d      	ldr	r3, [pc, #436]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005476:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800547e:	496a      	ldr	r1, [pc, #424]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005480:	4313      	orrs	r3, r2
 8005482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00a      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005492:	4b65      	ldr	r3, [pc, #404]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005498:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054a0:	4961      	ldr	r1, [pc, #388]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00a      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054b4:	4b5c      	ldr	r3, [pc, #368]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054c2:	4959      	ldr	r1, [pc, #356]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00a      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054d6:	4b54      	ldr	r3, [pc, #336]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054dc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054e4:	4950      	ldr	r1, [pc, #320]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00a      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054f8:	4b4b      	ldr	r3, [pc, #300]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005506:	4948      	ldr	r1, [pc, #288]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005508:	4313      	orrs	r3, r2
 800550a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00a      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800551a:	4b43      	ldr	r3, [pc, #268]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800551c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005520:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005528:	493f      	ldr	r1, [pc, #252]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800552a:	4313      	orrs	r3, r2
 800552c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d028      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800553c:	4b3a      	ldr	r3, [pc, #232]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800553e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005542:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800554a:	4937      	ldr	r1, [pc, #220]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800554c:	4313      	orrs	r3, r2
 800554e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005556:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800555a:	d106      	bne.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800555c:	4b32      	ldr	r3, [pc, #200]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	4a31      	ldr	r2, [pc, #196]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005562:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005566:	60d3      	str	r3, [r2, #12]
 8005568:	e011      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800556e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005572:	d10c      	bne.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3304      	adds	r3, #4
 8005578:	2101      	movs	r1, #1
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fe36 	bl	80061ec <RCCEx_PLLSAI1_Config>
 8005580:	4603      	mov	r3, r0
 8005582:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005584:	7cfb      	ldrb	r3, [r7, #19]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800558a:	7cfb      	ldrb	r3, [r7, #19]
 800558c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d028      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800559a:	4b23      	ldr	r3, [pc, #140]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800559c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055a8:	491f      	ldr	r1, [pc, #124]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055b8:	d106      	bne.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055ba:	4b1b      	ldr	r3, [pc, #108]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	4a1a      	ldr	r2, [pc, #104]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055c4:	60d3      	str	r3, [r2, #12]
 80055c6:	e011      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055d0:	d10c      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	3304      	adds	r3, #4
 80055d6:	2101      	movs	r1, #1
 80055d8:	4618      	mov	r0, r3
 80055da:	f000 fe07 	bl	80061ec <RCCEx_PLLSAI1_Config>
 80055de:	4603      	mov	r3, r0
 80055e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055e2:	7cfb      	ldrb	r3, [r7, #19]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80055e8:	7cfb      	ldrb	r3, [r7, #19]
 80055ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d02b      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005606:	4908      	ldr	r1, [pc, #32]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005608:	4313      	orrs	r3, r2
 800560a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005612:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005616:	d109      	bne.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005618:	4b03      	ldr	r3, [pc, #12]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	4a02      	ldr	r2, [pc, #8]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800561e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005622:	60d3      	str	r3, [r2, #12]
 8005624:	e014      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005626:	bf00      	nop
 8005628:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005630:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005634:	d10c      	bne.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	3304      	adds	r3, #4
 800563a:	2101      	movs	r1, #1
 800563c:	4618      	mov	r0, r3
 800563e:	f000 fdd5 	bl	80061ec <RCCEx_PLLSAI1_Config>
 8005642:	4603      	mov	r3, r0
 8005644:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005646:	7cfb      	ldrb	r3, [r7, #19]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800564c:	7cfb      	ldrb	r3, [r7, #19]
 800564e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d02f      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800565c:	4b2b      	ldr	r3, [pc, #172]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800565e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005662:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800566a:	4928      	ldr	r1, [pc, #160]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800566c:	4313      	orrs	r3, r2
 800566e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005676:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800567a:	d10d      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3304      	adds	r3, #4
 8005680:	2102      	movs	r1, #2
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fdb2 	bl	80061ec <RCCEx_PLLSAI1_Config>
 8005688:	4603      	mov	r3, r0
 800568a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800568c:	7cfb      	ldrb	r3, [r7, #19]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d014      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005692:	7cfb      	ldrb	r3, [r7, #19]
 8005694:	74bb      	strb	r3, [r7, #18]
 8005696:	e011      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800569c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056a0:	d10c      	bne.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	3320      	adds	r3, #32
 80056a6:	2102      	movs	r1, #2
 80056a8:	4618      	mov	r0, r3
 80056aa:	f000 fe93 	bl	80063d4 <RCCEx_PLLSAI2_Config>
 80056ae:	4603      	mov	r3, r0
 80056b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056b2:	7cfb      	ldrb	r3, [r7, #19]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80056b8:	7cfb      	ldrb	r3, [r7, #19]
 80056ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00a      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80056c8:	4b10      	ldr	r3, [pc, #64]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ce:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056d6:	490d      	ldr	r1, [pc, #52]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00b      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056ea:	4b08      	ldr	r3, [pc, #32]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056fa:	4904      	ldr	r1, [pc, #16]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005702:	7cbb      	ldrb	r3, [r7, #18]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3718      	adds	r7, #24
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	40021000 	.word	0x40021000

08005710 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b088      	sub	sp, #32
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005722:	d13e      	bne.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005724:	4bb2      	ldr	r3, [pc, #712]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800572a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800572e:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005736:	d028      	beq.n	800578a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800573e:	f200 8542 	bhi.w	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005748:	d005      	beq.n	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005750:	d00e      	beq.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005752:	f000 bd38 	b.w	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005756:	4ba6      	ldr	r3, [pc, #664]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800575c:	f003 0302 	and.w	r3, r3, #2
 8005760:	2b02      	cmp	r3, #2
 8005762:	f040 8532 	bne.w	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8005766:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800576a:	61fb      	str	r3, [r7, #28]
      break;
 800576c:	f000 bd2d 	b.w	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005770:	4b9f      	ldr	r3, [pc, #636]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005772:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b02      	cmp	r3, #2
 800577c:	f040 8527 	bne.w	80061ce <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8005780:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005784:	61fb      	str	r3, [r7, #28]
      break;
 8005786:	f000 bd22 	b.w	80061ce <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800578a:	4b99      	ldr	r3, [pc, #612]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005792:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005796:	f040 851c 	bne.w	80061d2 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 800579a:	4b96      	ldr	r3, [pc, #600]	@ (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800579c:	61fb      	str	r3, [r7, #28]
      break;
 800579e:	f000 bd18 	b.w	80061d2 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057a2:	4b93      	ldr	r3, [pc, #588]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f003 0303 	and.w	r3, r3, #3
 80057aa:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	d036      	beq.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2b03      	cmp	r3, #3
 80057b6:	d840      	bhi.n	800583a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d003      	beq.n	80057c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d020      	beq.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80057c4:	e039      	b.n	800583a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80057c6:	4b8a      	ldr	r3, [pc, #552]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d116      	bne.n	8005800 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80057d2:	4b87      	ldr	r3, [pc, #540]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0308 	and.w	r3, r3, #8
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d005      	beq.n	80057ea <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80057de:	4b84      	ldr	r3, [pc, #528]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	091b      	lsrs	r3, r3, #4
 80057e4:	f003 030f 	and.w	r3, r3, #15
 80057e8:	e005      	b.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80057ea:	4b81      	ldr	r3, [pc, #516]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80057ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057f0:	0a1b      	lsrs	r3, r3, #8
 80057f2:	f003 030f 	and.w	r3, r3, #15
 80057f6:	4a80      	ldr	r2, [pc, #512]	@ (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80057f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057fc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80057fe:	e01f      	b.n	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	61bb      	str	r3, [r7, #24]
      break;
 8005804:	e01c      	b.n	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005806:	4b7a      	ldr	r3, [pc, #488]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800580e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005812:	d102      	bne.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005814:	4b79      	ldr	r3, [pc, #484]	@ (80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8005816:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005818:	e012      	b.n	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800581a:	2300      	movs	r3, #0
 800581c:	61bb      	str	r3, [r7, #24]
      break;
 800581e:	e00f      	b.n	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005820:	4b73      	ldr	r3, [pc, #460]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005828:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800582c:	d102      	bne.n	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800582e:	4b74      	ldr	r3, [pc, #464]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005830:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005832:	e005      	b.n	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005834:	2300      	movs	r3, #0
 8005836:	61bb      	str	r3, [r7, #24]
      break;
 8005838:	e002      	b.n	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800583a:	2300      	movs	r3, #0
 800583c:	61bb      	str	r3, [r7, #24]
      break;
 800583e:	bf00      	nop
    }

    switch(PeriphClk)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005846:	f000 80dd 	beq.w	8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005850:	f200 84c1 	bhi.w	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800585a:	f000 80d3 	beq.w	8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005864:	f200 84b7 	bhi.w	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800586e:	f000 835f 	beq.w	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005878:	f200 84ad 	bhi.w	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005882:	f000 847e 	beq.w	8006182 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800588c:	f200 84a3 	bhi.w	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005896:	f000 82cd 	beq.w	8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058a0:	f200 8499 	bhi.w	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058aa:	f000 80ab 	beq.w	8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058b4:	f200 848f 	bhi.w	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058be:	f000 8090 	beq.w	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058c8:	f200 8485 	bhi.w	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058d2:	d07f      	beq.n	80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058da:	f200 847c 	bhi.w	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058e4:	f000 8403 	beq.w	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058ee:	f200 8472 	bhi.w	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058f8:	f000 83af 	beq.w	800605a <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005902:	f200 8468 	bhi.w	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800590c:	f000 8379 	beq.w	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005916:	f200 845e 	bhi.w	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b80      	cmp	r3, #128	@ 0x80
 800591e:	f000 8344 	beq.w	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b80      	cmp	r3, #128	@ 0x80
 8005926:	f200 8456 	bhi.w	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b20      	cmp	r3, #32
 800592e:	d84b      	bhi.n	80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 844f 	beq.w	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	3b01      	subs	r3, #1
 800593c:	2b1f      	cmp	r3, #31
 800593e:	f200 844a 	bhi.w	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005942:	a201      	add	r2, pc, #4	@ (adr r2, 8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8005944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005948:	08005b31 	.word	0x08005b31
 800594c:	08005b9f 	.word	0x08005b9f
 8005950:	080061d7 	.word	0x080061d7
 8005954:	08005c33 	.word	0x08005c33
 8005958:	080061d7 	.word	0x080061d7
 800595c:	080061d7 	.word	0x080061d7
 8005960:	080061d7 	.word	0x080061d7
 8005964:	08005cb9 	.word	0x08005cb9
 8005968:	080061d7 	.word	0x080061d7
 800596c:	080061d7 	.word	0x080061d7
 8005970:	080061d7 	.word	0x080061d7
 8005974:	080061d7 	.word	0x080061d7
 8005978:	080061d7 	.word	0x080061d7
 800597c:	080061d7 	.word	0x080061d7
 8005980:	080061d7 	.word	0x080061d7
 8005984:	08005d31 	.word	0x08005d31
 8005988:	080061d7 	.word	0x080061d7
 800598c:	080061d7 	.word	0x080061d7
 8005990:	080061d7 	.word	0x080061d7
 8005994:	080061d7 	.word	0x080061d7
 8005998:	080061d7 	.word	0x080061d7
 800599c:	080061d7 	.word	0x080061d7
 80059a0:	080061d7 	.word	0x080061d7
 80059a4:	080061d7 	.word	0x080061d7
 80059a8:	080061d7 	.word	0x080061d7
 80059ac:	080061d7 	.word	0x080061d7
 80059b0:	080061d7 	.word	0x080061d7
 80059b4:	080061d7 	.word	0x080061d7
 80059b8:	080061d7 	.word	0x080061d7
 80059bc:	080061d7 	.word	0x080061d7
 80059c0:	080061d7 	.word	0x080061d7
 80059c4:	08005db3 	.word	0x08005db3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b40      	cmp	r3, #64	@ 0x40
 80059cc:	f000 82c1 	beq.w	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80059d0:	f000 bc01 	b.w	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80059d4:	69b9      	ldr	r1, [r7, #24]
 80059d6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80059da:	f000 fdd9 	bl	8006590 <RCCEx_GetSAIxPeriphCLKFreq>
 80059de:	61f8      	str	r0, [r7, #28]
      break;
 80059e0:	e3fa      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80059e2:	69b9      	ldr	r1, [r7, #24]
 80059e4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80059e8:	f000 fdd2 	bl	8006590 <RCCEx_GetSAIxPeriphCLKFreq>
 80059ec:	61f8      	str	r0, [r7, #28]
      break;
 80059ee:	e3f3      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80059f0:	40021000 	.word	0x40021000
 80059f4:	0003d090 	.word	0x0003d090
 80059f8:	08010efc 	.word	0x08010efc
 80059fc:	00f42400 	.word	0x00f42400
 8005a00:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005a04:	4ba9      	ldr	r3, [pc, #676]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a0a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005a0e:	613b      	str	r3, [r7, #16]
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005a16:	d00c      	beq.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005a1e:	d87f      	bhi.n	8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a26:	d04e      	beq.n	8005ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a2e:	d01d      	beq.n	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8005a30:	e076      	b.n	8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005a32:	4b9e      	ldr	r3, [pc, #632]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d172      	bne.n	8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005a3e:	4b9b      	ldr	r3, [pc, #620]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0308 	and.w	r3, r3, #8
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d005      	beq.n	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8005a4a:	4b98      	ldr	r3, [pc, #608]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	091b      	lsrs	r3, r3, #4
 8005a50:	f003 030f 	and.w	r3, r3, #15
 8005a54:	e005      	b.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8005a56:	4b95      	ldr	r3, [pc, #596]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a5c:	0a1b      	lsrs	r3, r3, #8
 8005a5e:	f003 030f 	and.w	r3, r3, #15
 8005a62:	4a93      	ldr	r2, [pc, #588]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8005a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a68:	61fb      	str	r3, [r7, #28]
          break;
 8005a6a:	e05b      	b.n	8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005a6c:	4b8f      	ldr	r3, [pc, #572]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a78:	d156      	bne.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005a7a:	4b8c      	ldr	r3, [pc, #560]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a86:	d14f      	bne.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005a88:	4b88      	ldr	r3, [pc, #544]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	0a1b      	lsrs	r3, r3, #8
 8005a8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a92:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	fb03 f202 	mul.w	r2, r3, r2
 8005a9c:	4b83      	ldr	r3, [pc, #524]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	091b      	lsrs	r3, r3, #4
 8005aa2:	f003 0307 	and.w	r3, r3, #7
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aac:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005aae:	4b7f      	ldr	r3, [pc, #508]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	0d5b      	lsrs	r3, r3, #21
 8005ab4:	f003 0303 	and.w	r3, r3, #3
 8005ab8:	3301      	adds	r3, #1
 8005aba:	005b      	lsls	r3, r3, #1
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac2:	61fb      	str	r3, [r7, #28]
          break;
 8005ac4:	e030      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005ac6:	4b79      	ldr	r3, [pc, #484]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ace:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ad2:	d12b      	bne.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005ad4:	4b75      	ldr	r3, [pc, #468]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005adc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ae0:	d124      	bne.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005ae2:	4b72      	ldr	r3, [pc, #456]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	0a1b      	lsrs	r3, r3, #8
 8005ae8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005aec:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	fb03 f202 	mul.w	r2, r3, r2
 8005af6:	4b6d      	ldr	r3, [pc, #436]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	091b      	lsrs	r3, r3, #4
 8005afc:	f003 0307 	and.w	r3, r3, #7
 8005b00:	3301      	adds	r3, #1
 8005b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b06:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005b08:	4b68      	ldr	r3, [pc, #416]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	0d5b      	lsrs	r3, r3, #21
 8005b0e:	f003 0303 	and.w	r3, r3, #3
 8005b12:	3301      	adds	r3, #1
 8005b14:	005b      	lsls	r3, r3, #1
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b1c:	61fb      	str	r3, [r7, #28]
          break;
 8005b1e:	e005      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8005b20:	bf00      	nop
 8005b22:	e359      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005b24:	bf00      	nop
 8005b26:	e357      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005b28:	bf00      	nop
 8005b2a:	e355      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005b2c:	bf00      	nop
        break;
 8005b2e:	e353      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005b30:	4b5e      	ldr	r3, [pc, #376]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b36:	f003 0303 	and.w	r3, r3, #3
 8005b3a:	613b      	str	r3, [r7, #16]
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	2b03      	cmp	r3, #3
 8005b40:	d827      	bhi.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8005b42:	a201      	add	r2, pc, #4	@ (adr r2, 8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8005b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b48:	08005b59 	.word	0x08005b59
 8005b4c:	08005b61 	.word	0x08005b61
 8005b50:	08005b69 	.word	0x08005b69
 8005b54:	08005b7d 	.word	0x08005b7d
          frequency = HAL_RCC_GetPCLK2Freq();
 8005b58:	f7ff fa48 	bl	8004fec <HAL_RCC_GetPCLK2Freq>
 8005b5c:	61f8      	str	r0, [r7, #28]
          break;
 8005b5e:	e01d      	b.n	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b60:	f7ff f996 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 8005b64:	61f8      	str	r0, [r7, #28]
          break;
 8005b66:	e019      	b.n	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b68:	4b50      	ldr	r3, [pc, #320]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b74:	d10f      	bne.n	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8005b76:	4b4f      	ldr	r3, [pc, #316]	@ (8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005b78:	61fb      	str	r3, [r7, #28]
          break;
 8005b7a:	e00c      	b.n	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005b7c:	4b4b      	ldr	r3, [pc, #300]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d107      	bne.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8005b8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b8e:	61fb      	str	r3, [r7, #28]
          break;
 8005b90:	e003      	b.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8005b92:	bf00      	nop
 8005b94:	e320      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005b96:	bf00      	nop
 8005b98:	e31e      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005b9a:	bf00      	nop
        break;
 8005b9c:	e31c      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005b9e:	4b43      	ldr	r3, [pc, #268]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ba4:	f003 030c 	and.w	r3, r3, #12
 8005ba8:	613b      	str	r3, [r7, #16]
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	2b0c      	cmp	r3, #12
 8005bae:	d83a      	bhi.n	8005c26 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8005bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8005bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb6:	bf00      	nop
 8005bb8:	08005bed 	.word	0x08005bed
 8005bbc:	08005c27 	.word	0x08005c27
 8005bc0:	08005c27 	.word	0x08005c27
 8005bc4:	08005c27 	.word	0x08005c27
 8005bc8:	08005bf5 	.word	0x08005bf5
 8005bcc:	08005c27 	.word	0x08005c27
 8005bd0:	08005c27 	.word	0x08005c27
 8005bd4:	08005c27 	.word	0x08005c27
 8005bd8:	08005bfd 	.word	0x08005bfd
 8005bdc:	08005c27 	.word	0x08005c27
 8005be0:	08005c27 	.word	0x08005c27
 8005be4:	08005c27 	.word	0x08005c27
 8005be8:	08005c11 	.word	0x08005c11
          frequency = HAL_RCC_GetPCLK1Freq();
 8005bec:	f7ff f9e8 	bl	8004fc0 <HAL_RCC_GetPCLK1Freq>
 8005bf0:	61f8      	str	r0, [r7, #28]
          break;
 8005bf2:	e01d      	b.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8005bf4:	f7ff f94c 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 8005bf8:	61f8      	str	r0, [r7, #28]
          break;
 8005bfa:	e019      	b.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c08:	d10f      	bne.n	8005c2a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8005c0a:	4b2a      	ldr	r3, [pc, #168]	@ (8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005c0c:	61fb      	str	r3, [r7, #28]
          break;
 8005c0e:	e00c      	b.n	8005c2a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005c10:	4b26      	ldr	r3, [pc, #152]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d107      	bne.n	8005c2e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8005c1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c22:	61fb      	str	r3, [r7, #28]
          break;
 8005c24:	e003      	b.n	8005c2e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8005c26:	bf00      	nop
 8005c28:	e2d6      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005c2a:	bf00      	nop
 8005c2c:	e2d4      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005c2e:	bf00      	nop
        break;
 8005c30:	e2d2      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005c32:	4b1e      	ldr	r3, [pc, #120]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c38:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005c3c:	613b      	str	r3, [r7, #16]
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	2b30      	cmp	r3, #48	@ 0x30
 8005c42:	d021      	beq.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	2b30      	cmp	r3, #48	@ 0x30
 8005c48:	d829      	bhi.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	2b20      	cmp	r3, #32
 8005c4e:	d011      	beq.n	8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	2b20      	cmp	r3, #32
 8005c54:	d823      	bhi.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	2b10      	cmp	r3, #16
 8005c60:	d004      	beq.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8005c62:	e01c      	b.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c64:	f7ff f9ac 	bl	8004fc0 <HAL_RCC_GetPCLK1Freq>
 8005c68:	61f8      	str	r0, [r7, #28]
          break;
 8005c6a:	e01d      	b.n	8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c6c:	f7ff f910 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 8005c70:	61f8      	str	r0, [r7, #28]
          break;
 8005c72:	e019      	b.n	8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c74:	4b0d      	ldr	r3, [pc, #52]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c80:	d10f      	bne.n	8005ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8005c82:	4b0c      	ldr	r3, [pc, #48]	@ (8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005c84:	61fb      	str	r3, [r7, #28]
          break;
 8005c86:	e00c      	b.n	8005ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005c88:	4b08      	ldr	r3, [pc, #32]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d107      	bne.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8005c96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c9a:	61fb      	str	r3, [r7, #28]
          break;
 8005c9c:	e003      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8005c9e:	bf00      	nop
 8005ca0:	e29a      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005ca2:	bf00      	nop
 8005ca4:	e298      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005ca6:	bf00      	nop
        break;
 8005ca8:	e296      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8005caa:	bf00      	nop
 8005cac:	40021000 	.word	0x40021000
 8005cb0:	08010efc 	.word	0x08010efc
 8005cb4:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005cb8:	4b9b      	ldr	r3, [pc, #620]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cbe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005cc2:	613b      	str	r3, [r7, #16]
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005cc8:	d021      	beq.n	8005d0e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	2bc0      	cmp	r3, #192	@ 0xc0
 8005cce:	d829      	bhi.n	8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	2b80      	cmp	r3, #128	@ 0x80
 8005cd4:	d011      	beq.n	8005cfa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	2b80      	cmp	r3, #128	@ 0x80
 8005cda:	d823      	bhi.n	8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	2b40      	cmp	r3, #64	@ 0x40
 8005ce6:	d004      	beq.n	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8005ce8:	e01c      	b.n	8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005cea:	f7ff f969 	bl	8004fc0 <HAL_RCC_GetPCLK1Freq>
 8005cee:	61f8      	str	r0, [r7, #28]
          break;
 8005cf0:	e01d      	b.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005cf2:	f7ff f8cd 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 8005cf6:	61f8      	str	r0, [r7, #28]
          break;
 8005cf8:	e019      	b.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cfa:	4b8b      	ldr	r3, [pc, #556]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d06:	d10f      	bne.n	8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8005d08:	4b88      	ldr	r3, [pc, #544]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8005d0a:	61fb      	str	r3, [r7, #28]
          break;
 8005d0c:	e00c      	b.n	8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d0e:	4b86      	ldr	r3, [pc, #536]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d107      	bne.n	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8005d1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d20:	61fb      	str	r3, [r7, #28]
          break;
 8005d22:	e003      	b.n	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8005d24:	bf00      	nop
 8005d26:	e257      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005d28:	bf00      	nop
 8005d2a:	e255      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005d2c:	bf00      	nop
        break;
 8005d2e:	e253      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005d30:	4b7d      	ldr	r3, [pc, #500]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d3a:	613b      	str	r3, [r7, #16]
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d42:	d025      	beq.n	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d4a:	d82c      	bhi.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d52:	d013      	beq.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d5a:	d824      	bhi.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d004      	beq.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d68:	d004      	beq.n	8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8005d6a:	e01c      	b.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d6c:	f7ff f928 	bl	8004fc0 <HAL_RCC_GetPCLK1Freq>
 8005d70:	61f8      	str	r0, [r7, #28]
          break;
 8005d72:	e01d      	b.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d74:	f7ff f88c 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 8005d78:	61f8      	str	r0, [r7, #28]
          break;
 8005d7a:	e019      	b.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d7c:	4b6a      	ldr	r3, [pc, #424]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d88:	d10f      	bne.n	8005daa <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8005d8a:	4b68      	ldr	r3, [pc, #416]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8005d8c:	61fb      	str	r3, [r7, #28]
          break;
 8005d8e:	e00c      	b.n	8005daa <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d90:	4b65      	ldr	r3, [pc, #404]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d107      	bne.n	8005dae <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8005d9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005da2:	61fb      	str	r3, [r7, #28]
          break;
 8005da4:	e003      	b.n	8005dae <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8005da6:	bf00      	nop
 8005da8:	e216      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005daa:	bf00      	nop
 8005dac:	e214      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005dae:	bf00      	nop
        break;
 8005db0:	e212      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005db2:	4b5d      	ldr	r3, [pc, #372]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005dbc:	613b      	str	r3, [r7, #16]
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005dc4:	d025      	beq.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005dcc:	d82c      	bhi.n	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005dd4:	d013      	beq.n	8005dfe <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ddc:	d824      	bhi.n	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d004      	beq.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dea:	d004      	beq.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8005dec:	e01c      	b.n	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005dee:	f7ff f8e7 	bl	8004fc0 <HAL_RCC_GetPCLK1Freq>
 8005df2:	61f8      	str	r0, [r7, #28]
          break;
 8005df4:	e01d      	b.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8005df6:	f7ff f84b 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 8005dfa:	61f8      	str	r0, [r7, #28]
          break;
 8005dfc:	e019      	b.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005dfe:	4b4a      	ldr	r3, [pc, #296]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e0a:	d10f      	bne.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8005e0c:	4b47      	ldr	r3, [pc, #284]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8005e0e:	61fb      	str	r3, [r7, #28]
          break;
 8005e10:	e00c      	b.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005e12:	4b45      	ldr	r3, [pc, #276]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e18:	f003 0302 	and.w	r3, r3, #2
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d107      	bne.n	8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8005e20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e24:	61fb      	str	r3, [r7, #28]
          break;
 8005e26:	e003      	b.n	8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8005e28:	bf00      	nop
 8005e2a:	e1d5      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005e2c:	bf00      	nop
 8005e2e:	e1d3      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005e30:	bf00      	nop
        break;
 8005e32:	e1d1      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005e34:	4b3c      	ldr	r3, [pc, #240]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e3a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005e3e:	613b      	str	r3, [r7, #16]
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e46:	d00c      	beq.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e4e:	d864      	bhi.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e56:	d008      	beq.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e5e:	d030      	beq.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8005e60:	e05b      	b.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e62:	f7ff f815 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 8005e66:	61f8      	str	r0, [r7, #28]
          break;
 8005e68:	e05c      	b.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8005e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e76:	d152      	bne.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8005e78:	4b2b      	ldr	r3, [pc, #172]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d04c      	beq.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005e84:	4b28      	ldr	r3, [pc, #160]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	0a1b      	lsrs	r3, r3, #8
 8005e8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e8e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	fb03 f202 	mul.w	r2, r3, r2
 8005e98:	4b23      	ldr	r3, [pc, #140]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	091b      	lsrs	r3, r3, #4
 8005e9e:	f003 0307 	and.w	r3, r3, #7
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea8:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	0e5b      	lsrs	r3, r3, #25
 8005eb0:	f003 0303 	and.w	r3, r3, #3
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ebe:	61fb      	str	r3, [r7, #28]
          break;
 8005ec0:	e02d      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8005ec2:	4b19      	ldr	r3, [pc, #100]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005eca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ece:	d128      	bne.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8005ed0:	4b15      	ldr	r3, [pc, #84]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d022      	beq.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005edc:	4b12      	ldr	r3, [pc, #72]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	0a1b      	lsrs	r3, r3, #8
 8005ee2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ee6:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	fb03 f202 	mul.w	r2, r3, r2
 8005ef0:	4b0d      	ldr	r3, [pc, #52]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	091b      	lsrs	r3, r3, #4
 8005ef6:	f003 0307 	and.w	r3, r3, #7
 8005efa:	3301      	adds	r3, #1
 8005efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f00:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8005f02:	4b09      	ldr	r3, [pc, #36]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	0e5b      	lsrs	r3, r3, #25
 8005f08:	f003 0303 	and.w	r3, r3, #3
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	005b      	lsls	r3, r3, #1
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f16:	61fb      	str	r3, [r7, #28]
          break;
 8005f18:	e003      	b.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8005f1a:	bf00      	nop
 8005f1c:	e15c      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005f1e:	bf00      	nop
 8005f20:	e15a      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005f22:	bf00      	nop
        break;
 8005f24:	e158      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8005f26:	bf00      	nop
 8005f28:	40021000 	.word	0x40021000
 8005f2c:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005f30:	4b9d      	ldr	r3, [pc, #628]	@ (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f3a:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d103      	bne.n	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005f42:	f7ff f853 	bl	8004fec <HAL_RCC_GetPCLK2Freq>
 8005f46:	61f8      	str	r0, [r7, #28]
        break;
 8005f48:	e146      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f4a:	f7fe ffa1 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 8005f4e:	61f8      	str	r0, [r7, #28]
        break;
 8005f50:	e142      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005f52:	4b95      	ldr	r3, [pc, #596]	@ (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f58:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005f5c:	613b      	str	r3, [r7, #16]
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f64:	d013      	beq.n	8005f8e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f6c:	d819      	bhi.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d004      	beq.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f7a:	d004      	beq.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8005f7c:	e011      	b.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f7e:	f7ff f81f 	bl	8004fc0 <HAL_RCC_GetPCLK1Freq>
 8005f82:	61f8      	str	r0, [r7, #28]
          break;
 8005f84:	e010      	b.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f86:	f7fe ff83 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 8005f8a:	61f8      	str	r0, [r7, #28]
          break;
 8005f8c:	e00c      	b.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f8e:	4b86      	ldr	r3, [pc, #536]	@ (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f9a:	d104      	bne.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8005f9c:	4b83      	ldr	r3, [pc, #524]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005f9e:	61fb      	str	r3, [r7, #28]
          break;
 8005fa0:	e001      	b.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8005fa2:	bf00      	nop
 8005fa4:	e118      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005fa6:	bf00      	nop
        break;
 8005fa8:	e116      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005faa:	4b7f      	ldr	r3, [pc, #508]	@ (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fb0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005fb4:	613b      	str	r3, [r7, #16]
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fbc:	d013      	beq.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fc4:	d819      	bhi.n	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d004      	beq.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fd2:	d004      	beq.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8005fd4:	e011      	b.n	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005fd6:	f7fe fff3 	bl	8004fc0 <HAL_RCC_GetPCLK1Freq>
 8005fda:	61f8      	str	r0, [r7, #28]
          break;
 8005fdc:	e010      	b.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005fde:	f7fe ff57 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 8005fe2:	61f8      	str	r0, [r7, #28]
          break;
 8005fe4:	e00c      	b.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fe6:	4b70      	ldr	r3, [pc, #448]	@ (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ff2:	d104      	bne.n	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8005ff4:	4b6d      	ldr	r3, [pc, #436]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005ff6:	61fb      	str	r3, [r7, #28]
          break;
 8005ff8:	e001      	b.n	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8005ffa:	bf00      	nop
 8005ffc:	e0ec      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005ffe:	bf00      	nop
        break;
 8006000:	e0ea      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006002:	4b69      	ldr	r3, [pc, #420]	@ (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006008:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800600c:	613b      	str	r3, [r7, #16]
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006014:	d013      	beq.n	800603e <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800601c:	d819      	bhi.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d004      	beq.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800602a:	d004      	beq.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 800602c:	e011      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 800602e:	f7fe ffc7 	bl	8004fc0 <HAL_RCC_GetPCLK1Freq>
 8006032:	61f8      	str	r0, [r7, #28]
          break;
 8006034:	e010      	b.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8006036:	f7fe ff2b 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 800603a:	61f8      	str	r0, [r7, #28]
          break;
 800603c:	e00c      	b.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800603e:	4b5a      	ldr	r3, [pc, #360]	@ (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800604a:	d104      	bne.n	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 800604c:	4b57      	ldr	r3, [pc, #348]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800604e:	61fb      	str	r3, [r7, #28]
          break;
 8006050:	e001      	b.n	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8006052:	bf00      	nop
 8006054:	e0c0      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006056:	bf00      	nop
        break;
 8006058:	e0be      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800605a:	4b53      	ldr	r3, [pc, #332]	@ (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800605c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006060:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006064:	613b      	str	r3, [r7, #16]
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800606c:	d02c      	beq.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006074:	d833      	bhi.n	80060de <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800607c:	d01a      	beq.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006084:	d82b      	bhi.n	80060de <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d004      	beq.n	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006092:	d004      	beq.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8006094:	e023      	b.n	80060de <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006096:	f7fe ff93 	bl	8004fc0 <HAL_RCC_GetPCLK1Freq>
 800609a:	61f8      	str	r0, [r7, #28]
          break;
 800609c:	e026      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800609e:	4b42      	ldr	r3, [pc, #264]	@ (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80060a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060a4:	f003 0302 	and.w	r3, r3, #2
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d11a      	bne.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 80060ac:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80060b0:	61fb      	str	r3, [r7, #28]
          break;
 80060b2:	e016      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060b4:	4b3c      	ldr	r3, [pc, #240]	@ (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060c0:	d111      	bne.n	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 80060c2:	4b3a      	ldr	r3, [pc, #232]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80060c4:	61fb      	str	r3, [r7, #28]
          break;
 80060c6:	e00e      	b.n	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80060c8:	4b37      	ldr	r3, [pc, #220]	@ (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80060ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d109      	bne.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 80060d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060da:	61fb      	str	r3, [r7, #28]
          break;
 80060dc:	e005      	b.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 80060de:	bf00      	nop
 80060e0:	e07a      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80060e2:	bf00      	nop
 80060e4:	e078      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80060e6:	bf00      	nop
 80060e8:	e076      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80060ea:	bf00      	nop
        break;
 80060ec:	e074      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80060ee:	4b2e      	ldr	r3, [pc, #184]	@ (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80060f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060f4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80060f8:	613b      	str	r3, [r7, #16]
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006100:	d02c      	beq.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006108:	d833      	bhi.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006110:	d01a      	beq.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006118:	d82b      	bhi.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d004      	beq.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006126:	d004      	beq.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8006128:	e023      	b.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 800612a:	f7fe ff49 	bl	8004fc0 <HAL_RCC_GetPCLK1Freq>
 800612e:	61f8      	str	r0, [r7, #28]
          break;
 8006130:	e026      	b.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006132:	4b1d      	ldr	r3, [pc, #116]	@ (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006134:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b02      	cmp	r3, #2
 800613e:	d11a      	bne.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8006140:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006144:	61fb      	str	r3, [r7, #28]
          break;
 8006146:	e016      	b.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006148:	4b17      	ldr	r3, [pc, #92]	@ (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006150:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006154:	d111      	bne.n	800617a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8006156:	4b15      	ldr	r3, [pc, #84]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8006158:	61fb      	str	r3, [r7, #28]
          break;
 800615a:	e00e      	b.n	800617a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800615c:	4b12      	ldr	r3, [pc, #72]	@ (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800615e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	2b02      	cmp	r3, #2
 8006168:	d109      	bne.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 800616a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800616e:	61fb      	str	r3, [r7, #28]
          break;
 8006170:	e005      	b.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8006172:	bf00      	nop
 8006174:	e030      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006176:	bf00      	nop
 8006178:	e02e      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800617a:	bf00      	nop
 800617c:	e02c      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800617e:	bf00      	nop
        break;
 8006180:	e02a      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8006182:	4b09      	ldr	r3, [pc, #36]	@ (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006188:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800618c:	613b      	str	r3, [r7, #16]
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d004      	beq.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800619a:	d009      	beq.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 800619c:	e012      	b.n	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800619e:	f7fe ff0f 	bl	8004fc0 <HAL_RCC_GetPCLK1Freq>
 80061a2:	61f8      	str	r0, [r7, #28]
          break;
 80061a4:	e00e      	b.n	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 80061a6:	bf00      	nop
 80061a8:	40021000 	.word	0x40021000
 80061ac:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061b0:	4b0c      	ldr	r3, [pc, #48]	@ (80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061bc:	d101      	bne.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 80061be:	4b0a      	ldr	r3, [pc, #40]	@ (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80061c0:	61fb      	str	r3, [r7, #28]
          break;
 80061c2:	bf00      	nop
        break;
 80061c4:	e008      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80061c6:	bf00      	nop
 80061c8:	e006      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80061ca:	bf00      	nop
 80061cc:	e004      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80061ce:	bf00      	nop
 80061d0:	e002      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80061d2:	bf00      	nop
 80061d4:	e000      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80061d6:	bf00      	nop
    }
  }

  return(frequency);
 80061d8:	69fb      	ldr	r3, [r7, #28]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3720      	adds	r7, #32
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	40021000 	.word	0x40021000
 80061e8:	00f42400 	.word	0x00f42400

080061ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061f6:	2300      	movs	r3, #0
 80061f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80061fa:	4b75      	ldr	r3, [pc, #468]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	f003 0303 	and.w	r3, r3, #3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d018      	beq.n	8006238 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006206:	4b72      	ldr	r3, [pc, #456]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	f003 0203 	and.w	r2, r3, #3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	429a      	cmp	r2, r3
 8006214:	d10d      	bne.n	8006232 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
       ||
 800621a:	2b00      	cmp	r3, #0
 800621c:	d009      	beq.n	8006232 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800621e:	4b6c      	ldr	r3, [pc, #432]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	091b      	lsrs	r3, r3, #4
 8006224:	f003 0307 	and.w	r3, r3, #7
 8006228:	1c5a      	adds	r2, r3, #1
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
       ||
 800622e:	429a      	cmp	r2, r3
 8006230:	d047      	beq.n	80062c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	73fb      	strb	r3, [r7, #15]
 8006236:	e044      	b.n	80062c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2b03      	cmp	r3, #3
 800623e:	d018      	beq.n	8006272 <RCCEx_PLLSAI1_Config+0x86>
 8006240:	2b03      	cmp	r3, #3
 8006242:	d825      	bhi.n	8006290 <RCCEx_PLLSAI1_Config+0xa4>
 8006244:	2b01      	cmp	r3, #1
 8006246:	d002      	beq.n	800624e <RCCEx_PLLSAI1_Config+0x62>
 8006248:	2b02      	cmp	r3, #2
 800624a:	d009      	beq.n	8006260 <RCCEx_PLLSAI1_Config+0x74>
 800624c:	e020      	b.n	8006290 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800624e:	4b60      	ldr	r3, [pc, #384]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d11d      	bne.n	8006296 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800625e:	e01a      	b.n	8006296 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006260:	4b5b      	ldr	r3, [pc, #364]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006268:	2b00      	cmp	r3, #0
 800626a:	d116      	bne.n	800629a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006270:	e013      	b.n	800629a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006272:	4b57      	ldr	r3, [pc, #348]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10f      	bne.n	800629e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800627e:	4b54      	ldr	r3, [pc, #336]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d109      	bne.n	800629e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800628e:	e006      	b.n	800629e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	73fb      	strb	r3, [r7, #15]
      break;
 8006294:	e004      	b.n	80062a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006296:	bf00      	nop
 8006298:	e002      	b.n	80062a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800629a:	bf00      	nop
 800629c:	e000      	b.n	80062a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800629e:	bf00      	nop
    }

    if(status == HAL_OK)
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10d      	bne.n	80062c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80062a6:	4b4a      	ldr	r3, [pc, #296]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6819      	ldr	r1, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	3b01      	subs	r3, #1
 80062b8:	011b      	lsls	r3, r3, #4
 80062ba:	430b      	orrs	r3, r1
 80062bc:	4944      	ldr	r1, [pc, #272]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80062c2:	7bfb      	ldrb	r3, [r7, #15]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d17d      	bne.n	80063c4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80062c8:	4b41      	ldr	r3, [pc, #260]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a40      	ldr	r2, [pc, #256]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80062d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062d4:	f7fc fd38 	bl	8002d48 <HAL_GetTick>
 80062d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80062da:	e009      	b.n	80062f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80062dc:	f7fc fd34 	bl	8002d48 <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d902      	bls.n	80062f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	73fb      	strb	r3, [r7, #15]
        break;
 80062ee:	e005      	b.n	80062fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80062f0:	4b37      	ldr	r3, [pc, #220]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1ef      	bne.n	80062dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d160      	bne.n	80063c4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d111      	bne.n	800632c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006308:	4b31      	ldr	r3, [pc, #196]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006310:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	6892      	ldr	r2, [r2, #8]
 8006318:	0211      	lsls	r1, r2, #8
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	68d2      	ldr	r2, [r2, #12]
 800631e:	0912      	lsrs	r2, r2, #4
 8006320:	0452      	lsls	r2, r2, #17
 8006322:	430a      	orrs	r2, r1
 8006324:	492a      	ldr	r1, [pc, #168]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006326:	4313      	orrs	r3, r2
 8006328:	610b      	str	r3, [r1, #16]
 800632a:	e027      	b.n	800637c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d112      	bne.n	8006358 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006332:	4b27      	ldr	r3, [pc, #156]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800633a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6892      	ldr	r2, [r2, #8]
 8006342:	0211      	lsls	r1, r2, #8
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	6912      	ldr	r2, [r2, #16]
 8006348:	0852      	lsrs	r2, r2, #1
 800634a:	3a01      	subs	r2, #1
 800634c:	0552      	lsls	r2, r2, #21
 800634e:	430a      	orrs	r2, r1
 8006350:	491f      	ldr	r1, [pc, #124]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006352:	4313      	orrs	r3, r2
 8006354:	610b      	str	r3, [r1, #16]
 8006356:	e011      	b.n	800637c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006358:	4b1d      	ldr	r3, [pc, #116]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006360:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	6892      	ldr	r2, [r2, #8]
 8006368:	0211      	lsls	r1, r2, #8
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	6952      	ldr	r2, [r2, #20]
 800636e:	0852      	lsrs	r2, r2, #1
 8006370:	3a01      	subs	r2, #1
 8006372:	0652      	lsls	r2, r2, #25
 8006374:	430a      	orrs	r2, r1
 8006376:	4916      	ldr	r1, [pc, #88]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006378:	4313      	orrs	r3, r2
 800637a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800637c:	4b14      	ldr	r3, [pc, #80]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a13      	ldr	r2, [pc, #76]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006382:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006386:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006388:	f7fc fcde 	bl	8002d48 <HAL_GetTick>
 800638c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800638e:	e009      	b.n	80063a4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006390:	f7fc fcda 	bl	8002d48 <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	2b02      	cmp	r3, #2
 800639c:	d902      	bls.n	80063a4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	73fb      	strb	r3, [r7, #15]
          break;
 80063a2:	e005      	b.n	80063b0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80063a4:	4b0a      	ldr	r3, [pc, #40]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d0ef      	beq.n	8006390 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d106      	bne.n	80063c4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80063b6:	4b06      	ldr	r3, [pc, #24]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063b8:	691a      	ldr	r2, [r3, #16]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	4904      	ldr	r1, [pc, #16]	@ (80063d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	40021000 	.word	0x40021000

080063d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80063e2:	4b6a      	ldr	r3, [pc, #424]	@ (800658c <RCCEx_PLLSAI2_Config+0x1b8>)
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	f003 0303 	and.w	r3, r3, #3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d018      	beq.n	8006420 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80063ee:	4b67      	ldr	r3, [pc, #412]	@ (800658c <RCCEx_PLLSAI2_Config+0x1b8>)
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	f003 0203 	and.w	r2, r3, #3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d10d      	bne.n	800641a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
       ||
 8006402:	2b00      	cmp	r3, #0
 8006404:	d009      	beq.n	800641a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006406:	4b61      	ldr	r3, [pc, #388]	@ (800658c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	091b      	lsrs	r3, r3, #4
 800640c:	f003 0307 	and.w	r3, r3, #7
 8006410:	1c5a      	adds	r2, r3, #1
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
       ||
 8006416:	429a      	cmp	r2, r3
 8006418:	d047      	beq.n	80064aa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	73fb      	strb	r3, [r7, #15]
 800641e:	e044      	b.n	80064aa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2b03      	cmp	r3, #3
 8006426:	d018      	beq.n	800645a <RCCEx_PLLSAI2_Config+0x86>
 8006428:	2b03      	cmp	r3, #3
 800642a:	d825      	bhi.n	8006478 <RCCEx_PLLSAI2_Config+0xa4>
 800642c:	2b01      	cmp	r3, #1
 800642e:	d002      	beq.n	8006436 <RCCEx_PLLSAI2_Config+0x62>
 8006430:	2b02      	cmp	r3, #2
 8006432:	d009      	beq.n	8006448 <RCCEx_PLLSAI2_Config+0x74>
 8006434:	e020      	b.n	8006478 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006436:	4b55      	ldr	r3, [pc, #340]	@ (800658c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0302 	and.w	r3, r3, #2
 800643e:	2b00      	cmp	r3, #0
 8006440:	d11d      	bne.n	800647e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006446:	e01a      	b.n	800647e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006448:	4b50      	ldr	r3, [pc, #320]	@ (800658c <RCCEx_PLLSAI2_Config+0x1b8>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006450:	2b00      	cmp	r3, #0
 8006452:	d116      	bne.n	8006482 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006458:	e013      	b.n	8006482 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800645a:	4b4c      	ldr	r3, [pc, #304]	@ (800658c <RCCEx_PLLSAI2_Config+0x1b8>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10f      	bne.n	8006486 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006466:	4b49      	ldr	r3, [pc, #292]	@ (800658c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d109      	bne.n	8006486 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006476:	e006      	b.n	8006486 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	73fb      	strb	r3, [r7, #15]
      break;
 800647c:	e004      	b.n	8006488 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800647e:	bf00      	nop
 8006480:	e002      	b.n	8006488 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006482:	bf00      	nop
 8006484:	e000      	b.n	8006488 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006486:	bf00      	nop
    }

    if(status == HAL_OK)
 8006488:	7bfb      	ldrb	r3, [r7, #15]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10d      	bne.n	80064aa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800648e:	4b3f      	ldr	r3, [pc, #252]	@ (800658c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6819      	ldr	r1, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	3b01      	subs	r3, #1
 80064a0:	011b      	lsls	r3, r3, #4
 80064a2:	430b      	orrs	r3, r1
 80064a4:	4939      	ldr	r1, [pc, #228]	@ (800658c <RCCEx_PLLSAI2_Config+0x1b8>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d167      	bne.n	8006580 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80064b0:	4b36      	ldr	r3, [pc, #216]	@ (800658c <RCCEx_PLLSAI2_Config+0x1b8>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a35      	ldr	r2, [pc, #212]	@ (800658c <RCCEx_PLLSAI2_Config+0x1b8>)
 80064b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064bc:	f7fc fc44 	bl	8002d48 <HAL_GetTick>
 80064c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80064c2:	e009      	b.n	80064d8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80064c4:	f7fc fc40 	bl	8002d48 <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d902      	bls.n	80064d8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	73fb      	strb	r3, [r7, #15]
        break;
 80064d6:	e005      	b.n	80064e4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80064d8:	4b2c      	ldr	r3, [pc, #176]	@ (800658c <RCCEx_PLLSAI2_Config+0x1b8>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1ef      	bne.n	80064c4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d14a      	bne.n	8006580 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d111      	bne.n	8006514 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80064f0:	4b26      	ldr	r3, [pc, #152]	@ (800658c <RCCEx_PLLSAI2_Config+0x1b8>)
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80064f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	6892      	ldr	r2, [r2, #8]
 8006500:	0211      	lsls	r1, r2, #8
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	68d2      	ldr	r2, [r2, #12]
 8006506:	0912      	lsrs	r2, r2, #4
 8006508:	0452      	lsls	r2, r2, #17
 800650a:	430a      	orrs	r2, r1
 800650c:	491f      	ldr	r1, [pc, #124]	@ (800658c <RCCEx_PLLSAI2_Config+0x1b8>)
 800650e:	4313      	orrs	r3, r2
 8006510:	614b      	str	r3, [r1, #20]
 8006512:	e011      	b.n	8006538 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006514:	4b1d      	ldr	r3, [pc, #116]	@ (800658c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800651c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	6892      	ldr	r2, [r2, #8]
 8006524:	0211      	lsls	r1, r2, #8
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	6912      	ldr	r2, [r2, #16]
 800652a:	0852      	lsrs	r2, r2, #1
 800652c:	3a01      	subs	r2, #1
 800652e:	0652      	lsls	r2, r2, #25
 8006530:	430a      	orrs	r2, r1
 8006532:	4916      	ldr	r1, [pc, #88]	@ (800658c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006534:	4313      	orrs	r3, r2
 8006536:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006538:	4b14      	ldr	r3, [pc, #80]	@ (800658c <RCCEx_PLLSAI2_Config+0x1b8>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a13      	ldr	r2, [pc, #76]	@ (800658c <RCCEx_PLLSAI2_Config+0x1b8>)
 800653e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006542:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006544:	f7fc fc00 	bl	8002d48 <HAL_GetTick>
 8006548:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800654a:	e009      	b.n	8006560 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800654c:	f7fc fbfc 	bl	8002d48 <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	2b02      	cmp	r3, #2
 8006558:	d902      	bls.n	8006560 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	73fb      	strb	r3, [r7, #15]
          break;
 800655e:	e005      	b.n	800656c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006560:	4b0a      	ldr	r3, [pc, #40]	@ (800658c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d0ef      	beq.n	800654c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800656c:	7bfb      	ldrb	r3, [r7, #15]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d106      	bne.n	8006580 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006572:	4b06      	ldr	r3, [pc, #24]	@ (800658c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006574:	695a      	ldr	r2, [r3, #20]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	4904      	ldr	r1, [pc, #16]	@ (800658c <RCCEx_PLLSAI2_Config+0x1b8>)
 800657c:	4313      	orrs	r3, r2
 800657e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006580:	7bfb      	ldrb	r3, [r7, #15]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	40021000 	.word	0x40021000

08006590 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006590:	b480      	push	{r7}
 8006592:	b089      	sub	sp, #36	@ 0x24
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800659a:	2300      	movs	r3, #0
 800659c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80065a2:	2300      	movs	r3, #0
 80065a4:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065ac:	d10c      	bne.n	80065c8 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80065ae:	4b6e      	ldr	r3, [pc, #440]	@ (8006768 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80065b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065b4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80065b8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80065c0:	d112      	bne.n	80065e8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80065c2:	4b6a      	ldr	r3, [pc, #424]	@ (800676c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80065c4:	61fb      	str	r3, [r7, #28]
 80065c6:	e00f      	b.n	80065e8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065ce:	d10b      	bne.n	80065e8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80065d0:	4b65      	ldr	r3, [pc, #404]	@ (8006768 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80065d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065d6:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80065da:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80065e2:	d101      	bne.n	80065e8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80065e4:	4b61      	ldr	r3, [pc, #388]	@ (800676c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80065e6:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f040 80b4 	bne.w	8006758 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80065fa:	d003      	beq.n	8006604 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006602:	d135      	bne.n	8006670 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006604:	4b58      	ldr	r3, [pc, #352]	@ (8006768 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800660c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006610:	f040 80a1 	bne.w	8006756 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8006614:	4b54      	ldr	r3, [pc, #336]	@ (8006768 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 809a 	beq.w	8006756 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006622:	4b51      	ldr	r3, [pc, #324]	@ (8006768 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	091b      	lsrs	r3, r3, #4
 8006628:	f003 0307 	and.w	r3, r3, #7
 800662c:	3301      	adds	r3, #1
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	fbb2 f3f3 	udiv	r3, r2, r3
 8006634:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006636:	4b4c      	ldr	r3, [pc, #304]	@ (8006768 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	0a1b      	lsrs	r3, r3, #8
 800663c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006640:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10a      	bne.n	800665e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006648:	4b47      	ldr	r3, [pc, #284]	@ (8006768 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8006654:	2311      	movs	r3, #17
 8006656:	617b      	str	r3, [r7, #20]
 8006658:	e001      	b.n	800665e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 800665a:	2307      	movs	r3, #7
 800665c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	fb03 f202 	mul.w	r2, r3, r2
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	fbb2 f3f3 	udiv	r3, r2, r3
 800666c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800666e:	e072      	b.n	8006756 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d133      	bne.n	80066de <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8006676:	4b3c      	ldr	r3, [pc, #240]	@ (8006768 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800667e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006682:	d169      	bne.n	8006758 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8006684:	4b38      	ldr	r3, [pc, #224]	@ (8006768 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d063      	beq.n	8006758 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006690:	4b35      	ldr	r3, [pc, #212]	@ (8006768 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	091b      	lsrs	r3, r3, #4
 8006696:	f003 0307 	and.w	r3, r3, #7
 800669a:	3301      	adds	r3, #1
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a2:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80066a4:	4b30      	ldr	r3, [pc, #192]	@ (8006768 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	0a1b      	lsrs	r3, r3, #8
 80066aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066ae:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10a      	bne.n	80066cc <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80066b6:	4b2c      	ldr	r3, [pc, #176]	@ (8006768 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 80066c2:	2311      	movs	r3, #17
 80066c4:	617b      	str	r3, [r7, #20]
 80066c6:	e001      	b.n	80066cc <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 80066c8:	2307      	movs	r3, #7
 80066ca:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	fb03 f202 	mul.w	r2, r3, r2
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066da:	61fb      	str	r3, [r7, #28]
 80066dc:	e03c      	b.n	8006758 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066e4:	d003      	beq.n	80066ee <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80066ec:	d134      	bne.n	8006758 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80066ee:	4b1e      	ldr	r3, [pc, #120]	@ (8006768 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066fa:	d12d      	bne.n	8006758 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80066fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006768 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d027      	beq.n	8006758 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006708:	4b17      	ldr	r3, [pc, #92]	@ (8006768 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	091b      	lsrs	r3, r3, #4
 800670e:	f003 0307 	and.w	r3, r3, #7
 8006712:	3301      	adds	r3, #1
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	fbb2 f3f3 	udiv	r3, r2, r3
 800671a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800671c:	4b12      	ldr	r3, [pc, #72]	@ (8006768 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	0a1b      	lsrs	r3, r3, #8
 8006722:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006726:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10a      	bne.n	8006744 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800672e:	4b0e      	ldr	r3, [pc, #56]	@ (8006768 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d002      	beq.n	8006740 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 800673a:	2311      	movs	r3, #17
 800673c:	617b      	str	r3, [r7, #20]
 800673e:	e001      	b.n	8006744 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8006740:	2307      	movs	r3, #7
 8006742:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	fb03 f202 	mul.w	r2, r3, r2
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006752:	61fb      	str	r3, [r7, #28]
 8006754:	e000      	b.n	8006758 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006756:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8006758:	69fb      	ldr	r3, [r7, #28]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3724      	adds	r7, #36	@ 0x24
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	40021000 	.word	0x40021000
 800676c:	001fff68 	.word	0x001fff68

08006770 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
 800677c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	2b02      	cmp	r3, #2
 8006782:	d904      	bls.n	800678e <HAL_SAI_InitProtocol+0x1e>
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	3b03      	subs	r3, #3
 8006788:	2b01      	cmp	r3, #1
 800678a:	d812      	bhi.n	80067b2 <HAL_SAI_InitProtocol+0x42>
 800678c:	e008      	b.n	80067a0 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	68b9      	ldr	r1, [r7, #8]
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f000 fcff 	bl	8007198 <SAI_InitI2S>
 800679a:	4603      	mov	r3, r0
 800679c:	75fb      	strb	r3, [r7, #23]
      break;
 800679e:	e00b      	b.n	80067b8 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	68b9      	ldr	r1, [r7, #8]
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 fda8 	bl	80072fc <SAI_InitPCM>
 80067ac:	4603      	mov	r3, r0
 80067ae:	75fb      	strb	r3, [r7, #23]
      break;
 80067b0:	e002      	b.n	80067b8 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	75fb      	strb	r3, [r7, #23]
      break;
 80067b6:	bf00      	nop
  }

  if (status == HAL_OK)
 80067b8:	7dfb      	ldrb	r3, [r7, #23]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d104      	bne.n	80067c8 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f000 f808 	bl	80067d4 <HAL_SAI_Init>
 80067c4:	4603      	mov	r3, r0
 80067c6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80067c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3718      	adds	r7, #24
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
	...

080067d4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b088      	sub	sp, #32
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e155      	b.n	8006a92 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d106      	bne.n	8006800 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7fb f8c4 	bl	8001988 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fe35 	bl	8007470 <SAI_Disable>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d001      	beq.n	8006810 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e140      	b.n	8006a92 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	2b02      	cmp	r3, #2
 800681e:	d00c      	beq.n	800683a <HAL_SAI_Init+0x66>
 8006820:	2b02      	cmp	r3, #2
 8006822:	d80d      	bhi.n	8006840 <HAL_SAI_Init+0x6c>
 8006824:	2b00      	cmp	r3, #0
 8006826:	d002      	beq.n	800682e <HAL_SAI_Init+0x5a>
 8006828:	2b01      	cmp	r3, #1
 800682a:	d003      	beq.n	8006834 <HAL_SAI_Init+0x60>
 800682c:	e008      	b.n	8006840 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800682e:	2300      	movs	r3, #0
 8006830:	61fb      	str	r3, [r7, #28]
      break;
 8006832:	e008      	b.n	8006846 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006834:	2310      	movs	r3, #16
 8006836:	61fb      	str	r3, [r7, #28]
      break;
 8006838:	e005      	b.n	8006846 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800683a:	2320      	movs	r3, #32
 800683c:	61fb      	str	r3, [r7, #28]
      break;
 800683e:	e002      	b.n	8006846 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8006840:	2300      	movs	r3, #0
 8006842:	61fb      	str	r3, [r7, #28]
      break;
 8006844:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	2b03      	cmp	r3, #3
 800684c:	d81d      	bhi.n	800688a <HAL_SAI_Init+0xb6>
 800684e:	a201      	add	r2, pc, #4	@ (adr r2, 8006854 <HAL_SAI_Init+0x80>)
 8006850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006854:	08006865 	.word	0x08006865
 8006858:	0800686b 	.word	0x0800686b
 800685c:	08006873 	.word	0x08006873
 8006860:	0800687b 	.word	0x0800687b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006864:	2300      	movs	r3, #0
 8006866:	617b      	str	r3, [r7, #20]
      break;
 8006868:	e012      	b.n	8006890 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800686a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800686e:	617b      	str	r3, [r7, #20]
      break;
 8006870:	e00e      	b.n	8006890 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006872:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006876:	617b      	str	r3, [r7, #20]
      break;
 8006878:	e00a      	b.n	8006890 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800687a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800687e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	f043 0301 	orr.w	r3, r3, #1
 8006886:	61fb      	str	r3, [r7, #28]
      break;
 8006888:	e002      	b.n	8006890 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800688a:	2300      	movs	r3, #0
 800688c:	617b      	str	r3, [r7, #20]
      break;
 800688e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a81      	ldr	r2, [pc, #516]	@ (8006a9c <HAL_SAI_Init+0x2c8>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d004      	beq.n	80068a4 <HAL_SAI_Init+0xd0>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a80      	ldr	r2, [pc, #512]	@ (8006aa0 <HAL_SAI_Init+0x2cc>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d103      	bne.n	80068ac <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 80068a4:	4a7f      	ldr	r2, [pc, #508]	@ (8006aa4 <HAL_SAI_Init+0x2d0>)
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	6013      	str	r3, [r2, #0]
 80068aa:	e002      	b.n	80068b2 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80068ac:	4a7e      	ldr	r2, [pc, #504]	@ (8006aa8 <HAL_SAI_Init+0x2d4>)
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d041      	beq.n	800693e <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a77      	ldr	r2, [pc, #476]	@ (8006a9c <HAL_SAI_Init+0x2c8>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d004      	beq.n	80068ce <HAL_SAI_Init+0xfa>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a75      	ldr	r2, [pc, #468]	@ (8006aa0 <HAL_SAI_Init+0x2cc>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d105      	bne.n	80068da <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80068ce:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80068d2:	f7fe ff1d 	bl	8005710 <HAL_RCCEx_GetPeriphCLKFreq>
 80068d6:	6138      	str	r0, [r7, #16]
 80068d8:	e004      	b.n	80068e4 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80068da:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80068de:	f7fe ff17 	bl	8005710 <HAL_RCCEx_GetPeriphCLKFreq>
 80068e2:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	4613      	mov	r3, r2
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4413      	add	r3, r2
 80068ec:	005b      	lsls	r3, r3, #1
 80068ee:	461a      	mov	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	025b      	lsls	r3, r3, #9
 80068f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068fa:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4a6b      	ldr	r2, [pc, #428]	@ (8006aac <HAL_SAI_Init+0x2d8>)
 8006900:	fba2 2303 	umull	r2, r3, r2, r3
 8006904:	08da      	lsrs	r2, r3, #3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800690a:	68f9      	ldr	r1, [r7, #12]
 800690c:	4b67      	ldr	r3, [pc, #412]	@ (8006aac <HAL_SAI_Init+0x2d8>)
 800690e:	fba3 2301 	umull	r2, r3, r3, r1
 8006912:	08da      	lsrs	r2, r3, #3
 8006914:	4613      	mov	r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4413      	add	r3, r2
 800691a:	005b      	lsls	r3, r3, #1
 800691c:	1aca      	subs	r2, r1, r3
 800691e:	2a08      	cmp	r2, #8
 8006920:	d904      	bls.n	800692c <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006930:	2b04      	cmp	r3, #4
 8006932:	d104      	bne.n	800693e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a1b      	ldr	r3, [r3, #32]
 8006938:	085a      	lsrs	r2, r3, #1
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d003      	beq.n	800694e <HAL_SAI_Init+0x17a>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	2b02      	cmp	r3, #2
 800694c:	d109      	bne.n	8006962 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006952:	2b01      	cmp	r3, #1
 8006954:	d101      	bne.n	800695a <HAL_SAI_Init+0x186>
 8006956:	2300      	movs	r3, #0
 8006958:	e001      	b.n	800695e <HAL_SAI_Init+0x18a>
 800695a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800695e:	61bb      	str	r3, [r7, #24]
 8006960:	e008      	b.n	8006974 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006966:	2b01      	cmp	r3, #1
 8006968:	d102      	bne.n	8006970 <HAL_SAI_Init+0x19c>
 800696a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800696e:	e000      	b.n	8006972 <HAL_SAI_Init+0x19e>
 8006970:	2300      	movs	r3, #0
 8006972:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6819      	ldr	r1, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	4b4c      	ldr	r3, [pc, #304]	@ (8006ab0 <HAL_SAI_Init+0x2dc>)
 8006980:	400b      	ands	r3, r1
 8006982:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6819      	ldr	r1, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006992:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006998:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800699e:	431a      	orrs	r2, r3
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 80069ac:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80069b8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	051b      	lsls	r3, r3, #20
 80069c0:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	6812      	ldr	r2, [r2, #0]
 80069d4:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80069d8:	f023 030f 	bic.w	r3, r3, #15
 80069dc:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6859      	ldr	r1, [r3, #4]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	699a      	ldr	r2, [r3, #24]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ec:	431a      	orrs	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f2:	431a      	orrs	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	430a      	orrs	r2, r1
 80069fa:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6899      	ldr	r1, [r3, #8]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	4b2b      	ldr	r3, [pc, #172]	@ (8006ab4 <HAL_SAI_Init+0x2e0>)
 8006a08:	400b      	ands	r3, r1
 8006a0a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6899      	ldr	r1, [r3, #8]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a16:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006a1c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8006a22:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8006a28:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006a32:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	430a      	orrs	r2, r1
 8006a3a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68d9      	ldr	r1, [r3, #12]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8006a4a:	400b      	ands	r3, r1
 8006a4c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68d9      	ldr	r1, [r3, #12]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a5c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a62:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006a64:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	021b      	lsls	r3, r3, #8
 8006a6e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	430a      	orrs	r2, r1
 8006a76:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3720      	adds	r7, #32
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	40015404 	.word	0x40015404
 8006aa0:	40015424 	.word	0x40015424
 8006aa4:	40015400 	.word	0x40015400
 8006aa8:	40015800 	.word	0x40015800
 8006aac:	cccccccd 	.word	0xcccccccd
 8006ab0:	ff05c010 	.word	0xff05c010
 8006ab4:	fff88000 	.word	0xfff88000

08006ab8 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d101      	bne.n	8006ad2 <HAL_SAI_Abort+0x1a>
 8006ace:	2302      	movs	r3, #2
 8006ad0:	e053      	b.n	8006b7a <HAL_SAI_Abort+0xc2>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 fcc8 	bl	8007470 <SAI_Disable>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006af4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006af8:	d125      	bne.n	8006b46 <HAL_SAI_Abort+0x8e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006b08:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b12      	cmp	r3, #18
 8006b14:	d108      	bne.n	8006b28 <HAL_SAI_Abort+0x70>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d004      	beq.n	8006b28 <HAL_SAI_Abort+0x70>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7fc fb16 	bl	8003154 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b22      	cmp	r3, #34	@ 0x22
 8006b32:	d108      	bne.n	8006b46 <HAL_SAI_Abort+0x8e>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d004      	beq.n	8006b46 <HAL_SAI_Abort+0x8e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7fc fb07 	bl	8003154 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b56:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685a      	ldr	r2, [r3, #4]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f042 0208 	orr.w	r2, r2, #8
 8006b66:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
	...

08006b84 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b086      	sub	sp, #24
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8006b92:	f7fc f8d9 	bl	8002d48 <HAL_GetTick>
 8006b96:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d002      	beq.n	8006ba4 <HAL_SAI_Transmit_DMA+0x20>
 8006b9e:	88fb      	ldrh	r3, [r7, #6]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e093      	b.n	8006cd0 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	f040 808c 	bne.w	8006cce <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d101      	bne.n	8006bc4 <HAL_SAI_Transmit_DMA+0x40>
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	e085      	b.n	8006cd0 <HAL_SAI_Transmit_DMA+0x14c>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	88fa      	ldrh	r2, [r7, #6]
 8006bd6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	88fa      	ldrh	r2, [r7, #6]
 8006bde:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2212      	movs	r2, #18
 8006bee:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bf6:	4a38      	ldr	r2, [pc, #224]	@ (8006cd8 <HAL_SAI_Transmit_DMA+0x154>)
 8006bf8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bfe:	4a37      	ldr	r2, [pc, #220]	@ (8006cdc <HAL_SAI_Transmit_DMA+0x158>)
 8006c00:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c06:	4a36      	ldr	r2, [pc, #216]	@ (8006ce0 <HAL_SAI_Transmit_DMA+0x15c>)
 8006c08:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c0e:	2200      	movs	r2, #0
 8006c10:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	331c      	adds	r3, #28
 8006c22:	461a      	mov	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006c2a:	f7fc fa33 	bl	8003094 <HAL_DMA_Start_IT>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d005      	beq.n	8006c40 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e047      	b.n	8006cd0 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006c40:	2100      	movs	r1, #0
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 fbdc 	bl	8007400 <SAI_InterruptFlag>
 8006c48:	4601      	mov	r1, r0
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	691a      	ldr	r2, [r3, #16]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	430a      	orrs	r2, r1
 8006c56:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006c66:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8006c68:	e015      	b.n	8006c96 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8006c6a:	f7fc f86d 	bl	8002d48 <HAL_GetTick>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006c78:	d90d      	bls.n	8006c96 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c80:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e01c      	b.n	8006cd0 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	695b      	ldr	r3, [r3, #20]
 8006c9c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d0e2      	beq.n	8006c6a <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d107      	bne.n	8006cc2 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006cc0:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	e000      	b.n	8006cd0 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 8006cce:	2302      	movs	r3, #2
  }
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3718      	adds	r7, #24
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	08007543 	.word	0x08007543
 8006cdc:	080074e5 	.word	0x080074e5
 8006ce0:	080075d9 	.word	0x080075d9

08006ce4 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d002      	beq.n	8006cfe <HAL_SAI_Receive_DMA+0x1a>
 8006cf8:	88fb      	ldrh	r3, [r7, #6]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d101      	bne.n	8006d02 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e074      	b.n	8006dec <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d16d      	bne.n	8006dea <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d101      	bne.n	8006d1c <HAL_SAI_Receive_DMA+0x38>
 8006d18:	2302      	movs	r3, #2
 8006d1a:	e067      	b.n	8006dec <HAL_SAI_Receive_DMA+0x108>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	88fa      	ldrh	r2, [r7, #6]
 8006d2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	88fa      	ldrh	r2, [r7, #6]
 8006d36:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2222      	movs	r2, #34	@ 0x22
 8006d46:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d4e:	4a29      	ldr	r2, [pc, #164]	@ (8006df4 <HAL_SAI_Receive_DMA+0x110>)
 8006d50:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d56:	4a28      	ldr	r2, [pc, #160]	@ (8006df8 <HAL_SAI_Receive_DMA+0x114>)
 8006d58:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d5e:	4a27      	ldr	r2, [pc, #156]	@ (8006dfc <HAL_SAI_Receive_DMA+0x118>)
 8006d60:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d66:	2200      	movs	r2, #0
 8006d68:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	331c      	adds	r3, #28
 8006d74:	4619      	mov	r1, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006d82:	f7fc f987 	bl	8003094 <HAL_DMA_Start_IT>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d005      	beq.n	8006d98 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e029      	b.n	8006dec <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006d98:	2100      	movs	r1, #0
 8006d9a:	68f8      	ldr	r0, [r7, #12]
 8006d9c:	f000 fb30 	bl	8007400 <SAI_InterruptFlag>
 8006da0:	4601      	mov	r1, r0
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	691a      	ldr	r2, [r3, #16]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	430a      	orrs	r2, r1
 8006dae:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006dbe:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d107      	bne.n	8006dde <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006ddc:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006de6:	2300      	movs	r3, #0
 8006de8:	e000      	b.n	8006dec <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8006dea:	2302      	movs	r3, #2
  }
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	080075bd 	.word	0x080075bd
 8006df8:	0800755f 	.word	0x0800755f
 8006dfc:	080075d9 	.word	0x080075d9

08006e00 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f000 8192 	beq.w	800713a <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	695b      	ldr	r3, [r3, #20]
 8006e1c:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f003 0308 	and.w	r3, r3, #8
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d009      	beq.n	8006e4c <HAL_SAI_IRQHandler+0x4c>
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	f003 0308 	and.w	r3, r3, #8
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d004      	beq.n	8006e4c <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	4798      	blx	r3
 8006e4a:	e176      	b.n	800713a <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f003 0301 	and.w	r3, r3, #1
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d01e      	beq.n	8006e94 <HAL_SAI_IRQHandler+0x94>
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	f003 0301 	and.w	r3, r3, #1
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d019      	beq.n	8006e94 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2201      	movs	r2, #1
 8006e66:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	2b22      	cmp	r3, #34	@ 0x22
 8006e72:	d101      	bne.n	8006e78 <HAL_SAI_IRQHandler+0x78>
 8006e74:	2301      	movs	r3, #1
 8006e76:	e000      	b.n	8006e7a <HAL_SAI_IRQHandler+0x7a>
 8006e78:	2302      	movs	r3, #2
 8006e7a:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	431a      	orrs	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7fa fb89 	bl	80015a4 <HAL_SAI_ErrorCallback>
 8006e92:	e152      	b.n	800713a <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d011      	beq.n	8006ec2 <HAL_SAI_IRQHandler+0xc2>
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	f003 0302 	and.w	r3, r3, #2
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00c      	beq.n	8006ec2 <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2202      	movs	r2, #2
 8006eae:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 8140 	beq.w	800713a <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ebe:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 8006ec0:	e13b      	b.n	800713a <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f003 0320 	and.w	r3, r3, #32
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d055      	beq.n	8006f78 <HAL_SAI_IRQHandler+0x178>
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	f003 0320 	and.w	r3, r3, #32
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d050      	beq.n	8006f78 <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2220      	movs	r2, #32
 8006edc:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ee4:	f043 0204 	orr.w	r2, r3, #4
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d038      	beq.n	8006f6a <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d016      	beq.n	8006f2e <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f04:	4a8f      	ldr	r2, [pc, #572]	@ (8007144 <HAL_SAI_IRQHandler+0x344>)
 8006f06:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7fc f95f 	bl	80031d0 <HAL_DMA_Abort_IT>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00a      	beq.n	8006f2e <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f1e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f7fa fb3b 	bl	80015a4 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f000 80fc 	beq.w	8007130 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f3c:	4a81      	ldr	r2, [pc, #516]	@ (8007144 <HAL_SAI_IRQHandler+0x344>)
 8006f3e:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7fc f943 	bl	80031d0 <HAL_DMA_Abort_IT>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f000 80ef 	beq.w	8007130 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f58:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7fa fb1e 	bl	80015a4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006f68:	e0e2      	b.n	8007130 <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f7ff fda4 	bl	8006ab8 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f7fa fb17 	bl	80015a4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006f76:	e0db      	b.n	8007130 <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d055      	beq.n	800702e <HAL_SAI_IRQHandler+0x22e>
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d050      	beq.n	800702e <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2240      	movs	r2, #64	@ 0x40
 8006f92:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f9a:	f043 0208 	orr.w	r2, r3, #8
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d038      	beq.n	8007020 <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d016      	beq.n	8006fe4 <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fba:	4a62      	ldr	r2, [pc, #392]	@ (8007144 <HAL_SAI_IRQHandler+0x344>)
 8006fbc:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7fc f904 	bl	80031d0 <HAL_DMA_Abort_IT>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00a      	beq.n	8006fe4 <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fd4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7fa fae0 	bl	80015a4 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f000 80a3 	beq.w	8007134 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ff2:	4a54      	ldr	r2, [pc, #336]	@ (8007144 <HAL_SAI_IRQHandler+0x344>)
 8006ff4:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7fc f8e8 	bl	80031d0 <HAL_DMA_Abort_IT>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	f000 8096 	beq.w	8007134 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800700e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f7fa fac3 	bl	80015a4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800701e:	e089      	b.n	8007134 <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f7ff fd49 	bl	8006ab8 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7fa fabc 	bl	80015a4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800702c:	e082      	b.n	8007134 <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f003 0304 	and.w	r3, r3, #4
 8007034:	2b00      	cmp	r3, #0
 8007036:	d061      	beq.n	80070fc <HAL_SAI_IRQHandler+0x2fc>
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	f003 0304 	and.w	r3, r3, #4
 800703e:	2b00      	cmp	r3, #0
 8007040:	d05c      	beq.n	80070fc <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2204      	movs	r2, #4
 8007048:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007050:	f043 0220 	orr.w	r2, r3, #32
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007060:	2b00      	cmp	r3, #0
 8007062:	d036      	beq.n	80070d2 <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007068:	2b00      	cmp	r3, #0
 800706a:	d016      	beq.n	800709a <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007070:	4a34      	ldr	r2, [pc, #208]	@ (8007144 <HAL_SAI_IRQHandler+0x344>)
 8007072:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007078:	4618      	mov	r0, r3
 800707a:	f7fc f8a9 	bl	80031d0 <HAL_DMA_Abort_IT>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00a      	beq.n	800709a <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800708a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f7fa fa85 	bl	80015a4 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d04a      	beq.n	8007138 <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070a6:	4a27      	ldr	r2, [pc, #156]	@ (8007144 <HAL_SAI_IRQHandler+0x344>)
 80070a8:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7fc f88e 	bl	80031d0 <HAL_DMA_Abort_IT>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d03e      	beq.n	8007138 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070c0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f7fa fa6a 	bl	80015a4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80070d0:	e032      	b.n	8007138 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2200      	movs	r2, #0
 80070d8:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80070e2:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f7fa fa55 	bl	80015a4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80070fa:	e01d      	b.n	8007138 <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	f003 0310 	and.w	r3, r3, #16
 8007102:	2b00      	cmp	r3, #0
 8007104:	d019      	beq.n	800713a <HAL_SAI_IRQHandler+0x33a>
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	f003 0310 	and.w	r3, r3, #16
 800710c:	2b00      	cmp	r3, #0
 800710e:	d014      	beq.n	800713a <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2210      	movs	r2, #16
 8007116:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800711e:	f043 0210 	orr.w	r2, r3, #16
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7fa fa3b 	bl	80015a4 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 800712e:	e004      	b.n	800713a <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007130:	bf00      	nop
 8007132:	e002      	b.n	800713a <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007134:	bf00      	nop
 8007136:	e000      	b.n	800713a <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007138:	bf00      	nop
}
 800713a:	bf00      	nop
 800713c:	3718      	adds	r7, #24
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	0800762b 	.word	0x0800762b

08007148 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007164:	bf00      	nop
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007198:	b480      	push	{r7}
 800719a:	b087      	sub	sp, #28
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
 80071a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071a6:	2300      	movs	r3, #0
 80071a8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d003      	beq.n	80071c6 <SAI_InitI2S+0x2e>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d103      	bne.n	80071ce <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80071cc:	e002      	b.n	80071d4 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2201      	movs	r2, #1
 80071d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80071da:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80071e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	683a      	ldr	r2, [r7, #0]
 80071ee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	f003 0301 	and.w	r3, r3, #1
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d001      	beq.n	80071fe <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e077      	b.n	80072ee <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d107      	bne.n	8007214 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8007210:	651a      	str	r2, [r3, #80]	@ 0x50
 8007212:	e006      	b.n	8007222 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800721a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2b03      	cmp	r3, #3
 8007226:	d84f      	bhi.n	80072c8 <SAI_InitI2S+0x130>
 8007228:	a201      	add	r2, pc, #4	@ (adr r2, 8007230 <SAI_InitI2S+0x98>)
 800722a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722e:	bf00      	nop
 8007230:	08007241 	.word	0x08007241
 8007234:	08007263 	.word	0x08007263
 8007238:	08007285 	.word	0x08007285
 800723c:	080072a7 	.word	0x080072a7
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2280      	movs	r2, #128	@ 0x80
 8007244:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	085b      	lsrs	r3, r3, #1
 800724a:	015a      	lsls	r2, r3, #5
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	085b      	lsrs	r3, r3, #1
 8007254:	011a      	lsls	r2, r3, #4
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2240      	movs	r2, #64	@ 0x40
 800725e:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8007260:	e035      	b.n	80072ce <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2280      	movs	r2, #128	@ 0x80
 8007266:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	085b      	lsrs	r3, r3, #1
 800726c:	019a      	lsls	r2, r3, #6
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	085b      	lsrs	r3, r3, #1
 8007276:	015a      	lsls	r2, r3, #5
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2280      	movs	r2, #128	@ 0x80
 8007280:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8007282:	e024      	b.n	80072ce <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	22c0      	movs	r2, #192	@ 0xc0
 8007288:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	085b      	lsrs	r3, r3, #1
 800728e:	019a      	lsls	r2, r3, #6
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	085b      	lsrs	r3, r3, #1
 8007298:	015a      	lsls	r2, r3, #5
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2280      	movs	r2, #128	@ 0x80
 80072a2:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80072a4:	e013      	b.n	80072ce <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	22e0      	movs	r2, #224	@ 0xe0
 80072aa:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	085b      	lsrs	r3, r3, #1
 80072b0:	019a      	lsls	r2, r3, #6
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	085b      	lsrs	r3, r3, #1
 80072ba:	015a      	lsls	r2, r3, #5
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2280      	movs	r2, #128	@ 0x80
 80072c4:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80072c6:	e002      	b.n	80072ce <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	75fb      	strb	r3, [r7, #23]
      break;
 80072cc:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d10b      	bne.n	80072ec <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d102      	bne.n	80072e0 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2210      	movs	r2, #16
 80072de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d102      	bne.n	80072ec <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2208      	movs	r2, #8
 80072ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 80072ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	371c      	adds	r7, #28
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop

080072fc <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b087      	sub	sp, #28
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
 8007308:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800730a:	2300      	movs	r3, #0
 800730c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2200      	movs	r2, #0
 8007318:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d003      	beq.n	800732a <SAI_InitPCM+0x2e>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	2b02      	cmp	r3, #2
 8007328:	d103      	bne.n	8007332 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2201      	movs	r2, #1
 800732e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007330:	e002      	b.n	8007338 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007344:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800734c:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	683a      	ldr	r2, [r7, #0]
 8007358:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007360:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	2b04      	cmp	r3, #4
 8007366:	d103      	bne.n	8007370 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2201      	movs	r2, #1
 800736c:	645a      	str	r2, [r3, #68]	@ 0x44
 800736e:	e002      	b.n	8007376 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	220d      	movs	r2, #13
 8007374:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2b03      	cmp	r3, #3
 800737a:	d837      	bhi.n	80073ec <SAI_InitPCM+0xf0>
 800737c:	a201      	add	r2, pc, #4	@ (adr r2, 8007384 <SAI_InitPCM+0x88>)
 800737e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007382:	bf00      	nop
 8007384:	08007395 	.word	0x08007395
 8007388:	080073ab 	.word	0x080073ab
 800738c:	080073c1 	.word	0x080073c1
 8007390:	080073d7 	.word	0x080073d7
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2280      	movs	r2, #128	@ 0x80
 8007398:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	011a      	lsls	r2, r3, #4
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2240      	movs	r2, #64	@ 0x40
 80073a6:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80073a8:	e023      	b.n	80073f2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2280      	movs	r2, #128	@ 0x80
 80073ae:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	015a      	lsls	r2, r3, #5
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2280      	movs	r2, #128	@ 0x80
 80073bc:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80073be:	e018      	b.n	80073f2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	22c0      	movs	r2, #192	@ 0xc0
 80073c4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	015a      	lsls	r2, r3, #5
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2280      	movs	r2, #128	@ 0x80
 80073d2:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80073d4:	e00d      	b.n	80073f2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	22e0      	movs	r2, #224	@ 0xe0
 80073da:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2280      	movs	r2, #128	@ 0x80
 80073e8:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80073ea:	e002      	b.n	80073f2 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	75fb      	strb	r3, [r7, #23]
      break;
 80073f0:	bf00      	nop
  }

  return status;
 80073f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	371c      	adds	r7, #28
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8007400:	b480      	push	{r7}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	460b      	mov	r3, r1
 800740a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800740c:	2301      	movs	r3, #1
 800740e:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8007410:	78fb      	ldrb	r3, [r7, #3]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d103      	bne.n	800741e <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f043 0308 	orr.w	r3, r3, #8
 800741c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007422:	2b08      	cmp	r3, #8
 8007424:	d10b      	bne.n	800743e <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800742a:	2b03      	cmp	r3, #3
 800742c:	d003      	beq.n	8007436 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	2b01      	cmp	r3, #1
 8007434:	d103      	bne.n	800743e <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f043 0310 	orr.w	r3, r3, #16
 800743c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	2b03      	cmp	r3, #3
 8007444:	d003      	beq.n	800744e <SAI_InterruptFlag+0x4e>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	2b02      	cmp	r3, #2
 800744c:	d104      	bne.n	8007458 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007454:	60fb      	str	r3, [r7, #12]
 8007456:	e003      	b.n	8007460 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f043 0304 	orr.w	r3, r3, #4
 800745e:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8007460:	68fb      	ldr	r3, [r7, #12]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3714      	adds	r7, #20
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
	...

08007470 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007478:	4b18      	ldr	r3, [pc, #96]	@ (80074dc <SAI_Disable+0x6c>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a18      	ldr	r2, [pc, #96]	@ (80074e0 <SAI_Disable+0x70>)
 800747e:	fba2 2303 	umull	r2, r3, r2, r3
 8007482:	0b1b      	lsrs	r3, r3, #12
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007488:	2300      	movs	r3, #0
 800748a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800749a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10a      	bne.n	80074b8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	72fb      	strb	r3, [r7, #11]
      break;
 80074b6:	e009      	b.n	80074cc <SAI_Disable+0x5c>
    }
    count--;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	3b01      	subs	r3, #1
 80074bc:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1e7      	bne.n	800749c <SAI_Disable+0x2c>

  return status;
 80074cc:	7afb      	ldrb	r3, [r7, #11]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3714      	adds	r7, #20
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	20000000 	.word	0x20000000
 80074e0:	95cbec1b 	.word	0x95cbec1b

080074e4 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f0:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	69db      	ldr	r3, [r3, #28]
 80074f6:	2b20      	cmp	r3, #32
 80074f8:	d01c      	beq.n	8007534 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007510:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007512:	2100      	movs	r1, #0
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f7ff ff73 	bl	8007400 <SAI_InterruptFlag>
 800751a:	4603      	mov	r3, r0
 800751c:	43d9      	mvns	r1, r3
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	691a      	ldr	r2, [r3, #16]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	400a      	ands	r2, r1
 800752a:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f7ff fe07 	bl	8007148 <HAL_SAI_TxCpltCallback>
#endif
}
 800753a:	bf00      	nop
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b084      	sub	sp, #16
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800754e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f7ff fe03 	bl	800715c <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8007556:	bf00      	nop
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b084      	sub	sp, #16
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800756a:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	69db      	ldr	r3, [r3, #28]
 8007570:	2b20      	cmp	r3, #32
 8007572:	d01c      	beq.n	80075ae <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007582:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800758c:	2100      	movs	r1, #0
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f7ff ff36 	bl	8007400 <SAI_InterruptFlag>
 8007594:	4603      	mov	r3, r0
 8007596:	43d9      	mvns	r1, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	691a      	ldr	r2, [r3, #16]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	400a      	ands	r2, r1
 80075a4:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f7ff fdde 	bl	8007170 <HAL_SAI_RxCpltCallback>
#endif
}
 80075b4:	bf00      	nop
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f7ff fdda 	bl	8007184 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 80075d0:	bf00      	nop
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e4:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075ec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007604:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f7ff ff32 	bl	8007470 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f7f9 ffc1 	bl	80015a4 <HAL_SAI_ErrorCallback>
#endif
}
 8007622:	bf00      	nop
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b084      	sub	sp, #16
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007636:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007646:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2200      	movs	r2, #0
 800764e:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007658:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007660:	2b20      	cmp	r3, #32
 8007662:	d00a      	beq.n	800767a <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f7ff ff03 	bl	8007470 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	685a      	ldr	r2, [r3, #4]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f042 0208 	orr.w	r2, r2, #8
 8007678:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2201      	movs	r2, #1
 800767e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f7f9 ff8a 	bl	80015a4 <HAL_SAI_ErrorCallback>
#endif
}
 8007690:	bf00      	nop
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e095      	b.n	80077d6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d108      	bne.n	80076c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076ba:	d009      	beq.n	80076d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	61da      	str	r2, [r3, #28]
 80076c2:	e005      	b.n	80076d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d106      	bne.n	80076f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7fa fa6e 	bl	8001bcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2202      	movs	r2, #2
 80076f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007706:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007710:	d902      	bls.n	8007718 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007712:	2300      	movs	r3, #0
 8007714:	60fb      	str	r3, [r7, #12]
 8007716:	e002      	b.n	800771e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007718:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800771c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007726:	d007      	beq.n	8007738 <HAL_SPI_Init+0xa0>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007730:	d002      	beq.n	8007738 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007748:	431a      	orrs	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	f003 0302 	and.w	r3, r3, #2
 8007752:	431a      	orrs	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	695b      	ldr	r3, [r3, #20]
 8007758:	f003 0301 	and.w	r3, r3, #1
 800775c:	431a      	orrs	r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	699b      	ldr	r3, [r3, #24]
 8007762:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007766:	431a      	orrs	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	69db      	ldr	r3, [r3, #28]
 800776c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007770:	431a      	orrs	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800777a:	ea42 0103 	orr.w	r1, r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007782:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	430a      	orrs	r2, r1
 800778c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	699b      	ldr	r3, [r3, #24]
 8007792:	0c1b      	lsrs	r3, r3, #16
 8007794:	f003 0204 	and.w	r2, r3, #4
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800779c:	f003 0310 	and.w	r3, r3, #16
 80077a0:	431a      	orrs	r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077a6:	f003 0308 	and.w	r3, r3, #8
 80077aa:	431a      	orrs	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80077b4:	ea42 0103 	orr.w	r1, r2, r3
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	430a      	orrs	r2, r1
 80077c4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b088      	sub	sp, #32
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	60f8      	str	r0, [r7, #12]
 80077e6:	60b9      	str	r1, [r7, #8]
 80077e8:	603b      	str	r3, [r7, #0]
 80077ea:	4613      	mov	r3, r2
 80077ec:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077ee:	f7fb faab 	bl	8002d48 <HAL_GetTick>
 80077f2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80077f4:	88fb      	ldrh	r3, [r7, #6]
 80077f6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	2b01      	cmp	r3, #1
 8007802:	d001      	beq.n	8007808 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007804:	2302      	movs	r3, #2
 8007806:	e15c      	b.n	8007ac2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d002      	beq.n	8007814 <HAL_SPI_Transmit+0x36>
 800780e:	88fb      	ldrh	r3, [r7, #6]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d101      	bne.n	8007818 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e154      	b.n	8007ac2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800781e:	2b01      	cmp	r3, #1
 8007820:	d101      	bne.n	8007826 <HAL_SPI_Transmit+0x48>
 8007822:	2302      	movs	r3, #2
 8007824:	e14d      	b.n	8007ac2 <HAL_SPI_Transmit+0x2e4>
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2203      	movs	r2, #3
 8007832:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	88fa      	ldrh	r2, [r7, #6]
 8007846:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	88fa      	ldrh	r2, [r7, #6]
 800784c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2200      	movs	r2, #0
 8007852:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007878:	d10f      	bne.n	800789a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007888:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007898:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078a4:	2b40      	cmp	r3, #64	@ 0x40
 80078a6:	d007      	beq.n	80078b8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80078c0:	d952      	bls.n	8007968 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d002      	beq.n	80078d0 <HAL_SPI_Transmit+0xf2>
 80078ca:	8b7b      	ldrh	r3, [r7, #26]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d145      	bne.n	800795c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d4:	881a      	ldrh	r2, [r3, #0]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078e0:	1c9a      	adds	r2, r3, #2
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	3b01      	subs	r3, #1
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80078f4:	e032      	b.n	800795c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	f003 0302 	and.w	r3, r3, #2
 8007900:	2b02      	cmp	r3, #2
 8007902:	d112      	bne.n	800792a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007908:	881a      	ldrh	r2, [r3, #0]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007914:	1c9a      	adds	r2, r3, #2
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800791e:	b29b      	uxth	r3, r3
 8007920:	3b01      	subs	r3, #1
 8007922:	b29a      	uxth	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007928:	e018      	b.n	800795c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800792a:	f7fb fa0d 	bl	8002d48 <HAL_GetTick>
 800792e:	4602      	mov	r2, r0
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	683a      	ldr	r2, [r7, #0]
 8007936:	429a      	cmp	r2, r3
 8007938:	d803      	bhi.n	8007942 <HAL_SPI_Transmit+0x164>
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007940:	d102      	bne.n	8007948 <HAL_SPI_Transmit+0x16a>
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d109      	bne.n	800795c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007958:	2303      	movs	r3, #3
 800795a:	e0b2      	b.n	8007ac2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007960:	b29b      	uxth	r3, r3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1c7      	bne.n	80078f6 <HAL_SPI_Transmit+0x118>
 8007966:	e083      	b.n	8007a70 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d002      	beq.n	8007976 <HAL_SPI_Transmit+0x198>
 8007970:	8b7b      	ldrh	r3, [r7, #26]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d177      	bne.n	8007a66 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800797a:	b29b      	uxth	r3, r3
 800797c:	2b01      	cmp	r3, #1
 800797e:	d912      	bls.n	80079a6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007984:	881a      	ldrh	r2, [r3, #0]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007990:	1c9a      	adds	r2, r3, #2
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800799a:	b29b      	uxth	r3, r3
 800799c:	3b02      	subs	r3, #2
 800799e:	b29a      	uxth	r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80079a4:	e05f      	b.n	8007a66 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	330c      	adds	r3, #12
 80079b0:	7812      	ldrb	r2, [r2, #0]
 80079b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079b8:	1c5a      	adds	r2, r3, #1
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	3b01      	subs	r3, #1
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80079cc:	e04b      	b.n	8007a66 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f003 0302 	and.w	r3, r3, #2
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d12b      	bne.n	8007a34 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d912      	bls.n	8007a0c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ea:	881a      	ldrh	r2, [r3, #0]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079f6:	1c9a      	adds	r2, r3, #2
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	3b02      	subs	r3, #2
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a0a:	e02c      	b.n	8007a66 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	330c      	adds	r3, #12
 8007a16:	7812      	ldrb	r2, [r2, #0]
 8007a18:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a1e:	1c5a      	adds	r2, r3, #1
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a32:	e018      	b.n	8007a66 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a34:	f7fb f988 	bl	8002d48 <HAL_GetTick>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d803      	bhi.n	8007a4c <HAL_SPI_Transmit+0x26e>
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a4a:	d102      	bne.n	8007a52 <HAL_SPI_Transmit+0x274>
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d109      	bne.n	8007a66 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e02d      	b.n	8007ac2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1ae      	bne.n	80079ce <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a70:	69fa      	ldr	r2, [r7, #28]
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f000 fa5b 	bl	8007f30 <SPI_EndRxTxTransaction>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d002      	beq.n	8007a86 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2220      	movs	r2, #32
 8007a84:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d10a      	bne.n	8007aa4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a8e:	2300      	movs	r3, #0
 8007a90:	617b      	str	r3, [r7, #20]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	617b      	str	r3, [r7, #20]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	617b      	str	r3, [r7, #20]
 8007aa2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d001      	beq.n	8007ac0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e000      	b.n	8007ac2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
  }
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3720      	adds	r7, #32
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
	...

08007acc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b088      	sub	sp, #32
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10e      	bne.n	8007b0c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d009      	beq.n	8007b0c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d004      	beq.n	8007b0c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	4798      	blx	r3
    return;
 8007b0a:	e0ce      	b.n	8007caa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	f003 0302 	and.w	r3, r3, #2
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d009      	beq.n	8007b2a <HAL_SPI_IRQHandler+0x5e>
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d004      	beq.n	8007b2a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	4798      	blx	r3
    return;
 8007b28:	e0bf      	b.n	8007caa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	f003 0320 	and.w	r3, r3, #32
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10a      	bne.n	8007b4a <HAL_SPI_IRQHandler+0x7e>
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d105      	bne.n	8007b4a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f000 80b0 	beq.w	8007caa <HAL_SPI_IRQHandler+0x1de>
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	f003 0320 	and.w	r3, r3, #32
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f000 80aa 	beq.w	8007caa <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d023      	beq.n	8007ba8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	2b03      	cmp	r3, #3
 8007b6a:	d011      	beq.n	8007b90 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b70:	f043 0204 	orr.w	r2, r3, #4
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b78:	2300      	movs	r3, #0
 8007b7a:	617b      	str	r3, [r7, #20]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	617b      	str	r3, [r7, #20]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	617b      	str	r3, [r7, #20]
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	e00b      	b.n	8007ba8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b90:	2300      	movs	r3, #0
 8007b92:	613b      	str	r3, [r7, #16]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	613b      	str	r3, [r7, #16]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	613b      	str	r3, [r7, #16]
 8007ba4:	693b      	ldr	r3, [r7, #16]
        return;
 8007ba6:	e080      	b.n	8007caa <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	f003 0320 	and.w	r3, r3, #32
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d014      	beq.n	8007bdc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bb6:	f043 0201 	orr.w	r2, r3, #1
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	60fb      	str	r3, [r7, #12]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	60fb      	str	r3, [r7, #12]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007bd8:	601a      	str	r2, [r3, #0]
 8007bda:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00c      	beq.n	8007c00 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bea:	f043 0208 	orr.w	r2, r3, #8
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	60bb      	str	r3, [r7, #8]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	60bb      	str	r3, [r7, #8]
 8007bfe:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d04f      	beq.n	8007ca8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007c16:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	f003 0302 	and.w	r3, r3, #2
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d104      	bne.n	8007c34 <HAL_SPI_IRQHandler+0x168>
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d034      	beq.n	8007c9e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	685a      	ldr	r2, [r3, #4]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f022 0203 	bic.w	r2, r2, #3
 8007c42:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d011      	beq.n	8007c70 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c50:	4a17      	ldr	r2, [pc, #92]	@ (8007cb0 <HAL_SPI_IRQHandler+0x1e4>)
 8007c52:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7fb fab9 	bl	80031d0 <HAL_DMA_Abort_IT>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d005      	beq.n	8007c70 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c68:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d016      	beq.n	8007ca6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c7c:	4a0c      	ldr	r2, [pc, #48]	@ (8007cb0 <HAL_SPI_IRQHandler+0x1e4>)
 8007c7e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7fb faa3 	bl	80031d0 <HAL_DMA_Abort_IT>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00a      	beq.n	8007ca6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c94:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8007c9c:	e003      	b.n	8007ca6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f808 	bl	8007cb4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007ca4:	e000      	b.n	8007ca8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007ca6:	bf00      	nop
    return;
 8007ca8:	bf00      	nop
  }
}
 8007caa:	3720      	adds	r7, #32
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	08007cc9 	.word	0x08007cc9

08007cb4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f7ff ffe5 	bl	8007cb4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007cea:	bf00      	nop
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
	...

08007cf4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b088      	sub	sp, #32
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	603b      	str	r3, [r7, #0]
 8007d00:	4613      	mov	r3, r2
 8007d02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007d04:	f7fb f820 	bl	8002d48 <HAL_GetTick>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d0c:	1a9b      	subs	r3, r3, r2
 8007d0e:	683a      	ldr	r2, [r7, #0]
 8007d10:	4413      	add	r3, r2
 8007d12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007d14:	f7fb f818 	bl	8002d48 <HAL_GetTick>
 8007d18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007d1a:	4b39      	ldr	r3, [pc, #228]	@ (8007e00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	015b      	lsls	r3, r3, #5
 8007d20:	0d1b      	lsrs	r3, r3, #20
 8007d22:	69fa      	ldr	r2, [r7, #28]
 8007d24:	fb02 f303 	mul.w	r3, r2, r3
 8007d28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d2a:	e054      	b.n	8007dd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d32:	d050      	beq.n	8007dd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d34:	f7fb f808 	bl	8002d48 <HAL_GetTick>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	1ad3      	subs	r3, r2, r3
 8007d3e:	69fa      	ldr	r2, [r7, #28]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d902      	bls.n	8007d4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d13d      	bne.n	8007dc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007d58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d62:	d111      	bne.n	8007d88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d6c:	d004      	beq.n	8007d78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d76:	d107      	bne.n	8007d88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d90:	d10f      	bne.n	8007db2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007da0:	601a      	str	r2, [r3, #0]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007db0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e017      	b.n	8007df6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d101      	bne.n	8007dd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	689a      	ldr	r2, [r3, #8]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	4013      	ands	r3, r2
 8007de0:	68ba      	ldr	r2, [r7, #8]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	bf0c      	ite	eq
 8007de6:	2301      	moveq	r3, #1
 8007de8:	2300      	movne	r3, #0
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	461a      	mov	r2, r3
 8007dee:	79fb      	ldrb	r3, [r7, #7]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d19b      	bne.n	8007d2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3720      	adds	r7, #32
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	20000000 	.word	0x20000000

08007e04 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b08a      	sub	sp, #40	@ 0x28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
 8007e10:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007e12:	2300      	movs	r3, #0
 8007e14:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007e16:	f7fa ff97 	bl	8002d48 <HAL_GetTick>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e1e:	1a9b      	subs	r3, r3, r2
 8007e20:	683a      	ldr	r2, [r7, #0]
 8007e22:	4413      	add	r3, r2
 8007e24:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007e26:	f7fa ff8f 	bl	8002d48 <HAL_GetTick>
 8007e2a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	330c      	adds	r3, #12
 8007e32:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007e34:	4b3d      	ldr	r3, [pc, #244]	@ (8007f2c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	4613      	mov	r3, r2
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	4413      	add	r3, r2
 8007e3e:	00da      	lsls	r2, r3, #3
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	0d1b      	lsrs	r3, r3, #20
 8007e44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e46:	fb02 f303 	mul.w	r3, r2, r3
 8007e4a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007e4c:	e060      	b.n	8007f10 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007e54:	d107      	bne.n	8007e66 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d104      	bne.n	8007e66 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007e64:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e6c:	d050      	beq.n	8007f10 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e6e:	f7fa ff6b 	bl	8002d48 <HAL_GetTick>
 8007e72:	4602      	mov	r2, r0
 8007e74:	6a3b      	ldr	r3, [r7, #32]
 8007e76:	1ad3      	subs	r3, r2, r3
 8007e78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d902      	bls.n	8007e84 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d13d      	bne.n	8007f00 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	685a      	ldr	r2, [r3, #4]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007e92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e9c:	d111      	bne.n	8007ec2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ea6:	d004      	beq.n	8007eb2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007eb0:	d107      	bne.n	8007ec2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ec0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ec6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007eca:	d10f      	bne.n	8007eec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007eda:	601a      	str	r2, [r3, #0]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007eea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007efc:	2303      	movs	r3, #3
 8007efe:	e010      	b.n	8007f22 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d101      	bne.n	8007f0a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007f06:	2300      	movs	r3, #0
 8007f08:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	689a      	ldr	r2, [r3, #8]
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	4013      	ands	r3, r2
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d196      	bne.n	8007e4e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3728      	adds	r7, #40	@ 0x28
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	20000000 	.word	0x20000000

08007f30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af02      	add	r7, sp, #8
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f7ff ff5b 	bl	8007e04 <SPI_WaitFifoStateUntilTimeout>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d007      	beq.n	8007f64 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f58:	f043 0220 	orr.w	r2, r3, #32
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007f60:	2303      	movs	r3, #3
 8007f62:	e027      	b.n	8007fb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	9300      	str	r3, [sp, #0]
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	2180      	movs	r1, #128	@ 0x80
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f7ff fec0 	bl	8007cf4 <SPI_WaitFlagStateUntilTimeout>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d007      	beq.n	8007f8a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f7e:	f043 0220 	orr.w	r2, r3, #32
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007f86:	2303      	movs	r3, #3
 8007f88:	e014      	b.n	8007fb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	9300      	str	r3, [sp, #0]
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	f7ff ff34 	bl	8007e04 <SPI_WaitFifoStateUntilTimeout>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d007      	beq.n	8007fb2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fa6:	f043 0220 	orr.w	r2, r3, #32
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	e000      	b.n	8007fb4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d101      	bne.n	8007fce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e049      	b.n	8008062 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d106      	bne.n	8007fe8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f841 	bl	800806a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2202      	movs	r2, #2
 8007fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	3304      	adds	r3, #4
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	4610      	mov	r0, r2
 8007ffc:	f000 f9e0 	bl	80083c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800806a:	b480      	push	{r7}
 800806c:	b083      	sub	sp, #12
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008072:	bf00      	nop
 8008074:	370c      	adds	r7, #12
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
	...

08008080 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800808e:	b2db      	uxtb	r3, r3
 8008090:	2b01      	cmp	r3, #1
 8008092:	d001      	beq.n	8008098 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e04f      	b.n	8008138 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2202      	movs	r2, #2
 800809c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68da      	ldr	r2, [r3, #12]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f042 0201 	orr.w	r2, r2, #1
 80080ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a23      	ldr	r2, [pc, #140]	@ (8008144 <HAL_TIM_Base_Start_IT+0xc4>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d01d      	beq.n	80080f6 <HAL_TIM_Base_Start_IT+0x76>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080c2:	d018      	beq.n	80080f6 <HAL_TIM_Base_Start_IT+0x76>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a1f      	ldr	r2, [pc, #124]	@ (8008148 <HAL_TIM_Base_Start_IT+0xc8>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d013      	beq.n	80080f6 <HAL_TIM_Base_Start_IT+0x76>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a1e      	ldr	r2, [pc, #120]	@ (800814c <HAL_TIM_Base_Start_IT+0xcc>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d00e      	beq.n	80080f6 <HAL_TIM_Base_Start_IT+0x76>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a1c      	ldr	r2, [pc, #112]	@ (8008150 <HAL_TIM_Base_Start_IT+0xd0>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d009      	beq.n	80080f6 <HAL_TIM_Base_Start_IT+0x76>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a1b      	ldr	r2, [pc, #108]	@ (8008154 <HAL_TIM_Base_Start_IT+0xd4>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d004      	beq.n	80080f6 <HAL_TIM_Base_Start_IT+0x76>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a19      	ldr	r2, [pc, #100]	@ (8008158 <HAL_TIM_Base_Start_IT+0xd8>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d115      	bne.n	8008122 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	689a      	ldr	r2, [r3, #8]
 80080fc:	4b17      	ldr	r3, [pc, #92]	@ (800815c <HAL_TIM_Base_Start_IT+0xdc>)
 80080fe:	4013      	ands	r3, r2
 8008100:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2b06      	cmp	r3, #6
 8008106:	d015      	beq.n	8008134 <HAL_TIM_Base_Start_IT+0xb4>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800810e:	d011      	beq.n	8008134 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f042 0201 	orr.w	r2, r2, #1
 800811e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008120:	e008      	b.n	8008134 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f042 0201 	orr.w	r2, r2, #1
 8008130:	601a      	str	r2, [r3, #0]
 8008132:	e000      	b.n	8008136 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008134:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3714      	adds	r7, #20
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr
 8008144:	40012c00 	.word	0x40012c00
 8008148:	40000400 	.word	0x40000400
 800814c:	40000800 	.word	0x40000800
 8008150:	40000c00 	.word	0x40000c00
 8008154:	40013400 	.word	0x40013400
 8008158:	40014000 	.word	0x40014000
 800815c:	00010007 	.word	0x00010007

08008160 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	f003 0302 	and.w	r3, r3, #2
 800817e:	2b00      	cmp	r3, #0
 8008180:	d020      	beq.n	80081c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f003 0302 	and.w	r3, r3, #2
 8008188:	2b00      	cmp	r3, #0
 800818a:	d01b      	beq.n	80081c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f06f 0202 	mvn.w	r2, #2
 8008194:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2201      	movs	r2, #1
 800819a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	699b      	ldr	r3, [r3, #24]
 80081a2:	f003 0303 	and.w	r3, r3, #3
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d003      	beq.n	80081b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f8e9 	bl	8008382 <HAL_TIM_IC_CaptureCallback>
 80081b0:	e005      	b.n	80081be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 f8db 	bl	800836e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 f8ec 	bl	8008396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	f003 0304 	and.w	r3, r3, #4
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d020      	beq.n	8008210 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f003 0304 	and.w	r3, r3, #4
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d01b      	beq.n	8008210 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f06f 0204 	mvn.w	r2, #4
 80081e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2202      	movs	r2, #2
 80081e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d003      	beq.n	80081fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f8c3 	bl	8008382 <HAL_TIM_IC_CaptureCallback>
 80081fc:	e005      	b.n	800820a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 f8b5 	bl	800836e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 f8c6 	bl	8008396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	f003 0308 	and.w	r3, r3, #8
 8008216:	2b00      	cmp	r3, #0
 8008218:	d020      	beq.n	800825c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f003 0308 	and.w	r3, r3, #8
 8008220:	2b00      	cmp	r3, #0
 8008222:	d01b      	beq.n	800825c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f06f 0208 	mvn.w	r2, #8
 800822c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2204      	movs	r2, #4
 8008232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	69db      	ldr	r3, [r3, #28]
 800823a:	f003 0303 	and.w	r3, r3, #3
 800823e:	2b00      	cmp	r3, #0
 8008240:	d003      	beq.n	800824a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f89d 	bl	8008382 <HAL_TIM_IC_CaptureCallback>
 8008248:	e005      	b.n	8008256 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f88f 	bl	800836e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 f8a0 	bl	8008396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	f003 0310 	and.w	r3, r3, #16
 8008262:	2b00      	cmp	r3, #0
 8008264:	d020      	beq.n	80082a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f003 0310 	and.w	r3, r3, #16
 800826c:	2b00      	cmp	r3, #0
 800826e:	d01b      	beq.n	80082a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f06f 0210 	mvn.w	r2, #16
 8008278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2208      	movs	r2, #8
 800827e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	69db      	ldr	r3, [r3, #28]
 8008286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800828a:	2b00      	cmp	r3, #0
 800828c:	d003      	beq.n	8008296 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f877 	bl	8008382 <HAL_TIM_IC_CaptureCallback>
 8008294:	e005      	b.n	80082a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 f869 	bl	800836e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 f87a 	bl	8008396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	f003 0301 	and.w	r3, r3, #1
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00c      	beq.n	80082cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f003 0301 	and.w	r3, r3, #1
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d007      	beq.n	80082cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f06f 0201 	mvn.w	r2, #1
 80082c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f7f9 fae6 	bl	8001898 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d104      	bne.n	80082e0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00c      	beq.n	80082fa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d007      	beq.n	80082fa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80082f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f913 	bl	8008520 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00c      	beq.n	800831e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800830a:	2b00      	cmp	r3, #0
 800830c:	d007      	beq.n	800831e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 f90b 	bl	8008534 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00c      	beq.n	8008342 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800832e:	2b00      	cmp	r3, #0
 8008330:	d007      	beq.n	8008342 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800833a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 f834 	bl	80083aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	f003 0320 	and.w	r3, r3, #32
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00c      	beq.n	8008366 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f003 0320 	and.w	r3, r3, #32
 8008352:	2b00      	cmp	r3, #0
 8008354:	d007      	beq.n	8008366 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f06f 0220 	mvn.w	r2, #32
 800835e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f8d3 	bl	800850c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008366:	bf00      	nop
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800836e:	b480      	push	{r7}
 8008370:	b083      	sub	sp, #12
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008376:	bf00      	nop
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008382:	b480      	push	{r7}
 8008384:	b083      	sub	sp, #12
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800838a:	bf00      	nop
 800838c:	370c      	adds	r7, #12
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr

08008396 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008396:	b480      	push	{r7}
 8008398:	b083      	sub	sp, #12
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800839e:	bf00      	nop
 80083a0:	370c      	adds	r7, #12
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b083      	sub	sp, #12
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083b2:	bf00      	nop
 80083b4:	370c      	adds	r7, #12
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
	...

080083c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a46      	ldr	r2, [pc, #280]	@ (80084ec <TIM_Base_SetConfig+0x12c>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d013      	beq.n	8008400 <TIM_Base_SetConfig+0x40>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083de:	d00f      	beq.n	8008400 <TIM_Base_SetConfig+0x40>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4a43      	ldr	r2, [pc, #268]	@ (80084f0 <TIM_Base_SetConfig+0x130>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d00b      	beq.n	8008400 <TIM_Base_SetConfig+0x40>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a42      	ldr	r2, [pc, #264]	@ (80084f4 <TIM_Base_SetConfig+0x134>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d007      	beq.n	8008400 <TIM_Base_SetConfig+0x40>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a41      	ldr	r2, [pc, #260]	@ (80084f8 <TIM_Base_SetConfig+0x138>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d003      	beq.n	8008400 <TIM_Base_SetConfig+0x40>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a40      	ldr	r2, [pc, #256]	@ (80084fc <TIM_Base_SetConfig+0x13c>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d108      	bne.n	8008412 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	4313      	orrs	r3, r2
 8008410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a35      	ldr	r2, [pc, #212]	@ (80084ec <TIM_Base_SetConfig+0x12c>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d01f      	beq.n	800845a <TIM_Base_SetConfig+0x9a>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008420:	d01b      	beq.n	800845a <TIM_Base_SetConfig+0x9a>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a32      	ldr	r2, [pc, #200]	@ (80084f0 <TIM_Base_SetConfig+0x130>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d017      	beq.n	800845a <TIM_Base_SetConfig+0x9a>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a31      	ldr	r2, [pc, #196]	@ (80084f4 <TIM_Base_SetConfig+0x134>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d013      	beq.n	800845a <TIM_Base_SetConfig+0x9a>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a30      	ldr	r2, [pc, #192]	@ (80084f8 <TIM_Base_SetConfig+0x138>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d00f      	beq.n	800845a <TIM_Base_SetConfig+0x9a>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a2f      	ldr	r2, [pc, #188]	@ (80084fc <TIM_Base_SetConfig+0x13c>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d00b      	beq.n	800845a <TIM_Base_SetConfig+0x9a>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a2e      	ldr	r2, [pc, #184]	@ (8008500 <TIM_Base_SetConfig+0x140>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d007      	beq.n	800845a <TIM_Base_SetConfig+0x9a>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a2d      	ldr	r2, [pc, #180]	@ (8008504 <TIM_Base_SetConfig+0x144>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d003      	beq.n	800845a <TIM_Base_SetConfig+0x9a>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a2c      	ldr	r2, [pc, #176]	@ (8008508 <TIM_Base_SetConfig+0x148>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d108      	bne.n	800846c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	4313      	orrs	r3, r2
 800846a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	695b      	ldr	r3, [r3, #20]
 8008476:	4313      	orrs	r3, r2
 8008478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	689a      	ldr	r2, [r3, #8]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a16      	ldr	r2, [pc, #88]	@ (80084ec <TIM_Base_SetConfig+0x12c>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d00f      	beq.n	80084b8 <TIM_Base_SetConfig+0xf8>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a18      	ldr	r2, [pc, #96]	@ (80084fc <TIM_Base_SetConfig+0x13c>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d00b      	beq.n	80084b8 <TIM_Base_SetConfig+0xf8>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a17      	ldr	r2, [pc, #92]	@ (8008500 <TIM_Base_SetConfig+0x140>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d007      	beq.n	80084b8 <TIM_Base_SetConfig+0xf8>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4a16      	ldr	r2, [pc, #88]	@ (8008504 <TIM_Base_SetConfig+0x144>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d003      	beq.n	80084b8 <TIM_Base_SetConfig+0xf8>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a15      	ldr	r2, [pc, #84]	@ (8008508 <TIM_Base_SetConfig+0x148>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d103      	bne.n	80084c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	691a      	ldr	r2, [r3, #16]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	f003 0301 	and.w	r3, r3, #1
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d105      	bne.n	80084de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	f023 0201 	bic.w	r2, r3, #1
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	611a      	str	r2, [r3, #16]
  }
}
 80084de:	bf00      	nop
 80084e0:	3714      	adds	r7, #20
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	40012c00 	.word	0x40012c00
 80084f0:	40000400 	.word	0x40000400
 80084f4:	40000800 	.word	0x40000800
 80084f8:	40000c00 	.word	0x40000c00
 80084fc:	40013400 	.word	0x40013400
 8008500:	40014000 	.word	0x40014000
 8008504:	40014400 	.word	0x40014400
 8008508:	40014800 	.word	0x40014800

0800850c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008514:	bf00      	nop
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800853c:	bf00      	nop
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d101      	bne.n	800855a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e040      	b.n	80085dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800855e:	2b00      	cmp	r3, #0
 8008560:	d106      	bne.n	8008570 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7f9 fd9e 	bl	80020ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2224      	movs	r2, #36	@ 0x24
 8008574:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f022 0201 	bic.w	r2, r2, #1
 8008584:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800858a:	2b00      	cmp	r3, #0
 800858c:	d002      	beq.n	8008594 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 fedc 	bl	800934c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 fc21 	bl	8008ddc <UART_SetConfig>
 800859a:	4603      	mov	r3, r0
 800859c:	2b01      	cmp	r3, #1
 800859e:	d101      	bne.n	80085a4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e01b      	b.n	80085dc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	685a      	ldr	r2, [r3, #4]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80085b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	689a      	ldr	r2, [r3, #8]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80085c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f042 0201 	orr.w	r2, r2, #1
 80085d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 ff5b 	bl	8009490 <UART_CheckIdleState>
 80085da:	4603      	mov	r3, r0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3708      	adds	r7, #8
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b08a      	sub	sp, #40	@ 0x28
 80085e8:	af02      	add	r7, sp, #8
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	603b      	str	r3, [r7, #0]
 80085f0:	4613      	mov	r3, r2
 80085f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085f8:	2b20      	cmp	r3, #32
 80085fa:	d177      	bne.n	80086ec <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d002      	beq.n	8008608 <HAL_UART_Transmit+0x24>
 8008602:	88fb      	ldrh	r3, [r7, #6]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d101      	bne.n	800860c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e070      	b.n	80086ee <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2200      	movs	r2, #0
 8008610:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2221      	movs	r2, #33	@ 0x21
 8008618:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800861a:	f7fa fb95 	bl	8002d48 <HAL_GetTick>
 800861e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	88fa      	ldrh	r2, [r7, #6]
 8008624:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	88fa      	ldrh	r2, [r7, #6]
 800862c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008638:	d108      	bne.n	800864c <HAL_UART_Transmit+0x68>
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	691b      	ldr	r3, [r3, #16]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d104      	bne.n	800864c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008642:	2300      	movs	r3, #0
 8008644:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	61bb      	str	r3, [r7, #24]
 800864a:	e003      	b.n	8008654 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008650:	2300      	movs	r3, #0
 8008652:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008654:	e02f      	b.n	80086b6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	2200      	movs	r2, #0
 800865e:	2180      	movs	r1, #128	@ 0x80
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f000 ffbd 	bl	80095e0 <UART_WaitOnFlagUntilTimeout>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d004      	beq.n	8008676 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2220      	movs	r2, #32
 8008670:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008672:	2303      	movs	r3, #3
 8008674:	e03b      	b.n	80086ee <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10b      	bne.n	8008694 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	881a      	ldrh	r2, [r3, #0]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008688:	b292      	uxth	r2, r2
 800868a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	3302      	adds	r3, #2
 8008690:	61bb      	str	r3, [r7, #24]
 8008692:	e007      	b.n	80086a4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	781a      	ldrb	r2, [r3, #0]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	3301      	adds	r3, #1
 80086a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	3b01      	subs	r3, #1
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80086bc:	b29b      	uxth	r3, r3
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1c9      	bne.n	8008656 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	9300      	str	r3, [sp, #0]
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	2200      	movs	r2, #0
 80086ca:	2140      	movs	r1, #64	@ 0x40
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f000 ff87 	bl	80095e0 <UART_WaitOnFlagUntilTimeout>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d004      	beq.n	80086e2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2220      	movs	r2, #32
 80086dc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80086de:	2303      	movs	r3, #3
 80086e0:	e005      	b.n	80086ee <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2220      	movs	r2, #32
 80086e6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80086e8:	2300      	movs	r3, #0
 80086ea:	e000      	b.n	80086ee <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80086ec:	2302      	movs	r3, #2
  }
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3720      	adds	r7, #32
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
	...

080086f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b08a      	sub	sp, #40	@ 0x28
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	4613      	mov	r3, r2
 8008704:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800870c:	2b20      	cmp	r3, #32
 800870e:	d137      	bne.n	8008780 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d002      	beq.n	800871c <HAL_UART_Receive_IT+0x24>
 8008716:	88fb      	ldrh	r3, [r7, #6]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d101      	bne.n	8008720 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	e030      	b.n	8008782 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2200      	movs	r2, #0
 8008724:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a18      	ldr	r2, [pc, #96]	@ (800878c <HAL_UART_Receive_IT+0x94>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d01f      	beq.n	8008770 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800873a:	2b00      	cmp	r3, #0
 800873c:	d018      	beq.n	8008770 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	e853 3f00 	ldrex	r3, [r3]
 800874a:	613b      	str	r3, [r7, #16]
   return(result);
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008752:	627b      	str	r3, [r7, #36]	@ 0x24
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	461a      	mov	r2, r3
 800875a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800875c:	623b      	str	r3, [r7, #32]
 800875e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008760:	69f9      	ldr	r1, [r7, #28]
 8008762:	6a3a      	ldr	r2, [r7, #32]
 8008764:	e841 2300 	strex	r3, r2, [r1]
 8008768:	61bb      	str	r3, [r7, #24]
   return(result);
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1e6      	bne.n	800873e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008770:	88fb      	ldrh	r3, [r7, #6]
 8008772:	461a      	mov	r2, r3
 8008774:	68b9      	ldr	r1, [r7, #8]
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f000 ffa0 	bl	80096bc <UART_Start_Receive_IT>
 800877c:	4603      	mov	r3, r0
 800877e:	e000      	b.n	8008782 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008780:	2302      	movs	r3, #2
  }
}
 8008782:	4618      	mov	r0, r3
 8008784:	3728      	adds	r7, #40	@ 0x28
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	40008000 	.word	0x40008000

08008790 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b0ba      	sub	sp, #232	@ 0xe8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	69db      	ldr	r3, [r3, #28]
 800879e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80087b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80087ba:	f640 030f 	movw	r3, #2063	@ 0x80f
 80087be:	4013      	ands	r3, r2
 80087c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80087c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d115      	bne.n	80087f8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80087cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087d0:	f003 0320 	and.w	r3, r3, #32
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d00f      	beq.n	80087f8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80087d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087dc:	f003 0320 	and.w	r3, r3, #32
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d009      	beq.n	80087f8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	f000 82ca 	beq.w	8008d82 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	4798      	blx	r3
      }
      return;
 80087f6:	e2c4      	b.n	8008d82 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80087f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f000 8117 	beq.w	8008a30 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008802:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008806:	f003 0301 	and.w	r3, r3, #1
 800880a:	2b00      	cmp	r3, #0
 800880c:	d106      	bne.n	800881c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800880e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008812:	4b85      	ldr	r3, [pc, #532]	@ (8008a28 <HAL_UART_IRQHandler+0x298>)
 8008814:	4013      	ands	r3, r2
 8008816:	2b00      	cmp	r3, #0
 8008818:	f000 810a 	beq.w	8008a30 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800881c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008820:	f003 0301 	and.w	r3, r3, #1
 8008824:	2b00      	cmp	r3, #0
 8008826:	d011      	beq.n	800884c <HAL_UART_IRQHandler+0xbc>
 8008828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800882c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00b      	beq.n	800884c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2201      	movs	r2, #1
 800883a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008842:	f043 0201 	orr.w	r2, r3, #1
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800884c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008850:	f003 0302 	and.w	r3, r3, #2
 8008854:	2b00      	cmp	r3, #0
 8008856:	d011      	beq.n	800887c <HAL_UART_IRQHandler+0xec>
 8008858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800885c:	f003 0301 	and.w	r3, r3, #1
 8008860:	2b00      	cmp	r3, #0
 8008862:	d00b      	beq.n	800887c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2202      	movs	r2, #2
 800886a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008872:	f043 0204 	orr.w	r2, r3, #4
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800887c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008880:	f003 0304 	and.w	r3, r3, #4
 8008884:	2b00      	cmp	r3, #0
 8008886:	d011      	beq.n	80088ac <HAL_UART_IRQHandler+0x11c>
 8008888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800888c:	f003 0301 	and.w	r3, r3, #1
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00b      	beq.n	80088ac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2204      	movs	r2, #4
 800889a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088a2:	f043 0202 	orr.w	r2, r3, #2
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80088ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088b0:	f003 0308 	and.w	r3, r3, #8
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d017      	beq.n	80088e8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80088b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088bc:	f003 0320 	and.w	r3, r3, #32
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d105      	bne.n	80088d0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80088c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088c8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d00b      	beq.n	80088e8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2208      	movs	r2, #8
 80088d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088de:	f043 0208 	orr.w	r2, r3, #8
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80088e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d012      	beq.n	800891a <HAL_UART_IRQHandler+0x18a>
 80088f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00c      	beq.n	800891a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008908:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008910:	f043 0220 	orr.w	r2, r3, #32
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008920:	2b00      	cmp	r3, #0
 8008922:	f000 8230 	beq.w	8008d86 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800892a:	f003 0320 	and.w	r3, r3, #32
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00d      	beq.n	800894e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008936:	f003 0320 	and.w	r3, r3, #32
 800893a:	2b00      	cmp	r3, #0
 800893c:	d007      	beq.n	800894e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008942:	2b00      	cmp	r3, #0
 8008944:	d003      	beq.n	800894e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008954:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008962:	2b40      	cmp	r3, #64	@ 0x40
 8008964:	d005      	beq.n	8008972 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800896a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800896e:	2b00      	cmp	r3, #0
 8008970:	d04f      	beq.n	8008a12 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 ff68 	bl	8009848 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008982:	2b40      	cmp	r3, #64	@ 0x40
 8008984:	d141      	bne.n	8008a0a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	3308      	adds	r3, #8
 800898c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008990:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008994:	e853 3f00 	ldrex	r3, [r3]
 8008998:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800899c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80089a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3308      	adds	r3, #8
 80089ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80089b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80089b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80089be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80089c2:	e841 2300 	strex	r3, r2, [r1]
 80089c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80089ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1d9      	bne.n	8008986 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d013      	beq.n	8008a02 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089de:	4a13      	ldr	r2, [pc, #76]	@ (8008a2c <HAL_UART_IRQHandler+0x29c>)
 80089e0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7fa fbf2 	bl	80031d0 <HAL_DMA_Abort_IT>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d017      	beq.n	8008a22 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80089fc:	4610      	mov	r0, r2
 80089fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a00:	e00f      	b.n	8008a22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f9d4 	bl	8008db0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a08:	e00b      	b.n	8008a22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f9d0 	bl	8008db0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a10:	e007      	b.n	8008a22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f9cc 	bl	8008db0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008a20:	e1b1      	b.n	8008d86 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a22:	bf00      	nop
    return;
 8008a24:	e1af      	b.n	8008d86 <HAL_UART_IRQHandler+0x5f6>
 8008a26:	bf00      	nop
 8008a28:	04000120 	.word	0x04000120
 8008a2c:	08009911 	.word	0x08009911

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	f040 816a 	bne.w	8008d0e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a3e:	f003 0310 	and.w	r3, r3, #16
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f000 8163 	beq.w	8008d0e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a4c:	f003 0310 	and.w	r3, r3, #16
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f000 815c 	beq.w	8008d0e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2210      	movs	r2, #16
 8008a5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a68:	2b40      	cmp	r3, #64	@ 0x40
 8008a6a:	f040 80d4 	bne.w	8008c16 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a7a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f000 80ad 	beq.w	8008bde <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008a8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	f080 80a5 	bcs.w	8008bde <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a9a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f003 0320 	and.w	r3, r3, #32
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	f040 8086 	bne.w	8008bbc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008abc:	e853 3f00 	ldrex	r3, [r3]
 8008ac0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008ac4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008ac8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008acc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008ada:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ade:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008ae6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008aea:	e841 2300 	strex	r3, r2, [r1]
 8008aee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1da      	bne.n	8008ab0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	3308      	adds	r3, #8
 8008b00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008b04:	e853 3f00 	ldrex	r3, [r3]
 8008b08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008b0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b0c:	f023 0301 	bic.w	r3, r3, #1
 8008b10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	3308      	adds	r3, #8
 8008b1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008b1e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008b22:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008b26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008b2a:	e841 2300 	strex	r3, r2, [r1]
 8008b2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008b30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1e1      	bne.n	8008afa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	3308      	adds	r3, #8
 8008b3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b40:	e853 3f00 	ldrex	r3, [r3]
 8008b44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008b46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	3308      	adds	r3, #8
 8008b56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008b5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008b5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008b60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008b62:	e841 2300 	strex	r3, r2, [r1]
 8008b66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008b68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1e3      	bne.n	8008b36 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2220      	movs	r2, #32
 8008b72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b84:	e853 3f00 	ldrex	r3, [r3]
 8008b88:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b8c:	f023 0310 	bic.w	r3, r3, #16
 8008b90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	461a      	mov	r2, r3
 8008b9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b9e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ba0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008ba4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008ba6:	e841 2300 	strex	r3, r2, [r1]
 8008baa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008bac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1e4      	bne.n	8008b7c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7fa facc 	bl	8003154 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2202      	movs	r2, #2
 8008bc0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 f8f4 	bl	8008dc4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008bdc:	e0d5      	b.n	8008d8a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008be4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008be8:	429a      	cmp	r2, r3
 8008bea:	f040 80ce 	bne.w	8008d8a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f003 0320 	and.w	r3, r3, #32
 8008bfa:	2b20      	cmp	r3, #32
 8008bfc:	f040 80c5 	bne.w	8008d8a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2202      	movs	r2, #2
 8008c04:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f8d8 	bl	8008dc4 <HAL_UARTEx_RxEventCallback>
      return;
 8008c14:	e0b9      	b.n	8008d8a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	1ad3      	subs	r3, r2, r3
 8008c26:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	f000 80ab 	beq.w	8008d8e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8008c38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f000 80a6 	beq.w	8008d8e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c4a:	e853 3f00 	ldrex	r3, [r3]
 8008c4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c64:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c6c:	e841 2300 	strex	r3, r2, [r1]
 8008c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d1e4      	bne.n	8008c42 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	3308      	adds	r3, #8
 8008c7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c82:	e853 3f00 	ldrex	r3, [r3]
 8008c86:	623b      	str	r3, [r7, #32]
   return(result);
 8008c88:	6a3b      	ldr	r3, [r7, #32]
 8008c8a:	f023 0301 	bic.w	r3, r3, #1
 8008c8e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	3308      	adds	r3, #8
 8008c98:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008c9c:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ca2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ca4:	e841 2300 	strex	r3, r2, [r1]
 8008ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d1e3      	bne.n	8008c78 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2220      	movs	r2, #32
 8008cb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	e853 3f00 	ldrex	r3, [r3]
 8008cd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f023 0310 	bic.w	r3, r3, #16
 8008cd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008ce6:	61fb      	str	r3, [r7, #28]
 8008ce8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cea:	69b9      	ldr	r1, [r7, #24]
 8008cec:	69fa      	ldr	r2, [r7, #28]
 8008cee:	e841 2300 	strex	r3, r2, [r1]
 8008cf2:	617b      	str	r3, [r7, #20]
   return(result);
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1e4      	bne.n	8008cc4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2202      	movs	r2, #2
 8008cfe:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008d00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008d04:	4619      	mov	r1, r3
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 f85c 	bl	8008dc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008d0c:	e03f      	b.n	8008d8e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d00e      	beq.n	8008d38 <HAL_UART_IRQHandler+0x5a8>
 8008d1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d008      	beq.n	8008d38 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008d2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 ffe9 	bl	8009d08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d36:	e02d      	b.n	8008d94 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00e      	beq.n	8008d62 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d008      	beq.n	8008d62 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d01c      	beq.n	8008d92 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	4798      	blx	r3
    }
    return;
 8008d60:	e017      	b.n	8008d92 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d012      	beq.n	8008d94 <HAL_UART_IRQHandler+0x604>
 8008d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00c      	beq.n	8008d94 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 fdde 	bl	800993c <UART_EndTransmit_IT>
    return;
 8008d80:	e008      	b.n	8008d94 <HAL_UART_IRQHandler+0x604>
      return;
 8008d82:	bf00      	nop
 8008d84:	e006      	b.n	8008d94 <HAL_UART_IRQHandler+0x604>
    return;
 8008d86:	bf00      	nop
 8008d88:	e004      	b.n	8008d94 <HAL_UART_IRQHandler+0x604>
      return;
 8008d8a:	bf00      	nop
 8008d8c:	e002      	b.n	8008d94 <HAL_UART_IRQHandler+0x604>
      return;
 8008d8e:	bf00      	nop
 8008d90:	e000      	b.n	8008d94 <HAL_UART_IRQHandler+0x604>
    return;
 8008d92:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008d94:	37e8      	adds	r7, #232	@ 0xe8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop

08008d9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008da4:	bf00      	nop
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008db8:	bf00      	nop
 8008dba:	370c      	adds	r7, #12
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	460b      	mov	r3, r1
 8008dce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008dd0:	bf00      	nop
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008de0:	b08a      	sub	sp, #40	@ 0x28
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008de6:	2300      	movs	r3, #0
 8008de8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	689a      	ldr	r2, [r3, #8]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	431a      	orrs	r2, r3
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	695b      	ldr	r3, [r3, #20]
 8008dfa:	431a      	orrs	r2, r3
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	69db      	ldr	r3, [r3, #28]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	4ba4      	ldr	r3, [pc, #656]	@ (800909c <UART_SetConfig+0x2c0>)
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	68fa      	ldr	r2, [r7, #12]
 8008e10:	6812      	ldr	r2, [r2, #0]
 8008e12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008e14:	430b      	orrs	r3, r1
 8008e16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	68da      	ldr	r2, [r3, #12]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	430a      	orrs	r2, r1
 8008e2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	699b      	ldr	r3, [r3, #24]
 8008e32:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a99      	ldr	r2, [pc, #612]	@ (80090a0 <UART_SetConfig+0x2c4>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d004      	beq.n	8008e48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6a1b      	ldr	r3, [r3, #32]
 8008e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e44:	4313      	orrs	r3, r2
 8008e46:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e58:	430a      	orrs	r2, r1
 8008e5a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a90      	ldr	r2, [pc, #576]	@ (80090a4 <UART_SetConfig+0x2c8>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d126      	bne.n	8008eb4 <UART_SetConfig+0xd8>
 8008e66:	4b90      	ldr	r3, [pc, #576]	@ (80090a8 <UART_SetConfig+0x2cc>)
 8008e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e6c:	f003 0303 	and.w	r3, r3, #3
 8008e70:	2b03      	cmp	r3, #3
 8008e72:	d81b      	bhi.n	8008eac <UART_SetConfig+0xd0>
 8008e74:	a201      	add	r2, pc, #4	@ (adr r2, 8008e7c <UART_SetConfig+0xa0>)
 8008e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e7a:	bf00      	nop
 8008e7c:	08008e8d 	.word	0x08008e8d
 8008e80:	08008e9d 	.word	0x08008e9d
 8008e84:	08008e95 	.word	0x08008e95
 8008e88:	08008ea5 	.word	0x08008ea5
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e92:	e116      	b.n	80090c2 <UART_SetConfig+0x2e6>
 8008e94:	2302      	movs	r3, #2
 8008e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e9a:	e112      	b.n	80090c2 <UART_SetConfig+0x2e6>
 8008e9c:	2304      	movs	r3, #4
 8008e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ea2:	e10e      	b.n	80090c2 <UART_SetConfig+0x2e6>
 8008ea4:	2308      	movs	r3, #8
 8008ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008eaa:	e10a      	b.n	80090c2 <UART_SetConfig+0x2e6>
 8008eac:	2310      	movs	r3, #16
 8008eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008eb2:	e106      	b.n	80090c2 <UART_SetConfig+0x2e6>
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a7c      	ldr	r2, [pc, #496]	@ (80090ac <UART_SetConfig+0x2d0>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d138      	bne.n	8008f30 <UART_SetConfig+0x154>
 8008ebe:	4b7a      	ldr	r3, [pc, #488]	@ (80090a8 <UART_SetConfig+0x2cc>)
 8008ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ec4:	f003 030c 	and.w	r3, r3, #12
 8008ec8:	2b0c      	cmp	r3, #12
 8008eca:	d82d      	bhi.n	8008f28 <UART_SetConfig+0x14c>
 8008ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8008ed4 <UART_SetConfig+0xf8>)
 8008ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed2:	bf00      	nop
 8008ed4:	08008f09 	.word	0x08008f09
 8008ed8:	08008f29 	.word	0x08008f29
 8008edc:	08008f29 	.word	0x08008f29
 8008ee0:	08008f29 	.word	0x08008f29
 8008ee4:	08008f19 	.word	0x08008f19
 8008ee8:	08008f29 	.word	0x08008f29
 8008eec:	08008f29 	.word	0x08008f29
 8008ef0:	08008f29 	.word	0x08008f29
 8008ef4:	08008f11 	.word	0x08008f11
 8008ef8:	08008f29 	.word	0x08008f29
 8008efc:	08008f29 	.word	0x08008f29
 8008f00:	08008f29 	.word	0x08008f29
 8008f04:	08008f21 	.word	0x08008f21
 8008f08:	2300      	movs	r3, #0
 8008f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f0e:	e0d8      	b.n	80090c2 <UART_SetConfig+0x2e6>
 8008f10:	2302      	movs	r3, #2
 8008f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f16:	e0d4      	b.n	80090c2 <UART_SetConfig+0x2e6>
 8008f18:	2304      	movs	r3, #4
 8008f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f1e:	e0d0      	b.n	80090c2 <UART_SetConfig+0x2e6>
 8008f20:	2308      	movs	r3, #8
 8008f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f26:	e0cc      	b.n	80090c2 <UART_SetConfig+0x2e6>
 8008f28:	2310      	movs	r3, #16
 8008f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f2e:	e0c8      	b.n	80090c2 <UART_SetConfig+0x2e6>
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a5e      	ldr	r2, [pc, #376]	@ (80090b0 <UART_SetConfig+0x2d4>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d125      	bne.n	8008f86 <UART_SetConfig+0x1aa>
 8008f3a:	4b5b      	ldr	r3, [pc, #364]	@ (80090a8 <UART_SetConfig+0x2cc>)
 8008f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f40:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008f44:	2b30      	cmp	r3, #48	@ 0x30
 8008f46:	d016      	beq.n	8008f76 <UART_SetConfig+0x19a>
 8008f48:	2b30      	cmp	r3, #48	@ 0x30
 8008f4a:	d818      	bhi.n	8008f7e <UART_SetConfig+0x1a2>
 8008f4c:	2b20      	cmp	r3, #32
 8008f4e:	d00a      	beq.n	8008f66 <UART_SetConfig+0x18a>
 8008f50:	2b20      	cmp	r3, #32
 8008f52:	d814      	bhi.n	8008f7e <UART_SetConfig+0x1a2>
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d002      	beq.n	8008f5e <UART_SetConfig+0x182>
 8008f58:	2b10      	cmp	r3, #16
 8008f5a:	d008      	beq.n	8008f6e <UART_SetConfig+0x192>
 8008f5c:	e00f      	b.n	8008f7e <UART_SetConfig+0x1a2>
 8008f5e:	2300      	movs	r3, #0
 8008f60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f64:	e0ad      	b.n	80090c2 <UART_SetConfig+0x2e6>
 8008f66:	2302      	movs	r3, #2
 8008f68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f6c:	e0a9      	b.n	80090c2 <UART_SetConfig+0x2e6>
 8008f6e:	2304      	movs	r3, #4
 8008f70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f74:	e0a5      	b.n	80090c2 <UART_SetConfig+0x2e6>
 8008f76:	2308      	movs	r3, #8
 8008f78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f7c:	e0a1      	b.n	80090c2 <UART_SetConfig+0x2e6>
 8008f7e:	2310      	movs	r3, #16
 8008f80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f84:	e09d      	b.n	80090c2 <UART_SetConfig+0x2e6>
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a4a      	ldr	r2, [pc, #296]	@ (80090b4 <UART_SetConfig+0x2d8>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d125      	bne.n	8008fdc <UART_SetConfig+0x200>
 8008f90:	4b45      	ldr	r3, [pc, #276]	@ (80090a8 <UART_SetConfig+0x2cc>)
 8008f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f96:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008f9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f9c:	d016      	beq.n	8008fcc <UART_SetConfig+0x1f0>
 8008f9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008fa0:	d818      	bhi.n	8008fd4 <UART_SetConfig+0x1f8>
 8008fa2:	2b80      	cmp	r3, #128	@ 0x80
 8008fa4:	d00a      	beq.n	8008fbc <UART_SetConfig+0x1e0>
 8008fa6:	2b80      	cmp	r3, #128	@ 0x80
 8008fa8:	d814      	bhi.n	8008fd4 <UART_SetConfig+0x1f8>
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d002      	beq.n	8008fb4 <UART_SetConfig+0x1d8>
 8008fae:	2b40      	cmp	r3, #64	@ 0x40
 8008fb0:	d008      	beq.n	8008fc4 <UART_SetConfig+0x1e8>
 8008fb2:	e00f      	b.n	8008fd4 <UART_SetConfig+0x1f8>
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008fba:	e082      	b.n	80090c2 <UART_SetConfig+0x2e6>
 8008fbc:	2302      	movs	r3, #2
 8008fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008fc2:	e07e      	b.n	80090c2 <UART_SetConfig+0x2e6>
 8008fc4:	2304      	movs	r3, #4
 8008fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008fca:	e07a      	b.n	80090c2 <UART_SetConfig+0x2e6>
 8008fcc:	2308      	movs	r3, #8
 8008fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008fd2:	e076      	b.n	80090c2 <UART_SetConfig+0x2e6>
 8008fd4:	2310      	movs	r3, #16
 8008fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008fda:	e072      	b.n	80090c2 <UART_SetConfig+0x2e6>
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a35      	ldr	r2, [pc, #212]	@ (80090b8 <UART_SetConfig+0x2dc>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d12a      	bne.n	800903c <UART_SetConfig+0x260>
 8008fe6:	4b30      	ldr	r3, [pc, #192]	@ (80090a8 <UART_SetConfig+0x2cc>)
 8008fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ff0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ff4:	d01a      	beq.n	800902c <UART_SetConfig+0x250>
 8008ff6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ffa:	d81b      	bhi.n	8009034 <UART_SetConfig+0x258>
 8008ffc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009000:	d00c      	beq.n	800901c <UART_SetConfig+0x240>
 8009002:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009006:	d815      	bhi.n	8009034 <UART_SetConfig+0x258>
 8009008:	2b00      	cmp	r3, #0
 800900a:	d003      	beq.n	8009014 <UART_SetConfig+0x238>
 800900c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009010:	d008      	beq.n	8009024 <UART_SetConfig+0x248>
 8009012:	e00f      	b.n	8009034 <UART_SetConfig+0x258>
 8009014:	2300      	movs	r3, #0
 8009016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800901a:	e052      	b.n	80090c2 <UART_SetConfig+0x2e6>
 800901c:	2302      	movs	r3, #2
 800901e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009022:	e04e      	b.n	80090c2 <UART_SetConfig+0x2e6>
 8009024:	2304      	movs	r3, #4
 8009026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800902a:	e04a      	b.n	80090c2 <UART_SetConfig+0x2e6>
 800902c:	2308      	movs	r3, #8
 800902e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009032:	e046      	b.n	80090c2 <UART_SetConfig+0x2e6>
 8009034:	2310      	movs	r3, #16
 8009036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800903a:	e042      	b.n	80090c2 <UART_SetConfig+0x2e6>
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a17      	ldr	r2, [pc, #92]	@ (80090a0 <UART_SetConfig+0x2c4>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d13a      	bne.n	80090bc <UART_SetConfig+0x2e0>
 8009046:	4b18      	ldr	r3, [pc, #96]	@ (80090a8 <UART_SetConfig+0x2cc>)
 8009048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800904c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009050:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009054:	d01a      	beq.n	800908c <UART_SetConfig+0x2b0>
 8009056:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800905a:	d81b      	bhi.n	8009094 <UART_SetConfig+0x2b8>
 800905c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009060:	d00c      	beq.n	800907c <UART_SetConfig+0x2a0>
 8009062:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009066:	d815      	bhi.n	8009094 <UART_SetConfig+0x2b8>
 8009068:	2b00      	cmp	r3, #0
 800906a:	d003      	beq.n	8009074 <UART_SetConfig+0x298>
 800906c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009070:	d008      	beq.n	8009084 <UART_SetConfig+0x2a8>
 8009072:	e00f      	b.n	8009094 <UART_SetConfig+0x2b8>
 8009074:	2300      	movs	r3, #0
 8009076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800907a:	e022      	b.n	80090c2 <UART_SetConfig+0x2e6>
 800907c:	2302      	movs	r3, #2
 800907e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009082:	e01e      	b.n	80090c2 <UART_SetConfig+0x2e6>
 8009084:	2304      	movs	r3, #4
 8009086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800908a:	e01a      	b.n	80090c2 <UART_SetConfig+0x2e6>
 800908c:	2308      	movs	r3, #8
 800908e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009092:	e016      	b.n	80090c2 <UART_SetConfig+0x2e6>
 8009094:	2310      	movs	r3, #16
 8009096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800909a:	e012      	b.n	80090c2 <UART_SetConfig+0x2e6>
 800909c:	efff69f3 	.word	0xefff69f3
 80090a0:	40008000 	.word	0x40008000
 80090a4:	40013800 	.word	0x40013800
 80090a8:	40021000 	.word	0x40021000
 80090ac:	40004400 	.word	0x40004400
 80090b0:	40004800 	.word	0x40004800
 80090b4:	40004c00 	.word	0x40004c00
 80090b8:	40005000 	.word	0x40005000
 80090bc:	2310      	movs	r3, #16
 80090be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a9f      	ldr	r2, [pc, #636]	@ (8009344 <UART_SetConfig+0x568>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d17a      	bne.n	80091c2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80090cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80090d0:	2b08      	cmp	r3, #8
 80090d2:	d824      	bhi.n	800911e <UART_SetConfig+0x342>
 80090d4:	a201      	add	r2, pc, #4	@ (adr r2, 80090dc <UART_SetConfig+0x300>)
 80090d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090da:	bf00      	nop
 80090dc:	08009101 	.word	0x08009101
 80090e0:	0800911f 	.word	0x0800911f
 80090e4:	08009109 	.word	0x08009109
 80090e8:	0800911f 	.word	0x0800911f
 80090ec:	0800910f 	.word	0x0800910f
 80090f0:	0800911f 	.word	0x0800911f
 80090f4:	0800911f 	.word	0x0800911f
 80090f8:	0800911f 	.word	0x0800911f
 80090fc:	08009117 	.word	0x08009117
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009100:	f7fb ff5e 	bl	8004fc0 <HAL_RCC_GetPCLK1Freq>
 8009104:	61f8      	str	r0, [r7, #28]
        break;
 8009106:	e010      	b.n	800912a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009108:	4b8f      	ldr	r3, [pc, #572]	@ (8009348 <UART_SetConfig+0x56c>)
 800910a:	61fb      	str	r3, [r7, #28]
        break;
 800910c:	e00d      	b.n	800912a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800910e:	f7fb febf 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 8009112:	61f8      	str	r0, [r7, #28]
        break;
 8009114:	e009      	b.n	800912a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009116:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800911a:	61fb      	str	r3, [r7, #28]
        break;
 800911c:	e005      	b.n	800912a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800911e:	2300      	movs	r3, #0
 8009120:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009128:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	2b00      	cmp	r3, #0
 800912e:	f000 80fb 	beq.w	8009328 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	685a      	ldr	r2, [r3, #4]
 8009136:	4613      	mov	r3, r2
 8009138:	005b      	lsls	r3, r3, #1
 800913a:	4413      	add	r3, r2
 800913c:	69fa      	ldr	r2, [r7, #28]
 800913e:	429a      	cmp	r2, r3
 8009140:	d305      	bcc.n	800914e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009148:	69fa      	ldr	r2, [r7, #28]
 800914a:	429a      	cmp	r2, r3
 800914c:	d903      	bls.n	8009156 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009154:	e0e8      	b.n	8009328 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	2200      	movs	r2, #0
 800915a:	461c      	mov	r4, r3
 800915c:	4615      	mov	r5, r2
 800915e:	f04f 0200 	mov.w	r2, #0
 8009162:	f04f 0300 	mov.w	r3, #0
 8009166:	022b      	lsls	r3, r5, #8
 8009168:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800916c:	0222      	lsls	r2, r4, #8
 800916e:	68f9      	ldr	r1, [r7, #12]
 8009170:	6849      	ldr	r1, [r1, #4]
 8009172:	0849      	lsrs	r1, r1, #1
 8009174:	2000      	movs	r0, #0
 8009176:	4688      	mov	r8, r1
 8009178:	4681      	mov	r9, r0
 800917a:	eb12 0a08 	adds.w	sl, r2, r8
 800917e:	eb43 0b09 	adc.w	fp, r3, r9
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	603b      	str	r3, [r7, #0]
 800918a:	607a      	str	r2, [r7, #4]
 800918c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009190:	4650      	mov	r0, sl
 8009192:	4659      	mov	r1, fp
 8009194:	f7f7 fd78 	bl	8000c88 <__aeabi_uldivmod>
 8009198:	4602      	mov	r2, r0
 800919a:	460b      	mov	r3, r1
 800919c:	4613      	mov	r3, r2
 800919e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80091a0:	69bb      	ldr	r3, [r7, #24]
 80091a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80091a6:	d308      	bcc.n	80091ba <UART_SetConfig+0x3de>
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80091ae:	d204      	bcs.n	80091ba <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	69ba      	ldr	r2, [r7, #24]
 80091b6:	60da      	str	r2, [r3, #12]
 80091b8:	e0b6      	b.n	8009328 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80091c0:	e0b2      	b.n	8009328 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	69db      	ldr	r3, [r3, #28]
 80091c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80091ca:	d15e      	bne.n	800928a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80091cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80091d0:	2b08      	cmp	r3, #8
 80091d2:	d828      	bhi.n	8009226 <UART_SetConfig+0x44a>
 80091d4:	a201      	add	r2, pc, #4	@ (adr r2, 80091dc <UART_SetConfig+0x400>)
 80091d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091da:	bf00      	nop
 80091dc:	08009201 	.word	0x08009201
 80091e0:	08009209 	.word	0x08009209
 80091e4:	08009211 	.word	0x08009211
 80091e8:	08009227 	.word	0x08009227
 80091ec:	08009217 	.word	0x08009217
 80091f0:	08009227 	.word	0x08009227
 80091f4:	08009227 	.word	0x08009227
 80091f8:	08009227 	.word	0x08009227
 80091fc:	0800921f 	.word	0x0800921f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009200:	f7fb fede 	bl	8004fc0 <HAL_RCC_GetPCLK1Freq>
 8009204:	61f8      	str	r0, [r7, #28]
        break;
 8009206:	e014      	b.n	8009232 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009208:	f7fb fef0 	bl	8004fec <HAL_RCC_GetPCLK2Freq>
 800920c:	61f8      	str	r0, [r7, #28]
        break;
 800920e:	e010      	b.n	8009232 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009210:	4b4d      	ldr	r3, [pc, #308]	@ (8009348 <UART_SetConfig+0x56c>)
 8009212:	61fb      	str	r3, [r7, #28]
        break;
 8009214:	e00d      	b.n	8009232 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009216:	f7fb fe3b 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 800921a:	61f8      	str	r0, [r7, #28]
        break;
 800921c:	e009      	b.n	8009232 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800921e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009222:	61fb      	str	r3, [r7, #28]
        break;
 8009224:	e005      	b.n	8009232 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8009226:	2300      	movs	r3, #0
 8009228:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009230:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d077      	beq.n	8009328 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	005a      	lsls	r2, r3, #1
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	085b      	lsrs	r3, r3, #1
 8009242:	441a      	add	r2, r3
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	fbb2 f3f3 	udiv	r3, r2, r3
 800924c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	2b0f      	cmp	r3, #15
 8009252:	d916      	bls.n	8009282 <UART_SetConfig+0x4a6>
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800925a:	d212      	bcs.n	8009282 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	b29b      	uxth	r3, r3
 8009260:	f023 030f 	bic.w	r3, r3, #15
 8009264:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	085b      	lsrs	r3, r3, #1
 800926a:	b29b      	uxth	r3, r3
 800926c:	f003 0307 	and.w	r3, r3, #7
 8009270:	b29a      	uxth	r2, r3
 8009272:	8afb      	ldrh	r3, [r7, #22]
 8009274:	4313      	orrs	r3, r2
 8009276:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	8afa      	ldrh	r2, [r7, #22]
 800927e:	60da      	str	r2, [r3, #12]
 8009280:	e052      	b.n	8009328 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009288:	e04e      	b.n	8009328 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800928a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800928e:	2b08      	cmp	r3, #8
 8009290:	d827      	bhi.n	80092e2 <UART_SetConfig+0x506>
 8009292:	a201      	add	r2, pc, #4	@ (adr r2, 8009298 <UART_SetConfig+0x4bc>)
 8009294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009298:	080092bd 	.word	0x080092bd
 800929c:	080092c5 	.word	0x080092c5
 80092a0:	080092cd 	.word	0x080092cd
 80092a4:	080092e3 	.word	0x080092e3
 80092a8:	080092d3 	.word	0x080092d3
 80092ac:	080092e3 	.word	0x080092e3
 80092b0:	080092e3 	.word	0x080092e3
 80092b4:	080092e3 	.word	0x080092e3
 80092b8:	080092db 	.word	0x080092db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092bc:	f7fb fe80 	bl	8004fc0 <HAL_RCC_GetPCLK1Freq>
 80092c0:	61f8      	str	r0, [r7, #28]
        break;
 80092c2:	e014      	b.n	80092ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092c4:	f7fb fe92 	bl	8004fec <HAL_RCC_GetPCLK2Freq>
 80092c8:	61f8      	str	r0, [r7, #28]
        break;
 80092ca:	e010      	b.n	80092ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80092cc:	4b1e      	ldr	r3, [pc, #120]	@ (8009348 <UART_SetConfig+0x56c>)
 80092ce:	61fb      	str	r3, [r7, #28]
        break;
 80092d0:	e00d      	b.n	80092ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80092d2:	f7fb fddd 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 80092d6:	61f8      	str	r0, [r7, #28]
        break;
 80092d8:	e009      	b.n	80092ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092de:	61fb      	str	r3, [r7, #28]
        break;
 80092e0:	e005      	b.n	80092ee <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80092e2:	2300      	movs	r3, #0
 80092e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80092e6:	2301      	movs	r3, #1
 80092e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80092ec:	bf00      	nop
    }

    if (pclk != 0U)
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d019      	beq.n	8009328 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	085a      	lsrs	r2, r3, #1
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	441a      	add	r2, r3
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	fbb2 f3f3 	udiv	r3, r2, r3
 8009306:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	2b0f      	cmp	r3, #15
 800930c:	d909      	bls.n	8009322 <UART_SetConfig+0x546>
 800930e:	69bb      	ldr	r3, [r7, #24]
 8009310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009314:	d205      	bcs.n	8009322 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	b29a      	uxth	r2, r3
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	60da      	str	r2, [r3, #12]
 8009320:	e002      	b.n	8009328 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2200      	movs	r2, #0
 8009332:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009334:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8009338:	4618      	mov	r0, r3
 800933a:	3728      	adds	r7, #40	@ 0x28
 800933c:	46bd      	mov	sp, r7
 800933e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009342:	bf00      	nop
 8009344:	40008000 	.word	0x40008000
 8009348:	00f42400 	.word	0x00f42400

0800934c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009358:	f003 0308 	and.w	r3, r3, #8
 800935c:	2b00      	cmp	r3, #0
 800935e:	d00a      	beq.n	8009376 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	430a      	orrs	r2, r1
 8009374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800937a:	f003 0301 	and.w	r3, r3, #1
 800937e:	2b00      	cmp	r3, #0
 8009380:	d00a      	beq.n	8009398 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	430a      	orrs	r2, r1
 8009396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800939c:	f003 0302 	and.w	r3, r3, #2
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d00a      	beq.n	80093ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	430a      	orrs	r2, r1
 80093b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093be:	f003 0304 	and.w	r3, r3, #4
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d00a      	beq.n	80093dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	430a      	orrs	r2, r1
 80093da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e0:	f003 0310 	and.w	r3, r3, #16
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00a      	beq.n	80093fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	430a      	orrs	r2, r1
 80093fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009402:	f003 0320 	and.w	r3, r3, #32
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00a      	beq.n	8009420 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	430a      	orrs	r2, r1
 800941e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009428:	2b00      	cmp	r3, #0
 800942a:	d01a      	beq.n	8009462 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	430a      	orrs	r2, r1
 8009440:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009446:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800944a:	d10a      	bne.n	8009462 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	430a      	orrs	r2, r1
 8009460:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00a      	beq.n	8009484 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	430a      	orrs	r2, r1
 8009482:	605a      	str	r2, [r3, #4]
  }
}
 8009484:	bf00      	nop
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b098      	sub	sp, #96	@ 0x60
 8009494:	af02      	add	r7, sp, #8
 8009496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80094a0:	f7f9 fc52 	bl	8002d48 <HAL_GetTick>
 80094a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f003 0308 	and.w	r3, r3, #8
 80094b0:	2b08      	cmp	r3, #8
 80094b2:	d12e      	bne.n	8009512 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80094b8:	9300      	str	r3, [sp, #0]
 80094ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094bc:	2200      	movs	r2, #0
 80094be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f88c 	bl	80095e0 <UART_WaitOnFlagUntilTimeout>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d021      	beq.n	8009512 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d6:	e853 3f00 	ldrex	r3, [r3]
 80094da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	461a      	mov	r2, r3
 80094ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80094ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094f4:	e841 2300 	strex	r3, r2, [r1]
 80094f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1e6      	bne.n	80094ce <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2220      	movs	r2, #32
 8009504:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800950e:	2303      	movs	r3, #3
 8009510:	e062      	b.n	80095d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 0304 	and.w	r3, r3, #4
 800951c:	2b04      	cmp	r3, #4
 800951e:	d149      	bne.n	80095b4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009520:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009524:	9300      	str	r3, [sp, #0]
 8009526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009528:	2200      	movs	r2, #0
 800952a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 f856 	bl	80095e0 <UART_WaitOnFlagUntilTimeout>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d03c      	beq.n	80095b4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009542:	e853 3f00 	ldrex	r3, [r3]
 8009546:	623b      	str	r3, [r7, #32]
   return(result);
 8009548:	6a3b      	ldr	r3, [r7, #32]
 800954a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800954e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	461a      	mov	r2, r3
 8009556:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009558:	633b      	str	r3, [r7, #48]	@ 0x30
 800955a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800955e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009560:	e841 2300 	strex	r3, r2, [r1]
 8009564:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1e6      	bne.n	800953a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	3308      	adds	r3, #8
 8009572:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	e853 3f00 	ldrex	r3, [r3]
 800957a:	60fb      	str	r3, [r7, #12]
   return(result);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f023 0301 	bic.w	r3, r3, #1
 8009582:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	3308      	adds	r3, #8
 800958a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800958c:	61fa      	str	r2, [r7, #28]
 800958e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009590:	69b9      	ldr	r1, [r7, #24]
 8009592:	69fa      	ldr	r2, [r7, #28]
 8009594:	e841 2300 	strex	r3, r2, [r1]
 8009598:	617b      	str	r3, [r7, #20]
   return(result);
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d1e5      	bne.n	800956c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2220      	movs	r2, #32
 80095a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095b0:	2303      	movs	r3, #3
 80095b2:	e011      	b.n	80095d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2220      	movs	r2, #32
 80095b8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2220      	movs	r2, #32
 80095be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3758      	adds	r7, #88	@ 0x58
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	603b      	str	r3, [r7, #0]
 80095ec:	4613      	mov	r3, r2
 80095ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095f0:	e04f      	b.n	8009692 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095f8:	d04b      	beq.n	8009692 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095fa:	f7f9 fba5 	bl	8002d48 <HAL_GetTick>
 80095fe:	4602      	mov	r2, r0
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	1ad3      	subs	r3, r2, r3
 8009604:	69ba      	ldr	r2, [r7, #24]
 8009606:	429a      	cmp	r2, r3
 8009608:	d302      	bcc.n	8009610 <UART_WaitOnFlagUntilTimeout+0x30>
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d101      	bne.n	8009614 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009610:	2303      	movs	r3, #3
 8009612:	e04e      	b.n	80096b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f003 0304 	and.w	r3, r3, #4
 800961e:	2b00      	cmp	r3, #0
 8009620:	d037      	beq.n	8009692 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	2b80      	cmp	r3, #128	@ 0x80
 8009626:	d034      	beq.n	8009692 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	2b40      	cmp	r3, #64	@ 0x40
 800962c:	d031      	beq.n	8009692 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	69db      	ldr	r3, [r3, #28]
 8009634:	f003 0308 	and.w	r3, r3, #8
 8009638:	2b08      	cmp	r3, #8
 800963a:	d110      	bne.n	800965e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2208      	movs	r2, #8
 8009642:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f000 f8ff 	bl	8009848 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2208      	movs	r2, #8
 800964e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2200      	movs	r2, #0
 8009656:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	e029      	b.n	80096b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	69db      	ldr	r3, [r3, #28]
 8009664:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009668:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800966c:	d111      	bne.n	8009692 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009676:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009678:	68f8      	ldr	r0, [r7, #12]
 800967a:	f000 f8e5 	bl	8009848 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2220      	movs	r2, #32
 8009682:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2200      	movs	r2, #0
 800968a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800968e:	2303      	movs	r3, #3
 8009690:	e00f      	b.n	80096b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	69da      	ldr	r2, [r3, #28]
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	4013      	ands	r3, r2
 800969c:	68ba      	ldr	r2, [r7, #8]
 800969e:	429a      	cmp	r2, r3
 80096a0:	bf0c      	ite	eq
 80096a2:	2301      	moveq	r3, #1
 80096a4:	2300      	movne	r3, #0
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	461a      	mov	r2, r3
 80096aa:	79fb      	ldrb	r3, [r7, #7]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d0a0      	beq.n	80095f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3710      	adds	r7, #16
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
	...

080096bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096bc:	b480      	push	{r7}
 80096be:	b097      	sub	sp, #92	@ 0x5c
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	4613      	mov	r3, r2
 80096c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	88fa      	ldrh	r2, [r7, #6]
 80096d4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	88fa      	ldrh	r2, [r7, #6]
 80096dc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2200      	movs	r2, #0
 80096e4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096ee:	d10e      	bne.n	800970e <UART_Start_Receive_IT+0x52>
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	691b      	ldr	r3, [r3, #16]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d105      	bne.n	8009704 <UART_Start_Receive_IT+0x48>
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80096fe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009702:	e02d      	b.n	8009760 <UART_Start_Receive_IT+0xa4>
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	22ff      	movs	r2, #255	@ 0xff
 8009708:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800970c:	e028      	b.n	8009760 <UART_Start_Receive_IT+0xa4>
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d10d      	bne.n	8009732 <UART_Start_Receive_IT+0x76>
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	691b      	ldr	r3, [r3, #16]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d104      	bne.n	8009728 <UART_Start_Receive_IT+0x6c>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	22ff      	movs	r2, #255	@ 0xff
 8009722:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009726:	e01b      	b.n	8009760 <UART_Start_Receive_IT+0xa4>
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	227f      	movs	r2, #127	@ 0x7f
 800972c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009730:	e016      	b.n	8009760 <UART_Start_Receive_IT+0xa4>
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800973a:	d10d      	bne.n	8009758 <UART_Start_Receive_IT+0x9c>
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d104      	bne.n	800974e <UART_Start_Receive_IT+0x92>
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	227f      	movs	r2, #127	@ 0x7f
 8009748:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800974c:	e008      	b.n	8009760 <UART_Start_Receive_IT+0xa4>
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	223f      	movs	r2, #63	@ 0x3f
 8009752:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009756:	e003      	b.n	8009760 <UART_Start_Receive_IT+0xa4>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2200      	movs	r2, #0
 800975c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2200      	movs	r2, #0
 8009764:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2222      	movs	r2, #34	@ 0x22
 800976c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	3308      	adds	r3, #8
 8009776:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800977a:	e853 3f00 	ldrex	r3, [r3]
 800977e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009782:	f043 0301 	orr.w	r3, r3, #1
 8009786:	657b      	str	r3, [r7, #84]	@ 0x54
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	3308      	adds	r3, #8
 800978e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009790:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009792:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009794:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009796:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009798:	e841 2300 	strex	r3, r2, [r1]
 800979c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800979e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1e5      	bne.n	8009770 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097ac:	d107      	bne.n	80097be <UART_Start_Receive_IT+0x102>
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	691b      	ldr	r3, [r3, #16]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d103      	bne.n	80097be <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	4a21      	ldr	r2, [pc, #132]	@ (8009840 <UART_Start_Receive_IT+0x184>)
 80097ba:	669a      	str	r2, [r3, #104]	@ 0x68
 80097bc:	e002      	b.n	80097c4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	4a20      	ldr	r2, [pc, #128]	@ (8009844 <UART_Start_Receive_IT+0x188>)
 80097c2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	691b      	ldr	r3, [r3, #16]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d019      	beq.n	8009800 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d4:	e853 3f00 	ldrex	r3, [r3]
 80097d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80097da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097dc:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80097e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	461a      	mov	r2, r3
 80097e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80097ec:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80097f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80097f2:	e841 2300 	strex	r3, r2, [r1]
 80097f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80097f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1e6      	bne.n	80097cc <UART_Start_Receive_IT+0x110>
 80097fe:	e018      	b.n	8009832 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	e853 3f00 	ldrex	r3, [r3]
 800980c:	613b      	str	r3, [r7, #16]
   return(result);
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	f043 0320 	orr.w	r3, r3, #32
 8009814:	653b      	str	r3, [r7, #80]	@ 0x50
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	461a      	mov	r2, r3
 800981c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800981e:	623b      	str	r3, [r7, #32]
 8009820:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009822:	69f9      	ldr	r1, [r7, #28]
 8009824:	6a3a      	ldr	r2, [r7, #32]
 8009826:	e841 2300 	strex	r3, r2, [r1]
 800982a:	61bb      	str	r3, [r7, #24]
   return(result);
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1e6      	bne.n	8009800 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8009832:	2300      	movs	r3, #0
}
 8009834:	4618      	mov	r0, r3
 8009836:	375c      	adds	r7, #92	@ 0x5c
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr
 8009840:	08009b4d 	.word	0x08009b4d
 8009844:	08009991 	.word	0x08009991

08009848 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009848:	b480      	push	{r7}
 800984a:	b095      	sub	sp, #84	@ 0x54
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009858:	e853 3f00 	ldrex	r3, [r3]
 800985c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800985e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009860:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009864:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	461a      	mov	r2, r3
 800986c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800986e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009870:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009872:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009874:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009876:	e841 2300 	strex	r3, r2, [r1]
 800987a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800987c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800987e:	2b00      	cmp	r3, #0
 8009880:	d1e6      	bne.n	8009850 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	3308      	adds	r3, #8
 8009888:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988a:	6a3b      	ldr	r3, [r7, #32]
 800988c:	e853 3f00 	ldrex	r3, [r3]
 8009890:	61fb      	str	r3, [r7, #28]
   return(result);
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	f023 0301 	bic.w	r3, r3, #1
 8009898:	64bb      	str	r3, [r7, #72]	@ 0x48
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	3308      	adds	r3, #8
 80098a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80098a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098aa:	e841 2300 	strex	r3, r2, [r1]
 80098ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80098b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d1e5      	bne.n	8009882 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d118      	bne.n	80098f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	e853 3f00 	ldrex	r3, [r3]
 80098ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	f023 0310 	bic.w	r3, r3, #16
 80098d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	461a      	mov	r2, r3
 80098da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098dc:	61bb      	str	r3, [r7, #24]
 80098de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e0:	6979      	ldr	r1, [r7, #20]
 80098e2:	69ba      	ldr	r2, [r7, #24]
 80098e4:	e841 2300 	strex	r3, r2, [r1]
 80098e8:	613b      	str	r3, [r7, #16]
   return(result);
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d1e6      	bne.n	80098be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2220      	movs	r2, #32
 80098f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2200      	movs	r2, #0
 8009902:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009904:	bf00      	nop
 8009906:	3754      	adds	r7, #84	@ 0x54
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800991c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2200      	movs	r2, #0
 8009922:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2200      	movs	r2, #0
 800992a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800992e:	68f8      	ldr	r0, [r7, #12]
 8009930:	f7ff fa3e 	bl	8008db0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009934:	bf00      	nop
 8009936:	3710      	adds	r7, #16
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b088      	sub	sp, #32
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	e853 3f00 	ldrex	r3, [r3]
 8009950:	60bb      	str	r3, [r7, #8]
   return(result);
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009958:	61fb      	str	r3, [r7, #28]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	461a      	mov	r2, r3
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	61bb      	str	r3, [r7, #24]
 8009964:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009966:	6979      	ldr	r1, [r7, #20]
 8009968:	69ba      	ldr	r2, [r7, #24]
 800996a:	e841 2300 	strex	r3, r2, [r1]
 800996e:	613b      	str	r3, [r7, #16]
   return(result);
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d1e6      	bne.n	8009944 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2220      	movs	r2, #32
 800997a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2200      	movs	r2, #0
 8009980:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f7ff fa0a 	bl	8008d9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009988:	bf00      	nop
 800998a:	3720      	adds	r7, #32
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b09c      	sub	sp, #112	@ 0x70
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800999e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099a8:	2b22      	cmp	r3, #34	@ 0x22
 80099aa:	f040 80be 	bne.w	8009b2a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80099b4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80099b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80099bc:	b2d9      	uxtb	r1, r3
 80099be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80099c2:	b2da      	uxtb	r2, r3
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099c8:	400a      	ands	r2, r1
 80099ca:	b2d2      	uxtb	r2, r2
 80099cc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099d2:	1c5a      	adds	r2, r3, #1
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80099de:	b29b      	uxth	r3, r3
 80099e0:	3b01      	subs	r3, #1
 80099e2:	b29a      	uxth	r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	f040 80a3 	bne.w	8009b3e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a00:	e853 3f00 	ldrex	r3, [r3]
 8009a04:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009a06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	461a      	mov	r2, r3
 8009a14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a18:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009a1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a1e:	e841 2300 	strex	r3, r2, [r1]
 8009a22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009a24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1e6      	bne.n	80099f8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	3308      	adds	r3, #8
 8009a30:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a34:	e853 3f00 	ldrex	r3, [r3]
 8009a38:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a3c:	f023 0301 	bic.w	r3, r3, #1
 8009a40:	667b      	str	r3, [r7, #100]	@ 0x64
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	3308      	adds	r3, #8
 8009a48:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009a4a:	647a      	str	r2, [r7, #68]	@ 0x44
 8009a4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a52:	e841 2300 	strex	r3, r2, [r1]
 8009a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d1e5      	bne.n	8009a2a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2220      	movs	r2, #32
 8009a62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a34      	ldr	r2, [pc, #208]	@ (8009b48 <UART_RxISR_8BIT+0x1b8>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d01f      	beq.n	8009abc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d018      	beq.n	8009abc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a92:	e853 3f00 	ldrex	r3, [r3]
 8009a96:	623b      	str	r3, [r7, #32]
   return(result);
 8009a98:	6a3b      	ldr	r3, [r7, #32]
 8009a9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009a9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009aa8:	633b      	str	r3, [r7, #48]	@ 0x30
 8009aaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009aae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ab0:	e841 2300 	strex	r3, r2, [r1]
 8009ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d1e6      	bne.n	8009a8a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d12e      	bne.n	8009b22 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	e853 3f00 	ldrex	r3, [r3]
 8009ad6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f023 0310 	bic.w	r3, r3, #16
 8009ade:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ae8:	61fb      	str	r3, [r7, #28]
 8009aea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aec:	69b9      	ldr	r1, [r7, #24]
 8009aee:	69fa      	ldr	r2, [r7, #28]
 8009af0:	e841 2300 	strex	r3, r2, [r1]
 8009af4:	617b      	str	r3, [r7, #20]
   return(result);
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d1e6      	bne.n	8009aca <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	69db      	ldr	r3, [r3, #28]
 8009b02:	f003 0310 	and.w	r3, r3, #16
 8009b06:	2b10      	cmp	r3, #16
 8009b08:	d103      	bne.n	8009b12 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2210      	movs	r2, #16
 8009b10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009b18:	4619      	mov	r1, r3
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f7ff f952 	bl	8008dc4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b20:	e00d      	b.n	8009b3e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f7f7 fc24 	bl	8001370 <HAL_UART_RxCpltCallback>
}
 8009b28:	e009      	b.n	8009b3e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	8b1b      	ldrh	r3, [r3, #24]
 8009b30:	b29a      	uxth	r2, r3
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f042 0208 	orr.w	r2, r2, #8
 8009b3a:	b292      	uxth	r2, r2
 8009b3c:	831a      	strh	r2, [r3, #24]
}
 8009b3e:	bf00      	nop
 8009b40:	3770      	adds	r7, #112	@ 0x70
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	40008000 	.word	0x40008000

08009b4c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b09c      	sub	sp, #112	@ 0x70
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009b5a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b64:	2b22      	cmp	r3, #34	@ 0x22
 8009b66:	f040 80be 	bne.w	8009ce6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009b70:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b78:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009b7a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009b7e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009b82:	4013      	ands	r3, r2
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009b88:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b8e:	1c9a      	adds	r2, r3, #2
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f040 80a3 	bne.w	8009cfa <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009bbc:	e853 3f00 	ldrex	r3, [r3]
 8009bc0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009bc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009bc8:	667b      	str	r3, [r7, #100]	@ 0x64
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	461a      	mov	r2, r3
 8009bd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bd2:	657b      	str	r3, [r7, #84]	@ 0x54
 8009bd4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009bd8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009bda:	e841 2300 	strex	r3, r2, [r1]
 8009bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009be0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1e6      	bne.n	8009bb4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	3308      	adds	r3, #8
 8009bec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bf0:	e853 3f00 	ldrex	r3, [r3]
 8009bf4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf8:	f023 0301 	bic.w	r3, r3, #1
 8009bfc:	663b      	str	r3, [r7, #96]	@ 0x60
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	3308      	adds	r3, #8
 8009c04:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009c06:	643a      	str	r2, [r7, #64]	@ 0x40
 8009c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c0e:	e841 2300 	strex	r3, r2, [r1]
 8009c12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d1e5      	bne.n	8009be6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2220      	movs	r2, #32
 8009c1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a34      	ldr	r2, [pc, #208]	@ (8009d04 <UART_RxISR_16BIT+0x1b8>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d01f      	beq.n	8009c78 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d018      	beq.n	8009c78 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4c:	6a3b      	ldr	r3, [r7, #32]
 8009c4e:	e853 3f00 	ldrex	r3, [r3]
 8009c52:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009c5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	461a      	mov	r2, r3
 8009c62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c66:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c6c:	e841 2300 	strex	r3, r2, [r1]
 8009c70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d1e6      	bne.n	8009c46 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d12e      	bne.n	8009cde <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2200      	movs	r2, #0
 8009c84:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	e853 3f00 	ldrex	r3, [r3]
 8009c92:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	f023 0310 	bic.w	r3, r3, #16
 8009c9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ca4:	61bb      	str	r3, [r7, #24]
 8009ca6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca8:	6979      	ldr	r1, [r7, #20]
 8009caa:	69ba      	ldr	r2, [r7, #24]
 8009cac:	e841 2300 	strex	r3, r2, [r1]
 8009cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d1e6      	bne.n	8009c86 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	69db      	ldr	r3, [r3, #28]
 8009cbe:	f003 0310 	and.w	r3, r3, #16
 8009cc2:	2b10      	cmp	r3, #16
 8009cc4:	d103      	bne.n	8009cce <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2210      	movs	r2, #16
 8009ccc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f7ff f874 	bl	8008dc4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009cdc:	e00d      	b.n	8009cfa <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f7f7 fb46 	bl	8001370 <HAL_UART_RxCpltCallback>
}
 8009ce4:	e009      	b.n	8009cfa <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	8b1b      	ldrh	r3, [r3, #24]
 8009cec:	b29a      	uxth	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f042 0208 	orr.w	r2, r2, #8
 8009cf6:	b292      	uxth	r2, r2
 8009cf8:	831a      	strh	r2, [r3, #24]
}
 8009cfa:	bf00      	nop
 8009cfc:	3770      	adds	r7, #112	@ 0x70
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	40008000 	.word	0x40008000

08009d08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b083      	sub	sp, #12
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009d10:	bf00      	nop
 8009d12:	370c      	adds	r7, #12
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr

08009d1c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b085      	sub	sp, #20
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	4603      	mov	r3, r0
 8009d24:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009d26:	2300      	movs	r3, #0
 8009d28:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009d2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d2e:	2b84      	cmp	r3, #132	@ 0x84
 8009d30:	d005      	beq.n	8009d3e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009d32:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	4413      	add	r3, r2
 8009d3a:	3303      	adds	r3, #3
 8009d3c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3714      	adds	r7, #20
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009d50:	f000 fde2 	bl	800a918 <vTaskStartScheduler>
  
  return osOK;
 8009d54:	2300      	movs	r3, #0
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009d5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d5c:	b089      	sub	sp, #36	@ 0x24
 8009d5e:	af04      	add	r7, sp, #16
 8009d60:	6078      	str	r0, [r7, #4]
 8009d62:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	695b      	ldr	r3, [r3, #20]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d020      	beq.n	8009dae <osThreadCreate+0x54>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	699b      	ldr	r3, [r3, #24]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d01c      	beq.n	8009dae <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	685c      	ldr	r4, [r3, #4]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	691e      	ldr	r6, [r3, #16]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7ff ffc8 	bl	8009d1c <makeFreeRtosPriority>
 8009d8c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	695b      	ldr	r3, [r3, #20]
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009d96:	9202      	str	r2, [sp, #8]
 8009d98:	9301      	str	r3, [sp, #4]
 8009d9a:	9100      	str	r1, [sp, #0]
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	4632      	mov	r2, r6
 8009da0:	4629      	mov	r1, r5
 8009da2:	4620      	mov	r0, r4
 8009da4:	f000 fbd2 	bl	800a54c <xTaskCreateStatic>
 8009da8:	4603      	mov	r3, r0
 8009daa:	60fb      	str	r3, [r7, #12]
 8009dac:	e01c      	b.n	8009de8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	685c      	ldr	r4, [r3, #4]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009dba:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7ff ffaa 	bl	8009d1c <makeFreeRtosPriority>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	f107 030c 	add.w	r3, r7, #12
 8009dce:	9301      	str	r3, [sp, #4]
 8009dd0:	9200      	str	r2, [sp, #0]
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	4632      	mov	r2, r6
 8009dd6:	4629      	mov	r1, r5
 8009dd8:	4620      	mov	r0, r4
 8009dda:	f000 fc17 	bl	800a60c <xTaskCreate>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d001      	beq.n	8009de8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009de4:	2300      	movs	r3, #0
 8009de6:	e000      	b.n	8009dea <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009de8:	68fb      	ldr	r3, [r7, #12]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3714      	adds	r7, #20
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009df2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b084      	sub	sp, #16
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d001      	beq.n	8009e08 <osDelay+0x16>
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	e000      	b.n	8009e0a <osDelay+0x18>
 8009e08:	2301      	movs	r3, #1
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f000 fd4e 	bl	800a8ac <vTaskDelay>
  
  return osOK;
 8009e10:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009e1a:	b480      	push	{r7}
 8009e1c:	b083      	sub	sp, #12
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f103 0208 	add.w	r2, r3, #8
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009e32:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f103 0208 	add.w	r2, r3, #8
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f103 0208 	add.w	r2, r3, #8
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009e4e:	bf00      	nop
 8009e50:	370c      	adds	r7, #12
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr

08009e5a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009e5a:	b480      	push	{r7}
 8009e5c:	b083      	sub	sp, #12
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2200      	movs	r2, #0
 8009e66:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e68:	bf00      	nop
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	68fa      	ldr	r2, [r7, #12]
 8009e88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	689a      	ldr	r2, [r3, #8]
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	683a      	ldr	r2, [r7, #0]
 8009e98:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	683a      	ldr	r2, [r7, #0]
 8009e9e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	1c5a      	adds	r2, r3, #1
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	601a      	str	r2, [r3, #0]
}
 8009eb0:	bf00      	nop
 8009eb2:	3714      	adds	r7, #20
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ed2:	d103      	bne.n	8009edc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	691b      	ldr	r3, [r3, #16]
 8009ed8:	60fb      	str	r3, [r7, #12]
 8009eda:	e00c      	b.n	8009ef6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	3308      	adds	r3, #8
 8009ee0:	60fb      	str	r3, [r7, #12]
 8009ee2:	e002      	b.n	8009eea <vListInsert+0x2e>
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	60fb      	str	r3, [r7, #12]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	68ba      	ldr	r2, [r7, #8]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d2f6      	bcs.n	8009ee4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	685a      	ldr	r2, [r3, #4]
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	683a      	ldr	r2, [r7, #0]
 8009f04:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	683a      	ldr	r2, [r7, #0]
 8009f10:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	1c5a      	adds	r2, r3, #1
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	601a      	str	r2, [r3, #0]
}
 8009f22:	bf00      	nop
 8009f24:	3714      	adds	r7, #20
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr

08009f2e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009f2e:	b480      	push	{r7}
 8009f30:	b085      	sub	sp, #20
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	6892      	ldr	r2, [r2, #8]
 8009f44:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	6852      	ldr	r2, [r2, #4]
 8009f4e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d103      	bne.n	8009f62 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	689a      	ldr	r2, [r3, #8]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	1e5a      	subs	r2, r3, #1
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3714      	adds	r7, #20
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
	...

08009f84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10b      	bne.n	8009fb0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f9c:	f383 8811 	msr	BASEPRI, r3
 8009fa0:	f3bf 8f6f 	isb	sy
 8009fa4:	f3bf 8f4f 	dsb	sy
 8009fa8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009faa:	bf00      	nop
 8009fac:	bf00      	nop
 8009fae:	e7fd      	b.n	8009fac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009fb0:	f001 fba2 	bl	800b6f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fbc:	68f9      	ldr	r1, [r7, #12]
 8009fbe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009fc0:	fb01 f303 	mul.w	r3, r1, r3
 8009fc4:	441a      	add	r2, r3
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	68f9      	ldr	r1, [r7, #12]
 8009fe4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009fe6:	fb01 f303 	mul.w	r3, r1, r3
 8009fea:	441a      	add	r2, r3
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	22ff      	movs	r2, #255	@ 0xff
 8009ff4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	22ff      	movs	r2, #255	@ 0xff
 8009ffc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d114      	bne.n	800a030 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	691b      	ldr	r3, [r3, #16]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d01a      	beq.n	800a044 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	3310      	adds	r3, #16
 800a012:	4618      	mov	r0, r3
 800a014:	f000 feda 	bl	800adcc <xTaskRemoveFromEventList>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d012      	beq.n	800a044 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a01e:	4b0d      	ldr	r3, [pc, #52]	@ (800a054 <xQueueGenericReset+0xd0>)
 800a020:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a024:	601a      	str	r2, [r3, #0]
 800a026:	f3bf 8f4f 	dsb	sy
 800a02a:	f3bf 8f6f 	isb	sy
 800a02e:	e009      	b.n	800a044 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	3310      	adds	r3, #16
 800a034:	4618      	mov	r0, r3
 800a036:	f7ff fef0 	bl	8009e1a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	3324      	adds	r3, #36	@ 0x24
 800a03e:	4618      	mov	r0, r3
 800a040:	f7ff feeb 	bl	8009e1a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a044:	f001 fb8a 	bl	800b75c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a048:	2301      	movs	r3, #1
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3710      	adds	r7, #16
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	e000ed04 	.word	0xe000ed04

0800a058 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b08a      	sub	sp, #40	@ 0x28
 800a05c:	af02      	add	r7, sp, #8
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	4613      	mov	r3, r2
 800a064:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d10b      	bne.n	800a084 <xQueueGenericCreate+0x2c>
	__asm volatile
 800a06c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a070:	f383 8811 	msr	BASEPRI, r3
 800a074:	f3bf 8f6f 	isb	sy
 800a078:	f3bf 8f4f 	dsb	sy
 800a07c:	613b      	str	r3, [r7, #16]
}
 800a07e:	bf00      	nop
 800a080:	bf00      	nop
 800a082:	e7fd      	b.n	800a080 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	68ba      	ldr	r2, [r7, #8]
 800a088:	fb02 f303 	mul.w	r3, r2, r3
 800a08c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	3348      	adds	r3, #72	@ 0x48
 800a092:	4618      	mov	r0, r3
 800a094:	f001 fc52 	bl	800b93c <pvPortMalloc>
 800a098:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d011      	beq.n	800a0c4 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	3348      	adds	r3, #72	@ 0x48
 800a0a8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a0b2:	79fa      	ldrb	r2, [r7, #7]
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	9300      	str	r3, [sp, #0]
 800a0b8:	4613      	mov	r3, r2
 800a0ba:	697a      	ldr	r2, [r7, #20]
 800a0bc:	68b9      	ldr	r1, [r7, #8]
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	f000 f805 	bl	800a0ce <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a0c4:	69bb      	ldr	r3, [r7, #24]
	}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3720      	adds	r7, #32
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b084      	sub	sp, #16
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	60f8      	str	r0, [r7, #12]
 800a0d6:	60b9      	str	r1, [r7, #8]
 800a0d8:	607a      	str	r2, [r7, #4]
 800a0da:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d103      	bne.n	800a0ea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	69ba      	ldr	r2, [r7, #24]
 800a0e6:	601a      	str	r2, [r3, #0]
 800a0e8:	e002      	b.n	800a0f0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	68fa      	ldr	r2, [r7, #12]
 800a0f4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	68ba      	ldr	r2, [r7, #8]
 800a0fa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a0fc:	2101      	movs	r1, #1
 800a0fe:	69b8      	ldr	r0, [r7, #24]
 800a100:	f7ff ff40 	bl	8009f84 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a104:	bf00      	nop
 800a106:	3710      	adds	r7, #16
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b08e      	sub	sp, #56	@ 0x38
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a11a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d10b      	bne.n	800a138 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800a120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a124:	f383 8811 	msr	BASEPRI, r3
 800a128:	f3bf 8f6f 	isb	sy
 800a12c:	f3bf 8f4f 	dsb	sy
 800a130:	623b      	str	r3, [r7, #32]
}
 800a132:	bf00      	nop
 800a134:	bf00      	nop
 800a136:	e7fd      	b.n	800a134 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a13a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d00b      	beq.n	800a158 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800a140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a144:	f383 8811 	msr	BASEPRI, r3
 800a148:	f3bf 8f6f 	isb	sy
 800a14c:	f3bf 8f4f 	dsb	sy
 800a150:	61fb      	str	r3, [r7, #28]
}
 800a152:	bf00      	nop
 800a154:	bf00      	nop
 800a156:	e7fd      	b.n	800a154 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d103      	bne.n	800a168 <xQueueGiveFromISR+0x5c>
 800a160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d101      	bne.n	800a16c <xQueueGiveFromISR+0x60>
 800a168:	2301      	movs	r3, #1
 800a16a:	e000      	b.n	800a16e <xQueueGiveFromISR+0x62>
 800a16c:	2300      	movs	r3, #0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d10b      	bne.n	800a18a <xQueueGiveFromISR+0x7e>
	__asm volatile
 800a172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a176:	f383 8811 	msr	BASEPRI, r3
 800a17a:	f3bf 8f6f 	isb	sy
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	61bb      	str	r3, [r7, #24]
}
 800a184:	bf00      	nop
 800a186:	bf00      	nop
 800a188:	e7fd      	b.n	800a186 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a18a:	f001 fb95 	bl	800b8b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a18e:	f3ef 8211 	mrs	r2, BASEPRI
 800a192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a196:	f383 8811 	msr	BASEPRI, r3
 800a19a:	f3bf 8f6f 	isb	sy
 800a19e:	f3bf 8f4f 	dsb	sy
 800a1a2:	617a      	str	r2, [r7, #20]
 800a1a4:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a1a6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a1a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1ae:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a1b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d22b      	bcs.n	800a212 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a1c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a1c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1c6:	1c5a      	adds	r2, r3, #1
 800a1c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a1cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a1d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a1d4:	d112      	bne.n	800a1fc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d016      	beq.n	800a20c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e0:	3324      	adds	r3, #36	@ 0x24
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f000 fdf2 	bl	800adcc <xTaskRemoveFromEventList>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d00e      	beq.n	800a20c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d00b      	beq.n	800a20c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	601a      	str	r2, [r3, #0]
 800a1fa:	e007      	b.n	800a20c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a1fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a200:	3301      	adds	r3, #1
 800a202:	b2db      	uxtb	r3, r3
 800a204:	b25a      	sxtb	r2, r3
 800a206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a208:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a20c:	2301      	movs	r3, #1
 800a20e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a210:	e001      	b.n	800a216 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a212:	2300      	movs	r3, #0
 800a214:	637b      	str	r3, [r7, #52]	@ 0x34
 800a216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a218:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a220:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a224:	4618      	mov	r0, r3
 800a226:	3738      	adds	r7, #56	@ 0x38
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b08e      	sub	sp, #56	@ 0x38
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a236:	2300      	movs	r3, #0
 800a238:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a23e:	2300      	movs	r3, #0
 800a240:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a244:	2b00      	cmp	r3, #0
 800a246:	d10b      	bne.n	800a260 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a24c:	f383 8811 	msr	BASEPRI, r3
 800a250:	f3bf 8f6f 	isb	sy
 800a254:	f3bf 8f4f 	dsb	sy
 800a258:	623b      	str	r3, [r7, #32]
}
 800a25a:	bf00      	nop
 800a25c:	bf00      	nop
 800a25e:	e7fd      	b.n	800a25c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00b      	beq.n	800a280 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a26c:	f383 8811 	msr	BASEPRI, r3
 800a270:	f3bf 8f6f 	isb	sy
 800a274:	f3bf 8f4f 	dsb	sy
 800a278:	61fb      	str	r3, [r7, #28]
}
 800a27a:	bf00      	nop
 800a27c:	bf00      	nop
 800a27e:	e7fd      	b.n	800a27c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a280:	f000 ff6a 	bl	800b158 <xTaskGetSchedulerState>
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d102      	bne.n	800a290 <xQueueSemaphoreTake+0x64>
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d101      	bne.n	800a294 <xQueueSemaphoreTake+0x68>
 800a290:	2301      	movs	r3, #1
 800a292:	e000      	b.n	800a296 <xQueueSemaphoreTake+0x6a>
 800a294:	2300      	movs	r3, #0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d10b      	bne.n	800a2b2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a29a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a29e:	f383 8811 	msr	BASEPRI, r3
 800a2a2:	f3bf 8f6f 	isb	sy
 800a2a6:	f3bf 8f4f 	dsb	sy
 800a2aa:	61bb      	str	r3, [r7, #24]
}
 800a2ac:	bf00      	nop
 800a2ae:	bf00      	nop
 800a2b0:	e7fd      	b.n	800a2ae <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a2b2:	f001 fa21 	bl	800b6f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a2b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2ba:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a2bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d024      	beq.n	800a30c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a2c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c4:	1e5a      	subs	r2, r3, #1
 800a2c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2c8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a2ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d104      	bne.n	800a2dc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a2d2:	f001 f865 	bl	800b3a0 <pvTaskIncrementMutexHeldCount>
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2da:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d00f      	beq.n	800a304 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2e6:	3310      	adds	r3, #16
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f000 fd6f 	bl	800adcc <xTaskRemoveFromEventList>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d007      	beq.n	800a304 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a2f4:	4b54      	ldr	r3, [pc, #336]	@ (800a448 <xQueueSemaphoreTake+0x21c>)
 800a2f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2fa:	601a      	str	r2, [r3, #0]
 800a2fc:	f3bf 8f4f 	dsb	sy
 800a300:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a304:	f001 fa2a 	bl	800b75c <vPortExitCritical>
				return pdPASS;
 800a308:	2301      	movs	r3, #1
 800a30a:	e098      	b.n	800a43e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d112      	bne.n	800a338 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a314:	2b00      	cmp	r3, #0
 800a316:	d00b      	beq.n	800a330 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a31c:	f383 8811 	msr	BASEPRI, r3
 800a320:	f3bf 8f6f 	isb	sy
 800a324:	f3bf 8f4f 	dsb	sy
 800a328:	617b      	str	r3, [r7, #20]
}
 800a32a:	bf00      	nop
 800a32c:	bf00      	nop
 800a32e:	e7fd      	b.n	800a32c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a330:	f001 fa14 	bl	800b75c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a334:	2300      	movs	r3, #0
 800a336:	e082      	b.n	800a43e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d106      	bne.n	800a34c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a33e:	f107 030c 	add.w	r3, r7, #12
 800a342:	4618      	mov	r0, r3
 800a344:	f000 fda6 	bl	800ae94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a348:	2301      	movs	r3, #1
 800a34a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a34c:	f001 fa06 	bl	800b75c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a350:	f000 fb4c 	bl	800a9ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a354:	f001 f9d0 	bl	800b6f8 <vPortEnterCritical>
 800a358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a35a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a35e:	b25b      	sxtb	r3, r3
 800a360:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a364:	d103      	bne.n	800a36e <xQueueSemaphoreTake+0x142>
 800a366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a368:	2200      	movs	r2, #0
 800a36a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a36e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a370:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a374:	b25b      	sxtb	r3, r3
 800a376:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a37a:	d103      	bne.n	800a384 <xQueueSemaphoreTake+0x158>
 800a37c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a37e:	2200      	movs	r2, #0
 800a380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a384:	f001 f9ea 	bl	800b75c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a388:	463a      	mov	r2, r7
 800a38a:	f107 030c 	add.w	r3, r7, #12
 800a38e:	4611      	mov	r1, r2
 800a390:	4618      	mov	r0, r3
 800a392:	f000 fd95 	bl	800aec0 <xTaskCheckForTimeOut>
 800a396:	4603      	mov	r3, r0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d132      	bne.n	800a402 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a39c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a39e:	f000 f8bf 	bl	800a520 <prvIsQueueEmpty>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d026      	beq.n	800a3f6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a3a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d109      	bne.n	800a3c4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800a3b0:	f001 f9a2 	bl	800b6f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a3b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f000 feeb 	bl	800b194 <xTaskPriorityInherit>
 800a3be:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a3c0:	f001 f9cc 	bl	800b75c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a3c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3c6:	3324      	adds	r3, #36	@ 0x24
 800a3c8:	683a      	ldr	r2, [r7, #0]
 800a3ca:	4611      	mov	r1, r2
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f000 fcd7 	bl	800ad80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a3d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a3d4:	f000 f852 	bl	800a47c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a3d8:	f000 fb16 	bl	800aa08 <xTaskResumeAll>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	f47f af67 	bne.w	800a2b2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a3e4:	4b18      	ldr	r3, [pc, #96]	@ (800a448 <xQueueSemaphoreTake+0x21c>)
 800a3e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3ea:	601a      	str	r2, [r3, #0]
 800a3ec:	f3bf 8f4f 	dsb	sy
 800a3f0:	f3bf 8f6f 	isb	sy
 800a3f4:	e75d      	b.n	800a2b2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a3f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a3f8:	f000 f840 	bl	800a47c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a3fc:	f000 fb04 	bl	800aa08 <xTaskResumeAll>
 800a400:	e757      	b.n	800a2b2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a402:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a404:	f000 f83a 	bl	800a47c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a408:	f000 fafe 	bl	800aa08 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a40c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a40e:	f000 f887 	bl	800a520 <prvIsQueueEmpty>
 800a412:	4603      	mov	r3, r0
 800a414:	2b00      	cmp	r3, #0
 800a416:	f43f af4c 	beq.w	800a2b2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d00d      	beq.n	800a43c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800a420:	f001 f96a 	bl	800b6f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a424:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a426:	f000 f811 	bl	800a44c <prvGetDisinheritPriorityAfterTimeout>
 800a42a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a42c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a432:	4618      	mov	r0, r3
 800a434:	f000 ff24 	bl	800b280 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a438:	f001 f990 	bl	800b75c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a43c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3738      	adds	r7, #56	@ 0x38
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	e000ed04 	.word	0xe000ed04

0800a44c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a44c:	b480      	push	{r7}
 800a44e:	b085      	sub	sp, #20
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d006      	beq.n	800a46a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f1c3 0307 	rsb	r3, r3, #7
 800a466:	60fb      	str	r3, [r7, #12]
 800a468:	e001      	b.n	800a46e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a46a:	2300      	movs	r3, #0
 800a46c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a46e:	68fb      	ldr	r3, [r7, #12]
	}
 800a470:	4618      	mov	r0, r3
 800a472:	3714      	adds	r7, #20
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a484:	f001 f938 	bl	800b6f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a48e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a490:	e011      	b.n	800a4b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a496:	2b00      	cmp	r3, #0
 800a498:	d012      	beq.n	800a4c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	3324      	adds	r3, #36	@ 0x24
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f000 fc94 	bl	800adcc <xTaskRemoveFromEventList>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d001      	beq.n	800a4ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a4aa:	f000 fd6d 	bl	800af88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a4ae:	7bfb      	ldrb	r3, [r7, #15]
 800a4b0:	3b01      	subs	r3, #1
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a4b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	dce9      	bgt.n	800a492 <prvUnlockQueue+0x16>
 800a4be:	e000      	b.n	800a4c2 <prvUnlockQueue+0x46>
					break;
 800a4c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	22ff      	movs	r2, #255	@ 0xff
 800a4c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a4ca:	f001 f947 	bl	800b75c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a4ce:	f001 f913 	bl	800b6f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a4d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a4da:	e011      	b.n	800a500 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	691b      	ldr	r3, [r3, #16]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d012      	beq.n	800a50a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	3310      	adds	r3, #16
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f000 fc6f 	bl	800adcc <xTaskRemoveFromEventList>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d001      	beq.n	800a4f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a4f4:	f000 fd48 	bl	800af88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a4f8:	7bbb      	ldrb	r3, [r7, #14]
 800a4fa:	3b01      	subs	r3, #1
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a500:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a504:	2b00      	cmp	r3, #0
 800a506:	dce9      	bgt.n	800a4dc <prvUnlockQueue+0x60>
 800a508:	e000      	b.n	800a50c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a50a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	22ff      	movs	r2, #255	@ 0xff
 800a510:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a514:	f001 f922 	bl	800b75c <vPortExitCritical>
}
 800a518:	bf00      	nop
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a528:	f001 f8e6 	bl	800b6f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a530:	2b00      	cmp	r3, #0
 800a532:	d102      	bne.n	800a53a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a534:	2301      	movs	r3, #1
 800a536:	60fb      	str	r3, [r7, #12]
 800a538:	e001      	b.n	800a53e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a53a:	2300      	movs	r3, #0
 800a53c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a53e:	f001 f90d 	bl	800b75c <vPortExitCritical>

	return xReturn;
 800a542:	68fb      	ldr	r3, [r7, #12]
}
 800a544:	4618      	mov	r0, r3
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b08e      	sub	sp, #56	@ 0x38
 800a550:	af04      	add	r7, sp, #16
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	607a      	str	r2, [r7, #4]
 800a558:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a55a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d10b      	bne.n	800a578 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a564:	f383 8811 	msr	BASEPRI, r3
 800a568:	f3bf 8f6f 	isb	sy
 800a56c:	f3bf 8f4f 	dsb	sy
 800a570:	623b      	str	r3, [r7, #32]
}
 800a572:	bf00      	nop
 800a574:	bf00      	nop
 800a576:	e7fd      	b.n	800a574 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d10b      	bne.n	800a596 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a582:	f383 8811 	msr	BASEPRI, r3
 800a586:	f3bf 8f6f 	isb	sy
 800a58a:	f3bf 8f4f 	dsb	sy
 800a58e:	61fb      	str	r3, [r7, #28]
}
 800a590:	bf00      	nop
 800a592:	bf00      	nop
 800a594:	e7fd      	b.n	800a592 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a596:	23a0      	movs	r3, #160	@ 0xa0
 800a598:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	2ba0      	cmp	r3, #160	@ 0xa0
 800a59e:	d00b      	beq.n	800a5b8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a5a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5a4:	f383 8811 	msr	BASEPRI, r3
 800a5a8:	f3bf 8f6f 	isb	sy
 800a5ac:	f3bf 8f4f 	dsb	sy
 800a5b0:	61bb      	str	r3, [r7, #24]
}
 800a5b2:	bf00      	nop
 800a5b4:	bf00      	nop
 800a5b6:	e7fd      	b.n	800a5b4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a5b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a5ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d01e      	beq.n	800a5fe <xTaskCreateStatic+0xb2>
 800a5c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d01b      	beq.n	800a5fe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a5c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a5ce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d2:	2202      	movs	r2, #2
 800a5d4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a5d8:	2300      	movs	r3, #0
 800a5da:	9303      	str	r3, [sp, #12]
 800a5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5de:	9302      	str	r3, [sp, #8]
 800a5e0:	f107 0314 	add.w	r3, r7, #20
 800a5e4:	9301      	str	r3, [sp, #4]
 800a5e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5e8:	9300      	str	r3, [sp, #0]
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	68b9      	ldr	r1, [r7, #8]
 800a5f0:	68f8      	ldr	r0, [r7, #12]
 800a5f2:	f000 f851 	bl	800a698 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a5f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a5f8:	f000 f8ee 	bl	800a7d8 <prvAddNewTaskToReadyList>
 800a5fc:	e001      	b.n	800a602 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a5fe:	2300      	movs	r3, #0
 800a600:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a602:	697b      	ldr	r3, [r7, #20]
	}
 800a604:	4618      	mov	r0, r3
 800a606:	3728      	adds	r7, #40	@ 0x28
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b08c      	sub	sp, #48	@ 0x30
 800a610:	af04      	add	r7, sp, #16
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	603b      	str	r3, [r7, #0]
 800a618:	4613      	mov	r3, r2
 800a61a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a61c:	88fb      	ldrh	r3, [r7, #6]
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	4618      	mov	r0, r3
 800a622:	f001 f98b 	bl	800b93c <pvPortMalloc>
 800a626:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d00e      	beq.n	800a64c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a62e:	20a0      	movs	r0, #160	@ 0xa0
 800a630:	f001 f984 	bl	800b93c <pvPortMalloc>
 800a634:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a636:	69fb      	ldr	r3, [r7, #28]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d003      	beq.n	800a644 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a63c:	69fb      	ldr	r3, [r7, #28]
 800a63e:	697a      	ldr	r2, [r7, #20]
 800a640:	631a      	str	r2, [r3, #48]	@ 0x30
 800a642:	e005      	b.n	800a650 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a644:	6978      	ldr	r0, [r7, #20]
 800a646:	f001 fa47 	bl	800bad8 <vPortFree>
 800a64a:	e001      	b.n	800a650 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a64c:	2300      	movs	r3, #0
 800a64e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a650:	69fb      	ldr	r3, [r7, #28]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d017      	beq.n	800a686 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a656:	69fb      	ldr	r3, [r7, #28]
 800a658:	2200      	movs	r2, #0
 800a65a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a65e:	88fa      	ldrh	r2, [r7, #6]
 800a660:	2300      	movs	r3, #0
 800a662:	9303      	str	r3, [sp, #12]
 800a664:	69fb      	ldr	r3, [r7, #28]
 800a666:	9302      	str	r3, [sp, #8]
 800a668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a66a:	9301      	str	r3, [sp, #4]
 800a66c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a66e:	9300      	str	r3, [sp, #0]
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	68b9      	ldr	r1, [r7, #8]
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f000 f80f 	bl	800a698 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a67a:	69f8      	ldr	r0, [r7, #28]
 800a67c:	f000 f8ac 	bl	800a7d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a680:	2301      	movs	r3, #1
 800a682:	61bb      	str	r3, [r7, #24]
 800a684:	e002      	b.n	800a68c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a686:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a68a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a68c:	69bb      	ldr	r3, [r7, #24]
	}
 800a68e:	4618      	mov	r0, r3
 800a690:	3720      	adds	r7, #32
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
	...

0800a698 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b088      	sub	sp, #32
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	607a      	str	r2, [r7, #4]
 800a6a4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a6b0:	3b01      	subs	r3, #1
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	4413      	add	r3, r2
 800a6b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	f023 0307 	bic.w	r3, r3, #7
 800a6be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	f003 0307 	and.w	r3, r3, #7
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d00b      	beq.n	800a6e2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800a6ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ce:	f383 8811 	msr	BASEPRI, r3
 800a6d2:	f3bf 8f6f 	isb	sy
 800a6d6:	f3bf 8f4f 	dsb	sy
 800a6da:	617b      	str	r3, [r7, #20]
}
 800a6dc:	bf00      	nop
 800a6de:	bf00      	nop
 800a6e0:	e7fd      	b.n	800a6de <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d01f      	beq.n	800a728 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	61fb      	str	r3, [r7, #28]
 800a6ec:	e012      	b.n	800a714 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a6ee:	68ba      	ldr	r2, [r7, #8]
 800a6f0:	69fb      	ldr	r3, [r7, #28]
 800a6f2:	4413      	add	r3, r2
 800a6f4:	7819      	ldrb	r1, [r3, #0]
 800a6f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6f8:	69fb      	ldr	r3, [r7, #28]
 800a6fa:	4413      	add	r3, r2
 800a6fc:	3334      	adds	r3, #52	@ 0x34
 800a6fe:	460a      	mov	r2, r1
 800a700:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a702:	68ba      	ldr	r2, [r7, #8]
 800a704:	69fb      	ldr	r3, [r7, #28]
 800a706:	4413      	add	r3, r2
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d006      	beq.n	800a71c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a70e:	69fb      	ldr	r3, [r7, #28]
 800a710:	3301      	adds	r3, #1
 800a712:	61fb      	str	r3, [r7, #28]
 800a714:	69fb      	ldr	r3, [r7, #28]
 800a716:	2b0f      	cmp	r3, #15
 800a718:	d9e9      	bls.n	800a6ee <prvInitialiseNewTask+0x56>
 800a71a:	e000      	b.n	800a71e <prvInitialiseNewTask+0x86>
			{
				break;
 800a71c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a720:	2200      	movs	r2, #0
 800a722:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a726:	e003      	b.n	800a730 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a72a:	2200      	movs	r2, #0
 800a72c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a732:	2b06      	cmp	r3, #6
 800a734:	d901      	bls.n	800a73a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a736:	2306      	movs	r3, #6
 800a738:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a73e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a742:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a744:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a748:	2200      	movs	r2, #0
 800a74a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a74c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a74e:	3304      	adds	r3, #4
 800a750:	4618      	mov	r0, r3
 800a752:	f7ff fb82 	bl	8009e5a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a758:	3318      	adds	r3, #24
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7ff fb7d 	bl	8009e5a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a762:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a764:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a768:	f1c3 0207 	rsb	r2, r3, #7
 800a76c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a76e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a772:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a774:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a778:	2200      	movs	r2, #0
 800a77a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a780:	2200      	movs	r2, #0
 800a782:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a788:	334c      	adds	r3, #76	@ 0x4c
 800a78a:	224c      	movs	r2, #76	@ 0x4c
 800a78c:	2100      	movs	r1, #0
 800a78e:	4618      	mov	r0, r3
 800a790:	f002 fc16 	bl	800cfc0 <memset>
 800a794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a796:	4a0d      	ldr	r2, [pc, #52]	@ (800a7cc <prvInitialiseNewTask+0x134>)
 800a798:	651a      	str	r2, [r3, #80]	@ 0x50
 800a79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a79c:	4a0c      	ldr	r2, [pc, #48]	@ (800a7d0 <prvInitialiseNewTask+0x138>)
 800a79e:	655a      	str	r2, [r3, #84]	@ 0x54
 800a7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a2:	4a0c      	ldr	r2, [pc, #48]	@ (800a7d4 <prvInitialiseNewTask+0x13c>)
 800a7a4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a7a6:	683a      	ldr	r2, [r7, #0]
 800a7a8:	68f9      	ldr	r1, [r7, #12]
 800a7aa:	69b8      	ldr	r0, [r7, #24]
 800a7ac:	f000 fe72 	bl	800b494 <pxPortInitialiseStack>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a7b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d002      	beq.n	800a7c2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a7bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7c2:	bf00      	nop
 800a7c4:	3720      	adds	r7, #32
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	20005ec0 	.word	0x20005ec0
 800a7d0:	20005f28 	.word	0x20005f28
 800a7d4:	20005f90 	.word	0x20005f90

0800a7d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a7e0:	f000 ff8a 	bl	800b6f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a7e4:	4b2a      	ldr	r3, [pc, #168]	@ (800a890 <prvAddNewTaskToReadyList+0xb8>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	4a29      	ldr	r2, [pc, #164]	@ (800a890 <prvAddNewTaskToReadyList+0xb8>)
 800a7ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a7ee:	4b29      	ldr	r3, [pc, #164]	@ (800a894 <prvAddNewTaskToReadyList+0xbc>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d109      	bne.n	800a80a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a7f6:	4a27      	ldr	r2, [pc, #156]	@ (800a894 <prvAddNewTaskToReadyList+0xbc>)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a7fc:	4b24      	ldr	r3, [pc, #144]	@ (800a890 <prvAddNewTaskToReadyList+0xb8>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	2b01      	cmp	r3, #1
 800a802:	d110      	bne.n	800a826 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a804:	f000 fbe4 	bl	800afd0 <prvInitialiseTaskLists>
 800a808:	e00d      	b.n	800a826 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a80a:	4b23      	ldr	r3, [pc, #140]	@ (800a898 <prvAddNewTaskToReadyList+0xc0>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d109      	bne.n	800a826 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a812:	4b20      	ldr	r3, [pc, #128]	@ (800a894 <prvAddNewTaskToReadyList+0xbc>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d802      	bhi.n	800a826 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a820:	4a1c      	ldr	r2, [pc, #112]	@ (800a894 <prvAddNewTaskToReadyList+0xbc>)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a826:	4b1d      	ldr	r3, [pc, #116]	@ (800a89c <prvAddNewTaskToReadyList+0xc4>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	3301      	adds	r3, #1
 800a82c:	4a1b      	ldr	r2, [pc, #108]	@ (800a89c <prvAddNewTaskToReadyList+0xc4>)
 800a82e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a834:	2201      	movs	r2, #1
 800a836:	409a      	lsls	r2, r3
 800a838:	4b19      	ldr	r3, [pc, #100]	@ (800a8a0 <prvAddNewTaskToReadyList+0xc8>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4313      	orrs	r3, r2
 800a83e:	4a18      	ldr	r2, [pc, #96]	@ (800a8a0 <prvAddNewTaskToReadyList+0xc8>)
 800a840:	6013      	str	r3, [r2, #0]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a846:	4613      	mov	r3, r2
 800a848:	009b      	lsls	r3, r3, #2
 800a84a:	4413      	add	r3, r2
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	4a15      	ldr	r2, [pc, #84]	@ (800a8a4 <prvAddNewTaskToReadyList+0xcc>)
 800a850:	441a      	add	r2, r3
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	3304      	adds	r3, #4
 800a856:	4619      	mov	r1, r3
 800a858:	4610      	mov	r0, r2
 800a85a:	f7ff fb0b 	bl	8009e74 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a85e:	f000 ff7d 	bl	800b75c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a862:	4b0d      	ldr	r3, [pc, #52]	@ (800a898 <prvAddNewTaskToReadyList+0xc0>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d00e      	beq.n	800a888 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a86a:	4b0a      	ldr	r3, [pc, #40]	@ (800a894 <prvAddNewTaskToReadyList+0xbc>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a874:	429a      	cmp	r2, r3
 800a876:	d207      	bcs.n	800a888 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a878:	4b0b      	ldr	r3, [pc, #44]	@ (800a8a8 <prvAddNewTaskToReadyList+0xd0>)
 800a87a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a87e:	601a      	str	r2, [r3, #0]
 800a880:	f3bf 8f4f 	dsb	sy
 800a884:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a888:	bf00      	nop
 800a88a:	3708      	adds	r7, #8
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	2000104c 	.word	0x2000104c
 800a894:	20000f4c 	.word	0x20000f4c
 800a898:	20001058 	.word	0x20001058
 800a89c:	20001068 	.word	0x20001068
 800a8a0:	20001054 	.word	0x20001054
 800a8a4:	20000f50 	.word	0x20000f50
 800a8a8:	e000ed04 	.word	0xe000ed04

0800a8ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d018      	beq.n	800a8f0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a8be:	4b14      	ldr	r3, [pc, #80]	@ (800a910 <vTaskDelay+0x64>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d00b      	beq.n	800a8de <vTaskDelay+0x32>
	__asm volatile
 800a8c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ca:	f383 8811 	msr	BASEPRI, r3
 800a8ce:	f3bf 8f6f 	isb	sy
 800a8d2:	f3bf 8f4f 	dsb	sy
 800a8d6:	60bb      	str	r3, [r7, #8]
}
 800a8d8:	bf00      	nop
 800a8da:	bf00      	nop
 800a8dc:	e7fd      	b.n	800a8da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a8de:	f000 f885 	bl	800a9ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a8e2:	2100      	movs	r1, #0
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 fd6f 	bl	800b3c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a8ea:	f000 f88d 	bl	800aa08 <xTaskResumeAll>
 800a8ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d107      	bne.n	800a906 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a8f6:	4b07      	ldr	r3, [pc, #28]	@ (800a914 <vTaskDelay+0x68>)
 800a8f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8fc:	601a      	str	r2, [r3, #0]
 800a8fe:	f3bf 8f4f 	dsb	sy
 800a902:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a906:	bf00      	nop
 800a908:	3710      	adds	r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	20001074 	.word	0x20001074
 800a914:	e000ed04 	.word	0xe000ed04

0800a918 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b08a      	sub	sp, #40	@ 0x28
 800a91c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a91e:	2300      	movs	r3, #0
 800a920:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a922:	2300      	movs	r3, #0
 800a924:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a926:	463a      	mov	r2, r7
 800a928:	1d39      	adds	r1, r7, #4
 800a92a:	f107 0308 	add.w	r3, r7, #8
 800a92e:	4618      	mov	r0, r3
 800a930:	f7f6 fb7e 	bl	8001030 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a934:	6839      	ldr	r1, [r7, #0]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	68ba      	ldr	r2, [r7, #8]
 800a93a:	9202      	str	r2, [sp, #8]
 800a93c:	9301      	str	r3, [sp, #4]
 800a93e:	2300      	movs	r3, #0
 800a940:	9300      	str	r3, [sp, #0]
 800a942:	2300      	movs	r3, #0
 800a944:	460a      	mov	r2, r1
 800a946:	4921      	ldr	r1, [pc, #132]	@ (800a9cc <vTaskStartScheduler+0xb4>)
 800a948:	4821      	ldr	r0, [pc, #132]	@ (800a9d0 <vTaskStartScheduler+0xb8>)
 800a94a:	f7ff fdff 	bl	800a54c <xTaskCreateStatic>
 800a94e:	4603      	mov	r3, r0
 800a950:	4a20      	ldr	r2, [pc, #128]	@ (800a9d4 <vTaskStartScheduler+0xbc>)
 800a952:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a954:	4b1f      	ldr	r3, [pc, #124]	@ (800a9d4 <vTaskStartScheduler+0xbc>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d002      	beq.n	800a962 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a95c:	2301      	movs	r3, #1
 800a95e:	617b      	str	r3, [r7, #20]
 800a960:	e001      	b.n	800a966 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a962:	2300      	movs	r3, #0
 800a964:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d11b      	bne.n	800a9a4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800a96c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a970:	f383 8811 	msr	BASEPRI, r3
 800a974:	f3bf 8f6f 	isb	sy
 800a978:	f3bf 8f4f 	dsb	sy
 800a97c:	613b      	str	r3, [r7, #16]
}
 800a97e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a980:	4b15      	ldr	r3, [pc, #84]	@ (800a9d8 <vTaskStartScheduler+0xc0>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	334c      	adds	r3, #76	@ 0x4c
 800a986:	4a15      	ldr	r2, [pc, #84]	@ (800a9dc <vTaskStartScheduler+0xc4>)
 800a988:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a98a:	4b15      	ldr	r3, [pc, #84]	@ (800a9e0 <vTaskStartScheduler+0xc8>)
 800a98c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a990:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a992:	4b14      	ldr	r3, [pc, #80]	@ (800a9e4 <vTaskStartScheduler+0xcc>)
 800a994:	2201      	movs	r2, #1
 800a996:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a998:	4b13      	ldr	r3, [pc, #76]	@ (800a9e8 <vTaskStartScheduler+0xd0>)
 800a99a:	2200      	movs	r2, #0
 800a99c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a99e:	f000 fe07 	bl	800b5b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a9a2:	e00f      	b.n	800a9c4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a9aa:	d10b      	bne.n	800a9c4 <vTaskStartScheduler+0xac>
	__asm volatile
 800a9ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9b0:	f383 8811 	msr	BASEPRI, r3
 800a9b4:	f3bf 8f6f 	isb	sy
 800a9b8:	f3bf 8f4f 	dsb	sy
 800a9bc:	60fb      	str	r3, [r7, #12]
}
 800a9be:	bf00      	nop
 800a9c0:	bf00      	nop
 800a9c2:	e7fd      	b.n	800a9c0 <vTaskStartScheduler+0xa8>
}
 800a9c4:	bf00      	nop
 800a9c6:	3718      	adds	r7, #24
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}
 800a9cc:	08010edc 	.word	0x08010edc
 800a9d0:	0800afa1 	.word	0x0800afa1
 800a9d4:	20001070 	.word	0x20001070
 800a9d8:	20000f4c 	.word	0x20000f4c
 800a9dc:	20000024 	.word	0x20000024
 800a9e0:	2000106c 	.word	0x2000106c
 800a9e4:	20001058 	.word	0x20001058
 800a9e8:	20001050 	.word	0x20001050

0800a9ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a9f0:	4b04      	ldr	r3, [pc, #16]	@ (800aa04 <vTaskSuspendAll+0x18>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	4a03      	ldr	r2, [pc, #12]	@ (800aa04 <vTaskSuspendAll+0x18>)
 800a9f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a9fa:	bf00      	nop
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr
 800aa04:	20001074 	.word	0x20001074

0800aa08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aa12:	2300      	movs	r3, #0
 800aa14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aa16:	4b42      	ldr	r3, [pc, #264]	@ (800ab20 <xTaskResumeAll+0x118>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d10b      	bne.n	800aa36 <xTaskResumeAll+0x2e>
	__asm volatile
 800aa1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa22:	f383 8811 	msr	BASEPRI, r3
 800aa26:	f3bf 8f6f 	isb	sy
 800aa2a:	f3bf 8f4f 	dsb	sy
 800aa2e:	603b      	str	r3, [r7, #0]
}
 800aa30:	bf00      	nop
 800aa32:	bf00      	nop
 800aa34:	e7fd      	b.n	800aa32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aa36:	f000 fe5f 	bl	800b6f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aa3a:	4b39      	ldr	r3, [pc, #228]	@ (800ab20 <xTaskResumeAll+0x118>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	3b01      	subs	r3, #1
 800aa40:	4a37      	ldr	r2, [pc, #220]	@ (800ab20 <xTaskResumeAll+0x118>)
 800aa42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa44:	4b36      	ldr	r3, [pc, #216]	@ (800ab20 <xTaskResumeAll+0x118>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d161      	bne.n	800ab10 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aa4c:	4b35      	ldr	r3, [pc, #212]	@ (800ab24 <xTaskResumeAll+0x11c>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d05d      	beq.n	800ab10 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa54:	e02e      	b.n	800aab4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa56:	4b34      	ldr	r3, [pc, #208]	@ (800ab28 <xTaskResumeAll+0x120>)
 800aa58:	68db      	ldr	r3, [r3, #12]
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	3318      	adds	r3, #24
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7ff fa63 	bl	8009f2e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	3304      	adds	r3, #4
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7ff fa5e 	bl	8009f2e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa76:	2201      	movs	r2, #1
 800aa78:	409a      	lsls	r2, r3
 800aa7a:	4b2c      	ldr	r3, [pc, #176]	@ (800ab2c <xTaskResumeAll+0x124>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	4a2a      	ldr	r2, [pc, #168]	@ (800ab2c <xTaskResumeAll+0x124>)
 800aa82:	6013      	str	r3, [r2, #0]
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa88:	4613      	mov	r3, r2
 800aa8a:	009b      	lsls	r3, r3, #2
 800aa8c:	4413      	add	r3, r2
 800aa8e:	009b      	lsls	r3, r3, #2
 800aa90:	4a27      	ldr	r2, [pc, #156]	@ (800ab30 <xTaskResumeAll+0x128>)
 800aa92:	441a      	add	r2, r3
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	3304      	adds	r3, #4
 800aa98:	4619      	mov	r1, r3
 800aa9a:	4610      	mov	r0, r2
 800aa9c:	f7ff f9ea 	bl	8009e74 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaa4:	4b23      	ldr	r3, [pc, #140]	@ (800ab34 <xTaskResumeAll+0x12c>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d302      	bcc.n	800aab4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800aaae:	4b22      	ldr	r3, [pc, #136]	@ (800ab38 <xTaskResumeAll+0x130>)
 800aab0:	2201      	movs	r2, #1
 800aab2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aab4:	4b1c      	ldr	r3, [pc, #112]	@ (800ab28 <xTaskResumeAll+0x120>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d1cc      	bne.n	800aa56 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d001      	beq.n	800aac6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aac2:	f000 fb29 	bl	800b118 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800aac6:	4b1d      	ldr	r3, [pc, #116]	@ (800ab3c <xTaskResumeAll+0x134>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d010      	beq.n	800aaf4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aad2:	f000 f837 	bl	800ab44 <xTaskIncrementTick>
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d002      	beq.n	800aae2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800aadc:	4b16      	ldr	r3, [pc, #88]	@ (800ab38 <xTaskResumeAll+0x130>)
 800aade:	2201      	movs	r2, #1
 800aae0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	3b01      	subs	r3, #1
 800aae6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d1f1      	bne.n	800aad2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800aaee:	4b13      	ldr	r3, [pc, #76]	@ (800ab3c <xTaskResumeAll+0x134>)
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aaf4:	4b10      	ldr	r3, [pc, #64]	@ (800ab38 <xTaskResumeAll+0x130>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d009      	beq.n	800ab10 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aafc:	2301      	movs	r3, #1
 800aafe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ab00:	4b0f      	ldr	r3, [pc, #60]	@ (800ab40 <xTaskResumeAll+0x138>)
 800ab02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab06:	601a      	str	r2, [r3, #0]
 800ab08:	f3bf 8f4f 	dsb	sy
 800ab0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab10:	f000 fe24 	bl	800b75c <vPortExitCritical>

	return xAlreadyYielded;
 800ab14:	68bb      	ldr	r3, [r7, #8]
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3710      	adds	r7, #16
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	20001074 	.word	0x20001074
 800ab24:	2000104c 	.word	0x2000104c
 800ab28:	2000100c 	.word	0x2000100c
 800ab2c:	20001054 	.word	0x20001054
 800ab30:	20000f50 	.word	0x20000f50
 800ab34:	20000f4c 	.word	0x20000f4c
 800ab38:	20001060 	.word	0x20001060
 800ab3c:	2000105c 	.word	0x2000105c
 800ab40:	e000ed04 	.word	0xe000ed04

0800ab44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b086      	sub	sp, #24
 800ab48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab4e:	4b4f      	ldr	r3, [pc, #316]	@ (800ac8c <xTaskIncrementTick+0x148>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	f040 808f 	bne.w	800ac76 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ab58:	4b4d      	ldr	r3, [pc, #308]	@ (800ac90 <xTaskIncrementTick+0x14c>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ab60:	4a4b      	ldr	r2, [pc, #300]	@ (800ac90 <xTaskIncrementTick+0x14c>)
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d121      	bne.n	800abb0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ab6c:	4b49      	ldr	r3, [pc, #292]	@ (800ac94 <xTaskIncrementTick+0x150>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00b      	beq.n	800ab8e <xTaskIncrementTick+0x4a>
	__asm volatile
 800ab76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab7a:	f383 8811 	msr	BASEPRI, r3
 800ab7e:	f3bf 8f6f 	isb	sy
 800ab82:	f3bf 8f4f 	dsb	sy
 800ab86:	603b      	str	r3, [r7, #0]
}
 800ab88:	bf00      	nop
 800ab8a:	bf00      	nop
 800ab8c:	e7fd      	b.n	800ab8a <xTaskIncrementTick+0x46>
 800ab8e:	4b41      	ldr	r3, [pc, #260]	@ (800ac94 <xTaskIncrementTick+0x150>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	60fb      	str	r3, [r7, #12]
 800ab94:	4b40      	ldr	r3, [pc, #256]	@ (800ac98 <xTaskIncrementTick+0x154>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a3e      	ldr	r2, [pc, #248]	@ (800ac94 <xTaskIncrementTick+0x150>)
 800ab9a:	6013      	str	r3, [r2, #0]
 800ab9c:	4a3e      	ldr	r2, [pc, #248]	@ (800ac98 <xTaskIncrementTick+0x154>)
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	6013      	str	r3, [r2, #0]
 800aba2:	4b3e      	ldr	r3, [pc, #248]	@ (800ac9c <xTaskIncrementTick+0x158>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	3301      	adds	r3, #1
 800aba8:	4a3c      	ldr	r2, [pc, #240]	@ (800ac9c <xTaskIncrementTick+0x158>)
 800abaa:	6013      	str	r3, [r2, #0]
 800abac:	f000 fab4 	bl	800b118 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800abb0:	4b3b      	ldr	r3, [pc, #236]	@ (800aca0 <xTaskIncrementTick+0x15c>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	693a      	ldr	r2, [r7, #16]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d348      	bcc.n	800ac4c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abba:	4b36      	ldr	r3, [pc, #216]	@ (800ac94 <xTaskIncrementTick+0x150>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d104      	bne.n	800abce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abc4:	4b36      	ldr	r3, [pc, #216]	@ (800aca0 <xTaskIncrementTick+0x15c>)
 800abc6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800abca:	601a      	str	r2, [r3, #0]
					break;
 800abcc:	e03e      	b.n	800ac4c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abce:	4b31      	ldr	r3, [pc, #196]	@ (800ac94 <xTaskIncrementTick+0x150>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	68db      	ldr	r3, [r3, #12]
 800abd4:	68db      	ldr	r3, [r3, #12]
 800abd6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800abde:	693a      	ldr	r2, [r7, #16]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d203      	bcs.n	800abee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800abe6:	4a2e      	ldr	r2, [pc, #184]	@ (800aca0 <xTaskIncrementTick+0x15c>)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800abec:	e02e      	b.n	800ac4c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	3304      	adds	r3, #4
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7ff f99b 	bl	8009f2e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d004      	beq.n	800ac0a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	3318      	adds	r3, #24
 800ac04:	4618      	mov	r0, r3
 800ac06:	f7ff f992 	bl	8009f2e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac0e:	2201      	movs	r2, #1
 800ac10:	409a      	lsls	r2, r3
 800ac12:	4b24      	ldr	r3, [pc, #144]	@ (800aca4 <xTaskIncrementTick+0x160>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4313      	orrs	r3, r2
 800ac18:	4a22      	ldr	r2, [pc, #136]	@ (800aca4 <xTaskIncrementTick+0x160>)
 800ac1a:	6013      	str	r3, [r2, #0]
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac20:	4613      	mov	r3, r2
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	4413      	add	r3, r2
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	4a1f      	ldr	r2, [pc, #124]	@ (800aca8 <xTaskIncrementTick+0x164>)
 800ac2a:	441a      	add	r2, r3
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	3304      	adds	r3, #4
 800ac30:	4619      	mov	r1, r3
 800ac32:	4610      	mov	r0, r2
 800ac34:	f7ff f91e 	bl	8009e74 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac3c:	4b1b      	ldr	r3, [pc, #108]	@ (800acac <xTaskIncrementTick+0x168>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d3b9      	bcc.n	800abba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ac46:	2301      	movs	r3, #1
 800ac48:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac4a:	e7b6      	b.n	800abba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ac4c:	4b17      	ldr	r3, [pc, #92]	@ (800acac <xTaskIncrementTick+0x168>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac52:	4915      	ldr	r1, [pc, #84]	@ (800aca8 <xTaskIncrementTick+0x164>)
 800ac54:	4613      	mov	r3, r2
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	4413      	add	r3, r2
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	440b      	add	r3, r1
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d901      	bls.n	800ac68 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ac64:	2301      	movs	r3, #1
 800ac66:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ac68:	4b11      	ldr	r3, [pc, #68]	@ (800acb0 <xTaskIncrementTick+0x16c>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d007      	beq.n	800ac80 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ac70:	2301      	movs	r3, #1
 800ac72:	617b      	str	r3, [r7, #20]
 800ac74:	e004      	b.n	800ac80 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ac76:	4b0f      	ldr	r3, [pc, #60]	@ (800acb4 <xTaskIncrementTick+0x170>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	4a0d      	ldr	r2, [pc, #52]	@ (800acb4 <xTaskIncrementTick+0x170>)
 800ac7e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ac80:	697b      	ldr	r3, [r7, #20]
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3718      	adds	r7, #24
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	20001074 	.word	0x20001074
 800ac90:	20001050 	.word	0x20001050
 800ac94:	20001004 	.word	0x20001004
 800ac98:	20001008 	.word	0x20001008
 800ac9c:	20001064 	.word	0x20001064
 800aca0:	2000106c 	.word	0x2000106c
 800aca4:	20001054 	.word	0x20001054
 800aca8:	20000f50 	.word	0x20000f50
 800acac:	20000f4c 	.word	0x20000f4c
 800acb0:	20001060 	.word	0x20001060
 800acb4:	2000105c 	.word	0x2000105c

0800acb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800acb8:	b480      	push	{r7}
 800acba:	b087      	sub	sp, #28
 800acbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800acbe:	4b2a      	ldr	r3, [pc, #168]	@ (800ad68 <vTaskSwitchContext+0xb0>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d003      	beq.n	800acce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800acc6:	4b29      	ldr	r3, [pc, #164]	@ (800ad6c <vTaskSwitchContext+0xb4>)
 800acc8:	2201      	movs	r2, #1
 800acca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800accc:	e045      	b.n	800ad5a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800acce:	4b27      	ldr	r3, [pc, #156]	@ (800ad6c <vTaskSwitchContext+0xb4>)
 800acd0:	2200      	movs	r2, #0
 800acd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acd4:	4b26      	ldr	r3, [pc, #152]	@ (800ad70 <vTaskSwitchContext+0xb8>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	fab3 f383 	clz	r3, r3
 800ace0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ace2:	7afb      	ldrb	r3, [r7, #11]
 800ace4:	f1c3 031f 	rsb	r3, r3, #31
 800ace8:	617b      	str	r3, [r7, #20]
 800acea:	4922      	ldr	r1, [pc, #136]	@ (800ad74 <vTaskSwitchContext+0xbc>)
 800acec:	697a      	ldr	r2, [r7, #20]
 800acee:	4613      	mov	r3, r2
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	4413      	add	r3, r2
 800acf4:	009b      	lsls	r3, r3, #2
 800acf6:	440b      	add	r3, r1
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d10b      	bne.n	800ad16 <vTaskSwitchContext+0x5e>
	__asm volatile
 800acfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad02:	f383 8811 	msr	BASEPRI, r3
 800ad06:	f3bf 8f6f 	isb	sy
 800ad0a:	f3bf 8f4f 	dsb	sy
 800ad0e:	607b      	str	r3, [r7, #4]
}
 800ad10:	bf00      	nop
 800ad12:	bf00      	nop
 800ad14:	e7fd      	b.n	800ad12 <vTaskSwitchContext+0x5a>
 800ad16:	697a      	ldr	r2, [r7, #20]
 800ad18:	4613      	mov	r3, r2
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	4413      	add	r3, r2
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	4a14      	ldr	r2, [pc, #80]	@ (800ad74 <vTaskSwitchContext+0xbc>)
 800ad22:	4413      	add	r3, r2
 800ad24:	613b      	str	r3, [r7, #16]
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	685a      	ldr	r2, [r3, #4]
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	605a      	str	r2, [r3, #4]
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	685a      	ldr	r2, [r3, #4]
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	3308      	adds	r3, #8
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d104      	bne.n	800ad46 <vTaskSwitchContext+0x8e>
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	685a      	ldr	r2, [r3, #4]
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	605a      	str	r2, [r3, #4]
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	68db      	ldr	r3, [r3, #12]
 800ad4c:	4a0a      	ldr	r2, [pc, #40]	@ (800ad78 <vTaskSwitchContext+0xc0>)
 800ad4e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ad50:	4b09      	ldr	r3, [pc, #36]	@ (800ad78 <vTaskSwitchContext+0xc0>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	334c      	adds	r3, #76	@ 0x4c
 800ad56:	4a09      	ldr	r2, [pc, #36]	@ (800ad7c <vTaskSwitchContext+0xc4>)
 800ad58:	6013      	str	r3, [r2, #0]
}
 800ad5a:	bf00      	nop
 800ad5c:	371c      	adds	r7, #28
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr
 800ad66:	bf00      	nop
 800ad68:	20001074 	.word	0x20001074
 800ad6c:	20001060 	.word	0x20001060
 800ad70:	20001054 	.word	0x20001054
 800ad74:	20000f50 	.word	0x20000f50
 800ad78:	20000f4c 	.word	0x20000f4c
 800ad7c:	20000024 	.word	0x20000024

0800ad80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d10b      	bne.n	800ada8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ad90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad94:	f383 8811 	msr	BASEPRI, r3
 800ad98:	f3bf 8f6f 	isb	sy
 800ad9c:	f3bf 8f4f 	dsb	sy
 800ada0:	60fb      	str	r3, [r7, #12]
}
 800ada2:	bf00      	nop
 800ada4:	bf00      	nop
 800ada6:	e7fd      	b.n	800ada4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ada8:	4b07      	ldr	r3, [pc, #28]	@ (800adc8 <vTaskPlaceOnEventList+0x48>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	3318      	adds	r3, #24
 800adae:	4619      	mov	r1, r3
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f7ff f883 	bl	8009ebc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800adb6:	2101      	movs	r1, #1
 800adb8:	6838      	ldr	r0, [r7, #0]
 800adba:	f000 fb05 	bl	800b3c8 <prvAddCurrentTaskToDelayedList>
}
 800adbe:	bf00      	nop
 800adc0:	3710      	adds	r7, #16
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	20000f4c 	.word	0x20000f4c

0800adcc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b086      	sub	sp, #24
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	68db      	ldr	r3, [r3, #12]
 800adda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d10b      	bne.n	800adfa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ade2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ade6:	f383 8811 	msr	BASEPRI, r3
 800adea:	f3bf 8f6f 	isb	sy
 800adee:	f3bf 8f4f 	dsb	sy
 800adf2:	60fb      	str	r3, [r7, #12]
}
 800adf4:	bf00      	nop
 800adf6:	bf00      	nop
 800adf8:	e7fd      	b.n	800adf6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	3318      	adds	r3, #24
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7ff f895 	bl	8009f2e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae04:	4b1d      	ldr	r3, [pc, #116]	@ (800ae7c <xTaskRemoveFromEventList+0xb0>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d11c      	bne.n	800ae46 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	3304      	adds	r3, #4
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7ff f88c 	bl	8009f2e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	409a      	lsls	r2, r3
 800ae1e:	4b18      	ldr	r3, [pc, #96]	@ (800ae80 <xTaskRemoveFromEventList+0xb4>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4313      	orrs	r3, r2
 800ae24:	4a16      	ldr	r2, [pc, #88]	@ (800ae80 <xTaskRemoveFromEventList+0xb4>)
 800ae26:	6013      	str	r3, [r2, #0]
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae2c:	4613      	mov	r3, r2
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	4413      	add	r3, r2
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	4a13      	ldr	r2, [pc, #76]	@ (800ae84 <xTaskRemoveFromEventList+0xb8>)
 800ae36:	441a      	add	r2, r3
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	3304      	adds	r3, #4
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	4610      	mov	r0, r2
 800ae40:	f7ff f818 	bl	8009e74 <vListInsertEnd>
 800ae44:	e005      	b.n	800ae52 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	3318      	adds	r3, #24
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	480e      	ldr	r0, [pc, #56]	@ (800ae88 <xTaskRemoveFromEventList+0xbc>)
 800ae4e:	f7ff f811 	bl	8009e74 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae56:	4b0d      	ldr	r3, [pc, #52]	@ (800ae8c <xTaskRemoveFromEventList+0xc0>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d905      	bls.n	800ae6c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ae60:	2301      	movs	r3, #1
 800ae62:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ae64:	4b0a      	ldr	r3, [pc, #40]	@ (800ae90 <xTaskRemoveFromEventList+0xc4>)
 800ae66:	2201      	movs	r2, #1
 800ae68:	601a      	str	r2, [r3, #0]
 800ae6a:	e001      	b.n	800ae70 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ae70:	697b      	ldr	r3, [r7, #20]
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3718      	adds	r7, #24
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	20001074 	.word	0x20001074
 800ae80:	20001054 	.word	0x20001054
 800ae84:	20000f50 	.word	0x20000f50
 800ae88:	2000100c 	.word	0x2000100c
 800ae8c:	20000f4c 	.word	0x20000f4c
 800ae90:	20001060 	.word	0x20001060

0800ae94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ae9c:	4b06      	ldr	r3, [pc, #24]	@ (800aeb8 <vTaskInternalSetTimeOutState+0x24>)
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aea4:	4b05      	ldr	r3, [pc, #20]	@ (800aebc <vTaskInternalSetTimeOutState+0x28>)
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	605a      	str	r2, [r3, #4]
}
 800aeac:	bf00      	nop
 800aeae:	370c      	adds	r7, #12
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr
 800aeb8:	20001064 	.word	0x20001064
 800aebc:	20001050 	.word	0x20001050

0800aec0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b088      	sub	sp, #32
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d10b      	bne.n	800aee8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800aed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aed4:	f383 8811 	msr	BASEPRI, r3
 800aed8:	f3bf 8f6f 	isb	sy
 800aedc:	f3bf 8f4f 	dsb	sy
 800aee0:	613b      	str	r3, [r7, #16]
}
 800aee2:	bf00      	nop
 800aee4:	bf00      	nop
 800aee6:	e7fd      	b.n	800aee4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d10b      	bne.n	800af06 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800aeee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aef2:	f383 8811 	msr	BASEPRI, r3
 800aef6:	f3bf 8f6f 	isb	sy
 800aefa:	f3bf 8f4f 	dsb	sy
 800aefe:	60fb      	str	r3, [r7, #12]
}
 800af00:	bf00      	nop
 800af02:	bf00      	nop
 800af04:	e7fd      	b.n	800af02 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800af06:	f000 fbf7 	bl	800b6f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800af0a:	4b1d      	ldr	r3, [pc, #116]	@ (800af80 <xTaskCheckForTimeOut+0xc0>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	69ba      	ldr	r2, [r7, #24]
 800af16:	1ad3      	subs	r3, r2, r3
 800af18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af22:	d102      	bne.n	800af2a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800af24:	2300      	movs	r3, #0
 800af26:	61fb      	str	r3, [r7, #28]
 800af28:	e023      	b.n	800af72 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	4b15      	ldr	r3, [pc, #84]	@ (800af84 <xTaskCheckForTimeOut+0xc4>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	429a      	cmp	r2, r3
 800af34:	d007      	beq.n	800af46 <xTaskCheckForTimeOut+0x86>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	69ba      	ldr	r2, [r7, #24]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d302      	bcc.n	800af46 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800af40:	2301      	movs	r3, #1
 800af42:	61fb      	str	r3, [r7, #28]
 800af44:	e015      	b.n	800af72 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	697a      	ldr	r2, [r7, #20]
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d20b      	bcs.n	800af68 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	1ad2      	subs	r2, r2, r3
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f7ff ff99 	bl	800ae94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800af62:	2300      	movs	r3, #0
 800af64:	61fb      	str	r3, [r7, #28]
 800af66:	e004      	b.n	800af72 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	2200      	movs	r2, #0
 800af6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800af6e:	2301      	movs	r3, #1
 800af70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800af72:	f000 fbf3 	bl	800b75c <vPortExitCritical>

	return xReturn;
 800af76:	69fb      	ldr	r3, [r7, #28]
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3720      	adds	r7, #32
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}
 800af80:	20001050 	.word	0x20001050
 800af84:	20001064 	.word	0x20001064

0800af88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800af88:	b480      	push	{r7}
 800af8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800af8c:	4b03      	ldr	r3, [pc, #12]	@ (800af9c <vTaskMissedYield+0x14>)
 800af8e:	2201      	movs	r2, #1
 800af90:	601a      	str	r2, [r3, #0]
}
 800af92:	bf00      	nop
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr
 800af9c:	20001060 	.word	0x20001060

0800afa0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800afa8:	f000 f852 	bl	800b050 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800afac:	4b06      	ldr	r3, [pc, #24]	@ (800afc8 <prvIdleTask+0x28>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d9f9      	bls.n	800afa8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800afb4:	4b05      	ldr	r3, [pc, #20]	@ (800afcc <prvIdleTask+0x2c>)
 800afb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afba:	601a      	str	r2, [r3, #0]
 800afbc:	f3bf 8f4f 	dsb	sy
 800afc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800afc4:	e7f0      	b.n	800afa8 <prvIdleTask+0x8>
 800afc6:	bf00      	nop
 800afc8:	20000f50 	.word	0x20000f50
 800afcc:	e000ed04 	.word	0xe000ed04

0800afd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b082      	sub	sp, #8
 800afd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800afd6:	2300      	movs	r3, #0
 800afd8:	607b      	str	r3, [r7, #4]
 800afda:	e00c      	b.n	800aff6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800afdc:	687a      	ldr	r2, [r7, #4]
 800afde:	4613      	mov	r3, r2
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	4413      	add	r3, r2
 800afe4:	009b      	lsls	r3, r3, #2
 800afe6:	4a12      	ldr	r2, [pc, #72]	@ (800b030 <prvInitialiseTaskLists+0x60>)
 800afe8:	4413      	add	r3, r2
 800afea:	4618      	mov	r0, r3
 800afec:	f7fe ff15 	bl	8009e1a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	3301      	adds	r3, #1
 800aff4:	607b      	str	r3, [r7, #4]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2b06      	cmp	r3, #6
 800affa:	d9ef      	bls.n	800afdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800affc:	480d      	ldr	r0, [pc, #52]	@ (800b034 <prvInitialiseTaskLists+0x64>)
 800affe:	f7fe ff0c 	bl	8009e1a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b002:	480d      	ldr	r0, [pc, #52]	@ (800b038 <prvInitialiseTaskLists+0x68>)
 800b004:	f7fe ff09 	bl	8009e1a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b008:	480c      	ldr	r0, [pc, #48]	@ (800b03c <prvInitialiseTaskLists+0x6c>)
 800b00a:	f7fe ff06 	bl	8009e1a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b00e:	480c      	ldr	r0, [pc, #48]	@ (800b040 <prvInitialiseTaskLists+0x70>)
 800b010:	f7fe ff03 	bl	8009e1a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b014:	480b      	ldr	r0, [pc, #44]	@ (800b044 <prvInitialiseTaskLists+0x74>)
 800b016:	f7fe ff00 	bl	8009e1a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b01a:	4b0b      	ldr	r3, [pc, #44]	@ (800b048 <prvInitialiseTaskLists+0x78>)
 800b01c:	4a05      	ldr	r2, [pc, #20]	@ (800b034 <prvInitialiseTaskLists+0x64>)
 800b01e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b020:	4b0a      	ldr	r3, [pc, #40]	@ (800b04c <prvInitialiseTaskLists+0x7c>)
 800b022:	4a05      	ldr	r2, [pc, #20]	@ (800b038 <prvInitialiseTaskLists+0x68>)
 800b024:	601a      	str	r2, [r3, #0]
}
 800b026:	bf00      	nop
 800b028:	3708      	adds	r7, #8
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	bf00      	nop
 800b030:	20000f50 	.word	0x20000f50
 800b034:	20000fdc 	.word	0x20000fdc
 800b038:	20000ff0 	.word	0x20000ff0
 800b03c:	2000100c 	.word	0x2000100c
 800b040:	20001020 	.word	0x20001020
 800b044:	20001038 	.word	0x20001038
 800b048:	20001004 	.word	0x20001004
 800b04c:	20001008 	.word	0x20001008

0800b050 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b056:	e019      	b.n	800b08c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b058:	f000 fb4e 	bl	800b6f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b05c:	4b10      	ldr	r3, [pc, #64]	@ (800b0a0 <prvCheckTasksWaitingTermination+0x50>)
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	68db      	ldr	r3, [r3, #12]
 800b062:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	3304      	adds	r3, #4
 800b068:	4618      	mov	r0, r3
 800b06a:	f7fe ff60 	bl	8009f2e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b06e:	4b0d      	ldr	r3, [pc, #52]	@ (800b0a4 <prvCheckTasksWaitingTermination+0x54>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	3b01      	subs	r3, #1
 800b074:	4a0b      	ldr	r2, [pc, #44]	@ (800b0a4 <prvCheckTasksWaitingTermination+0x54>)
 800b076:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b078:	4b0b      	ldr	r3, [pc, #44]	@ (800b0a8 <prvCheckTasksWaitingTermination+0x58>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	3b01      	subs	r3, #1
 800b07e:	4a0a      	ldr	r2, [pc, #40]	@ (800b0a8 <prvCheckTasksWaitingTermination+0x58>)
 800b080:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b082:	f000 fb6b 	bl	800b75c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f000 f810 	bl	800b0ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b08c:	4b06      	ldr	r3, [pc, #24]	@ (800b0a8 <prvCheckTasksWaitingTermination+0x58>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d1e1      	bne.n	800b058 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b094:	bf00      	nop
 800b096:	bf00      	nop
 800b098:	3708      	adds	r7, #8
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	20001020 	.word	0x20001020
 800b0a4:	2000104c 	.word	0x2000104c
 800b0a8:	20001034 	.word	0x20001034

0800b0ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	334c      	adds	r3, #76	@ 0x4c
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f001 ff9d 	bl	800cff8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d108      	bne.n	800b0da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f000 fd03 	bl	800bad8 <vPortFree>
				vPortFree( pxTCB );
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 fd00 	bl	800bad8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b0d8:	e019      	b.n	800b10e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d103      	bne.n	800b0ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 fcf7 	bl	800bad8 <vPortFree>
	}
 800b0ea:	e010      	b.n	800b10e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800b0f2:	2b02      	cmp	r3, #2
 800b0f4:	d00b      	beq.n	800b10e <prvDeleteTCB+0x62>
	__asm volatile
 800b0f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0fa:	f383 8811 	msr	BASEPRI, r3
 800b0fe:	f3bf 8f6f 	isb	sy
 800b102:	f3bf 8f4f 	dsb	sy
 800b106:	60fb      	str	r3, [r7, #12]
}
 800b108:	bf00      	nop
 800b10a:	bf00      	nop
 800b10c:	e7fd      	b.n	800b10a <prvDeleteTCB+0x5e>
	}
 800b10e:	bf00      	nop
 800b110:	3710      	adds	r7, #16
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
	...

0800b118 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b118:	b480      	push	{r7}
 800b11a:	b083      	sub	sp, #12
 800b11c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b11e:	4b0c      	ldr	r3, [pc, #48]	@ (800b150 <prvResetNextTaskUnblockTime+0x38>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d104      	bne.n	800b132 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b128:	4b0a      	ldr	r3, [pc, #40]	@ (800b154 <prvResetNextTaskUnblockTime+0x3c>)
 800b12a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b12e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b130:	e008      	b.n	800b144 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b132:	4b07      	ldr	r3, [pc, #28]	@ (800b150 <prvResetNextTaskUnblockTime+0x38>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	68db      	ldr	r3, [r3, #12]
 800b138:	68db      	ldr	r3, [r3, #12]
 800b13a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	4a04      	ldr	r2, [pc, #16]	@ (800b154 <prvResetNextTaskUnblockTime+0x3c>)
 800b142:	6013      	str	r3, [r2, #0]
}
 800b144:	bf00      	nop
 800b146:	370c      	adds	r7, #12
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr
 800b150:	20001004 	.word	0x20001004
 800b154:	2000106c 	.word	0x2000106c

0800b158 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b158:	b480      	push	{r7}
 800b15a:	b083      	sub	sp, #12
 800b15c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b15e:	4b0b      	ldr	r3, [pc, #44]	@ (800b18c <xTaskGetSchedulerState+0x34>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d102      	bne.n	800b16c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b166:	2301      	movs	r3, #1
 800b168:	607b      	str	r3, [r7, #4]
 800b16a:	e008      	b.n	800b17e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b16c:	4b08      	ldr	r3, [pc, #32]	@ (800b190 <xTaskGetSchedulerState+0x38>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d102      	bne.n	800b17a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b174:	2302      	movs	r3, #2
 800b176:	607b      	str	r3, [r7, #4]
 800b178:	e001      	b.n	800b17e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b17a:	2300      	movs	r3, #0
 800b17c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b17e:	687b      	ldr	r3, [r7, #4]
	}
 800b180:	4618      	mov	r0, r3
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr
 800b18c:	20001058 	.word	0x20001058
 800b190:	20001074 	.word	0x20001074

0800b194 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d05e      	beq.n	800b268 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1ae:	4b31      	ldr	r3, [pc, #196]	@ (800b274 <xTaskPriorityInherit+0xe0>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d24e      	bcs.n	800b256 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	699b      	ldr	r3, [r3, #24]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	db06      	blt.n	800b1ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1c0:	4b2c      	ldr	r3, [pc, #176]	@ (800b274 <xTaskPriorityInherit+0xe0>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1c6:	f1c3 0207 	rsb	r2, r3, #7
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	6959      	ldr	r1, [r3, #20]
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1d6:	4613      	mov	r3, r2
 800b1d8:	009b      	lsls	r3, r3, #2
 800b1da:	4413      	add	r3, r2
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	4a26      	ldr	r2, [pc, #152]	@ (800b278 <xTaskPriorityInherit+0xe4>)
 800b1e0:	4413      	add	r3, r2
 800b1e2:	4299      	cmp	r1, r3
 800b1e4:	d12f      	bne.n	800b246 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	3304      	adds	r3, #4
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7fe fe9f 	bl	8009f2e <uxListRemove>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d10a      	bne.n	800b20c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	fa02 f303 	lsl.w	r3, r2, r3
 800b200:	43da      	mvns	r2, r3
 800b202:	4b1e      	ldr	r3, [pc, #120]	@ (800b27c <xTaskPriorityInherit+0xe8>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4013      	ands	r3, r2
 800b208:	4a1c      	ldr	r2, [pc, #112]	@ (800b27c <xTaskPriorityInherit+0xe8>)
 800b20a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b20c:	4b19      	ldr	r3, [pc, #100]	@ (800b274 <xTaskPriorityInherit+0xe0>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b21a:	2201      	movs	r2, #1
 800b21c:	409a      	lsls	r2, r3
 800b21e:	4b17      	ldr	r3, [pc, #92]	@ (800b27c <xTaskPriorityInherit+0xe8>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	4313      	orrs	r3, r2
 800b224:	4a15      	ldr	r2, [pc, #84]	@ (800b27c <xTaskPriorityInherit+0xe8>)
 800b226:	6013      	str	r3, [r2, #0]
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b22c:	4613      	mov	r3, r2
 800b22e:	009b      	lsls	r3, r3, #2
 800b230:	4413      	add	r3, r2
 800b232:	009b      	lsls	r3, r3, #2
 800b234:	4a10      	ldr	r2, [pc, #64]	@ (800b278 <xTaskPriorityInherit+0xe4>)
 800b236:	441a      	add	r2, r3
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	3304      	adds	r3, #4
 800b23c:	4619      	mov	r1, r3
 800b23e:	4610      	mov	r0, r2
 800b240:	f7fe fe18 	bl	8009e74 <vListInsertEnd>
 800b244:	e004      	b.n	800b250 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b246:	4b0b      	ldr	r3, [pc, #44]	@ (800b274 <xTaskPriorityInherit+0xe0>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b250:	2301      	movs	r3, #1
 800b252:	60fb      	str	r3, [r7, #12]
 800b254:	e008      	b.n	800b268 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b25a:	4b06      	ldr	r3, [pc, #24]	@ (800b274 <xTaskPriorityInherit+0xe0>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b260:	429a      	cmp	r2, r3
 800b262:	d201      	bcs.n	800b268 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b264:	2301      	movs	r3, #1
 800b266:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b268:	68fb      	ldr	r3, [r7, #12]
	}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3710      	adds	r7, #16
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	20000f4c 	.word	0x20000f4c
 800b278:	20000f50 	.word	0x20000f50
 800b27c:	20001054 	.word	0x20001054

0800b280 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b280:	b580      	push	{r7, lr}
 800b282:	b088      	sub	sp, #32
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b28e:	2301      	movs	r3, #1
 800b290:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d079      	beq.n	800b38c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b298:	69bb      	ldr	r3, [r7, #24]
 800b29a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d10b      	bne.n	800b2b8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800b2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2a4:	f383 8811 	msr	BASEPRI, r3
 800b2a8:	f3bf 8f6f 	isb	sy
 800b2ac:	f3bf 8f4f 	dsb	sy
 800b2b0:	60fb      	str	r3, [r7, #12]
}
 800b2b2:	bf00      	nop
 800b2b4:	bf00      	nop
 800b2b6:	e7fd      	b.n	800b2b4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b2b8:	69bb      	ldr	r3, [r7, #24]
 800b2ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2bc:	683a      	ldr	r2, [r7, #0]
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d902      	bls.n	800b2c8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	61fb      	str	r3, [r7, #28]
 800b2c6:	e002      	b.n	800b2ce <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b2c8:	69bb      	ldr	r3, [r7, #24]
 800b2ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2cc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b2ce:	69bb      	ldr	r3, [r7, #24]
 800b2d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2d2:	69fa      	ldr	r2, [r7, #28]
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d059      	beq.n	800b38c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b2d8:	69bb      	ldr	r3, [r7, #24]
 800b2da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b2dc:	697a      	ldr	r2, [r7, #20]
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	d154      	bne.n	800b38c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b2e2:	4b2c      	ldr	r3, [pc, #176]	@ (800b394 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	69ba      	ldr	r2, [r7, #24]
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d10b      	bne.n	800b304 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800b2ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2f0:	f383 8811 	msr	BASEPRI, r3
 800b2f4:	f3bf 8f6f 	isb	sy
 800b2f8:	f3bf 8f4f 	dsb	sy
 800b2fc:	60bb      	str	r3, [r7, #8]
}
 800b2fe:	bf00      	nop
 800b300:	bf00      	nop
 800b302:	e7fd      	b.n	800b300 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b304:	69bb      	ldr	r3, [r7, #24]
 800b306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b308:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b30a:	69bb      	ldr	r3, [r7, #24]
 800b30c:	69fa      	ldr	r2, [r7, #28]
 800b30e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b310:	69bb      	ldr	r3, [r7, #24]
 800b312:	699b      	ldr	r3, [r3, #24]
 800b314:	2b00      	cmp	r3, #0
 800b316:	db04      	blt.n	800b322 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b318:	69fb      	ldr	r3, [r7, #28]
 800b31a:	f1c3 0207 	rsb	r2, r3, #7
 800b31e:	69bb      	ldr	r3, [r7, #24]
 800b320:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b322:	69bb      	ldr	r3, [r7, #24]
 800b324:	6959      	ldr	r1, [r3, #20]
 800b326:	693a      	ldr	r2, [r7, #16]
 800b328:	4613      	mov	r3, r2
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	4413      	add	r3, r2
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	4a19      	ldr	r2, [pc, #100]	@ (800b398 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b332:	4413      	add	r3, r2
 800b334:	4299      	cmp	r1, r3
 800b336:	d129      	bne.n	800b38c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b338:	69bb      	ldr	r3, [r7, #24]
 800b33a:	3304      	adds	r3, #4
 800b33c:	4618      	mov	r0, r3
 800b33e:	f7fe fdf6 	bl	8009f2e <uxListRemove>
 800b342:	4603      	mov	r3, r0
 800b344:	2b00      	cmp	r3, #0
 800b346:	d10a      	bne.n	800b35e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b348:	69bb      	ldr	r3, [r7, #24]
 800b34a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b34c:	2201      	movs	r2, #1
 800b34e:	fa02 f303 	lsl.w	r3, r2, r3
 800b352:	43da      	mvns	r2, r3
 800b354:	4b11      	ldr	r3, [pc, #68]	@ (800b39c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	4013      	ands	r3, r2
 800b35a:	4a10      	ldr	r2, [pc, #64]	@ (800b39c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b35c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b35e:	69bb      	ldr	r3, [r7, #24]
 800b360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b362:	2201      	movs	r2, #1
 800b364:	409a      	lsls	r2, r3
 800b366:	4b0d      	ldr	r3, [pc, #52]	@ (800b39c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	4313      	orrs	r3, r2
 800b36c:	4a0b      	ldr	r2, [pc, #44]	@ (800b39c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b36e:	6013      	str	r3, [r2, #0]
 800b370:	69bb      	ldr	r3, [r7, #24]
 800b372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b374:	4613      	mov	r3, r2
 800b376:	009b      	lsls	r3, r3, #2
 800b378:	4413      	add	r3, r2
 800b37a:	009b      	lsls	r3, r3, #2
 800b37c:	4a06      	ldr	r2, [pc, #24]	@ (800b398 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b37e:	441a      	add	r2, r3
 800b380:	69bb      	ldr	r3, [r7, #24]
 800b382:	3304      	adds	r3, #4
 800b384:	4619      	mov	r1, r3
 800b386:	4610      	mov	r0, r2
 800b388:	f7fe fd74 	bl	8009e74 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b38c:	bf00      	nop
 800b38e:	3720      	adds	r7, #32
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}
 800b394:	20000f4c 	.word	0x20000f4c
 800b398:	20000f50 	.word	0x20000f50
 800b39c:	20001054 	.word	0x20001054

0800b3a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b3a0:	b480      	push	{r7}
 800b3a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b3a4:	4b07      	ldr	r3, [pc, #28]	@ (800b3c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d004      	beq.n	800b3b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b3ac:	4b05      	ldr	r3, [pc, #20]	@ (800b3c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b3b2:	3201      	adds	r2, #1
 800b3b4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800b3b6:	4b03      	ldr	r3, [pc, #12]	@ (800b3c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
	}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr
 800b3c4:	20000f4c 	.word	0x20000f4c

0800b3c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b084      	sub	sp, #16
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b3d2:	4b29      	ldr	r3, [pc, #164]	@ (800b478 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3d8:	4b28      	ldr	r3, [pc, #160]	@ (800b47c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	3304      	adds	r3, #4
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7fe fda5 	bl	8009f2e <uxListRemove>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d10b      	bne.n	800b402 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b3ea:	4b24      	ldr	r3, [pc, #144]	@ (800b47c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	fa02 f303 	lsl.w	r3, r2, r3
 800b3f6:	43da      	mvns	r2, r3
 800b3f8:	4b21      	ldr	r3, [pc, #132]	@ (800b480 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	4013      	ands	r3, r2
 800b3fe:	4a20      	ldr	r2, [pc, #128]	@ (800b480 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b400:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b408:	d10a      	bne.n	800b420 <prvAddCurrentTaskToDelayedList+0x58>
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d007      	beq.n	800b420 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b410:	4b1a      	ldr	r3, [pc, #104]	@ (800b47c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	3304      	adds	r3, #4
 800b416:	4619      	mov	r1, r3
 800b418:	481a      	ldr	r0, [pc, #104]	@ (800b484 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b41a:	f7fe fd2b 	bl	8009e74 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b41e:	e026      	b.n	800b46e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b420:	68fa      	ldr	r2, [r7, #12]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	4413      	add	r3, r2
 800b426:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b428:	4b14      	ldr	r3, [pc, #80]	@ (800b47c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	68ba      	ldr	r2, [r7, #8]
 800b42e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b430:	68ba      	ldr	r2, [r7, #8]
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	429a      	cmp	r2, r3
 800b436:	d209      	bcs.n	800b44c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b438:	4b13      	ldr	r3, [pc, #76]	@ (800b488 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	4b0f      	ldr	r3, [pc, #60]	@ (800b47c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	3304      	adds	r3, #4
 800b442:	4619      	mov	r1, r3
 800b444:	4610      	mov	r0, r2
 800b446:	f7fe fd39 	bl	8009ebc <vListInsert>
}
 800b44a:	e010      	b.n	800b46e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b44c:	4b0f      	ldr	r3, [pc, #60]	@ (800b48c <prvAddCurrentTaskToDelayedList+0xc4>)
 800b44e:	681a      	ldr	r2, [r3, #0]
 800b450:	4b0a      	ldr	r3, [pc, #40]	@ (800b47c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	3304      	adds	r3, #4
 800b456:	4619      	mov	r1, r3
 800b458:	4610      	mov	r0, r2
 800b45a:	f7fe fd2f 	bl	8009ebc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b45e:	4b0c      	ldr	r3, [pc, #48]	@ (800b490 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	68ba      	ldr	r2, [r7, #8]
 800b464:	429a      	cmp	r2, r3
 800b466:	d202      	bcs.n	800b46e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b468:	4a09      	ldr	r2, [pc, #36]	@ (800b490 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	6013      	str	r3, [r2, #0]
}
 800b46e:	bf00      	nop
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	20001050 	.word	0x20001050
 800b47c:	20000f4c 	.word	0x20000f4c
 800b480:	20001054 	.word	0x20001054
 800b484:	20001038 	.word	0x20001038
 800b488:	20001008 	.word	0x20001008
 800b48c:	20001004 	.word	0x20001004
 800b490:	2000106c 	.word	0x2000106c

0800b494 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b494:	b480      	push	{r7}
 800b496:	b085      	sub	sp, #20
 800b498:	af00      	add	r7, sp, #0
 800b49a:	60f8      	str	r0, [r7, #12]
 800b49c:	60b9      	str	r1, [r7, #8]
 800b49e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	3b04      	subs	r3, #4
 800b4a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b4ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	3b04      	subs	r3, #4
 800b4b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	f023 0201 	bic.w	r2, r3, #1
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	3b04      	subs	r3, #4
 800b4c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b4c4:	4a0c      	ldr	r2, [pc, #48]	@ (800b4f8 <pxPortInitialiseStack+0x64>)
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	3b14      	subs	r3, #20
 800b4ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	3b04      	subs	r3, #4
 800b4da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	f06f 0202 	mvn.w	r2, #2
 800b4e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	3b20      	subs	r3, #32
 800b4e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3714      	adds	r7, #20
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr
 800b4f8:	0800b4fd 	.word	0x0800b4fd

0800b4fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b085      	sub	sp, #20
 800b500:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b502:	2300      	movs	r3, #0
 800b504:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b506:	4b13      	ldr	r3, [pc, #76]	@ (800b554 <prvTaskExitError+0x58>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b50e:	d00b      	beq.n	800b528 <prvTaskExitError+0x2c>
	__asm volatile
 800b510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b514:	f383 8811 	msr	BASEPRI, r3
 800b518:	f3bf 8f6f 	isb	sy
 800b51c:	f3bf 8f4f 	dsb	sy
 800b520:	60fb      	str	r3, [r7, #12]
}
 800b522:	bf00      	nop
 800b524:	bf00      	nop
 800b526:	e7fd      	b.n	800b524 <prvTaskExitError+0x28>
	__asm volatile
 800b528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b52c:	f383 8811 	msr	BASEPRI, r3
 800b530:	f3bf 8f6f 	isb	sy
 800b534:	f3bf 8f4f 	dsb	sy
 800b538:	60bb      	str	r3, [r7, #8]
}
 800b53a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b53c:	bf00      	nop
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d0fc      	beq.n	800b53e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b544:	bf00      	nop
 800b546:	bf00      	nop
 800b548:	3714      	adds	r7, #20
 800b54a:	46bd      	mov	sp, r7
 800b54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b550:	4770      	bx	lr
 800b552:	bf00      	nop
 800b554:	20000014 	.word	0x20000014
	...

0800b560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b560:	4b07      	ldr	r3, [pc, #28]	@ (800b580 <pxCurrentTCBConst2>)
 800b562:	6819      	ldr	r1, [r3, #0]
 800b564:	6808      	ldr	r0, [r1, #0]
 800b566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b56a:	f380 8809 	msr	PSP, r0
 800b56e:	f3bf 8f6f 	isb	sy
 800b572:	f04f 0000 	mov.w	r0, #0
 800b576:	f380 8811 	msr	BASEPRI, r0
 800b57a:	4770      	bx	lr
 800b57c:	f3af 8000 	nop.w

0800b580 <pxCurrentTCBConst2>:
 800b580:	20000f4c 	.word	0x20000f4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b584:	bf00      	nop
 800b586:	bf00      	nop

0800b588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b588:	4808      	ldr	r0, [pc, #32]	@ (800b5ac <prvPortStartFirstTask+0x24>)
 800b58a:	6800      	ldr	r0, [r0, #0]
 800b58c:	6800      	ldr	r0, [r0, #0]
 800b58e:	f380 8808 	msr	MSP, r0
 800b592:	f04f 0000 	mov.w	r0, #0
 800b596:	f380 8814 	msr	CONTROL, r0
 800b59a:	b662      	cpsie	i
 800b59c:	b661      	cpsie	f
 800b59e:	f3bf 8f4f 	dsb	sy
 800b5a2:	f3bf 8f6f 	isb	sy
 800b5a6:	df00      	svc	0
 800b5a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b5aa:	bf00      	nop
 800b5ac:	e000ed08 	.word	0xe000ed08

0800b5b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b086      	sub	sp, #24
 800b5b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b5b6:	4b47      	ldr	r3, [pc, #284]	@ (800b6d4 <xPortStartScheduler+0x124>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4a47      	ldr	r2, [pc, #284]	@ (800b6d8 <xPortStartScheduler+0x128>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d10b      	bne.n	800b5d8 <xPortStartScheduler+0x28>
	__asm volatile
 800b5c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5c4:	f383 8811 	msr	BASEPRI, r3
 800b5c8:	f3bf 8f6f 	isb	sy
 800b5cc:	f3bf 8f4f 	dsb	sy
 800b5d0:	613b      	str	r3, [r7, #16]
}
 800b5d2:	bf00      	nop
 800b5d4:	bf00      	nop
 800b5d6:	e7fd      	b.n	800b5d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b5d8:	4b3e      	ldr	r3, [pc, #248]	@ (800b6d4 <xPortStartScheduler+0x124>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a3f      	ldr	r2, [pc, #252]	@ (800b6dc <xPortStartScheduler+0x12c>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d10b      	bne.n	800b5fa <xPortStartScheduler+0x4a>
	__asm volatile
 800b5e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5e6:	f383 8811 	msr	BASEPRI, r3
 800b5ea:	f3bf 8f6f 	isb	sy
 800b5ee:	f3bf 8f4f 	dsb	sy
 800b5f2:	60fb      	str	r3, [r7, #12]
}
 800b5f4:	bf00      	nop
 800b5f6:	bf00      	nop
 800b5f8:	e7fd      	b.n	800b5f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b5fa:	4b39      	ldr	r3, [pc, #228]	@ (800b6e0 <xPortStartScheduler+0x130>)
 800b5fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	b2db      	uxtb	r3, r3
 800b604:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	22ff      	movs	r2, #255	@ 0xff
 800b60a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	b2db      	uxtb	r3, r3
 800b612:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b614:	78fb      	ldrb	r3, [r7, #3]
 800b616:	b2db      	uxtb	r3, r3
 800b618:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b61c:	b2da      	uxtb	r2, r3
 800b61e:	4b31      	ldr	r3, [pc, #196]	@ (800b6e4 <xPortStartScheduler+0x134>)
 800b620:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b622:	4b31      	ldr	r3, [pc, #196]	@ (800b6e8 <xPortStartScheduler+0x138>)
 800b624:	2207      	movs	r2, #7
 800b626:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b628:	e009      	b.n	800b63e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b62a:	4b2f      	ldr	r3, [pc, #188]	@ (800b6e8 <xPortStartScheduler+0x138>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	3b01      	subs	r3, #1
 800b630:	4a2d      	ldr	r2, [pc, #180]	@ (800b6e8 <xPortStartScheduler+0x138>)
 800b632:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b634:	78fb      	ldrb	r3, [r7, #3]
 800b636:	b2db      	uxtb	r3, r3
 800b638:	005b      	lsls	r3, r3, #1
 800b63a:	b2db      	uxtb	r3, r3
 800b63c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b63e:	78fb      	ldrb	r3, [r7, #3]
 800b640:	b2db      	uxtb	r3, r3
 800b642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b646:	2b80      	cmp	r3, #128	@ 0x80
 800b648:	d0ef      	beq.n	800b62a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b64a:	4b27      	ldr	r3, [pc, #156]	@ (800b6e8 <xPortStartScheduler+0x138>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f1c3 0307 	rsb	r3, r3, #7
 800b652:	2b04      	cmp	r3, #4
 800b654:	d00b      	beq.n	800b66e <xPortStartScheduler+0xbe>
	__asm volatile
 800b656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b65a:	f383 8811 	msr	BASEPRI, r3
 800b65e:	f3bf 8f6f 	isb	sy
 800b662:	f3bf 8f4f 	dsb	sy
 800b666:	60bb      	str	r3, [r7, #8]
}
 800b668:	bf00      	nop
 800b66a:	bf00      	nop
 800b66c:	e7fd      	b.n	800b66a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b66e:	4b1e      	ldr	r3, [pc, #120]	@ (800b6e8 <xPortStartScheduler+0x138>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	021b      	lsls	r3, r3, #8
 800b674:	4a1c      	ldr	r2, [pc, #112]	@ (800b6e8 <xPortStartScheduler+0x138>)
 800b676:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b678:	4b1b      	ldr	r3, [pc, #108]	@ (800b6e8 <xPortStartScheduler+0x138>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b680:	4a19      	ldr	r2, [pc, #100]	@ (800b6e8 <xPortStartScheduler+0x138>)
 800b682:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	b2da      	uxtb	r2, r3
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b68c:	4b17      	ldr	r3, [pc, #92]	@ (800b6ec <xPortStartScheduler+0x13c>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a16      	ldr	r2, [pc, #88]	@ (800b6ec <xPortStartScheduler+0x13c>)
 800b692:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b696:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b698:	4b14      	ldr	r3, [pc, #80]	@ (800b6ec <xPortStartScheduler+0x13c>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4a13      	ldr	r2, [pc, #76]	@ (800b6ec <xPortStartScheduler+0x13c>)
 800b69e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b6a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b6a4:	f000 f8da 	bl	800b85c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b6a8:	4b11      	ldr	r3, [pc, #68]	@ (800b6f0 <xPortStartScheduler+0x140>)
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b6ae:	f000 f8f9 	bl	800b8a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b6b2:	4b10      	ldr	r3, [pc, #64]	@ (800b6f4 <xPortStartScheduler+0x144>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	4a0f      	ldr	r2, [pc, #60]	@ (800b6f4 <xPortStartScheduler+0x144>)
 800b6b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b6bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b6be:	f7ff ff63 	bl	800b588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b6c2:	f7ff faf9 	bl	800acb8 <vTaskSwitchContext>
	prvTaskExitError();
 800b6c6:	f7ff ff19 	bl	800b4fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b6ca:	2300      	movs	r3, #0
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3718      	adds	r7, #24
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}
 800b6d4:	e000ed00 	.word	0xe000ed00
 800b6d8:	410fc271 	.word	0x410fc271
 800b6dc:	410fc270 	.word	0x410fc270
 800b6e0:	e000e400 	.word	0xe000e400
 800b6e4:	20001078 	.word	0x20001078
 800b6e8:	2000107c 	.word	0x2000107c
 800b6ec:	e000ed20 	.word	0xe000ed20
 800b6f0:	20000014 	.word	0x20000014
 800b6f4:	e000ef34 	.word	0xe000ef34

0800b6f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b083      	sub	sp, #12
 800b6fc:	af00      	add	r7, sp, #0
	__asm volatile
 800b6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b702:	f383 8811 	msr	BASEPRI, r3
 800b706:	f3bf 8f6f 	isb	sy
 800b70a:	f3bf 8f4f 	dsb	sy
 800b70e:	607b      	str	r3, [r7, #4]
}
 800b710:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b712:	4b10      	ldr	r3, [pc, #64]	@ (800b754 <vPortEnterCritical+0x5c>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	3301      	adds	r3, #1
 800b718:	4a0e      	ldr	r2, [pc, #56]	@ (800b754 <vPortEnterCritical+0x5c>)
 800b71a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b71c:	4b0d      	ldr	r3, [pc, #52]	@ (800b754 <vPortEnterCritical+0x5c>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	2b01      	cmp	r3, #1
 800b722:	d110      	bne.n	800b746 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b724:	4b0c      	ldr	r3, [pc, #48]	@ (800b758 <vPortEnterCritical+0x60>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	b2db      	uxtb	r3, r3
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d00b      	beq.n	800b746 <vPortEnterCritical+0x4e>
	__asm volatile
 800b72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b732:	f383 8811 	msr	BASEPRI, r3
 800b736:	f3bf 8f6f 	isb	sy
 800b73a:	f3bf 8f4f 	dsb	sy
 800b73e:	603b      	str	r3, [r7, #0]
}
 800b740:	bf00      	nop
 800b742:	bf00      	nop
 800b744:	e7fd      	b.n	800b742 <vPortEnterCritical+0x4a>
	}
}
 800b746:	bf00      	nop
 800b748:	370c      	adds	r7, #12
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr
 800b752:	bf00      	nop
 800b754:	20000014 	.word	0x20000014
 800b758:	e000ed04 	.word	0xe000ed04

0800b75c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b75c:	b480      	push	{r7}
 800b75e:	b083      	sub	sp, #12
 800b760:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b762:	4b12      	ldr	r3, [pc, #72]	@ (800b7ac <vPortExitCritical+0x50>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d10b      	bne.n	800b782 <vPortExitCritical+0x26>
	__asm volatile
 800b76a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b76e:	f383 8811 	msr	BASEPRI, r3
 800b772:	f3bf 8f6f 	isb	sy
 800b776:	f3bf 8f4f 	dsb	sy
 800b77a:	607b      	str	r3, [r7, #4]
}
 800b77c:	bf00      	nop
 800b77e:	bf00      	nop
 800b780:	e7fd      	b.n	800b77e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b782:	4b0a      	ldr	r3, [pc, #40]	@ (800b7ac <vPortExitCritical+0x50>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	3b01      	subs	r3, #1
 800b788:	4a08      	ldr	r2, [pc, #32]	@ (800b7ac <vPortExitCritical+0x50>)
 800b78a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b78c:	4b07      	ldr	r3, [pc, #28]	@ (800b7ac <vPortExitCritical+0x50>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d105      	bne.n	800b7a0 <vPortExitCritical+0x44>
 800b794:	2300      	movs	r3, #0
 800b796:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	f383 8811 	msr	BASEPRI, r3
}
 800b79e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b7a0:	bf00      	nop
 800b7a2:	370c      	adds	r7, #12
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr
 800b7ac:	20000014 	.word	0x20000014

0800b7b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b7b0:	f3ef 8009 	mrs	r0, PSP
 800b7b4:	f3bf 8f6f 	isb	sy
 800b7b8:	4b15      	ldr	r3, [pc, #84]	@ (800b810 <pxCurrentTCBConst>)
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	f01e 0f10 	tst.w	lr, #16
 800b7c0:	bf08      	it	eq
 800b7c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b7c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ca:	6010      	str	r0, [r2, #0]
 800b7cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b7d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b7d4:	f380 8811 	msr	BASEPRI, r0
 800b7d8:	f3bf 8f4f 	dsb	sy
 800b7dc:	f3bf 8f6f 	isb	sy
 800b7e0:	f7ff fa6a 	bl	800acb8 <vTaskSwitchContext>
 800b7e4:	f04f 0000 	mov.w	r0, #0
 800b7e8:	f380 8811 	msr	BASEPRI, r0
 800b7ec:	bc09      	pop	{r0, r3}
 800b7ee:	6819      	ldr	r1, [r3, #0]
 800b7f0:	6808      	ldr	r0, [r1, #0]
 800b7f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f6:	f01e 0f10 	tst.w	lr, #16
 800b7fa:	bf08      	it	eq
 800b7fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b800:	f380 8809 	msr	PSP, r0
 800b804:	f3bf 8f6f 	isb	sy
 800b808:	4770      	bx	lr
 800b80a:	bf00      	nop
 800b80c:	f3af 8000 	nop.w

0800b810 <pxCurrentTCBConst>:
 800b810:	20000f4c 	.word	0x20000f4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b814:	bf00      	nop
 800b816:	bf00      	nop

0800b818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
	__asm volatile
 800b81e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b822:	f383 8811 	msr	BASEPRI, r3
 800b826:	f3bf 8f6f 	isb	sy
 800b82a:	f3bf 8f4f 	dsb	sy
 800b82e:	607b      	str	r3, [r7, #4]
}
 800b830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b832:	f7ff f987 	bl	800ab44 <xTaskIncrementTick>
 800b836:	4603      	mov	r3, r0
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d003      	beq.n	800b844 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b83c:	4b06      	ldr	r3, [pc, #24]	@ (800b858 <SysTick_Handler+0x40>)
 800b83e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b842:	601a      	str	r2, [r3, #0]
 800b844:	2300      	movs	r3, #0
 800b846:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	f383 8811 	msr	BASEPRI, r3
}
 800b84e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b850:	bf00      	nop
 800b852:	3708      	adds	r7, #8
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}
 800b858:	e000ed04 	.word	0xe000ed04

0800b85c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b85c:	b480      	push	{r7}
 800b85e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b860:	4b0b      	ldr	r3, [pc, #44]	@ (800b890 <vPortSetupTimerInterrupt+0x34>)
 800b862:	2200      	movs	r2, #0
 800b864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b866:	4b0b      	ldr	r3, [pc, #44]	@ (800b894 <vPortSetupTimerInterrupt+0x38>)
 800b868:	2200      	movs	r2, #0
 800b86a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b86c:	4b0a      	ldr	r3, [pc, #40]	@ (800b898 <vPortSetupTimerInterrupt+0x3c>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a0a      	ldr	r2, [pc, #40]	@ (800b89c <vPortSetupTimerInterrupt+0x40>)
 800b872:	fba2 2303 	umull	r2, r3, r2, r3
 800b876:	099b      	lsrs	r3, r3, #6
 800b878:	4a09      	ldr	r2, [pc, #36]	@ (800b8a0 <vPortSetupTimerInterrupt+0x44>)
 800b87a:	3b01      	subs	r3, #1
 800b87c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b87e:	4b04      	ldr	r3, [pc, #16]	@ (800b890 <vPortSetupTimerInterrupt+0x34>)
 800b880:	2207      	movs	r2, #7
 800b882:	601a      	str	r2, [r3, #0]
}
 800b884:	bf00      	nop
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr
 800b88e:	bf00      	nop
 800b890:	e000e010 	.word	0xe000e010
 800b894:	e000e018 	.word	0xe000e018
 800b898:	20000000 	.word	0x20000000
 800b89c:	10624dd3 	.word	0x10624dd3
 800b8a0:	e000e014 	.word	0xe000e014

0800b8a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b8a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b8b4 <vPortEnableVFP+0x10>
 800b8a8:	6801      	ldr	r1, [r0, #0]
 800b8aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b8ae:	6001      	str	r1, [r0, #0]
 800b8b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b8b2:	bf00      	nop
 800b8b4:	e000ed88 	.word	0xe000ed88

0800b8b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b085      	sub	sp, #20
 800b8bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b8be:	f3ef 8305 	mrs	r3, IPSR
 800b8c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2b0f      	cmp	r3, #15
 800b8c8:	d915      	bls.n	800b8f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b8ca:	4a18      	ldr	r2, [pc, #96]	@ (800b92c <vPortValidateInterruptPriority+0x74>)
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	4413      	add	r3, r2
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b8d4:	4b16      	ldr	r3, [pc, #88]	@ (800b930 <vPortValidateInterruptPriority+0x78>)
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	7afa      	ldrb	r2, [r7, #11]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d20b      	bcs.n	800b8f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8e2:	f383 8811 	msr	BASEPRI, r3
 800b8e6:	f3bf 8f6f 	isb	sy
 800b8ea:	f3bf 8f4f 	dsb	sy
 800b8ee:	607b      	str	r3, [r7, #4]
}
 800b8f0:	bf00      	nop
 800b8f2:	bf00      	nop
 800b8f4:	e7fd      	b.n	800b8f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b8f6:	4b0f      	ldr	r3, [pc, #60]	@ (800b934 <vPortValidateInterruptPriority+0x7c>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b8fe:	4b0e      	ldr	r3, [pc, #56]	@ (800b938 <vPortValidateInterruptPriority+0x80>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	429a      	cmp	r2, r3
 800b904:	d90b      	bls.n	800b91e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b90a:	f383 8811 	msr	BASEPRI, r3
 800b90e:	f3bf 8f6f 	isb	sy
 800b912:	f3bf 8f4f 	dsb	sy
 800b916:	603b      	str	r3, [r7, #0]
}
 800b918:	bf00      	nop
 800b91a:	bf00      	nop
 800b91c:	e7fd      	b.n	800b91a <vPortValidateInterruptPriority+0x62>
	}
 800b91e:	bf00      	nop
 800b920:	3714      	adds	r7, #20
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr
 800b92a:	bf00      	nop
 800b92c:	e000e3f0 	.word	0xe000e3f0
 800b930:	20001078 	.word	0x20001078
 800b934:	e000ed0c 	.word	0xe000ed0c
 800b938:	2000107c 	.word	0x2000107c

0800b93c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b08a      	sub	sp, #40	@ 0x28
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b944:	2300      	movs	r3, #0
 800b946:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b948:	f7ff f850 	bl	800a9ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b94c:	4b5c      	ldr	r3, [pc, #368]	@ (800bac0 <pvPortMalloc+0x184>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d101      	bne.n	800b958 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b954:	f000 f924 	bl	800bba0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b958:	4b5a      	ldr	r3, [pc, #360]	@ (800bac4 <pvPortMalloc+0x188>)
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	4013      	ands	r3, r2
 800b960:	2b00      	cmp	r3, #0
 800b962:	f040 8095 	bne.w	800ba90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d01e      	beq.n	800b9aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b96c:	2208      	movs	r2, #8
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	4413      	add	r3, r2
 800b972:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f003 0307 	and.w	r3, r3, #7
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d015      	beq.n	800b9aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f023 0307 	bic.w	r3, r3, #7
 800b984:	3308      	adds	r3, #8
 800b986:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f003 0307 	and.w	r3, r3, #7
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d00b      	beq.n	800b9aa <pvPortMalloc+0x6e>
	__asm volatile
 800b992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b996:	f383 8811 	msr	BASEPRI, r3
 800b99a:	f3bf 8f6f 	isb	sy
 800b99e:	f3bf 8f4f 	dsb	sy
 800b9a2:	617b      	str	r3, [r7, #20]
}
 800b9a4:	bf00      	nop
 800b9a6:	bf00      	nop
 800b9a8:	e7fd      	b.n	800b9a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d06f      	beq.n	800ba90 <pvPortMalloc+0x154>
 800b9b0:	4b45      	ldr	r3, [pc, #276]	@ (800bac8 <pvPortMalloc+0x18c>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	687a      	ldr	r2, [r7, #4]
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d86a      	bhi.n	800ba90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b9ba:	4b44      	ldr	r3, [pc, #272]	@ (800bacc <pvPortMalloc+0x190>)
 800b9bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b9be:	4b43      	ldr	r3, [pc, #268]	@ (800bacc <pvPortMalloc+0x190>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b9c4:	e004      	b.n	800b9d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	687a      	ldr	r2, [r7, #4]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d903      	bls.n	800b9e2 <pvPortMalloc+0xa6>
 800b9da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d1f1      	bne.n	800b9c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b9e2:	4b37      	ldr	r3, [pc, #220]	@ (800bac0 <pvPortMalloc+0x184>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d051      	beq.n	800ba90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b9ec:	6a3b      	ldr	r3, [r7, #32]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2208      	movs	r2, #8
 800b9f2:	4413      	add	r3, r2
 800b9f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	6a3b      	ldr	r3, [r7, #32]
 800b9fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b9fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba00:	685a      	ldr	r2, [r3, #4]
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	1ad2      	subs	r2, r2, r3
 800ba06:	2308      	movs	r3, #8
 800ba08:	005b      	lsls	r3, r3, #1
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d920      	bls.n	800ba50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ba0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	4413      	add	r3, r2
 800ba14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba16:	69bb      	ldr	r3, [r7, #24]
 800ba18:	f003 0307 	and.w	r3, r3, #7
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d00b      	beq.n	800ba38 <pvPortMalloc+0xfc>
	__asm volatile
 800ba20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba24:	f383 8811 	msr	BASEPRI, r3
 800ba28:	f3bf 8f6f 	isb	sy
 800ba2c:	f3bf 8f4f 	dsb	sy
 800ba30:	613b      	str	r3, [r7, #16]
}
 800ba32:	bf00      	nop
 800ba34:	bf00      	nop
 800ba36:	e7fd      	b.n	800ba34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ba38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba3a:	685a      	ldr	r2, [r3, #4]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	1ad2      	subs	r2, r2, r3
 800ba40:	69bb      	ldr	r3, [r7, #24]
 800ba42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ba44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba46:	687a      	ldr	r2, [r7, #4]
 800ba48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ba4a:	69b8      	ldr	r0, [r7, #24]
 800ba4c:	f000 f90a 	bl	800bc64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ba50:	4b1d      	ldr	r3, [pc, #116]	@ (800bac8 <pvPortMalloc+0x18c>)
 800ba52:	681a      	ldr	r2, [r3, #0]
 800ba54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	1ad3      	subs	r3, r2, r3
 800ba5a:	4a1b      	ldr	r2, [pc, #108]	@ (800bac8 <pvPortMalloc+0x18c>)
 800ba5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ba5e:	4b1a      	ldr	r3, [pc, #104]	@ (800bac8 <pvPortMalloc+0x18c>)
 800ba60:	681a      	ldr	r2, [r3, #0]
 800ba62:	4b1b      	ldr	r3, [pc, #108]	@ (800bad0 <pvPortMalloc+0x194>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d203      	bcs.n	800ba72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ba6a:	4b17      	ldr	r3, [pc, #92]	@ (800bac8 <pvPortMalloc+0x18c>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4a18      	ldr	r2, [pc, #96]	@ (800bad0 <pvPortMalloc+0x194>)
 800ba70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ba72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba74:	685a      	ldr	r2, [r3, #4]
 800ba76:	4b13      	ldr	r3, [pc, #76]	@ (800bac4 <pvPortMalloc+0x188>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	431a      	orrs	r2, r3
 800ba7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ba80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba82:	2200      	movs	r2, #0
 800ba84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ba86:	4b13      	ldr	r3, [pc, #76]	@ (800bad4 <pvPortMalloc+0x198>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	4a11      	ldr	r2, [pc, #68]	@ (800bad4 <pvPortMalloc+0x198>)
 800ba8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ba90:	f7fe ffba 	bl	800aa08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba94:	69fb      	ldr	r3, [r7, #28]
 800ba96:	f003 0307 	and.w	r3, r3, #7
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d00b      	beq.n	800bab6 <pvPortMalloc+0x17a>
	__asm volatile
 800ba9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baa2:	f383 8811 	msr	BASEPRI, r3
 800baa6:	f3bf 8f6f 	isb	sy
 800baaa:	f3bf 8f4f 	dsb	sy
 800baae:	60fb      	str	r3, [r7, #12]
}
 800bab0:	bf00      	nop
 800bab2:	bf00      	nop
 800bab4:	e7fd      	b.n	800bab2 <pvPortMalloc+0x176>
	return pvReturn;
 800bab6:	69fb      	ldr	r3, [r7, #28]
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3728      	adds	r7, #40	@ 0x28
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}
 800bac0:	20005ea8 	.word	0x20005ea8
 800bac4:	20005ebc 	.word	0x20005ebc
 800bac8:	20005eac 	.word	0x20005eac
 800bacc:	20005ea0 	.word	0x20005ea0
 800bad0:	20005eb0 	.word	0x20005eb0
 800bad4:	20005eb4 	.word	0x20005eb4

0800bad8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b086      	sub	sp, #24
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d04f      	beq.n	800bb8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800baea:	2308      	movs	r3, #8
 800baec:	425b      	negs	r3, r3
 800baee:	697a      	ldr	r2, [r7, #20]
 800baf0:	4413      	add	r3, r2
 800baf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	685a      	ldr	r2, [r3, #4]
 800bafc:	4b25      	ldr	r3, [pc, #148]	@ (800bb94 <vPortFree+0xbc>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4013      	ands	r3, r2
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d10b      	bne.n	800bb1e <vPortFree+0x46>
	__asm volatile
 800bb06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb0a:	f383 8811 	msr	BASEPRI, r3
 800bb0e:	f3bf 8f6f 	isb	sy
 800bb12:	f3bf 8f4f 	dsb	sy
 800bb16:	60fb      	str	r3, [r7, #12]
}
 800bb18:	bf00      	nop
 800bb1a:	bf00      	nop
 800bb1c:	e7fd      	b.n	800bb1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d00b      	beq.n	800bb3e <vPortFree+0x66>
	__asm volatile
 800bb26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb2a:	f383 8811 	msr	BASEPRI, r3
 800bb2e:	f3bf 8f6f 	isb	sy
 800bb32:	f3bf 8f4f 	dsb	sy
 800bb36:	60bb      	str	r3, [r7, #8]
}
 800bb38:	bf00      	nop
 800bb3a:	bf00      	nop
 800bb3c:	e7fd      	b.n	800bb3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	685a      	ldr	r2, [r3, #4]
 800bb42:	4b14      	ldr	r3, [pc, #80]	@ (800bb94 <vPortFree+0xbc>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4013      	ands	r3, r2
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d01e      	beq.n	800bb8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d11a      	bne.n	800bb8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	685a      	ldr	r2, [r3, #4]
 800bb58:	4b0e      	ldr	r3, [pc, #56]	@ (800bb94 <vPortFree+0xbc>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	43db      	mvns	r3, r3
 800bb5e:	401a      	ands	r2, r3
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bb64:	f7fe ff42 	bl	800a9ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	685a      	ldr	r2, [r3, #4]
 800bb6c:	4b0a      	ldr	r3, [pc, #40]	@ (800bb98 <vPortFree+0xc0>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	4413      	add	r3, r2
 800bb72:	4a09      	ldr	r2, [pc, #36]	@ (800bb98 <vPortFree+0xc0>)
 800bb74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bb76:	6938      	ldr	r0, [r7, #16]
 800bb78:	f000 f874 	bl	800bc64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bb7c:	4b07      	ldr	r3, [pc, #28]	@ (800bb9c <vPortFree+0xc4>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	3301      	adds	r3, #1
 800bb82:	4a06      	ldr	r2, [pc, #24]	@ (800bb9c <vPortFree+0xc4>)
 800bb84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bb86:	f7fe ff3f 	bl	800aa08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bb8a:	bf00      	nop
 800bb8c:	3718      	adds	r7, #24
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
 800bb92:	bf00      	nop
 800bb94:	20005ebc 	.word	0x20005ebc
 800bb98:	20005eac 	.word	0x20005eac
 800bb9c:	20005eb8 	.word	0x20005eb8

0800bba0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bba0:	b480      	push	{r7}
 800bba2:	b085      	sub	sp, #20
 800bba4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bba6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800bbaa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bbac:	4b27      	ldr	r3, [pc, #156]	@ (800bc4c <prvHeapInit+0xac>)
 800bbae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f003 0307 	and.w	r3, r3, #7
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d00c      	beq.n	800bbd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	3307      	adds	r3, #7
 800bbbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f023 0307 	bic.w	r3, r3, #7
 800bbc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bbc8:	68ba      	ldr	r2, [r7, #8]
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	1ad3      	subs	r3, r2, r3
 800bbce:	4a1f      	ldr	r2, [pc, #124]	@ (800bc4c <prvHeapInit+0xac>)
 800bbd0:	4413      	add	r3, r2
 800bbd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bbd8:	4a1d      	ldr	r2, [pc, #116]	@ (800bc50 <prvHeapInit+0xb0>)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bbde:	4b1c      	ldr	r3, [pc, #112]	@ (800bc50 <prvHeapInit+0xb0>)
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	68ba      	ldr	r2, [r7, #8]
 800bbe8:	4413      	add	r3, r2
 800bbea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bbec:	2208      	movs	r2, #8
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	1a9b      	subs	r3, r3, r2
 800bbf2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f023 0307 	bic.w	r3, r3, #7
 800bbfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	4a15      	ldr	r2, [pc, #84]	@ (800bc54 <prvHeapInit+0xb4>)
 800bc00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bc02:	4b14      	ldr	r3, [pc, #80]	@ (800bc54 <prvHeapInit+0xb4>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2200      	movs	r2, #0
 800bc08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bc0a:	4b12      	ldr	r3, [pc, #72]	@ (800bc54 <prvHeapInit+0xb4>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	68fa      	ldr	r2, [r7, #12]
 800bc1a:	1ad2      	subs	r2, r2, r3
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bc20:	4b0c      	ldr	r3, [pc, #48]	@ (800bc54 <prvHeapInit+0xb4>)
 800bc22:	681a      	ldr	r2, [r3, #0]
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	685b      	ldr	r3, [r3, #4]
 800bc2c:	4a0a      	ldr	r2, [pc, #40]	@ (800bc58 <prvHeapInit+0xb8>)
 800bc2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	4a09      	ldr	r2, [pc, #36]	@ (800bc5c <prvHeapInit+0xbc>)
 800bc36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bc38:	4b09      	ldr	r3, [pc, #36]	@ (800bc60 <prvHeapInit+0xc0>)
 800bc3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bc3e:	601a      	str	r2, [r3, #0]
}
 800bc40:	bf00      	nop
 800bc42:	3714      	adds	r7, #20
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr
 800bc4c:	20001080 	.word	0x20001080
 800bc50:	20005ea0 	.word	0x20005ea0
 800bc54:	20005ea8 	.word	0x20005ea8
 800bc58:	20005eb0 	.word	0x20005eb0
 800bc5c:	20005eac 	.word	0x20005eac
 800bc60:	20005ebc 	.word	0x20005ebc

0800bc64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bc64:	b480      	push	{r7}
 800bc66:	b085      	sub	sp, #20
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bc6c:	4b28      	ldr	r3, [pc, #160]	@ (800bd10 <prvInsertBlockIntoFreeList+0xac>)
 800bc6e:	60fb      	str	r3, [r7, #12]
 800bc70:	e002      	b.n	800bc78 <prvInsertBlockIntoFreeList+0x14>
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	60fb      	str	r3, [r7, #12]
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	687a      	ldr	r2, [r7, #4]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d8f7      	bhi.n	800bc72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	685b      	ldr	r3, [r3, #4]
 800bc8a:	68ba      	ldr	r2, [r7, #8]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	687a      	ldr	r2, [r7, #4]
 800bc90:	429a      	cmp	r2, r3
 800bc92:	d108      	bne.n	800bca6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	685a      	ldr	r2, [r3, #4]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	685b      	ldr	r3, [r3, #4]
 800bc9c:	441a      	add	r2, r3
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	68ba      	ldr	r2, [r7, #8]
 800bcb0:	441a      	add	r2, r3
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d118      	bne.n	800bcec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681a      	ldr	r2, [r3, #0]
 800bcbe:	4b15      	ldr	r3, [pc, #84]	@ (800bd14 <prvInsertBlockIntoFreeList+0xb0>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d00d      	beq.n	800bce2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	685a      	ldr	r2, [r3, #4]
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	441a      	add	r2, r3
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	681a      	ldr	r2, [r3, #0]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	601a      	str	r2, [r3, #0]
 800bce0:	e008      	b.n	800bcf4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bce2:	4b0c      	ldr	r3, [pc, #48]	@ (800bd14 <prvInsertBlockIntoFreeList+0xb0>)
 800bce4:	681a      	ldr	r2, [r3, #0]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	601a      	str	r2, [r3, #0]
 800bcea:	e003      	b.n	800bcf4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681a      	ldr	r2, [r3, #0]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bcf4:	68fa      	ldr	r2, [r7, #12]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d002      	beq.n	800bd02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	687a      	ldr	r2, [r7, #4]
 800bd00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd02:	bf00      	nop
 800bd04:	3714      	adds	r7, #20
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr
 800bd0e:	bf00      	nop
 800bd10:	20005ea0 	.word	0x20005ea0
 800bd14:	20005ea8 	.word	0x20005ea8

0800bd18 <atoi>:
 800bd18:	220a      	movs	r2, #10
 800bd1a:	2100      	movs	r1, #0
 800bd1c:	f000 b87c 	b.w	800be18 <strtol>

0800bd20 <_strtol_l.constprop.0>:
 800bd20:	2b24      	cmp	r3, #36	@ 0x24
 800bd22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd26:	4686      	mov	lr, r0
 800bd28:	4690      	mov	r8, r2
 800bd2a:	d801      	bhi.n	800bd30 <_strtol_l.constprop.0+0x10>
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d106      	bne.n	800bd3e <_strtol_l.constprop.0+0x1e>
 800bd30:	f001 f9ee 	bl	800d110 <__errno>
 800bd34:	2316      	movs	r3, #22
 800bd36:	6003      	str	r3, [r0, #0]
 800bd38:	2000      	movs	r0, #0
 800bd3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd3e:	4834      	ldr	r0, [pc, #208]	@ (800be10 <_strtol_l.constprop.0+0xf0>)
 800bd40:	460d      	mov	r5, r1
 800bd42:	462a      	mov	r2, r5
 800bd44:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd48:	5d06      	ldrb	r6, [r0, r4]
 800bd4a:	f016 0608 	ands.w	r6, r6, #8
 800bd4e:	d1f8      	bne.n	800bd42 <_strtol_l.constprop.0+0x22>
 800bd50:	2c2d      	cmp	r4, #45	@ 0x2d
 800bd52:	d12d      	bne.n	800bdb0 <_strtol_l.constprop.0+0x90>
 800bd54:	782c      	ldrb	r4, [r5, #0]
 800bd56:	2601      	movs	r6, #1
 800bd58:	1c95      	adds	r5, r2, #2
 800bd5a:	f033 0210 	bics.w	r2, r3, #16
 800bd5e:	d109      	bne.n	800bd74 <_strtol_l.constprop.0+0x54>
 800bd60:	2c30      	cmp	r4, #48	@ 0x30
 800bd62:	d12a      	bne.n	800bdba <_strtol_l.constprop.0+0x9a>
 800bd64:	782a      	ldrb	r2, [r5, #0]
 800bd66:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bd6a:	2a58      	cmp	r2, #88	@ 0x58
 800bd6c:	d125      	bne.n	800bdba <_strtol_l.constprop.0+0x9a>
 800bd6e:	786c      	ldrb	r4, [r5, #1]
 800bd70:	2310      	movs	r3, #16
 800bd72:	3502      	adds	r5, #2
 800bd74:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bd78:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	fbbc f9f3 	udiv	r9, ip, r3
 800bd82:	4610      	mov	r0, r2
 800bd84:	fb03 ca19 	mls	sl, r3, r9, ip
 800bd88:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bd8c:	2f09      	cmp	r7, #9
 800bd8e:	d81b      	bhi.n	800bdc8 <_strtol_l.constprop.0+0xa8>
 800bd90:	463c      	mov	r4, r7
 800bd92:	42a3      	cmp	r3, r4
 800bd94:	dd27      	ble.n	800bde6 <_strtol_l.constprop.0+0xc6>
 800bd96:	1c57      	adds	r7, r2, #1
 800bd98:	d007      	beq.n	800bdaa <_strtol_l.constprop.0+0x8a>
 800bd9a:	4581      	cmp	r9, r0
 800bd9c:	d320      	bcc.n	800bde0 <_strtol_l.constprop.0+0xc0>
 800bd9e:	d101      	bne.n	800bda4 <_strtol_l.constprop.0+0x84>
 800bda0:	45a2      	cmp	sl, r4
 800bda2:	db1d      	blt.n	800bde0 <_strtol_l.constprop.0+0xc0>
 800bda4:	fb00 4003 	mla	r0, r0, r3, r4
 800bda8:	2201      	movs	r2, #1
 800bdaa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bdae:	e7eb      	b.n	800bd88 <_strtol_l.constprop.0+0x68>
 800bdb0:	2c2b      	cmp	r4, #43	@ 0x2b
 800bdb2:	bf04      	itt	eq
 800bdb4:	782c      	ldrbeq	r4, [r5, #0]
 800bdb6:	1c95      	addeq	r5, r2, #2
 800bdb8:	e7cf      	b.n	800bd5a <_strtol_l.constprop.0+0x3a>
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d1da      	bne.n	800bd74 <_strtol_l.constprop.0+0x54>
 800bdbe:	2c30      	cmp	r4, #48	@ 0x30
 800bdc0:	bf0c      	ite	eq
 800bdc2:	2308      	moveq	r3, #8
 800bdc4:	230a      	movne	r3, #10
 800bdc6:	e7d5      	b.n	800bd74 <_strtol_l.constprop.0+0x54>
 800bdc8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bdcc:	2f19      	cmp	r7, #25
 800bdce:	d801      	bhi.n	800bdd4 <_strtol_l.constprop.0+0xb4>
 800bdd0:	3c37      	subs	r4, #55	@ 0x37
 800bdd2:	e7de      	b.n	800bd92 <_strtol_l.constprop.0+0x72>
 800bdd4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bdd8:	2f19      	cmp	r7, #25
 800bdda:	d804      	bhi.n	800bde6 <_strtol_l.constprop.0+0xc6>
 800bddc:	3c57      	subs	r4, #87	@ 0x57
 800bdde:	e7d8      	b.n	800bd92 <_strtol_l.constprop.0+0x72>
 800bde0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bde4:	e7e1      	b.n	800bdaa <_strtol_l.constprop.0+0x8a>
 800bde6:	1c53      	adds	r3, r2, #1
 800bde8:	d108      	bne.n	800bdfc <_strtol_l.constprop.0+0xdc>
 800bdea:	2322      	movs	r3, #34	@ 0x22
 800bdec:	f8ce 3000 	str.w	r3, [lr]
 800bdf0:	4660      	mov	r0, ip
 800bdf2:	f1b8 0f00 	cmp.w	r8, #0
 800bdf6:	d0a0      	beq.n	800bd3a <_strtol_l.constprop.0+0x1a>
 800bdf8:	1e69      	subs	r1, r5, #1
 800bdfa:	e006      	b.n	800be0a <_strtol_l.constprop.0+0xea>
 800bdfc:	b106      	cbz	r6, 800be00 <_strtol_l.constprop.0+0xe0>
 800bdfe:	4240      	negs	r0, r0
 800be00:	f1b8 0f00 	cmp.w	r8, #0
 800be04:	d099      	beq.n	800bd3a <_strtol_l.constprop.0+0x1a>
 800be06:	2a00      	cmp	r2, #0
 800be08:	d1f6      	bne.n	800bdf8 <_strtol_l.constprop.0+0xd8>
 800be0a:	f8c8 1000 	str.w	r1, [r8]
 800be0e:	e794      	b.n	800bd3a <_strtol_l.constprop.0+0x1a>
 800be10:	08010f2d 	.word	0x08010f2d

0800be14 <_strtol_r>:
 800be14:	f7ff bf84 	b.w	800bd20 <_strtol_l.constprop.0>

0800be18 <strtol>:
 800be18:	4613      	mov	r3, r2
 800be1a:	460a      	mov	r2, r1
 800be1c:	4601      	mov	r1, r0
 800be1e:	4802      	ldr	r0, [pc, #8]	@ (800be28 <strtol+0x10>)
 800be20:	6800      	ldr	r0, [r0, #0]
 800be22:	f7ff bf7d 	b.w	800bd20 <_strtol_l.constprop.0>
 800be26:	bf00      	nop
 800be28:	20000024 	.word	0x20000024

0800be2c <__cvt>:
 800be2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be30:	ec57 6b10 	vmov	r6, r7, d0
 800be34:	2f00      	cmp	r7, #0
 800be36:	460c      	mov	r4, r1
 800be38:	4619      	mov	r1, r3
 800be3a:	463b      	mov	r3, r7
 800be3c:	bfbb      	ittet	lt
 800be3e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800be42:	461f      	movlt	r7, r3
 800be44:	2300      	movge	r3, #0
 800be46:	232d      	movlt	r3, #45	@ 0x2d
 800be48:	700b      	strb	r3, [r1, #0]
 800be4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be4c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800be50:	4691      	mov	r9, r2
 800be52:	f023 0820 	bic.w	r8, r3, #32
 800be56:	bfbc      	itt	lt
 800be58:	4632      	movlt	r2, r6
 800be5a:	4616      	movlt	r6, r2
 800be5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800be60:	d005      	beq.n	800be6e <__cvt+0x42>
 800be62:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800be66:	d100      	bne.n	800be6a <__cvt+0x3e>
 800be68:	3401      	adds	r4, #1
 800be6a:	2102      	movs	r1, #2
 800be6c:	e000      	b.n	800be70 <__cvt+0x44>
 800be6e:	2103      	movs	r1, #3
 800be70:	ab03      	add	r3, sp, #12
 800be72:	9301      	str	r3, [sp, #4]
 800be74:	ab02      	add	r3, sp, #8
 800be76:	9300      	str	r3, [sp, #0]
 800be78:	ec47 6b10 	vmov	d0, r6, r7
 800be7c:	4653      	mov	r3, sl
 800be7e:	4622      	mov	r2, r4
 800be80:	f001 fa12 	bl	800d2a8 <_dtoa_r>
 800be84:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800be88:	4605      	mov	r5, r0
 800be8a:	d119      	bne.n	800bec0 <__cvt+0x94>
 800be8c:	f019 0f01 	tst.w	r9, #1
 800be90:	d00e      	beq.n	800beb0 <__cvt+0x84>
 800be92:	eb00 0904 	add.w	r9, r0, r4
 800be96:	2200      	movs	r2, #0
 800be98:	2300      	movs	r3, #0
 800be9a:	4630      	mov	r0, r6
 800be9c:	4639      	mov	r1, r7
 800be9e:	f7f4 fe13 	bl	8000ac8 <__aeabi_dcmpeq>
 800bea2:	b108      	cbz	r0, 800bea8 <__cvt+0x7c>
 800bea4:	f8cd 900c 	str.w	r9, [sp, #12]
 800bea8:	2230      	movs	r2, #48	@ 0x30
 800beaa:	9b03      	ldr	r3, [sp, #12]
 800beac:	454b      	cmp	r3, r9
 800beae:	d31e      	bcc.n	800beee <__cvt+0xc2>
 800beb0:	9b03      	ldr	r3, [sp, #12]
 800beb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800beb4:	1b5b      	subs	r3, r3, r5
 800beb6:	4628      	mov	r0, r5
 800beb8:	6013      	str	r3, [r2, #0]
 800beba:	b004      	add	sp, #16
 800bebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bec0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bec4:	eb00 0904 	add.w	r9, r0, r4
 800bec8:	d1e5      	bne.n	800be96 <__cvt+0x6a>
 800beca:	7803      	ldrb	r3, [r0, #0]
 800becc:	2b30      	cmp	r3, #48	@ 0x30
 800bece:	d10a      	bne.n	800bee6 <__cvt+0xba>
 800bed0:	2200      	movs	r2, #0
 800bed2:	2300      	movs	r3, #0
 800bed4:	4630      	mov	r0, r6
 800bed6:	4639      	mov	r1, r7
 800bed8:	f7f4 fdf6 	bl	8000ac8 <__aeabi_dcmpeq>
 800bedc:	b918      	cbnz	r0, 800bee6 <__cvt+0xba>
 800bede:	f1c4 0401 	rsb	r4, r4, #1
 800bee2:	f8ca 4000 	str.w	r4, [sl]
 800bee6:	f8da 3000 	ldr.w	r3, [sl]
 800beea:	4499      	add	r9, r3
 800beec:	e7d3      	b.n	800be96 <__cvt+0x6a>
 800beee:	1c59      	adds	r1, r3, #1
 800bef0:	9103      	str	r1, [sp, #12]
 800bef2:	701a      	strb	r2, [r3, #0]
 800bef4:	e7d9      	b.n	800beaa <__cvt+0x7e>

0800bef6 <__exponent>:
 800bef6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bef8:	2900      	cmp	r1, #0
 800befa:	bfba      	itte	lt
 800befc:	4249      	neglt	r1, r1
 800befe:	232d      	movlt	r3, #45	@ 0x2d
 800bf00:	232b      	movge	r3, #43	@ 0x2b
 800bf02:	2909      	cmp	r1, #9
 800bf04:	7002      	strb	r2, [r0, #0]
 800bf06:	7043      	strb	r3, [r0, #1]
 800bf08:	dd29      	ble.n	800bf5e <__exponent+0x68>
 800bf0a:	f10d 0307 	add.w	r3, sp, #7
 800bf0e:	461d      	mov	r5, r3
 800bf10:	270a      	movs	r7, #10
 800bf12:	461a      	mov	r2, r3
 800bf14:	fbb1 f6f7 	udiv	r6, r1, r7
 800bf18:	fb07 1416 	mls	r4, r7, r6, r1
 800bf1c:	3430      	adds	r4, #48	@ 0x30
 800bf1e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bf22:	460c      	mov	r4, r1
 800bf24:	2c63      	cmp	r4, #99	@ 0x63
 800bf26:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800bf2a:	4631      	mov	r1, r6
 800bf2c:	dcf1      	bgt.n	800bf12 <__exponent+0x1c>
 800bf2e:	3130      	adds	r1, #48	@ 0x30
 800bf30:	1e94      	subs	r4, r2, #2
 800bf32:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bf36:	1c41      	adds	r1, r0, #1
 800bf38:	4623      	mov	r3, r4
 800bf3a:	42ab      	cmp	r3, r5
 800bf3c:	d30a      	bcc.n	800bf54 <__exponent+0x5e>
 800bf3e:	f10d 0309 	add.w	r3, sp, #9
 800bf42:	1a9b      	subs	r3, r3, r2
 800bf44:	42ac      	cmp	r4, r5
 800bf46:	bf88      	it	hi
 800bf48:	2300      	movhi	r3, #0
 800bf4a:	3302      	adds	r3, #2
 800bf4c:	4403      	add	r3, r0
 800bf4e:	1a18      	subs	r0, r3, r0
 800bf50:	b003      	add	sp, #12
 800bf52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf54:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bf58:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bf5c:	e7ed      	b.n	800bf3a <__exponent+0x44>
 800bf5e:	2330      	movs	r3, #48	@ 0x30
 800bf60:	3130      	adds	r1, #48	@ 0x30
 800bf62:	7083      	strb	r3, [r0, #2]
 800bf64:	70c1      	strb	r1, [r0, #3]
 800bf66:	1d03      	adds	r3, r0, #4
 800bf68:	e7f1      	b.n	800bf4e <__exponent+0x58>
	...

0800bf6c <_printf_float>:
 800bf6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf70:	b08d      	sub	sp, #52	@ 0x34
 800bf72:	460c      	mov	r4, r1
 800bf74:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bf78:	4616      	mov	r6, r2
 800bf7a:	461f      	mov	r7, r3
 800bf7c:	4605      	mov	r5, r0
 800bf7e:	f001 f827 	bl	800cfd0 <_localeconv_r>
 800bf82:	6803      	ldr	r3, [r0, #0]
 800bf84:	9304      	str	r3, [sp, #16]
 800bf86:	4618      	mov	r0, r3
 800bf88:	f7f4 f972 	bl	8000270 <strlen>
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf90:	f8d8 3000 	ldr.w	r3, [r8]
 800bf94:	9005      	str	r0, [sp, #20]
 800bf96:	3307      	adds	r3, #7
 800bf98:	f023 0307 	bic.w	r3, r3, #7
 800bf9c:	f103 0208 	add.w	r2, r3, #8
 800bfa0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bfa4:	f8d4 b000 	ldr.w	fp, [r4]
 800bfa8:	f8c8 2000 	str.w	r2, [r8]
 800bfac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bfb0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bfb4:	9307      	str	r3, [sp, #28]
 800bfb6:	f8cd 8018 	str.w	r8, [sp, #24]
 800bfba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bfbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bfc2:	4b9c      	ldr	r3, [pc, #624]	@ (800c234 <_printf_float+0x2c8>)
 800bfc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bfc8:	f7f4 fdb0 	bl	8000b2c <__aeabi_dcmpun>
 800bfcc:	bb70      	cbnz	r0, 800c02c <_printf_float+0xc0>
 800bfce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bfd2:	4b98      	ldr	r3, [pc, #608]	@ (800c234 <_printf_float+0x2c8>)
 800bfd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bfd8:	f7f4 fd8a 	bl	8000af0 <__aeabi_dcmple>
 800bfdc:	bb30      	cbnz	r0, 800c02c <_printf_float+0xc0>
 800bfde:	2200      	movs	r2, #0
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	4640      	mov	r0, r8
 800bfe4:	4649      	mov	r1, r9
 800bfe6:	f7f4 fd79 	bl	8000adc <__aeabi_dcmplt>
 800bfea:	b110      	cbz	r0, 800bff2 <_printf_float+0x86>
 800bfec:	232d      	movs	r3, #45	@ 0x2d
 800bfee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bff2:	4a91      	ldr	r2, [pc, #580]	@ (800c238 <_printf_float+0x2cc>)
 800bff4:	4b91      	ldr	r3, [pc, #580]	@ (800c23c <_printf_float+0x2d0>)
 800bff6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bffa:	bf94      	ite	ls
 800bffc:	4690      	movls	r8, r2
 800bffe:	4698      	movhi	r8, r3
 800c000:	2303      	movs	r3, #3
 800c002:	6123      	str	r3, [r4, #16]
 800c004:	f02b 0304 	bic.w	r3, fp, #4
 800c008:	6023      	str	r3, [r4, #0]
 800c00a:	f04f 0900 	mov.w	r9, #0
 800c00e:	9700      	str	r7, [sp, #0]
 800c010:	4633      	mov	r3, r6
 800c012:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c014:	4621      	mov	r1, r4
 800c016:	4628      	mov	r0, r5
 800c018:	f000 f9d2 	bl	800c3c0 <_printf_common>
 800c01c:	3001      	adds	r0, #1
 800c01e:	f040 808d 	bne.w	800c13c <_printf_float+0x1d0>
 800c022:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c026:	b00d      	add	sp, #52	@ 0x34
 800c028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c02c:	4642      	mov	r2, r8
 800c02e:	464b      	mov	r3, r9
 800c030:	4640      	mov	r0, r8
 800c032:	4649      	mov	r1, r9
 800c034:	f7f4 fd7a 	bl	8000b2c <__aeabi_dcmpun>
 800c038:	b140      	cbz	r0, 800c04c <_printf_float+0xe0>
 800c03a:	464b      	mov	r3, r9
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	bfbc      	itt	lt
 800c040:	232d      	movlt	r3, #45	@ 0x2d
 800c042:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c046:	4a7e      	ldr	r2, [pc, #504]	@ (800c240 <_printf_float+0x2d4>)
 800c048:	4b7e      	ldr	r3, [pc, #504]	@ (800c244 <_printf_float+0x2d8>)
 800c04a:	e7d4      	b.n	800bff6 <_printf_float+0x8a>
 800c04c:	6863      	ldr	r3, [r4, #4]
 800c04e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c052:	9206      	str	r2, [sp, #24]
 800c054:	1c5a      	adds	r2, r3, #1
 800c056:	d13b      	bne.n	800c0d0 <_printf_float+0x164>
 800c058:	2306      	movs	r3, #6
 800c05a:	6063      	str	r3, [r4, #4]
 800c05c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c060:	2300      	movs	r3, #0
 800c062:	6022      	str	r2, [r4, #0]
 800c064:	9303      	str	r3, [sp, #12]
 800c066:	ab0a      	add	r3, sp, #40	@ 0x28
 800c068:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c06c:	ab09      	add	r3, sp, #36	@ 0x24
 800c06e:	9300      	str	r3, [sp, #0]
 800c070:	6861      	ldr	r1, [r4, #4]
 800c072:	ec49 8b10 	vmov	d0, r8, r9
 800c076:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c07a:	4628      	mov	r0, r5
 800c07c:	f7ff fed6 	bl	800be2c <__cvt>
 800c080:	9b06      	ldr	r3, [sp, #24]
 800c082:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c084:	2b47      	cmp	r3, #71	@ 0x47
 800c086:	4680      	mov	r8, r0
 800c088:	d129      	bne.n	800c0de <_printf_float+0x172>
 800c08a:	1cc8      	adds	r0, r1, #3
 800c08c:	db02      	blt.n	800c094 <_printf_float+0x128>
 800c08e:	6863      	ldr	r3, [r4, #4]
 800c090:	4299      	cmp	r1, r3
 800c092:	dd41      	ble.n	800c118 <_printf_float+0x1ac>
 800c094:	f1aa 0a02 	sub.w	sl, sl, #2
 800c098:	fa5f fa8a 	uxtb.w	sl, sl
 800c09c:	3901      	subs	r1, #1
 800c09e:	4652      	mov	r2, sl
 800c0a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c0a4:	9109      	str	r1, [sp, #36]	@ 0x24
 800c0a6:	f7ff ff26 	bl	800bef6 <__exponent>
 800c0aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c0ac:	1813      	adds	r3, r2, r0
 800c0ae:	2a01      	cmp	r2, #1
 800c0b0:	4681      	mov	r9, r0
 800c0b2:	6123      	str	r3, [r4, #16]
 800c0b4:	dc02      	bgt.n	800c0bc <_printf_float+0x150>
 800c0b6:	6822      	ldr	r2, [r4, #0]
 800c0b8:	07d2      	lsls	r2, r2, #31
 800c0ba:	d501      	bpl.n	800c0c0 <_printf_float+0x154>
 800c0bc:	3301      	adds	r3, #1
 800c0be:	6123      	str	r3, [r4, #16]
 800c0c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d0a2      	beq.n	800c00e <_printf_float+0xa2>
 800c0c8:	232d      	movs	r3, #45	@ 0x2d
 800c0ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0ce:	e79e      	b.n	800c00e <_printf_float+0xa2>
 800c0d0:	9a06      	ldr	r2, [sp, #24]
 800c0d2:	2a47      	cmp	r2, #71	@ 0x47
 800c0d4:	d1c2      	bne.n	800c05c <_printf_float+0xf0>
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d1c0      	bne.n	800c05c <_printf_float+0xf0>
 800c0da:	2301      	movs	r3, #1
 800c0dc:	e7bd      	b.n	800c05a <_printf_float+0xee>
 800c0de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c0e2:	d9db      	bls.n	800c09c <_printf_float+0x130>
 800c0e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c0e8:	d118      	bne.n	800c11c <_printf_float+0x1b0>
 800c0ea:	2900      	cmp	r1, #0
 800c0ec:	6863      	ldr	r3, [r4, #4]
 800c0ee:	dd0b      	ble.n	800c108 <_printf_float+0x19c>
 800c0f0:	6121      	str	r1, [r4, #16]
 800c0f2:	b913      	cbnz	r3, 800c0fa <_printf_float+0x18e>
 800c0f4:	6822      	ldr	r2, [r4, #0]
 800c0f6:	07d0      	lsls	r0, r2, #31
 800c0f8:	d502      	bpl.n	800c100 <_printf_float+0x194>
 800c0fa:	3301      	adds	r3, #1
 800c0fc:	440b      	add	r3, r1
 800c0fe:	6123      	str	r3, [r4, #16]
 800c100:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c102:	f04f 0900 	mov.w	r9, #0
 800c106:	e7db      	b.n	800c0c0 <_printf_float+0x154>
 800c108:	b913      	cbnz	r3, 800c110 <_printf_float+0x1a4>
 800c10a:	6822      	ldr	r2, [r4, #0]
 800c10c:	07d2      	lsls	r2, r2, #31
 800c10e:	d501      	bpl.n	800c114 <_printf_float+0x1a8>
 800c110:	3302      	adds	r3, #2
 800c112:	e7f4      	b.n	800c0fe <_printf_float+0x192>
 800c114:	2301      	movs	r3, #1
 800c116:	e7f2      	b.n	800c0fe <_printf_float+0x192>
 800c118:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c11c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c11e:	4299      	cmp	r1, r3
 800c120:	db05      	blt.n	800c12e <_printf_float+0x1c2>
 800c122:	6823      	ldr	r3, [r4, #0]
 800c124:	6121      	str	r1, [r4, #16]
 800c126:	07d8      	lsls	r0, r3, #31
 800c128:	d5ea      	bpl.n	800c100 <_printf_float+0x194>
 800c12a:	1c4b      	adds	r3, r1, #1
 800c12c:	e7e7      	b.n	800c0fe <_printf_float+0x192>
 800c12e:	2900      	cmp	r1, #0
 800c130:	bfd4      	ite	le
 800c132:	f1c1 0202 	rsble	r2, r1, #2
 800c136:	2201      	movgt	r2, #1
 800c138:	4413      	add	r3, r2
 800c13a:	e7e0      	b.n	800c0fe <_printf_float+0x192>
 800c13c:	6823      	ldr	r3, [r4, #0]
 800c13e:	055a      	lsls	r2, r3, #21
 800c140:	d407      	bmi.n	800c152 <_printf_float+0x1e6>
 800c142:	6923      	ldr	r3, [r4, #16]
 800c144:	4642      	mov	r2, r8
 800c146:	4631      	mov	r1, r6
 800c148:	4628      	mov	r0, r5
 800c14a:	47b8      	blx	r7
 800c14c:	3001      	adds	r0, #1
 800c14e:	d12b      	bne.n	800c1a8 <_printf_float+0x23c>
 800c150:	e767      	b.n	800c022 <_printf_float+0xb6>
 800c152:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c156:	f240 80dd 	bls.w	800c314 <_printf_float+0x3a8>
 800c15a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c15e:	2200      	movs	r2, #0
 800c160:	2300      	movs	r3, #0
 800c162:	f7f4 fcb1 	bl	8000ac8 <__aeabi_dcmpeq>
 800c166:	2800      	cmp	r0, #0
 800c168:	d033      	beq.n	800c1d2 <_printf_float+0x266>
 800c16a:	4a37      	ldr	r2, [pc, #220]	@ (800c248 <_printf_float+0x2dc>)
 800c16c:	2301      	movs	r3, #1
 800c16e:	4631      	mov	r1, r6
 800c170:	4628      	mov	r0, r5
 800c172:	47b8      	blx	r7
 800c174:	3001      	adds	r0, #1
 800c176:	f43f af54 	beq.w	800c022 <_printf_float+0xb6>
 800c17a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c17e:	4543      	cmp	r3, r8
 800c180:	db02      	blt.n	800c188 <_printf_float+0x21c>
 800c182:	6823      	ldr	r3, [r4, #0]
 800c184:	07d8      	lsls	r0, r3, #31
 800c186:	d50f      	bpl.n	800c1a8 <_printf_float+0x23c>
 800c188:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c18c:	4631      	mov	r1, r6
 800c18e:	4628      	mov	r0, r5
 800c190:	47b8      	blx	r7
 800c192:	3001      	adds	r0, #1
 800c194:	f43f af45 	beq.w	800c022 <_printf_float+0xb6>
 800c198:	f04f 0900 	mov.w	r9, #0
 800c19c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c1a0:	f104 0a1a 	add.w	sl, r4, #26
 800c1a4:	45c8      	cmp	r8, r9
 800c1a6:	dc09      	bgt.n	800c1bc <_printf_float+0x250>
 800c1a8:	6823      	ldr	r3, [r4, #0]
 800c1aa:	079b      	lsls	r3, r3, #30
 800c1ac:	f100 8103 	bmi.w	800c3b6 <_printf_float+0x44a>
 800c1b0:	68e0      	ldr	r0, [r4, #12]
 800c1b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1b4:	4298      	cmp	r0, r3
 800c1b6:	bfb8      	it	lt
 800c1b8:	4618      	movlt	r0, r3
 800c1ba:	e734      	b.n	800c026 <_printf_float+0xba>
 800c1bc:	2301      	movs	r3, #1
 800c1be:	4652      	mov	r2, sl
 800c1c0:	4631      	mov	r1, r6
 800c1c2:	4628      	mov	r0, r5
 800c1c4:	47b8      	blx	r7
 800c1c6:	3001      	adds	r0, #1
 800c1c8:	f43f af2b 	beq.w	800c022 <_printf_float+0xb6>
 800c1cc:	f109 0901 	add.w	r9, r9, #1
 800c1d0:	e7e8      	b.n	800c1a4 <_printf_float+0x238>
 800c1d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	dc39      	bgt.n	800c24c <_printf_float+0x2e0>
 800c1d8:	4a1b      	ldr	r2, [pc, #108]	@ (800c248 <_printf_float+0x2dc>)
 800c1da:	2301      	movs	r3, #1
 800c1dc:	4631      	mov	r1, r6
 800c1de:	4628      	mov	r0, r5
 800c1e0:	47b8      	blx	r7
 800c1e2:	3001      	adds	r0, #1
 800c1e4:	f43f af1d 	beq.w	800c022 <_printf_float+0xb6>
 800c1e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c1ec:	ea59 0303 	orrs.w	r3, r9, r3
 800c1f0:	d102      	bne.n	800c1f8 <_printf_float+0x28c>
 800c1f2:	6823      	ldr	r3, [r4, #0]
 800c1f4:	07d9      	lsls	r1, r3, #31
 800c1f6:	d5d7      	bpl.n	800c1a8 <_printf_float+0x23c>
 800c1f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1fc:	4631      	mov	r1, r6
 800c1fe:	4628      	mov	r0, r5
 800c200:	47b8      	blx	r7
 800c202:	3001      	adds	r0, #1
 800c204:	f43f af0d 	beq.w	800c022 <_printf_float+0xb6>
 800c208:	f04f 0a00 	mov.w	sl, #0
 800c20c:	f104 0b1a 	add.w	fp, r4, #26
 800c210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c212:	425b      	negs	r3, r3
 800c214:	4553      	cmp	r3, sl
 800c216:	dc01      	bgt.n	800c21c <_printf_float+0x2b0>
 800c218:	464b      	mov	r3, r9
 800c21a:	e793      	b.n	800c144 <_printf_float+0x1d8>
 800c21c:	2301      	movs	r3, #1
 800c21e:	465a      	mov	r2, fp
 800c220:	4631      	mov	r1, r6
 800c222:	4628      	mov	r0, r5
 800c224:	47b8      	blx	r7
 800c226:	3001      	adds	r0, #1
 800c228:	f43f aefb 	beq.w	800c022 <_printf_float+0xb6>
 800c22c:	f10a 0a01 	add.w	sl, sl, #1
 800c230:	e7ee      	b.n	800c210 <_printf_float+0x2a4>
 800c232:	bf00      	nop
 800c234:	7fefffff 	.word	0x7fefffff
 800c238:	0801102d 	.word	0x0801102d
 800c23c:	08011031 	.word	0x08011031
 800c240:	08011035 	.word	0x08011035
 800c244:	08011039 	.word	0x08011039
 800c248:	0801103d 	.word	0x0801103d
 800c24c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c24e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c252:	4553      	cmp	r3, sl
 800c254:	bfa8      	it	ge
 800c256:	4653      	movge	r3, sl
 800c258:	2b00      	cmp	r3, #0
 800c25a:	4699      	mov	r9, r3
 800c25c:	dc36      	bgt.n	800c2cc <_printf_float+0x360>
 800c25e:	f04f 0b00 	mov.w	fp, #0
 800c262:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c266:	f104 021a 	add.w	r2, r4, #26
 800c26a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c26c:	9306      	str	r3, [sp, #24]
 800c26e:	eba3 0309 	sub.w	r3, r3, r9
 800c272:	455b      	cmp	r3, fp
 800c274:	dc31      	bgt.n	800c2da <_printf_float+0x36e>
 800c276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c278:	459a      	cmp	sl, r3
 800c27a:	dc3a      	bgt.n	800c2f2 <_printf_float+0x386>
 800c27c:	6823      	ldr	r3, [r4, #0]
 800c27e:	07da      	lsls	r2, r3, #31
 800c280:	d437      	bmi.n	800c2f2 <_printf_float+0x386>
 800c282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c284:	ebaa 0903 	sub.w	r9, sl, r3
 800c288:	9b06      	ldr	r3, [sp, #24]
 800c28a:	ebaa 0303 	sub.w	r3, sl, r3
 800c28e:	4599      	cmp	r9, r3
 800c290:	bfa8      	it	ge
 800c292:	4699      	movge	r9, r3
 800c294:	f1b9 0f00 	cmp.w	r9, #0
 800c298:	dc33      	bgt.n	800c302 <_printf_float+0x396>
 800c29a:	f04f 0800 	mov.w	r8, #0
 800c29e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c2a2:	f104 0b1a 	add.w	fp, r4, #26
 800c2a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2a8:	ebaa 0303 	sub.w	r3, sl, r3
 800c2ac:	eba3 0309 	sub.w	r3, r3, r9
 800c2b0:	4543      	cmp	r3, r8
 800c2b2:	f77f af79 	ble.w	800c1a8 <_printf_float+0x23c>
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	465a      	mov	r2, fp
 800c2ba:	4631      	mov	r1, r6
 800c2bc:	4628      	mov	r0, r5
 800c2be:	47b8      	blx	r7
 800c2c0:	3001      	adds	r0, #1
 800c2c2:	f43f aeae 	beq.w	800c022 <_printf_float+0xb6>
 800c2c6:	f108 0801 	add.w	r8, r8, #1
 800c2ca:	e7ec      	b.n	800c2a6 <_printf_float+0x33a>
 800c2cc:	4642      	mov	r2, r8
 800c2ce:	4631      	mov	r1, r6
 800c2d0:	4628      	mov	r0, r5
 800c2d2:	47b8      	blx	r7
 800c2d4:	3001      	adds	r0, #1
 800c2d6:	d1c2      	bne.n	800c25e <_printf_float+0x2f2>
 800c2d8:	e6a3      	b.n	800c022 <_printf_float+0xb6>
 800c2da:	2301      	movs	r3, #1
 800c2dc:	4631      	mov	r1, r6
 800c2de:	4628      	mov	r0, r5
 800c2e0:	9206      	str	r2, [sp, #24]
 800c2e2:	47b8      	blx	r7
 800c2e4:	3001      	adds	r0, #1
 800c2e6:	f43f ae9c 	beq.w	800c022 <_printf_float+0xb6>
 800c2ea:	9a06      	ldr	r2, [sp, #24]
 800c2ec:	f10b 0b01 	add.w	fp, fp, #1
 800c2f0:	e7bb      	b.n	800c26a <_printf_float+0x2fe>
 800c2f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c2f6:	4631      	mov	r1, r6
 800c2f8:	4628      	mov	r0, r5
 800c2fa:	47b8      	blx	r7
 800c2fc:	3001      	adds	r0, #1
 800c2fe:	d1c0      	bne.n	800c282 <_printf_float+0x316>
 800c300:	e68f      	b.n	800c022 <_printf_float+0xb6>
 800c302:	9a06      	ldr	r2, [sp, #24]
 800c304:	464b      	mov	r3, r9
 800c306:	4442      	add	r2, r8
 800c308:	4631      	mov	r1, r6
 800c30a:	4628      	mov	r0, r5
 800c30c:	47b8      	blx	r7
 800c30e:	3001      	adds	r0, #1
 800c310:	d1c3      	bne.n	800c29a <_printf_float+0x32e>
 800c312:	e686      	b.n	800c022 <_printf_float+0xb6>
 800c314:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c318:	f1ba 0f01 	cmp.w	sl, #1
 800c31c:	dc01      	bgt.n	800c322 <_printf_float+0x3b6>
 800c31e:	07db      	lsls	r3, r3, #31
 800c320:	d536      	bpl.n	800c390 <_printf_float+0x424>
 800c322:	2301      	movs	r3, #1
 800c324:	4642      	mov	r2, r8
 800c326:	4631      	mov	r1, r6
 800c328:	4628      	mov	r0, r5
 800c32a:	47b8      	blx	r7
 800c32c:	3001      	adds	r0, #1
 800c32e:	f43f ae78 	beq.w	800c022 <_printf_float+0xb6>
 800c332:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c336:	4631      	mov	r1, r6
 800c338:	4628      	mov	r0, r5
 800c33a:	47b8      	blx	r7
 800c33c:	3001      	adds	r0, #1
 800c33e:	f43f ae70 	beq.w	800c022 <_printf_float+0xb6>
 800c342:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c346:	2200      	movs	r2, #0
 800c348:	2300      	movs	r3, #0
 800c34a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c34e:	f7f4 fbbb 	bl	8000ac8 <__aeabi_dcmpeq>
 800c352:	b9c0      	cbnz	r0, 800c386 <_printf_float+0x41a>
 800c354:	4653      	mov	r3, sl
 800c356:	f108 0201 	add.w	r2, r8, #1
 800c35a:	4631      	mov	r1, r6
 800c35c:	4628      	mov	r0, r5
 800c35e:	47b8      	blx	r7
 800c360:	3001      	adds	r0, #1
 800c362:	d10c      	bne.n	800c37e <_printf_float+0x412>
 800c364:	e65d      	b.n	800c022 <_printf_float+0xb6>
 800c366:	2301      	movs	r3, #1
 800c368:	465a      	mov	r2, fp
 800c36a:	4631      	mov	r1, r6
 800c36c:	4628      	mov	r0, r5
 800c36e:	47b8      	blx	r7
 800c370:	3001      	adds	r0, #1
 800c372:	f43f ae56 	beq.w	800c022 <_printf_float+0xb6>
 800c376:	f108 0801 	add.w	r8, r8, #1
 800c37a:	45d0      	cmp	r8, sl
 800c37c:	dbf3      	blt.n	800c366 <_printf_float+0x3fa>
 800c37e:	464b      	mov	r3, r9
 800c380:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c384:	e6df      	b.n	800c146 <_printf_float+0x1da>
 800c386:	f04f 0800 	mov.w	r8, #0
 800c38a:	f104 0b1a 	add.w	fp, r4, #26
 800c38e:	e7f4      	b.n	800c37a <_printf_float+0x40e>
 800c390:	2301      	movs	r3, #1
 800c392:	4642      	mov	r2, r8
 800c394:	e7e1      	b.n	800c35a <_printf_float+0x3ee>
 800c396:	2301      	movs	r3, #1
 800c398:	464a      	mov	r2, r9
 800c39a:	4631      	mov	r1, r6
 800c39c:	4628      	mov	r0, r5
 800c39e:	47b8      	blx	r7
 800c3a0:	3001      	adds	r0, #1
 800c3a2:	f43f ae3e 	beq.w	800c022 <_printf_float+0xb6>
 800c3a6:	f108 0801 	add.w	r8, r8, #1
 800c3aa:	68e3      	ldr	r3, [r4, #12]
 800c3ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c3ae:	1a5b      	subs	r3, r3, r1
 800c3b0:	4543      	cmp	r3, r8
 800c3b2:	dcf0      	bgt.n	800c396 <_printf_float+0x42a>
 800c3b4:	e6fc      	b.n	800c1b0 <_printf_float+0x244>
 800c3b6:	f04f 0800 	mov.w	r8, #0
 800c3ba:	f104 0919 	add.w	r9, r4, #25
 800c3be:	e7f4      	b.n	800c3aa <_printf_float+0x43e>

0800c3c0 <_printf_common>:
 800c3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3c4:	4616      	mov	r6, r2
 800c3c6:	4698      	mov	r8, r3
 800c3c8:	688a      	ldr	r2, [r1, #8]
 800c3ca:	690b      	ldr	r3, [r1, #16]
 800c3cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	bfb8      	it	lt
 800c3d4:	4613      	movlt	r3, r2
 800c3d6:	6033      	str	r3, [r6, #0]
 800c3d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c3dc:	4607      	mov	r7, r0
 800c3de:	460c      	mov	r4, r1
 800c3e0:	b10a      	cbz	r2, 800c3e6 <_printf_common+0x26>
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	6033      	str	r3, [r6, #0]
 800c3e6:	6823      	ldr	r3, [r4, #0]
 800c3e8:	0699      	lsls	r1, r3, #26
 800c3ea:	bf42      	ittt	mi
 800c3ec:	6833      	ldrmi	r3, [r6, #0]
 800c3ee:	3302      	addmi	r3, #2
 800c3f0:	6033      	strmi	r3, [r6, #0]
 800c3f2:	6825      	ldr	r5, [r4, #0]
 800c3f4:	f015 0506 	ands.w	r5, r5, #6
 800c3f8:	d106      	bne.n	800c408 <_printf_common+0x48>
 800c3fa:	f104 0a19 	add.w	sl, r4, #25
 800c3fe:	68e3      	ldr	r3, [r4, #12]
 800c400:	6832      	ldr	r2, [r6, #0]
 800c402:	1a9b      	subs	r3, r3, r2
 800c404:	42ab      	cmp	r3, r5
 800c406:	dc26      	bgt.n	800c456 <_printf_common+0x96>
 800c408:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c40c:	6822      	ldr	r2, [r4, #0]
 800c40e:	3b00      	subs	r3, #0
 800c410:	bf18      	it	ne
 800c412:	2301      	movne	r3, #1
 800c414:	0692      	lsls	r2, r2, #26
 800c416:	d42b      	bmi.n	800c470 <_printf_common+0xb0>
 800c418:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c41c:	4641      	mov	r1, r8
 800c41e:	4638      	mov	r0, r7
 800c420:	47c8      	blx	r9
 800c422:	3001      	adds	r0, #1
 800c424:	d01e      	beq.n	800c464 <_printf_common+0xa4>
 800c426:	6823      	ldr	r3, [r4, #0]
 800c428:	6922      	ldr	r2, [r4, #16]
 800c42a:	f003 0306 	and.w	r3, r3, #6
 800c42e:	2b04      	cmp	r3, #4
 800c430:	bf02      	ittt	eq
 800c432:	68e5      	ldreq	r5, [r4, #12]
 800c434:	6833      	ldreq	r3, [r6, #0]
 800c436:	1aed      	subeq	r5, r5, r3
 800c438:	68a3      	ldr	r3, [r4, #8]
 800c43a:	bf0c      	ite	eq
 800c43c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c440:	2500      	movne	r5, #0
 800c442:	4293      	cmp	r3, r2
 800c444:	bfc4      	itt	gt
 800c446:	1a9b      	subgt	r3, r3, r2
 800c448:	18ed      	addgt	r5, r5, r3
 800c44a:	2600      	movs	r6, #0
 800c44c:	341a      	adds	r4, #26
 800c44e:	42b5      	cmp	r5, r6
 800c450:	d11a      	bne.n	800c488 <_printf_common+0xc8>
 800c452:	2000      	movs	r0, #0
 800c454:	e008      	b.n	800c468 <_printf_common+0xa8>
 800c456:	2301      	movs	r3, #1
 800c458:	4652      	mov	r2, sl
 800c45a:	4641      	mov	r1, r8
 800c45c:	4638      	mov	r0, r7
 800c45e:	47c8      	blx	r9
 800c460:	3001      	adds	r0, #1
 800c462:	d103      	bne.n	800c46c <_printf_common+0xac>
 800c464:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c46c:	3501      	adds	r5, #1
 800c46e:	e7c6      	b.n	800c3fe <_printf_common+0x3e>
 800c470:	18e1      	adds	r1, r4, r3
 800c472:	1c5a      	adds	r2, r3, #1
 800c474:	2030      	movs	r0, #48	@ 0x30
 800c476:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c47a:	4422      	add	r2, r4
 800c47c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c480:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c484:	3302      	adds	r3, #2
 800c486:	e7c7      	b.n	800c418 <_printf_common+0x58>
 800c488:	2301      	movs	r3, #1
 800c48a:	4622      	mov	r2, r4
 800c48c:	4641      	mov	r1, r8
 800c48e:	4638      	mov	r0, r7
 800c490:	47c8      	blx	r9
 800c492:	3001      	adds	r0, #1
 800c494:	d0e6      	beq.n	800c464 <_printf_common+0xa4>
 800c496:	3601      	adds	r6, #1
 800c498:	e7d9      	b.n	800c44e <_printf_common+0x8e>
	...

0800c49c <_printf_i>:
 800c49c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c4a0:	7e0f      	ldrb	r7, [r1, #24]
 800c4a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c4a4:	2f78      	cmp	r7, #120	@ 0x78
 800c4a6:	4691      	mov	r9, r2
 800c4a8:	4680      	mov	r8, r0
 800c4aa:	460c      	mov	r4, r1
 800c4ac:	469a      	mov	sl, r3
 800c4ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c4b2:	d807      	bhi.n	800c4c4 <_printf_i+0x28>
 800c4b4:	2f62      	cmp	r7, #98	@ 0x62
 800c4b6:	d80a      	bhi.n	800c4ce <_printf_i+0x32>
 800c4b8:	2f00      	cmp	r7, #0
 800c4ba:	f000 80d2 	beq.w	800c662 <_printf_i+0x1c6>
 800c4be:	2f58      	cmp	r7, #88	@ 0x58
 800c4c0:	f000 80b9 	beq.w	800c636 <_printf_i+0x19a>
 800c4c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c4c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c4cc:	e03a      	b.n	800c544 <_printf_i+0xa8>
 800c4ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c4d2:	2b15      	cmp	r3, #21
 800c4d4:	d8f6      	bhi.n	800c4c4 <_printf_i+0x28>
 800c4d6:	a101      	add	r1, pc, #4	@ (adr r1, 800c4dc <_printf_i+0x40>)
 800c4d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c4dc:	0800c535 	.word	0x0800c535
 800c4e0:	0800c549 	.word	0x0800c549
 800c4e4:	0800c4c5 	.word	0x0800c4c5
 800c4e8:	0800c4c5 	.word	0x0800c4c5
 800c4ec:	0800c4c5 	.word	0x0800c4c5
 800c4f0:	0800c4c5 	.word	0x0800c4c5
 800c4f4:	0800c549 	.word	0x0800c549
 800c4f8:	0800c4c5 	.word	0x0800c4c5
 800c4fc:	0800c4c5 	.word	0x0800c4c5
 800c500:	0800c4c5 	.word	0x0800c4c5
 800c504:	0800c4c5 	.word	0x0800c4c5
 800c508:	0800c649 	.word	0x0800c649
 800c50c:	0800c573 	.word	0x0800c573
 800c510:	0800c603 	.word	0x0800c603
 800c514:	0800c4c5 	.word	0x0800c4c5
 800c518:	0800c4c5 	.word	0x0800c4c5
 800c51c:	0800c66b 	.word	0x0800c66b
 800c520:	0800c4c5 	.word	0x0800c4c5
 800c524:	0800c573 	.word	0x0800c573
 800c528:	0800c4c5 	.word	0x0800c4c5
 800c52c:	0800c4c5 	.word	0x0800c4c5
 800c530:	0800c60b 	.word	0x0800c60b
 800c534:	6833      	ldr	r3, [r6, #0]
 800c536:	1d1a      	adds	r2, r3, #4
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	6032      	str	r2, [r6, #0]
 800c53c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c540:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c544:	2301      	movs	r3, #1
 800c546:	e09d      	b.n	800c684 <_printf_i+0x1e8>
 800c548:	6833      	ldr	r3, [r6, #0]
 800c54a:	6820      	ldr	r0, [r4, #0]
 800c54c:	1d19      	adds	r1, r3, #4
 800c54e:	6031      	str	r1, [r6, #0]
 800c550:	0606      	lsls	r6, r0, #24
 800c552:	d501      	bpl.n	800c558 <_printf_i+0xbc>
 800c554:	681d      	ldr	r5, [r3, #0]
 800c556:	e003      	b.n	800c560 <_printf_i+0xc4>
 800c558:	0645      	lsls	r5, r0, #25
 800c55a:	d5fb      	bpl.n	800c554 <_printf_i+0xb8>
 800c55c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c560:	2d00      	cmp	r5, #0
 800c562:	da03      	bge.n	800c56c <_printf_i+0xd0>
 800c564:	232d      	movs	r3, #45	@ 0x2d
 800c566:	426d      	negs	r5, r5
 800c568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c56c:	4859      	ldr	r0, [pc, #356]	@ (800c6d4 <_printf_i+0x238>)
 800c56e:	230a      	movs	r3, #10
 800c570:	e011      	b.n	800c596 <_printf_i+0xfa>
 800c572:	6821      	ldr	r1, [r4, #0]
 800c574:	6833      	ldr	r3, [r6, #0]
 800c576:	0608      	lsls	r0, r1, #24
 800c578:	f853 5b04 	ldr.w	r5, [r3], #4
 800c57c:	d402      	bmi.n	800c584 <_printf_i+0xe8>
 800c57e:	0649      	lsls	r1, r1, #25
 800c580:	bf48      	it	mi
 800c582:	b2ad      	uxthmi	r5, r5
 800c584:	2f6f      	cmp	r7, #111	@ 0x6f
 800c586:	4853      	ldr	r0, [pc, #332]	@ (800c6d4 <_printf_i+0x238>)
 800c588:	6033      	str	r3, [r6, #0]
 800c58a:	bf14      	ite	ne
 800c58c:	230a      	movne	r3, #10
 800c58e:	2308      	moveq	r3, #8
 800c590:	2100      	movs	r1, #0
 800c592:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c596:	6866      	ldr	r6, [r4, #4]
 800c598:	60a6      	str	r6, [r4, #8]
 800c59a:	2e00      	cmp	r6, #0
 800c59c:	bfa2      	ittt	ge
 800c59e:	6821      	ldrge	r1, [r4, #0]
 800c5a0:	f021 0104 	bicge.w	r1, r1, #4
 800c5a4:	6021      	strge	r1, [r4, #0]
 800c5a6:	b90d      	cbnz	r5, 800c5ac <_printf_i+0x110>
 800c5a8:	2e00      	cmp	r6, #0
 800c5aa:	d04b      	beq.n	800c644 <_printf_i+0x1a8>
 800c5ac:	4616      	mov	r6, r2
 800c5ae:	fbb5 f1f3 	udiv	r1, r5, r3
 800c5b2:	fb03 5711 	mls	r7, r3, r1, r5
 800c5b6:	5dc7      	ldrb	r7, [r0, r7]
 800c5b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c5bc:	462f      	mov	r7, r5
 800c5be:	42bb      	cmp	r3, r7
 800c5c0:	460d      	mov	r5, r1
 800c5c2:	d9f4      	bls.n	800c5ae <_printf_i+0x112>
 800c5c4:	2b08      	cmp	r3, #8
 800c5c6:	d10b      	bne.n	800c5e0 <_printf_i+0x144>
 800c5c8:	6823      	ldr	r3, [r4, #0]
 800c5ca:	07df      	lsls	r7, r3, #31
 800c5cc:	d508      	bpl.n	800c5e0 <_printf_i+0x144>
 800c5ce:	6923      	ldr	r3, [r4, #16]
 800c5d0:	6861      	ldr	r1, [r4, #4]
 800c5d2:	4299      	cmp	r1, r3
 800c5d4:	bfde      	ittt	le
 800c5d6:	2330      	movle	r3, #48	@ 0x30
 800c5d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c5dc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c5e0:	1b92      	subs	r2, r2, r6
 800c5e2:	6122      	str	r2, [r4, #16]
 800c5e4:	f8cd a000 	str.w	sl, [sp]
 800c5e8:	464b      	mov	r3, r9
 800c5ea:	aa03      	add	r2, sp, #12
 800c5ec:	4621      	mov	r1, r4
 800c5ee:	4640      	mov	r0, r8
 800c5f0:	f7ff fee6 	bl	800c3c0 <_printf_common>
 800c5f4:	3001      	adds	r0, #1
 800c5f6:	d14a      	bne.n	800c68e <_printf_i+0x1f2>
 800c5f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c5fc:	b004      	add	sp, #16
 800c5fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c602:	6823      	ldr	r3, [r4, #0]
 800c604:	f043 0320 	orr.w	r3, r3, #32
 800c608:	6023      	str	r3, [r4, #0]
 800c60a:	4833      	ldr	r0, [pc, #204]	@ (800c6d8 <_printf_i+0x23c>)
 800c60c:	2778      	movs	r7, #120	@ 0x78
 800c60e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c612:	6823      	ldr	r3, [r4, #0]
 800c614:	6831      	ldr	r1, [r6, #0]
 800c616:	061f      	lsls	r7, r3, #24
 800c618:	f851 5b04 	ldr.w	r5, [r1], #4
 800c61c:	d402      	bmi.n	800c624 <_printf_i+0x188>
 800c61e:	065f      	lsls	r7, r3, #25
 800c620:	bf48      	it	mi
 800c622:	b2ad      	uxthmi	r5, r5
 800c624:	6031      	str	r1, [r6, #0]
 800c626:	07d9      	lsls	r1, r3, #31
 800c628:	bf44      	itt	mi
 800c62a:	f043 0320 	orrmi.w	r3, r3, #32
 800c62e:	6023      	strmi	r3, [r4, #0]
 800c630:	b11d      	cbz	r5, 800c63a <_printf_i+0x19e>
 800c632:	2310      	movs	r3, #16
 800c634:	e7ac      	b.n	800c590 <_printf_i+0xf4>
 800c636:	4827      	ldr	r0, [pc, #156]	@ (800c6d4 <_printf_i+0x238>)
 800c638:	e7e9      	b.n	800c60e <_printf_i+0x172>
 800c63a:	6823      	ldr	r3, [r4, #0]
 800c63c:	f023 0320 	bic.w	r3, r3, #32
 800c640:	6023      	str	r3, [r4, #0]
 800c642:	e7f6      	b.n	800c632 <_printf_i+0x196>
 800c644:	4616      	mov	r6, r2
 800c646:	e7bd      	b.n	800c5c4 <_printf_i+0x128>
 800c648:	6833      	ldr	r3, [r6, #0]
 800c64a:	6825      	ldr	r5, [r4, #0]
 800c64c:	6961      	ldr	r1, [r4, #20]
 800c64e:	1d18      	adds	r0, r3, #4
 800c650:	6030      	str	r0, [r6, #0]
 800c652:	062e      	lsls	r6, r5, #24
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	d501      	bpl.n	800c65c <_printf_i+0x1c0>
 800c658:	6019      	str	r1, [r3, #0]
 800c65a:	e002      	b.n	800c662 <_printf_i+0x1c6>
 800c65c:	0668      	lsls	r0, r5, #25
 800c65e:	d5fb      	bpl.n	800c658 <_printf_i+0x1bc>
 800c660:	8019      	strh	r1, [r3, #0]
 800c662:	2300      	movs	r3, #0
 800c664:	6123      	str	r3, [r4, #16]
 800c666:	4616      	mov	r6, r2
 800c668:	e7bc      	b.n	800c5e4 <_printf_i+0x148>
 800c66a:	6833      	ldr	r3, [r6, #0]
 800c66c:	1d1a      	adds	r2, r3, #4
 800c66e:	6032      	str	r2, [r6, #0]
 800c670:	681e      	ldr	r6, [r3, #0]
 800c672:	6862      	ldr	r2, [r4, #4]
 800c674:	2100      	movs	r1, #0
 800c676:	4630      	mov	r0, r6
 800c678:	f7f3 fdaa 	bl	80001d0 <memchr>
 800c67c:	b108      	cbz	r0, 800c682 <_printf_i+0x1e6>
 800c67e:	1b80      	subs	r0, r0, r6
 800c680:	6060      	str	r0, [r4, #4]
 800c682:	6863      	ldr	r3, [r4, #4]
 800c684:	6123      	str	r3, [r4, #16]
 800c686:	2300      	movs	r3, #0
 800c688:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c68c:	e7aa      	b.n	800c5e4 <_printf_i+0x148>
 800c68e:	6923      	ldr	r3, [r4, #16]
 800c690:	4632      	mov	r2, r6
 800c692:	4649      	mov	r1, r9
 800c694:	4640      	mov	r0, r8
 800c696:	47d0      	blx	sl
 800c698:	3001      	adds	r0, #1
 800c69a:	d0ad      	beq.n	800c5f8 <_printf_i+0x15c>
 800c69c:	6823      	ldr	r3, [r4, #0]
 800c69e:	079b      	lsls	r3, r3, #30
 800c6a0:	d413      	bmi.n	800c6ca <_printf_i+0x22e>
 800c6a2:	68e0      	ldr	r0, [r4, #12]
 800c6a4:	9b03      	ldr	r3, [sp, #12]
 800c6a6:	4298      	cmp	r0, r3
 800c6a8:	bfb8      	it	lt
 800c6aa:	4618      	movlt	r0, r3
 800c6ac:	e7a6      	b.n	800c5fc <_printf_i+0x160>
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	4632      	mov	r2, r6
 800c6b2:	4649      	mov	r1, r9
 800c6b4:	4640      	mov	r0, r8
 800c6b6:	47d0      	blx	sl
 800c6b8:	3001      	adds	r0, #1
 800c6ba:	d09d      	beq.n	800c5f8 <_printf_i+0x15c>
 800c6bc:	3501      	adds	r5, #1
 800c6be:	68e3      	ldr	r3, [r4, #12]
 800c6c0:	9903      	ldr	r1, [sp, #12]
 800c6c2:	1a5b      	subs	r3, r3, r1
 800c6c4:	42ab      	cmp	r3, r5
 800c6c6:	dcf2      	bgt.n	800c6ae <_printf_i+0x212>
 800c6c8:	e7eb      	b.n	800c6a2 <_printf_i+0x206>
 800c6ca:	2500      	movs	r5, #0
 800c6cc:	f104 0619 	add.w	r6, r4, #25
 800c6d0:	e7f5      	b.n	800c6be <_printf_i+0x222>
 800c6d2:	bf00      	nop
 800c6d4:	0801103f 	.word	0x0801103f
 800c6d8:	08011050 	.word	0x08011050

0800c6dc <_scanf_float>:
 800c6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e0:	b087      	sub	sp, #28
 800c6e2:	4617      	mov	r7, r2
 800c6e4:	9303      	str	r3, [sp, #12]
 800c6e6:	688b      	ldr	r3, [r1, #8]
 800c6e8:	1e5a      	subs	r2, r3, #1
 800c6ea:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c6ee:	bf81      	itttt	hi
 800c6f0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c6f4:	eb03 0b05 	addhi.w	fp, r3, r5
 800c6f8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c6fc:	608b      	strhi	r3, [r1, #8]
 800c6fe:	680b      	ldr	r3, [r1, #0]
 800c700:	460a      	mov	r2, r1
 800c702:	f04f 0500 	mov.w	r5, #0
 800c706:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c70a:	f842 3b1c 	str.w	r3, [r2], #28
 800c70e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c712:	4680      	mov	r8, r0
 800c714:	460c      	mov	r4, r1
 800c716:	bf98      	it	ls
 800c718:	f04f 0b00 	movls.w	fp, #0
 800c71c:	9201      	str	r2, [sp, #4]
 800c71e:	4616      	mov	r6, r2
 800c720:	46aa      	mov	sl, r5
 800c722:	46a9      	mov	r9, r5
 800c724:	9502      	str	r5, [sp, #8]
 800c726:	68a2      	ldr	r2, [r4, #8]
 800c728:	b152      	cbz	r2, 800c740 <_scanf_float+0x64>
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	781b      	ldrb	r3, [r3, #0]
 800c72e:	2b4e      	cmp	r3, #78	@ 0x4e
 800c730:	d864      	bhi.n	800c7fc <_scanf_float+0x120>
 800c732:	2b40      	cmp	r3, #64	@ 0x40
 800c734:	d83c      	bhi.n	800c7b0 <_scanf_float+0xd4>
 800c736:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c73a:	b2c8      	uxtb	r0, r1
 800c73c:	280e      	cmp	r0, #14
 800c73e:	d93a      	bls.n	800c7b6 <_scanf_float+0xda>
 800c740:	f1b9 0f00 	cmp.w	r9, #0
 800c744:	d003      	beq.n	800c74e <_scanf_float+0x72>
 800c746:	6823      	ldr	r3, [r4, #0]
 800c748:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c74c:	6023      	str	r3, [r4, #0]
 800c74e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c752:	f1ba 0f01 	cmp.w	sl, #1
 800c756:	f200 8117 	bhi.w	800c988 <_scanf_float+0x2ac>
 800c75a:	9b01      	ldr	r3, [sp, #4]
 800c75c:	429e      	cmp	r6, r3
 800c75e:	f200 8108 	bhi.w	800c972 <_scanf_float+0x296>
 800c762:	2001      	movs	r0, #1
 800c764:	b007      	add	sp, #28
 800c766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c76a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c76e:	2a0d      	cmp	r2, #13
 800c770:	d8e6      	bhi.n	800c740 <_scanf_float+0x64>
 800c772:	a101      	add	r1, pc, #4	@ (adr r1, 800c778 <_scanf_float+0x9c>)
 800c774:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c778:	0800c8bf 	.word	0x0800c8bf
 800c77c:	0800c741 	.word	0x0800c741
 800c780:	0800c741 	.word	0x0800c741
 800c784:	0800c741 	.word	0x0800c741
 800c788:	0800c91f 	.word	0x0800c91f
 800c78c:	0800c8f7 	.word	0x0800c8f7
 800c790:	0800c741 	.word	0x0800c741
 800c794:	0800c741 	.word	0x0800c741
 800c798:	0800c8cd 	.word	0x0800c8cd
 800c79c:	0800c741 	.word	0x0800c741
 800c7a0:	0800c741 	.word	0x0800c741
 800c7a4:	0800c741 	.word	0x0800c741
 800c7a8:	0800c741 	.word	0x0800c741
 800c7ac:	0800c885 	.word	0x0800c885
 800c7b0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c7b4:	e7db      	b.n	800c76e <_scanf_float+0x92>
 800c7b6:	290e      	cmp	r1, #14
 800c7b8:	d8c2      	bhi.n	800c740 <_scanf_float+0x64>
 800c7ba:	a001      	add	r0, pc, #4	@ (adr r0, 800c7c0 <_scanf_float+0xe4>)
 800c7bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c7c0:	0800c875 	.word	0x0800c875
 800c7c4:	0800c741 	.word	0x0800c741
 800c7c8:	0800c875 	.word	0x0800c875
 800c7cc:	0800c90b 	.word	0x0800c90b
 800c7d0:	0800c741 	.word	0x0800c741
 800c7d4:	0800c81d 	.word	0x0800c81d
 800c7d8:	0800c85b 	.word	0x0800c85b
 800c7dc:	0800c85b 	.word	0x0800c85b
 800c7e0:	0800c85b 	.word	0x0800c85b
 800c7e4:	0800c85b 	.word	0x0800c85b
 800c7e8:	0800c85b 	.word	0x0800c85b
 800c7ec:	0800c85b 	.word	0x0800c85b
 800c7f0:	0800c85b 	.word	0x0800c85b
 800c7f4:	0800c85b 	.word	0x0800c85b
 800c7f8:	0800c85b 	.word	0x0800c85b
 800c7fc:	2b6e      	cmp	r3, #110	@ 0x6e
 800c7fe:	d809      	bhi.n	800c814 <_scanf_float+0x138>
 800c800:	2b60      	cmp	r3, #96	@ 0x60
 800c802:	d8b2      	bhi.n	800c76a <_scanf_float+0x8e>
 800c804:	2b54      	cmp	r3, #84	@ 0x54
 800c806:	d07b      	beq.n	800c900 <_scanf_float+0x224>
 800c808:	2b59      	cmp	r3, #89	@ 0x59
 800c80a:	d199      	bne.n	800c740 <_scanf_float+0x64>
 800c80c:	2d07      	cmp	r5, #7
 800c80e:	d197      	bne.n	800c740 <_scanf_float+0x64>
 800c810:	2508      	movs	r5, #8
 800c812:	e02c      	b.n	800c86e <_scanf_float+0x192>
 800c814:	2b74      	cmp	r3, #116	@ 0x74
 800c816:	d073      	beq.n	800c900 <_scanf_float+0x224>
 800c818:	2b79      	cmp	r3, #121	@ 0x79
 800c81a:	e7f6      	b.n	800c80a <_scanf_float+0x12e>
 800c81c:	6821      	ldr	r1, [r4, #0]
 800c81e:	05c8      	lsls	r0, r1, #23
 800c820:	d51b      	bpl.n	800c85a <_scanf_float+0x17e>
 800c822:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c826:	6021      	str	r1, [r4, #0]
 800c828:	f109 0901 	add.w	r9, r9, #1
 800c82c:	f1bb 0f00 	cmp.w	fp, #0
 800c830:	d003      	beq.n	800c83a <_scanf_float+0x15e>
 800c832:	3201      	adds	r2, #1
 800c834:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800c838:	60a2      	str	r2, [r4, #8]
 800c83a:	68a3      	ldr	r3, [r4, #8]
 800c83c:	3b01      	subs	r3, #1
 800c83e:	60a3      	str	r3, [r4, #8]
 800c840:	6923      	ldr	r3, [r4, #16]
 800c842:	3301      	adds	r3, #1
 800c844:	6123      	str	r3, [r4, #16]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	3b01      	subs	r3, #1
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	607b      	str	r3, [r7, #4]
 800c84e:	f340 8087 	ble.w	800c960 <_scanf_float+0x284>
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	3301      	adds	r3, #1
 800c856:	603b      	str	r3, [r7, #0]
 800c858:	e765      	b.n	800c726 <_scanf_float+0x4a>
 800c85a:	eb1a 0105 	adds.w	r1, sl, r5
 800c85e:	f47f af6f 	bne.w	800c740 <_scanf_float+0x64>
 800c862:	6822      	ldr	r2, [r4, #0]
 800c864:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c868:	6022      	str	r2, [r4, #0]
 800c86a:	460d      	mov	r5, r1
 800c86c:	468a      	mov	sl, r1
 800c86e:	f806 3b01 	strb.w	r3, [r6], #1
 800c872:	e7e2      	b.n	800c83a <_scanf_float+0x15e>
 800c874:	6822      	ldr	r2, [r4, #0]
 800c876:	0610      	lsls	r0, r2, #24
 800c878:	f57f af62 	bpl.w	800c740 <_scanf_float+0x64>
 800c87c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c880:	6022      	str	r2, [r4, #0]
 800c882:	e7f4      	b.n	800c86e <_scanf_float+0x192>
 800c884:	f1ba 0f00 	cmp.w	sl, #0
 800c888:	d10e      	bne.n	800c8a8 <_scanf_float+0x1cc>
 800c88a:	f1b9 0f00 	cmp.w	r9, #0
 800c88e:	d10e      	bne.n	800c8ae <_scanf_float+0x1d2>
 800c890:	6822      	ldr	r2, [r4, #0]
 800c892:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c896:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c89a:	d108      	bne.n	800c8ae <_scanf_float+0x1d2>
 800c89c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c8a0:	6022      	str	r2, [r4, #0]
 800c8a2:	f04f 0a01 	mov.w	sl, #1
 800c8a6:	e7e2      	b.n	800c86e <_scanf_float+0x192>
 800c8a8:	f1ba 0f02 	cmp.w	sl, #2
 800c8ac:	d055      	beq.n	800c95a <_scanf_float+0x27e>
 800c8ae:	2d01      	cmp	r5, #1
 800c8b0:	d002      	beq.n	800c8b8 <_scanf_float+0x1dc>
 800c8b2:	2d04      	cmp	r5, #4
 800c8b4:	f47f af44 	bne.w	800c740 <_scanf_float+0x64>
 800c8b8:	3501      	adds	r5, #1
 800c8ba:	b2ed      	uxtb	r5, r5
 800c8bc:	e7d7      	b.n	800c86e <_scanf_float+0x192>
 800c8be:	f1ba 0f01 	cmp.w	sl, #1
 800c8c2:	f47f af3d 	bne.w	800c740 <_scanf_float+0x64>
 800c8c6:	f04f 0a02 	mov.w	sl, #2
 800c8ca:	e7d0      	b.n	800c86e <_scanf_float+0x192>
 800c8cc:	b97d      	cbnz	r5, 800c8ee <_scanf_float+0x212>
 800c8ce:	f1b9 0f00 	cmp.w	r9, #0
 800c8d2:	f47f af38 	bne.w	800c746 <_scanf_float+0x6a>
 800c8d6:	6822      	ldr	r2, [r4, #0]
 800c8d8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c8dc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c8e0:	f040 8108 	bne.w	800caf4 <_scanf_float+0x418>
 800c8e4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c8e8:	6022      	str	r2, [r4, #0]
 800c8ea:	2501      	movs	r5, #1
 800c8ec:	e7bf      	b.n	800c86e <_scanf_float+0x192>
 800c8ee:	2d03      	cmp	r5, #3
 800c8f0:	d0e2      	beq.n	800c8b8 <_scanf_float+0x1dc>
 800c8f2:	2d05      	cmp	r5, #5
 800c8f4:	e7de      	b.n	800c8b4 <_scanf_float+0x1d8>
 800c8f6:	2d02      	cmp	r5, #2
 800c8f8:	f47f af22 	bne.w	800c740 <_scanf_float+0x64>
 800c8fc:	2503      	movs	r5, #3
 800c8fe:	e7b6      	b.n	800c86e <_scanf_float+0x192>
 800c900:	2d06      	cmp	r5, #6
 800c902:	f47f af1d 	bne.w	800c740 <_scanf_float+0x64>
 800c906:	2507      	movs	r5, #7
 800c908:	e7b1      	b.n	800c86e <_scanf_float+0x192>
 800c90a:	6822      	ldr	r2, [r4, #0]
 800c90c:	0591      	lsls	r1, r2, #22
 800c90e:	f57f af17 	bpl.w	800c740 <_scanf_float+0x64>
 800c912:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c916:	6022      	str	r2, [r4, #0]
 800c918:	f8cd 9008 	str.w	r9, [sp, #8]
 800c91c:	e7a7      	b.n	800c86e <_scanf_float+0x192>
 800c91e:	6822      	ldr	r2, [r4, #0]
 800c920:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c924:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c928:	d006      	beq.n	800c938 <_scanf_float+0x25c>
 800c92a:	0550      	lsls	r0, r2, #21
 800c92c:	f57f af08 	bpl.w	800c740 <_scanf_float+0x64>
 800c930:	f1b9 0f00 	cmp.w	r9, #0
 800c934:	f000 80de 	beq.w	800caf4 <_scanf_float+0x418>
 800c938:	0591      	lsls	r1, r2, #22
 800c93a:	bf58      	it	pl
 800c93c:	9902      	ldrpl	r1, [sp, #8]
 800c93e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c942:	bf58      	it	pl
 800c944:	eba9 0101 	subpl.w	r1, r9, r1
 800c948:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c94c:	bf58      	it	pl
 800c94e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c952:	6022      	str	r2, [r4, #0]
 800c954:	f04f 0900 	mov.w	r9, #0
 800c958:	e789      	b.n	800c86e <_scanf_float+0x192>
 800c95a:	f04f 0a03 	mov.w	sl, #3
 800c95e:	e786      	b.n	800c86e <_scanf_float+0x192>
 800c960:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c964:	4639      	mov	r1, r7
 800c966:	4640      	mov	r0, r8
 800c968:	4798      	blx	r3
 800c96a:	2800      	cmp	r0, #0
 800c96c:	f43f aedb 	beq.w	800c726 <_scanf_float+0x4a>
 800c970:	e6e6      	b.n	800c740 <_scanf_float+0x64>
 800c972:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c976:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c97a:	463a      	mov	r2, r7
 800c97c:	4640      	mov	r0, r8
 800c97e:	4798      	blx	r3
 800c980:	6923      	ldr	r3, [r4, #16]
 800c982:	3b01      	subs	r3, #1
 800c984:	6123      	str	r3, [r4, #16]
 800c986:	e6e8      	b.n	800c75a <_scanf_float+0x7e>
 800c988:	1e6b      	subs	r3, r5, #1
 800c98a:	2b06      	cmp	r3, #6
 800c98c:	d824      	bhi.n	800c9d8 <_scanf_float+0x2fc>
 800c98e:	2d02      	cmp	r5, #2
 800c990:	d836      	bhi.n	800ca00 <_scanf_float+0x324>
 800c992:	9b01      	ldr	r3, [sp, #4]
 800c994:	429e      	cmp	r6, r3
 800c996:	f67f aee4 	bls.w	800c762 <_scanf_float+0x86>
 800c99a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c99e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c9a2:	463a      	mov	r2, r7
 800c9a4:	4640      	mov	r0, r8
 800c9a6:	4798      	blx	r3
 800c9a8:	6923      	ldr	r3, [r4, #16]
 800c9aa:	3b01      	subs	r3, #1
 800c9ac:	6123      	str	r3, [r4, #16]
 800c9ae:	e7f0      	b.n	800c992 <_scanf_float+0x2b6>
 800c9b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c9b4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c9b8:	463a      	mov	r2, r7
 800c9ba:	4640      	mov	r0, r8
 800c9bc:	4798      	blx	r3
 800c9be:	6923      	ldr	r3, [r4, #16]
 800c9c0:	3b01      	subs	r3, #1
 800c9c2:	6123      	str	r3, [r4, #16]
 800c9c4:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c9c8:	fa5f fa8a 	uxtb.w	sl, sl
 800c9cc:	f1ba 0f02 	cmp.w	sl, #2
 800c9d0:	d1ee      	bne.n	800c9b0 <_scanf_float+0x2d4>
 800c9d2:	3d03      	subs	r5, #3
 800c9d4:	b2ed      	uxtb	r5, r5
 800c9d6:	1b76      	subs	r6, r6, r5
 800c9d8:	6823      	ldr	r3, [r4, #0]
 800c9da:	05da      	lsls	r2, r3, #23
 800c9dc:	d530      	bpl.n	800ca40 <_scanf_float+0x364>
 800c9de:	055b      	lsls	r3, r3, #21
 800c9e0:	d511      	bpl.n	800ca06 <_scanf_float+0x32a>
 800c9e2:	9b01      	ldr	r3, [sp, #4]
 800c9e4:	429e      	cmp	r6, r3
 800c9e6:	f67f aebc 	bls.w	800c762 <_scanf_float+0x86>
 800c9ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c9ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c9f2:	463a      	mov	r2, r7
 800c9f4:	4640      	mov	r0, r8
 800c9f6:	4798      	blx	r3
 800c9f8:	6923      	ldr	r3, [r4, #16]
 800c9fa:	3b01      	subs	r3, #1
 800c9fc:	6123      	str	r3, [r4, #16]
 800c9fe:	e7f0      	b.n	800c9e2 <_scanf_float+0x306>
 800ca00:	46aa      	mov	sl, r5
 800ca02:	46b3      	mov	fp, r6
 800ca04:	e7de      	b.n	800c9c4 <_scanf_float+0x2e8>
 800ca06:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ca0a:	6923      	ldr	r3, [r4, #16]
 800ca0c:	2965      	cmp	r1, #101	@ 0x65
 800ca0e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ca12:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800ca16:	6123      	str	r3, [r4, #16]
 800ca18:	d00c      	beq.n	800ca34 <_scanf_float+0x358>
 800ca1a:	2945      	cmp	r1, #69	@ 0x45
 800ca1c:	d00a      	beq.n	800ca34 <_scanf_float+0x358>
 800ca1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ca22:	463a      	mov	r2, r7
 800ca24:	4640      	mov	r0, r8
 800ca26:	4798      	blx	r3
 800ca28:	6923      	ldr	r3, [r4, #16]
 800ca2a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ca2e:	3b01      	subs	r3, #1
 800ca30:	1eb5      	subs	r5, r6, #2
 800ca32:	6123      	str	r3, [r4, #16]
 800ca34:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ca38:	463a      	mov	r2, r7
 800ca3a:	4640      	mov	r0, r8
 800ca3c:	4798      	blx	r3
 800ca3e:	462e      	mov	r6, r5
 800ca40:	6822      	ldr	r2, [r4, #0]
 800ca42:	f012 0210 	ands.w	r2, r2, #16
 800ca46:	d001      	beq.n	800ca4c <_scanf_float+0x370>
 800ca48:	2000      	movs	r0, #0
 800ca4a:	e68b      	b.n	800c764 <_scanf_float+0x88>
 800ca4c:	7032      	strb	r2, [r6, #0]
 800ca4e:	6823      	ldr	r3, [r4, #0]
 800ca50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ca54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca58:	d11c      	bne.n	800ca94 <_scanf_float+0x3b8>
 800ca5a:	9b02      	ldr	r3, [sp, #8]
 800ca5c:	454b      	cmp	r3, r9
 800ca5e:	eba3 0209 	sub.w	r2, r3, r9
 800ca62:	d123      	bne.n	800caac <_scanf_float+0x3d0>
 800ca64:	9901      	ldr	r1, [sp, #4]
 800ca66:	2200      	movs	r2, #0
 800ca68:	4640      	mov	r0, r8
 800ca6a:	f002 fd95 	bl	800f598 <_strtod_r>
 800ca6e:	9b03      	ldr	r3, [sp, #12]
 800ca70:	6821      	ldr	r1, [r4, #0]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	f011 0f02 	tst.w	r1, #2
 800ca78:	ec57 6b10 	vmov	r6, r7, d0
 800ca7c:	f103 0204 	add.w	r2, r3, #4
 800ca80:	d01f      	beq.n	800cac2 <_scanf_float+0x3e6>
 800ca82:	9903      	ldr	r1, [sp, #12]
 800ca84:	600a      	str	r2, [r1, #0]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	e9c3 6700 	strd	r6, r7, [r3]
 800ca8c:	68e3      	ldr	r3, [r4, #12]
 800ca8e:	3301      	adds	r3, #1
 800ca90:	60e3      	str	r3, [r4, #12]
 800ca92:	e7d9      	b.n	800ca48 <_scanf_float+0x36c>
 800ca94:	9b04      	ldr	r3, [sp, #16]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d0e4      	beq.n	800ca64 <_scanf_float+0x388>
 800ca9a:	9905      	ldr	r1, [sp, #20]
 800ca9c:	230a      	movs	r3, #10
 800ca9e:	3101      	adds	r1, #1
 800caa0:	4640      	mov	r0, r8
 800caa2:	f7ff f9b7 	bl	800be14 <_strtol_r>
 800caa6:	9b04      	ldr	r3, [sp, #16]
 800caa8:	9e05      	ldr	r6, [sp, #20]
 800caaa:	1ac2      	subs	r2, r0, r3
 800caac:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800cab0:	429e      	cmp	r6, r3
 800cab2:	bf28      	it	cs
 800cab4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800cab8:	4910      	ldr	r1, [pc, #64]	@ (800cafc <_scanf_float+0x420>)
 800caba:	4630      	mov	r0, r6
 800cabc:	f000 f988 	bl	800cdd0 <siprintf>
 800cac0:	e7d0      	b.n	800ca64 <_scanf_float+0x388>
 800cac2:	f011 0f04 	tst.w	r1, #4
 800cac6:	9903      	ldr	r1, [sp, #12]
 800cac8:	600a      	str	r2, [r1, #0]
 800caca:	d1dc      	bne.n	800ca86 <_scanf_float+0x3aa>
 800cacc:	681d      	ldr	r5, [r3, #0]
 800cace:	4632      	mov	r2, r6
 800cad0:	463b      	mov	r3, r7
 800cad2:	4630      	mov	r0, r6
 800cad4:	4639      	mov	r1, r7
 800cad6:	f7f4 f829 	bl	8000b2c <__aeabi_dcmpun>
 800cada:	b128      	cbz	r0, 800cae8 <_scanf_float+0x40c>
 800cadc:	4808      	ldr	r0, [pc, #32]	@ (800cb00 <_scanf_float+0x424>)
 800cade:	f000 fb53 	bl	800d188 <nanf>
 800cae2:	ed85 0a00 	vstr	s0, [r5]
 800cae6:	e7d1      	b.n	800ca8c <_scanf_float+0x3b0>
 800cae8:	4630      	mov	r0, r6
 800caea:	4639      	mov	r1, r7
 800caec:	f7f4 f87c 	bl	8000be8 <__aeabi_d2f>
 800caf0:	6028      	str	r0, [r5, #0]
 800caf2:	e7cb      	b.n	800ca8c <_scanf_float+0x3b0>
 800caf4:	f04f 0900 	mov.w	r9, #0
 800caf8:	e629      	b.n	800c74e <_scanf_float+0x72>
 800cafa:	bf00      	nop
 800cafc:	08011061 	.word	0x08011061
 800cb00:	080112f4 	.word	0x080112f4

0800cb04 <std>:
 800cb04:	2300      	movs	r3, #0
 800cb06:	b510      	push	{r4, lr}
 800cb08:	4604      	mov	r4, r0
 800cb0a:	e9c0 3300 	strd	r3, r3, [r0]
 800cb0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cb12:	6083      	str	r3, [r0, #8]
 800cb14:	8181      	strh	r1, [r0, #12]
 800cb16:	6643      	str	r3, [r0, #100]	@ 0x64
 800cb18:	81c2      	strh	r2, [r0, #14]
 800cb1a:	6183      	str	r3, [r0, #24]
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	2208      	movs	r2, #8
 800cb20:	305c      	adds	r0, #92	@ 0x5c
 800cb22:	f000 fa4d 	bl	800cfc0 <memset>
 800cb26:	4b0d      	ldr	r3, [pc, #52]	@ (800cb5c <std+0x58>)
 800cb28:	6263      	str	r3, [r4, #36]	@ 0x24
 800cb2a:	4b0d      	ldr	r3, [pc, #52]	@ (800cb60 <std+0x5c>)
 800cb2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cb2e:	4b0d      	ldr	r3, [pc, #52]	@ (800cb64 <std+0x60>)
 800cb30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cb32:	4b0d      	ldr	r3, [pc, #52]	@ (800cb68 <std+0x64>)
 800cb34:	6323      	str	r3, [r4, #48]	@ 0x30
 800cb36:	4b0d      	ldr	r3, [pc, #52]	@ (800cb6c <std+0x68>)
 800cb38:	6224      	str	r4, [r4, #32]
 800cb3a:	429c      	cmp	r4, r3
 800cb3c:	d006      	beq.n	800cb4c <std+0x48>
 800cb3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cb42:	4294      	cmp	r4, r2
 800cb44:	d002      	beq.n	800cb4c <std+0x48>
 800cb46:	33d0      	adds	r3, #208	@ 0xd0
 800cb48:	429c      	cmp	r4, r3
 800cb4a:	d105      	bne.n	800cb58 <std+0x54>
 800cb4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cb50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb54:	f000 bb06 	b.w	800d164 <__retarget_lock_init_recursive>
 800cb58:	bd10      	pop	{r4, pc}
 800cb5a:	bf00      	nop
 800cb5c:	0800ce11 	.word	0x0800ce11
 800cb60:	0800ce33 	.word	0x0800ce33
 800cb64:	0800ce6b 	.word	0x0800ce6b
 800cb68:	0800ce8f 	.word	0x0800ce8f
 800cb6c:	20005ec0 	.word	0x20005ec0

0800cb70 <stdio_exit_handler>:
 800cb70:	4a02      	ldr	r2, [pc, #8]	@ (800cb7c <stdio_exit_handler+0xc>)
 800cb72:	4903      	ldr	r1, [pc, #12]	@ (800cb80 <stdio_exit_handler+0x10>)
 800cb74:	4803      	ldr	r0, [pc, #12]	@ (800cb84 <stdio_exit_handler+0x14>)
 800cb76:	f000 b869 	b.w	800cc4c <_fwalk_sglue>
 800cb7a:	bf00      	nop
 800cb7c:	20000018 	.word	0x20000018
 800cb80:	0800fbe1 	.word	0x0800fbe1
 800cb84:	20000028 	.word	0x20000028

0800cb88 <cleanup_stdio>:
 800cb88:	6841      	ldr	r1, [r0, #4]
 800cb8a:	4b0c      	ldr	r3, [pc, #48]	@ (800cbbc <cleanup_stdio+0x34>)
 800cb8c:	4299      	cmp	r1, r3
 800cb8e:	b510      	push	{r4, lr}
 800cb90:	4604      	mov	r4, r0
 800cb92:	d001      	beq.n	800cb98 <cleanup_stdio+0x10>
 800cb94:	f003 f824 	bl	800fbe0 <_fflush_r>
 800cb98:	68a1      	ldr	r1, [r4, #8]
 800cb9a:	4b09      	ldr	r3, [pc, #36]	@ (800cbc0 <cleanup_stdio+0x38>)
 800cb9c:	4299      	cmp	r1, r3
 800cb9e:	d002      	beq.n	800cba6 <cleanup_stdio+0x1e>
 800cba0:	4620      	mov	r0, r4
 800cba2:	f003 f81d 	bl	800fbe0 <_fflush_r>
 800cba6:	68e1      	ldr	r1, [r4, #12]
 800cba8:	4b06      	ldr	r3, [pc, #24]	@ (800cbc4 <cleanup_stdio+0x3c>)
 800cbaa:	4299      	cmp	r1, r3
 800cbac:	d004      	beq.n	800cbb8 <cleanup_stdio+0x30>
 800cbae:	4620      	mov	r0, r4
 800cbb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbb4:	f003 b814 	b.w	800fbe0 <_fflush_r>
 800cbb8:	bd10      	pop	{r4, pc}
 800cbba:	bf00      	nop
 800cbbc:	20005ec0 	.word	0x20005ec0
 800cbc0:	20005f28 	.word	0x20005f28
 800cbc4:	20005f90 	.word	0x20005f90

0800cbc8 <global_stdio_init.part.0>:
 800cbc8:	b510      	push	{r4, lr}
 800cbca:	4b0b      	ldr	r3, [pc, #44]	@ (800cbf8 <global_stdio_init.part.0+0x30>)
 800cbcc:	4c0b      	ldr	r4, [pc, #44]	@ (800cbfc <global_stdio_init.part.0+0x34>)
 800cbce:	4a0c      	ldr	r2, [pc, #48]	@ (800cc00 <global_stdio_init.part.0+0x38>)
 800cbd0:	601a      	str	r2, [r3, #0]
 800cbd2:	4620      	mov	r0, r4
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	2104      	movs	r1, #4
 800cbd8:	f7ff ff94 	bl	800cb04 <std>
 800cbdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cbe0:	2201      	movs	r2, #1
 800cbe2:	2109      	movs	r1, #9
 800cbe4:	f7ff ff8e 	bl	800cb04 <std>
 800cbe8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cbec:	2202      	movs	r2, #2
 800cbee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbf2:	2112      	movs	r1, #18
 800cbf4:	f7ff bf86 	b.w	800cb04 <std>
 800cbf8:	20005ff8 	.word	0x20005ff8
 800cbfc:	20005ec0 	.word	0x20005ec0
 800cc00:	0800cb71 	.word	0x0800cb71

0800cc04 <__sfp_lock_acquire>:
 800cc04:	4801      	ldr	r0, [pc, #4]	@ (800cc0c <__sfp_lock_acquire+0x8>)
 800cc06:	f000 baae 	b.w	800d166 <__retarget_lock_acquire_recursive>
 800cc0a:	bf00      	nop
 800cc0c:	20006001 	.word	0x20006001

0800cc10 <__sfp_lock_release>:
 800cc10:	4801      	ldr	r0, [pc, #4]	@ (800cc18 <__sfp_lock_release+0x8>)
 800cc12:	f000 baa9 	b.w	800d168 <__retarget_lock_release_recursive>
 800cc16:	bf00      	nop
 800cc18:	20006001 	.word	0x20006001

0800cc1c <__sinit>:
 800cc1c:	b510      	push	{r4, lr}
 800cc1e:	4604      	mov	r4, r0
 800cc20:	f7ff fff0 	bl	800cc04 <__sfp_lock_acquire>
 800cc24:	6a23      	ldr	r3, [r4, #32]
 800cc26:	b11b      	cbz	r3, 800cc30 <__sinit+0x14>
 800cc28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc2c:	f7ff bff0 	b.w	800cc10 <__sfp_lock_release>
 800cc30:	4b04      	ldr	r3, [pc, #16]	@ (800cc44 <__sinit+0x28>)
 800cc32:	6223      	str	r3, [r4, #32]
 800cc34:	4b04      	ldr	r3, [pc, #16]	@ (800cc48 <__sinit+0x2c>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d1f5      	bne.n	800cc28 <__sinit+0xc>
 800cc3c:	f7ff ffc4 	bl	800cbc8 <global_stdio_init.part.0>
 800cc40:	e7f2      	b.n	800cc28 <__sinit+0xc>
 800cc42:	bf00      	nop
 800cc44:	0800cb89 	.word	0x0800cb89
 800cc48:	20005ff8 	.word	0x20005ff8

0800cc4c <_fwalk_sglue>:
 800cc4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc50:	4607      	mov	r7, r0
 800cc52:	4688      	mov	r8, r1
 800cc54:	4614      	mov	r4, r2
 800cc56:	2600      	movs	r6, #0
 800cc58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc5c:	f1b9 0901 	subs.w	r9, r9, #1
 800cc60:	d505      	bpl.n	800cc6e <_fwalk_sglue+0x22>
 800cc62:	6824      	ldr	r4, [r4, #0]
 800cc64:	2c00      	cmp	r4, #0
 800cc66:	d1f7      	bne.n	800cc58 <_fwalk_sglue+0xc>
 800cc68:	4630      	mov	r0, r6
 800cc6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc6e:	89ab      	ldrh	r3, [r5, #12]
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d907      	bls.n	800cc84 <_fwalk_sglue+0x38>
 800cc74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc78:	3301      	adds	r3, #1
 800cc7a:	d003      	beq.n	800cc84 <_fwalk_sglue+0x38>
 800cc7c:	4629      	mov	r1, r5
 800cc7e:	4638      	mov	r0, r7
 800cc80:	47c0      	blx	r8
 800cc82:	4306      	orrs	r6, r0
 800cc84:	3568      	adds	r5, #104	@ 0x68
 800cc86:	e7e9      	b.n	800cc5c <_fwalk_sglue+0x10>

0800cc88 <iprintf>:
 800cc88:	b40f      	push	{r0, r1, r2, r3}
 800cc8a:	b507      	push	{r0, r1, r2, lr}
 800cc8c:	4906      	ldr	r1, [pc, #24]	@ (800cca8 <iprintf+0x20>)
 800cc8e:	ab04      	add	r3, sp, #16
 800cc90:	6808      	ldr	r0, [r1, #0]
 800cc92:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc96:	6881      	ldr	r1, [r0, #8]
 800cc98:	9301      	str	r3, [sp, #4]
 800cc9a:	f002 fe05 	bl	800f8a8 <_vfiprintf_r>
 800cc9e:	b003      	add	sp, #12
 800cca0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cca4:	b004      	add	sp, #16
 800cca6:	4770      	bx	lr
 800cca8:	20000024 	.word	0x20000024

0800ccac <_puts_r>:
 800ccac:	6a03      	ldr	r3, [r0, #32]
 800ccae:	b570      	push	{r4, r5, r6, lr}
 800ccb0:	6884      	ldr	r4, [r0, #8]
 800ccb2:	4605      	mov	r5, r0
 800ccb4:	460e      	mov	r6, r1
 800ccb6:	b90b      	cbnz	r3, 800ccbc <_puts_r+0x10>
 800ccb8:	f7ff ffb0 	bl	800cc1c <__sinit>
 800ccbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ccbe:	07db      	lsls	r3, r3, #31
 800ccc0:	d405      	bmi.n	800ccce <_puts_r+0x22>
 800ccc2:	89a3      	ldrh	r3, [r4, #12]
 800ccc4:	0598      	lsls	r0, r3, #22
 800ccc6:	d402      	bmi.n	800ccce <_puts_r+0x22>
 800ccc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ccca:	f000 fa4c 	bl	800d166 <__retarget_lock_acquire_recursive>
 800ccce:	89a3      	ldrh	r3, [r4, #12]
 800ccd0:	0719      	lsls	r1, r3, #28
 800ccd2:	d502      	bpl.n	800ccda <_puts_r+0x2e>
 800ccd4:	6923      	ldr	r3, [r4, #16]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d135      	bne.n	800cd46 <_puts_r+0x9a>
 800ccda:	4621      	mov	r1, r4
 800ccdc:	4628      	mov	r0, r5
 800ccde:	f000 f919 	bl	800cf14 <__swsetup_r>
 800cce2:	b380      	cbz	r0, 800cd46 <_puts_r+0x9a>
 800cce4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800cce8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ccea:	07da      	lsls	r2, r3, #31
 800ccec:	d405      	bmi.n	800ccfa <_puts_r+0x4e>
 800ccee:	89a3      	ldrh	r3, [r4, #12]
 800ccf0:	059b      	lsls	r3, r3, #22
 800ccf2:	d402      	bmi.n	800ccfa <_puts_r+0x4e>
 800ccf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ccf6:	f000 fa37 	bl	800d168 <__retarget_lock_release_recursive>
 800ccfa:	4628      	mov	r0, r5
 800ccfc:	bd70      	pop	{r4, r5, r6, pc}
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	da04      	bge.n	800cd0c <_puts_r+0x60>
 800cd02:	69a2      	ldr	r2, [r4, #24]
 800cd04:	429a      	cmp	r2, r3
 800cd06:	dc17      	bgt.n	800cd38 <_puts_r+0x8c>
 800cd08:	290a      	cmp	r1, #10
 800cd0a:	d015      	beq.n	800cd38 <_puts_r+0x8c>
 800cd0c:	6823      	ldr	r3, [r4, #0]
 800cd0e:	1c5a      	adds	r2, r3, #1
 800cd10:	6022      	str	r2, [r4, #0]
 800cd12:	7019      	strb	r1, [r3, #0]
 800cd14:	68a3      	ldr	r3, [r4, #8]
 800cd16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cd1a:	3b01      	subs	r3, #1
 800cd1c:	60a3      	str	r3, [r4, #8]
 800cd1e:	2900      	cmp	r1, #0
 800cd20:	d1ed      	bne.n	800ccfe <_puts_r+0x52>
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	da11      	bge.n	800cd4a <_puts_r+0x9e>
 800cd26:	4622      	mov	r2, r4
 800cd28:	210a      	movs	r1, #10
 800cd2a:	4628      	mov	r0, r5
 800cd2c:	f000 f8b3 	bl	800ce96 <__swbuf_r>
 800cd30:	3001      	adds	r0, #1
 800cd32:	d0d7      	beq.n	800cce4 <_puts_r+0x38>
 800cd34:	250a      	movs	r5, #10
 800cd36:	e7d7      	b.n	800cce8 <_puts_r+0x3c>
 800cd38:	4622      	mov	r2, r4
 800cd3a:	4628      	mov	r0, r5
 800cd3c:	f000 f8ab 	bl	800ce96 <__swbuf_r>
 800cd40:	3001      	adds	r0, #1
 800cd42:	d1e7      	bne.n	800cd14 <_puts_r+0x68>
 800cd44:	e7ce      	b.n	800cce4 <_puts_r+0x38>
 800cd46:	3e01      	subs	r6, #1
 800cd48:	e7e4      	b.n	800cd14 <_puts_r+0x68>
 800cd4a:	6823      	ldr	r3, [r4, #0]
 800cd4c:	1c5a      	adds	r2, r3, #1
 800cd4e:	6022      	str	r2, [r4, #0]
 800cd50:	220a      	movs	r2, #10
 800cd52:	701a      	strb	r2, [r3, #0]
 800cd54:	e7ee      	b.n	800cd34 <_puts_r+0x88>
	...

0800cd58 <puts>:
 800cd58:	4b02      	ldr	r3, [pc, #8]	@ (800cd64 <puts+0xc>)
 800cd5a:	4601      	mov	r1, r0
 800cd5c:	6818      	ldr	r0, [r3, #0]
 800cd5e:	f7ff bfa5 	b.w	800ccac <_puts_r>
 800cd62:	bf00      	nop
 800cd64:	20000024 	.word	0x20000024

0800cd68 <sniprintf>:
 800cd68:	b40c      	push	{r2, r3}
 800cd6a:	b530      	push	{r4, r5, lr}
 800cd6c:	4b17      	ldr	r3, [pc, #92]	@ (800cdcc <sniprintf+0x64>)
 800cd6e:	1e0c      	subs	r4, r1, #0
 800cd70:	681d      	ldr	r5, [r3, #0]
 800cd72:	b09d      	sub	sp, #116	@ 0x74
 800cd74:	da08      	bge.n	800cd88 <sniprintf+0x20>
 800cd76:	238b      	movs	r3, #139	@ 0x8b
 800cd78:	602b      	str	r3, [r5, #0]
 800cd7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cd7e:	b01d      	add	sp, #116	@ 0x74
 800cd80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd84:	b002      	add	sp, #8
 800cd86:	4770      	bx	lr
 800cd88:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cd8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cd90:	bf14      	ite	ne
 800cd92:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800cd96:	4623      	moveq	r3, r4
 800cd98:	9304      	str	r3, [sp, #16]
 800cd9a:	9307      	str	r3, [sp, #28]
 800cd9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cda0:	9002      	str	r0, [sp, #8]
 800cda2:	9006      	str	r0, [sp, #24]
 800cda4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cda8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cdaa:	ab21      	add	r3, sp, #132	@ 0x84
 800cdac:	a902      	add	r1, sp, #8
 800cdae:	4628      	mov	r0, r5
 800cdb0:	9301      	str	r3, [sp, #4]
 800cdb2:	f002 fc53 	bl	800f65c <_svfiprintf_r>
 800cdb6:	1c43      	adds	r3, r0, #1
 800cdb8:	bfbc      	itt	lt
 800cdba:	238b      	movlt	r3, #139	@ 0x8b
 800cdbc:	602b      	strlt	r3, [r5, #0]
 800cdbe:	2c00      	cmp	r4, #0
 800cdc0:	d0dd      	beq.n	800cd7e <sniprintf+0x16>
 800cdc2:	9b02      	ldr	r3, [sp, #8]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	701a      	strb	r2, [r3, #0]
 800cdc8:	e7d9      	b.n	800cd7e <sniprintf+0x16>
 800cdca:	bf00      	nop
 800cdcc:	20000024 	.word	0x20000024

0800cdd0 <siprintf>:
 800cdd0:	b40e      	push	{r1, r2, r3}
 800cdd2:	b500      	push	{lr}
 800cdd4:	b09c      	sub	sp, #112	@ 0x70
 800cdd6:	ab1d      	add	r3, sp, #116	@ 0x74
 800cdd8:	9002      	str	r0, [sp, #8]
 800cdda:	9006      	str	r0, [sp, #24]
 800cddc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cde0:	4809      	ldr	r0, [pc, #36]	@ (800ce08 <siprintf+0x38>)
 800cde2:	9107      	str	r1, [sp, #28]
 800cde4:	9104      	str	r1, [sp, #16]
 800cde6:	4909      	ldr	r1, [pc, #36]	@ (800ce0c <siprintf+0x3c>)
 800cde8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdec:	9105      	str	r1, [sp, #20]
 800cdee:	6800      	ldr	r0, [r0, #0]
 800cdf0:	9301      	str	r3, [sp, #4]
 800cdf2:	a902      	add	r1, sp, #8
 800cdf4:	f002 fc32 	bl	800f65c <_svfiprintf_r>
 800cdf8:	9b02      	ldr	r3, [sp, #8]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	701a      	strb	r2, [r3, #0]
 800cdfe:	b01c      	add	sp, #112	@ 0x70
 800ce00:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce04:	b003      	add	sp, #12
 800ce06:	4770      	bx	lr
 800ce08:	20000024 	.word	0x20000024
 800ce0c:	ffff0208 	.word	0xffff0208

0800ce10 <__sread>:
 800ce10:	b510      	push	{r4, lr}
 800ce12:	460c      	mov	r4, r1
 800ce14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce18:	f000 f956 	bl	800d0c8 <_read_r>
 800ce1c:	2800      	cmp	r0, #0
 800ce1e:	bfab      	itete	ge
 800ce20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ce22:	89a3      	ldrhlt	r3, [r4, #12]
 800ce24:	181b      	addge	r3, r3, r0
 800ce26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ce2a:	bfac      	ite	ge
 800ce2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ce2e:	81a3      	strhlt	r3, [r4, #12]
 800ce30:	bd10      	pop	{r4, pc}

0800ce32 <__swrite>:
 800ce32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce36:	461f      	mov	r7, r3
 800ce38:	898b      	ldrh	r3, [r1, #12]
 800ce3a:	05db      	lsls	r3, r3, #23
 800ce3c:	4605      	mov	r5, r0
 800ce3e:	460c      	mov	r4, r1
 800ce40:	4616      	mov	r6, r2
 800ce42:	d505      	bpl.n	800ce50 <__swrite+0x1e>
 800ce44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce48:	2302      	movs	r3, #2
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	f000 f92a 	bl	800d0a4 <_lseek_r>
 800ce50:	89a3      	ldrh	r3, [r4, #12]
 800ce52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ce5a:	81a3      	strh	r3, [r4, #12]
 800ce5c:	4632      	mov	r2, r6
 800ce5e:	463b      	mov	r3, r7
 800ce60:	4628      	mov	r0, r5
 800ce62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce66:	f000 b941 	b.w	800d0ec <_write_r>

0800ce6a <__sseek>:
 800ce6a:	b510      	push	{r4, lr}
 800ce6c:	460c      	mov	r4, r1
 800ce6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce72:	f000 f917 	bl	800d0a4 <_lseek_r>
 800ce76:	1c43      	adds	r3, r0, #1
 800ce78:	89a3      	ldrh	r3, [r4, #12]
 800ce7a:	bf15      	itete	ne
 800ce7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ce7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ce82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ce86:	81a3      	strheq	r3, [r4, #12]
 800ce88:	bf18      	it	ne
 800ce8a:	81a3      	strhne	r3, [r4, #12]
 800ce8c:	bd10      	pop	{r4, pc}

0800ce8e <__sclose>:
 800ce8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce92:	f000 b8a1 	b.w	800cfd8 <_close_r>

0800ce96 <__swbuf_r>:
 800ce96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce98:	460e      	mov	r6, r1
 800ce9a:	4614      	mov	r4, r2
 800ce9c:	4605      	mov	r5, r0
 800ce9e:	b118      	cbz	r0, 800cea8 <__swbuf_r+0x12>
 800cea0:	6a03      	ldr	r3, [r0, #32]
 800cea2:	b90b      	cbnz	r3, 800cea8 <__swbuf_r+0x12>
 800cea4:	f7ff feba 	bl	800cc1c <__sinit>
 800cea8:	69a3      	ldr	r3, [r4, #24]
 800ceaa:	60a3      	str	r3, [r4, #8]
 800ceac:	89a3      	ldrh	r3, [r4, #12]
 800ceae:	071a      	lsls	r2, r3, #28
 800ceb0:	d501      	bpl.n	800ceb6 <__swbuf_r+0x20>
 800ceb2:	6923      	ldr	r3, [r4, #16]
 800ceb4:	b943      	cbnz	r3, 800cec8 <__swbuf_r+0x32>
 800ceb6:	4621      	mov	r1, r4
 800ceb8:	4628      	mov	r0, r5
 800ceba:	f000 f82b 	bl	800cf14 <__swsetup_r>
 800cebe:	b118      	cbz	r0, 800cec8 <__swbuf_r+0x32>
 800cec0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800cec4:	4638      	mov	r0, r7
 800cec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cec8:	6823      	ldr	r3, [r4, #0]
 800ceca:	6922      	ldr	r2, [r4, #16]
 800cecc:	1a98      	subs	r0, r3, r2
 800cece:	6963      	ldr	r3, [r4, #20]
 800ced0:	b2f6      	uxtb	r6, r6
 800ced2:	4283      	cmp	r3, r0
 800ced4:	4637      	mov	r7, r6
 800ced6:	dc05      	bgt.n	800cee4 <__swbuf_r+0x4e>
 800ced8:	4621      	mov	r1, r4
 800ceda:	4628      	mov	r0, r5
 800cedc:	f002 fe80 	bl	800fbe0 <_fflush_r>
 800cee0:	2800      	cmp	r0, #0
 800cee2:	d1ed      	bne.n	800cec0 <__swbuf_r+0x2a>
 800cee4:	68a3      	ldr	r3, [r4, #8]
 800cee6:	3b01      	subs	r3, #1
 800cee8:	60a3      	str	r3, [r4, #8]
 800ceea:	6823      	ldr	r3, [r4, #0]
 800ceec:	1c5a      	adds	r2, r3, #1
 800ceee:	6022      	str	r2, [r4, #0]
 800cef0:	701e      	strb	r6, [r3, #0]
 800cef2:	6962      	ldr	r2, [r4, #20]
 800cef4:	1c43      	adds	r3, r0, #1
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d004      	beq.n	800cf04 <__swbuf_r+0x6e>
 800cefa:	89a3      	ldrh	r3, [r4, #12]
 800cefc:	07db      	lsls	r3, r3, #31
 800cefe:	d5e1      	bpl.n	800cec4 <__swbuf_r+0x2e>
 800cf00:	2e0a      	cmp	r6, #10
 800cf02:	d1df      	bne.n	800cec4 <__swbuf_r+0x2e>
 800cf04:	4621      	mov	r1, r4
 800cf06:	4628      	mov	r0, r5
 800cf08:	f002 fe6a 	bl	800fbe0 <_fflush_r>
 800cf0c:	2800      	cmp	r0, #0
 800cf0e:	d0d9      	beq.n	800cec4 <__swbuf_r+0x2e>
 800cf10:	e7d6      	b.n	800cec0 <__swbuf_r+0x2a>
	...

0800cf14 <__swsetup_r>:
 800cf14:	b538      	push	{r3, r4, r5, lr}
 800cf16:	4b29      	ldr	r3, [pc, #164]	@ (800cfbc <__swsetup_r+0xa8>)
 800cf18:	4605      	mov	r5, r0
 800cf1a:	6818      	ldr	r0, [r3, #0]
 800cf1c:	460c      	mov	r4, r1
 800cf1e:	b118      	cbz	r0, 800cf28 <__swsetup_r+0x14>
 800cf20:	6a03      	ldr	r3, [r0, #32]
 800cf22:	b90b      	cbnz	r3, 800cf28 <__swsetup_r+0x14>
 800cf24:	f7ff fe7a 	bl	800cc1c <__sinit>
 800cf28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf2c:	0719      	lsls	r1, r3, #28
 800cf2e:	d422      	bmi.n	800cf76 <__swsetup_r+0x62>
 800cf30:	06da      	lsls	r2, r3, #27
 800cf32:	d407      	bmi.n	800cf44 <__swsetup_r+0x30>
 800cf34:	2209      	movs	r2, #9
 800cf36:	602a      	str	r2, [r5, #0]
 800cf38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf3c:	81a3      	strh	r3, [r4, #12]
 800cf3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf42:	e033      	b.n	800cfac <__swsetup_r+0x98>
 800cf44:	0758      	lsls	r0, r3, #29
 800cf46:	d512      	bpl.n	800cf6e <__swsetup_r+0x5a>
 800cf48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf4a:	b141      	cbz	r1, 800cf5e <__swsetup_r+0x4a>
 800cf4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cf50:	4299      	cmp	r1, r3
 800cf52:	d002      	beq.n	800cf5a <__swsetup_r+0x46>
 800cf54:	4628      	mov	r0, r5
 800cf56:	f000 ff6b 	bl	800de30 <_free_r>
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	6363      	str	r3, [r4, #52]	@ 0x34
 800cf5e:	89a3      	ldrh	r3, [r4, #12]
 800cf60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cf64:	81a3      	strh	r3, [r4, #12]
 800cf66:	2300      	movs	r3, #0
 800cf68:	6063      	str	r3, [r4, #4]
 800cf6a:	6923      	ldr	r3, [r4, #16]
 800cf6c:	6023      	str	r3, [r4, #0]
 800cf6e:	89a3      	ldrh	r3, [r4, #12]
 800cf70:	f043 0308 	orr.w	r3, r3, #8
 800cf74:	81a3      	strh	r3, [r4, #12]
 800cf76:	6923      	ldr	r3, [r4, #16]
 800cf78:	b94b      	cbnz	r3, 800cf8e <__swsetup_r+0x7a>
 800cf7a:	89a3      	ldrh	r3, [r4, #12]
 800cf7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cf80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf84:	d003      	beq.n	800cf8e <__swsetup_r+0x7a>
 800cf86:	4621      	mov	r1, r4
 800cf88:	4628      	mov	r0, r5
 800cf8a:	f002 fe77 	bl	800fc7c <__smakebuf_r>
 800cf8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf92:	f013 0201 	ands.w	r2, r3, #1
 800cf96:	d00a      	beq.n	800cfae <__swsetup_r+0x9a>
 800cf98:	2200      	movs	r2, #0
 800cf9a:	60a2      	str	r2, [r4, #8]
 800cf9c:	6962      	ldr	r2, [r4, #20]
 800cf9e:	4252      	negs	r2, r2
 800cfa0:	61a2      	str	r2, [r4, #24]
 800cfa2:	6922      	ldr	r2, [r4, #16]
 800cfa4:	b942      	cbnz	r2, 800cfb8 <__swsetup_r+0xa4>
 800cfa6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cfaa:	d1c5      	bne.n	800cf38 <__swsetup_r+0x24>
 800cfac:	bd38      	pop	{r3, r4, r5, pc}
 800cfae:	0799      	lsls	r1, r3, #30
 800cfb0:	bf58      	it	pl
 800cfb2:	6962      	ldrpl	r2, [r4, #20]
 800cfb4:	60a2      	str	r2, [r4, #8]
 800cfb6:	e7f4      	b.n	800cfa2 <__swsetup_r+0x8e>
 800cfb8:	2000      	movs	r0, #0
 800cfba:	e7f7      	b.n	800cfac <__swsetup_r+0x98>
 800cfbc:	20000024 	.word	0x20000024

0800cfc0 <memset>:
 800cfc0:	4402      	add	r2, r0
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d100      	bne.n	800cfca <memset+0xa>
 800cfc8:	4770      	bx	lr
 800cfca:	f803 1b01 	strb.w	r1, [r3], #1
 800cfce:	e7f9      	b.n	800cfc4 <memset+0x4>

0800cfd0 <_localeconv_r>:
 800cfd0:	4800      	ldr	r0, [pc, #0]	@ (800cfd4 <_localeconv_r+0x4>)
 800cfd2:	4770      	bx	lr
 800cfd4:	20000164 	.word	0x20000164

0800cfd8 <_close_r>:
 800cfd8:	b538      	push	{r3, r4, r5, lr}
 800cfda:	4d06      	ldr	r5, [pc, #24]	@ (800cff4 <_close_r+0x1c>)
 800cfdc:	2300      	movs	r3, #0
 800cfde:	4604      	mov	r4, r0
 800cfe0:	4608      	mov	r0, r1
 800cfe2:	602b      	str	r3, [r5, #0]
 800cfe4:	f7f4 ffb6 	bl	8001f54 <_close>
 800cfe8:	1c43      	adds	r3, r0, #1
 800cfea:	d102      	bne.n	800cff2 <_close_r+0x1a>
 800cfec:	682b      	ldr	r3, [r5, #0]
 800cfee:	b103      	cbz	r3, 800cff2 <_close_r+0x1a>
 800cff0:	6023      	str	r3, [r4, #0]
 800cff2:	bd38      	pop	{r3, r4, r5, pc}
 800cff4:	20005ffc 	.word	0x20005ffc

0800cff8 <_reclaim_reent>:
 800cff8:	4b29      	ldr	r3, [pc, #164]	@ (800d0a0 <_reclaim_reent+0xa8>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	4283      	cmp	r3, r0
 800cffe:	b570      	push	{r4, r5, r6, lr}
 800d000:	4604      	mov	r4, r0
 800d002:	d04b      	beq.n	800d09c <_reclaim_reent+0xa4>
 800d004:	69c3      	ldr	r3, [r0, #28]
 800d006:	b1ab      	cbz	r3, 800d034 <_reclaim_reent+0x3c>
 800d008:	68db      	ldr	r3, [r3, #12]
 800d00a:	b16b      	cbz	r3, 800d028 <_reclaim_reent+0x30>
 800d00c:	2500      	movs	r5, #0
 800d00e:	69e3      	ldr	r3, [r4, #28]
 800d010:	68db      	ldr	r3, [r3, #12]
 800d012:	5959      	ldr	r1, [r3, r5]
 800d014:	2900      	cmp	r1, #0
 800d016:	d13b      	bne.n	800d090 <_reclaim_reent+0x98>
 800d018:	3504      	adds	r5, #4
 800d01a:	2d80      	cmp	r5, #128	@ 0x80
 800d01c:	d1f7      	bne.n	800d00e <_reclaim_reent+0x16>
 800d01e:	69e3      	ldr	r3, [r4, #28]
 800d020:	4620      	mov	r0, r4
 800d022:	68d9      	ldr	r1, [r3, #12]
 800d024:	f000 ff04 	bl	800de30 <_free_r>
 800d028:	69e3      	ldr	r3, [r4, #28]
 800d02a:	6819      	ldr	r1, [r3, #0]
 800d02c:	b111      	cbz	r1, 800d034 <_reclaim_reent+0x3c>
 800d02e:	4620      	mov	r0, r4
 800d030:	f000 fefe 	bl	800de30 <_free_r>
 800d034:	6961      	ldr	r1, [r4, #20]
 800d036:	b111      	cbz	r1, 800d03e <_reclaim_reent+0x46>
 800d038:	4620      	mov	r0, r4
 800d03a:	f000 fef9 	bl	800de30 <_free_r>
 800d03e:	69e1      	ldr	r1, [r4, #28]
 800d040:	b111      	cbz	r1, 800d048 <_reclaim_reent+0x50>
 800d042:	4620      	mov	r0, r4
 800d044:	f000 fef4 	bl	800de30 <_free_r>
 800d048:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d04a:	b111      	cbz	r1, 800d052 <_reclaim_reent+0x5a>
 800d04c:	4620      	mov	r0, r4
 800d04e:	f000 feef 	bl	800de30 <_free_r>
 800d052:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d054:	b111      	cbz	r1, 800d05c <_reclaim_reent+0x64>
 800d056:	4620      	mov	r0, r4
 800d058:	f000 feea 	bl	800de30 <_free_r>
 800d05c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d05e:	b111      	cbz	r1, 800d066 <_reclaim_reent+0x6e>
 800d060:	4620      	mov	r0, r4
 800d062:	f000 fee5 	bl	800de30 <_free_r>
 800d066:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d068:	b111      	cbz	r1, 800d070 <_reclaim_reent+0x78>
 800d06a:	4620      	mov	r0, r4
 800d06c:	f000 fee0 	bl	800de30 <_free_r>
 800d070:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d072:	b111      	cbz	r1, 800d07a <_reclaim_reent+0x82>
 800d074:	4620      	mov	r0, r4
 800d076:	f000 fedb 	bl	800de30 <_free_r>
 800d07a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d07c:	b111      	cbz	r1, 800d084 <_reclaim_reent+0x8c>
 800d07e:	4620      	mov	r0, r4
 800d080:	f000 fed6 	bl	800de30 <_free_r>
 800d084:	6a23      	ldr	r3, [r4, #32]
 800d086:	b14b      	cbz	r3, 800d09c <_reclaim_reent+0xa4>
 800d088:	4620      	mov	r0, r4
 800d08a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d08e:	4718      	bx	r3
 800d090:	680e      	ldr	r6, [r1, #0]
 800d092:	4620      	mov	r0, r4
 800d094:	f000 fecc 	bl	800de30 <_free_r>
 800d098:	4631      	mov	r1, r6
 800d09a:	e7bb      	b.n	800d014 <_reclaim_reent+0x1c>
 800d09c:	bd70      	pop	{r4, r5, r6, pc}
 800d09e:	bf00      	nop
 800d0a0:	20000024 	.word	0x20000024

0800d0a4 <_lseek_r>:
 800d0a4:	b538      	push	{r3, r4, r5, lr}
 800d0a6:	4d07      	ldr	r5, [pc, #28]	@ (800d0c4 <_lseek_r+0x20>)
 800d0a8:	4604      	mov	r4, r0
 800d0aa:	4608      	mov	r0, r1
 800d0ac:	4611      	mov	r1, r2
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	602a      	str	r2, [r5, #0]
 800d0b2:	461a      	mov	r2, r3
 800d0b4:	f7f4 ff75 	bl	8001fa2 <_lseek>
 800d0b8:	1c43      	adds	r3, r0, #1
 800d0ba:	d102      	bne.n	800d0c2 <_lseek_r+0x1e>
 800d0bc:	682b      	ldr	r3, [r5, #0]
 800d0be:	b103      	cbz	r3, 800d0c2 <_lseek_r+0x1e>
 800d0c0:	6023      	str	r3, [r4, #0]
 800d0c2:	bd38      	pop	{r3, r4, r5, pc}
 800d0c4:	20005ffc 	.word	0x20005ffc

0800d0c8 <_read_r>:
 800d0c8:	b538      	push	{r3, r4, r5, lr}
 800d0ca:	4d07      	ldr	r5, [pc, #28]	@ (800d0e8 <_read_r+0x20>)
 800d0cc:	4604      	mov	r4, r0
 800d0ce:	4608      	mov	r0, r1
 800d0d0:	4611      	mov	r1, r2
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	602a      	str	r2, [r5, #0]
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	f7f4 ff03 	bl	8001ee2 <_read>
 800d0dc:	1c43      	adds	r3, r0, #1
 800d0de:	d102      	bne.n	800d0e6 <_read_r+0x1e>
 800d0e0:	682b      	ldr	r3, [r5, #0]
 800d0e2:	b103      	cbz	r3, 800d0e6 <_read_r+0x1e>
 800d0e4:	6023      	str	r3, [r4, #0]
 800d0e6:	bd38      	pop	{r3, r4, r5, pc}
 800d0e8:	20005ffc 	.word	0x20005ffc

0800d0ec <_write_r>:
 800d0ec:	b538      	push	{r3, r4, r5, lr}
 800d0ee:	4d07      	ldr	r5, [pc, #28]	@ (800d10c <_write_r+0x20>)
 800d0f0:	4604      	mov	r4, r0
 800d0f2:	4608      	mov	r0, r1
 800d0f4:	4611      	mov	r1, r2
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	602a      	str	r2, [r5, #0]
 800d0fa:	461a      	mov	r2, r3
 800d0fc:	f7f4 ff0e 	bl	8001f1c <_write>
 800d100:	1c43      	adds	r3, r0, #1
 800d102:	d102      	bne.n	800d10a <_write_r+0x1e>
 800d104:	682b      	ldr	r3, [r5, #0]
 800d106:	b103      	cbz	r3, 800d10a <_write_r+0x1e>
 800d108:	6023      	str	r3, [r4, #0]
 800d10a:	bd38      	pop	{r3, r4, r5, pc}
 800d10c:	20005ffc 	.word	0x20005ffc

0800d110 <__errno>:
 800d110:	4b01      	ldr	r3, [pc, #4]	@ (800d118 <__errno+0x8>)
 800d112:	6818      	ldr	r0, [r3, #0]
 800d114:	4770      	bx	lr
 800d116:	bf00      	nop
 800d118:	20000024 	.word	0x20000024

0800d11c <__libc_init_array>:
 800d11c:	b570      	push	{r4, r5, r6, lr}
 800d11e:	4d0d      	ldr	r5, [pc, #52]	@ (800d154 <__libc_init_array+0x38>)
 800d120:	4c0d      	ldr	r4, [pc, #52]	@ (800d158 <__libc_init_array+0x3c>)
 800d122:	1b64      	subs	r4, r4, r5
 800d124:	10a4      	asrs	r4, r4, #2
 800d126:	2600      	movs	r6, #0
 800d128:	42a6      	cmp	r6, r4
 800d12a:	d109      	bne.n	800d140 <__libc_init_array+0x24>
 800d12c:	4d0b      	ldr	r5, [pc, #44]	@ (800d15c <__libc_init_array+0x40>)
 800d12e:	4c0c      	ldr	r4, [pc, #48]	@ (800d160 <__libc_init_array+0x44>)
 800d130:	f003 fbdc 	bl	80108ec <_init>
 800d134:	1b64      	subs	r4, r4, r5
 800d136:	10a4      	asrs	r4, r4, #2
 800d138:	2600      	movs	r6, #0
 800d13a:	42a6      	cmp	r6, r4
 800d13c:	d105      	bne.n	800d14a <__libc_init_array+0x2e>
 800d13e:	bd70      	pop	{r4, r5, r6, pc}
 800d140:	f855 3b04 	ldr.w	r3, [r5], #4
 800d144:	4798      	blx	r3
 800d146:	3601      	adds	r6, #1
 800d148:	e7ee      	b.n	800d128 <__libc_init_array+0xc>
 800d14a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d14e:	4798      	blx	r3
 800d150:	3601      	adds	r6, #1
 800d152:	e7f2      	b.n	800d13a <__libc_init_array+0x1e>
 800d154:	08011360 	.word	0x08011360
 800d158:	08011360 	.word	0x08011360
 800d15c:	08011360 	.word	0x08011360
 800d160:	08011364 	.word	0x08011364

0800d164 <__retarget_lock_init_recursive>:
 800d164:	4770      	bx	lr

0800d166 <__retarget_lock_acquire_recursive>:
 800d166:	4770      	bx	lr

0800d168 <__retarget_lock_release_recursive>:
 800d168:	4770      	bx	lr

0800d16a <memcpy>:
 800d16a:	440a      	add	r2, r1
 800d16c:	4291      	cmp	r1, r2
 800d16e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d172:	d100      	bne.n	800d176 <memcpy+0xc>
 800d174:	4770      	bx	lr
 800d176:	b510      	push	{r4, lr}
 800d178:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d17c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d180:	4291      	cmp	r1, r2
 800d182:	d1f9      	bne.n	800d178 <memcpy+0xe>
 800d184:	bd10      	pop	{r4, pc}
	...

0800d188 <nanf>:
 800d188:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d190 <nanf+0x8>
 800d18c:	4770      	bx	lr
 800d18e:	bf00      	nop
 800d190:	7fc00000 	.word	0x7fc00000

0800d194 <quorem>:
 800d194:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d198:	6903      	ldr	r3, [r0, #16]
 800d19a:	690c      	ldr	r4, [r1, #16]
 800d19c:	42a3      	cmp	r3, r4
 800d19e:	4607      	mov	r7, r0
 800d1a0:	db7e      	blt.n	800d2a0 <quorem+0x10c>
 800d1a2:	3c01      	subs	r4, #1
 800d1a4:	f101 0814 	add.w	r8, r1, #20
 800d1a8:	00a3      	lsls	r3, r4, #2
 800d1aa:	f100 0514 	add.w	r5, r0, #20
 800d1ae:	9300      	str	r3, [sp, #0]
 800d1b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d1b4:	9301      	str	r3, [sp, #4]
 800d1b6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d1ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d1be:	3301      	adds	r3, #1
 800d1c0:	429a      	cmp	r2, r3
 800d1c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d1c6:	fbb2 f6f3 	udiv	r6, r2, r3
 800d1ca:	d32e      	bcc.n	800d22a <quorem+0x96>
 800d1cc:	f04f 0a00 	mov.w	sl, #0
 800d1d0:	46c4      	mov	ip, r8
 800d1d2:	46ae      	mov	lr, r5
 800d1d4:	46d3      	mov	fp, sl
 800d1d6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d1da:	b298      	uxth	r0, r3
 800d1dc:	fb06 a000 	mla	r0, r6, r0, sl
 800d1e0:	0c02      	lsrs	r2, r0, #16
 800d1e2:	0c1b      	lsrs	r3, r3, #16
 800d1e4:	fb06 2303 	mla	r3, r6, r3, r2
 800d1e8:	f8de 2000 	ldr.w	r2, [lr]
 800d1ec:	b280      	uxth	r0, r0
 800d1ee:	b292      	uxth	r2, r2
 800d1f0:	1a12      	subs	r2, r2, r0
 800d1f2:	445a      	add	r2, fp
 800d1f4:	f8de 0000 	ldr.w	r0, [lr]
 800d1f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d1fc:	b29b      	uxth	r3, r3
 800d1fe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d202:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d206:	b292      	uxth	r2, r2
 800d208:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d20c:	45e1      	cmp	r9, ip
 800d20e:	f84e 2b04 	str.w	r2, [lr], #4
 800d212:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d216:	d2de      	bcs.n	800d1d6 <quorem+0x42>
 800d218:	9b00      	ldr	r3, [sp, #0]
 800d21a:	58eb      	ldr	r3, [r5, r3]
 800d21c:	b92b      	cbnz	r3, 800d22a <quorem+0x96>
 800d21e:	9b01      	ldr	r3, [sp, #4]
 800d220:	3b04      	subs	r3, #4
 800d222:	429d      	cmp	r5, r3
 800d224:	461a      	mov	r2, r3
 800d226:	d32f      	bcc.n	800d288 <quorem+0xf4>
 800d228:	613c      	str	r4, [r7, #16]
 800d22a:	4638      	mov	r0, r7
 800d22c:	f001 f9c4 	bl	800e5b8 <__mcmp>
 800d230:	2800      	cmp	r0, #0
 800d232:	db25      	blt.n	800d280 <quorem+0xec>
 800d234:	4629      	mov	r1, r5
 800d236:	2000      	movs	r0, #0
 800d238:	f858 2b04 	ldr.w	r2, [r8], #4
 800d23c:	f8d1 c000 	ldr.w	ip, [r1]
 800d240:	fa1f fe82 	uxth.w	lr, r2
 800d244:	fa1f f38c 	uxth.w	r3, ip
 800d248:	eba3 030e 	sub.w	r3, r3, lr
 800d24c:	4403      	add	r3, r0
 800d24e:	0c12      	lsrs	r2, r2, #16
 800d250:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d254:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d258:	b29b      	uxth	r3, r3
 800d25a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d25e:	45c1      	cmp	r9, r8
 800d260:	f841 3b04 	str.w	r3, [r1], #4
 800d264:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d268:	d2e6      	bcs.n	800d238 <quorem+0xa4>
 800d26a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d26e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d272:	b922      	cbnz	r2, 800d27e <quorem+0xea>
 800d274:	3b04      	subs	r3, #4
 800d276:	429d      	cmp	r5, r3
 800d278:	461a      	mov	r2, r3
 800d27a:	d30b      	bcc.n	800d294 <quorem+0x100>
 800d27c:	613c      	str	r4, [r7, #16]
 800d27e:	3601      	adds	r6, #1
 800d280:	4630      	mov	r0, r6
 800d282:	b003      	add	sp, #12
 800d284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d288:	6812      	ldr	r2, [r2, #0]
 800d28a:	3b04      	subs	r3, #4
 800d28c:	2a00      	cmp	r2, #0
 800d28e:	d1cb      	bne.n	800d228 <quorem+0x94>
 800d290:	3c01      	subs	r4, #1
 800d292:	e7c6      	b.n	800d222 <quorem+0x8e>
 800d294:	6812      	ldr	r2, [r2, #0]
 800d296:	3b04      	subs	r3, #4
 800d298:	2a00      	cmp	r2, #0
 800d29a:	d1ef      	bne.n	800d27c <quorem+0xe8>
 800d29c:	3c01      	subs	r4, #1
 800d29e:	e7ea      	b.n	800d276 <quorem+0xe2>
 800d2a0:	2000      	movs	r0, #0
 800d2a2:	e7ee      	b.n	800d282 <quorem+0xee>
 800d2a4:	0000      	movs	r0, r0
	...

0800d2a8 <_dtoa_r>:
 800d2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2ac:	69c7      	ldr	r7, [r0, #28]
 800d2ae:	b099      	sub	sp, #100	@ 0x64
 800d2b0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d2b4:	ec55 4b10 	vmov	r4, r5, d0
 800d2b8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d2ba:	9109      	str	r1, [sp, #36]	@ 0x24
 800d2bc:	4683      	mov	fp, r0
 800d2be:	920e      	str	r2, [sp, #56]	@ 0x38
 800d2c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d2c2:	b97f      	cbnz	r7, 800d2e4 <_dtoa_r+0x3c>
 800d2c4:	2010      	movs	r0, #16
 800d2c6:	f000 fdfd 	bl	800dec4 <malloc>
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	f8cb 001c 	str.w	r0, [fp, #28]
 800d2d0:	b920      	cbnz	r0, 800d2dc <_dtoa_r+0x34>
 800d2d2:	4ba7      	ldr	r3, [pc, #668]	@ (800d570 <_dtoa_r+0x2c8>)
 800d2d4:	21ef      	movs	r1, #239	@ 0xef
 800d2d6:	48a7      	ldr	r0, [pc, #668]	@ (800d574 <_dtoa_r+0x2cc>)
 800d2d8:	f002 fd72 	bl	800fdc0 <__assert_func>
 800d2dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d2e0:	6007      	str	r7, [r0, #0]
 800d2e2:	60c7      	str	r7, [r0, #12]
 800d2e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d2e8:	6819      	ldr	r1, [r3, #0]
 800d2ea:	b159      	cbz	r1, 800d304 <_dtoa_r+0x5c>
 800d2ec:	685a      	ldr	r2, [r3, #4]
 800d2ee:	604a      	str	r2, [r1, #4]
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	4093      	lsls	r3, r2
 800d2f4:	608b      	str	r3, [r1, #8]
 800d2f6:	4658      	mov	r0, fp
 800d2f8:	f000 feda 	bl	800e0b0 <_Bfree>
 800d2fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d300:	2200      	movs	r2, #0
 800d302:	601a      	str	r2, [r3, #0]
 800d304:	1e2b      	subs	r3, r5, #0
 800d306:	bfb9      	ittee	lt
 800d308:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d30c:	9303      	strlt	r3, [sp, #12]
 800d30e:	2300      	movge	r3, #0
 800d310:	6033      	strge	r3, [r6, #0]
 800d312:	9f03      	ldr	r7, [sp, #12]
 800d314:	4b98      	ldr	r3, [pc, #608]	@ (800d578 <_dtoa_r+0x2d0>)
 800d316:	bfbc      	itt	lt
 800d318:	2201      	movlt	r2, #1
 800d31a:	6032      	strlt	r2, [r6, #0]
 800d31c:	43bb      	bics	r3, r7
 800d31e:	d112      	bne.n	800d346 <_dtoa_r+0x9e>
 800d320:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d322:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d326:	6013      	str	r3, [r2, #0]
 800d328:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d32c:	4323      	orrs	r3, r4
 800d32e:	f000 854d 	beq.w	800ddcc <_dtoa_r+0xb24>
 800d332:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d334:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d58c <_dtoa_r+0x2e4>
 800d338:	2b00      	cmp	r3, #0
 800d33a:	f000 854f 	beq.w	800dddc <_dtoa_r+0xb34>
 800d33e:	f10a 0303 	add.w	r3, sl, #3
 800d342:	f000 bd49 	b.w	800ddd8 <_dtoa_r+0xb30>
 800d346:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d34a:	2200      	movs	r2, #0
 800d34c:	ec51 0b17 	vmov	r0, r1, d7
 800d350:	2300      	movs	r3, #0
 800d352:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d356:	f7f3 fbb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800d35a:	4680      	mov	r8, r0
 800d35c:	b158      	cbz	r0, 800d376 <_dtoa_r+0xce>
 800d35e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d360:	2301      	movs	r3, #1
 800d362:	6013      	str	r3, [r2, #0]
 800d364:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d366:	b113      	cbz	r3, 800d36e <_dtoa_r+0xc6>
 800d368:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d36a:	4b84      	ldr	r3, [pc, #528]	@ (800d57c <_dtoa_r+0x2d4>)
 800d36c:	6013      	str	r3, [r2, #0]
 800d36e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d590 <_dtoa_r+0x2e8>
 800d372:	f000 bd33 	b.w	800dddc <_dtoa_r+0xb34>
 800d376:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d37a:	aa16      	add	r2, sp, #88	@ 0x58
 800d37c:	a917      	add	r1, sp, #92	@ 0x5c
 800d37e:	4658      	mov	r0, fp
 800d380:	f001 fa3a 	bl	800e7f8 <__d2b>
 800d384:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d388:	4681      	mov	r9, r0
 800d38a:	2e00      	cmp	r6, #0
 800d38c:	d077      	beq.n	800d47e <_dtoa_r+0x1d6>
 800d38e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d390:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d394:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d398:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d39c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d3a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d3a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	4b74      	ldr	r3, [pc, #464]	@ (800d580 <_dtoa_r+0x2d8>)
 800d3ae:	f7f2 ff6b 	bl	8000288 <__aeabi_dsub>
 800d3b2:	a369      	add	r3, pc, #420	@ (adr r3, 800d558 <_dtoa_r+0x2b0>)
 800d3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b8:	f7f3 f91e 	bl	80005f8 <__aeabi_dmul>
 800d3bc:	a368      	add	r3, pc, #416	@ (adr r3, 800d560 <_dtoa_r+0x2b8>)
 800d3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c2:	f7f2 ff63 	bl	800028c <__adddf3>
 800d3c6:	4604      	mov	r4, r0
 800d3c8:	4630      	mov	r0, r6
 800d3ca:	460d      	mov	r5, r1
 800d3cc:	f7f3 f8aa 	bl	8000524 <__aeabi_i2d>
 800d3d0:	a365      	add	r3, pc, #404	@ (adr r3, 800d568 <_dtoa_r+0x2c0>)
 800d3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d6:	f7f3 f90f 	bl	80005f8 <__aeabi_dmul>
 800d3da:	4602      	mov	r2, r0
 800d3dc:	460b      	mov	r3, r1
 800d3de:	4620      	mov	r0, r4
 800d3e0:	4629      	mov	r1, r5
 800d3e2:	f7f2 ff53 	bl	800028c <__adddf3>
 800d3e6:	4604      	mov	r4, r0
 800d3e8:	460d      	mov	r5, r1
 800d3ea:	f7f3 fbb5 	bl	8000b58 <__aeabi_d2iz>
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	4607      	mov	r7, r0
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	4620      	mov	r0, r4
 800d3f6:	4629      	mov	r1, r5
 800d3f8:	f7f3 fb70 	bl	8000adc <__aeabi_dcmplt>
 800d3fc:	b140      	cbz	r0, 800d410 <_dtoa_r+0x168>
 800d3fe:	4638      	mov	r0, r7
 800d400:	f7f3 f890 	bl	8000524 <__aeabi_i2d>
 800d404:	4622      	mov	r2, r4
 800d406:	462b      	mov	r3, r5
 800d408:	f7f3 fb5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d40c:	b900      	cbnz	r0, 800d410 <_dtoa_r+0x168>
 800d40e:	3f01      	subs	r7, #1
 800d410:	2f16      	cmp	r7, #22
 800d412:	d851      	bhi.n	800d4b8 <_dtoa_r+0x210>
 800d414:	4b5b      	ldr	r3, [pc, #364]	@ (800d584 <_dtoa_r+0x2dc>)
 800d416:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d41e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d422:	f7f3 fb5b 	bl	8000adc <__aeabi_dcmplt>
 800d426:	2800      	cmp	r0, #0
 800d428:	d048      	beq.n	800d4bc <_dtoa_r+0x214>
 800d42a:	3f01      	subs	r7, #1
 800d42c:	2300      	movs	r3, #0
 800d42e:	9312      	str	r3, [sp, #72]	@ 0x48
 800d430:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d432:	1b9b      	subs	r3, r3, r6
 800d434:	1e5a      	subs	r2, r3, #1
 800d436:	bf44      	itt	mi
 800d438:	f1c3 0801 	rsbmi	r8, r3, #1
 800d43c:	2300      	movmi	r3, #0
 800d43e:	9208      	str	r2, [sp, #32]
 800d440:	bf54      	ite	pl
 800d442:	f04f 0800 	movpl.w	r8, #0
 800d446:	9308      	strmi	r3, [sp, #32]
 800d448:	2f00      	cmp	r7, #0
 800d44a:	db39      	blt.n	800d4c0 <_dtoa_r+0x218>
 800d44c:	9b08      	ldr	r3, [sp, #32]
 800d44e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d450:	443b      	add	r3, r7
 800d452:	9308      	str	r3, [sp, #32]
 800d454:	2300      	movs	r3, #0
 800d456:	930a      	str	r3, [sp, #40]	@ 0x28
 800d458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d45a:	2b09      	cmp	r3, #9
 800d45c:	d864      	bhi.n	800d528 <_dtoa_r+0x280>
 800d45e:	2b05      	cmp	r3, #5
 800d460:	bfc4      	itt	gt
 800d462:	3b04      	subgt	r3, #4
 800d464:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d468:	f1a3 0302 	sub.w	r3, r3, #2
 800d46c:	bfcc      	ite	gt
 800d46e:	2400      	movgt	r4, #0
 800d470:	2401      	movle	r4, #1
 800d472:	2b03      	cmp	r3, #3
 800d474:	d863      	bhi.n	800d53e <_dtoa_r+0x296>
 800d476:	e8df f003 	tbb	[pc, r3]
 800d47a:	372a      	.short	0x372a
 800d47c:	5535      	.short	0x5535
 800d47e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d482:	441e      	add	r6, r3
 800d484:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d488:	2b20      	cmp	r3, #32
 800d48a:	bfc1      	itttt	gt
 800d48c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d490:	409f      	lslgt	r7, r3
 800d492:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d496:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d49a:	bfd6      	itet	le
 800d49c:	f1c3 0320 	rsble	r3, r3, #32
 800d4a0:	ea47 0003 	orrgt.w	r0, r7, r3
 800d4a4:	fa04 f003 	lslle.w	r0, r4, r3
 800d4a8:	f7f3 f82c 	bl	8000504 <__aeabi_ui2d>
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d4b2:	3e01      	subs	r6, #1
 800d4b4:	9214      	str	r2, [sp, #80]	@ 0x50
 800d4b6:	e777      	b.n	800d3a8 <_dtoa_r+0x100>
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	e7b8      	b.n	800d42e <_dtoa_r+0x186>
 800d4bc:	9012      	str	r0, [sp, #72]	@ 0x48
 800d4be:	e7b7      	b.n	800d430 <_dtoa_r+0x188>
 800d4c0:	427b      	negs	r3, r7
 800d4c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	eba8 0807 	sub.w	r8, r8, r7
 800d4ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d4cc:	e7c4      	b.n	800d458 <_dtoa_r+0x1b0>
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d4d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	dc35      	bgt.n	800d544 <_dtoa_r+0x29c>
 800d4d8:	2301      	movs	r3, #1
 800d4da:	9300      	str	r3, [sp, #0]
 800d4dc:	9307      	str	r3, [sp, #28]
 800d4de:	461a      	mov	r2, r3
 800d4e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800d4e2:	e00b      	b.n	800d4fc <_dtoa_r+0x254>
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	e7f3      	b.n	800d4d0 <_dtoa_r+0x228>
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d4ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4ee:	18fb      	adds	r3, r7, r3
 800d4f0:	9300      	str	r3, [sp, #0]
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	2b01      	cmp	r3, #1
 800d4f6:	9307      	str	r3, [sp, #28]
 800d4f8:	bfb8      	it	lt
 800d4fa:	2301      	movlt	r3, #1
 800d4fc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d500:	2100      	movs	r1, #0
 800d502:	2204      	movs	r2, #4
 800d504:	f102 0514 	add.w	r5, r2, #20
 800d508:	429d      	cmp	r5, r3
 800d50a:	d91f      	bls.n	800d54c <_dtoa_r+0x2a4>
 800d50c:	6041      	str	r1, [r0, #4]
 800d50e:	4658      	mov	r0, fp
 800d510:	f000 fd8e 	bl	800e030 <_Balloc>
 800d514:	4682      	mov	sl, r0
 800d516:	2800      	cmp	r0, #0
 800d518:	d13c      	bne.n	800d594 <_dtoa_r+0x2ec>
 800d51a:	4b1b      	ldr	r3, [pc, #108]	@ (800d588 <_dtoa_r+0x2e0>)
 800d51c:	4602      	mov	r2, r0
 800d51e:	f240 11af 	movw	r1, #431	@ 0x1af
 800d522:	e6d8      	b.n	800d2d6 <_dtoa_r+0x2e>
 800d524:	2301      	movs	r3, #1
 800d526:	e7e0      	b.n	800d4ea <_dtoa_r+0x242>
 800d528:	2401      	movs	r4, #1
 800d52a:	2300      	movs	r3, #0
 800d52c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d52e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d530:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d534:	9300      	str	r3, [sp, #0]
 800d536:	9307      	str	r3, [sp, #28]
 800d538:	2200      	movs	r2, #0
 800d53a:	2312      	movs	r3, #18
 800d53c:	e7d0      	b.n	800d4e0 <_dtoa_r+0x238>
 800d53e:	2301      	movs	r3, #1
 800d540:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d542:	e7f5      	b.n	800d530 <_dtoa_r+0x288>
 800d544:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d546:	9300      	str	r3, [sp, #0]
 800d548:	9307      	str	r3, [sp, #28]
 800d54a:	e7d7      	b.n	800d4fc <_dtoa_r+0x254>
 800d54c:	3101      	adds	r1, #1
 800d54e:	0052      	lsls	r2, r2, #1
 800d550:	e7d8      	b.n	800d504 <_dtoa_r+0x25c>
 800d552:	bf00      	nop
 800d554:	f3af 8000 	nop.w
 800d558:	636f4361 	.word	0x636f4361
 800d55c:	3fd287a7 	.word	0x3fd287a7
 800d560:	8b60c8b3 	.word	0x8b60c8b3
 800d564:	3fc68a28 	.word	0x3fc68a28
 800d568:	509f79fb 	.word	0x509f79fb
 800d56c:	3fd34413 	.word	0x3fd34413
 800d570:	08011073 	.word	0x08011073
 800d574:	0801108a 	.word	0x0801108a
 800d578:	7ff00000 	.word	0x7ff00000
 800d57c:	0801103e 	.word	0x0801103e
 800d580:	3ff80000 	.word	0x3ff80000
 800d584:	08011180 	.word	0x08011180
 800d588:	080110e2 	.word	0x080110e2
 800d58c:	0801106f 	.word	0x0801106f
 800d590:	0801103d 	.word	0x0801103d
 800d594:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d598:	6018      	str	r0, [r3, #0]
 800d59a:	9b07      	ldr	r3, [sp, #28]
 800d59c:	2b0e      	cmp	r3, #14
 800d59e:	f200 80a4 	bhi.w	800d6ea <_dtoa_r+0x442>
 800d5a2:	2c00      	cmp	r4, #0
 800d5a4:	f000 80a1 	beq.w	800d6ea <_dtoa_r+0x442>
 800d5a8:	2f00      	cmp	r7, #0
 800d5aa:	dd33      	ble.n	800d614 <_dtoa_r+0x36c>
 800d5ac:	4bad      	ldr	r3, [pc, #692]	@ (800d864 <_dtoa_r+0x5bc>)
 800d5ae:	f007 020f 	and.w	r2, r7, #15
 800d5b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5b6:	ed93 7b00 	vldr	d7, [r3]
 800d5ba:	05f8      	lsls	r0, r7, #23
 800d5bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d5c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d5c4:	d516      	bpl.n	800d5f4 <_dtoa_r+0x34c>
 800d5c6:	4ba8      	ldr	r3, [pc, #672]	@ (800d868 <_dtoa_r+0x5c0>)
 800d5c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d5cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d5d0:	f7f3 f93c 	bl	800084c <__aeabi_ddiv>
 800d5d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5d8:	f004 040f 	and.w	r4, r4, #15
 800d5dc:	2603      	movs	r6, #3
 800d5de:	4da2      	ldr	r5, [pc, #648]	@ (800d868 <_dtoa_r+0x5c0>)
 800d5e0:	b954      	cbnz	r4, 800d5f8 <_dtoa_r+0x350>
 800d5e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5ea:	f7f3 f92f 	bl	800084c <__aeabi_ddiv>
 800d5ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5f2:	e028      	b.n	800d646 <_dtoa_r+0x39e>
 800d5f4:	2602      	movs	r6, #2
 800d5f6:	e7f2      	b.n	800d5de <_dtoa_r+0x336>
 800d5f8:	07e1      	lsls	r1, r4, #31
 800d5fa:	d508      	bpl.n	800d60e <_dtoa_r+0x366>
 800d5fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d600:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d604:	f7f2 fff8 	bl	80005f8 <__aeabi_dmul>
 800d608:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d60c:	3601      	adds	r6, #1
 800d60e:	1064      	asrs	r4, r4, #1
 800d610:	3508      	adds	r5, #8
 800d612:	e7e5      	b.n	800d5e0 <_dtoa_r+0x338>
 800d614:	f000 80d2 	beq.w	800d7bc <_dtoa_r+0x514>
 800d618:	427c      	negs	r4, r7
 800d61a:	4b92      	ldr	r3, [pc, #584]	@ (800d864 <_dtoa_r+0x5bc>)
 800d61c:	4d92      	ldr	r5, [pc, #584]	@ (800d868 <_dtoa_r+0x5c0>)
 800d61e:	f004 020f 	and.w	r2, r4, #15
 800d622:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d62a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d62e:	f7f2 ffe3 	bl	80005f8 <__aeabi_dmul>
 800d632:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d636:	1124      	asrs	r4, r4, #4
 800d638:	2300      	movs	r3, #0
 800d63a:	2602      	movs	r6, #2
 800d63c:	2c00      	cmp	r4, #0
 800d63e:	f040 80b2 	bne.w	800d7a6 <_dtoa_r+0x4fe>
 800d642:	2b00      	cmp	r3, #0
 800d644:	d1d3      	bne.n	800d5ee <_dtoa_r+0x346>
 800d646:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d648:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	f000 80b7 	beq.w	800d7c0 <_dtoa_r+0x518>
 800d652:	4b86      	ldr	r3, [pc, #536]	@ (800d86c <_dtoa_r+0x5c4>)
 800d654:	2200      	movs	r2, #0
 800d656:	4620      	mov	r0, r4
 800d658:	4629      	mov	r1, r5
 800d65a:	f7f3 fa3f 	bl	8000adc <__aeabi_dcmplt>
 800d65e:	2800      	cmp	r0, #0
 800d660:	f000 80ae 	beq.w	800d7c0 <_dtoa_r+0x518>
 800d664:	9b07      	ldr	r3, [sp, #28]
 800d666:	2b00      	cmp	r3, #0
 800d668:	f000 80aa 	beq.w	800d7c0 <_dtoa_r+0x518>
 800d66c:	9b00      	ldr	r3, [sp, #0]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	dd37      	ble.n	800d6e2 <_dtoa_r+0x43a>
 800d672:	1e7b      	subs	r3, r7, #1
 800d674:	9304      	str	r3, [sp, #16]
 800d676:	4620      	mov	r0, r4
 800d678:	4b7d      	ldr	r3, [pc, #500]	@ (800d870 <_dtoa_r+0x5c8>)
 800d67a:	2200      	movs	r2, #0
 800d67c:	4629      	mov	r1, r5
 800d67e:	f7f2 ffbb 	bl	80005f8 <__aeabi_dmul>
 800d682:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d686:	9c00      	ldr	r4, [sp, #0]
 800d688:	3601      	adds	r6, #1
 800d68a:	4630      	mov	r0, r6
 800d68c:	f7f2 ff4a 	bl	8000524 <__aeabi_i2d>
 800d690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d694:	f7f2 ffb0 	bl	80005f8 <__aeabi_dmul>
 800d698:	4b76      	ldr	r3, [pc, #472]	@ (800d874 <_dtoa_r+0x5cc>)
 800d69a:	2200      	movs	r2, #0
 800d69c:	f7f2 fdf6 	bl	800028c <__adddf3>
 800d6a0:	4605      	mov	r5, r0
 800d6a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d6a6:	2c00      	cmp	r4, #0
 800d6a8:	f040 808d 	bne.w	800d7c6 <_dtoa_r+0x51e>
 800d6ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6b0:	4b71      	ldr	r3, [pc, #452]	@ (800d878 <_dtoa_r+0x5d0>)
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	f7f2 fde8 	bl	8000288 <__aeabi_dsub>
 800d6b8:	4602      	mov	r2, r0
 800d6ba:	460b      	mov	r3, r1
 800d6bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d6c0:	462a      	mov	r2, r5
 800d6c2:	4633      	mov	r3, r6
 800d6c4:	f7f3 fa28 	bl	8000b18 <__aeabi_dcmpgt>
 800d6c8:	2800      	cmp	r0, #0
 800d6ca:	f040 828b 	bne.w	800dbe4 <_dtoa_r+0x93c>
 800d6ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6d2:	462a      	mov	r2, r5
 800d6d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d6d8:	f7f3 fa00 	bl	8000adc <__aeabi_dcmplt>
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	f040 8128 	bne.w	800d932 <_dtoa_r+0x68a>
 800d6e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d6e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d6ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	f2c0 815a 	blt.w	800d9a6 <_dtoa_r+0x6fe>
 800d6f2:	2f0e      	cmp	r7, #14
 800d6f4:	f300 8157 	bgt.w	800d9a6 <_dtoa_r+0x6fe>
 800d6f8:	4b5a      	ldr	r3, [pc, #360]	@ (800d864 <_dtoa_r+0x5bc>)
 800d6fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d6fe:	ed93 7b00 	vldr	d7, [r3]
 800d702:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d704:	2b00      	cmp	r3, #0
 800d706:	ed8d 7b00 	vstr	d7, [sp]
 800d70a:	da03      	bge.n	800d714 <_dtoa_r+0x46c>
 800d70c:	9b07      	ldr	r3, [sp, #28]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	f340 8101 	ble.w	800d916 <_dtoa_r+0x66e>
 800d714:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d718:	4656      	mov	r6, sl
 800d71a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d71e:	4620      	mov	r0, r4
 800d720:	4629      	mov	r1, r5
 800d722:	f7f3 f893 	bl	800084c <__aeabi_ddiv>
 800d726:	f7f3 fa17 	bl	8000b58 <__aeabi_d2iz>
 800d72a:	4680      	mov	r8, r0
 800d72c:	f7f2 fefa 	bl	8000524 <__aeabi_i2d>
 800d730:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d734:	f7f2 ff60 	bl	80005f8 <__aeabi_dmul>
 800d738:	4602      	mov	r2, r0
 800d73a:	460b      	mov	r3, r1
 800d73c:	4620      	mov	r0, r4
 800d73e:	4629      	mov	r1, r5
 800d740:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d744:	f7f2 fda0 	bl	8000288 <__aeabi_dsub>
 800d748:	f806 4b01 	strb.w	r4, [r6], #1
 800d74c:	9d07      	ldr	r5, [sp, #28]
 800d74e:	eba6 040a 	sub.w	r4, r6, sl
 800d752:	42a5      	cmp	r5, r4
 800d754:	4602      	mov	r2, r0
 800d756:	460b      	mov	r3, r1
 800d758:	f040 8117 	bne.w	800d98a <_dtoa_r+0x6e2>
 800d75c:	f7f2 fd96 	bl	800028c <__adddf3>
 800d760:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d764:	4604      	mov	r4, r0
 800d766:	460d      	mov	r5, r1
 800d768:	f7f3 f9d6 	bl	8000b18 <__aeabi_dcmpgt>
 800d76c:	2800      	cmp	r0, #0
 800d76e:	f040 80f9 	bne.w	800d964 <_dtoa_r+0x6bc>
 800d772:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d776:	4620      	mov	r0, r4
 800d778:	4629      	mov	r1, r5
 800d77a:	f7f3 f9a5 	bl	8000ac8 <__aeabi_dcmpeq>
 800d77e:	b118      	cbz	r0, 800d788 <_dtoa_r+0x4e0>
 800d780:	f018 0f01 	tst.w	r8, #1
 800d784:	f040 80ee 	bne.w	800d964 <_dtoa_r+0x6bc>
 800d788:	4649      	mov	r1, r9
 800d78a:	4658      	mov	r0, fp
 800d78c:	f000 fc90 	bl	800e0b0 <_Bfree>
 800d790:	2300      	movs	r3, #0
 800d792:	7033      	strb	r3, [r6, #0]
 800d794:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d796:	3701      	adds	r7, #1
 800d798:	601f      	str	r7, [r3, #0]
 800d79a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	f000 831d 	beq.w	800dddc <_dtoa_r+0xb34>
 800d7a2:	601e      	str	r6, [r3, #0]
 800d7a4:	e31a      	b.n	800dddc <_dtoa_r+0xb34>
 800d7a6:	07e2      	lsls	r2, r4, #31
 800d7a8:	d505      	bpl.n	800d7b6 <_dtoa_r+0x50e>
 800d7aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d7ae:	f7f2 ff23 	bl	80005f8 <__aeabi_dmul>
 800d7b2:	3601      	adds	r6, #1
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	1064      	asrs	r4, r4, #1
 800d7b8:	3508      	adds	r5, #8
 800d7ba:	e73f      	b.n	800d63c <_dtoa_r+0x394>
 800d7bc:	2602      	movs	r6, #2
 800d7be:	e742      	b.n	800d646 <_dtoa_r+0x39e>
 800d7c0:	9c07      	ldr	r4, [sp, #28]
 800d7c2:	9704      	str	r7, [sp, #16]
 800d7c4:	e761      	b.n	800d68a <_dtoa_r+0x3e2>
 800d7c6:	4b27      	ldr	r3, [pc, #156]	@ (800d864 <_dtoa_r+0x5bc>)
 800d7c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d7ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d7ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d7d2:	4454      	add	r4, sl
 800d7d4:	2900      	cmp	r1, #0
 800d7d6:	d053      	beq.n	800d880 <_dtoa_r+0x5d8>
 800d7d8:	4928      	ldr	r1, [pc, #160]	@ (800d87c <_dtoa_r+0x5d4>)
 800d7da:	2000      	movs	r0, #0
 800d7dc:	f7f3 f836 	bl	800084c <__aeabi_ddiv>
 800d7e0:	4633      	mov	r3, r6
 800d7e2:	462a      	mov	r2, r5
 800d7e4:	f7f2 fd50 	bl	8000288 <__aeabi_dsub>
 800d7e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d7ec:	4656      	mov	r6, sl
 800d7ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7f2:	f7f3 f9b1 	bl	8000b58 <__aeabi_d2iz>
 800d7f6:	4605      	mov	r5, r0
 800d7f8:	f7f2 fe94 	bl	8000524 <__aeabi_i2d>
 800d7fc:	4602      	mov	r2, r0
 800d7fe:	460b      	mov	r3, r1
 800d800:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d804:	f7f2 fd40 	bl	8000288 <__aeabi_dsub>
 800d808:	3530      	adds	r5, #48	@ 0x30
 800d80a:	4602      	mov	r2, r0
 800d80c:	460b      	mov	r3, r1
 800d80e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d812:	f806 5b01 	strb.w	r5, [r6], #1
 800d816:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d81a:	f7f3 f95f 	bl	8000adc <__aeabi_dcmplt>
 800d81e:	2800      	cmp	r0, #0
 800d820:	d171      	bne.n	800d906 <_dtoa_r+0x65e>
 800d822:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d826:	4911      	ldr	r1, [pc, #68]	@ (800d86c <_dtoa_r+0x5c4>)
 800d828:	2000      	movs	r0, #0
 800d82a:	f7f2 fd2d 	bl	8000288 <__aeabi_dsub>
 800d82e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d832:	f7f3 f953 	bl	8000adc <__aeabi_dcmplt>
 800d836:	2800      	cmp	r0, #0
 800d838:	f040 8095 	bne.w	800d966 <_dtoa_r+0x6be>
 800d83c:	42a6      	cmp	r6, r4
 800d83e:	f43f af50 	beq.w	800d6e2 <_dtoa_r+0x43a>
 800d842:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d846:	4b0a      	ldr	r3, [pc, #40]	@ (800d870 <_dtoa_r+0x5c8>)
 800d848:	2200      	movs	r2, #0
 800d84a:	f7f2 fed5 	bl	80005f8 <__aeabi_dmul>
 800d84e:	4b08      	ldr	r3, [pc, #32]	@ (800d870 <_dtoa_r+0x5c8>)
 800d850:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d854:	2200      	movs	r2, #0
 800d856:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d85a:	f7f2 fecd 	bl	80005f8 <__aeabi_dmul>
 800d85e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d862:	e7c4      	b.n	800d7ee <_dtoa_r+0x546>
 800d864:	08011180 	.word	0x08011180
 800d868:	08011158 	.word	0x08011158
 800d86c:	3ff00000 	.word	0x3ff00000
 800d870:	40240000 	.word	0x40240000
 800d874:	401c0000 	.word	0x401c0000
 800d878:	40140000 	.word	0x40140000
 800d87c:	3fe00000 	.word	0x3fe00000
 800d880:	4631      	mov	r1, r6
 800d882:	4628      	mov	r0, r5
 800d884:	f7f2 feb8 	bl	80005f8 <__aeabi_dmul>
 800d888:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d88c:	9415      	str	r4, [sp, #84]	@ 0x54
 800d88e:	4656      	mov	r6, sl
 800d890:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d894:	f7f3 f960 	bl	8000b58 <__aeabi_d2iz>
 800d898:	4605      	mov	r5, r0
 800d89a:	f7f2 fe43 	bl	8000524 <__aeabi_i2d>
 800d89e:	4602      	mov	r2, r0
 800d8a0:	460b      	mov	r3, r1
 800d8a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8a6:	f7f2 fcef 	bl	8000288 <__aeabi_dsub>
 800d8aa:	3530      	adds	r5, #48	@ 0x30
 800d8ac:	f806 5b01 	strb.w	r5, [r6], #1
 800d8b0:	4602      	mov	r2, r0
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	42a6      	cmp	r6, r4
 800d8b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d8ba:	f04f 0200 	mov.w	r2, #0
 800d8be:	d124      	bne.n	800d90a <_dtoa_r+0x662>
 800d8c0:	4bac      	ldr	r3, [pc, #688]	@ (800db74 <_dtoa_r+0x8cc>)
 800d8c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d8c6:	f7f2 fce1 	bl	800028c <__adddf3>
 800d8ca:	4602      	mov	r2, r0
 800d8cc:	460b      	mov	r3, r1
 800d8ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8d2:	f7f3 f921 	bl	8000b18 <__aeabi_dcmpgt>
 800d8d6:	2800      	cmp	r0, #0
 800d8d8:	d145      	bne.n	800d966 <_dtoa_r+0x6be>
 800d8da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d8de:	49a5      	ldr	r1, [pc, #660]	@ (800db74 <_dtoa_r+0x8cc>)
 800d8e0:	2000      	movs	r0, #0
 800d8e2:	f7f2 fcd1 	bl	8000288 <__aeabi_dsub>
 800d8e6:	4602      	mov	r2, r0
 800d8e8:	460b      	mov	r3, r1
 800d8ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8ee:	f7f3 f8f5 	bl	8000adc <__aeabi_dcmplt>
 800d8f2:	2800      	cmp	r0, #0
 800d8f4:	f43f aef5 	beq.w	800d6e2 <_dtoa_r+0x43a>
 800d8f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d8fa:	1e73      	subs	r3, r6, #1
 800d8fc:	9315      	str	r3, [sp, #84]	@ 0x54
 800d8fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d902:	2b30      	cmp	r3, #48	@ 0x30
 800d904:	d0f8      	beq.n	800d8f8 <_dtoa_r+0x650>
 800d906:	9f04      	ldr	r7, [sp, #16]
 800d908:	e73e      	b.n	800d788 <_dtoa_r+0x4e0>
 800d90a:	4b9b      	ldr	r3, [pc, #620]	@ (800db78 <_dtoa_r+0x8d0>)
 800d90c:	f7f2 fe74 	bl	80005f8 <__aeabi_dmul>
 800d910:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d914:	e7bc      	b.n	800d890 <_dtoa_r+0x5e8>
 800d916:	d10c      	bne.n	800d932 <_dtoa_r+0x68a>
 800d918:	4b98      	ldr	r3, [pc, #608]	@ (800db7c <_dtoa_r+0x8d4>)
 800d91a:	2200      	movs	r2, #0
 800d91c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d920:	f7f2 fe6a 	bl	80005f8 <__aeabi_dmul>
 800d924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d928:	f7f3 f8ec 	bl	8000b04 <__aeabi_dcmpge>
 800d92c:	2800      	cmp	r0, #0
 800d92e:	f000 8157 	beq.w	800dbe0 <_dtoa_r+0x938>
 800d932:	2400      	movs	r4, #0
 800d934:	4625      	mov	r5, r4
 800d936:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d938:	43db      	mvns	r3, r3
 800d93a:	9304      	str	r3, [sp, #16]
 800d93c:	4656      	mov	r6, sl
 800d93e:	2700      	movs	r7, #0
 800d940:	4621      	mov	r1, r4
 800d942:	4658      	mov	r0, fp
 800d944:	f000 fbb4 	bl	800e0b0 <_Bfree>
 800d948:	2d00      	cmp	r5, #0
 800d94a:	d0dc      	beq.n	800d906 <_dtoa_r+0x65e>
 800d94c:	b12f      	cbz	r7, 800d95a <_dtoa_r+0x6b2>
 800d94e:	42af      	cmp	r7, r5
 800d950:	d003      	beq.n	800d95a <_dtoa_r+0x6b2>
 800d952:	4639      	mov	r1, r7
 800d954:	4658      	mov	r0, fp
 800d956:	f000 fbab 	bl	800e0b0 <_Bfree>
 800d95a:	4629      	mov	r1, r5
 800d95c:	4658      	mov	r0, fp
 800d95e:	f000 fba7 	bl	800e0b0 <_Bfree>
 800d962:	e7d0      	b.n	800d906 <_dtoa_r+0x65e>
 800d964:	9704      	str	r7, [sp, #16]
 800d966:	4633      	mov	r3, r6
 800d968:	461e      	mov	r6, r3
 800d96a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d96e:	2a39      	cmp	r2, #57	@ 0x39
 800d970:	d107      	bne.n	800d982 <_dtoa_r+0x6da>
 800d972:	459a      	cmp	sl, r3
 800d974:	d1f8      	bne.n	800d968 <_dtoa_r+0x6c0>
 800d976:	9a04      	ldr	r2, [sp, #16]
 800d978:	3201      	adds	r2, #1
 800d97a:	9204      	str	r2, [sp, #16]
 800d97c:	2230      	movs	r2, #48	@ 0x30
 800d97e:	f88a 2000 	strb.w	r2, [sl]
 800d982:	781a      	ldrb	r2, [r3, #0]
 800d984:	3201      	adds	r2, #1
 800d986:	701a      	strb	r2, [r3, #0]
 800d988:	e7bd      	b.n	800d906 <_dtoa_r+0x65e>
 800d98a:	4b7b      	ldr	r3, [pc, #492]	@ (800db78 <_dtoa_r+0x8d0>)
 800d98c:	2200      	movs	r2, #0
 800d98e:	f7f2 fe33 	bl	80005f8 <__aeabi_dmul>
 800d992:	2200      	movs	r2, #0
 800d994:	2300      	movs	r3, #0
 800d996:	4604      	mov	r4, r0
 800d998:	460d      	mov	r5, r1
 800d99a:	f7f3 f895 	bl	8000ac8 <__aeabi_dcmpeq>
 800d99e:	2800      	cmp	r0, #0
 800d9a0:	f43f aebb 	beq.w	800d71a <_dtoa_r+0x472>
 800d9a4:	e6f0      	b.n	800d788 <_dtoa_r+0x4e0>
 800d9a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d9a8:	2a00      	cmp	r2, #0
 800d9aa:	f000 80db 	beq.w	800db64 <_dtoa_r+0x8bc>
 800d9ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d9b0:	2a01      	cmp	r2, #1
 800d9b2:	f300 80bf 	bgt.w	800db34 <_dtoa_r+0x88c>
 800d9b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d9b8:	2a00      	cmp	r2, #0
 800d9ba:	f000 80b7 	beq.w	800db2c <_dtoa_r+0x884>
 800d9be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d9c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d9c4:	4646      	mov	r6, r8
 800d9c6:	9a08      	ldr	r2, [sp, #32]
 800d9c8:	2101      	movs	r1, #1
 800d9ca:	441a      	add	r2, r3
 800d9cc:	4658      	mov	r0, fp
 800d9ce:	4498      	add	r8, r3
 800d9d0:	9208      	str	r2, [sp, #32]
 800d9d2:	f000 fc6b 	bl	800e2ac <__i2b>
 800d9d6:	4605      	mov	r5, r0
 800d9d8:	b15e      	cbz	r6, 800d9f2 <_dtoa_r+0x74a>
 800d9da:	9b08      	ldr	r3, [sp, #32]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	dd08      	ble.n	800d9f2 <_dtoa_r+0x74a>
 800d9e0:	42b3      	cmp	r3, r6
 800d9e2:	9a08      	ldr	r2, [sp, #32]
 800d9e4:	bfa8      	it	ge
 800d9e6:	4633      	movge	r3, r6
 800d9e8:	eba8 0803 	sub.w	r8, r8, r3
 800d9ec:	1af6      	subs	r6, r6, r3
 800d9ee:	1ad3      	subs	r3, r2, r3
 800d9f0:	9308      	str	r3, [sp, #32]
 800d9f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9f4:	b1f3      	cbz	r3, 800da34 <_dtoa_r+0x78c>
 800d9f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	f000 80b7 	beq.w	800db6c <_dtoa_r+0x8c4>
 800d9fe:	b18c      	cbz	r4, 800da24 <_dtoa_r+0x77c>
 800da00:	4629      	mov	r1, r5
 800da02:	4622      	mov	r2, r4
 800da04:	4658      	mov	r0, fp
 800da06:	f000 fd11 	bl	800e42c <__pow5mult>
 800da0a:	464a      	mov	r2, r9
 800da0c:	4601      	mov	r1, r0
 800da0e:	4605      	mov	r5, r0
 800da10:	4658      	mov	r0, fp
 800da12:	f000 fc61 	bl	800e2d8 <__multiply>
 800da16:	4649      	mov	r1, r9
 800da18:	9004      	str	r0, [sp, #16]
 800da1a:	4658      	mov	r0, fp
 800da1c:	f000 fb48 	bl	800e0b0 <_Bfree>
 800da20:	9b04      	ldr	r3, [sp, #16]
 800da22:	4699      	mov	r9, r3
 800da24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da26:	1b1a      	subs	r2, r3, r4
 800da28:	d004      	beq.n	800da34 <_dtoa_r+0x78c>
 800da2a:	4649      	mov	r1, r9
 800da2c:	4658      	mov	r0, fp
 800da2e:	f000 fcfd 	bl	800e42c <__pow5mult>
 800da32:	4681      	mov	r9, r0
 800da34:	2101      	movs	r1, #1
 800da36:	4658      	mov	r0, fp
 800da38:	f000 fc38 	bl	800e2ac <__i2b>
 800da3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da3e:	4604      	mov	r4, r0
 800da40:	2b00      	cmp	r3, #0
 800da42:	f000 81cf 	beq.w	800dde4 <_dtoa_r+0xb3c>
 800da46:	461a      	mov	r2, r3
 800da48:	4601      	mov	r1, r0
 800da4a:	4658      	mov	r0, fp
 800da4c:	f000 fcee 	bl	800e42c <__pow5mult>
 800da50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da52:	2b01      	cmp	r3, #1
 800da54:	4604      	mov	r4, r0
 800da56:	f300 8095 	bgt.w	800db84 <_dtoa_r+0x8dc>
 800da5a:	9b02      	ldr	r3, [sp, #8]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	f040 8087 	bne.w	800db70 <_dtoa_r+0x8c8>
 800da62:	9b03      	ldr	r3, [sp, #12]
 800da64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da68:	2b00      	cmp	r3, #0
 800da6a:	f040 8089 	bne.w	800db80 <_dtoa_r+0x8d8>
 800da6e:	9b03      	ldr	r3, [sp, #12]
 800da70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800da74:	0d1b      	lsrs	r3, r3, #20
 800da76:	051b      	lsls	r3, r3, #20
 800da78:	b12b      	cbz	r3, 800da86 <_dtoa_r+0x7de>
 800da7a:	9b08      	ldr	r3, [sp, #32]
 800da7c:	3301      	adds	r3, #1
 800da7e:	9308      	str	r3, [sp, #32]
 800da80:	f108 0801 	add.w	r8, r8, #1
 800da84:	2301      	movs	r3, #1
 800da86:	930a      	str	r3, [sp, #40]	@ 0x28
 800da88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	f000 81b0 	beq.w	800ddf0 <_dtoa_r+0xb48>
 800da90:	6923      	ldr	r3, [r4, #16]
 800da92:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800da96:	6918      	ldr	r0, [r3, #16]
 800da98:	f000 fbbc 	bl	800e214 <__hi0bits>
 800da9c:	f1c0 0020 	rsb	r0, r0, #32
 800daa0:	9b08      	ldr	r3, [sp, #32]
 800daa2:	4418      	add	r0, r3
 800daa4:	f010 001f 	ands.w	r0, r0, #31
 800daa8:	d077      	beq.n	800db9a <_dtoa_r+0x8f2>
 800daaa:	f1c0 0320 	rsb	r3, r0, #32
 800daae:	2b04      	cmp	r3, #4
 800dab0:	dd6b      	ble.n	800db8a <_dtoa_r+0x8e2>
 800dab2:	9b08      	ldr	r3, [sp, #32]
 800dab4:	f1c0 001c 	rsb	r0, r0, #28
 800dab8:	4403      	add	r3, r0
 800daba:	4480      	add	r8, r0
 800dabc:	4406      	add	r6, r0
 800dabe:	9308      	str	r3, [sp, #32]
 800dac0:	f1b8 0f00 	cmp.w	r8, #0
 800dac4:	dd05      	ble.n	800dad2 <_dtoa_r+0x82a>
 800dac6:	4649      	mov	r1, r9
 800dac8:	4642      	mov	r2, r8
 800daca:	4658      	mov	r0, fp
 800dacc:	f000 fd08 	bl	800e4e0 <__lshift>
 800dad0:	4681      	mov	r9, r0
 800dad2:	9b08      	ldr	r3, [sp, #32]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	dd05      	ble.n	800dae4 <_dtoa_r+0x83c>
 800dad8:	4621      	mov	r1, r4
 800dada:	461a      	mov	r2, r3
 800dadc:	4658      	mov	r0, fp
 800dade:	f000 fcff 	bl	800e4e0 <__lshift>
 800dae2:	4604      	mov	r4, r0
 800dae4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d059      	beq.n	800db9e <_dtoa_r+0x8f6>
 800daea:	4621      	mov	r1, r4
 800daec:	4648      	mov	r0, r9
 800daee:	f000 fd63 	bl	800e5b8 <__mcmp>
 800daf2:	2800      	cmp	r0, #0
 800daf4:	da53      	bge.n	800db9e <_dtoa_r+0x8f6>
 800daf6:	1e7b      	subs	r3, r7, #1
 800daf8:	9304      	str	r3, [sp, #16]
 800dafa:	4649      	mov	r1, r9
 800dafc:	2300      	movs	r3, #0
 800dafe:	220a      	movs	r2, #10
 800db00:	4658      	mov	r0, fp
 800db02:	f000 faf7 	bl	800e0f4 <__multadd>
 800db06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db08:	4681      	mov	r9, r0
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	f000 8172 	beq.w	800ddf4 <_dtoa_r+0xb4c>
 800db10:	2300      	movs	r3, #0
 800db12:	4629      	mov	r1, r5
 800db14:	220a      	movs	r2, #10
 800db16:	4658      	mov	r0, fp
 800db18:	f000 faec 	bl	800e0f4 <__multadd>
 800db1c:	9b00      	ldr	r3, [sp, #0]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	4605      	mov	r5, r0
 800db22:	dc67      	bgt.n	800dbf4 <_dtoa_r+0x94c>
 800db24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db26:	2b02      	cmp	r3, #2
 800db28:	dc41      	bgt.n	800dbae <_dtoa_r+0x906>
 800db2a:	e063      	b.n	800dbf4 <_dtoa_r+0x94c>
 800db2c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800db2e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800db32:	e746      	b.n	800d9c2 <_dtoa_r+0x71a>
 800db34:	9b07      	ldr	r3, [sp, #28]
 800db36:	1e5c      	subs	r4, r3, #1
 800db38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db3a:	42a3      	cmp	r3, r4
 800db3c:	bfbf      	itttt	lt
 800db3e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800db40:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800db42:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800db44:	1ae3      	sublt	r3, r4, r3
 800db46:	bfb4      	ite	lt
 800db48:	18d2      	addlt	r2, r2, r3
 800db4a:	1b1c      	subge	r4, r3, r4
 800db4c:	9b07      	ldr	r3, [sp, #28]
 800db4e:	bfbc      	itt	lt
 800db50:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800db52:	2400      	movlt	r4, #0
 800db54:	2b00      	cmp	r3, #0
 800db56:	bfb5      	itete	lt
 800db58:	eba8 0603 	sublt.w	r6, r8, r3
 800db5c:	9b07      	ldrge	r3, [sp, #28]
 800db5e:	2300      	movlt	r3, #0
 800db60:	4646      	movge	r6, r8
 800db62:	e730      	b.n	800d9c6 <_dtoa_r+0x71e>
 800db64:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800db66:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800db68:	4646      	mov	r6, r8
 800db6a:	e735      	b.n	800d9d8 <_dtoa_r+0x730>
 800db6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800db6e:	e75c      	b.n	800da2a <_dtoa_r+0x782>
 800db70:	2300      	movs	r3, #0
 800db72:	e788      	b.n	800da86 <_dtoa_r+0x7de>
 800db74:	3fe00000 	.word	0x3fe00000
 800db78:	40240000 	.word	0x40240000
 800db7c:	40140000 	.word	0x40140000
 800db80:	9b02      	ldr	r3, [sp, #8]
 800db82:	e780      	b.n	800da86 <_dtoa_r+0x7de>
 800db84:	2300      	movs	r3, #0
 800db86:	930a      	str	r3, [sp, #40]	@ 0x28
 800db88:	e782      	b.n	800da90 <_dtoa_r+0x7e8>
 800db8a:	d099      	beq.n	800dac0 <_dtoa_r+0x818>
 800db8c:	9a08      	ldr	r2, [sp, #32]
 800db8e:	331c      	adds	r3, #28
 800db90:	441a      	add	r2, r3
 800db92:	4498      	add	r8, r3
 800db94:	441e      	add	r6, r3
 800db96:	9208      	str	r2, [sp, #32]
 800db98:	e792      	b.n	800dac0 <_dtoa_r+0x818>
 800db9a:	4603      	mov	r3, r0
 800db9c:	e7f6      	b.n	800db8c <_dtoa_r+0x8e4>
 800db9e:	9b07      	ldr	r3, [sp, #28]
 800dba0:	9704      	str	r7, [sp, #16]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	dc20      	bgt.n	800dbe8 <_dtoa_r+0x940>
 800dba6:	9300      	str	r3, [sp, #0]
 800dba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbaa:	2b02      	cmp	r3, #2
 800dbac:	dd1e      	ble.n	800dbec <_dtoa_r+0x944>
 800dbae:	9b00      	ldr	r3, [sp, #0]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	f47f aec0 	bne.w	800d936 <_dtoa_r+0x68e>
 800dbb6:	4621      	mov	r1, r4
 800dbb8:	2205      	movs	r2, #5
 800dbba:	4658      	mov	r0, fp
 800dbbc:	f000 fa9a 	bl	800e0f4 <__multadd>
 800dbc0:	4601      	mov	r1, r0
 800dbc2:	4604      	mov	r4, r0
 800dbc4:	4648      	mov	r0, r9
 800dbc6:	f000 fcf7 	bl	800e5b8 <__mcmp>
 800dbca:	2800      	cmp	r0, #0
 800dbcc:	f77f aeb3 	ble.w	800d936 <_dtoa_r+0x68e>
 800dbd0:	4656      	mov	r6, sl
 800dbd2:	2331      	movs	r3, #49	@ 0x31
 800dbd4:	f806 3b01 	strb.w	r3, [r6], #1
 800dbd8:	9b04      	ldr	r3, [sp, #16]
 800dbda:	3301      	adds	r3, #1
 800dbdc:	9304      	str	r3, [sp, #16]
 800dbde:	e6ae      	b.n	800d93e <_dtoa_r+0x696>
 800dbe0:	9c07      	ldr	r4, [sp, #28]
 800dbe2:	9704      	str	r7, [sp, #16]
 800dbe4:	4625      	mov	r5, r4
 800dbe6:	e7f3      	b.n	800dbd0 <_dtoa_r+0x928>
 800dbe8:	9b07      	ldr	r3, [sp, #28]
 800dbea:	9300      	str	r3, [sp, #0]
 800dbec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	f000 8104 	beq.w	800ddfc <_dtoa_r+0xb54>
 800dbf4:	2e00      	cmp	r6, #0
 800dbf6:	dd05      	ble.n	800dc04 <_dtoa_r+0x95c>
 800dbf8:	4629      	mov	r1, r5
 800dbfa:	4632      	mov	r2, r6
 800dbfc:	4658      	mov	r0, fp
 800dbfe:	f000 fc6f 	bl	800e4e0 <__lshift>
 800dc02:	4605      	mov	r5, r0
 800dc04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d05a      	beq.n	800dcc0 <_dtoa_r+0xa18>
 800dc0a:	6869      	ldr	r1, [r5, #4]
 800dc0c:	4658      	mov	r0, fp
 800dc0e:	f000 fa0f 	bl	800e030 <_Balloc>
 800dc12:	4606      	mov	r6, r0
 800dc14:	b928      	cbnz	r0, 800dc22 <_dtoa_r+0x97a>
 800dc16:	4b84      	ldr	r3, [pc, #528]	@ (800de28 <_dtoa_r+0xb80>)
 800dc18:	4602      	mov	r2, r0
 800dc1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dc1e:	f7ff bb5a 	b.w	800d2d6 <_dtoa_r+0x2e>
 800dc22:	692a      	ldr	r2, [r5, #16]
 800dc24:	3202      	adds	r2, #2
 800dc26:	0092      	lsls	r2, r2, #2
 800dc28:	f105 010c 	add.w	r1, r5, #12
 800dc2c:	300c      	adds	r0, #12
 800dc2e:	f7ff fa9c 	bl	800d16a <memcpy>
 800dc32:	2201      	movs	r2, #1
 800dc34:	4631      	mov	r1, r6
 800dc36:	4658      	mov	r0, fp
 800dc38:	f000 fc52 	bl	800e4e0 <__lshift>
 800dc3c:	f10a 0301 	add.w	r3, sl, #1
 800dc40:	9307      	str	r3, [sp, #28]
 800dc42:	9b00      	ldr	r3, [sp, #0]
 800dc44:	4453      	add	r3, sl
 800dc46:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dc48:	9b02      	ldr	r3, [sp, #8]
 800dc4a:	f003 0301 	and.w	r3, r3, #1
 800dc4e:	462f      	mov	r7, r5
 800dc50:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc52:	4605      	mov	r5, r0
 800dc54:	9b07      	ldr	r3, [sp, #28]
 800dc56:	4621      	mov	r1, r4
 800dc58:	3b01      	subs	r3, #1
 800dc5a:	4648      	mov	r0, r9
 800dc5c:	9300      	str	r3, [sp, #0]
 800dc5e:	f7ff fa99 	bl	800d194 <quorem>
 800dc62:	4639      	mov	r1, r7
 800dc64:	9002      	str	r0, [sp, #8]
 800dc66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dc6a:	4648      	mov	r0, r9
 800dc6c:	f000 fca4 	bl	800e5b8 <__mcmp>
 800dc70:	462a      	mov	r2, r5
 800dc72:	9008      	str	r0, [sp, #32]
 800dc74:	4621      	mov	r1, r4
 800dc76:	4658      	mov	r0, fp
 800dc78:	f000 fcba 	bl	800e5f0 <__mdiff>
 800dc7c:	68c2      	ldr	r2, [r0, #12]
 800dc7e:	4606      	mov	r6, r0
 800dc80:	bb02      	cbnz	r2, 800dcc4 <_dtoa_r+0xa1c>
 800dc82:	4601      	mov	r1, r0
 800dc84:	4648      	mov	r0, r9
 800dc86:	f000 fc97 	bl	800e5b8 <__mcmp>
 800dc8a:	4602      	mov	r2, r0
 800dc8c:	4631      	mov	r1, r6
 800dc8e:	4658      	mov	r0, fp
 800dc90:	920e      	str	r2, [sp, #56]	@ 0x38
 800dc92:	f000 fa0d 	bl	800e0b0 <_Bfree>
 800dc96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc9a:	9e07      	ldr	r6, [sp, #28]
 800dc9c:	ea43 0102 	orr.w	r1, r3, r2
 800dca0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dca2:	4319      	orrs	r1, r3
 800dca4:	d110      	bne.n	800dcc8 <_dtoa_r+0xa20>
 800dca6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dcaa:	d029      	beq.n	800dd00 <_dtoa_r+0xa58>
 800dcac:	9b08      	ldr	r3, [sp, #32]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	dd02      	ble.n	800dcb8 <_dtoa_r+0xa10>
 800dcb2:	9b02      	ldr	r3, [sp, #8]
 800dcb4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800dcb8:	9b00      	ldr	r3, [sp, #0]
 800dcba:	f883 8000 	strb.w	r8, [r3]
 800dcbe:	e63f      	b.n	800d940 <_dtoa_r+0x698>
 800dcc0:	4628      	mov	r0, r5
 800dcc2:	e7bb      	b.n	800dc3c <_dtoa_r+0x994>
 800dcc4:	2201      	movs	r2, #1
 800dcc6:	e7e1      	b.n	800dc8c <_dtoa_r+0x9e4>
 800dcc8:	9b08      	ldr	r3, [sp, #32]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	db04      	blt.n	800dcd8 <_dtoa_r+0xa30>
 800dcce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dcd0:	430b      	orrs	r3, r1
 800dcd2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dcd4:	430b      	orrs	r3, r1
 800dcd6:	d120      	bne.n	800dd1a <_dtoa_r+0xa72>
 800dcd8:	2a00      	cmp	r2, #0
 800dcda:	dded      	ble.n	800dcb8 <_dtoa_r+0xa10>
 800dcdc:	4649      	mov	r1, r9
 800dcde:	2201      	movs	r2, #1
 800dce0:	4658      	mov	r0, fp
 800dce2:	f000 fbfd 	bl	800e4e0 <__lshift>
 800dce6:	4621      	mov	r1, r4
 800dce8:	4681      	mov	r9, r0
 800dcea:	f000 fc65 	bl	800e5b8 <__mcmp>
 800dcee:	2800      	cmp	r0, #0
 800dcf0:	dc03      	bgt.n	800dcfa <_dtoa_r+0xa52>
 800dcf2:	d1e1      	bne.n	800dcb8 <_dtoa_r+0xa10>
 800dcf4:	f018 0f01 	tst.w	r8, #1
 800dcf8:	d0de      	beq.n	800dcb8 <_dtoa_r+0xa10>
 800dcfa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dcfe:	d1d8      	bne.n	800dcb2 <_dtoa_r+0xa0a>
 800dd00:	9a00      	ldr	r2, [sp, #0]
 800dd02:	2339      	movs	r3, #57	@ 0x39
 800dd04:	7013      	strb	r3, [r2, #0]
 800dd06:	4633      	mov	r3, r6
 800dd08:	461e      	mov	r6, r3
 800dd0a:	3b01      	subs	r3, #1
 800dd0c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dd10:	2a39      	cmp	r2, #57	@ 0x39
 800dd12:	d052      	beq.n	800ddba <_dtoa_r+0xb12>
 800dd14:	3201      	adds	r2, #1
 800dd16:	701a      	strb	r2, [r3, #0]
 800dd18:	e612      	b.n	800d940 <_dtoa_r+0x698>
 800dd1a:	2a00      	cmp	r2, #0
 800dd1c:	dd07      	ble.n	800dd2e <_dtoa_r+0xa86>
 800dd1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dd22:	d0ed      	beq.n	800dd00 <_dtoa_r+0xa58>
 800dd24:	9a00      	ldr	r2, [sp, #0]
 800dd26:	f108 0301 	add.w	r3, r8, #1
 800dd2a:	7013      	strb	r3, [r2, #0]
 800dd2c:	e608      	b.n	800d940 <_dtoa_r+0x698>
 800dd2e:	9b07      	ldr	r3, [sp, #28]
 800dd30:	9a07      	ldr	r2, [sp, #28]
 800dd32:	f803 8c01 	strb.w	r8, [r3, #-1]
 800dd36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd38:	4293      	cmp	r3, r2
 800dd3a:	d028      	beq.n	800dd8e <_dtoa_r+0xae6>
 800dd3c:	4649      	mov	r1, r9
 800dd3e:	2300      	movs	r3, #0
 800dd40:	220a      	movs	r2, #10
 800dd42:	4658      	mov	r0, fp
 800dd44:	f000 f9d6 	bl	800e0f4 <__multadd>
 800dd48:	42af      	cmp	r7, r5
 800dd4a:	4681      	mov	r9, r0
 800dd4c:	f04f 0300 	mov.w	r3, #0
 800dd50:	f04f 020a 	mov.w	r2, #10
 800dd54:	4639      	mov	r1, r7
 800dd56:	4658      	mov	r0, fp
 800dd58:	d107      	bne.n	800dd6a <_dtoa_r+0xac2>
 800dd5a:	f000 f9cb 	bl	800e0f4 <__multadd>
 800dd5e:	4607      	mov	r7, r0
 800dd60:	4605      	mov	r5, r0
 800dd62:	9b07      	ldr	r3, [sp, #28]
 800dd64:	3301      	adds	r3, #1
 800dd66:	9307      	str	r3, [sp, #28]
 800dd68:	e774      	b.n	800dc54 <_dtoa_r+0x9ac>
 800dd6a:	f000 f9c3 	bl	800e0f4 <__multadd>
 800dd6e:	4629      	mov	r1, r5
 800dd70:	4607      	mov	r7, r0
 800dd72:	2300      	movs	r3, #0
 800dd74:	220a      	movs	r2, #10
 800dd76:	4658      	mov	r0, fp
 800dd78:	f000 f9bc 	bl	800e0f4 <__multadd>
 800dd7c:	4605      	mov	r5, r0
 800dd7e:	e7f0      	b.n	800dd62 <_dtoa_r+0xaba>
 800dd80:	9b00      	ldr	r3, [sp, #0]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	bfcc      	ite	gt
 800dd86:	461e      	movgt	r6, r3
 800dd88:	2601      	movle	r6, #1
 800dd8a:	4456      	add	r6, sl
 800dd8c:	2700      	movs	r7, #0
 800dd8e:	4649      	mov	r1, r9
 800dd90:	2201      	movs	r2, #1
 800dd92:	4658      	mov	r0, fp
 800dd94:	f000 fba4 	bl	800e4e0 <__lshift>
 800dd98:	4621      	mov	r1, r4
 800dd9a:	4681      	mov	r9, r0
 800dd9c:	f000 fc0c 	bl	800e5b8 <__mcmp>
 800dda0:	2800      	cmp	r0, #0
 800dda2:	dcb0      	bgt.n	800dd06 <_dtoa_r+0xa5e>
 800dda4:	d102      	bne.n	800ddac <_dtoa_r+0xb04>
 800dda6:	f018 0f01 	tst.w	r8, #1
 800ddaa:	d1ac      	bne.n	800dd06 <_dtoa_r+0xa5e>
 800ddac:	4633      	mov	r3, r6
 800ddae:	461e      	mov	r6, r3
 800ddb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ddb4:	2a30      	cmp	r2, #48	@ 0x30
 800ddb6:	d0fa      	beq.n	800ddae <_dtoa_r+0xb06>
 800ddb8:	e5c2      	b.n	800d940 <_dtoa_r+0x698>
 800ddba:	459a      	cmp	sl, r3
 800ddbc:	d1a4      	bne.n	800dd08 <_dtoa_r+0xa60>
 800ddbe:	9b04      	ldr	r3, [sp, #16]
 800ddc0:	3301      	adds	r3, #1
 800ddc2:	9304      	str	r3, [sp, #16]
 800ddc4:	2331      	movs	r3, #49	@ 0x31
 800ddc6:	f88a 3000 	strb.w	r3, [sl]
 800ddca:	e5b9      	b.n	800d940 <_dtoa_r+0x698>
 800ddcc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ddce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800de2c <_dtoa_r+0xb84>
 800ddd2:	b11b      	cbz	r3, 800dddc <_dtoa_r+0xb34>
 800ddd4:	f10a 0308 	add.w	r3, sl, #8
 800ddd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ddda:	6013      	str	r3, [r2, #0]
 800dddc:	4650      	mov	r0, sl
 800ddde:	b019      	add	sp, #100	@ 0x64
 800dde0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dde4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dde6:	2b01      	cmp	r3, #1
 800dde8:	f77f ae37 	ble.w	800da5a <_dtoa_r+0x7b2>
 800ddec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ddee:	930a      	str	r3, [sp, #40]	@ 0x28
 800ddf0:	2001      	movs	r0, #1
 800ddf2:	e655      	b.n	800daa0 <_dtoa_r+0x7f8>
 800ddf4:	9b00      	ldr	r3, [sp, #0]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	f77f aed6 	ble.w	800dba8 <_dtoa_r+0x900>
 800ddfc:	4656      	mov	r6, sl
 800ddfe:	4621      	mov	r1, r4
 800de00:	4648      	mov	r0, r9
 800de02:	f7ff f9c7 	bl	800d194 <quorem>
 800de06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800de0a:	f806 8b01 	strb.w	r8, [r6], #1
 800de0e:	9b00      	ldr	r3, [sp, #0]
 800de10:	eba6 020a 	sub.w	r2, r6, sl
 800de14:	4293      	cmp	r3, r2
 800de16:	ddb3      	ble.n	800dd80 <_dtoa_r+0xad8>
 800de18:	4649      	mov	r1, r9
 800de1a:	2300      	movs	r3, #0
 800de1c:	220a      	movs	r2, #10
 800de1e:	4658      	mov	r0, fp
 800de20:	f000 f968 	bl	800e0f4 <__multadd>
 800de24:	4681      	mov	r9, r0
 800de26:	e7ea      	b.n	800ddfe <_dtoa_r+0xb56>
 800de28:	080110e2 	.word	0x080110e2
 800de2c:	08011066 	.word	0x08011066

0800de30 <_free_r>:
 800de30:	b538      	push	{r3, r4, r5, lr}
 800de32:	4605      	mov	r5, r0
 800de34:	2900      	cmp	r1, #0
 800de36:	d041      	beq.n	800debc <_free_r+0x8c>
 800de38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de3c:	1f0c      	subs	r4, r1, #4
 800de3e:	2b00      	cmp	r3, #0
 800de40:	bfb8      	it	lt
 800de42:	18e4      	addlt	r4, r4, r3
 800de44:	f000 f8e8 	bl	800e018 <__malloc_lock>
 800de48:	4a1d      	ldr	r2, [pc, #116]	@ (800dec0 <_free_r+0x90>)
 800de4a:	6813      	ldr	r3, [r2, #0]
 800de4c:	b933      	cbnz	r3, 800de5c <_free_r+0x2c>
 800de4e:	6063      	str	r3, [r4, #4]
 800de50:	6014      	str	r4, [r2, #0]
 800de52:	4628      	mov	r0, r5
 800de54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de58:	f000 b8e4 	b.w	800e024 <__malloc_unlock>
 800de5c:	42a3      	cmp	r3, r4
 800de5e:	d908      	bls.n	800de72 <_free_r+0x42>
 800de60:	6820      	ldr	r0, [r4, #0]
 800de62:	1821      	adds	r1, r4, r0
 800de64:	428b      	cmp	r3, r1
 800de66:	bf01      	itttt	eq
 800de68:	6819      	ldreq	r1, [r3, #0]
 800de6a:	685b      	ldreq	r3, [r3, #4]
 800de6c:	1809      	addeq	r1, r1, r0
 800de6e:	6021      	streq	r1, [r4, #0]
 800de70:	e7ed      	b.n	800de4e <_free_r+0x1e>
 800de72:	461a      	mov	r2, r3
 800de74:	685b      	ldr	r3, [r3, #4]
 800de76:	b10b      	cbz	r3, 800de7c <_free_r+0x4c>
 800de78:	42a3      	cmp	r3, r4
 800de7a:	d9fa      	bls.n	800de72 <_free_r+0x42>
 800de7c:	6811      	ldr	r1, [r2, #0]
 800de7e:	1850      	adds	r0, r2, r1
 800de80:	42a0      	cmp	r0, r4
 800de82:	d10b      	bne.n	800de9c <_free_r+0x6c>
 800de84:	6820      	ldr	r0, [r4, #0]
 800de86:	4401      	add	r1, r0
 800de88:	1850      	adds	r0, r2, r1
 800de8a:	4283      	cmp	r3, r0
 800de8c:	6011      	str	r1, [r2, #0]
 800de8e:	d1e0      	bne.n	800de52 <_free_r+0x22>
 800de90:	6818      	ldr	r0, [r3, #0]
 800de92:	685b      	ldr	r3, [r3, #4]
 800de94:	6053      	str	r3, [r2, #4]
 800de96:	4408      	add	r0, r1
 800de98:	6010      	str	r0, [r2, #0]
 800de9a:	e7da      	b.n	800de52 <_free_r+0x22>
 800de9c:	d902      	bls.n	800dea4 <_free_r+0x74>
 800de9e:	230c      	movs	r3, #12
 800dea0:	602b      	str	r3, [r5, #0]
 800dea2:	e7d6      	b.n	800de52 <_free_r+0x22>
 800dea4:	6820      	ldr	r0, [r4, #0]
 800dea6:	1821      	adds	r1, r4, r0
 800dea8:	428b      	cmp	r3, r1
 800deaa:	bf04      	itt	eq
 800deac:	6819      	ldreq	r1, [r3, #0]
 800deae:	685b      	ldreq	r3, [r3, #4]
 800deb0:	6063      	str	r3, [r4, #4]
 800deb2:	bf04      	itt	eq
 800deb4:	1809      	addeq	r1, r1, r0
 800deb6:	6021      	streq	r1, [r4, #0]
 800deb8:	6054      	str	r4, [r2, #4]
 800deba:	e7ca      	b.n	800de52 <_free_r+0x22>
 800debc:	bd38      	pop	{r3, r4, r5, pc}
 800debe:	bf00      	nop
 800dec0:	20006008 	.word	0x20006008

0800dec4 <malloc>:
 800dec4:	4b02      	ldr	r3, [pc, #8]	@ (800ded0 <malloc+0xc>)
 800dec6:	4601      	mov	r1, r0
 800dec8:	6818      	ldr	r0, [r3, #0]
 800deca:	f000 b825 	b.w	800df18 <_malloc_r>
 800dece:	bf00      	nop
 800ded0:	20000024 	.word	0x20000024

0800ded4 <sbrk_aligned>:
 800ded4:	b570      	push	{r4, r5, r6, lr}
 800ded6:	4e0f      	ldr	r6, [pc, #60]	@ (800df14 <sbrk_aligned+0x40>)
 800ded8:	460c      	mov	r4, r1
 800deda:	6831      	ldr	r1, [r6, #0]
 800dedc:	4605      	mov	r5, r0
 800dede:	b911      	cbnz	r1, 800dee6 <sbrk_aligned+0x12>
 800dee0:	f001 ff56 	bl	800fd90 <_sbrk_r>
 800dee4:	6030      	str	r0, [r6, #0]
 800dee6:	4621      	mov	r1, r4
 800dee8:	4628      	mov	r0, r5
 800deea:	f001 ff51 	bl	800fd90 <_sbrk_r>
 800deee:	1c43      	adds	r3, r0, #1
 800def0:	d103      	bne.n	800defa <sbrk_aligned+0x26>
 800def2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800def6:	4620      	mov	r0, r4
 800def8:	bd70      	pop	{r4, r5, r6, pc}
 800defa:	1cc4      	adds	r4, r0, #3
 800defc:	f024 0403 	bic.w	r4, r4, #3
 800df00:	42a0      	cmp	r0, r4
 800df02:	d0f8      	beq.n	800def6 <sbrk_aligned+0x22>
 800df04:	1a21      	subs	r1, r4, r0
 800df06:	4628      	mov	r0, r5
 800df08:	f001 ff42 	bl	800fd90 <_sbrk_r>
 800df0c:	3001      	adds	r0, #1
 800df0e:	d1f2      	bne.n	800def6 <sbrk_aligned+0x22>
 800df10:	e7ef      	b.n	800def2 <sbrk_aligned+0x1e>
 800df12:	bf00      	nop
 800df14:	20006004 	.word	0x20006004

0800df18 <_malloc_r>:
 800df18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df1c:	1ccd      	adds	r5, r1, #3
 800df1e:	f025 0503 	bic.w	r5, r5, #3
 800df22:	3508      	adds	r5, #8
 800df24:	2d0c      	cmp	r5, #12
 800df26:	bf38      	it	cc
 800df28:	250c      	movcc	r5, #12
 800df2a:	2d00      	cmp	r5, #0
 800df2c:	4606      	mov	r6, r0
 800df2e:	db01      	blt.n	800df34 <_malloc_r+0x1c>
 800df30:	42a9      	cmp	r1, r5
 800df32:	d904      	bls.n	800df3e <_malloc_r+0x26>
 800df34:	230c      	movs	r3, #12
 800df36:	6033      	str	r3, [r6, #0]
 800df38:	2000      	movs	r0, #0
 800df3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e014 <_malloc_r+0xfc>
 800df42:	f000 f869 	bl	800e018 <__malloc_lock>
 800df46:	f8d8 3000 	ldr.w	r3, [r8]
 800df4a:	461c      	mov	r4, r3
 800df4c:	bb44      	cbnz	r4, 800dfa0 <_malloc_r+0x88>
 800df4e:	4629      	mov	r1, r5
 800df50:	4630      	mov	r0, r6
 800df52:	f7ff ffbf 	bl	800ded4 <sbrk_aligned>
 800df56:	1c43      	adds	r3, r0, #1
 800df58:	4604      	mov	r4, r0
 800df5a:	d158      	bne.n	800e00e <_malloc_r+0xf6>
 800df5c:	f8d8 4000 	ldr.w	r4, [r8]
 800df60:	4627      	mov	r7, r4
 800df62:	2f00      	cmp	r7, #0
 800df64:	d143      	bne.n	800dfee <_malloc_r+0xd6>
 800df66:	2c00      	cmp	r4, #0
 800df68:	d04b      	beq.n	800e002 <_malloc_r+0xea>
 800df6a:	6823      	ldr	r3, [r4, #0]
 800df6c:	4639      	mov	r1, r7
 800df6e:	4630      	mov	r0, r6
 800df70:	eb04 0903 	add.w	r9, r4, r3
 800df74:	f001 ff0c 	bl	800fd90 <_sbrk_r>
 800df78:	4581      	cmp	r9, r0
 800df7a:	d142      	bne.n	800e002 <_malloc_r+0xea>
 800df7c:	6821      	ldr	r1, [r4, #0]
 800df7e:	1a6d      	subs	r5, r5, r1
 800df80:	4629      	mov	r1, r5
 800df82:	4630      	mov	r0, r6
 800df84:	f7ff ffa6 	bl	800ded4 <sbrk_aligned>
 800df88:	3001      	adds	r0, #1
 800df8a:	d03a      	beq.n	800e002 <_malloc_r+0xea>
 800df8c:	6823      	ldr	r3, [r4, #0]
 800df8e:	442b      	add	r3, r5
 800df90:	6023      	str	r3, [r4, #0]
 800df92:	f8d8 3000 	ldr.w	r3, [r8]
 800df96:	685a      	ldr	r2, [r3, #4]
 800df98:	bb62      	cbnz	r2, 800dff4 <_malloc_r+0xdc>
 800df9a:	f8c8 7000 	str.w	r7, [r8]
 800df9e:	e00f      	b.n	800dfc0 <_malloc_r+0xa8>
 800dfa0:	6822      	ldr	r2, [r4, #0]
 800dfa2:	1b52      	subs	r2, r2, r5
 800dfa4:	d420      	bmi.n	800dfe8 <_malloc_r+0xd0>
 800dfa6:	2a0b      	cmp	r2, #11
 800dfa8:	d917      	bls.n	800dfda <_malloc_r+0xc2>
 800dfaa:	1961      	adds	r1, r4, r5
 800dfac:	42a3      	cmp	r3, r4
 800dfae:	6025      	str	r5, [r4, #0]
 800dfb0:	bf18      	it	ne
 800dfb2:	6059      	strne	r1, [r3, #4]
 800dfb4:	6863      	ldr	r3, [r4, #4]
 800dfb6:	bf08      	it	eq
 800dfb8:	f8c8 1000 	streq.w	r1, [r8]
 800dfbc:	5162      	str	r2, [r4, r5]
 800dfbe:	604b      	str	r3, [r1, #4]
 800dfc0:	4630      	mov	r0, r6
 800dfc2:	f000 f82f 	bl	800e024 <__malloc_unlock>
 800dfc6:	f104 000b 	add.w	r0, r4, #11
 800dfca:	1d23      	adds	r3, r4, #4
 800dfcc:	f020 0007 	bic.w	r0, r0, #7
 800dfd0:	1ac2      	subs	r2, r0, r3
 800dfd2:	bf1c      	itt	ne
 800dfd4:	1a1b      	subne	r3, r3, r0
 800dfd6:	50a3      	strne	r3, [r4, r2]
 800dfd8:	e7af      	b.n	800df3a <_malloc_r+0x22>
 800dfda:	6862      	ldr	r2, [r4, #4]
 800dfdc:	42a3      	cmp	r3, r4
 800dfde:	bf0c      	ite	eq
 800dfe0:	f8c8 2000 	streq.w	r2, [r8]
 800dfe4:	605a      	strne	r2, [r3, #4]
 800dfe6:	e7eb      	b.n	800dfc0 <_malloc_r+0xa8>
 800dfe8:	4623      	mov	r3, r4
 800dfea:	6864      	ldr	r4, [r4, #4]
 800dfec:	e7ae      	b.n	800df4c <_malloc_r+0x34>
 800dfee:	463c      	mov	r4, r7
 800dff0:	687f      	ldr	r7, [r7, #4]
 800dff2:	e7b6      	b.n	800df62 <_malloc_r+0x4a>
 800dff4:	461a      	mov	r2, r3
 800dff6:	685b      	ldr	r3, [r3, #4]
 800dff8:	42a3      	cmp	r3, r4
 800dffa:	d1fb      	bne.n	800dff4 <_malloc_r+0xdc>
 800dffc:	2300      	movs	r3, #0
 800dffe:	6053      	str	r3, [r2, #4]
 800e000:	e7de      	b.n	800dfc0 <_malloc_r+0xa8>
 800e002:	230c      	movs	r3, #12
 800e004:	6033      	str	r3, [r6, #0]
 800e006:	4630      	mov	r0, r6
 800e008:	f000 f80c 	bl	800e024 <__malloc_unlock>
 800e00c:	e794      	b.n	800df38 <_malloc_r+0x20>
 800e00e:	6005      	str	r5, [r0, #0]
 800e010:	e7d6      	b.n	800dfc0 <_malloc_r+0xa8>
 800e012:	bf00      	nop
 800e014:	20006008 	.word	0x20006008

0800e018 <__malloc_lock>:
 800e018:	4801      	ldr	r0, [pc, #4]	@ (800e020 <__malloc_lock+0x8>)
 800e01a:	f7ff b8a4 	b.w	800d166 <__retarget_lock_acquire_recursive>
 800e01e:	bf00      	nop
 800e020:	20006000 	.word	0x20006000

0800e024 <__malloc_unlock>:
 800e024:	4801      	ldr	r0, [pc, #4]	@ (800e02c <__malloc_unlock+0x8>)
 800e026:	f7ff b89f 	b.w	800d168 <__retarget_lock_release_recursive>
 800e02a:	bf00      	nop
 800e02c:	20006000 	.word	0x20006000

0800e030 <_Balloc>:
 800e030:	b570      	push	{r4, r5, r6, lr}
 800e032:	69c6      	ldr	r6, [r0, #28]
 800e034:	4604      	mov	r4, r0
 800e036:	460d      	mov	r5, r1
 800e038:	b976      	cbnz	r6, 800e058 <_Balloc+0x28>
 800e03a:	2010      	movs	r0, #16
 800e03c:	f7ff ff42 	bl	800dec4 <malloc>
 800e040:	4602      	mov	r2, r0
 800e042:	61e0      	str	r0, [r4, #28]
 800e044:	b920      	cbnz	r0, 800e050 <_Balloc+0x20>
 800e046:	4b18      	ldr	r3, [pc, #96]	@ (800e0a8 <_Balloc+0x78>)
 800e048:	4818      	ldr	r0, [pc, #96]	@ (800e0ac <_Balloc+0x7c>)
 800e04a:	216b      	movs	r1, #107	@ 0x6b
 800e04c:	f001 feb8 	bl	800fdc0 <__assert_func>
 800e050:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e054:	6006      	str	r6, [r0, #0]
 800e056:	60c6      	str	r6, [r0, #12]
 800e058:	69e6      	ldr	r6, [r4, #28]
 800e05a:	68f3      	ldr	r3, [r6, #12]
 800e05c:	b183      	cbz	r3, 800e080 <_Balloc+0x50>
 800e05e:	69e3      	ldr	r3, [r4, #28]
 800e060:	68db      	ldr	r3, [r3, #12]
 800e062:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e066:	b9b8      	cbnz	r0, 800e098 <_Balloc+0x68>
 800e068:	2101      	movs	r1, #1
 800e06a:	fa01 f605 	lsl.w	r6, r1, r5
 800e06e:	1d72      	adds	r2, r6, #5
 800e070:	0092      	lsls	r2, r2, #2
 800e072:	4620      	mov	r0, r4
 800e074:	f001 fec2 	bl	800fdfc <_calloc_r>
 800e078:	b160      	cbz	r0, 800e094 <_Balloc+0x64>
 800e07a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e07e:	e00e      	b.n	800e09e <_Balloc+0x6e>
 800e080:	2221      	movs	r2, #33	@ 0x21
 800e082:	2104      	movs	r1, #4
 800e084:	4620      	mov	r0, r4
 800e086:	f001 feb9 	bl	800fdfc <_calloc_r>
 800e08a:	69e3      	ldr	r3, [r4, #28]
 800e08c:	60f0      	str	r0, [r6, #12]
 800e08e:	68db      	ldr	r3, [r3, #12]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d1e4      	bne.n	800e05e <_Balloc+0x2e>
 800e094:	2000      	movs	r0, #0
 800e096:	bd70      	pop	{r4, r5, r6, pc}
 800e098:	6802      	ldr	r2, [r0, #0]
 800e09a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e09e:	2300      	movs	r3, #0
 800e0a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e0a4:	e7f7      	b.n	800e096 <_Balloc+0x66>
 800e0a6:	bf00      	nop
 800e0a8:	08011073 	.word	0x08011073
 800e0ac:	080110f3 	.word	0x080110f3

0800e0b0 <_Bfree>:
 800e0b0:	b570      	push	{r4, r5, r6, lr}
 800e0b2:	69c6      	ldr	r6, [r0, #28]
 800e0b4:	4605      	mov	r5, r0
 800e0b6:	460c      	mov	r4, r1
 800e0b8:	b976      	cbnz	r6, 800e0d8 <_Bfree+0x28>
 800e0ba:	2010      	movs	r0, #16
 800e0bc:	f7ff ff02 	bl	800dec4 <malloc>
 800e0c0:	4602      	mov	r2, r0
 800e0c2:	61e8      	str	r0, [r5, #28]
 800e0c4:	b920      	cbnz	r0, 800e0d0 <_Bfree+0x20>
 800e0c6:	4b09      	ldr	r3, [pc, #36]	@ (800e0ec <_Bfree+0x3c>)
 800e0c8:	4809      	ldr	r0, [pc, #36]	@ (800e0f0 <_Bfree+0x40>)
 800e0ca:	218f      	movs	r1, #143	@ 0x8f
 800e0cc:	f001 fe78 	bl	800fdc0 <__assert_func>
 800e0d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e0d4:	6006      	str	r6, [r0, #0]
 800e0d6:	60c6      	str	r6, [r0, #12]
 800e0d8:	b13c      	cbz	r4, 800e0ea <_Bfree+0x3a>
 800e0da:	69eb      	ldr	r3, [r5, #28]
 800e0dc:	6862      	ldr	r2, [r4, #4]
 800e0de:	68db      	ldr	r3, [r3, #12]
 800e0e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e0e4:	6021      	str	r1, [r4, #0]
 800e0e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e0ea:	bd70      	pop	{r4, r5, r6, pc}
 800e0ec:	08011073 	.word	0x08011073
 800e0f0:	080110f3 	.word	0x080110f3

0800e0f4 <__multadd>:
 800e0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0f8:	690d      	ldr	r5, [r1, #16]
 800e0fa:	4607      	mov	r7, r0
 800e0fc:	460c      	mov	r4, r1
 800e0fe:	461e      	mov	r6, r3
 800e100:	f101 0c14 	add.w	ip, r1, #20
 800e104:	2000      	movs	r0, #0
 800e106:	f8dc 3000 	ldr.w	r3, [ip]
 800e10a:	b299      	uxth	r1, r3
 800e10c:	fb02 6101 	mla	r1, r2, r1, r6
 800e110:	0c1e      	lsrs	r6, r3, #16
 800e112:	0c0b      	lsrs	r3, r1, #16
 800e114:	fb02 3306 	mla	r3, r2, r6, r3
 800e118:	b289      	uxth	r1, r1
 800e11a:	3001      	adds	r0, #1
 800e11c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e120:	4285      	cmp	r5, r0
 800e122:	f84c 1b04 	str.w	r1, [ip], #4
 800e126:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e12a:	dcec      	bgt.n	800e106 <__multadd+0x12>
 800e12c:	b30e      	cbz	r6, 800e172 <__multadd+0x7e>
 800e12e:	68a3      	ldr	r3, [r4, #8]
 800e130:	42ab      	cmp	r3, r5
 800e132:	dc19      	bgt.n	800e168 <__multadd+0x74>
 800e134:	6861      	ldr	r1, [r4, #4]
 800e136:	4638      	mov	r0, r7
 800e138:	3101      	adds	r1, #1
 800e13a:	f7ff ff79 	bl	800e030 <_Balloc>
 800e13e:	4680      	mov	r8, r0
 800e140:	b928      	cbnz	r0, 800e14e <__multadd+0x5a>
 800e142:	4602      	mov	r2, r0
 800e144:	4b0c      	ldr	r3, [pc, #48]	@ (800e178 <__multadd+0x84>)
 800e146:	480d      	ldr	r0, [pc, #52]	@ (800e17c <__multadd+0x88>)
 800e148:	21ba      	movs	r1, #186	@ 0xba
 800e14a:	f001 fe39 	bl	800fdc0 <__assert_func>
 800e14e:	6922      	ldr	r2, [r4, #16]
 800e150:	3202      	adds	r2, #2
 800e152:	f104 010c 	add.w	r1, r4, #12
 800e156:	0092      	lsls	r2, r2, #2
 800e158:	300c      	adds	r0, #12
 800e15a:	f7ff f806 	bl	800d16a <memcpy>
 800e15e:	4621      	mov	r1, r4
 800e160:	4638      	mov	r0, r7
 800e162:	f7ff ffa5 	bl	800e0b0 <_Bfree>
 800e166:	4644      	mov	r4, r8
 800e168:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e16c:	3501      	adds	r5, #1
 800e16e:	615e      	str	r6, [r3, #20]
 800e170:	6125      	str	r5, [r4, #16]
 800e172:	4620      	mov	r0, r4
 800e174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e178:	080110e2 	.word	0x080110e2
 800e17c:	080110f3 	.word	0x080110f3

0800e180 <__s2b>:
 800e180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e184:	460c      	mov	r4, r1
 800e186:	4615      	mov	r5, r2
 800e188:	461f      	mov	r7, r3
 800e18a:	2209      	movs	r2, #9
 800e18c:	3308      	adds	r3, #8
 800e18e:	4606      	mov	r6, r0
 800e190:	fb93 f3f2 	sdiv	r3, r3, r2
 800e194:	2100      	movs	r1, #0
 800e196:	2201      	movs	r2, #1
 800e198:	429a      	cmp	r2, r3
 800e19a:	db09      	blt.n	800e1b0 <__s2b+0x30>
 800e19c:	4630      	mov	r0, r6
 800e19e:	f7ff ff47 	bl	800e030 <_Balloc>
 800e1a2:	b940      	cbnz	r0, 800e1b6 <__s2b+0x36>
 800e1a4:	4602      	mov	r2, r0
 800e1a6:	4b19      	ldr	r3, [pc, #100]	@ (800e20c <__s2b+0x8c>)
 800e1a8:	4819      	ldr	r0, [pc, #100]	@ (800e210 <__s2b+0x90>)
 800e1aa:	21d3      	movs	r1, #211	@ 0xd3
 800e1ac:	f001 fe08 	bl	800fdc0 <__assert_func>
 800e1b0:	0052      	lsls	r2, r2, #1
 800e1b2:	3101      	adds	r1, #1
 800e1b4:	e7f0      	b.n	800e198 <__s2b+0x18>
 800e1b6:	9b08      	ldr	r3, [sp, #32]
 800e1b8:	6143      	str	r3, [r0, #20]
 800e1ba:	2d09      	cmp	r5, #9
 800e1bc:	f04f 0301 	mov.w	r3, #1
 800e1c0:	6103      	str	r3, [r0, #16]
 800e1c2:	dd16      	ble.n	800e1f2 <__s2b+0x72>
 800e1c4:	f104 0909 	add.w	r9, r4, #9
 800e1c8:	46c8      	mov	r8, r9
 800e1ca:	442c      	add	r4, r5
 800e1cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e1d0:	4601      	mov	r1, r0
 800e1d2:	3b30      	subs	r3, #48	@ 0x30
 800e1d4:	220a      	movs	r2, #10
 800e1d6:	4630      	mov	r0, r6
 800e1d8:	f7ff ff8c 	bl	800e0f4 <__multadd>
 800e1dc:	45a0      	cmp	r8, r4
 800e1de:	d1f5      	bne.n	800e1cc <__s2b+0x4c>
 800e1e0:	f1a5 0408 	sub.w	r4, r5, #8
 800e1e4:	444c      	add	r4, r9
 800e1e6:	1b2d      	subs	r5, r5, r4
 800e1e8:	1963      	adds	r3, r4, r5
 800e1ea:	42bb      	cmp	r3, r7
 800e1ec:	db04      	blt.n	800e1f8 <__s2b+0x78>
 800e1ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1f2:	340a      	adds	r4, #10
 800e1f4:	2509      	movs	r5, #9
 800e1f6:	e7f6      	b.n	800e1e6 <__s2b+0x66>
 800e1f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e1fc:	4601      	mov	r1, r0
 800e1fe:	3b30      	subs	r3, #48	@ 0x30
 800e200:	220a      	movs	r2, #10
 800e202:	4630      	mov	r0, r6
 800e204:	f7ff ff76 	bl	800e0f4 <__multadd>
 800e208:	e7ee      	b.n	800e1e8 <__s2b+0x68>
 800e20a:	bf00      	nop
 800e20c:	080110e2 	.word	0x080110e2
 800e210:	080110f3 	.word	0x080110f3

0800e214 <__hi0bits>:
 800e214:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e218:	4603      	mov	r3, r0
 800e21a:	bf36      	itet	cc
 800e21c:	0403      	lslcc	r3, r0, #16
 800e21e:	2000      	movcs	r0, #0
 800e220:	2010      	movcc	r0, #16
 800e222:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e226:	bf3c      	itt	cc
 800e228:	021b      	lslcc	r3, r3, #8
 800e22a:	3008      	addcc	r0, #8
 800e22c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e230:	bf3c      	itt	cc
 800e232:	011b      	lslcc	r3, r3, #4
 800e234:	3004      	addcc	r0, #4
 800e236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e23a:	bf3c      	itt	cc
 800e23c:	009b      	lslcc	r3, r3, #2
 800e23e:	3002      	addcc	r0, #2
 800e240:	2b00      	cmp	r3, #0
 800e242:	db05      	blt.n	800e250 <__hi0bits+0x3c>
 800e244:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e248:	f100 0001 	add.w	r0, r0, #1
 800e24c:	bf08      	it	eq
 800e24e:	2020      	moveq	r0, #32
 800e250:	4770      	bx	lr

0800e252 <__lo0bits>:
 800e252:	6803      	ldr	r3, [r0, #0]
 800e254:	4602      	mov	r2, r0
 800e256:	f013 0007 	ands.w	r0, r3, #7
 800e25a:	d00b      	beq.n	800e274 <__lo0bits+0x22>
 800e25c:	07d9      	lsls	r1, r3, #31
 800e25e:	d421      	bmi.n	800e2a4 <__lo0bits+0x52>
 800e260:	0798      	lsls	r0, r3, #30
 800e262:	bf49      	itett	mi
 800e264:	085b      	lsrmi	r3, r3, #1
 800e266:	089b      	lsrpl	r3, r3, #2
 800e268:	2001      	movmi	r0, #1
 800e26a:	6013      	strmi	r3, [r2, #0]
 800e26c:	bf5c      	itt	pl
 800e26e:	6013      	strpl	r3, [r2, #0]
 800e270:	2002      	movpl	r0, #2
 800e272:	4770      	bx	lr
 800e274:	b299      	uxth	r1, r3
 800e276:	b909      	cbnz	r1, 800e27c <__lo0bits+0x2a>
 800e278:	0c1b      	lsrs	r3, r3, #16
 800e27a:	2010      	movs	r0, #16
 800e27c:	b2d9      	uxtb	r1, r3
 800e27e:	b909      	cbnz	r1, 800e284 <__lo0bits+0x32>
 800e280:	3008      	adds	r0, #8
 800e282:	0a1b      	lsrs	r3, r3, #8
 800e284:	0719      	lsls	r1, r3, #28
 800e286:	bf04      	itt	eq
 800e288:	091b      	lsreq	r3, r3, #4
 800e28a:	3004      	addeq	r0, #4
 800e28c:	0799      	lsls	r1, r3, #30
 800e28e:	bf04      	itt	eq
 800e290:	089b      	lsreq	r3, r3, #2
 800e292:	3002      	addeq	r0, #2
 800e294:	07d9      	lsls	r1, r3, #31
 800e296:	d403      	bmi.n	800e2a0 <__lo0bits+0x4e>
 800e298:	085b      	lsrs	r3, r3, #1
 800e29a:	f100 0001 	add.w	r0, r0, #1
 800e29e:	d003      	beq.n	800e2a8 <__lo0bits+0x56>
 800e2a0:	6013      	str	r3, [r2, #0]
 800e2a2:	4770      	bx	lr
 800e2a4:	2000      	movs	r0, #0
 800e2a6:	4770      	bx	lr
 800e2a8:	2020      	movs	r0, #32
 800e2aa:	4770      	bx	lr

0800e2ac <__i2b>:
 800e2ac:	b510      	push	{r4, lr}
 800e2ae:	460c      	mov	r4, r1
 800e2b0:	2101      	movs	r1, #1
 800e2b2:	f7ff febd 	bl	800e030 <_Balloc>
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	b928      	cbnz	r0, 800e2c6 <__i2b+0x1a>
 800e2ba:	4b05      	ldr	r3, [pc, #20]	@ (800e2d0 <__i2b+0x24>)
 800e2bc:	4805      	ldr	r0, [pc, #20]	@ (800e2d4 <__i2b+0x28>)
 800e2be:	f240 1145 	movw	r1, #325	@ 0x145
 800e2c2:	f001 fd7d 	bl	800fdc0 <__assert_func>
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	6144      	str	r4, [r0, #20]
 800e2ca:	6103      	str	r3, [r0, #16]
 800e2cc:	bd10      	pop	{r4, pc}
 800e2ce:	bf00      	nop
 800e2d0:	080110e2 	.word	0x080110e2
 800e2d4:	080110f3 	.word	0x080110f3

0800e2d8 <__multiply>:
 800e2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2dc:	4614      	mov	r4, r2
 800e2de:	690a      	ldr	r2, [r1, #16]
 800e2e0:	6923      	ldr	r3, [r4, #16]
 800e2e2:	429a      	cmp	r2, r3
 800e2e4:	bfa8      	it	ge
 800e2e6:	4623      	movge	r3, r4
 800e2e8:	460f      	mov	r7, r1
 800e2ea:	bfa4      	itt	ge
 800e2ec:	460c      	movge	r4, r1
 800e2ee:	461f      	movge	r7, r3
 800e2f0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e2f4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e2f8:	68a3      	ldr	r3, [r4, #8]
 800e2fa:	6861      	ldr	r1, [r4, #4]
 800e2fc:	eb0a 0609 	add.w	r6, sl, r9
 800e300:	42b3      	cmp	r3, r6
 800e302:	b085      	sub	sp, #20
 800e304:	bfb8      	it	lt
 800e306:	3101      	addlt	r1, #1
 800e308:	f7ff fe92 	bl	800e030 <_Balloc>
 800e30c:	b930      	cbnz	r0, 800e31c <__multiply+0x44>
 800e30e:	4602      	mov	r2, r0
 800e310:	4b44      	ldr	r3, [pc, #272]	@ (800e424 <__multiply+0x14c>)
 800e312:	4845      	ldr	r0, [pc, #276]	@ (800e428 <__multiply+0x150>)
 800e314:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e318:	f001 fd52 	bl	800fdc0 <__assert_func>
 800e31c:	f100 0514 	add.w	r5, r0, #20
 800e320:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e324:	462b      	mov	r3, r5
 800e326:	2200      	movs	r2, #0
 800e328:	4543      	cmp	r3, r8
 800e32a:	d321      	bcc.n	800e370 <__multiply+0x98>
 800e32c:	f107 0114 	add.w	r1, r7, #20
 800e330:	f104 0214 	add.w	r2, r4, #20
 800e334:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e338:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e33c:	9302      	str	r3, [sp, #8]
 800e33e:	1b13      	subs	r3, r2, r4
 800e340:	3b15      	subs	r3, #21
 800e342:	f023 0303 	bic.w	r3, r3, #3
 800e346:	3304      	adds	r3, #4
 800e348:	f104 0715 	add.w	r7, r4, #21
 800e34c:	42ba      	cmp	r2, r7
 800e34e:	bf38      	it	cc
 800e350:	2304      	movcc	r3, #4
 800e352:	9301      	str	r3, [sp, #4]
 800e354:	9b02      	ldr	r3, [sp, #8]
 800e356:	9103      	str	r1, [sp, #12]
 800e358:	428b      	cmp	r3, r1
 800e35a:	d80c      	bhi.n	800e376 <__multiply+0x9e>
 800e35c:	2e00      	cmp	r6, #0
 800e35e:	dd03      	ble.n	800e368 <__multiply+0x90>
 800e360:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e364:	2b00      	cmp	r3, #0
 800e366:	d05b      	beq.n	800e420 <__multiply+0x148>
 800e368:	6106      	str	r6, [r0, #16]
 800e36a:	b005      	add	sp, #20
 800e36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e370:	f843 2b04 	str.w	r2, [r3], #4
 800e374:	e7d8      	b.n	800e328 <__multiply+0x50>
 800e376:	f8b1 a000 	ldrh.w	sl, [r1]
 800e37a:	f1ba 0f00 	cmp.w	sl, #0
 800e37e:	d024      	beq.n	800e3ca <__multiply+0xf2>
 800e380:	f104 0e14 	add.w	lr, r4, #20
 800e384:	46a9      	mov	r9, r5
 800e386:	f04f 0c00 	mov.w	ip, #0
 800e38a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e38e:	f8d9 3000 	ldr.w	r3, [r9]
 800e392:	fa1f fb87 	uxth.w	fp, r7
 800e396:	b29b      	uxth	r3, r3
 800e398:	fb0a 330b 	mla	r3, sl, fp, r3
 800e39c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e3a0:	f8d9 7000 	ldr.w	r7, [r9]
 800e3a4:	4463      	add	r3, ip
 800e3a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e3aa:	fb0a c70b 	mla	r7, sl, fp, ip
 800e3ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e3b2:	b29b      	uxth	r3, r3
 800e3b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e3b8:	4572      	cmp	r2, lr
 800e3ba:	f849 3b04 	str.w	r3, [r9], #4
 800e3be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e3c2:	d8e2      	bhi.n	800e38a <__multiply+0xb2>
 800e3c4:	9b01      	ldr	r3, [sp, #4]
 800e3c6:	f845 c003 	str.w	ip, [r5, r3]
 800e3ca:	9b03      	ldr	r3, [sp, #12]
 800e3cc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e3d0:	3104      	adds	r1, #4
 800e3d2:	f1b9 0f00 	cmp.w	r9, #0
 800e3d6:	d021      	beq.n	800e41c <__multiply+0x144>
 800e3d8:	682b      	ldr	r3, [r5, #0]
 800e3da:	f104 0c14 	add.w	ip, r4, #20
 800e3de:	46ae      	mov	lr, r5
 800e3e0:	f04f 0a00 	mov.w	sl, #0
 800e3e4:	f8bc b000 	ldrh.w	fp, [ip]
 800e3e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e3ec:	fb09 770b 	mla	r7, r9, fp, r7
 800e3f0:	4457      	add	r7, sl
 800e3f2:	b29b      	uxth	r3, r3
 800e3f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e3f8:	f84e 3b04 	str.w	r3, [lr], #4
 800e3fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e400:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e404:	f8be 3000 	ldrh.w	r3, [lr]
 800e408:	fb09 330a 	mla	r3, r9, sl, r3
 800e40c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e410:	4562      	cmp	r2, ip
 800e412:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e416:	d8e5      	bhi.n	800e3e4 <__multiply+0x10c>
 800e418:	9f01      	ldr	r7, [sp, #4]
 800e41a:	51eb      	str	r3, [r5, r7]
 800e41c:	3504      	adds	r5, #4
 800e41e:	e799      	b.n	800e354 <__multiply+0x7c>
 800e420:	3e01      	subs	r6, #1
 800e422:	e79b      	b.n	800e35c <__multiply+0x84>
 800e424:	080110e2 	.word	0x080110e2
 800e428:	080110f3 	.word	0x080110f3

0800e42c <__pow5mult>:
 800e42c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e430:	4615      	mov	r5, r2
 800e432:	f012 0203 	ands.w	r2, r2, #3
 800e436:	4607      	mov	r7, r0
 800e438:	460e      	mov	r6, r1
 800e43a:	d007      	beq.n	800e44c <__pow5mult+0x20>
 800e43c:	4c25      	ldr	r4, [pc, #148]	@ (800e4d4 <__pow5mult+0xa8>)
 800e43e:	3a01      	subs	r2, #1
 800e440:	2300      	movs	r3, #0
 800e442:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e446:	f7ff fe55 	bl	800e0f4 <__multadd>
 800e44a:	4606      	mov	r6, r0
 800e44c:	10ad      	asrs	r5, r5, #2
 800e44e:	d03d      	beq.n	800e4cc <__pow5mult+0xa0>
 800e450:	69fc      	ldr	r4, [r7, #28]
 800e452:	b97c      	cbnz	r4, 800e474 <__pow5mult+0x48>
 800e454:	2010      	movs	r0, #16
 800e456:	f7ff fd35 	bl	800dec4 <malloc>
 800e45a:	4602      	mov	r2, r0
 800e45c:	61f8      	str	r0, [r7, #28]
 800e45e:	b928      	cbnz	r0, 800e46c <__pow5mult+0x40>
 800e460:	4b1d      	ldr	r3, [pc, #116]	@ (800e4d8 <__pow5mult+0xac>)
 800e462:	481e      	ldr	r0, [pc, #120]	@ (800e4dc <__pow5mult+0xb0>)
 800e464:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e468:	f001 fcaa 	bl	800fdc0 <__assert_func>
 800e46c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e470:	6004      	str	r4, [r0, #0]
 800e472:	60c4      	str	r4, [r0, #12]
 800e474:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e478:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e47c:	b94c      	cbnz	r4, 800e492 <__pow5mult+0x66>
 800e47e:	f240 2171 	movw	r1, #625	@ 0x271
 800e482:	4638      	mov	r0, r7
 800e484:	f7ff ff12 	bl	800e2ac <__i2b>
 800e488:	2300      	movs	r3, #0
 800e48a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e48e:	4604      	mov	r4, r0
 800e490:	6003      	str	r3, [r0, #0]
 800e492:	f04f 0900 	mov.w	r9, #0
 800e496:	07eb      	lsls	r3, r5, #31
 800e498:	d50a      	bpl.n	800e4b0 <__pow5mult+0x84>
 800e49a:	4631      	mov	r1, r6
 800e49c:	4622      	mov	r2, r4
 800e49e:	4638      	mov	r0, r7
 800e4a0:	f7ff ff1a 	bl	800e2d8 <__multiply>
 800e4a4:	4631      	mov	r1, r6
 800e4a6:	4680      	mov	r8, r0
 800e4a8:	4638      	mov	r0, r7
 800e4aa:	f7ff fe01 	bl	800e0b0 <_Bfree>
 800e4ae:	4646      	mov	r6, r8
 800e4b0:	106d      	asrs	r5, r5, #1
 800e4b2:	d00b      	beq.n	800e4cc <__pow5mult+0xa0>
 800e4b4:	6820      	ldr	r0, [r4, #0]
 800e4b6:	b938      	cbnz	r0, 800e4c8 <__pow5mult+0x9c>
 800e4b8:	4622      	mov	r2, r4
 800e4ba:	4621      	mov	r1, r4
 800e4bc:	4638      	mov	r0, r7
 800e4be:	f7ff ff0b 	bl	800e2d8 <__multiply>
 800e4c2:	6020      	str	r0, [r4, #0]
 800e4c4:	f8c0 9000 	str.w	r9, [r0]
 800e4c8:	4604      	mov	r4, r0
 800e4ca:	e7e4      	b.n	800e496 <__pow5mult+0x6a>
 800e4cc:	4630      	mov	r0, r6
 800e4ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4d2:	bf00      	nop
 800e4d4:	0801114c 	.word	0x0801114c
 800e4d8:	08011073 	.word	0x08011073
 800e4dc:	080110f3 	.word	0x080110f3

0800e4e0 <__lshift>:
 800e4e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4e4:	460c      	mov	r4, r1
 800e4e6:	6849      	ldr	r1, [r1, #4]
 800e4e8:	6923      	ldr	r3, [r4, #16]
 800e4ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e4ee:	68a3      	ldr	r3, [r4, #8]
 800e4f0:	4607      	mov	r7, r0
 800e4f2:	4691      	mov	r9, r2
 800e4f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e4f8:	f108 0601 	add.w	r6, r8, #1
 800e4fc:	42b3      	cmp	r3, r6
 800e4fe:	db0b      	blt.n	800e518 <__lshift+0x38>
 800e500:	4638      	mov	r0, r7
 800e502:	f7ff fd95 	bl	800e030 <_Balloc>
 800e506:	4605      	mov	r5, r0
 800e508:	b948      	cbnz	r0, 800e51e <__lshift+0x3e>
 800e50a:	4602      	mov	r2, r0
 800e50c:	4b28      	ldr	r3, [pc, #160]	@ (800e5b0 <__lshift+0xd0>)
 800e50e:	4829      	ldr	r0, [pc, #164]	@ (800e5b4 <__lshift+0xd4>)
 800e510:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e514:	f001 fc54 	bl	800fdc0 <__assert_func>
 800e518:	3101      	adds	r1, #1
 800e51a:	005b      	lsls	r3, r3, #1
 800e51c:	e7ee      	b.n	800e4fc <__lshift+0x1c>
 800e51e:	2300      	movs	r3, #0
 800e520:	f100 0114 	add.w	r1, r0, #20
 800e524:	f100 0210 	add.w	r2, r0, #16
 800e528:	4618      	mov	r0, r3
 800e52a:	4553      	cmp	r3, sl
 800e52c:	db33      	blt.n	800e596 <__lshift+0xb6>
 800e52e:	6920      	ldr	r0, [r4, #16]
 800e530:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e534:	f104 0314 	add.w	r3, r4, #20
 800e538:	f019 091f 	ands.w	r9, r9, #31
 800e53c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e540:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e544:	d02b      	beq.n	800e59e <__lshift+0xbe>
 800e546:	f1c9 0e20 	rsb	lr, r9, #32
 800e54a:	468a      	mov	sl, r1
 800e54c:	2200      	movs	r2, #0
 800e54e:	6818      	ldr	r0, [r3, #0]
 800e550:	fa00 f009 	lsl.w	r0, r0, r9
 800e554:	4310      	orrs	r0, r2
 800e556:	f84a 0b04 	str.w	r0, [sl], #4
 800e55a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e55e:	459c      	cmp	ip, r3
 800e560:	fa22 f20e 	lsr.w	r2, r2, lr
 800e564:	d8f3      	bhi.n	800e54e <__lshift+0x6e>
 800e566:	ebac 0304 	sub.w	r3, ip, r4
 800e56a:	3b15      	subs	r3, #21
 800e56c:	f023 0303 	bic.w	r3, r3, #3
 800e570:	3304      	adds	r3, #4
 800e572:	f104 0015 	add.w	r0, r4, #21
 800e576:	4584      	cmp	ip, r0
 800e578:	bf38      	it	cc
 800e57a:	2304      	movcc	r3, #4
 800e57c:	50ca      	str	r2, [r1, r3]
 800e57e:	b10a      	cbz	r2, 800e584 <__lshift+0xa4>
 800e580:	f108 0602 	add.w	r6, r8, #2
 800e584:	3e01      	subs	r6, #1
 800e586:	4638      	mov	r0, r7
 800e588:	612e      	str	r6, [r5, #16]
 800e58a:	4621      	mov	r1, r4
 800e58c:	f7ff fd90 	bl	800e0b0 <_Bfree>
 800e590:	4628      	mov	r0, r5
 800e592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e596:	f842 0f04 	str.w	r0, [r2, #4]!
 800e59a:	3301      	adds	r3, #1
 800e59c:	e7c5      	b.n	800e52a <__lshift+0x4a>
 800e59e:	3904      	subs	r1, #4
 800e5a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800e5a8:	459c      	cmp	ip, r3
 800e5aa:	d8f9      	bhi.n	800e5a0 <__lshift+0xc0>
 800e5ac:	e7ea      	b.n	800e584 <__lshift+0xa4>
 800e5ae:	bf00      	nop
 800e5b0:	080110e2 	.word	0x080110e2
 800e5b4:	080110f3 	.word	0x080110f3

0800e5b8 <__mcmp>:
 800e5b8:	690a      	ldr	r2, [r1, #16]
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	6900      	ldr	r0, [r0, #16]
 800e5be:	1a80      	subs	r0, r0, r2
 800e5c0:	b530      	push	{r4, r5, lr}
 800e5c2:	d10e      	bne.n	800e5e2 <__mcmp+0x2a>
 800e5c4:	3314      	adds	r3, #20
 800e5c6:	3114      	adds	r1, #20
 800e5c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e5cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e5d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e5d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e5d8:	4295      	cmp	r5, r2
 800e5da:	d003      	beq.n	800e5e4 <__mcmp+0x2c>
 800e5dc:	d205      	bcs.n	800e5ea <__mcmp+0x32>
 800e5de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e5e2:	bd30      	pop	{r4, r5, pc}
 800e5e4:	42a3      	cmp	r3, r4
 800e5e6:	d3f3      	bcc.n	800e5d0 <__mcmp+0x18>
 800e5e8:	e7fb      	b.n	800e5e2 <__mcmp+0x2a>
 800e5ea:	2001      	movs	r0, #1
 800e5ec:	e7f9      	b.n	800e5e2 <__mcmp+0x2a>
	...

0800e5f0 <__mdiff>:
 800e5f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5f4:	4689      	mov	r9, r1
 800e5f6:	4606      	mov	r6, r0
 800e5f8:	4611      	mov	r1, r2
 800e5fa:	4648      	mov	r0, r9
 800e5fc:	4614      	mov	r4, r2
 800e5fe:	f7ff ffdb 	bl	800e5b8 <__mcmp>
 800e602:	1e05      	subs	r5, r0, #0
 800e604:	d112      	bne.n	800e62c <__mdiff+0x3c>
 800e606:	4629      	mov	r1, r5
 800e608:	4630      	mov	r0, r6
 800e60a:	f7ff fd11 	bl	800e030 <_Balloc>
 800e60e:	4602      	mov	r2, r0
 800e610:	b928      	cbnz	r0, 800e61e <__mdiff+0x2e>
 800e612:	4b3f      	ldr	r3, [pc, #252]	@ (800e710 <__mdiff+0x120>)
 800e614:	f240 2137 	movw	r1, #567	@ 0x237
 800e618:	483e      	ldr	r0, [pc, #248]	@ (800e714 <__mdiff+0x124>)
 800e61a:	f001 fbd1 	bl	800fdc0 <__assert_func>
 800e61e:	2301      	movs	r3, #1
 800e620:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e624:	4610      	mov	r0, r2
 800e626:	b003      	add	sp, #12
 800e628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e62c:	bfbc      	itt	lt
 800e62e:	464b      	movlt	r3, r9
 800e630:	46a1      	movlt	r9, r4
 800e632:	4630      	mov	r0, r6
 800e634:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e638:	bfba      	itte	lt
 800e63a:	461c      	movlt	r4, r3
 800e63c:	2501      	movlt	r5, #1
 800e63e:	2500      	movge	r5, #0
 800e640:	f7ff fcf6 	bl	800e030 <_Balloc>
 800e644:	4602      	mov	r2, r0
 800e646:	b918      	cbnz	r0, 800e650 <__mdiff+0x60>
 800e648:	4b31      	ldr	r3, [pc, #196]	@ (800e710 <__mdiff+0x120>)
 800e64a:	f240 2145 	movw	r1, #581	@ 0x245
 800e64e:	e7e3      	b.n	800e618 <__mdiff+0x28>
 800e650:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e654:	6926      	ldr	r6, [r4, #16]
 800e656:	60c5      	str	r5, [r0, #12]
 800e658:	f109 0310 	add.w	r3, r9, #16
 800e65c:	f109 0514 	add.w	r5, r9, #20
 800e660:	f104 0e14 	add.w	lr, r4, #20
 800e664:	f100 0b14 	add.w	fp, r0, #20
 800e668:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e66c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e670:	9301      	str	r3, [sp, #4]
 800e672:	46d9      	mov	r9, fp
 800e674:	f04f 0c00 	mov.w	ip, #0
 800e678:	9b01      	ldr	r3, [sp, #4]
 800e67a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e67e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e682:	9301      	str	r3, [sp, #4]
 800e684:	fa1f f38a 	uxth.w	r3, sl
 800e688:	4619      	mov	r1, r3
 800e68a:	b283      	uxth	r3, r0
 800e68c:	1acb      	subs	r3, r1, r3
 800e68e:	0c00      	lsrs	r0, r0, #16
 800e690:	4463      	add	r3, ip
 800e692:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e696:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e69a:	b29b      	uxth	r3, r3
 800e69c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e6a0:	4576      	cmp	r6, lr
 800e6a2:	f849 3b04 	str.w	r3, [r9], #4
 800e6a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e6aa:	d8e5      	bhi.n	800e678 <__mdiff+0x88>
 800e6ac:	1b33      	subs	r3, r6, r4
 800e6ae:	3b15      	subs	r3, #21
 800e6b0:	f023 0303 	bic.w	r3, r3, #3
 800e6b4:	3415      	adds	r4, #21
 800e6b6:	3304      	adds	r3, #4
 800e6b8:	42a6      	cmp	r6, r4
 800e6ba:	bf38      	it	cc
 800e6bc:	2304      	movcc	r3, #4
 800e6be:	441d      	add	r5, r3
 800e6c0:	445b      	add	r3, fp
 800e6c2:	461e      	mov	r6, r3
 800e6c4:	462c      	mov	r4, r5
 800e6c6:	4544      	cmp	r4, r8
 800e6c8:	d30e      	bcc.n	800e6e8 <__mdiff+0xf8>
 800e6ca:	f108 0103 	add.w	r1, r8, #3
 800e6ce:	1b49      	subs	r1, r1, r5
 800e6d0:	f021 0103 	bic.w	r1, r1, #3
 800e6d4:	3d03      	subs	r5, #3
 800e6d6:	45a8      	cmp	r8, r5
 800e6d8:	bf38      	it	cc
 800e6da:	2100      	movcc	r1, #0
 800e6dc:	440b      	add	r3, r1
 800e6de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e6e2:	b191      	cbz	r1, 800e70a <__mdiff+0x11a>
 800e6e4:	6117      	str	r7, [r2, #16]
 800e6e6:	e79d      	b.n	800e624 <__mdiff+0x34>
 800e6e8:	f854 1b04 	ldr.w	r1, [r4], #4
 800e6ec:	46e6      	mov	lr, ip
 800e6ee:	0c08      	lsrs	r0, r1, #16
 800e6f0:	fa1c fc81 	uxtah	ip, ip, r1
 800e6f4:	4471      	add	r1, lr
 800e6f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e6fa:	b289      	uxth	r1, r1
 800e6fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e700:	f846 1b04 	str.w	r1, [r6], #4
 800e704:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e708:	e7dd      	b.n	800e6c6 <__mdiff+0xd6>
 800e70a:	3f01      	subs	r7, #1
 800e70c:	e7e7      	b.n	800e6de <__mdiff+0xee>
 800e70e:	bf00      	nop
 800e710:	080110e2 	.word	0x080110e2
 800e714:	080110f3 	.word	0x080110f3

0800e718 <__ulp>:
 800e718:	b082      	sub	sp, #8
 800e71a:	ed8d 0b00 	vstr	d0, [sp]
 800e71e:	9a01      	ldr	r2, [sp, #4]
 800e720:	4b0f      	ldr	r3, [pc, #60]	@ (800e760 <__ulp+0x48>)
 800e722:	4013      	ands	r3, r2
 800e724:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e728:	2b00      	cmp	r3, #0
 800e72a:	dc08      	bgt.n	800e73e <__ulp+0x26>
 800e72c:	425b      	negs	r3, r3
 800e72e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e732:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e736:	da04      	bge.n	800e742 <__ulp+0x2a>
 800e738:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e73c:	4113      	asrs	r3, r2
 800e73e:	2200      	movs	r2, #0
 800e740:	e008      	b.n	800e754 <__ulp+0x3c>
 800e742:	f1a2 0314 	sub.w	r3, r2, #20
 800e746:	2b1e      	cmp	r3, #30
 800e748:	bfda      	itte	le
 800e74a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e74e:	40da      	lsrle	r2, r3
 800e750:	2201      	movgt	r2, #1
 800e752:	2300      	movs	r3, #0
 800e754:	4619      	mov	r1, r3
 800e756:	4610      	mov	r0, r2
 800e758:	ec41 0b10 	vmov	d0, r0, r1
 800e75c:	b002      	add	sp, #8
 800e75e:	4770      	bx	lr
 800e760:	7ff00000 	.word	0x7ff00000

0800e764 <__b2d>:
 800e764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e768:	6906      	ldr	r6, [r0, #16]
 800e76a:	f100 0814 	add.w	r8, r0, #20
 800e76e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e772:	1f37      	subs	r7, r6, #4
 800e774:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e778:	4610      	mov	r0, r2
 800e77a:	f7ff fd4b 	bl	800e214 <__hi0bits>
 800e77e:	f1c0 0320 	rsb	r3, r0, #32
 800e782:	280a      	cmp	r0, #10
 800e784:	600b      	str	r3, [r1, #0]
 800e786:	491b      	ldr	r1, [pc, #108]	@ (800e7f4 <__b2d+0x90>)
 800e788:	dc15      	bgt.n	800e7b6 <__b2d+0x52>
 800e78a:	f1c0 0c0b 	rsb	ip, r0, #11
 800e78e:	fa22 f30c 	lsr.w	r3, r2, ip
 800e792:	45b8      	cmp	r8, r7
 800e794:	ea43 0501 	orr.w	r5, r3, r1
 800e798:	bf34      	ite	cc
 800e79a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e79e:	2300      	movcs	r3, #0
 800e7a0:	3015      	adds	r0, #21
 800e7a2:	fa02 f000 	lsl.w	r0, r2, r0
 800e7a6:	fa23 f30c 	lsr.w	r3, r3, ip
 800e7aa:	4303      	orrs	r3, r0
 800e7ac:	461c      	mov	r4, r3
 800e7ae:	ec45 4b10 	vmov	d0, r4, r5
 800e7b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7b6:	45b8      	cmp	r8, r7
 800e7b8:	bf3a      	itte	cc
 800e7ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e7be:	f1a6 0708 	subcc.w	r7, r6, #8
 800e7c2:	2300      	movcs	r3, #0
 800e7c4:	380b      	subs	r0, #11
 800e7c6:	d012      	beq.n	800e7ee <__b2d+0x8a>
 800e7c8:	f1c0 0120 	rsb	r1, r0, #32
 800e7cc:	fa23 f401 	lsr.w	r4, r3, r1
 800e7d0:	4082      	lsls	r2, r0
 800e7d2:	4322      	orrs	r2, r4
 800e7d4:	4547      	cmp	r7, r8
 800e7d6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e7da:	bf8c      	ite	hi
 800e7dc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e7e0:	2200      	movls	r2, #0
 800e7e2:	4083      	lsls	r3, r0
 800e7e4:	40ca      	lsrs	r2, r1
 800e7e6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e7ea:	4313      	orrs	r3, r2
 800e7ec:	e7de      	b.n	800e7ac <__b2d+0x48>
 800e7ee:	ea42 0501 	orr.w	r5, r2, r1
 800e7f2:	e7db      	b.n	800e7ac <__b2d+0x48>
 800e7f4:	3ff00000 	.word	0x3ff00000

0800e7f8 <__d2b>:
 800e7f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e7fc:	460f      	mov	r7, r1
 800e7fe:	2101      	movs	r1, #1
 800e800:	ec59 8b10 	vmov	r8, r9, d0
 800e804:	4616      	mov	r6, r2
 800e806:	f7ff fc13 	bl	800e030 <_Balloc>
 800e80a:	4604      	mov	r4, r0
 800e80c:	b930      	cbnz	r0, 800e81c <__d2b+0x24>
 800e80e:	4602      	mov	r2, r0
 800e810:	4b23      	ldr	r3, [pc, #140]	@ (800e8a0 <__d2b+0xa8>)
 800e812:	4824      	ldr	r0, [pc, #144]	@ (800e8a4 <__d2b+0xac>)
 800e814:	f240 310f 	movw	r1, #783	@ 0x30f
 800e818:	f001 fad2 	bl	800fdc0 <__assert_func>
 800e81c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e820:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e824:	b10d      	cbz	r5, 800e82a <__d2b+0x32>
 800e826:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e82a:	9301      	str	r3, [sp, #4]
 800e82c:	f1b8 0300 	subs.w	r3, r8, #0
 800e830:	d023      	beq.n	800e87a <__d2b+0x82>
 800e832:	4668      	mov	r0, sp
 800e834:	9300      	str	r3, [sp, #0]
 800e836:	f7ff fd0c 	bl	800e252 <__lo0bits>
 800e83a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e83e:	b1d0      	cbz	r0, 800e876 <__d2b+0x7e>
 800e840:	f1c0 0320 	rsb	r3, r0, #32
 800e844:	fa02 f303 	lsl.w	r3, r2, r3
 800e848:	430b      	orrs	r3, r1
 800e84a:	40c2      	lsrs	r2, r0
 800e84c:	6163      	str	r3, [r4, #20]
 800e84e:	9201      	str	r2, [sp, #4]
 800e850:	9b01      	ldr	r3, [sp, #4]
 800e852:	61a3      	str	r3, [r4, #24]
 800e854:	2b00      	cmp	r3, #0
 800e856:	bf0c      	ite	eq
 800e858:	2201      	moveq	r2, #1
 800e85a:	2202      	movne	r2, #2
 800e85c:	6122      	str	r2, [r4, #16]
 800e85e:	b1a5      	cbz	r5, 800e88a <__d2b+0x92>
 800e860:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e864:	4405      	add	r5, r0
 800e866:	603d      	str	r5, [r7, #0]
 800e868:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e86c:	6030      	str	r0, [r6, #0]
 800e86e:	4620      	mov	r0, r4
 800e870:	b003      	add	sp, #12
 800e872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e876:	6161      	str	r1, [r4, #20]
 800e878:	e7ea      	b.n	800e850 <__d2b+0x58>
 800e87a:	a801      	add	r0, sp, #4
 800e87c:	f7ff fce9 	bl	800e252 <__lo0bits>
 800e880:	9b01      	ldr	r3, [sp, #4]
 800e882:	6163      	str	r3, [r4, #20]
 800e884:	3020      	adds	r0, #32
 800e886:	2201      	movs	r2, #1
 800e888:	e7e8      	b.n	800e85c <__d2b+0x64>
 800e88a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e88e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e892:	6038      	str	r0, [r7, #0]
 800e894:	6918      	ldr	r0, [r3, #16]
 800e896:	f7ff fcbd 	bl	800e214 <__hi0bits>
 800e89a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e89e:	e7e5      	b.n	800e86c <__d2b+0x74>
 800e8a0:	080110e2 	.word	0x080110e2
 800e8a4:	080110f3 	.word	0x080110f3

0800e8a8 <__ratio>:
 800e8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ac:	b085      	sub	sp, #20
 800e8ae:	e9cd 1000 	strd	r1, r0, [sp]
 800e8b2:	a902      	add	r1, sp, #8
 800e8b4:	f7ff ff56 	bl	800e764 <__b2d>
 800e8b8:	9800      	ldr	r0, [sp, #0]
 800e8ba:	a903      	add	r1, sp, #12
 800e8bc:	ec55 4b10 	vmov	r4, r5, d0
 800e8c0:	f7ff ff50 	bl	800e764 <__b2d>
 800e8c4:	9b01      	ldr	r3, [sp, #4]
 800e8c6:	6919      	ldr	r1, [r3, #16]
 800e8c8:	9b00      	ldr	r3, [sp, #0]
 800e8ca:	691b      	ldr	r3, [r3, #16]
 800e8cc:	1ac9      	subs	r1, r1, r3
 800e8ce:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e8d2:	1a9b      	subs	r3, r3, r2
 800e8d4:	ec5b ab10 	vmov	sl, fp, d0
 800e8d8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	bfce      	itee	gt
 800e8e0:	462a      	movgt	r2, r5
 800e8e2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e8e6:	465a      	movle	r2, fp
 800e8e8:	462f      	mov	r7, r5
 800e8ea:	46d9      	mov	r9, fp
 800e8ec:	bfcc      	ite	gt
 800e8ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e8f2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e8f6:	464b      	mov	r3, r9
 800e8f8:	4652      	mov	r2, sl
 800e8fa:	4620      	mov	r0, r4
 800e8fc:	4639      	mov	r1, r7
 800e8fe:	f7f1 ffa5 	bl	800084c <__aeabi_ddiv>
 800e902:	ec41 0b10 	vmov	d0, r0, r1
 800e906:	b005      	add	sp, #20
 800e908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e90c <__copybits>:
 800e90c:	3901      	subs	r1, #1
 800e90e:	b570      	push	{r4, r5, r6, lr}
 800e910:	1149      	asrs	r1, r1, #5
 800e912:	6914      	ldr	r4, [r2, #16]
 800e914:	3101      	adds	r1, #1
 800e916:	f102 0314 	add.w	r3, r2, #20
 800e91a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e91e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e922:	1f05      	subs	r5, r0, #4
 800e924:	42a3      	cmp	r3, r4
 800e926:	d30c      	bcc.n	800e942 <__copybits+0x36>
 800e928:	1aa3      	subs	r3, r4, r2
 800e92a:	3b11      	subs	r3, #17
 800e92c:	f023 0303 	bic.w	r3, r3, #3
 800e930:	3211      	adds	r2, #17
 800e932:	42a2      	cmp	r2, r4
 800e934:	bf88      	it	hi
 800e936:	2300      	movhi	r3, #0
 800e938:	4418      	add	r0, r3
 800e93a:	2300      	movs	r3, #0
 800e93c:	4288      	cmp	r0, r1
 800e93e:	d305      	bcc.n	800e94c <__copybits+0x40>
 800e940:	bd70      	pop	{r4, r5, r6, pc}
 800e942:	f853 6b04 	ldr.w	r6, [r3], #4
 800e946:	f845 6f04 	str.w	r6, [r5, #4]!
 800e94a:	e7eb      	b.n	800e924 <__copybits+0x18>
 800e94c:	f840 3b04 	str.w	r3, [r0], #4
 800e950:	e7f4      	b.n	800e93c <__copybits+0x30>

0800e952 <__any_on>:
 800e952:	f100 0214 	add.w	r2, r0, #20
 800e956:	6900      	ldr	r0, [r0, #16]
 800e958:	114b      	asrs	r3, r1, #5
 800e95a:	4298      	cmp	r0, r3
 800e95c:	b510      	push	{r4, lr}
 800e95e:	db11      	blt.n	800e984 <__any_on+0x32>
 800e960:	dd0a      	ble.n	800e978 <__any_on+0x26>
 800e962:	f011 011f 	ands.w	r1, r1, #31
 800e966:	d007      	beq.n	800e978 <__any_on+0x26>
 800e968:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e96c:	fa24 f001 	lsr.w	r0, r4, r1
 800e970:	fa00 f101 	lsl.w	r1, r0, r1
 800e974:	428c      	cmp	r4, r1
 800e976:	d10b      	bne.n	800e990 <__any_on+0x3e>
 800e978:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e97c:	4293      	cmp	r3, r2
 800e97e:	d803      	bhi.n	800e988 <__any_on+0x36>
 800e980:	2000      	movs	r0, #0
 800e982:	bd10      	pop	{r4, pc}
 800e984:	4603      	mov	r3, r0
 800e986:	e7f7      	b.n	800e978 <__any_on+0x26>
 800e988:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e98c:	2900      	cmp	r1, #0
 800e98e:	d0f5      	beq.n	800e97c <__any_on+0x2a>
 800e990:	2001      	movs	r0, #1
 800e992:	e7f6      	b.n	800e982 <__any_on+0x30>

0800e994 <sulp>:
 800e994:	b570      	push	{r4, r5, r6, lr}
 800e996:	4604      	mov	r4, r0
 800e998:	460d      	mov	r5, r1
 800e99a:	ec45 4b10 	vmov	d0, r4, r5
 800e99e:	4616      	mov	r6, r2
 800e9a0:	f7ff feba 	bl	800e718 <__ulp>
 800e9a4:	ec51 0b10 	vmov	r0, r1, d0
 800e9a8:	b17e      	cbz	r6, 800e9ca <sulp+0x36>
 800e9aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e9ae:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	dd09      	ble.n	800e9ca <sulp+0x36>
 800e9b6:	051b      	lsls	r3, r3, #20
 800e9b8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e9bc:	2400      	movs	r4, #0
 800e9be:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e9c2:	4622      	mov	r2, r4
 800e9c4:	462b      	mov	r3, r5
 800e9c6:	f7f1 fe17 	bl	80005f8 <__aeabi_dmul>
 800e9ca:	ec41 0b10 	vmov	d0, r0, r1
 800e9ce:	bd70      	pop	{r4, r5, r6, pc}

0800e9d0 <_strtod_l>:
 800e9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9d4:	b09f      	sub	sp, #124	@ 0x7c
 800e9d6:	460c      	mov	r4, r1
 800e9d8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e9da:	2200      	movs	r2, #0
 800e9dc:	921a      	str	r2, [sp, #104]	@ 0x68
 800e9de:	9005      	str	r0, [sp, #20]
 800e9e0:	f04f 0a00 	mov.w	sl, #0
 800e9e4:	f04f 0b00 	mov.w	fp, #0
 800e9e8:	460a      	mov	r2, r1
 800e9ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800e9ec:	7811      	ldrb	r1, [r2, #0]
 800e9ee:	292b      	cmp	r1, #43	@ 0x2b
 800e9f0:	d04a      	beq.n	800ea88 <_strtod_l+0xb8>
 800e9f2:	d838      	bhi.n	800ea66 <_strtod_l+0x96>
 800e9f4:	290d      	cmp	r1, #13
 800e9f6:	d832      	bhi.n	800ea5e <_strtod_l+0x8e>
 800e9f8:	2908      	cmp	r1, #8
 800e9fa:	d832      	bhi.n	800ea62 <_strtod_l+0x92>
 800e9fc:	2900      	cmp	r1, #0
 800e9fe:	d03b      	beq.n	800ea78 <_strtod_l+0xa8>
 800ea00:	2200      	movs	r2, #0
 800ea02:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ea04:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ea06:	782a      	ldrb	r2, [r5, #0]
 800ea08:	2a30      	cmp	r2, #48	@ 0x30
 800ea0a:	f040 80b3 	bne.w	800eb74 <_strtod_l+0x1a4>
 800ea0e:	786a      	ldrb	r2, [r5, #1]
 800ea10:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ea14:	2a58      	cmp	r2, #88	@ 0x58
 800ea16:	d16e      	bne.n	800eaf6 <_strtod_l+0x126>
 800ea18:	9302      	str	r3, [sp, #8]
 800ea1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea1c:	9301      	str	r3, [sp, #4]
 800ea1e:	ab1a      	add	r3, sp, #104	@ 0x68
 800ea20:	9300      	str	r3, [sp, #0]
 800ea22:	4a8e      	ldr	r2, [pc, #568]	@ (800ec5c <_strtod_l+0x28c>)
 800ea24:	9805      	ldr	r0, [sp, #20]
 800ea26:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ea28:	a919      	add	r1, sp, #100	@ 0x64
 800ea2a:	f001 fa63 	bl	800fef4 <__gethex>
 800ea2e:	f010 060f 	ands.w	r6, r0, #15
 800ea32:	4604      	mov	r4, r0
 800ea34:	d005      	beq.n	800ea42 <_strtod_l+0x72>
 800ea36:	2e06      	cmp	r6, #6
 800ea38:	d128      	bne.n	800ea8c <_strtod_l+0xbc>
 800ea3a:	3501      	adds	r5, #1
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	9519      	str	r5, [sp, #100]	@ 0x64
 800ea40:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ea42:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	f040 858e 	bne.w	800f566 <_strtod_l+0xb96>
 800ea4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea4c:	b1cb      	cbz	r3, 800ea82 <_strtod_l+0xb2>
 800ea4e:	4652      	mov	r2, sl
 800ea50:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ea54:	ec43 2b10 	vmov	d0, r2, r3
 800ea58:	b01f      	add	sp, #124	@ 0x7c
 800ea5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea5e:	2920      	cmp	r1, #32
 800ea60:	d1ce      	bne.n	800ea00 <_strtod_l+0x30>
 800ea62:	3201      	adds	r2, #1
 800ea64:	e7c1      	b.n	800e9ea <_strtod_l+0x1a>
 800ea66:	292d      	cmp	r1, #45	@ 0x2d
 800ea68:	d1ca      	bne.n	800ea00 <_strtod_l+0x30>
 800ea6a:	2101      	movs	r1, #1
 800ea6c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ea6e:	1c51      	adds	r1, r2, #1
 800ea70:	9119      	str	r1, [sp, #100]	@ 0x64
 800ea72:	7852      	ldrb	r2, [r2, #1]
 800ea74:	2a00      	cmp	r2, #0
 800ea76:	d1c5      	bne.n	800ea04 <_strtod_l+0x34>
 800ea78:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ea7a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	f040 8570 	bne.w	800f562 <_strtod_l+0xb92>
 800ea82:	4652      	mov	r2, sl
 800ea84:	465b      	mov	r3, fp
 800ea86:	e7e5      	b.n	800ea54 <_strtod_l+0x84>
 800ea88:	2100      	movs	r1, #0
 800ea8a:	e7ef      	b.n	800ea6c <_strtod_l+0x9c>
 800ea8c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ea8e:	b13a      	cbz	r2, 800eaa0 <_strtod_l+0xd0>
 800ea90:	2135      	movs	r1, #53	@ 0x35
 800ea92:	a81c      	add	r0, sp, #112	@ 0x70
 800ea94:	f7ff ff3a 	bl	800e90c <__copybits>
 800ea98:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ea9a:	9805      	ldr	r0, [sp, #20]
 800ea9c:	f7ff fb08 	bl	800e0b0 <_Bfree>
 800eaa0:	3e01      	subs	r6, #1
 800eaa2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800eaa4:	2e04      	cmp	r6, #4
 800eaa6:	d806      	bhi.n	800eab6 <_strtod_l+0xe6>
 800eaa8:	e8df f006 	tbb	[pc, r6]
 800eaac:	201d0314 	.word	0x201d0314
 800eab0:	14          	.byte	0x14
 800eab1:	00          	.byte	0x00
 800eab2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800eab6:	05e1      	lsls	r1, r4, #23
 800eab8:	bf48      	it	mi
 800eaba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800eabe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eac2:	0d1b      	lsrs	r3, r3, #20
 800eac4:	051b      	lsls	r3, r3, #20
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d1bb      	bne.n	800ea42 <_strtod_l+0x72>
 800eaca:	f7fe fb21 	bl	800d110 <__errno>
 800eace:	2322      	movs	r3, #34	@ 0x22
 800ead0:	6003      	str	r3, [r0, #0]
 800ead2:	e7b6      	b.n	800ea42 <_strtod_l+0x72>
 800ead4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ead8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800eadc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800eae0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800eae4:	e7e7      	b.n	800eab6 <_strtod_l+0xe6>
 800eae6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ec64 <_strtod_l+0x294>
 800eaea:	e7e4      	b.n	800eab6 <_strtod_l+0xe6>
 800eaec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800eaf0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800eaf4:	e7df      	b.n	800eab6 <_strtod_l+0xe6>
 800eaf6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eaf8:	1c5a      	adds	r2, r3, #1
 800eafa:	9219      	str	r2, [sp, #100]	@ 0x64
 800eafc:	785b      	ldrb	r3, [r3, #1]
 800eafe:	2b30      	cmp	r3, #48	@ 0x30
 800eb00:	d0f9      	beq.n	800eaf6 <_strtod_l+0x126>
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d09d      	beq.n	800ea42 <_strtod_l+0x72>
 800eb06:	2301      	movs	r3, #1
 800eb08:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eb0c:	930c      	str	r3, [sp, #48]	@ 0x30
 800eb0e:	2300      	movs	r3, #0
 800eb10:	9308      	str	r3, [sp, #32]
 800eb12:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb14:	461f      	mov	r7, r3
 800eb16:	220a      	movs	r2, #10
 800eb18:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800eb1a:	7805      	ldrb	r5, [r0, #0]
 800eb1c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800eb20:	b2d9      	uxtb	r1, r3
 800eb22:	2909      	cmp	r1, #9
 800eb24:	d928      	bls.n	800eb78 <_strtod_l+0x1a8>
 800eb26:	494e      	ldr	r1, [pc, #312]	@ (800ec60 <_strtod_l+0x290>)
 800eb28:	2201      	movs	r2, #1
 800eb2a:	f001 f8fd 	bl	800fd28 <strncmp>
 800eb2e:	2800      	cmp	r0, #0
 800eb30:	d032      	beq.n	800eb98 <_strtod_l+0x1c8>
 800eb32:	2000      	movs	r0, #0
 800eb34:	462a      	mov	r2, r5
 800eb36:	4681      	mov	r9, r0
 800eb38:	463d      	mov	r5, r7
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	2a65      	cmp	r2, #101	@ 0x65
 800eb3e:	d001      	beq.n	800eb44 <_strtod_l+0x174>
 800eb40:	2a45      	cmp	r2, #69	@ 0x45
 800eb42:	d114      	bne.n	800eb6e <_strtod_l+0x19e>
 800eb44:	b91d      	cbnz	r5, 800eb4e <_strtod_l+0x17e>
 800eb46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb48:	4302      	orrs	r2, r0
 800eb4a:	d095      	beq.n	800ea78 <_strtod_l+0xa8>
 800eb4c:	2500      	movs	r5, #0
 800eb4e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800eb50:	1c62      	adds	r2, r4, #1
 800eb52:	9219      	str	r2, [sp, #100]	@ 0x64
 800eb54:	7862      	ldrb	r2, [r4, #1]
 800eb56:	2a2b      	cmp	r2, #43	@ 0x2b
 800eb58:	d077      	beq.n	800ec4a <_strtod_l+0x27a>
 800eb5a:	2a2d      	cmp	r2, #45	@ 0x2d
 800eb5c:	d07b      	beq.n	800ec56 <_strtod_l+0x286>
 800eb5e:	f04f 0c00 	mov.w	ip, #0
 800eb62:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800eb66:	2909      	cmp	r1, #9
 800eb68:	f240 8082 	bls.w	800ec70 <_strtod_l+0x2a0>
 800eb6c:	9419      	str	r4, [sp, #100]	@ 0x64
 800eb6e:	f04f 0800 	mov.w	r8, #0
 800eb72:	e0a2      	b.n	800ecba <_strtod_l+0x2ea>
 800eb74:	2300      	movs	r3, #0
 800eb76:	e7c7      	b.n	800eb08 <_strtod_l+0x138>
 800eb78:	2f08      	cmp	r7, #8
 800eb7a:	bfd5      	itete	le
 800eb7c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800eb7e:	9908      	ldrgt	r1, [sp, #32]
 800eb80:	fb02 3301 	mlale	r3, r2, r1, r3
 800eb84:	fb02 3301 	mlagt	r3, r2, r1, r3
 800eb88:	f100 0001 	add.w	r0, r0, #1
 800eb8c:	bfd4      	ite	le
 800eb8e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800eb90:	9308      	strgt	r3, [sp, #32]
 800eb92:	3701      	adds	r7, #1
 800eb94:	9019      	str	r0, [sp, #100]	@ 0x64
 800eb96:	e7bf      	b.n	800eb18 <_strtod_l+0x148>
 800eb98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eb9a:	1c5a      	adds	r2, r3, #1
 800eb9c:	9219      	str	r2, [sp, #100]	@ 0x64
 800eb9e:	785a      	ldrb	r2, [r3, #1]
 800eba0:	b37f      	cbz	r7, 800ec02 <_strtod_l+0x232>
 800eba2:	4681      	mov	r9, r0
 800eba4:	463d      	mov	r5, r7
 800eba6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ebaa:	2b09      	cmp	r3, #9
 800ebac:	d912      	bls.n	800ebd4 <_strtod_l+0x204>
 800ebae:	2301      	movs	r3, #1
 800ebb0:	e7c4      	b.n	800eb3c <_strtod_l+0x16c>
 800ebb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ebb4:	1c5a      	adds	r2, r3, #1
 800ebb6:	9219      	str	r2, [sp, #100]	@ 0x64
 800ebb8:	785a      	ldrb	r2, [r3, #1]
 800ebba:	3001      	adds	r0, #1
 800ebbc:	2a30      	cmp	r2, #48	@ 0x30
 800ebbe:	d0f8      	beq.n	800ebb2 <_strtod_l+0x1e2>
 800ebc0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ebc4:	2b08      	cmp	r3, #8
 800ebc6:	f200 84d3 	bhi.w	800f570 <_strtod_l+0xba0>
 800ebca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ebcc:	930c      	str	r3, [sp, #48]	@ 0x30
 800ebce:	4681      	mov	r9, r0
 800ebd0:	2000      	movs	r0, #0
 800ebd2:	4605      	mov	r5, r0
 800ebd4:	3a30      	subs	r2, #48	@ 0x30
 800ebd6:	f100 0301 	add.w	r3, r0, #1
 800ebda:	d02a      	beq.n	800ec32 <_strtod_l+0x262>
 800ebdc:	4499      	add	r9, r3
 800ebde:	eb00 0c05 	add.w	ip, r0, r5
 800ebe2:	462b      	mov	r3, r5
 800ebe4:	210a      	movs	r1, #10
 800ebe6:	4563      	cmp	r3, ip
 800ebe8:	d10d      	bne.n	800ec06 <_strtod_l+0x236>
 800ebea:	1c69      	adds	r1, r5, #1
 800ebec:	4401      	add	r1, r0
 800ebee:	4428      	add	r0, r5
 800ebf0:	2808      	cmp	r0, #8
 800ebf2:	dc16      	bgt.n	800ec22 <_strtod_l+0x252>
 800ebf4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ebf6:	230a      	movs	r3, #10
 800ebf8:	fb03 2300 	mla	r3, r3, r0, r2
 800ebfc:	930a      	str	r3, [sp, #40]	@ 0x28
 800ebfe:	2300      	movs	r3, #0
 800ec00:	e018      	b.n	800ec34 <_strtod_l+0x264>
 800ec02:	4638      	mov	r0, r7
 800ec04:	e7da      	b.n	800ebbc <_strtod_l+0x1ec>
 800ec06:	2b08      	cmp	r3, #8
 800ec08:	f103 0301 	add.w	r3, r3, #1
 800ec0c:	dc03      	bgt.n	800ec16 <_strtod_l+0x246>
 800ec0e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ec10:	434e      	muls	r6, r1
 800ec12:	960a      	str	r6, [sp, #40]	@ 0x28
 800ec14:	e7e7      	b.n	800ebe6 <_strtod_l+0x216>
 800ec16:	2b10      	cmp	r3, #16
 800ec18:	bfde      	ittt	le
 800ec1a:	9e08      	ldrle	r6, [sp, #32]
 800ec1c:	434e      	mulle	r6, r1
 800ec1e:	9608      	strle	r6, [sp, #32]
 800ec20:	e7e1      	b.n	800ebe6 <_strtod_l+0x216>
 800ec22:	280f      	cmp	r0, #15
 800ec24:	dceb      	bgt.n	800ebfe <_strtod_l+0x22e>
 800ec26:	9808      	ldr	r0, [sp, #32]
 800ec28:	230a      	movs	r3, #10
 800ec2a:	fb03 2300 	mla	r3, r3, r0, r2
 800ec2e:	9308      	str	r3, [sp, #32]
 800ec30:	e7e5      	b.n	800ebfe <_strtod_l+0x22e>
 800ec32:	4629      	mov	r1, r5
 800ec34:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ec36:	1c50      	adds	r0, r2, #1
 800ec38:	9019      	str	r0, [sp, #100]	@ 0x64
 800ec3a:	7852      	ldrb	r2, [r2, #1]
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	460d      	mov	r5, r1
 800ec40:	e7b1      	b.n	800eba6 <_strtod_l+0x1d6>
 800ec42:	f04f 0900 	mov.w	r9, #0
 800ec46:	2301      	movs	r3, #1
 800ec48:	e77d      	b.n	800eb46 <_strtod_l+0x176>
 800ec4a:	f04f 0c00 	mov.w	ip, #0
 800ec4e:	1ca2      	adds	r2, r4, #2
 800ec50:	9219      	str	r2, [sp, #100]	@ 0x64
 800ec52:	78a2      	ldrb	r2, [r4, #2]
 800ec54:	e785      	b.n	800eb62 <_strtod_l+0x192>
 800ec56:	f04f 0c01 	mov.w	ip, #1
 800ec5a:	e7f8      	b.n	800ec4e <_strtod_l+0x27e>
 800ec5c:	08011260 	.word	0x08011260
 800ec60:	08011248 	.word	0x08011248
 800ec64:	7ff00000 	.word	0x7ff00000
 800ec68:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ec6a:	1c51      	adds	r1, r2, #1
 800ec6c:	9119      	str	r1, [sp, #100]	@ 0x64
 800ec6e:	7852      	ldrb	r2, [r2, #1]
 800ec70:	2a30      	cmp	r2, #48	@ 0x30
 800ec72:	d0f9      	beq.n	800ec68 <_strtod_l+0x298>
 800ec74:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ec78:	2908      	cmp	r1, #8
 800ec7a:	f63f af78 	bhi.w	800eb6e <_strtod_l+0x19e>
 800ec7e:	3a30      	subs	r2, #48	@ 0x30
 800ec80:	920e      	str	r2, [sp, #56]	@ 0x38
 800ec82:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ec84:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ec86:	f04f 080a 	mov.w	r8, #10
 800ec8a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ec8c:	1c56      	adds	r6, r2, #1
 800ec8e:	9619      	str	r6, [sp, #100]	@ 0x64
 800ec90:	7852      	ldrb	r2, [r2, #1]
 800ec92:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ec96:	f1be 0f09 	cmp.w	lr, #9
 800ec9a:	d939      	bls.n	800ed10 <_strtod_l+0x340>
 800ec9c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ec9e:	1a76      	subs	r6, r6, r1
 800eca0:	2e08      	cmp	r6, #8
 800eca2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800eca6:	dc03      	bgt.n	800ecb0 <_strtod_l+0x2e0>
 800eca8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ecaa:	4588      	cmp	r8, r1
 800ecac:	bfa8      	it	ge
 800ecae:	4688      	movge	r8, r1
 800ecb0:	f1bc 0f00 	cmp.w	ip, #0
 800ecb4:	d001      	beq.n	800ecba <_strtod_l+0x2ea>
 800ecb6:	f1c8 0800 	rsb	r8, r8, #0
 800ecba:	2d00      	cmp	r5, #0
 800ecbc:	d14e      	bne.n	800ed5c <_strtod_l+0x38c>
 800ecbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ecc0:	4308      	orrs	r0, r1
 800ecc2:	f47f aebe 	bne.w	800ea42 <_strtod_l+0x72>
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	f47f aed6 	bne.w	800ea78 <_strtod_l+0xa8>
 800eccc:	2a69      	cmp	r2, #105	@ 0x69
 800ecce:	d028      	beq.n	800ed22 <_strtod_l+0x352>
 800ecd0:	dc25      	bgt.n	800ed1e <_strtod_l+0x34e>
 800ecd2:	2a49      	cmp	r2, #73	@ 0x49
 800ecd4:	d025      	beq.n	800ed22 <_strtod_l+0x352>
 800ecd6:	2a4e      	cmp	r2, #78	@ 0x4e
 800ecd8:	f47f aece 	bne.w	800ea78 <_strtod_l+0xa8>
 800ecdc:	499b      	ldr	r1, [pc, #620]	@ (800ef4c <_strtod_l+0x57c>)
 800ecde:	a819      	add	r0, sp, #100	@ 0x64
 800ece0:	f001 fb2a 	bl	8010338 <__match>
 800ece4:	2800      	cmp	r0, #0
 800ece6:	f43f aec7 	beq.w	800ea78 <_strtod_l+0xa8>
 800ecea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ecec:	781b      	ldrb	r3, [r3, #0]
 800ecee:	2b28      	cmp	r3, #40	@ 0x28
 800ecf0:	d12e      	bne.n	800ed50 <_strtod_l+0x380>
 800ecf2:	4997      	ldr	r1, [pc, #604]	@ (800ef50 <_strtod_l+0x580>)
 800ecf4:	aa1c      	add	r2, sp, #112	@ 0x70
 800ecf6:	a819      	add	r0, sp, #100	@ 0x64
 800ecf8:	f001 fb32 	bl	8010360 <__hexnan>
 800ecfc:	2805      	cmp	r0, #5
 800ecfe:	d127      	bne.n	800ed50 <_strtod_l+0x380>
 800ed00:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ed02:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ed06:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ed0a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ed0e:	e698      	b.n	800ea42 <_strtod_l+0x72>
 800ed10:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ed12:	fb08 2101 	mla	r1, r8, r1, r2
 800ed16:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ed1a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ed1c:	e7b5      	b.n	800ec8a <_strtod_l+0x2ba>
 800ed1e:	2a6e      	cmp	r2, #110	@ 0x6e
 800ed20:	e7da      	b.n	800ecd8 <_strtod_l+0x308>
 800ed22:	498c      	ldr	r1, [pc, #560]	@ (800ef54 <_strtod_l+0x584>)
 800ed24:	a819      	add	r0, sp, #100	@ 0x64
 800ed26:	f001 fb07 	bl	8010338 <__match>
 800ed2a:	2800      	cmp	r0, #0
 800ed2c:	f43f aea4 	beq.w	800ea78 <_strtod_l+0xa8>
 800ed30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed32:	4989      	ldr	r1, [pc, #548]	@ (800ef58 <_strtod_l+0x588>)
 800ed34:	3b01      	subs	r3, #1
 800ed36:	a819      	add	r0, sp, #100	@ 0x64
 800ed38:	9319      	str	r3, [sp, #100]	@ 0x64
 800ed3a:	f001 fafd 	bl	8010338 <__match>
 800ed3e:	b910      	cbnz	r0, 800ed46 <_strtod_l+0x376>
 800ed40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed42:	3301      	adds	r3, #1
 800ed44:	9319      	str	r3, [sp, #100]	@ 0x64
 800ed46:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ef68 <_strtod_l+0x598>
 800ed4a:	f04f 0a00 	mov.w	sl, #0
 800ed4e:	e678      	b.n	800ea42 <_strtod_l+0x72>
 800ed50:	4882      	ldr	r0, [pc, #520]	@ (800ef5c <_strtod_l+0x58c>)
 800ed52:	f001 f82d 	bl	800fdb0 <nan>
 800ed56:	ec5b ab10 	vmov	sl, fp, d0
 800ed5a:	e672      	b.n	800ea42 <_strtod_l+0x72>
 800ed5c:	eba8 0309 	sub.w	r3, r8, r9
 800ed60:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ed62:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed64:	2f00      	cmp	r7, #0
 800ed66:	bf08      	it	eq
 800ed68:	462f      	moveq	r7, r5
 800ed6a:	2d10      	cmp	r5, #16
 800ed6c:	462c      	mov	r4, r5
 800ed6e:	bfa8      	it	ge
 800ed70:	2410      	movge	r4, #16
 800ed72:	f7f1 fbc7 	bl	8000504 <__aeabi_ui2d>
 800ed76:	2d09      	cmp	r5, #9
 800ed78:	4682      	mov	sl, r0
 800ed7a:	468b      	mov	fp, r1
 800ed7c:	dc13      	bgt.n	800eda6 <_strtod_l+0x3d6>
 800ed7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	f43f ae5e 	beq.w	800ea42 <_strtod_l+0x72>
 800ed86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed88:	dd78      	ble.n	800ee7c <_strtod_l+0x4ac>
 800ed8a:	2b16      	cmp	r3, #22
 800ed8c:	dc5f      	bgt.n	800ee4e <_strtod_l+0x47e>
 800ed8e:	4974      	ldr	r1, [pc, #464]	@ (800ef60 <_strtod_l+0x590>)
 800ed90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ed94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed98:	4652      	mov	r2, sl
 800ed9a:	465b      	mov	r3, fp
 800ed9c:	f7f1 fc2c 	bl	80005f8 <__aeabi_dmul>
 800eda0:	4682      	mov	sl, r0
 800eda2:	468b      	mov	fp, r1
 800eda4:	e64d      	b.n	800ea42 <_strtod_l+0x72>
 800eda6:	4b6e      	ldr	r3, [pc, #440]	@ (800ef60 <_strtod_l+0x590>)
 800eda8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800edac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800edb0:	f7f1 fc22 	bl	80005f8 <__aeabi_dmul>
 800edb4:	4682      	mov	sl, r0
 800edb6:	9808      	ldr	r0, [sp, #32]
 800edb8:	468b      	mov	fp, r1
 800edba:	f7f1 fba3 	bl	8000504 <__aeabi_ui2d>
 800edbe:	4602      	mov	r2, r0
 800edc0:	460b      	mov	r3, r1
 800edc2:	4650      	mov	r0, sl
 800edc4:	4659      	mov	r1, fp
 800edc6:	f7f1 fa61 	bl	800028c <__adddf3>
 800edca:	2d0f      	cmp	r5, #15
 800edcc:	4682      	mov	sl, r0
 800edce:	468b      	mov	fp, r1
 800edd0:	ddd5      	ble.n	800ed7e <_strtod_l+0x3ae>
 800edd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edd4:	1b2c      	subs	r4, r5, r4
 800edd6:	441c      	add	r4, r3
 800edd8:	2c00      	cmp	r4, #0
 800edda:	f340 8096 	ble.w	800ef0a <_strtod_l+0x53a>
 800edde:	f014 030f 	ands.w	r3, r4, #15
 800ede2:	d00a      	beq.n	800edfa <_strtod_l+0x42a>
 800ede4:	495e      	ldr	r1, [pc, #376]	@ (800ef60 <_strtod_l+0x590>)
 800ede6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800edea:	4652      	mov	r2, sl
 800edec:	465b      	mov	r3, fp
 800edee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800edf2:	f7f1 fc01 	bl	80005f8 <__aeabi_dmul>
 800edf6:	4682      	mov	sl, r0
 800edf8:	468b      	mov	fp, r1
 800edfa:	f034 040f 	bics.w	r4, r4, #15
 800edfe:	d073      	beq.n	800eee8 <_strtod_l+0x518>
 800ee00:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ee04:	dd48      	ble.n	800ee98 <_strtod_l+0x4c8>
 800ee06:	2400      	movs	r4, #0
 800ee08:	46a0      	mov	r8, r4
 800ee0a:	940a      	str	r4, [sp, #40]	@ 0x28
 800ee0c:	46a1      	mov	r9, r4
 800ee0e:	9a05      	ldr	r2, [sp, #20]
 800ee10:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ef68 <_strtod_l+0x598>
 800ee14:	2322      	movs	r3, #34	@ 0x22
 800ee16:	6013      	str	r3, [r2, #0]
 800ee18:	f04f 0a00 	mov.w	sl, #0
 800ee1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	f43f ae0f 	beq.w	800ea42 <_strtod_l+0x72>
 800ee24:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ee26:	9805      	ldr	r0, [sp, #20]
 800ee28:	f7ff f942 	bl	800e0b0 <_Bfree>
 800ee2c:	9805      	ldr	r0, [sp, #20]
 800ee2e:	4649      	mov	r1, r9
 800ee30:	f7ff f93e 	bl	800e0b0 <_Bfree>
 800ee34:	9805      	ldr	r0, [sp, #20]
 800ee36:	4641      	mov	r1, r8
 800ee38:	f7ff f93a 	bl	800e0b0 <_Bfree>
 800ee3c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ee3e:	9805      	ldr	r0, [sp, #20]
 800ee40:	f7ff f936 	bl	800e0b0 <_Bfree>
 800ee44:	9805      	ldr	r0, [sp, #20]
 800ee46:	4621      	mov	r1, r4
 800ee48:	f7ff f932 	bl	800e0b0 <_Bfree>
 800ee4c:	e5f9      	b.n	800ea42 <_strtod_l+0x72>
 800ee4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee50:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ee54:	4293      	cmp	r3, r2
 800ee56:	dbbc      	blt.n	800edd2 <_strtod_l+0x402>
 800ee58:	4c41      	ldr	r4, [pc, #260]	@ (800ef60 <_strtod_l+0x590>)
 800ee5a:	f1c5 050f 	rsb	r5, r5, #15
 800ee5e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ee62:	4652      	mov	r2, sl
 800ee64:	465b      	mov	r3, fp
 800ee66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee6a:	f7f1 fbc5 	bl	80005f8 <__aeabi_dmul>
 800ee6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee70:	1b5d      	subs	r5, r3, r5
 800ee72:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ee76:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ee7a:	e78f      	b.n	800ed9c <_strtod_l+0x3cc>
 800ee7c:	3316      	adds	r3, #22
 800ee7e:	dba8      	blt.n	800edd2 <_strtod_l+0x402>
 800ee80:	4b37      	ldr	r3, [pc, #220]	@ (800ef60 <_strtod_l+0x590>)
 800ee82:	eba9 0808 	sub.w	r8, r9, r8
 800ee86:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ee8a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ee8e:	4650      	mov	r0, sl
 800ee90:	4659      	mov	r1, fp
 800ee92:	f7f1 fcdb 	bl	800084c <__aeabi_ddiv>
 800ee96:	e783      	b.n	800eda0 <_strtod_l+0x3d0>
 800ee98:	4b32      	ldr	r3, [pc, #200]	@ (800ef64 <_strtod_l+0x594>)
 800ee9a:	9308      	str	r3, [sp, #32]
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	1124      	asrs	r4, r4, #4
 800eea0:	4650      	mov	r0, sl
 800eea2:	4659      	mov	r1, fp
 800eea4:	461e      	mov	r6, r3
 800eea6:	2c01      	cmp	r4, #1
 800eea8:	dc21      	bgt.n	800eeee <_strtod_l+0x51e>
 800eeaa:	b10b      	cbz	r3, 800eeb0 <_strtod_l+0x4e0>
 800eeac:	4682      	mov	sl, r0
 800eeae:	468b      	mov	fp, r1
 800eeb0:	492c      	ldr	r1, [pc, #176]	@ (800ef64 <_strtod_l+0x594>)
 800eeb2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800eeb6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800eeba:	4652      	mov	r2, sl
 800eebc:	465b      	mov	r3, fp
 800eebe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eec2:	f7f1 fb99 	bl	80005f8 <__aeabi_dmul>
 800eec6:	4b28      	ldr	r3, [pc, #160]	@ (800ef68 <_strtod_l+0x598>)
 800eec8:	460a      	mov	r2, r1
 800eeca:	400b      	ands	r3, r1
 800eecc:	4927      	ldr	r1, [pc, #156]	@ (800ef6c <_strtod_l+0x59c>)
 800eece:	428b      	cmp	r3, r1
 800eed0:	4682      	mov	sl, r0
 800eed2:	d898      	bhi.n	800ee06 <_strtod_l+0x436>
 800eed4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800eed8:	428b      	cmp	r3, r1
 800eeda:	bf86      	itte	hi
 800eedc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ef70 <_strtod_l+0x5a0>
 800eee0:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800eee4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800eee8:	2300      	movs	r3, #0
 800eeea:	9308      	str	r3, [sp, #32]
 800eeec:	e07a      	b.n	800efe4 <_strtod_l+0x614>
 800eeee:	07e2      	lsls	r2, r4, #31
 800eef0:	d505      	bpl.n	800eefe <_strtod_l+0x52e>
 800eef2:	9b08      	ldr	r3, [sp, #32]
 800eef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef8:	f7f1 fb7e 	bl	80005f8 <__aeabi_dmul>
 800eefc:	2301      	movs	r3, #1
 800eefe:	9a08      	ldr	r2, [sp, #32]
 800ef00:	3208      	adds	r2, #8
 800ef02:	3601      	adds	r6, #1
 800ef04:	1064      	asrs	r4, r4, #1
 800ef06:	9208      	str	r2, [sp, #32]
 800ef08:	e7cd      	b.n	800eea6 <_strtod_l+0x4d6>
 800ef0a:	d0ed      	beq.n	800eee8 <_strtod_l+0x518>
 800ef0c:	4264      	negs	r4, r4
 800ef0e:	f014 020f 	ands.w	r2, r4, #15
 800ef12:	d00a      	beq.n	800ef2a <_strtod_l+0x55a>
 800ef14:	4b12      	ldr	r3, [pc, #72]	@ (800ef60 <_strtod_l+0x590>)
 800ef16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ef1a:	4650      	mov	r0, sl
 800ef1c:	4659      	mov	r1, fp
 800ef1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef22:	f7f1 fc93 	bl	800084c <__aeabi_ddiv>
 800ef26:	4682      	mov	sl, r0
 800ef28:	468b      	mov	fp, r1
 800ef2a:	1124      	asrs	r4, r4, #4
 800ef2c:	d0dc      	beq.n	800eee8 <_strtod_l+0x518>
 800ef2e:	2c1f      	cmp	r4, #31
 800ef30:	dd20      	ble.n	800ef74 <_strtod_l+0x5a4>
 800ef32:	2400      	movs	r4, #0
 800ef34:	46a0      	mov	r8, r4
 800ef36:	940a      	str	r4, [sp, #40]	@ 0x28
 800ef38:	46a1      	mov	r9, r4
 800ef3a:	9a05      	ldr	r2, [sp, #20]
 800ef3c:	2322      	movs	r3, #34	@ 0x22
 800ef3e:	f04f 0a00 	mov.w	sl, #0
 800ef42:	f04f 0b00 	mov.w	fp, #0
 800ef46:	6013      	str	r3, [r2, #0]
 800ef48:	e768      	b.n	800ee1c <_strtod_l+0x44c>
 800ef4a:	bf00      	nop
 800ef4c:	0801103a 	.word	0x0801103a
 800ef50:	0801124c 	.word	0x0801124c
 800ef54:	08011032 	.word	0x08011032
 800ef58:	08011069 	.word	0x08011069
 800ef5c:	080112f4 	.word	0x080112f4
 800ef60:	08011180 	.word	0x08011180
 800ef64:	08011158 	.word	0x08011158
 800ef68:	7ff00000 	.word	0x7ff00000
 800ef6c:	7ca00000 	.word	0x7ca00000
 800ef70:	7fefffff 	.word	0x7fefffff
 800ef74:	f014 0310 	ands.w	r3, r4, #16
 800ef78:	bf18      	it	ne
 800ef7a:	236a      	movne	r3, #106	@ 0x6a
 800ef7c:	4ea9      	ldr	r6, [pc, #676]	@ (800f224 <_strtod_l+0x854>)
 800ef7e:	9308      	str	r3, [sp, #32]
 800ef80:	4650      	mov	r0, sl
 800ef82:	4659      	mov	r1, fp
 800ef84:	2300      	movs	r3, #0
 800ef86:	07e2      	lsls	r2, r4, #31
 800ef88:	d504      	bpl.n	800ef94 <_strtod_l+0x5c4>
 800ef8a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ef8e:	f7f1 fb33 	bl	80005f8 <__aeabi_dmul>
 800ef92:	2301      	movs	r3, #1
 800ef94:	1064      	asrs	r4, r4, #1
 800ef96:	f106 0608 	add.w	r6, r6, #8
 800ef9a:	d1f4      	bne.n	800ef86 <_strtod_l+0x5b6>
 800ef9c:	b10b      	cbz	r3, 800efa2 <_strtod_l+0x5d2>
 800ef9e:	4682      	mov	sl, r0
 800efa0:	468b      	mov	fp, r1
 800efa2:	9b08      	ldr	r3, [sp, #32]
 800efa4:	b1b3      	cbz	r3, 800efd4 <_strtod_l+0x604>
 800efa6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800efaa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800efae:	2b00      	cmp	r3, #0
 800efb0:	4659      	mov	r1, fp
 800efb2:	dd0f      	ble.n	800efd4 <_strtod_l+0x604>
 800efb4:	2b1f      	cmp	r3, #31
 800efb6:	dd55      	ble.n	800f064 <_strtod_l+0x694>
 800efb8:	2b34      	cmp	r3, #52	@ 0x34
 800efba:	bfde      	ittt	le
 800efbc:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800efc0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800efc4:	4093      	lslle	r3, r2
 800efc6:	f04f 0a00 	mov.w	sl, #0
 800efca:	bfcc      	ite	gt
 800efcc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800efd0:	ea03 0b01 	andle.w	fp, r3, r1
 800efd4:	2200      	movs	r2, #0
 800efd6:	2300      	movs	r3, #0
 800efd8:	4650      	mov	r0, sl
 800efda:	4659      	mov	r1, fp
 800efdc:	f7f1 fd74 	bl	8000ac8 <__aeabi_dcmpeq>
 800efe0:	2800      	cmp	r0, #0
 800efe2:	d1a6      	bne.n	800ef32 <_strtod_l+0x562>
 800efe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800efe6:	9300      	str	r3, [sp, #0]
 800efe8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800efea:	9805      	ldr	r0, [sp, #20]
 800efec:	462b      	mov	r3, r5
 800efee:	463a      	mov	r2, r7
 800eff0:	f7ff f8c6 	bl	800e180 <__s2b>
 800eff4:	900a      	str	r0, [sp, #40]	@ 0x28
 800eff6:	2800      	cmp	r0, #0
 800eff8:	f43f af05 	beq.w	800ee06 <_strtod_l+0x436>
 800effc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800effe:	2a00      	cmp	r2, #0
 800f000:	eba9 0308 	sub.w	r3, r9, r8
 800f004:	bfa8      	it	ge
 800f006:	2300      	movge	r3, #0
 800f008:	9312      	str	r3, [sp, #72]	@ 0x48
 800f00a:	2400      	movs	r4, #0
 800f00c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f010:	9316      	str	r3, [sp, #88]	@ 0x58
 800f012:	46a0      	mov	r8, r4
 800f014:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f016:	9805      	ldr	r0, [sp, #20]
 800f018:	6859      	ldr	r1, [r3, #4]
 800f01a:	f7ff f809 	bl	800e030 <_Balloc>
 800f01e:	4681      	mov	r9, r0
 800f020:	2800      	cmp	r0, #0
 800f022:	f43f aef4 	beq.w	800ee0e <_strtod_l+0x43e>
 800f026:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f028:	691a      	ldr	r2, [r3, #16]
 800f02a:	3202      	adds	r2, #2
 800f02c:	f103 010c 	add.w	r1, r3, #12
 800f030:	0092      	lsls	r2, r2, #2
 800f032:	300c      	adds	r0, #12
 800f034:	f7fe f899 	bl	800d16a <memcpy>
 800f038:	ec4b ab10 	vmov	d0, sl, fp
 800f03c:	9805      	ldr	r0, [sp, #20]
 800f03e:	aa1c      	add	r2, sp, #112	@ 0x70
 800f040:	a91b      	add	r1, sp, #108	@ 0x6c
 800f042:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f046:	f7ff fbd7 	bl	800e7f8 <__d2b>
 800f04a:	901a      	str	r0, [sp, #104]	@ 0x68
 800f04c:	2800      	cmp	r0, #0
 800f04e:	f43f aede 	beq.w	800ee0e <_strtod_l+0x43e>
 800f052:	9805      	ldr	r0, [sp, #20]
 800f054:	2101      	movs	r1, #1
 800f056:	f7ff f929 	bl	800e2ac <__i2b>
 800f05a:	4680      	mov	r8, r0
 800f05c:	b948      	cbnz	r0, 800f072 <_strtod_l+0x6a2>
 800f05e:	f04f 0800 	mov.w	r8, #0
 800f062:	e6d4      	b.n	800ee0e <_strtod_l+0x43e>
 800f064:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f068:	fa02 f303 	lsl.w	r3, r2, r3
 800f06c:	ea03 0a0a 	and.w	sl, r3, sl
 800f070:	e7b0      	b.n	800efd4 <_strtod_l+0x604>
 800f072:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f074:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f076:	2d00      	cmp	r5, #0
 800f078:	bfab      	itete	ge
 800f07a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f07c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f07e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f080:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f082:	bfac      	ite	ge
 800f084:	18ef      	addge	r7, r5, r3
 800f086:	1b5e      	sublt	r6, r3, r5
 800f088:	9b08      	ldr	r3, [sp, #32]
 800f08a:	1aed      	subs	r5, r5, r3
 800f08c:	4415      	add	r5, r2
 800f08e:	4b66      	ldr	r3, [pc, #408]	@ (800f228 <_strtod_l+0x858>)
 800f090:	3d01      	subs	r5, #1
 800f092:	429d      	cmp	r5, r3
 800f094:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f098:	da50      	bge.n	800f13c <_strtod_l+0x76c>
 800f09a:	1b5b      	subs	r3, r3, r5
 800f09c:	2b1f      	cmp	r3, #31
 800f09e:	eba2 0203 	sub.w	r2, r2, r3
 800f0a2:	f04f 0101 	mov.w	r1, #1
 800f0a6:	dc3d      	bgt.n	800f124 <_strtod_l+0x754>
 800f0a8:	fa01 f303 	lsl.w	r3, r1, r3
 800f0ac:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	9310      	str	r3, [sp, #64]	@ 0x40
 800f0b2:	18bd      	adds	r5, r7, r2
 800f0b4:	9b08      	ldr	r3, [sp, #32]
 800f0b6:	42af      	cmp	r7, r5
 800f0b8:	4416      	add	r6, r2
 800f0ba:	441e      	add	r6, r3
 800f0bc:	463b      	mov	r3, r7
 800f0be:	bfa8      	it	ge
 800f0c0:	462b      	movge	r3, r5
 800f0c2:	42b3      	cmp	r3, r6
 800f0c4:	bfa8      	it	ge
 800f0c6:	4633      	movge	r3, r6
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	bfc2      	ittt	gt
 800f0cc:	1aed      	subgt	r5, r5, r3
 800f0ce:	1af6      	subgt	r6, r6, r3
 800f0d0:	1aff      	subgt	r7, r7, r3
 800f0d2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	dd16      	ble.n	800f106 <_strtod_l+0x736>
 800f0d8:	4641      	mov	r1, r8
 800f0da:	9805      	ldr	r0, [sp, #20]
 800f0dc:	461a      	mov	r2, r3
 800f0de:	f7ff f9a5 	bl	800e42c <__pow5mult>
 800f0e2:	4680      	mov	r8, r0
 800f0e4:	2800      	cmp	r0, #0
 800f0e6:	d0ba      	beq.n	800f05e <_strtod_l+0x68e>
 800f0e8:	4601      	mov	r1, r0
 800f0ea:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f0ec:	9805      	ldr	r0, [sp, #20]
 800f0ee:	f7ff f8f3 	bl	800e2d8 <__multiply>
 800f0f2:	900e      	str	r0, [sp, #56]	@ 0x38
 800f0f4:	2800      	cmp	r0, #0
 800f0f6:	f43f ae8a 	beq.w	800ee0e <_strtod_l+0x43e>
 800f0fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f0fc:	9805      	ldr	r0, [sp, #20]
 800f0fe:	f7fe ffd7 	bl	800e0b0 <_Bfree>
 800f102:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f104:	931a      	str	r3, [sp, #104]	@ 0x68
 800f106:	2d00      	cmp	r5, #0
 800f108:	dc1d      	bgt.n	800f146 <_strtod_l+0x776>
 800f10a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	dd23      	ble.n	800f158 <_strtod_l+0x788>
 800f110:	4649      	mov	r1, r9
 800f112:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f114:	9805      	ldr	r0, [sp, #20]
 800f116:	f7ff f989 	bl	800e42c <__pow5mult>
 800f11a:	4681      	mov	r9, r0
 800f11c:	b9e0      	cbnz	r0, 800f158 <_strtod_l+0x788>
 800f11e:	f04f 0900 	mov.w	r9, #0
 800f122:	e674      	b.n	800ee0e <_strtod_l+0x43e>
 800f124:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f128:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f12c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f130:	35e2      	adds	r5, #226	@ 0xe2
 800f132:	fa01 f305 	lsl.w	r3, r1, r5
 800f136:	9310      	str	r3, [sp, #64]	@ 0x40
 800f138:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f13a:	e7ba      	b.n	800f0b2 <_strtod_l+0x6e2>
 800f13c:	2300      	movs	r3, #0
 800f13e:	9310      	str	r3, [sp, #64]	@ 0x40
 800f140:	2301      	movs	r3, #1
 800f142:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f144:	e7b5      	b.n	800f0b2 <_strtod_l+0x6e2>
 800f146:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f148:	9805      	ldr	r0, [sp, #20]
 800f14a:	462a      	mov	r2, r5
 800f14c:	f7ff f9c8 	bl	800e4e0 <__lshift>
 800f150:	901a      	str	r0, [sp, #104]	@ 0x68
 800f152:	2800      	cmp	r0, #0
 800f154:	d1d9      	bne.n	800f10a <_strtod_l+0x73a>
 800f156:	e65a      	b.n	800ee0e <_strtod_l+0x43e>
 800f158:	2e00      	cmp	r6, #0
 800f15a:	dd07      	ble.n	800f16c <_strtod_l+0x79c>
 800f15c:	4649      	mov	r1, r9
 800f15e:	9805      	ldr	r0, [sp, #20]
 800f160:	4632      	mov	r2, r6
 800f162:	f7ff f9bd 	bl	800e4e0 <__lshift>
 800f166:	4681      	mov	r9, r0
 800f168:	2800      	cmp	r0, #0
 800f16a:	d0d8      	beq.n	800f11e <_strtod_l+0x74e>
 800f16c:	2f00      	cmp	r7, #0
 800f16e:	dd08      	ble.n	800f182 <_strtod_l+0x7b2>
 800f170:	4641      	mov	r1, r8
 800f172:	9805      	ldr	r0, [sp, #20]
 800f174:	463a      	mov	r2, r7
 800f176:	f7ff f9b3 	bl	800e4e0 <__lshift>
 800f17a:	4680      	mov	r8, r0
 800f17c:	2800      	cmp	r0, #0
 800f17e:	f43f ae46 	beq.w	800ee0e <_strtod_l+0x43e>
 800f182:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f184:	9805      	ldr	r0, [sp, #20]
 800f186:	464a      	mov	r2, r9
 800f188:	f7ff fa32 	bl	800e5f0 <__mdiff>
 800f18c:	4604      	mov	r4, r0
 800f18e:	2800      	cmp	r0, #0
 800f190:	f43f ae3d 	beq.w	800ee0e <_strtod_l+0x43e>
 800f194:	68c3      	ldr	r3, [r0, #12]
 800f196:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f198:	2300      	movs	r3, #0
 800f19a:	60c3      	str	r3, [r0, #12]
 800f19c:	4641      	mov	r1, r8
 800f19e:	f7ff fa0b 	bl	800e5b8 <__mcmp>
 800f1a2:	2800      	cmp	r0, #0
 800f1a4:	da46      	bge.n	800f234 <_strtod_l+0x864>
 800f1a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1a8:	ea53 030a 	orrs.w	r3, r3, sl
 800f1ac:	d16c      	bne.n	800f288 <_strtod_l+0x8b8>
 800f1ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d168      	bne.n	800f288 <_strtod_l+0x8b8>
 800f1b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f1ba:	0d1b      	lsrs	r3, r3, #20
 800f1bc:	051b      	lsls	r3, r3, #20
 800f1be:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f1c2:	d961      	bls.n	800f288 <_strtod_l+0x8b8>
 800f1c4:	6963      	ldr	r3, [r4, #20]
 800f1c6:	b913      	cbnz	r3, 800f1ce <_strtod_l+0x7fe>
 800f1c8:	6923      	ldr	r3, [r4, #16]
 800f1ca:	2b01      	cmp	r3, #1
 800f1cc:	dd5c      	ble.n	800f288 <_strtod_l+0x8b8>
 800f1ce:	4621      	mov	r1, r4
 800f1d0:	2201      	movs	r2, #1
 800f1d2:	9805      	ldr	r0, [sp, #20]
 800f1d4:	f7ff f984 	bl	800e4e0 <__lshift>
 800f1d8:	4641      	mov	r1, r8
 800f1da:	4604      	mov	r4, r0
 800f1dc:	f7ff f9ec 	bl	800e5b8 <__mcmp>
 800f1e0:	2800      	cmp	r0, #0
 800f1e2:	dd51      	ble.n	800f288 <_strtod_l+0x8b8>
 800f1e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f1e8:	9a08      	ldr	r2, [sp, #32]
 800f1ea:	0d1b      	lsrs	r3, r3, #20
 800f1ec:	051b      	lsls	r3, r3, #20
 800f1ee:	2a00      	cmp	r2, #0
 800f1f0:	d06b      	beq.n	800f2ca <_strtod_l+0x8fa>
 800f1f2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f1f6:	d868      	bhi.n	800f2ca <_strtod_l+0x8fa>
 800f1f8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f1fc:	f67f ae9d 	bls.w	800ef3a <_strtod_l+0x56a>
 800f200:	4b0a      	ldr	r3, [pc, #40]	@ (800f22c <_strtod_l+0x85c>)
 800f202:	4650      	mov	r0, sl
 800f204:	4659      	mov	r1, fp
 800f206:	2200      	movs	r2, #0
 800f208:	f7f1 f9f6 	bl	80005f8 <__aeabi_dmul>
 800f20c:	4b08      	ldr	r3, [pc, #32]	@ (800f230 <_strtod_l+0x860>)
 800f20e:	400b      	ands	r3, r1
 800f210:	4682      	mov	sl, r0
 800f212:	468b      	mov	fp, r1
 800f214:	2b00      	cmp	r3, #0
 800f216:	f47f ae05 	bne.w	800ee24 <_strtod_l+0x454>
 800f21a:	9a05      	ldr	r2, [sp, #20]
 800f21c:	2322      	movs	r3, #34	@ 0x22
 800f21e:	6013      	str	r3, [r2, #0]
 800f220:	e600      	b.n	800ee24 <_strtod_l+0x454>
 800f222:	bf00      	nop
 800f224:	08011278 	.word	0x08011278
 800f228:	fffffc02 	.word	0xfffffc02
 800f22c:	39500000 	.word	0x39500000
 800f230:	7ff00000 	.word	0x7ff00000
 800f234:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f238:	d165      	bne.n	800f306 <_strtod_l+0x936>
 800f23a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f23c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f240:	b35a      	cbz	r2, 800f29a <_strtod_l+0x8ca>
 800f242:	4a9f      	ldr	r2, [pc, #636]	@ (800f4c0 <_strtod_l+0xaf0>)
 800f244:	4293      	cmp	r3, r2
 800f246:	d12b      	bne.n	800f2a0 <_strtod_l+0x8d0>
 800f248:	9b08      	ldr	r3, [sp, #32]
 800f24a:	4651      	mov	r1, sl
 800f24c:	b303      	cbz	r3, 800f290 <_strtod_l+0x8c0>
 800f24e:	4b9d      	ldr	r3, [pc, #628]	@ (800f4c4 <_strtod_l+0xaf4>)
 800f250:	465a      	mov	r2, fp
 800f252:	4013      	ands	r3, r2
 800f254:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f258:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f25c:	d81b      	bhi.n	800f296 <_strtod_l+0x8c6>
 800f25e:	0d1b      	lsrs	r3, r3, #20
 800f260:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f264:	fa02 f303 	lsl.w	r3, r2, r3
 800f268:	4299      	cmp	r1, r3
 800f26a:	d119      	bne.n	800f2a0 <_strtod_l+0x8d0>
 800f26c:	4b96      	ldr	r3, [pc, #600]	@ (800f4c8 <_strtod_l+0xaf8>)
 800f26e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f270:	429a      	cmp	r2, r3
 800f272:	d102      	bne.n	800f27a <_strtod_l+0x8aa>
 800f274:	3101      	adds	r1, #1
 800f276:	f43f adca 	beq.w	800ee0e <_strtod_l+0x43e>
 800f27a:	4b92      	ldr	r3, [pc, #584]	@ (800f4c4 <_strtod_l+0xaf4>)
 800f27c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f27e:	401a      	ands	r2, r3
 800f280:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f284:	f04f 0a00 	mov.w	sl, #0
 800f288:	9b08      	ldr	r3, [sp, #32]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d1b8      	bne.n	800f200 <_strtod_l+0x830>
 800f28e:	e5c9      	b.n	800ee24 <_strtod_l+0x454>
 800f290:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f294:	e7e8      	b.n	800f268 <_strtod_l+0x898>
 800f296:	4613      	mov	r3, r2
 800f298:	e7e6      	b.n	800f268 <_strtod_l+0x898>
 800f29a:	ea53 030a 	orrs.w	r3, r3, sl
 800f29e:	d0a1      	beq.n	800f1e4 <_strtod_l+0x814>
 800f2a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f2a2:	b1db      	cbz	r3, 800f2dc <_strtod_l+0x90c>
 800f2a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f2a6:	4213      	tst	r3, r2
 800f2a8:	d0ee      	beq.n	800f288 <_strtod_l+0x8b8>
 800f2aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f2ac:	9a08      	ldr	r2, [sp, #32]
 800f2ae:	4650      	mov	r0, sl
 800f2b0:	4659      	mov	r1, fp
 800f2b2:	b1bb      	cbz	r3, 800f2e4 <_strtod_l+0x914>
 800f2b4:	f7ff fb6e 	bl	800e994 <sulp>
 800f2b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f2bc:	ec53 2b10 	vmov	r2, r3, d0
 800f2c0:	f7f0 ffe4 	bl	800028c <__adddf3>
 800f2c4:	4682      	mov	sl, r0
 800f2c6:	468b      	mov	fp, r1
 800f2c8:	e7de      	b.n	800f288 <_strtod_l+0x8b8>
 800f2ca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f2ce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f2d2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f2d6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800f2da:	e7d5      	b.n	800f288 <_strtod_l+0x8b8>
 800f2dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f2de:	ea13 0f0a 	tst.w	r3, sl
 800f2e2:	e7e1      	b.n	800f2a8 <_strtod_l+0x8d8>
 800f2e4:	f7ff fb56 	bl	800e994 <sulp>
 800f2e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f2ec:	ec53 2b10 	vmov	r2, r3, d0
 800f2f0:	f7f0 ffca 	bl	8000288 <__aeabi_dsub>
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	4682      	mov	sl, r0
 800f2fa:	468b      	mov	fp, r1
 800f2fc:	f7f1 fbe4 	bl	8000ac8 <__aeabi_dcmpeq>
 800f300:	2800      	cmp	r0, #0
 800f302:	d0c1      	beq.n	800f288 <_strtod_l+0x8b8>
 800f304:	e619      	b.n	800ef3a <_strtod_l+0x56a>
 800f306:	4641      	mov	r1, r8
 800f308:	4620      	mov	r0, r4
 800f30a:	f7ff facd 	bl	800e8a8 <__ratio>
 800f30e:	ec57 6b10 	vmov	r6, r7, d0
 800f312:	2200      	movs	r2, #0
 800f314:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f318:	4630      	mov	r0, r6
 800f31a:	4639      	mov	r1, r7
 800f31c:	f7f1 fbe8 	bl	8000af0 <__aeabi_dcmple>
 800f320:	2800      	cmp	r0, #0
 800f322:	d06f      	beq.n	800f404 <_strtod_l+0xa34>
 800f324:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f326:	2b00      	cmp	r3, #0
 800f328:	d17a      	bne.n	800f420 <_strtod_l+0xa50>
 800f32a:	f1ba 0f00 	cmp.w	sl, #0
 800f32e:	d158      	bne.n	800f3e2 <_strtod_l+0xa12>
 800f330:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f332:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f336:	2b00      	cmp	r3, #0
 800f338:	d15a      	bne.n	800f3f0 <_strtod_l+0xa20>
 800f33a:	4b64      	ldr	r3, [pc, #400]	@ (800f4cc <_strtod_l+0xafc>)
 800f33c:	2200      	movs	r2, #0
 800f33e:	4630      	mov	r0, r6
 800f340:	4639      	mov	r1, r7
 800f342:	f7f1 fbcb 	bl	8000adc <__aeabi_dcmplt>
 800f346:	2800      	cmp	r0, #0
 800f348:	d159      	bne.n	800f3fe <_strtod_l+0xa2e>
 800f34a:	4630      	mov	r0, r6
 800f34c:	4639      	mov	r1, r7
 800f34e:	4b60      	ldr	r3, [pc, #384]	@ (800f4d0 <_strtod_l+0xb00>)
 800f350:	2200      	movs	r2, #0
 800f352:	f7f1 f951 	bl	80005f8 <__aeabi_dmul>
 800f356:	4606      	mov	r6, r0
 800f358:	460f      	mov	r7, r1
 800f35a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f35e:	9606      	str	r6, [sp, #24]
 800f360:	9307      	str	r3, [sp, #28]
 800f362:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f366:	4d57      	ldr	r5, [pc, #348]	@ (800f4c4 <_strtod_l+0xaf4>)
 800f368:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f36c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f36e:	401d      	ands	r5, r3
 800f370:	4b58      	ldr	r3, [pc, #352]	@ (800f4d4 <_strtod_l+0xb04>)
 800f372:	429d      	cmp	r5, r3
 800f374:	f040 80b2 	bne.w	800f4dc <_strtod_l+0xb0c>
 800f378:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f37a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f37e:	ec4b ab10 	vmov	d0, sl, fp
 800f382:	f7ff f9c9 	bl	800e718 <__ulp>
 800f386:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f38a:	ec51 0b10 	vmov	r0, r1, d0
 800f38e:	f7f1 f933 	bl	80005f8 <__aeabi_dmul>
 800f392:	4652      	mov	r2, sl
 800f394:	465b      	mov	r3, fp
 800f396:	f7f0 ff79 	bl	800028c <__adddf3>
 800f39a:	460b      	mov	r3, r1
 800f39c:	4949      	ldr	r1, [pc, #292]	@ (800f4c4 <_strtod_l+0xaf4>)
 800f39e:	4a4e      	ldr	r2, [pc, #312]	@ (800f4d8 <_strtod_l+0xb08>)
 800f3a0:	4019      	ands	r1, r3
 800f3a2:	4291      	cmp	r1, r2
 800f3a4:	4682      	mov	sl, r0
 800f3a6:	d942      	bls.n	800f42e <_strtod_l+0xa5e>
 800f3a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f3aa:	4b47      	ldr	r3, [pc, #284]	@ (800f4c8 <_strtod_l+0xaf8>)
 800f3ac:	429a      	cmp	r2, r3
 800f3ae:	d103      	bne.n	800f3b8 <_strtod_l+0x9e8>
 800f3b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f3b2:	3301      	adds	r3, #1
 800f3b4:	f43f ad2b 	beq.w	800ee0e <_strtod_l+0x43e>
 800f3b8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f4c8 <_strtod_l+0xaf8>
 800f3bc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800f3c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f3c2:	9805      	ldr	r0, [sp, #20]
 800f3c4:	f7fe fe74 	bl	800e0b0 <_Bfree>
 800f3c8:	9805      	ldr	r0, [sp, #20]
 800f3ca:	4649      	mov	r1, r9
 800f3cc:	f7fe fe70 	bl	800e0b0 <_Bfree>
 800f3d0:	9805      	ldr	r0, [sp, #20]
 800f3d2:	4641      	mov	r1, r8
 800f3d4:	f7fe fe6c 	bl	800e0b0 <_Bfree>
 800f3d8:	9805      	ldr	r0, [sp, #20]
 800f3da:	4621      	mov	r1, r4
 800f3dc:	f7fe fe68 	bl	800e0b0 <_Bfree>
 800f3e0:	e618      	b.n	800f014 <_strtod_l+0x644>
 800f3e2:	f1ba 0f01 	cmp.w	sl, #1
 800f3e6:	d103      	bne.n	800f3f0 <_strtod_l+0xa20>
 800f3e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	f43f ada5 	beq.w	800ef3a <_strtod_l+0x56a>
 800f3f0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f4a0 <_strtod_l+0xad0>
 800f3f4:	4f35      	ldr	r7, [pc, #212]	@ (800f4cc <_strtod_l+0xafc>)
 800f3f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f3fa:	2600      	movs	r6, #0
 800f3fc:	e7b1      	b.n	800f362 <_strtod_l+0x992>
 800f3fe:	4f34      	ldr	r7, [pc, #208]	@ (800f4d0 <_strtod_l+0xb00>)
 800f400:	2600      	movs	r6, #0
 800f402:	e7aa      	b.n	800f35a <_strtod_l+0x98a>
 800f404:	4b32      	ldr	r3, [pc, #200]	@ (800f4d0 <_strtod_l+0xb00>)
 800f406:	4630      	mov	r0, r6
 800f408:	4639      	mov	r1, r7
 800f40a:	2200      	movs	r2, #0
 800f40c:	f7f1 f8f4 	bl	80005f8 <__aeabi_dmul>
 800f410:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f412:	4606      	mov	r6, r0
 800f414:	460f      	mov	r7, r1
 800f416:	2b00      	cmp	r3, #0
 800f418:	d09f      	beq.n	800f35a <_strtod_l+0x98a>
 800f41a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f41e:	e7a0      	b.n	800f362 <_strtod_l+0x992>
 800f420:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f4a8 <_strtod_l+0xad8>
 800f424:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f428:	ec57 6b17 	vmov	r6, r7, d7
 800f42c:	e799      	b.n	800f362 <_strtod_l+0x992>
 800f42e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f432:	9b08      	ldr	r3, [sp, #32]
 800f434:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d1c1      	bne.n	800f3c0 <_strtod_l+0x9f0>
 800f43c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f440:	0d1b      	lsrs	r3, r3, #20
 800f442:	051b      	lsls	r3, r3, #20
 800f444:	429d      	cmp	r5, r3
 800f446:	d1bb      	bne.n	800f3c0 <_strtod_l+0x9f0>
 800f448:	4630      	mov	r0, r6
 800f44a:	4639      	mov	r1, r7
 800f44c:	f7f1 fc34 	bl	8000cb8 <__aeabi_d2lz>
 800f450:	f7f1 f8a4 	bl	800059c <__aeabi_l2d>
 800f454:	4602      	mov	r2, r0
 800f456:	460b      	mov	r3, r1
 800f458:	4630      	mov	r0, r6
 800f45a:	4639      	mov	r1, r7
 800f45c:	f7f0 ff14 	bl	8000288 <__aeabi_dsub>
 800f460:	460b      	mov	r3, r1
 800f462:	4602      	mov	r2, r0
 800f464:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f468:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f46c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f46e:	ea46 060a 	orr.w	r6, r6, sl
 800f472:	431e      	orrs	r6, r3
 800f474:	d06f      	beq.n	800f556 <_strtod_l+0xb86>
 800f476:	a30e      	add	r3, pc, #56	@ (adr r3, 800f4b0 <_strtod_l+0xae0>)
 800f478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f47c:	f7f1 fb2e 	bl	8000adc <__aeabi_dcmplt>
 800f480:	2800      	cmp	r0, #0
 800f482:	f47f accf 	bne.w	800ee24 <_strtod_l+0x454>
 800f486:	a30c      	add	r3, pc, #48	@ (adr r3, 800f4b8 <_strtod_l+0xae8>)
 800f488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f48c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f490:	f7f1 fb42 	bl	8000b18 <__aeabi_dcmpgt>
 800f494:	2800      	cmp	r0, #0
 800f496:	d093      	beq.n	800f3c0 <_strtod_l+0x9f0>
 800f498:	e4c4      	b.n	800ee24 <_strtod_l+0x454>
 800f49a:	bf00      	nop
 800f49c:	f3af 8000 	nop.w
 800f4a0:	00000000 	.word	0x00000000
 800f4a4:	bff00000 	.word	0xbff00000
 800f4a8:	00000000 	.word	0x00000000
 800f4ac:	3ff00000 	.word	0x3ff00000
 800f4b0:	94a03595 	.word	0x94a03595
 800f4b4:	3fdfffff 	.word	0x3fdfffff
 800f4b8:	35afe535 	.word	0x35afe535
 800f4bc:	3fe00000 	.word	0x3fe00000
 800f4c0:	000fffff 	.word	0x000fffff
 800f4c4:	7ff00000 	.word	0x7ff00000
 800f4c8:	7fefffff 	.word	0x7fefffff
 800f4cc:	3ff00000 	.word	0x3ff00000
 800f4d0:	3fe00000 	.word	0x3fe00000
 800f4d4:	7fe00000 	.word	0x7fe00000
 800f4d8:	7c9fffff 	.word	0x7c9fffff
 800f4dc:	9b08      	ldr	r3, [sp, #32]
 800f4de:	b323      	cbz	r3, 800f52a <_strtod_l+0xb5a>
 800f4e0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f4e4:	d821      	bhi.n	800f52a <_strtod_l+0xb5a>
 800f4e6:	a328      	add	r3, pc, #160	@ (adr r3, 800f588 <_strtod_l+0xbb8>)
 800f4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ec:	4630      	mov	r0, r6
 800f4ee:	4639      	mov	r1, r7
 800f4f0:	f7f1 fafe 	bl	8000af0 <__aeabi_dcmple>
 800f4f4:	b1a0      	cbz	r0, 800f520 <_strtod_l+0xb50>
 800f4f6:	4639      	mov	r1, r7
 800f4f8:	4630      	mov	r0, r6
 800f4fa:	f7f1 fb55 	bl	8000ba8 <__aeabi_d2uiz>
 800f4fe:	2801      	cmp	r0, #1
 800f500:	bf38      	it	cc
 800f502:	2001      	movcc	r0, #1
 800f504:	f7f0 fffe 	bl	8000504 <__aeabi_ui2d>
 800f508:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f50a:	4606      	mov	r6, r0
 800f50c:	460f      	mov	r7, r1
 800f50e:	b9fb      	cbnz	r3, 800f550 <_strtod_l+0xb80>
 800f510:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f514:	9014      	str	r0, [sp, #80]	@ 0x50
 800f516:	9315      	str	r3, [sp, #84]	@ 0x54
 800f518:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f51c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f520:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f522:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f526:	1b5b      	subs	r3, r3, r5
 800f528:	9311      	str	r3, [sp, #68]	@ 0x44
 800f52a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f52e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f532:	f7ff f8f1 	bl	800e718 <__ulp>
 800f536:	4650      	mov	r0, sl
 800f538:	ec53 2b10 	vmov	r2, r3, d0
 800f53c:	4659      	mov	r1, fp
 800f53e:	f7f1 f85b 	bl	80005f8 <__aeabi_dmul>
 800f542:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f546:	f7f0 fea1 	bl	800028c <__adddf3>
 800f54a:	4682      	mov	sl, r0
 800f54c:	468b      	mov	fp, r1
 800f54e:	e770      	b.n	800f432 <_strtod_l+0xa62>
 800f550:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f554:	e7e0      	b.n	800f518 <_strtod_l+0xb48>
 800f556:	a30e      	add	r3, pc, #56	@ (adr r3, 800f590 <_strtod_l+0xbc0>)
 800f558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f55c:	f7f1 fabe 	bl	8000adc <__aeabi_dcmplt>
 800f560:	e798      	b.n	800f494 <_strtod_l+0xac4>
 800f562:	2300      	movs	r3, #0
 800f564:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f566:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f568:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f56a:	6013      	str	r3, [r2, #0]
 800f56c:	f7ff ba6d 	b.w	800ea4a <_strtod_l+0x7a>
 800f570:	2a65      	cmp	r2, #101	@ 0x65
 800f572:	f43f ab66 	beq.w	800ec42 <_strtod_l+0x272>
 800f576:	2a45      	cmp	r2, #69	@ 0x45
 800f578:	f43f ab63 	beq.w	800ec42 <_strtod_l+0x272>
 800f57c:	2301      	movs	r3, #1
 800f57e:	f7ff bb9e 	b.w	800ecbe <_strtod_l+0x2ee>
 800f582:	bf00      	nop
 800f584:	f3af 8000 	nop.w
 800f588:	ffc00000 	.word	0xffc00000
 800f58c:	41dfffff 	.word	0x41dfffff
 800f590:	94a03595 	.word	0x94a03595
 800f594:	3fcfffff 	.word	0x3fcfffff

0800f598 <_strtod_r>:
 800f598:	4b01      	ldr	r3, [pc, #4]	@ (800f5a0 <_strtod_r+0x8>)
 800f59a:	f7ff ba19 	b.w	800e9d0 <_strtod_l>
 800f59e:	bf00      	nop
 800f5a0:	20000074 	.word	0x20000074

0800f5a4 <__ssputs_r>:
 800f5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5a8:	688e      	ldr	r6, [r1, #8]
 800f5aa:	461f      	mov	r7, r3
 800f5ac:	42be      	cmp	r6, r7
 800f5ae:	680b      	ldr	r3, [r1, #0]
 800f5b0:	4682      	mov	sl, r0
 800f5b2:	460c      	mov	r4, r1
 800f5b4:	4690      	mov	r8, r2
 800f5b6:	d82d      	bhi.n	800f614 <__ssputs_r+0x70>
 800f5b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f5bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f5c0:	d026      	beq.n	800f610 <__ssputs_r+0x6c>
 800f5c2:	6965      	ldr	r5, [r4, #20]
 800f5c4:	6909      	ldr	r1, [r1, #16]
 800f5c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f5ca:	eba3 0901 	sub.w	r9, r3, r1
 800f5ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f5d2:	1c7b      	adds	r3, r7, #1
 800f5d4:	444b      	add	r3, r9
 800f5d6:	106d      	asrs	r5, r5, #1
 800f5d8:	429d      	cmp	r5, r3
 800f5da:	bf38      	it	cc
 800f5dc:	461d      	movcc	r5, r3
 800f5de:	0553      	lsls	r3, r2, #21
 800f5e0:	d527      	bpl.n	800f632 <__ssputs_r+0x8e>
 800f5e2:	4629      	mov	r1, r5
 800f5e4:	f7fe fc98 	bl	800df18 <_malloc_r>
 800f5e8:	4606      	mov	r6, r0
 800f5ea:	b360      	cbz	r0, 800f646 <__ssputs_r+0xa2>
 800f5ec:	6921      	ldr	r1, [r4, #16]
 800f5ee:	464a      	mov	r2, r9
 800f5f0:	f7fd fdbb 	bl	800d16a <memcpy>
 800f5f4:	89a3      	ldrh	r3, [r4, #12]
 800f5f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f5fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f5fe:	81a3      	strh	r3, [r4, #12]
 800f600:	6126      	str	r6, [r4, #16]
 800f602:	6165      	str	r5, [r4, #20]
 800f604:	444e      	add	r6, r9
 800f606:	eba5 0509 	sub.w	r5, r5, r9
 800f60a:	6026      	str	r6, [r4, #0]
 800f60c:	60a5      	str	r5, [r4, #8]
 800f60e:	463e      	mov	r6, r7
 800f610:	42be      	cmp	r6, r7
 800f612:	d900      	bls.n	800f616 <__ssputs_r+0x72>
 800f614:	463e      	mov	r6, r7
 800f616:	6820      	ldr	r0, [r4, #0]
 800f618:	4632      	mov	r2, r6
 800f61a:	4641      	mov	r1, r8
 800f61c:	f000 fb6a 	bl	800fcf4 <memmove>
 800f620:	68a3      	ldr	r3, [r4, #8]
 800f622:	1b9b      	subs	r3, r3, r6
 800f624:	60a3      	str	r3, [r4, #8]
 800f626:	6823      	ldr	r3, [r4, #0]
 800f628:	4433      	add	r3, r6
 800f62a:	6023      	str	r3, [r4, #0]
 800f62c:	2000      	movs	r0, #0
 800f62e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f632:	462a      	mov	r2, r5
 800f634:	f000 ff41 	bl	80104ba <_realloc_r>
 800f638:	4606      	mov	r6, r0
 800f63a:	2800      	cmp	r0, #0
 800f63c:	d1e0      	bne.n	800f600 <__ssputs_r+0x5c>
 800f63e:	6921      	ldr	r1, [r4, #16]
 800f640:	4650      	mov	r0, sl
 800f642:	f7fe fbf5 	bl	800de30 <_free_r>
 800f646:	230c      	movs	r3, #12
 800f648:	f8ca 3000 	str.w	r3, [sl]
 800f64c:	89a3      	ldrh	r3, [r4, #12]
 800f64e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f652:	81a3      	strh	r3, [r4, #12]
 800f654:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f658:	e7e9      	b.n	800f62e <__ssputs_r+0x8a>
	...

0800f65c <_svfiprintf_r>:
 800f65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f660:	4698      	mov	r8, r3
 800f662:	898b      	ldrh	r3, [r1, #12]
 800f664:	061b      	lsls	r3, r3, #24
 800f666:	b09d      	sub	sp, #116	@ 0x74
 800f668:	4607      	mov	r7, r0
 800f66a:	460d      	mov	r5, r1
 800f66c:	4614      	mov	r4, r2
 800f66e:	d510      	bpl.n	800f692 <_svfiprintf_r+0x36>
 800f670:	690b      	ldr	r3, [r1, #16]
 800f672:	b973      	cbnz	r3, 800f692 <_svfiprintf_r+0x36>
 800f674:	2140      	movs	r1, #64	@ 0x40
 800f676:	f7fe fc4f 	bl	800df18 <_malloc_r>
 800f67a:	6028      	str	r0, [r5, #0]
 800f67c:	6128      	str	r0, [r5, #16]
 800f67e:	b930      	cbnz	r0, 800f68e <_svfiprintf_r+0x32>
 800f680:	230c      	movs	r3, #12
 800f682:	603b      	str	r3, [r7, #0]
 800f684:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f688:	b01d      	add	sp, #116	@ 0x74
 800f68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f68e:	2340      	movs	r3, #64	@ 0x40
 800f690:	616b      	str	r3, [r5, #20]
 800f692:	2300      	movs	r3, #0
 800f694:	9309      	str	r3, [sp, #36]	@ 0x24
 800f696:	2320      	movs	r3, #32
 800f698:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f69c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f6a0:	2330      	movs	r3, #48	@ 0x30
 800f6a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f840 <_svfiprintf_r+0x1e4>
 800f6a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f6aa:	f04f 0901 	mov.w	r9, #1
 800f6ae:	4623      	mov	r3, r4
 800f6b0:	469a      	mov	sl, r3
 800f6b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6b6:	b10a      	cbz	r2, 800f6bc <_svfiprintf_r+0x60>
 800f6b8:	2a25      	cmp	r2, #37	@ 0x25
 800f6ba:	d1f9      	bne.n	800f6b0 <_svfiprintf_r+0x54>
 800f6bc:	ebba 0b04 	subs.w	fp, sl, r4
 800f6c0:	d00b      	beq.n	800f6da <_svfiprintf_r+0x7e>
 800f6c2:	465b      	mov	r3, fp
 800f6c4:	4622      	mov	r2, r4
 800f6c6:	4629      	mov	r1, r5
 800f6c8:	4638      	mov	r0, r7
 800f6ca:	f7ff ff6b 	bl	800f5a4 <__ssputs_r>
 800f6ce:	3001      	adds	r0, #1
 800f6d0:	f000 80a7 	beq.w	800f822 <_svfiprintf_r+0x1c6>
 800f6d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f6d6:	445a      	add	r2, fp
 800f6d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800f6da:	f89a 3000 	ldrb.w	r3, [sl]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	f000 809f 	beq.w	800f822 <_svfiprintf_r+0x1c6>
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f6ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6ee:	f10a 0a01 	add.w	sl, sl, #1
 800f6f2:	9304      	str	r3, [sp, #16]
 800f6f4:	9307      	str	r3, [sp, #28]
 800f6f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f6fa:	931a      	str	r3, [sp, #104]	@ 0x68
 800f6fc:	4654      	mov	r4, sl
 800f6fe:	2205      	movs	r2, #5
 800f700:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f704:	484e      	ldr	r0, [pc, #312]	@ (800f840 <_svfiprintf_r+0x1e4>)
 800f706:	f7f0 fd63 	bl	80001d0 <memchr>
 800f70a:	9a04      	ldr	r2, [sp, #16]
 800f70c:	b9d8      	cbnz	r0, 800f746 <_svfiprintf_r+0xea>
 800f70e:	06d0      	lsls	r0, r2, #27
 800f710:	bf44      	itt	mi
 800f712:	2320      	movmi	r3, #32
 800f714:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f718:	0711      	lsls	r1, r2, #28
 800f71a:	bf44      	itt	mi
 800f71c:	232b      	movmi	r3, #43	@ 0x2b
 800f71e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f722:	f89a 3000 	ldrb.w	r3, [sl]
 800f726:	2b2a      	cmp	r3, #42	@ 0x2a
 800f728:	d015      	beq.n	800f756 <_svfiprintf_r+0xfa>
 800f72a:	9a07      	ldr	r2, [sp, #28]
 800f72c:	4654      	mov	r4, sl
 800f72e:	2000      	movs	r0, #0
 800f730:	f04f 0c0a 	mov.w	ip, #10
 800f734:	4621      	mov	r1, r4
 800f736:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f73a:	3b30      	subs	r3, #48	@ 0x30
 800f73c:	2b09      	cmp	r3, #9
 800f73e:	d94b      	bls.n	800f7d8 <_svfiprintf_r+0x17c>
 800f740:	b1b0      	cbz	r0, 800f770 <_svfiprintf_r+0x114>
 800f742:	9207      	str	r2, [sp, #28]
 800f744:	e014      	b.n	800f770 <_svfiprintf_r+0x114>
 800f746:	eba0 0308 	sub.w	r3, r0, r8
 800f74a:	fa09 f303 	lsl.w	r3, r9, r3
 800f74e:	4313      	orrs	r3, r2
 800f750:	9304      	str	r3, [sp, #16]
 800f752:	46a2      	mov	sl, r4
 800f754:	e7d2      	b.n	800f6fc <_svfiprintf_r+0xa0>
 800f756:	9b03      	ldr	r3, [sp, #12]
 800f758:	1d19      	adds	r1, r3, #4
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	9103      	str	r1, [sp, #12]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	bfbb      	ittet	lt
 800f762:	425b      	neglt	r3, r3
 800f764:	f042 0202 	orrlt.w	r2, r2, #2
 800f768:	9307      	strge	r3, [sp, #28]
 800f76a:	9307      	strlt	r3, [sp, #28]
 800f76c:	bfb8      	it	lt
 800f76e:	9204      	strlt	r2, [sp, #16]
 800f770:	7823      	ldrb	r3, [r4, #0]
 800f772:	2b2e      	cmp	r3, #46	@ 0x2e
 800f774:	d10a      	bne.n	800f78c <_svfiprintf_r+0x130>
 800f776:	7863      	ldrb	r3, [r4, #1]
 800f778:	2b2a      	cmp	r3, #42	@ 0x2a
 800f77a:	d132      	bne.n	800f7e2 <_svfiprintf_r+0x186>
 800f77c:	9b03      	ldr	r3, [sp, #12]
 800f77e:	1d1a      	adds	r2, r3, #4
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	9203      	str	r2, [sp, #12]
 800f784:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f788:	3402      	adds	r4, #2
 800f78a:	9305      	str	r3, [sp, #20]
 800f78c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f850 <_svfiprintf_r+0x1f4>
 800f790:	7821      	ldrb	r1, [r4, #0]
 800f792:	2203      	movs	r2, #3
 800f794:	4650      	mov	r0, sl
 800f796:	f7f0 fd1b 	bl	80001d0 <memchr>
 800f79a:	b138      	cbz	r0, 800f7ac <_svfiprintf_r+0x150>
 800f79c:	9b04      	ldr	r3, [sp, #16]
 800f79e:	eba0 000a 	sub.w	r0, r0, sl
 800f7a2:	2240      	movs	r2, #64	@ 0x40
 800f7a4:	4082      	lsls	r2, r0
 800f7a6:	4313      	orrs	r3, r2
 800f7a8:	3401      	adds	r4, #1
 800f7aa:	9304      	str	r3, [sp, #16]
 800f7ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7b0:	4824      	ldr	r0, [pc, #144]	@ (800f844 <_svfiprintf_r+0x1e8>)
 800f7b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f7b6:	2206      	movs	r2, #6
 800f7b8:	f7f0 fd0a 	bl	80001d0 <memchr>
 800f7bc:	2800      	cmp	r0, #0
 800f7be:	d036      	beq.n	800f82e <_svfiprintf_r+0x1d2>
 800f7c0:	4b21      	ldr	r3, [pc, #132]	@ (800f848 <_svfiprintf_r+0x1ec>)
 800f7c2:	bb1b      	cbnz	r3, 800f80c <_svfiprintf_r+0x1b0>
 800f7c4:	9b03      	ldr	r3, [sp, #12]
 800f7c6:	3307      	adds	r3, #7
 800f7c8:	f023 0307 	bic.w	r3, r3, #7
 800f7cc:	3308      	adds	r3, #8
 800f7ce:	9303      	str	r3, [sp, #12]
 800f7d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7d2:	4433      	add	r3, r6
 800f7d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7d6:	e76a      	b.n	800f6ae <_svfiprintf_r+0x52>
 800f7d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f7dc:	460c      	mov	r4, r1
 800f7de:	2001      	movs	r0, #1
 800f7e0:	e7a8      	b.n	800f734 <_svfiprintf_r+0xd8>
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	3401      	adds	r4, #1
 800f7e6:	9305      	str	r3, [sp, #20]
 800f7e8:	4619      	mov	r1, r3
 800f7ea:	f04f 0c0a 	mov.w	ip, #10
 800f7ee:	4620      	mov	r0, r4
 800f7f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7f4:	3a30      	subs	r2, #48	@ 0x30
 800f7f6:	2a09      	cmp	r2, #9
 800f7f8:	d903      	bls.n	800f802 <_svfiprintf_r+0x1a6>
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d0c6      	beq.n	800f78c <_svfiprintf_r+0x130>
 800f7fe:	9105      	str	r1, [sp, #20]
 800f800:	e7c4      	b.n	800f78c <_svfiprintf_r+0x130>
 800f802:	fb0c 2101 	mla	r1, ip, r1, r2
 800f806:	4604      	mov	r4, r0
 800f808:	2301      	movs	r3, #1
 800f80a:	e7f0      	b.n	800f7ee <_svfiprintf_r+0x192>
 800f80c:	ab03      	add	r3, sp, #12
 800f80e:	9300      	str	r3, [sp, #0]
 800f810:	462a      	mov	r2, r5
 800f812:	4b0e      	ldr	r3, [pc, #56]	@ (800f84c <_svfiprintf_r+0x1f0>)
 800f814:	a904      	add	r1, sp, #16
 800f816:	4638      	mov	r0, r7
 800f818:	f7fc fba8 	bl	800bf6c <_printf_float>
 800f81c:	1c42      	adds	r2, r0, #1
 800f81e:	4606      	mov	r6, r0
 800f820:	d1d6      	bne.n	800f7d0 <_svfiprintf_r+0x174>
 800f822:	89ab      	ldrh	r3, [r5, #12]
 800f824:	065b      	lsls	r3, r3, #25
 800f826:	f53f af2d 	bmi.w	800f684 <_svfiprintf_r+0x28>
 800f82a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f82c:	e72c      	b.n	800f688 <_svfiprintf_r+0x2c>
 800f82e:	ab03      	add	r3, sp, #12
 800f830:	9300      	str	r3, [sp, #0]
 800f832:	462a      	mov	r2, r5
 800f834:	4b05      	ldr	r3, [pc, #20]	@ (800f84c <_svfiprintf_r+0x1f0>)
 800f836:	a904      	add	r1, sp, #16
 800f838:	4638      	mov	r0, r7
 800f83a:	f7fc fe2f 	bl	800c49c <_printf_i>
 800f83e:	e7ed      	b.n	800f81c <_svfiprintf_r+0x1c0>
 800f840:	080112a0 	.word	0x080112a0
 800f844:	080112aa 	.word	0x080112aa
 800f848:	0800bf6d 	.word	0x0800bf6d
 800f84c:	0800f5a5 	.word	0x0800f5a5
 800f850:	080112a6 	.word	0x080112a6

0800f854 <__sfputc_r>:
 800f854:	6893      	ldr	r3, [r2, #8]
 800f856:	3b01      	subs	r3, #1
 800f858:	2b00      	cmp	r3, #0
 800f85a:	b410      	push	{r4}
 800f85c:	6093      	str	r3, [r2, #8]
 800f85e:	da08      	bge.n	800f872 <__sfputc_r+0x1e>
 800f860:	6994      	ldr	r4, [r2, #24]
 800f862:	42a3      	cmp	r3, r4
 800f864:	db01      	blt.n	800f86a <__sfputc_r+0x16>
 800f866:	290a      	cmp	r1, #10
 800f868:	d103      	bne.n	800f872 <__sfputc_r+0x1e>
 800f86a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f86e:	f7fd bb12 	b.w	800ce96 <__swbuf_r>
 800f872:	6813      	ldr	r3, [r2, #0]
 800f874:	1c58      	adds	r0, r3, #1
 800f876:	6010      	str	r0, [r2, #0]
 800f878:	7019      	strb	r1, [r3, #0]
 800f87a:	4608      	mov	r0, r1
 800f87c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f880:	4770      	bx	lr

0800f882 <__sfputs_r>:
 800f882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f884:	4606      	mov	r6, r0
 800f886:	460f      	mov	r7, r1
 800f888:	4614      	mov	r4, r2
 800f88a:	18d5      	adds	r5, r2, r3
 800f88c:	42ac      	cmp	r4, r5
 800f88e:	d101      	bne.n	800f894 <__sfputs_r+0x12>
 800f890:	2000      	movs	r0, #0
 800f892:	e007      	b.n	800f8a4 <__sfputs_r+0x22>
 800f894:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f898:	463a      	mov	r2, r7
 800f89a:	4630      	mov	r0, r6
 800f89c:	f7ff ffda 	bl	800f854 <__sfputc_r>
 800f8a0:	1c43      	adds	r3, r0, #1
 800f8a2:	d1f3      	bne.n	800f88c <__sfputs_r+0xa>
 800f8a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f8a8 <_vfiprintf_r>:
 800f8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8ac:	460d      	mov	r5, r1
 800f8ae:	b09d      	sub	sp, #116	@ 0x74
 800f8b0:	4614      	mov	r4, r2
 800f8b2:	4698      	mov	r8, r3
 800f8b4:	4606      	mov	r6, r0
 800f8b6:	b118      	cbz	r0, 800f8c0 <_vfiprintf_r+0x18>
 800f8b8:	6a03      	ldr	r3, [r0, #32]
 800f8ba:	b90b      	cbnz	r3, 800f8c0 <_vfiprintf_r+0x18>
 800f8bc:	f7fd f9ae 	bl	800cc1c <__sinit>
 800f8c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f8c2:	07d9      	lsls	r1, r3, #31
 800f8c4:	d405      	bmi.n	800f8d2 <_vfiprintf_r+0x2a>
 800f8c6:	89ab      	ldrh	r3, [r5, #12]
 800f8c8:	059a      	lsls	r2, r3, #22
 800f8ca:	d402      	bmi.n	800f8d2 <_vfiprintf_r+0x2a>
 800f8cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f8ce:	f7fd fc4a 	bl	800d166 <__retarget_lock_acquire_recursive>
 800f8d2:	89ab      	ldrh	r3, [r5, #12]
 800f8d4:	071b      	lsls	r3, r3, #28
 800f8d6:	d501      	bpl.n	800f8dc <_vfiprintf_r+0x34>
 800f8d8:	692b      	ldr	r3, [r5, #16]
 800f8da:	b99b      	cbnz	r3, 800f904 <_vfiprintf_r+0x5c>
 800f8dc:	4629      	mov	r1, r5
 800f8de:	4630      	mov	r0, r6
 800f8e0:	f7fd fb18 	bl	800cf14 <__swsetup_r>
 800f8e4:	b170      	cbz	r0, 800f904 <_vfiprintf_r+0x5c>
 800f8e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f8e8:	07dc      	lsls	r4, r3, #31
 800f8ea:	d504      	bpl.n	800f8f6 <_vfiprintf_r+0x4e>
 800f8ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f8f0:	b01d      	add	sp, #116	@ 0x74
 800f8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8f6:	89ab      	ldrh	r3, [r5, #12]
 800f8f8:	0598      	lsls	r0, r3, #22
 800f8fa:	d4f7      	bmi.n	800f8ec <_vfiprintf_r+0x44>
 800f8fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f8fe:	f7fd fc33 	bl	800d168 <__retarget_lock_release_recursive>
 800f902:	e7f3      	b.n	800f8ec <_vfiprintf_r+0x44>
 800f904:	2300      	movs	r3, #0
 800f906:	9309      	str	r3, [sp, #36]	@ 0x24
 800f908:	2320      	movs	r3, #32
 800f90a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f90e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f912:	2330      	movs	r3, #48	@ 0x30
 800f914:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fac4 <_vfiprintf_r+0x21c>
 800f918:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f91c:	f04f 0901 	mov.w	r9, #1
 800f920:	4623      	mov	r3, r4
 800f922:	469a      	mov	sl, r3
 800f924:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f928:	b10a      	cbz	r2, 800f92e <_vfiprintf_r+0x86>
 800f92a:	2a25      	cmp	r2, #37	@ 0x25
 800f92c:	d1f9      	bne.n	800f922 <_vfiprintf_r+0x7a>
 800f92e:	ebba 0b04 	subs.w	fp, sl, r4
 800f932:	d00b      	beq.n	800f94c <_vfiprintf_r+0xa4>
 800f934:	465b      	mov	r3, fp
 800f936:	4622      	mov	r2, r4
 800f938:	4629      	mov	r1, r5
 800f93a:	4630      	mov	r0, r6
 800f93c:	f7ff ffa1 	bl	800f882 <__sfputs_r>
 800f940:	3001      	adds	r0, #1
 800f942:	f000 80a7 	beq.w	800fa94 <_vfiprintf_r+0x1ec>
 800f946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f948:	445a      	add	r2, fp
 800f94a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f94c:	f89a 3000 	ldrb.w	r3, [sl]
 800f950:	2b00      	cmp	r3, #0
 800f952:	f000 809f 	beq.w	800fa94 <_vfiprintf_r+0x1ec>
 800f956:	2300      	movs	r3, #0
 800f958:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f95c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f960:	f10a 0a01 	add.w	sl, sl, #1
 800f964:	9304      	str	r3, [sp, #16]
 800f966:	9307      	str	r3, [sp, #28]
 800f968:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f96c:	931a      	str	r3, [sp, #104]	@ 0x68
 800f96e:	4654      	mov	r4, sl
 800f970:	2205      	movs	r2, #5
 800f972:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f976:	4853      	ldr	r0, [pc, #332]	@ (800fac4 <_vfiprintf_r+0x21c>)
 800f978:	f7f0 fc2a 	bl	80001d0 <memchr>
 800f97c:	9a04      	ldr	r2, [sp, #16]
 800f97e:	b9d8      	cbnz	r0, 800f9b8 <_vfiprintf_r+0x110>
 800f980:	06d1      	lsls	r1, r2, #27
 800f982:	bf44      	itt	mi
 800f984:	2320      	movmi	r3, #32
 800f986:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f98a:	0713      	lsls	r3, r2, #28
 800f98c:	bf44      	itt	mi
 800f98e:	232b      	movmi	r3, #43	@ 0x2b
 800f990:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f994:	f89a 3000 	ldrb.w	r3, [sl]
 800f998:	2b2a      	cmp	r3, #42	@ 0x2a
 800f99a:	d015      	beq.n	800f9c8 <_vfiprintf_r+0x120>
 800f99c:	9a07      	ldr	r2, [sp, #28]
 800f99e:	4654      	mov	r4, sl
 800f9a0:	2000      	movs	r0, #0
 800f9a2:	f04f 0c0a 	mov.w	ip, #10
 800f9a6:	4621      	mov	r1, r4
 800f9a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f9ac:	3b30      	subs	r3, #48	@ 0x30
 800f9ae:	2b09      	cmp	r3, #9
 800f9b0:	d94b      	bls.n	800fa4a <_vfiprintf_r+0x1a2>
 800f9b2:	b1b0      	cbz	r0, 800f9e2 <_vfiprintf_r+0x13a>
 800f9b4:	9207      	str	r2, [sp, #28]
 800f9b6:	e014      	b.n	800f9e2 <_vfiprintf_r+0x13a>
 800f9b8:	eba0 0308 	sub.w	r3, r0, r8
 800f9bc:	fa09 f303 	lsl.w	r3, r9, r3
 800f9c0:	4313      	orrs	r3, r2
 800f9c2:	9304      	str	r3, [sp, #16]
 800f9c4:	46a2      	mov	sl, r4
 800f9c6:	e7d2      	b.n	800f96e <_vfiprintf_r+0xc6>
 800f9c8:	9b03      	ldr	r3, [sp, #12]
 800f9ca:	1d19      	adds	r1, r3, #4
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	9103      	str	r1, [sp, #12]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	bfbb      	ittet	lt
 800f9d4:	425b      	neglt	r3, r3
 800f9d6:	f042 0202 	orrlt.w	r2, r2, #2
 800f9da:	9307      	strge	r3, [sp, #28]
 800f9dc:	9307      	strlt	r3, [sp, #28]
 800f9de:	bfb8      	it	lt
 800f9e0:	9204      	strlt	r2, [sp, #16]
 800f9e2:	7823      	ldrb	r3, [r4, #0]
 800f9e4:	2b2e      	cmp	r3, #46	@ 0x2e
 800f9e6:	d10a      	bne.n	800f9fe <_vfiprintf_r+0x156>
 800f9e8:	7863      	ldrb	r3, [r4, #1]
 800f9ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800f9ec:	d132      	bne.n	800fa54 <_vfiprintf_r+0x1ac>
 800f9ee:	9b03      	ldr	r3, [sp, #12]
 800f9f0:	1d1a      	adds	r2, r3, #4
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	9203      	str	r2, [sp, #12]
 800f9f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f9fa:	3402      	adds	r4, #2
 800f9fc:	9305      	str	r3, [sp, #20]
 800f9fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fad4 <_vfiprintf_r+0x22c>
 800fa02:	7821      	ldrb	r1, [r4, #0]
 800fa04:	2203      	movs	r2, #3
 800fa06:	4650      	mov	r0, sl
 800fa08:	f7f0 fbe2 	bl	80001d0 <memchr>
 800fa0c:	b138      	cbz	r0, 800fa1e <_vfiprintf_r+0x176>
 800fa0e:	9b04      	ldr	r3, [sp, #16]
 800fa10:	eba0 000a 	sub.w	r0, r0, sl
 800fa14:	2240      	movs	r2, #64	@ 0x40
 800fa16:	4082      	lsls	r2, r0
 800fa18:	4313      	orrs	r3, r2
 800fa1a:	3401      	adds	r4, #1
 800fa1c:	9304      	str	r3, [sp, #16]
 800fa1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa22:	4829      	ldr	r0, [pc, #164]	@ (800fac8 <_vfiprintf_r+0x220>)
 800fa24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fa28:	2206      	movs	r2, #6
 800fa2a:	f7f0 fbd1 	bl	80001d0 <memchr>
 800fa2e:	2800      	cmp	r0, #0
 800fa30:	d03f      	beq.n	800fab2 <_vfiprintf_r+0x20a>
 800fa32:	4b26      	ldr	r3, [pc, #152]	@ (800facc <_vfiprintf_r+0x224>)
 800fa34:	bb1b      	cbnz	r3, 800fa7e <_vfiprintf_r+0x1d6>
 800fa36:	9b03      	ldr	r3, [sp, #12]
 800fa38:	3307      	adds	r3, #7
 800fa3a:	f023 0307 	bic.w	r3, r3, #7
 800fa3e:	3308      	adds	r3, #8
 800fa40:	9303      	str	r3, [sp, #12]
 800fa42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa44:	443b      	add	r3, r7
 800fa46:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa48:	e76a      	b.n	800f920 <_vfiprintf_r+0x78>
 800fa4a:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa4e:	460c      	mov	r4, r1
 800fa50:	2001      	movs	r0, #1
 800fa52:	e7a8      	b.n	800f9a6 <_vfiprintf_r+0xfe>
 800fa54:	2300      	movs	r3, #0
 800fa56:	3401      	adds	r4, #1
 800fa58:	9305      	str	r3, [sp, #20]
 800fa5a:	4619      	mov	r1, r3
 800fa5c:	f04f 0c0a 	mov.w	ip, #10
 800fa60:	4620      	mov	r0, r4
 800fa62:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa66:	3a30      	subs	r2, #48	@ 0x30
 800fa68:	2a09      	cmp	r2, #9
 800fa6a:	d903      	bls.n	800fa74 <_vfiprintf_r+0x1cc>
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d0c6      	beq.n	800f9fe <_vfiprintf_r+0x156>
 800fa70:	9105      	str	r1, [sp, #20]
 800fa72:	e7c4      	b.n	800f9fe <_vfiprintf_r+0x156>
 800fa74:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa78:	4604      	mov	r4, r0
 800fa7a:	2301      	movs	r3, #1
 800fa7c:	e7f0      	b.n	800fa60 <_vfiprintf_r+0x1b8>
 800fa7e:	ab03      	add	r3, sp, #12
 800fa80:	9300      	str	r3, [sp, #0]
 800fa82:	462a      	mov	r2, r5
 800fa84:	4b12      	ldr	r3, [pc, #72]	@ (800fad0 <_vfiprintf_r+0x228>)
 800fa86:	a904      	add	r1, sp, #16
 800fa88:	4630      	mov	r0, r6
 800fa8a:	f7fc fa6f 	bl	800bf6c <_printf_float>
 800fa8e:	4607      	mov	r7, r0
 800fa90:	1c78      	adds	r0, r7, #1
 800fa92:	d1d6      	bne.n	800fa42 <_vfiprintf_r+0x19a>
 800fa94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fa96:	07d9      	lsls	r1, r3, #31
 800fa98:	d405      	bmi.n	800faa6 <_vfiprintf_r+0x1fe>
 800fa9a:	89ab      	ldrh	r3, [r5, #12]
 800fa9c:	059a      	lsls	r2, r3, #22
 800fa9e:	d402      	bmi.n	800faa6 <_vfiprintf_r+0x1fe>
 800faa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800faa2:	f7fd fb61 	bl	800d168 <__retarget_lock_release_recursive>
 800faa6:	89ab      	ldrh	r3, [r5, #12]
 800faa8:	065b      	lsls	r3, r3, #25
 800faaa:	f53f af1f 	bmi.w	800f8ec <_vfiprintf_r+0x44>
 800faae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fab0:	e71e      	b.n	800f8f0 <_vfiprintf_r+0x48>
 800fab2:	ab03      	add	r3, sp, #12
 800fab4:	9300      	str	r3, [sp, #0]
 800fab6:	462a      	mov	r2, r5
 800fab8:	4b05      	ldr	r3, [pc, #20]	@ (800fad0 <_vfiprintf_r+0x228>)
 800faba:	a904      	add	r1, sp, #16
 800fabc:	4630      	mov	r0, r6
 800fabe:	f7fc fced 	bl	800c49c <_printf_i>
 800fac2:	e7e4      	b.n	800fa8e <_vfiprintf_r+0x1e6>
 800fac4:	080112a0 	.word	0x080112a0
 800fac8:	080112aa 	.word	0x080112aa
 800facc:	0800bf6d 	.word	0x0800bf6d
 800fad0:	0800f883 	.word	0x0800f883
 800fad4:	080112a6 	.word	0x080112a6

0800fad8 <__sflush_r>:
 800fad8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fae0:	0716      	lsls	r6, r2, #28
 800fae2:	4605      	mov	r5, r0
 800fae4:	460c      	mov	r4, r1
 800fae6:	d454      	bmi.n	800fb92 <__sflush_r+0xba>
 800fae8:	684b      	ldr	r3, [r1, #4]
 800faea:	2b00      	cmp	r3, #0
 800faec:	dc02      	bgt.n	800faf4 <__sflush_r+0x1c>
 800faee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	dd48      	ble.n	800fb86 <__sflush_r+0xae>
 800faf4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800faf6:	2e00      	cmp	r6, #0
 800faf8:	d045      	beq.n	800fb86 <__sflush_r+0xae>
 800fafa:	2300      	movs	r3, #0
 800fafc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fb00:	682f      	ldr	r7, [r5, #0]
 800fb02:	6a21      	ldr	r1, [r4, #32]
 800fb04:	602b      	str	r3, [r5, #0]
 800fb06:	d030      	beq.n	800fb6a <__sflush_r+0x92>
 800fb08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fb0a:	89a3      	ldrh	r3, [r4, #12]
 800fb0c:	0759      	lsls	r1, r3, #29
 800fb0e:	d505      	bpl.n	800fb1c <__sflush_r+0x44>
 800fb10:	6863      	ldr	r3, [r4, #4]
 800fb12:	1ad2      	subs	r2, r2, r3
 800fb14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fb16:	b10b      	cbz	r3, 800fb1c <__sflush_r+0x44>
 800fb18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fb1a:	1ad2      	subs	r2, r2, r3
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fb20:	6a21      	ldr	r1, [r4, #32]
 800fb22:	4628      	mov	r0, r5
 800fb24:	47b0      	blx	r6
 800fb26:	1c43      	adds	r3, r0, #1
 800fb28:	89a3      	ldrh	r3, [r4, #12]
 800fb2a:	d106      	bne.n	800fb3a <__sflush_r+0x62>
 800fb2c:	6829      	ldr	r1, [r5, #0]
 800fb2e:	291d      	cmp	r1, #29
 800fb30:	d82b      	bhi.n	800fb8a <__sflush_r+0xb2>
 800fb32:	4a2a      	ldr	r2, [pc, #168]	@ (800fbdc <__sflush_r+0x104>)
 800fb34:	410a      	asrs	r2, r1
 800fb36:	07d6      	lsls	r6, r2, #31
 800fb38:	d427      	bmi.n	800fb8a <__sflush_r+0xb2>
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	6062      	str	r2, [r4, #4]
 800fb3e:	04d9      	lsls	r1, r3, #19
 800fb40:	6922      	ldr	r2, [r4, #16]
 800fb42:	6022      	str	r2, [r4, #0]
 800fb44:	d504      	bpl.n	800fb50 <__sflush_r+0x78>
 800fb46:	1c42      	adds	r2, r0, #1
 800fb48:	d101      	bne.n	800fb4e <__sflush_r+0x76>
 800fb4a:	682b      	ldr	r3, [r5, #0]
 800fb4c:	b903      	cbnz	r3, 800fb50 <__sflush_r+0x78>
 800fb4e:	6560      	str	r0, [r4, #84]	@ 0x54
 800fb50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fb52:	602f      	str	r7, [r5, #0]
 800fb54:	b1b9      	cbz	r1, 800fb86 <__sflush_r+0xae>
 800fb56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fb5a:	4299      	cmp	r1, r3
 800fb5c:	d002      	beq.n	800fb64 <__sflush_r+0x8c>
 800fb5e:	4628      	mov	r0, r5
 800fb60:	f7fe f966 	bl	800de30 <_free_r>
 800fb64:	2300      	movs	r3, #0
 800fb66:	6363      	str	r3, [r4, #52]	@ 0x34
 800fb68:	e00d      	b.n	800fb86 <__sflush_r+0xae>
 800fb6a:	2301      	movs	r3, #1
 800fb6c:	4628      	mov	r0, r5
 800fb6e:	47b0      	blx	r6
 800fb70:	4602      	mov	r2, r0
 800fb72:	1c50      	adds	r0, r2, #1
 800fb74:	d1c9      	bne.n	800fb0a <__sflush_r+0x32>
 800fb76:	682b      	ldr	r3, [r5, #0]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d0c6      	beq.n	800fb0a <__sflush_r+0x32>
 800fb7c:	2b1d      	cmp	r3, #29
 800fb7e:	d001      	beq.n	800fb84 <__sflush_r+0xac>
 800fb80:	2b16      	cmp	r3, #22
 800fb82:	d11e      	bne.n	800fbc2 <__sflush_r+0xea>
 800fb84:	602f      	str	r7, [r5, #0]
 800fb86:	2000      	movs	r0, #0
 800fb88:	e022      	b.n	800fbd0 <__sflush_r+0xf8>
 800fb8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb8e:	b21b      	sxth	r3, r3
 800fb90:	e01b      	b.n	800fbca <__sflush_r+0xf2>
 800fb92:	690f      	ldr	r7, [r1, #16]
 800fb94:	2f00      	cmp	r7, #0
 800fb96:	d0f6      	beq.n	800fb86 <__sflush_r+0xae>
 800fb98:	0793      	lsls	r3, r2, #30
 800fb9a:	680e      	ldr	r6, [r1, #0]
 800fb9c:	bf08      	it	eq
 800fb9e:	694b      	ldreq	r3, [r1, #20]
 800fba0:	600f      	str	r7, [r1, #0]
 800fba2:	bf18      	it	ne
 800fba4:	2300      	movne	r3, #0
 800fba6:	eba6 0807 	sub.w	r8, r6, r7
 800fbaa:	608b      	str	r3, [r1, #8]
 800fbac:	f1b8 0f00 	cmp.w	r8, #0
 800fbb0:	dde9      	ble.n	800fb86 <__sflush_r+0xae>
 800fbb2:	6a21      	ldr	r1, [r4, #32]
 800fbb4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fbb6:	4643      	mov	r3, r8
 800fbb8:	463a      	mov	r2, r7
 800fbba:	4628      	mov	r0, r5
 800fbbc:	47b0      	blx	r6
 800fbbe:	2800      	cmp	r0, #0
 800fbc0:	dc08      	bgt.n	800fbd4 <__sflush_r+0xfc>
 800fbc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fbca:	81a3      	strh	r3, [r4, #12]
 800fbcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbd4:	4407      	add	r7, r0
 800fbd6:	eba8 0800 	sub.w	r8, r8, r0
 800fbda:	e7e7      	b.n	800fbac <__sflush_r+0xd4>
 800fbdc:	dfbffffe 	.word	0xdfbffffe

0800fbe0 <_fflush_r>:
 800fbe0:	b538      	push	{r3, r4, r5, lr}
 800fbe2:	690b      	ldr	r3, [r1, #16]
 800fbe4:	4605      	mov	r5, r0
 800fbe6:	460c      	mov	r4, r1
 800fbe8:	b913      	cbnz	r3, 800fbf0 <_fflush_r+0x10>
 800fbea:	2500      	movs	r5, #0
 800fbec:	4628      	mov	r0, r5
 800fbee:	bd38      	pop	{r3, r4, r5, pc}
 800fbf0:	b118      	cbz	r0, 800fbfa <_fflush_r+0x1a>
 800fbf2:	6a03      	ldr	r3, [r0, #32]
 800fbf4:	b90b      	cbnz	r3, 800fbfa <_fflush_r+0x1a>
 800fbf6:	f7fd f811 	bl	800cc1c <__sinit>
 800fbfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d0f3      	beq.n	800fbea <_fflush_r+0xa>
 800fc02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fc04:	07d0      	lsls	r0, r2, #31
 800fc06:	d404      	bmi.n	800fc12 <_fflush_r+0x32>
 800fc08:	0599      	lsls	r1, r3, #22
 800fc0a:	d402      	bmi.n	800fc12 <_fflush_r+0x32>
 800fc0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fc0e:	f7fd faaa 	bl	800d166 <__retarget_lock_acquire_recursive>
 800fc12:	4628      	mov	r0, r5
 800fc14:	4621      	mov	r1, r4
 800fc16:	f7ff ff5f 	bl	800fad8 <__sflush_r>
 800fc1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fc1c:	07da      	lsls	r2, r3, #31
 800fc1e:	4605      	mov	r5, r0
 800fc20:	d4e4      	bmi.n	800fbec <_fflush_r+0xc>
 800fc22:	89a3      	ldrh	r3, [r4, #12]
 800fc24:	059b      	lsls	r3, r3, #22
 800fc26:	d4e1      	bmi.n	800fbec <_fflush_r+0xc>
 800fc28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fc2a:	f7fd fa9d 	bl	800d168 <__retarget_lock_release_recursive>
 800fc2e:	e7dd      	b.n	800fbec <_fflush_r+0xc>

0800fc30 <__swhatbuf_r>:
 800fc30:	b570      	push	{r4, r5, r6, lr}
 800fc32:	460c      	mov	r4, r1
 800fc34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc38:	2900      	cmp	r1, #0
 800fc3a:	b096      	sub	sp, #88	@ 0x58
 800fc3c:	4615      	mov	r5, r2
 800fc3e:	461e      	mov	r6, r3
 800fc40:	da0d      	bge.n	800fc5e <__swhatbuf_r+0x2e>
 800fc42:	89a3      	ldrh	r3, [r4, #12]
 800fc44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fc48:	f04f 0100 	mov.w	r1, #0
 800fc4c:	bf14      	ite	ne
 800fc4e:	2340      	movne	r3, #64	@ 0x40
 800fc50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fc54:	2000      	movs	r0, #0
 800fc56:	6031      	str	r1, [r6, #0]
 800fc58:	602b      	str	r3, [r5, #0]
 800fc5a:	b016      	add	sp, #88	@ 0x58
 800fc5c:	bd70      	pop	{r4, r5, r6, pc}
 800fc5e:	466a      	mov	r2, sp
 800fc60:	f000 f874 	bl	800fd4c <_fstat_r>
 800fc64:	2800      	cmp	r0, #0
 800fc66:	dbec      	blt.n	800fc42 <__swhatbuf_r+0x12>
 800fc68:	9901      	ldr	r1, [sp, #4]
 800fc6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fc6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fc72:	4259      	negs	r1, r3
 800fc74:	4159      	adcs	r1, r3
 800fc76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc7a:	e7eb      	b.n	800fc54 <__swhatbuf_r+0x24>

0800fc7c <__smakebuf_r>:
 800fc7c:	898b      	ldrh	r3, [r1, #12]
 800fc7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc80:	079d      	lsls	r5, r3, #30
 800fc82:	4606      	mov	r6, r0
 800fc84:	460c      	mov	r4, r1
 800fc86:	d507      	bpl.n	800fc98 <__smakebuf_r+0x1c>
 800fc88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fc8c:	6023      	str	r3, [r4, #0]
 800fc8e:	6123      	str	r3, [r4, #16]
 800fc90:	2301      	movs	r3, #1
 800fc92:	6163      	str	r3, [r4, #20]
 800fc94:	b003      	add	sp, #12
 800fc96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc98:	ab01      	add	r3, sp, #4
 800fc9a:	466a      	mov	r2, sp
 800fc9c:	f7ff ffc8 	bl	800fc30 <__swhatbuf_r>
 800fca0:	9f00      	ldr	r7, [sp, #0]
 800fca2:	4605      	mov	r5, r0
 800fca4:	4639      	mov	r1, r7
 800fca6:	4630      	mov	r0, r6
 800fca8:	f7fe f936 	bl	800df18 <_malloc_r>
 800fcac:	b948      	cbnz	r0, 800fcc2 <__smakebuf_r+0x46>
 800fcae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fcb2:	059a      	lsls	r2, r3, #22
 800fcb4:	d4ee      	bmi.n	800fc94 <__smakebuf_r+0x18>
 800fcb6:	f023 0303 	bic.w	r3, r3, #3
 800fcba:	f043 0302 	orr.w	r3, r3, #2
 800fcbe:	81a3      	strh	r3, [r4, #12]
 800fcc0:	e7e2      	b.n	800fc88 <__smakebuf_r+0xc>
 800fcc2:	89a3      	ldrh	r3, [r4, #12]
 800fcc4:	6020      	str	r0, [r4, #0]
 800fcc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fcca:	81a3      	strh	r3, [r4, #12]
 800fccc:	9b01      	ldr	r3, [sp, #4]
 800fcce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fcd2:	b15b      	cbz	r3, 800fcec <__smakebuf_r+0x70>
 800fcd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fcd8:	4630      	mov	r0, r6
 800fcda:	f000 f849 	bl	800fd70 <_isatty_r>
 800fcde:	b128      	cbz	r0, 800fcec <__smakebuf_r+0x70>
 800fce0:	89a3      	ldrh	r3, [r4, #12]
 800fce2:	f023 0303 	bic.w	r3, r3, #3
 800fce6:	f043 0301 	orr.w	r3, r3, #1
 800fcea:	81a3      	strh	r3, [r4, #12]
 800fcec:	89a3      	ldrh	r3, [r4, #12]
 800fcee:	431d      	orrs	r5, r3
 800fcf0:	81a5      	strh	r5, [r4, #12]
 800fcf2:	e7cf      	b.n	800fc94 <__smakebuf_r+0x18>

0800fcf4 <memmove>:
 800fcf4:	4288      	cmp	r0, r1
 800fcf6:	b510      	push	{r4, lr}
 800fcf8:	eb01 0402 	add.w	r4, r1, r2
 800fcfc:	d902      	bls.n	800fd04 <memmove+0x10>
 800fcfe:	4284      	cmp	r4, r0
 800fd00:	4623      	mov	r3, r4
 800fd02:	d807      	bhi.n	800fd14 <memmove+0x20>
 800fd04:	1e43      	subs	r3, r0, #1
 800fd06:	42a1      	cmp	r1, r4
 800fd08:	d008      	beq.n	800fd1c <memmove+0x28>
 800fd0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fd12:	e7f8      	b.n	800fd06 <memmove+0x12>
 800fd14:	4402      	add	r2, r0
 800fd16:	4601      	mov	r1, r0
 800fd18:	428a      	cmp	r2, r1
 800fd1a:	d100      	bne.n	800fd1e <memmove+0x2a>
 800fd1c:	bd10      	pop	{r4, pc}
 800fd1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fd22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fd26:	e7f7      	b.n	800fd18 <memmove+0x24>

0800fd28 <strncmp>:
 800fd28:	b510      	push	{r4, lr}
 800fd2a:	b16a      	cbz	r2, 800fd48 <strncmp+0x20>
 800fd2c:	3901      	subs	r1, #1
 800fd2e:	1884      	adds	r4, r0, r2
 800fd30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd34:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fd38:	429a      	cmp	r2, r3
 800fd3a:	d103      	bne.n	800fd44 <strncmp+0x1c>
 800fd3c:	42a0      	cmp	r0, r4
 800fd3e:	d001      	beq.n	800fd44 <strncmp+0x1c>
 800fd40:	2a00      	cmp	r2, #0
 800fd42:	d1f5      	bne.n	800fd30 <strncmp+0x8>
 800fd44:	1ad0      	subs	r0, r2, r3
 800fd46:	bd10      	pop	{r4, pc}
 800fd48:	4610      	mov	r0, r2
 800fd4a:	e7fc      	b.n	800fd46 <strncmp+0x1e>

0800fd4c <_fstat_r>:
 800fd4c:	b538      	push	{r3, r4, r5, lr}
 800fd4e:	4d07      	ldr	r5, [pc, #28]	@ (800fd6c <_fstat_r+0x20>)
 800fd50:	2300      	movs	r3, #0
 800fd52:	4604      	mov	r4, r0
 800fd54:	4608      	mov	r0, r1
 800fd56:	4611      	mov	r1, r2
 800fd58:	602b      	str	r3, [r5, #0]
 800fd5a:	f7f2 f907 	bl	8001f6c <_fstat>
 800fd5e:	1c43      	adds	r3, r0, #1
 800fd60:	d102      	bne.n	800fd68 <_fstat_r+0x1c>
 800fd62:	682b      	ldr	r3, [r5, #0]
 800fd64:	b103      	cbz	r3, 800fd68 <_fstat_r+0x1c>
 800fd66:	6023      	str	r3, [r4, #0]
 800fd68:	bd38      	pop	{r3, r4, r5, pc}
 800fd6a:	bf00      	nop
 800fd6c:	20005ffc 	.word	0x20005ffc

0800fd70 <_isatty_r>:
 800fd70:	b538      	push	{r3, r4, r5, lr}
 800fd72:	4d06      	ldr	r5, [pc, #24]	@ (800fd8c <_isatty_r+0x1c>)
 800fd74:	2300      	movs	r3, #0
 800fd76:	4604      	mov	r4, r0
 800fd78:	4608      	mov	r0, r1
 800fd7a:	602b      	str	r3, [r5, #0]
 800fd7c:	f7f2 f906 	bl	8001f8c <_isatty>
 800fd80:	1c43      	adds	r3, r0, #1
 800fd82:	d102      	bne.n	800fd8a <_isatty_r+0x1a>
 800fd84:	682b      	ldr	r3, [r5, #0]
 800fd86:	b103      	cbz	r3, 800fd8a <_isatty_r+0x1a>
 800fd88:	6023      	str	r3, [r4, #0]
 800fd8a:	bd38      	pop	{r3, r4, r5, pc}
 800fd8c:	20005ffc 	.word	0x20005ffc

0800fd90 <_sbrk_r>:
 800fd90:	b538      	push	{r3, r4, r5, lr}
 800fd92:	4d06      	ldr	r5, [pc, #24]	@ (800fdac <_sbrk_r+0x1c>)
 800fd94:	2300      	movs	r3, #0
 800fd96:	4604      	mov	r4, r0
 800fd98:	4608      	mov	r0, r1
 800fd9a:	602b      	str	r3, [r5, #0]
 800fd9c:	f7f2 f90e 	bl	8001fbc <_sbrk>
 800fda0:	1c43      	adds	r3, r0, #1
 800fda2:	d102      	bne.n	800fdaa <_sbrk_r+0x1a>
 800fda4:	682b      	ldr	r3, [r5, #0]
 800fda6:	b103      	cbz	r3, 800fdaa <_sbrk_r+0x1a>
 800fda8:	6023      	str	r3, [r4, #0]
 800fdaa:	bd38      	pop	{r3, r4, r5, pc}
 800fdac:	20005ffc 	.word	0x20005ffc

0800fdb0 <nan>:
 800fdb0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fdb8 <nan+0x8>
 800fdb4:	4770      	bx	lr
 800fdb6:	bf00      	nop
 800fdb8:	00000000 	.word	0x00000000
 800fdbc:	7ff80000 	.word	0x7ff80000

0800fdc0 <__assert_func>:
 800fdc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fdc2:	4614      	mov	r4, r2
 800fdc4:	461a      	mov	r2, r3
 800fdc6:	4b09      	ldr	r3, [pc, #36]	@ (800fdec <__assert_func+0x2c>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	4605      	mov	r5, r0
 800fdcc:	68d8      	ldr	r0, [r3, #12]
 800fdce:	b954      	cbnz	r4, 800fde6 <__assert_func+0x26>
 800fdd0:	4b07      	ldr	r3, [pc, #28]	@ (800fdf0 <__assert_func+0x30>)
 800fdd2:	461c      	mov	r4, r3
 800fdd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fdd8:	9100      	str	r1, [sp, #0]
 800fdda:	462b      	mov	r3, r5
 800fddc:	4905      	ldr	r1, [pc, #20]	@ (800fdf4 <__assert_func+0x34>)
 800fdde:	f000 fba7 	bl	8010530 <fiprintf>
 800fde2:	f000 fbb7 	bl	8010554 <abort>
 800fde6:	4b04      	ldr	r3, [pc, #16]	@ (800fdf8 <__assert_func+0x38>)
 800fde8:	e7f4      	b.n	800fdd4 <__assert_func+0x14>
 800fdea:	bf00      	nop
 800fdec:	20000024 	.word	0x20000024
 800fdf0:	080112f4 	.word	0x080112f4
 800fdf4:	080112c6 	.word	0x080112c6
 800fdf8:	080112b9 	.word	0x080112b9

0800fdfc <_calloc_r>:
 800fdfc:	b570      	push	{r4, r5, r6, lr}
 800fdfe:	fba1 5402 	umull	r5, r4, r1, r2
 800fe02:	b93c      	cbnz	r4, 800fe14 <_calloc_r+0x18>
 800fe04:	4629      	mov	r1, r5
 800fe06:	f7fe f887 	bl	800df18 <_malloc_r>
 800fe0a:	4606      	mov	r6, r0
 800fe0c:	b928      	cbnz	r0, 800fe1a <_calloc_r+0x1e>
 800fe0e:	2600      	movs	r6, #0
 800fe10:	4630      	mov	r0, r6
 800fe12:	bd70      	pop	{r4, r5, r6, pc}
 800fe14:	220c      	movs	r2, #12
 800fe16:	6002      	str	r2, [r0, #0]
 800fe18:	e7f9      	b.n	800fe0e <_calloc_r+0x12>
 800fe1a:	462a      	mov	r2, r5
 800fe1c:	4621      	mov	r1, r4
 800fe1e:	f7fd f8cf 	bl	800cfc0 <memset>
 800fe22:	e7f5      	b.n	800fe10 <_calloc_r+0x14>

0800fe24 <rshift>:
 800fe24:	6903      	ldr	r3, [r0, #16]
 800fe26:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fe2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe2e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fe32:	f100 0414 	add.w	r4, r0, #20
 800fe36:	dd45      	ble.n	800fec4 <rshift+0xa0>
 800fe38:	f011 011f 	ands.w	r1, r1, #31
 800fe3c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fe40:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fe44:	d10c      	bne.n	800fe60 <rshift+0x3c>
 800fe46:	f100 0710 	add.w	r7, r0, #16
 800fe4a:	4629      	mov	r1, r5
 800fe4c:	42b1      	cmp	r1, r6
 800fe4e:	d334      	bcc.n	800feba <rshift+0x96>
 800fe50:	1a9b      	subs	r3, r3, r2
 800fe52:	009b      	lsls	r3, r3, #2
 800fe54:	1eea      	subs	r2, r5, #3
 800fe56:	4296      	cmp	r6, r2
 800fe58:	bf38      	it	cc
 800fe5a:	2300      	movcc	r3, #0
 800fe5c:	4423      	add	r3, r4
 800fe5e:	e015      	b.n	800fe8c <rshift+0x68>
 800fe60:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fe64:	f1c1 0820 	rsb	r8, r1, #32
 800fe68:	40cf      	lsrs	r7, r1
 800fe6a:	f105 0e04 	add.w	lr, r5, #4
 800fe6e:	46a1      	mov	r9, r4
 800fe70:	4576      	cmp	r6, lr
 800fe72:	46f4      	mov	ip, lr
 800fe74:	d815      	bhi.n	800fea2 <rshift+0x7e>
 800fe76:	1a9a      	subs	r2, r3, r2
 800fe78:	0092      	lsls	r2, r2, #2
 800fe7a:	3a04      	subs	r2, #4
 800fe7c:	3501      	adds	r5, #1
 800fe7e:	42ae      	cmp	r6, r5
 800fe80:	bf38      	it	cc
 800fe82:	2200      	movcc	r2, #0
 800fe84:	18a3      	adds	r3, r4, r2
 800fe86:	50a7      	str	r7, [r4, r2]
 800fe88:	b107      	cbz	r7, 800fe8c <rshift+0x68>
 800fe8a:	3304      	adds	r3, #4
 800fe8c:	1b1a      	subs	r2, r3, r4
 800fe8e:	42a3      	cmp	r3, r4
 800fe90:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fe94:	bf08      	it	eq
 800fe96:	2300      	moveq	r3, #0
 800fe98:	6102      	str	r2, [r0, #16]
 800fe9a:	bf08      	it	eq
 800fe9c:	6143      	streq	r3, [r0, #20]
 800fe9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fea2:	f8dc c000 	ldr.w	ip, [ip]
 800fea6:	fa0c fc08 	lsl.w	ip, ip, r8
 800feaa:	ea4c 0707 	orr.w	r7, ip, r7
 800feae:	f849 7b04 	str.w	r7, [r9], #4
 800feb2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800feb6:	40cf      	lsrs	r7, r1
 800feb8:	e7da      	b.n	800fe70 <rshift+0x4c>
 800feba:	f851 cb04 	ldr.w	ip, [r1], #4
 800febe:	f847 cf04 	str.w	ip, [r7, #4]!
 800fec2:	e7c3      	b.n	800fe4c <rshift+0x28>
 800fec4:	4623      	mov	r3, r4
 800fec6:	e7e1      	b.n	800fe8c <rshift+0x68>

0800fec8 <__hexdig_fun>:
 800fec8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800fecc:	2b09      	cmp	r3, #9
 800fece:	d802      	bhi.n	800fed6 <__hexdig_fun+0xe>
 800fed0:	3820      	subs	r0, #32
 800fed2:	b2c0      	uxtb	r0, r0
 800fed4:	4770      	bx	lr
 800fed6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800feda:	2b05      	cmp	r3, #5
 800fedc:	d801      	bhi.n	800fee2 <__hexdig_fun+0x1a>
 800fede:	3847      	subs	r0, #71	@ 0x47
 800fee0:	e7f7      	b.n	800fed2 <__hexdig_fun+0xa>
 800fee2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800fee6:	2b05      	cmp	r3, #5
 800fee8:	d801      	bhi.n	800feee <__hexdig_fun+0x26>
 800feea:	3827      	subs	r0, #39	@ 0x27
 800feec:	e7f1      	b.n	800fed2 <__hexdig_fun+0xa>
 800feee:	2000      	movs	r0, #0
 800fef0:	4770      	bx	lr
	...

0800fef4 <__gethex>:
 800fef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fef8:	b085      	sub	sp, #20
 800fefa:	468a      	mov	sl, r1
 800fefc:	9302      	str	r3, [sp, #8]
 800fefe:	680b      	ldr	r3, [r1, #0]
 800ff00:	9001      	str	r0, [sp, #4]
 800ff02:	4690      	mov	r8, r2
 800ff04:	1c9c      	adds	r4, r3, #2
 800ff06:	46a1      	mov	r9, r4
 800ff08:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ff0c:	2830      	cmp	r0, #48	@ 0x30
 800ff0e:	d0fa      	beq.n	800ff06 <__gethex+0x12>
 800ff10:	eba9 0303 	sub.w	r3, r9, r3
 800ff14:	f1a3 0b02 	sub.w	fp, r3, #2
 800ff18:	f7ff ffd6 	bl	800fec8 <__hexdig_fun>
 800ff1c:	4605      	mov	r5, r0
 800ff1e:	2800      	cmp	r0, #0
 800ff20:	d168      	bne.n	800fff4 <__gethex+0x100>
 800ff22:	49a0      	ldr	r1, [pc, #640]	@ (80101a4 <__gethex+0x2b0>)
 800ff24:	2201      	movs	r2, #1
 800ff26:	4648      	mov	r0, r9
 800ff28:	f7ff fefe 	bl	800fd28 <strncmp>
 800ff2c:	4607      	mov	r7, r0
 800ff2e:	2800      	cmp	r0, #0
 800ff30:	d167      	bne.n	8010002 <__gethex+0x10e>
 800ff32:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ff36:	4626      	mov	r6, r4
 800ff38:	f7ff ffc6 	bl	800fec8 <__hexdig_fun>
 800ff3c:	2800      	cmp	r0, #0
 800ff3e:	d062      	beq.n	8010006 <__gethex+0x112>
 800ff40:	4623      	mov	r3, r4
 800ff42:	7818      	ldrb	r0, [r3, #0]
 800ff44:	2830      	cmp	r0, #48	@ 0x30
 800ff46:	4699      	mov	r9, r3
 800ff48:	f103 0301 	add.w	r3, r3, #1
 800ff4c:	d0f9      	beq.n	800ff42 <__gethex+0x4e>
 800ff4e:	f7ff ffbb 	bl	800fec8 <__hexdig_fun>
 800ff52:	fab0 f580 	clz	r5, r0
 800ff56:	096d      	lsrs	r5, r5, #5
 800ff58:	f04f 0b01 	mov.w	fp, #1
 800ff5c:	464a      	mov	r2, r9
 800ff5e:	4616      	mov	r6, r2
 800ff60:	3201      	adds	r2, #1
 800ff62:	7830      	ldrb	r0, [r6, #0]
 800ff64:	f7ff ffb0 	bl	800fec8 <__hexdig_fun>
 800ff68:	2800      	cmp	r0, #0
 800ff6a:	d1f8      	bne.n	800ff5e <__gethex+0x6a>
 800ff6c:	498d      	ldr	r1, [pc, #564]	@ (80101a4 <__gethex+0x2b0>)
 800ff6e:	2201      	movs	r2, #1
 800ff70:	4630      	mov	r0, r6
 800ff72:	f7ff fed9 	bl	800fd28 <strncmp>
 800ff76:	2800      	cmp	r0, #0
 800ff78:	d13f      	bne.n	800fffa <__gethex+0x106>
 800ff7a:	b944      	cbnz	r4, 800ff8e <__gethex+0x9a>
 800ff7c:	1c74      	adds	r4, r6, #1
 800ff7e:	4622      	mov	r2, r4
 800ff80:	4616      	mov	r6, r2
 800ff82:	3201      	adds	r2, #1
 800ff84:	7830      	ldrb	r0, [r6, #0]
 800ff86:	f7ff ff9f 	bl	800fec8 <__hexdig_fun>
 800ff8a:	2800      	cmp	r0, #0
 800ff8c:	d1f8      	bne.n	800ff80 <__gethex+0x8c>
 800ff8e:	1ba4      	subs	r4, r4, r6
 800ff90:	00a7      	lsls	r7, r4, #2
 800ff92:	7833      	ldrb	r3, [r6, #0]
 800ff94:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ff98:	2b50      	cmp	r3, #80	@ 0x50
 800ff9a:	d13e      	bne.n	801001a <__gethex+0x126>
 800ff9c:	7873      	ldrb	r3, [r6, #1]
 800ff9e:	2b2b      	cmp	r3, #43	@ 0x2b
 800ffa0:	d033      	beq.n	801000a <__gethex+0x116>
 800ffa2:	2b2d      	cmp	r3, #45	@ 0x2d
 800ffa4:	d034      	beq.n	8010010 <__gethex+0x11c>
 800ffa6:	1c71      	adds	r1, r6, #1
 800ffa8:	2400      	movs	r4, #0
 800ffaa:	7808      	ldrb	r0, [r1, #0]
 800ffac:	f7ff ff8c 	bl	800fec8 <__hexdig_fun>
 800ffb0:	1e43      	subs	r3, r0, #1
 800ffb2:	b2db      	uxtb	r3, r3
 800ffb4:	2b18      	cmp	r3, #24
 800ffb6:	d830      	bhi.n	801001a <__gethex+0x126>
 800ffb8:	f1a0 0210 	sub.w	r2, r0, #16
 800ffbc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ffc0:	f7ff ff82 	bl	800fec8 <__hexdig_fun>
 800ffc4:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800ffc8:	fa5f fc8c 	uxtb.w	ip, ip
 800ffcc:	f1bc 0f18 	cmp.w	ip, #24
 800ffd0:	f04f 030a 	mov.w	r3, #10
 800ffd4:	d91e      	bls.n	8010014 <__gethex+0x120>
 800ffd6:	b104      	cbz	r4, 800ffda <__gethex+0xe6>
 800ffd8:	4252      	negs	r2, r2
 800ffda:	4417      	add	r7, r2
 800ffdc:	f8ca 1000 	str.w	r1, [sl]
 800ffe0:	b1ed      	cbz	r5, 801001e <__gethex+0x12a>
 800ffe2:	f1bb 0f00 	cmp.w	fp, #0
 800ffe6:	bf0c      	ite	eq
 800ffe8:	2506      	moveq	r5, #6
 800ffea:	2500      	movne	r5, #0
 800ffec:	4628      	mov	r0, r5
 800ffee:	b005      	add	sp, #20
 800fff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fff4:	2500      	movs	r5, #0
 800fff6:	462c      	mov	r4, r5
 800fff8:	e7b0      	b.n	800ff5c <__gethex+0x68>
 800fffa:	2c00      	cmp	r4, #0
 800fffc:	d1c7      	bne.n	800ff8e <__gethex+0x9a>
 800fffe:	4627      	mov	r7, r4
 8010000:	e7c7      	b.n	800ff92 <__gethex+0x9e>
 8010002:	464e      	mov	r6, r9
 8010004:	462f      	mov	r7, r5
 8010006:	2501      	movs	r5, #1
 8010008:	e7c3      	b.n	800ff92 <__gethex+0x9e>
 801000a:	2400      	movs	r4, #0
 801000c:	1cb1      	adds	r1, r6, #2
 801000e:	e7cc      	b.n	800ffaa <__gethex+0xb6>
 8010010:	2401      	movs	r4, #1
 8010012:	e7fb      	b.n	801000c <__gethex+0x118>
 8010014:	fb03 0002 	mla	r0, r3, r2, r0
 8010018:	e7ce      	b.n	800ffb8 <__gethex+0xc4>
 801001a:	4631      	mov	r1, r6
 801001c:	e7de      	b.n	800ffdc <__gethex+0xe8>
 801001e:	eba6 0309 	sub.w	r3, r6, r9
 8010022:	3b01      	subs	r3, #1
 8010024:	4629      	mov	r1, r5
 8010026:	2b07      	cmp	r3, #7
 8010028:	dc0a      	bgt.n	8010040 <__gethex+0x14c>
 801002a:	9801      	ldr	r0, [sp, #4]
 801002c:	f7fe f800 	bl	800e030 <_Balloc>
 8010030:	4604      	mov	r4, r0
 8010032:	b940      	cbnz	r0, 8010046 <__gethex+0x152>
 8010034:	4b5c      	ldr	r3, [pc, #368]	@ (80101a8 <__gethex+0x2b4>)
 8010036:	4602      	mov	r2, r0
 8010038:	21e4      	movs	r1, #228	@ 0xe4
 801003a:	485c      	ldr	r0, [pc, #368]	@ (80101ac <__gethex+0x2b8>)
 801003c:	f7ff fec0 	bl	800fdc0 <__assert_func>
 8010040:	3101      	adds	r1, #1
 8010042:	105b      	asrs	r3, r3, #1
 8010044:	e7ef      	b.n	8010026 <__gethex+0x132>
 8010046:	f100 0a14 	add.w	sl, r0, #20
 801004a:	2300      	movs	r3, #0
 801004c:	4655      	mov	r5, sl
 801004e:	469b      	mov	fp, r3
 8010050:	45b1      	cmp	r9, r6
 8010052:	d337      	bcc.n	80100c4 <__gethex+0x1d0>
 8010054:	f845 bb04 	str.w	fp, [r5], #4
 8010058:	eba5 050a 	sub.w	r5, r5, sl
 801005c:	10ad      	asrs	r5, r5, #2
 801005e:	6125      	str	r5, [r4, #16]
 8010060:	4658      	mov	r0, fp
 8010062:	f7fe f8d7 	bl	800e214 <__hi0bits>
 8010066:	016d      	lsls	r5, r5, #5
 8010068:	f8d8 6000 	ldr.w	r6, [r8]
 801006c:	1a2d      	subs	r5, r5, r0
 801006e:	42b5      	cmp	r5, r6
 8010070:	dd54      	ble.n	801011c <__gethex+0x228>
 8010072:	1bad      	subs	r5, r5, r6
 8010074:	4629      	mov	r1, r5
 8010076:	4620      	mov	r0, r4
 8010078:	f7fe fc6b 	bl	800e952 <__any_on>
 801007c:	4681      	mov	r9, r0
 801007e:	b178      	cbz	r0, 80100a0 <__gethex+0x1ac>
 8010080:	1e6b      	subs	r3, r5, #1
 8010082:	1159      	asrs	r1, r3, #5
 8010084:	f003 021f 	and.w	r2, r3, #31
 8010088:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801008c:	f04f 0901 	mov.w	r9, #1
 8010090:	fa09 f202 	lsl.w	r2, r9, r2
 8010094:	420a      	tst	r2, r1
 8010096:	d003      	beq.n	80100a0 <__gethex+0x1ac>
 8010098:	454b      	cmp	r3, r9
 801009a:	dc36      	bgt.n	801010a <__gethex+0x216>
 801009c:	f04f 0902 	mov.w	r9, #2
 80100a0:	4629      	mov	r1, r5
 80100a2:	4620      	mov	r0, r4
 80100a4:	f7ff febe 	bl	800fe24 <rshift>
 80100a8:	442f      	add	r7, r5
 80100aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80100ae:	42bb      	cmp	r3, r7
 80100b0:	da42      	bge.n	8010138 <__gethex+0x244>
 80100b2:	9801      	ldr	r0, [sp, #4]
 80100b4:	4621      	mov	r1, r4
 80100b6:	f7fd fffb 	bl	800e0b0 <_Bfree>
 80100ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80100bc:	2300      	movs	r3, #0
 80100be:	6013      	str	r3, [r2, #0]
 80100c0:	25a3      	movs	r5, #163	@ 0xa3
 80100c2:	e793      	b.n	800ffec <__gethex+0xf8>
 80100c4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80100c8:	2a2e      	cmp	r2, #46	@ 0x2e
 80100ca:	d012      	beq.n	80100f2 <__gethex+0x1fe>
 80100cc:	2b20      	cmp	r3, #32
 80100ce:	d104      	bne.n	80100da <__gethex+0x1e6>
 80100d0:	f845 bb04 	str.w	fp, [r5], #4
 80100d4:	f04f 0b00 	mov.w	fp, #0
 80100d8:	465b      	mov	r3, fp
 80100da:	7830      	ldrb	r0, [r6, #0]
 80100dc:	9303      	str	r3, [sp, #12]
 80100de:	f7ff fef3 	bl	800fec8 <__hexdig_fun>
 80100e2:	9b03      	ldr	r3, [sp, #12]
 80100e4:	f000 000f 	and.w	r0, r0, #15
 80100e8:	4098      	lsls	r0, r3
 80100ea:	ea4b 0b00 	orr.w	fp, fp, r0
 80100ee:	3304      	adds	r3, #4
 80100f0:	e7ae      	b.n	8010050 <__gethex+0x15c>
 80100f2:	45b1      	cmp	r9, r6
 80100f4:	d8ea      	bhi.n	80100cc <__gethex+0x1d8>
 80100f6:	492b      	ldr	r1, [pc, #172]	@ (80101a4 <__gethex+0x2b0>)
 80100f8:	9303      	str	r3, [sp, #12]
 80100fa:	2201      	movs	r2, #1
 80100fc:	4630      	mov	r0, r6
 80100fe:	f7ff fe13 	bl	800fd28 <strncmp>
 8010102:	9b03      	ldr	r3, [sp, #12]
 8010104:	2800      	cmp	r0, #0
 8010106:	d1e1      	bne.n	80100cc <__gethex+0x1d8>
 8010108:	e7a2      	b.n	8010050 <__gethex+0x15c>
 801010a:	1ea9      	subs	r1, r5, #2
 801010c:	4620      	mov	r0, r4
 801010e:	f7fe fc20 	bl	800e952 <__any_on>
 8010112:	2800      	cmp	r0, #0
 8010114:	d0c2      	beq.n	801009c <__gethex+0x1a8>
 8010116:	f04f 0903 	mov.w	r9, #3
 801011a:	e7c1      	b.n	80100a0 <__gethex+0x1ac>
 801011c:	da09      	bge.n	8010132 <__gethex+0x23e>
 801011e:	1b75      	subs	r5, r6, r5
 8010120:	4621      	mov	r1, r4
 8010122:	9801      	ldr	r0, [sp, #4]
 8010124:	462a      	mov	r2, r5
 8010126:	f7fe f9db 	bl	800e4e0 <__lshift>
 801012a:	1b7f      	subs	r7, r7, r5
 801012c:	4604      	mov	r4, r0
 801012e:	f100 0a14 	add.w	sl, r0, #20
 8010132:	f04f 0900 	mov.w	r9, #0
 8010136:	e7b8      	b.n	80100aa <__gethex+0x1b6>
 8010138:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801013c:	42bd      	cmp	r5, r7
 801013e:	dd6f      	ble.n	8010220 <__gethex+0x32c>
 8010140:	1bed      	subs	r5, r5, r7
 8010142:	42ae      	cmp	r6, r5
 8010144:	dc34      	bgt.n	80101b0 <__gethex+0x2bc>
 8010146:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801014a:	2b02      	cmp	r3, #2
 801014c:	d022      	beq.n	8010194 <__gethex+0x2a0>
 801014e:	2b03      	cmp	r3, #3
 8010150:	d024      	beq.n	801019c <__gethex+0x2a8>
 8010152:	2b01      	cmp	r3, #1
 8010154:	d115      	bne.n	8010182 <__gethex+0x28e>
 8010156:	42ae      	cmp	r6, r5
 8010158:	d113      	bne.n	8010182 <__gethex+0x28e>
 801015a:	2e01      	cmp	r6, #1
 801015c:	d10b      	bne.n	8010176 <__gethex+0x282>
 801015e:	9a02      	ldr	r2, [sp, #8]
 8010160:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010164:	6013      	str	r3, [r2, #0]
 8010166:	2301      	movs	r3, #1
 8010168:	6123      	str	r3, [r4, #16]
 801016a:	f8ca 3000 	str.w	r3, [sl]
 801016e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010170:	2562      	movs	r5, #98	@ 0x62
 8010172:	601c      	str	r4, [r3, #0]
 8010174:	e73a      	b.n	800ffec <__gethex+0xf8>
 8010176:	1e71      	subs	r1, r6, #1
 8010178:	4620      	mov	r0, r4
 801017a:	f7fe fbea 	bl	800e952 <__any_on>
 801017e:	2800      	cmp	r0, #0
 8010180:	d1ed      	bne.n	801015e <__gethex+0x26a>
 8010182:	9801      	ldr	r0, [sp, #4]
 8010184:	4621      	mov	r1, r4
 8010186:	f7fd ff93 	bl	800e0b0 <_Bfree>
 801018a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801018c:	2300      	movs	r3, #0
 801018e:	6013      	str	r3, [r2, #0]
 8010190:	2550      	movs	r5, #80	@ 0x50
 8010192:	e72b      	b.n	800ffec <__gethex+0xf8>
 8010194:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010196:	2b00      	cmp	r3, #0
 8010198:	d1f3      	bne.n	8010182 <__gethex+0x28e>
 801019a:	e7e0      	b.n	801015e <__gethex+0x26a>
 801019c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d1dd      	bne.n	801015e <__gethex+0x26a>
 80101a2:	e7ee      	b.n	8010182 <__gethex+0x28e>
 80101a4:	08011248 	.word	0x08011248
 80101a8:	080110e2 	.word	0x080110e2
 80101ac:	080112f5 	.word	0x080112f5
 80101b0:	1e6f      	subs	r7, r5, #1
 80101b2:	f1b9 0f00 	cmp.w	r9, #0
 80101b6:	d130      	bne.n	801021a <__gethex+0x326>
 80101b8:	b127      	cbz	r7, 80101c4 <__gethex+0x2d0>
 80101ba:	4639      	mov	r1, r7
 80101bc:	4620      	mov	r0, r4
 80101be:	f7fe fbc8 	bl	800e952 <__any_on>
 80101c2:	4681      	mov	r9, r0
 80101c4:	117a      	asrs	r2, r7, #5
 80101c6:	2301      	movs	r3, #1
 80101c8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80101cc:	f007 071f 	and.w	r7, r7, #31
 80101d0:	40bb      	lsls	r3, r7
 80101d2:	4213      	tst	r3, r2
 80101d4:	4629      	mov	r1, r5
 80101d6:	4620      	mov	r0, r4
 80101d8:	bf18      	it	ne
 80101da:	f049 0902 	orrne.w	r9, r9, #2
 80101de:	f7ff fe21 	bl	800fe24 <rshift>
 80101e2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80101e6:	1b76      	subs	r6, r6, r5
 80101e8:	2502      	movs	r5, #2
 80101ea:	f1b9 0f00 	cmp.w	r9, #0
 80101ee:	d047      	beq.n	8010280 <__gethex+0x38c>
 80101f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80101f4:	2b02      	cmp	r3, #2
 80101f6:	d015      	beq.n	8010224 <__gethex+0x330>
 80101f8:	2b03      	cmp	r3, #3
 80101fa:	d017      	beq.n	801022c <__gethex+0x338>
 80101fc:	2b01      	cmp	r3, #1
 80101fe:	d109      	bne.n	8010214 <__gethex+0x320>
 8010200:	f019 0f02 	tst.w	r9, #2
 8010204:	d006      	beq.n	8010214 <__gethex+0x320>
 8010206:	f8da 3000 	ldr.w	r3, [sl]
 801020a:	ea49 0903 	orr.w	r9, r9, r3
 801020e:	f019 0f01 	tst.w	r9, #1
 8010212:	d10e      	bne.n	8010232 <__gethex+0x33e>
 8010214:	f045 0510 	orr.w	r5, r5, #16
 8010218:	e032      	b.n	8010280 <__gethex+0x38c>
 801021a:	f04f 0901 	mov.w	r9, #1
 801021e:	e7d1      	b.n	80101c4 <__gethex+0x2d0>
 8010220:	2501      	movs	r5, #1
 8010222:	e7e2      	b.n	80101ea <__gethex+0x2f6>
 8010224:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010226:	f1c3 0301 	rsb	r3, r3, #1
 801022a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801022c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801022e:	2b00      	cmp	r3, #0
 8010230:	d0f0      	beq.n	8010214 <__gethex+0x320>
 8010232:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010236:	f104 0314 	add.w	r3, r4, #20
 801023a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801023e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010242:	f04f 0c00 	mov.w	ip, #0
 8010246:	4618      	mov	r0, r3
 8010248:	f853 2b04 	ldr.w	r2, [r3], #4
 801024c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8010250:	d01b      	beq.n	801028a <__gethex+0x396>
 8010252:	3201      	adds	r2, #1
 8010254:	6002      	str	r2, [r0, #0]
 8010256:	2d02      	cmp	r5, #2
 8010258:	f104 0314 	add.w	r3, r4, #20
 801025c:	d13c      	bne.n	80102d8 <__gethex+0x3e4>
 801025e:	f8d8 2000 	ldr.w	r2, [r8]
 8010262:	3a01      	subs	r2, #1
 8010264:	42b2      	cmp	r2, r6
 8010266:	d109      	bne.n	801027c <__gethex+0x388>
 8010268:	1171      	asrs	r1, r6, #5
 801026a:	2201      	movs	r2, #1
 801026c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010270:	f006 061f 	and.w	r6, r6, #31
 8010274:	fa02 f606 	lsl.w	r6, r2, r6
 8010278:	421e      	tst	r6, r3
 801027a:	d13a      	bne.n	80102f2 <__gethex+0x3fe>
 801027c:	f045 0520 	orr.w	r5, r5, #32
 8010280:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010282:	601c      	str	r4, [r3, #0]
 8010284:	9b02      	ldr	r3, [sp, #8]
 8010286:	601f      	str	r7, [r3, #0]
 8010288:	e6b0      	b.n	800ffec <__gethex+0xf8>
 801028a:	4299      	cmp	r1, r3
 801028c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010290:	d8d9      	bhi.n	8010246 <__gethex+0x352>
 8010292:	68a3      	ldr	r3, [r4, #8]
 8010294:	459b      	cmp	fp, r3
 8010296:	db17      	blt.n	80102c8 <__gethex+0x3d4>
 8010298:	6861      	ldr	r1, [r4, #4]
 801029a:	9801      	ldr	r0, [sp, #4]
 801029c:	3101      	adds	r1, #1
 801029e:	f7fd fec7 	bl	800e030 <_Balloc>
 80102a2:	4681      	mov	r9, r0
 80102a4:	b918      	cbnz	r0, 80102ae <__gethex+0x3ba>
 80102a6:	4b1a      	ldr	r3, [pc, #104]	@ (8010310 <__gethex+0x41c>)
 80102a8:	4602      	mov	r2, r0
 80102aa:	2184      	movs	r1, #132	@ 0x84
 80102ac:	e6c5      	b.n	801003a <__gethex+0x146>
 80102ae:	6922      	ldr	r2, [r4, #16]
 80102b0:	3202      	adds	r2, #2
 80102b2:	f104 010c 	add.w	r1, r4, #12
 80102b6:	0092      	lsls	r2, r2, #2
 80102b8:	300c      	adds	r0, #12
 80102ba:	f7fc ff56 	bl	800d16a <memcpy>
 80102be:	4621      	mov	r1, r4
 80102c0:	9801      	ldr	r0, [sp, #4]
 80102c2:	f7fd fef5 	bl	800e0b0 <_Bfree>
 80102c6:	464c      	mov	r4, r9
 80102c8:	6923      	ldr	r3, [r4, #16]
 80102ca:	1c5a      	adds	r2, r3, #1
 80102cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80102d0:	6122      	str	r2, [r4, #16]
 80102d2:	2201      	movs	r2, #1
 80102d4:	615a      	str	r2, [r3, #20]
 80102d6:	e7be      	b.n	8010256 <__gethex+0x362>
 80102d8:	6922      	ldr	r2, [r4, #16]
 80102da:	455a      	cmp	r2, fp
 80102dc:	dd0b      	ble.n	80102f6 <__gethex+0x402>
 80102de:	2101      	movs	r1, #1
 80102e0:	4620      	mov	r0, r4
 80102e2:	f7ff fd9f 	bl	800fe24 <rshift>
 80102e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80102ea:	3701      	adds	r7, #1
 80102ec:	42bb      	cmp	r3, r7
 80102ee:	f6ff aee0 	blt.w	80100b2 <__gethex+0x1be>
 80102f2:	2501      	movs	r5, #1
 80102f4:	e7c2      	b.n	801027c <__gethex+0x388>
 80102f6:	f016 061f 	ands.w	r6, r6, #31
 80102fa:	d0fa      	beq.n	80102f2 <__gethex+0x3fe>
 80102fc:	4453      	add	r3, sl
 80102fe:	f1c6 0620 	rsb	r6, r6, #32
 8010302:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010306:	f7fd ff85 	bl	800e214 <__hi0bits>
 801030a:	42b0      	cmp	r0, r6
 801030c:	dbe7      	blt.n	80102de <__gethex+0x3ea>
 801030e:	e7f0      	b.n	80102f2 <__gethex+0x3fe>
 8010310:	080110e2 	.word	0x080110e2

08010314 <L_shift>:
 8010314:	f1c2 0208 	rsb	r2, r2, #8
 8010318:	0092      	lsls	r2, r2, #2
 801031a:	b570      	push	{r4, r5, r6, lr}
 801031c:	f1c2 0620 	rsb	r6, r2, #32
 8010320:	6843      	ldr	r3, [r0, #4]
 8010322:	6804      	ldr	r4, [r0, #0]
 8010324:	fa03 f506 	lsl.w	r5, r3, r6
 8010328:	432c      	orrs	r4, r5
 801032a:	40d3      	lsrs	r3, r2
 801032c:	6004      	str	r4, [r0, #0]
 801032e:	f840 3f04 	str.w	r3, [r0, #4]!
 8010332:	4288      	cmp	r0, r1
 8010334:	d3f4      	bcc.n	8010320 <L_shift+0xc>
 8010336:	bd70      	pop	{r4, r5, r6, pc}

08010338 <__match>:
 8010338:	b530      	push	{r4, r5, lr}
 801033a:	6803      	ldr	r3, [r0, #0]
 801033c:	3301      	adds	r3, #1
 801033e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010342:	b914      	cbnz	r4, 801034a <__match+0x12>
 8010344:	6003      	str	r3, [r0, #0]
 8010346:	2001      	movs	r0, #1
 8010348:	bd30      	pop	{r4, r5, pc}
 801034a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801034e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010352:	2d19      	cmp	r5, #25
 8010354:	bf98      	it	ls
 8010356:	3220      	addls	r2, #32
 8010358:	42a2      	cmp	r2, r4
 801035a:	d0f0      	beq.n	801033e <__match+0x6>
 801035c:	2000      	movs	r0, #0
 801035e:	e7f3      	b.n	8010348 <__match+0x10>

08010360 <__hexnan>:
 8010360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010364:	680b      	ldr	r3, [r1, #0]
 8010366:	6801      	ldr	r1, [r0, #0]
 8010368:	115e      	asrs	r6, r3, #5
 801036a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801036e:	f013 031f 	ands.w	r3, r3, #31
 8010372:	b087      	sub	sp, #28
 8010374:	bf18      	it	ne
 8010376:	3604      	addne	r6, #4
 8010378:	2500      	movs	r5, #0
 801037a:	1f37      	subs	r7, r6, #4
 801037c:	4682      	mov	sl, r0
 801037e:	4690      	mov	r8, r2
 8010380:	9301      	str	r3, [sp, #4]
 8010382:	f846 5c04 	str.w	r5, [r6, #-4]
 8010386:	46b9      	mov	r9, r7
 8010388:	463c      	mov	r4, r7
 801038a:	9502      	str	r5, [sp, #8]
 801038c:	46ab      	mov	fp, r5
 801038e:	784a      	ldrb	r2, [r1, #1]
 8010390:	1c4b      	adds	r3, r1, #1
 8010392:	9303      	str	r3, [sp, #12]
 8010394:	b342      	cbz	r2, 80103e8 <__hexnan+0x88>
 8010396:	4610      	mov	r0, r2
 8010398:	9105      	str	r1, [sp, #20]
 801039a:	9204      	str	r2, [sp, #16]
 801039c:	f7ff fd94 	bl	800fec8 <__hexdig_fun>
 80103a0:	2800      	cmp	r0, #0
 80103a2:	d151      	bne.n	8010448 <__hexnan+0xe8>
 80103a4:	9a04      	ldr	r2, [sp, #16]
 80103a6:	9905      	ldr	r1, [sp, #20]
 80103a8:	2a20      	cmp	r2, #32
 80103aa:	d818      	bhi.n	80103de <__hexnan+0x7e>
 80103ac:	9b02      	ldr	r3, [sp, #8]
 80103ae:	459b      	cmp	fp, r3
 80103b0:	dd13      	ble.n	80103da <__hexnan+0x7a>
 80103b2:	454c      	cmp	r4, r9
 80103b4:	d206      	bcs.n	80103c4 <__hexnan+0x64>
 80103b6:	2d07      	cmp	r5, #7
 80103b8:	dc04      	bgt.n	80103c4 <__hexnan+0x64>
 80103ba:	462a      	mov	r2, r5
 80103bc:	4649      	mov	r1, r9
 80103be:	4620      	mov	r0, r4
 80103c0:	f7ff ffa8 	bl	8010314 <L_shift>
 80103c4:	4544      	cmp	r4, r8
 80103c6:	d952      	bls.n	801046e <__hexnan+0x10e>
 80103c8:	2300      	movs	r3, #0
 80103ca:	f1a4 0904 	sub.w	r9, r4, #4
 80103ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80103d2:	f8cd b008 	str.w	fp, [sp, #8]
 80103d6:	464c      	mov	r4, r9
 80103d8:	461d      	mov	r5, r3
 80103da:	9903      	ldr	r1, [sp, #12]
 80103dc:	e7d7      	b.n	801038e <__hexnan+0x2e>
 80103de:	2a29      	cmp	r2, #41	@ 0x29
 80103e0:	d157      	bne.n	8010492 <__hexnan+0x132>
 80103e2:	3102      	adds	r1, #2
 80103e4:	f8ca 1000 	str.w	r1, [sl]
 80103e8:	f1bb 0f00 	cmp.w	fp, #0
 80103ec:	d051      	beq.n	8010492 <__hexnan+0x132>
 80103ee:	454c      	cmp	r4, r9
 80103f0:	d206      	bcs.n	8010400 <__hexnan+0xa0>
 80103f2:	2d07      	cmp	r5, #7
 80103f4:	dc04      	bgt.n	8010400 <__hexnan+0xa0>
 80103f6:	462a      	mov	r2, r5
 80103f8:	4649      	mov	r1, r9
 80103fa:	4620      	mov	r0, r4
 80103fc:	f7ff ff8a 	bl	8010314 <L_shift>
 8010400:	4544      	cmp	r4, r8
 8010402:	d936      	bls.n	8010472 <__hexnan+0x112>
 8010404:	f1a8 0204 	sub.w	r2, r8, #4
 8010408:	4623      	mov	r3, r4
 801040a:	f853 1b04 	ldr.w	r1, [r3], #4
 801040e:	f842 1f04 	str.w	r1, [r2, #4]!
 8010412:	429f      	cmp	r7, r3
 8010414:	d2f9      	bcs.n	801040a <__hexnan+0xaa>
 8010416:	1b3b      	subs	r3, r7, r4
 8010418:	f023 0303 	bic.w	r3, r3, #3
 801041c:	3304      	adds	r3, #4
 801041e:	3401      	adds	r4, #1
 8010420:	3e03      	subs	r6, #3
 8010422:	42b4      	cmp	r4, r6
 8010424:	bf88      	it	hi
 8010426:	2304      	movhi	r3, #4
 8010428:	4443      	add	r3, r8
 801042a:	2200      	movs	r2, #0
 801042c:	f843 2b04 	str.w	r2, [r3], #4
 8010430:	429f      	cmp	r7, r3
 8010432:	d2fb      	bcs.n	801042c <__hexnan+0xcc>
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	b91b      	cbnz	r3, 8010440 <__hexnan+0xe0>
 8010438:	4547      	cmp	r7, r8
 801043a:	d128      	bne.n	801048e <__hexnan+0x12e>
 801043c:	2301      	movs	r3, #1
 801043e:	603b      	str	r3, [r7, #0]
 8010440:	2005      	movs	r0, #5
 8010442:	b007      	add	sp, #28
 8010444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010448:	3501      	adds	r5, #1
 801044a:	2d08      	cmp	r5, #8
 801044c:	f10b 0b01 	add.w	fp, fp, #1
 8010450:	dd06      	ble.n	8010460 <__hexnan+0x100>
 8010452:	4544      	cmp	r4, r8
 8010454:	d9c1      	bls.n	80103da <__hexnan+0x7a>
 8010456:	2300      	movs	r3, #0
 8010458:	f844 3c04 	str.w	r3, [r4, #-4]
 801045c:	2501      	movs	r5, #1
 801045e:	3c04      	subs	r4, #4
 8010460:	6822      	ldr	r2, [r4, #0]
 8010462:	f000 000f 	and.w	r0, r0, #15
 8010466:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801046a:	6020      	str	r0, [r4, #0]
 801046c:	e7b5      	b.n	80103da <__hexnan+0x7a>
 801046e:	2508      	movs	r5, #8
 8010470:	e7b3      	b.n	80103da <__hexnan+0x7a>
 8010472:	9b01      	ldr	r3, [sp, #4]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d0dd      	beq.n	8010434 <__hexnan+0xd4>
 8010478:	f1c3 0320 	rsb	r3, r3, #32
 801047c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010480:	40da      	lsrs	r2, r3
 8010482:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010486:	4013      	ands	r3, r2
 8010488:	f846 3c04 	str.w	r3, [r6, #-4]
 801048c:	e7d2      	b.n	8010434 <__hexnan+0xd4>
 801048e:	3f04      	subs	r7, #4
 8010490:	e7d0      	b.n	8010434 <__hexnan+0xd4>
 8010492:	2004      	movs	r0, #4
 8010494:	e7d5      	b.n	8010442 <__hexnan+0xe2>

08010496 <__ascii_mbtowc>:
 8010496:	b082      	sub	sp, #8
 8010498:	b901      	cbnz	r1, 801049c <__ascii_mbtowc+0x6>
 801049a:	a901      	add	r1, sp, #4
 801049c:	b142      	cbz	r2, 80104b0 <__ascii_mbtowc+0x1a>
 801049e:	b14b      	cbz	r3, 80104b4 <__ascii_mbtowc+0x1e>
 80104a0:	7813      	ldrb	r3, [r2, #0]
 80104a2:	600b      	str	r3, [r1, #0]
 80104a4:	7812      	ldrb	r2, [r2, #0]
 80104a6:	1e10      	subs	r0, r2, #0
 80104a8:	bf18      	it	ne
 80104aa:	2001      	movne	r0, #1
 80104ac:	b002      	add	sp, #8
 80104ae:	4770      	bx	lr
 80104b0:	4610      	mov	r0, r2
 80104b2:	e7fb      	b.n	80104ac <__ascii_mbtowc+0x16>
 80104b4:	f06f 0001 	mvn.w	r0, #1
 80104b8:	e7f8      	b.n	80104ac <__ascii_mbtowc+0x16>

080104ba <_realloc_r>:
 80104ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104be:	4680      	mov	r8, r0
 80104c0:	4615      	mov	r5, r2
 80104c2:	460c      	mov	r4, r1
 80104c4:	b921      	cbnz	r1, 80104d0 <_realloc_r+0x16>
 80104c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104ca:	4611      	mov	r1, r2
 80104cc:	f7fd bd24 	b.w	800df18 <_malloc_r>
 80104d0:	b92a      	cbnz	r2, 80104de <_realloc_r+0x24>
 80104d2:	f7fd fcad 	bl	800de30 <_free_r>
 80104d6:	2400      	movs	r4, #0
 80104d8:	4620      	mov	r0, r4
 80104da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104de:	f000 f840 	bl	8010562 <_malloc_usable_size_r>
 80104e2:	4285      	cmp	r5, r0
 80104e4:	4606      	mov	r6, r0
 80104e6:	d802      	bhi.n	80104ee <_realloc_r+0x34>
 80104e8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80104ec:	d8f4      	bhi.n	80104d8 <_realloc_r+0x1e>
 80104ee:	4629      	mov	r1, r5
 80104f0:	4640      	mov	r0, r8
 80104f2:	f7fd fd11 	bl	800df18 <_malloc_r>
 80104f6:	4607      	mov	r7, r0
 80104f8:	2800      	cmp	r0, #0
 80104fa:	d0ec      	beq.n	80104d6 <_realloc_r+0x1c>
 80104fc:	42b5      	cmp	r5, r6
 80104fe:	462a      	mov	r2, r5
 8010500:	4621      	mov	r1, r4
 8010502:	bf28      	it	cs
 8010504:	4632      	movcs	r2, r6
 8010506:	f7fc fe30 	bl	800d16a <memcpy>
 801050a:	4621      	mov	r1, r4
 801050c:	4640      	mov	r0, r8
 801050e:	f7fd fc8f 	bl	800de30 <_free_r>
 8010512:	463c      	mov	r4, r7
 8010514:	e7e0      	b.n	80104d8 <_realloc_r+0x1e>

08010516 <__ascii_wctomb>:
 8010516:	4603      	mov	r3, r0
 8010518:	4608      	mov	r0, r1
 801051a:	b141      	cbz	r1, 801052e <__ascii_wctomb+0x18>
 801051c:	2aff      	cmp	r2, #255	@ 0xff
 801051e:	d904      	bls.n	801052a <__ascii_wctomb+0x14>
 8010520:	228a      	movs	r2, #138	@ 0x8a
 8010522:	601a      	str	r2, [r3, #0]
 8010524:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010528:	4770      	bx	lr
 801052a:	700a      	strb	r2, [r1, #0]
 801052c:	2001      	movs	r0, #1
 801052e:	4770      	bx	lr

08010530 <fiprintf>:
 8010530:	b40e      	push	{r1, r2, r3}
 8010532:	b503      	push	{r0, r1, lr}
 8010534:	4601      	mov	r1, r0
 8010536:	ab03      	add	r3, sp, #12
 8010538:	4805      	ldr	r0, [pc, #20]	@ (8010550 <fiprintf+0x20>)
 801053a:	f853 2b04 	ldr.w	r2, [r3], #4
 801053e:	6800      	ldr	r0, [r0, #0]
 8010540:	9301      	str	r3, [sp, #4]
 8010542:	f7ff f9b1 	bl	800f8a8 <_vfiprintf_r>
 8010546:	b002      	add	sp, #8
 8010548:	f85d eb04 	ldr.w	lr, [sp], #4
 801054c:	b003      	add	sp, #12
 801054e:	4770      	bx	lr
 8010550:	20000024 	.word	0x20000024

08010554 <abort>:
 8010554:	b508      	push	{r3, lr}
 8010556:	2006      	movs	r0, #6
 8010558:	f000 f834 	bl	80105c4 <raise>
 801055c:	2001      	movs	r0, #1
 801055e:	f7f1 fcb5 	bl	8001ecc <_exit>

08010562 <_malloc_usable_size_r>:
 8010562:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010566:	1f18      	subs	r0, r3, #4
 8010568:	2b00      	cmp	r3, #0
 801056a:	bfbc      	itt	lt
 801056c:	580b      	ldrlt	r3, [r1, r0]
 801056e:	18c0      	addlt	r0, r0, r3
 8010570:	4770      	bx	lr

08010572 <_raise_r>:
 8010572:	291f      	cmp	r1, #31
 8010574:	b538      	push	{r3, r4, r5, lr}
 8010576:	4605      	mov	r5, r0
 8010578:	460c      	mov	r4, r1
 801057a:	d904      	bls.n	8010586 <_raise_r+0x14>
 801057c:	2316      	movs	r3, #22
 801057e:	6003      	str	r3, [r0, #0]
 8010580:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010584:	bd38      	pop	{r3, r4, r5, pc}
 8010586:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010588:	b112      	cbz	r2, 8010590 <_raise_r+0x1e>
 801058a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801058e:	b94b      	cbnz	r3, 80105a4 <_raise_r+0x32>
 8010590:	4628      	mov	r0, r5
 8010592:	f000 f831 	bl	80105f8 <_getpid_r>
 8010596:	4622      	mov	r2, r4
 8010598:	4601      	mov	r1, r0
 801059a:	4628      	mov	r0, r5
 801059c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105a0:	f000 b818 	b.w	80105d4 <_kill_r>
 80105a4:	2b01      	cmp	r3, #1
 80105a6:	d00a      	beq.n	80105be <_raise_r+0x4c>
 80105a8:	1c59      	adds	r1, r3, #1
 80105aa:	d103      	bne.n	80105b4 <_raise_r+0x42>
 80105ac:	2316      	movs	r3, #22
 80105ae:	6003      	str	r3, [r0, #0]
 80105b0:	2001      	movs	r0, #1
 80105b2:	e7e7      	b.n	8010584 <_raise_r+0x12>
 80105b4:	2100      	movs	r1, #0
 80105b6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80105ba:	4620      	mov	r0, r4
 80105bc:	4798      	blx	r3
 80105be:	2000      	movs	r0, #0
 80105c0:	e7e0      	b.n	8010584 <_raise_r+0x12>
	...

080105c4 <raise>:
 80105c4:	4b02      	ldr	r3, [pc, #8]	@ (80105d0 <raise+0xc>)
 80105c6:	4601      	mov	r1, r0
 80105c8:	6818      	ldr	r0, [r3, #0]
 80105ca:	f7ff bfd2 	b.w	8010572 <_raise_r>
 80105ce:	bf00      	nop
 80105d0:	20000024 	.word	0x20000024

080105d4 <_kill_r>:
 80105d4:	b538      	push	{r3, r4, r5, lr}
 80105d6:	4d07      	ldr	r5, [pc, #28]	@ (80105f4 <_kill_r+0x20>)
 80105d8:	2300      	movs	r3, #0
 80105da:	4604      	mov	r4, r0
 80105dc:	4608      	mov	r0, r1
 80105de:	4611      	mov	r1, r2
 80105e0:	602b      	str	r3, [r5, #0]
 80105e2:	f7f1 fc63 	bl	8001eac <_kill>
 80105e6:	1c43      	adds	r3, r0, #1
 80105e8:	d102      	bne.n	80105f0 <_kill_r+0x1c>
 80105ea:	682b      	ldr	r3, [r5, #0]
 80105ec:	b103      	cbz	r3, 80105f0 <_kill_r+0x1c>
 80105ee:	6023      	str	r3, [r4, #0]
 80105f0:	bd38      	pop	{r3, r4, r5, pc}
 80105f2:	bf00      	nop
 80105f4:	20005ffc 	.word	0x20005ffc

080105f8 <_getpid_r>:
 80105f8:	f7f1 bc50 	b.w	8001e9c <_getpid>

080105fc <log10f>:
 80105fc:	b508      	push	{r3, lr}
 80105fe:	ed2d 8b02 	vpush	{d8}
 8010602:	eeb0 8a40 	vmov.f32	s16, s0
 8010606:	f000 f827 	bl	8010658 <__ieee754_log10f>
 801060a:	eeb4 8a48 	vcmp.f32	s16, s16
 801060e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010612:	d60f      	bvs.n	8010634 <log10f+0x38>
 8010614:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801061c:	d80a      	bhi.n	8010634 <log10f+0x38>
 801061e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010626:	d108      	bne.n	801063a <log10f+0x3e>
 8010628:	f7fc fd72 	bl	800d110 <__errno>
 801062c:	2322      	movs	r3, #34	@ 0x22
 801062e:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8010650 <log10f+0x54>
 8010632:	6003      	str	r3, [r0, #0]
 8010634:	ecbd 8b02 	vpop	{d8}
 8010638:	bd08      	pop	{r3, pc}
 801063a:	f7fc fd69 	bl	800d110 <__errno>
 801063e:	ecbd 8b02 	vpop	{d8}
 8010642:	2321      	movs	r3, #33	@ 0x21
 8010644:	6003      	str	r3, [r0, #0]
 8010646:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801064a:	4802      	ldr	r0, [pc, #8]	@ (8010654 <log10f+0x58>)
 801064c:	f7fc bd9c 	b.w	800d188 <nanf>
 8010650:	ff800000 	.word	0xff800000
 8010654:	080112f4 	.word	0x080112f4

08010658 <__ieee754_log10f>:
 8010658:	b508      	push	{r3, lr}
 801065a:	ee10 3a10 	vmov	r3, s0
 801065e:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8010662:	ed2d 8b02 	vpush	{d8}
 8010666:	d108      	bne.n	801067a <__ieee754_log10f+0x22>
 8010668:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80106f0 <__ieee754_log10f+0x98>
 801066c:	eddf 7a21 	vldr	s15, [pc, #132]	@ 80106f4 <__ieee754_log10f+0x9c>
 8010670:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8010674:	ecbd 8b02 	vpop	{d8}
 8010678:	bd08      	pop	{r3, pc}
 801067a:	2b00      	cmp	r3, #0
 801067c:	461a      	mov	r2, r3
 801067e:	da02      	bge.n	8010686 <__ieee754_log10f+0x2e>
 8010680:	ee30 7a40 	vsub.f32	s14, s0, s0
 8010684:	e7f2      	b.n	801066c <__ieee754_log10f+0x14>
 8010686:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801068a:	db02      	blt.n	8010692 <__ieee754_log10f+0x3a>
 801068c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010690:	e7f0      	b.n	8010674 <__ieee754_log10f+0x1c>
 8010692:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010696:	bfbf      	itttt	lt
 8010698:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 80106f8 <__ieee754_log10f+0xa0>
 801069c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80106a0:	f06f 0118 	mvnlt.w	r1, #24
 80106a4:	ee17 2a90 	vmovlt	r2, s15
 80106a8:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80106ac:	bfa8      	it	ge
 80106ae:	2100      	movge	r1, #0
 80106b0:	3b7f      	subs	r3, #127	@ 0x7f
 80106b2:	440b      	add	r3, r1
 80106b4:	0fd9      	lsrs	r1, r3, #31
 80106b6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80106ba:	ee07 3a90 	vmov	s15, r3
 80106be:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80106c2:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 80106c6:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80106ca:	ee00 3a10 	vmov	s0, r3
 80106ce:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80106d2:	f000 f819 	bl	8010708 <__ieee754_logf>
 80106d6:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80106fc <__ieee754_log10f+0xa4>
 80106da:	ee20 0a27 	vmul.f32	s0, s0, s15
 80106de:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8010700 <__ieee754_log10f+0xa8>
 80106e2:	eea8 0a27 	vfma.f32	s0, s16, s15
 80106e6:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8010704 <__ieee754_log10f+0xac>
 80106ea:	eea8 0a27 	vfma.f32	s0, s16, s15
 80106ee:	e7c1      	b.n	8010674 <__ieee754_log10f+0x1c>
 80106f0:	cc000000 	.word	0xcc000000
 80106f4:	00000000 	.word	0x00000000
 80106f8:	4c000000 	.word	0x4c000000
 80106fc:	3ede5bd9 	.word	0x3ede5bd9
 8010700:	355427db 	.word	0x355427db
 8010704:	3e9a2080 	.word	0x3e9a2080

08010708 <__ieee754_logf>:
 8010708:	ee10 3a10 	vmov	r3, s0
 801070c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8010710:	d106      	bne.n	8010720 <__ieee754_logf+0x18>
 8010712:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80108ac <__ieee754_logf+0x1a4>
 8010716:	eddf 7a66 	vldr	s15, [pc, #408]	@ 80108b0 <__ieee754_logf+0x1a8>
 801071a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801071e:	4770      	bx	lr
 8010720:	2b00      	cmp	r3, #0
 8010722:	461a      	mov	r2, r3
 8010724:	da02      	bge.n	801072c <__ieee754_logf+0x24>
 8010726:	ee30 7a40 	vsub.f32	s14, s0, s0
 801072a:	e7f4      	b.n	8010716 <__ieee754_logf+0xe>
 801072c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010730:	db02      	blt.n	8010738 <__ieee754_logf+0x30>
 8010732:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010736:	4770      	bx	lr
 8010738:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801073c:	bfb8      	it	lt
 801073e:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 80108b4 <__ieee754_logf+0x1ac>
 8010742:	485d      	ldr	r0, [pc, #372]	@ (80108b8 <__ieee754_logf+0x1b0>)
 8010744:	bfbe      	ittt	lt
 8010746:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801074a:	f06f 0118 	mvnlt.w	r1, #24
 801074e:	ee17 2a90 	vmovlt	r2, s15
 8010752:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8010756:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801075a:	4410      	add	r0, r2
 801075c:	bfa8      	it	ge
 801075e:	2100      	movge	r1, #0
 8010760:	3b7f      	subs	r3, #127	@ 0x7f
 8010762:	440b      	add	r3, r1
 8010764:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 8010768:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 801076c:	4311      	orrs	r1, r2
 801076e:	ee00 1a10 	vmov	s0, r1
 8010772:	4952      	ldr	r1, [pc, #328]	@ (80108bc <__ieee754_logf+0x1b4>)
 8010774:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8010778:	f102 000f 	add.w	r0, r2, #15
 801077c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010780:	4001      	ands	r1, r0
 8010782:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010786:	bb89      	cbnz	r1, 80107ec <__ieee754_logf+0xe4>
 8010788:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801078c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010790:	d10f      	bne.n	80107b2 <__ieee754_logf+0xaa>
 8010792:	2b00      	cmp	r3, #0
 8010794:	f000 8087 	beq.w	80108a6 <__ieee754_logf+0x19e>
 8010798:	ee07 3a90 	vmov	s15, r3
 801079c:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 80108c0 <__ieee754_logf+0x1b8>
 80107a0:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80108c4 <__ieee754_logf+0x1bc>
 80107a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80107a8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80107ac:	eea7 0a87 	vfma.f32	s0, s15, s14
 80107b0:	4770      	bx	lr
 80107b2:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80108c8 <__ieee754_logf+0x1c0>
 80107b6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80107ba:	eee0 7a66 	vfms.f32	s15, s0, s13
 80107be:	ee20 7a00 	vmul.f32	s14, s0, s0
 80107c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80107c6:	b913      	cbnz	r3, 80107ce <__ieee754_logf+0xc6>
 80107c8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80107cc:	4770      	bx	lr
 80107ce:	ee07 3a90 	vmov	s15, r3
 80107d2:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80108c0 <__ieee754_logf+0x1b8>
 80107d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80107da:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80107de:	ee37 0a40 	vsub.f32	s0, s14, s0
 80107e2:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80108c4 <__ieee754_logf+0x1bc>
 80107e6:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80107ea:	4770      	bx	lr
 80107ec:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80107f0:	ee70 7a27 	vadd.f32	s15, s0, s15
 80107f4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80108cc <__ieee754_logf+0x1c4>
 80107f8:	eddf 4a35 	vldr	s9, [pc, #212]	@ 80108d0 <__ieee754_logf+0x1c8>
 80107fc:	4935      	ldr	r1, [pc, #212]	@ (80108d4 <__ieee754_logf+0x1cc>)
 80107fe:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8010802:	4411      	add	r1, r2
 8010804:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 8010808:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 801080c:	430a      	orrs	r2, r1
 801080e:	2a00      	cmp	r2, #0
 8010810:	ee07 3a90 	vmov	s15, r3
 8010814:	ee26 5a06 	vmul.f32	s10, s12, s12
 8010818:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801081c:	ee25 7a05 	vmul.f32	s14, s10, s10
 8010820:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 80108d8 <__ieee754_logf+0x1d0>
 8010824:	eee7 7a25 	vfma.f32	s15, s14, s11
 8010828:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80108dc <__ieee754_logf+0x1d4>
 801082c:	eee7 5a87 	vfma.f32	s11, s15, s14
 8010830:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 80108e0 <__ieee754_logf+0x1d8>
 8010834:	eee7 7a24 	vfma.f32	s15, s14, s9
 8010838:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 80108e4 <__ieee754_logf+0x1dc>
 801083c:	eee7 4a87 	vfma.f32	s9, s15, s14
 8010840:	eddf 7a29 	vldr	s15, [pc, #164]	@ 80108e8 <__ieee754_logf+0x1e0>
 8010844:	eee4 7a87 	vfma.f32	s15, s9, s14
 8010848:	ee67 7a85 	vmul.f32	s15, s15, s10
 801084c:	eee5 7a87 	vfma.f32	s15, s11, s14
 8010850:	dd1a      	ble.n	8010888 <__ieee754_logf+0x180>
 8010852:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010856:	ee20 7a07 	vmul.f32	s14, s0, s14
 801085a:	ee27 7a00 	vmul.f32	s14, s14, s0
 801085e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010862:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010866:	b913      	cbnz	r3, 801086e <__ieee754_logf+0x166>
 8010868:	ee37 7a67 	vsub.f32	s14, s14, s15
 801086c:	e7ac      	b.n	80107c8 <__ieee754_logf+0xc0>
 801086e:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 80108c0 <__ieee754_logf+0x1b8>
 8010872:	eee6 7a86 	vfma.f32	s15, s13, s12
 8010876:	ee37 7a67 	vsub.f32	s14, s14, s15
 801087a:	ee37 0a40 	vsub.f32	s0, s14, s0
 801087e:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80108c4 <__ieee754_logf+0x1bc>
 8010882:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8010886:	4770      	bx	lr
 8010888:	ee70 7a67 	vsub.f32	s15, s0, s15
 801088c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010890:	b913      	cbnz	r3, 8010898 <__ieee754_logf+0x190>
 8010892:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010896:	4770      	bx	lr
 8010898:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80108c0 <__ieee754_logf+0x1b8>
 801089c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80108a0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80108a4:	e7eb      	b.n	801087e <__ieee754_logf+0x176>
 80108a6:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 80108b0 <__ieee754_logf+0x1a8>
 80108aa:	4770      	bx	lr
 80108ac:	cc000000 	.word	0xcc000000
 80108b0:	00000000 	.word	0x00000000
 80108b4:	4c000000 	.word	0x4c000000
 80108b8:	004afb20 	.word	0x004afb20
 80108bc:	007ffff0 	.word	0x007ffff0
 80108c0:	3717f7d1 	.word	0x3717f7d1
 80108c4:	3f317180 	.word	0x3f317180
 80108c8:	3eaaaaab 	.word	0x3eaaaaab
 80108cc:	3e1cd04f 	.word	0x3e1cd04f
 80108d0:	3e178897 	.word	0x3e178897
 80108d4:	ffcf5c30 	.word	0xffcf5c30
 80108d8:	3e638e29 	.word	0x3e638e29
 80108dc:	3ecccccd 	.word	0x3ecccccd
 80108e0:	3e3a3325 	.word	0x3e3a3325
 80108e4:	3e924925 	.word	0x3e924925
 80108e8:	3f2aaaab 	.word	0x3f2aaaab

080108ec <_init>:
 80108ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108ee:	bf00      	nop
 80108f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108f2:	bc08      	pop	{r3}
 80108f4:	469e      	mov	lr, r3
 80108f6:	4770      	bx	lr

080108f8 <_fini>:
 80108f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108fa:	bf00      	nop
 80108fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108fe:	bc08      	pop	{r3}
 8010900:	469e      	mov	lr, r3
 8010902:	4770      	bx	lr
