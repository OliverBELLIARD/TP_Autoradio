
TP_Autoradio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b85c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  0800b9ec  0800b9ec  0000c9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be5c  0800be5c  0000d074  2**0
                  CONTENTS
  4 .ARM          00000008  0800be5c  0800be5c  0000ce5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be64  0800be64  0000d074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be64  0800be64  0000ce64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800be68  0800be68  0000ce68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800be6c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005a1c  20000074  0800bee0  0000d074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005a90  0800bee0  0000da90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023f19  00000000  00000000  0000d0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052b2  00000000  00000000  00030fbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e50  00000000  00000000  00036270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001784  00000000  00000000  000380c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cb8b  00000000  00000000  00039844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025f5d  00000000  00000000  000663cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001058a9  00000000  00000000  0008c32c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00191bd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008788  00000000  00000000  00191c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0019a3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b9d4 	.word	0x0800b9d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800b9d4 	.word	0x0800b9d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000566:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <MX_DMA_Init+0x48>)
 8000568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800056a:	4a0f      	ldr	r2, [pc, #60]	@ (80005a8 <MX_DMA_Init+0x48>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6493      	str	r3, [r2, #72]	@ 0x48
 8000572:	4b0d      	ldr	r3, [pc, #52]	@ (80005a8 <MX_DMA_Init+0x48>)
 8000574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2105      	movs	r1, #5
 8000582:	2010      	movs	r0, #16
 8000584:	f001 fcda 	bl	8001f3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000588:	2010      	movs	r0, #16
 800058a:	f001 fcf3 	bl	8001f74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2105      	movs	r1, #5
 8000592:	2011      	movs	r0, #17
 8000594:	f001 fcd2 	bl	8001f3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000598:	2011      	movs	r0, #17
 800059a:	f001 fceb 	bl	8001f74 <HAL_NVIC_EnableIRQ>

}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40021000 	.word	0x40021000

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000094 	.word	0x20000094
 80005dc:	20000134 	.word	0x20000134

080005e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <MX_FREERTOS_Init+0x30>)
 80005e8:	1d3c      	adds	r4, r7, #4
 80005ea:	461d      	mov	r5, r3
 80005ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f007 ffb2 	bl	8008566 <osThreadCreate>
 8000602:	4603      	mov	r3, r0
 8000604:	4a03      	ldr	r2, [pc, #12]	@ (8000614 <MX_FREERTOS_Init+0x34>)
 8000606:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000608:	bf00      	nop
 800060a:	3720      	adds	r7, #32
 800060c:	46bd      	mov	sp, r7
 800060e:	bdb0      	pop	{r4, r5, r7, pc}
 8000610:	0800b9f8 	.word	0x0800b9f8
 8000614:	20000090 	.word	0x20000090

08000618 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000620:	2001      	movs	r0, #1
 8000622:	f007 ffec 	bl	80085fe <osDelay>
 8000626:	e7fb      	b.n	8000620 <StartDefaultTask+0x8>

08000628 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	@ 0x28
 800062c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063e:	4b35      	ldr	r3, [pc, #212]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	4a34      	ldr	r2, [pc, #208]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000644:	f043 0304 	orr.w	r3, r3, #4
 8000648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800064a:	4b32      	ldr	r3, [pc, #200]	@ (8000714 <MX_GPIO_Init+0xec>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	f003 0304 	and.w	r3, r3, #4
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000656:	4b2f      	ldr	r3, [pc, #188]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	4a2e      	ldr	r2, [pc, #184]	@ (8000714 <MX_GPIO_Init+0xec>)
 800065c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000662:	4b2c      	ldr	r3, [pc, #176]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b29      	ldr	r3, [pc, #164]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000672:	4a28      	ldr	r2, [pc, #160]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067a:	4b26      	ldr	r3, [pc, #152]	@ (8000714 <MX_GPIO_Init+0xec>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000686:	4b23      	ldr	r3, [pc, #140]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068a:	4a22      	ldr	r2, [pc, #136]	@ (8000714 <MX_GPIO_Init+0xec>)
 800068c:	f043 0302 	orr.w	r3, r3, #2
 8000690:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000692:	4b20      	ldr	r3, [pc, #128]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000696:	f003 0302 	and.w	r3, r3, #2
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VU_nRESET_Pin|LD2_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2121      	movs	r1, #33	@ 0x21
 80006a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a6:	f002 f803 	bl	80026b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2180      	movs	r1, #128	@ 0x80
 80006ae:	481a      	ldr	r0, [pc, #104]	@ (8000718 <MX_GPIO_Init+0xf0>)
 80006b0:	f001 fffe 	bl	80026b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006ba:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4619      	mov	r1, r3
 80006ca:	4814      	ldr	r0, [pc, #80]	@ (800071c <MX_GPIO_Init+0xf4>)
 80006cc:	f001 fe46 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pins : VU_nRESET_Pin LD2_Pin */
  GPIO_InitStruct.Pin = VU_nRESET_Pin|LD2_Pin;
 80006d0:	2321      	movs	r3, #33	@ 0x21
 80006d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	4619      	mov	r1, r3
 80006e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ea:	f001 fe37 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : VU_nCS_Pin */
  GPIO_InitStruct.Pin = VU_nCS_Pin;
 80006ee:	2380      	movs	r3, #128	@ 0x80
 80006f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2300      	movs	r3, #0
 80006fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VU_nCS_GPIO_Port, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	4804      	ldr	r0, [pc, #16]	@ (8000718 <MX_GPIO_Init+0xf0>)
 8000706:	f001 fe29 	bl	800235c <HAL_GPIO_Init>

}
 800070a:	bf00      	nop
 800070c:	3728      	adds	r7, #40	@ 0x28
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000
 8000718:	48000400 	.word	0x48000400
 800071c:	48000800 	.word	0x48000800

08000720 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000724:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	@ (8000798 <MX_I2C2_Init+0x78>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 800072a:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <MX_I2C2_Init+0x74>)
 800072c:	4a1b      	ldr	r2, [pc, #108]	@ (800079c <MX_I2C2_Init+0x7c>)
 800072e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000738:	2201      	movs	r2, #1
 800073a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <MX_I2C2_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000742:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <MX_I2C2_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074e:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800075a:	480e      	ldr	r0, [pc, #56]	@ (8000794 <MX_I2C2_Init+0x74>)
 800075c:	f001 ffda 	bl	8002714 <HAL_I2C_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000766:	f000 fa6b 	bl	8000c40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800076a:	2100      	movs	r1, #0
 800076c:	4809      	ldr	r0, [pc, #36]	@ (8000794 <MX_I2C2_Init+0x74>)
 800076e:	f002 fbf5 	bl	8002f5c <HAL_I2CEx_ConfigAnalogFilter>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000778:	f000 fa62 	bl	8000c40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800077c:	2100      	movs	r1, #0
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000780:	f002 fc37 	bl	8002ff2 <HAL_I2CEx_ConfigDigitalFilter>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800078a:	f000 fa59 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000334 	.word	0x20000334
 8000798:	40005800 	.word	0x40005800
 800079c:	10d19ce4 	.word	0x10d19ce4

080007a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b0ac      	sub	sp, #176	@ 0xb0
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	2288      	movs	r2, #136	@ 0x88
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f00a f977 	bl	800aab4 <memset>
  if(i2cHandle->Instance==I2C2)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a21      	ldr	r2, [pc, #132]	@ (8000850 <HAL_I2C_MspInit+0xb0>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d13b      	bne.n	8000848 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80007d0:	2380      	movs	r3, #128	@ 0x80
 80007d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4618      	mov	r0, r3
 80007de:	f003 faeb 	bl	8003db8 <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80007e8:	f000 fa2a 	bl	8000c40 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ec:	4b19      	ldr	r3, [pc, #100]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 80007ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f0:	4a18      	ldr	r2, [pc, #96]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 80007f2:	f043 0302 	orr.w	r3, r3, #2
 80007f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f8:	4b16      	ldr	r3, [pc, #88]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 80007fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fc:	f003 0302 	and.w	r3, r3, #2
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000804:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000808:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800080c:	2312      	movs	r3, #18
 800080e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800081e:	2304      	movs	r3, #4
 8000820:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000828:	4619      	mov	r1, r3
 800082a:	480b      	ldr	r0, [pc, #44]	@ (8000858 <HAL_I2C_MspInit+0xb8>)
 800082c:	f001 fd96 	bl	800235c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000830:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 8000832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000834:	4a07      	ldr	r2, [pc, #28]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 8000836:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800083a:	6593      	str	r3, [r2, #88]	@ 0x58
 800083c:	4b05      	ldr	r3, [pc, #20]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 800083e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000840:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000848:	bf00      	nop
 800084a:	37b0      	adds	r7, #176	@ 0xb0
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40005800 	.word	0x40005800
 8000854:	40021000 	.word	0x40021000
 8000858:	48000400 	.word	0x48000400

0800085c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000860:	f3bf 8f4f 	dsb	sy
}
 8000864:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <__NVIC_SystemReset+0x24>)
 8000868:	68db      	ldr	r3, [r3, #12]
 800086a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800086e:	4904      	ldr	r1, [pc, #16]	@ (8000880 <__NVIC_SystemReset+0x24>)
 8000870:	4b04      	ldr	r3, [pc, #16]	@ (8000884 <__NVIC_SystemReset+0x28>)
 8000872:	4313      	orrs	r3, r2
 8000874:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000876:	f3bf 8f4f 	dsb	sy
}
 800087a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <__NVIC_SystemReset+0x20>
 8000880:	e000ed00 	.word	0xe000ed00
 8000884:	05fa0004 	.word	0x05fa0004

08000888 <__io_putchar>:
 * @brief Transmit a character over UART.
 * @param ch: Character to transmit.
 * @retval int: The transmitted character.
 */
int __io_putchar(int ch)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000890:	1d39      	adds	r1, r7, #4
 8000892:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000896:	2201      	movs	r2, #1
 8000898:	4803      	ldr	r0, [pc, #12]	@ (80008a8 <__io_putchar+0x20>)
 800089a:	f006 faa9 	bl	8006df0 <HAL_UART_Transmit>

	return ch;
 800089e:	687b      	ldr	r3, [r7, #4]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200005e4 	.word	0x200005e4

080008ac <Error_Handler_xTaskCreate>:
/**
 * @brief  Gestion d'erreurs de création de tâche.
 * @param	BaseType_t	Retour de xTaskCreate.
 */
void Error_Handler_xTaskCreate(BaseType_t r)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	/* Vérification si la tâche a été créée avec succès */
	if (pdPASS == r) {
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d010      	beq.n	80008dc <Error_Handler_xTaskCreate+0x30>
		/* Si la tâche est créée avec succès, démarrer le scheduler */
#if (LOGS)
		printf("Tâche crée avec succès\r\n");
#endif
	} else if (errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY == r) {
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80008c0:	d105      	bne.n	80008ce <Error_Handler_xTaskCreate+0x22>
		printf("Erreur: Mémoire insuffisante\r\n");
 80008c2:	4808      	ldr	r0, [pc, #32]	@ (80008e4 <Error_Handler_xTaskCreate+0x38>)
 80008c4:	f009 ffe2 	bl	800a88c <puts>
		Error_Handler();
 80008c8:	f000 f9ba 	bl	8000c40 <Error_Handler>
		/* Cas improbable : code d'erreur non prévu pour xTaskCreate */
		printf("Erreur inconnue lors de la création de la tâche\r\n");
		Error_Handler();  	// Gestion d'erreur générique
		NVIC_SystemReset(); // Réinitialiser le microcontrôleur
	}
}
 80008cc:	e006      	b.n	80008dc <Error_Handler_xTaskCreate+0x30>
		printf("Erreur inconnue lors de la création de la tâche\r\n");
 80008ce:	4806      	ldr	r0, [pc, #24]	@ (80008e8 <Error_Handler_xTaskCreate+0x3c>)
 80008d0:	f009 ffdc 	bl	800a88c <puts>
		Error_Handler();  	// Gestion d'erreur générique
 80008d4:	f000 f9b4 	bl	8000c40 <Error_Handler>
		NVIC_SystemReset(); // Réinitialiser le microcontrôleur
 80008d8:	f7ff ffc0 	bl	800085c <__NVIC_SystemReset>
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	0800ba14 	.word	0x0800ba14
 80008e8:	0800ba34 	.word	0x0800ba34

080008ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a04      	ldr	r2, [pc, #16]	@ (800090c <HAL_UART_RxCpltCallback+0x20>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d101      	bne.n	8000902 <HAL_UART_RxCpltCallback+0x16>
	{
		shell_uart_receive_irq_cb();	// Function giving the semaphore!
 80008fe:	f001 f84b 	bl	8001998 <shell_uart_receive_irq_cb>
	}
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40004400 	.word	0x40004400

08000910 <task_LED>:

//////////////////////////////////////////////////////////////////////
// TASKS
////////////////////////////////////////////////////////////////////

void task_LED (void * pvParameters) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	int duree = (int) pvParameters;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	60fb      	str	r3, [r7, #12]
#if (LOGS)
	printf("Task %s created\r\n", pcTaskGetName(xTaskGetCurrentTaskHandle()));
#endif
	for (;;)
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800091c:	2120      	movs	r1, #32
 800091e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000922:	f001 fedd 	bl	80026e0 <HAL_GPIO_TogglePin>
		vTaskDelay( duree / portTICK_PERIOD_MS );  // Délai de duree en ms
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	4618      	mov	r0, r3
 800092a:	f008 fbc5 	bl	80090b8 <vTaskDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800092e:	bf00      	nop
 8000930:	e7f4      	b.n	800091c <task_LED+0xc>
	...

08000934 <task_shell>:
	}
}

void task_shell(void * unused)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
#if (LOGS)
	printf("Task %s created\r\n", pcTaskGetName(xTaskGetCurrentTaskHandle()));
#endif

	shell_init();	// Shell initialization
 800093c:	f001 f8b8 	bl	8001ab0 <shell_init>

	// Creation of all commands
	shell_add('f', fonction, "Une fonction inutile");
 8000940:	4a0f      	ldr	r2, [pc, #60]	@ (8000980 <task_shell+0x4c>)
 8000942:	4910      	ldr	r1, [pc, #64]	@ (8000984 <task_shell+0x50>)
 8000944:	2066      	movs	r0, #102	@ 0x66
 8000946:	f001 f8eb 	bl	8001b20 <shell_add>
	shell_add('a', addition, "Effectue une somme");
 800094a:	4a0f      	ldr	r2, [pc, #60]	@ (8000988 <task_shell+0x54>)
 800094c:	490f      	ldr	r1, [pc, #60]	@ (800098c <task_shell+0x58>)
 800094e:	2061      	movs	r0, #97	@ 0x61
 8000950:	f001 f8e6 	bl	8001b20 <shell_add>
	shell_add('c', calcul, "Opération entre 2 nombres");
 8000954:	4a0e      	ldr	r2, [pc, #56]	@ (8000990 <task_shell+0x5c>)
 8000956:	490f      	ldr	r1, [pc, #60]	@ (8000994 <task_shell+0x60>)
 8000958:	2063      	movs	r0, #99	@ 0x63
 800095a:	f001 f8e1 	bl	8001b20 <shell_add>
	shell_add('t', GPIOExpander_toggle_LED, "Change l'état des LED avec les id");
 800095e:	4a0e      	ldr	r2, [pc, #56]	@ (8000998 <task_shell+0x64>)
 8000960:	490e      	ldr	r1, [pc, #56]	@ (800099c <task_shell+0x68>)
 8000962:	2074      	movs	r0, #116	@ 0x74
 8000964:	f001 f8dc 	bl	8001b20 <shell_add>
	shell_add('s', GPIOExpander_set_LED, "Allume une LED avec son id");
 8000968:	4a0d      	ldr	r2, [pc, #52]	@ (80009a0 <task_shell+0x6c>)
 800096a:	490e      	ldr	r1, [pc, #56]	@ (80009a4 <task_shell+0x70>)
 800096c:	2073      	movs	r0, #115	@ 0x73
 800096e:	f001 f8d7 	bl	8001b20 <shell_add>

	shell_run();	// boucle infinie
 8000972:	f001 f981 	bl	8001c78 <shell_run>
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	0800ba68 	.word	0x0800ba68
 8000984:	08001771 	.word	0x08001771
 8000988:	0800ba80 	.word	0x0800ba80
 800098c:	080018b5 	.word	0x080018b5
 8000990:	0800ba94 	.word	0x0800ba94
 8000994:	080017b9 	.word	0x080017b9
 8000998:	0800bab0 	.word	0x0800bab0
 800099c:	08001921 	.word	0x08001921
 80009a0:	0800bad4 	.word	0x0800bad4
 80009a4:	08001969 	.word	0x08001969

080009a8 <task_GPIO_expander>:

		vTaskDelay( delay / portTICK_PERIOD_MS );  // Délai de duree en Dms
	}
}

void task_GPIO_expander (void * unused) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
#if (LOGS)
	printf("Task %s created\r\n", pcTaskGetName(xTaskGetCurrentTaskHandle()));
#endif

	// Initialize MCP23S17 GPIO expander
	MCP23S17_Init();
 80009b0:	f000 fe16 	bl	80015e0 <MCP23S17_Init>

	/* VU-Metre test */
	MCP23S17_VUMetre_L(30);
 80009b4:	201e      	movs	r0, #30
 80009b6:	f000 febb 	bl	8001730 <MCP23S17_VUMetre_L>
	MCP23S17_VUMetre_R(50);
 80009ba:	2032      	movs	r0, #50	@ 0x32
 80009bc:	f000 fe98 	bl	80016f0 <MCP23S17_VUMetre_R>
	// Simple test of the array of leds with an animation
	//test_chenillard(100);

	for (;;)
	{
		vTaskDelay(1);  // Délai de duree en ms
 80009c0:	2001      	movs	r0, #1
 80009c2:	f008 fb79 	bl	80090b8 <vTaskDelay>
 80009c6:	e7fb      	b.n	80009c0 <task_GPIO_expander+0x18>

080009c8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	@ 0x28
 80009cc:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80009ce:	f001 f9bd 	bl	8001d4c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80009d2:	f000 f8a7 	bl	8000b24 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80009d6:	f000 f8f6 	bl	8000bc6 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80009da:	f7ff fe25 	bl	8000628 <MX_GPIO_Init>
	MX_DMA_Init();
 80009de:	f7ff fdbf 	bl	8000560 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80009e2:	f000 fcd3 	bl	800138c <MX_USART2_UART_Init>
	MX_I2C2_Init();
 80009e6:	f7ff fe9b 	bl	8000720 <MX_I2C2_Init>
	MX_SPI3_Init();
 80009ea:	f000 fa73 	bl	8000ed4 <MX_SPI3_Init>
	MX_SAI2_Init();
 80009ee:	f000 f92d 	bl	8000c4c <MX_SAI2_Init>
	/* USER CODE BEGIN 2 */
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 80009f2:	4b3d      	ldr	r3, [pc, #244]	@ (8000ae8 <main+0x120>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ae8 <main+0x120>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000a00:	601a      	str	r2, [r3, #0]

	uint8_t pData[16];

	printf("Before I2C\r\n");
 8000a02:	483a      	ldr	r0, [pc, #232]	@ (8000aec <main+0x124>)
 8000a04:	f009 ff42 	bl	800a88c <puts>

	for (int i = 0; i < 16; i++)
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	e00a      	b.n	8000a24 <main+0x5c>
		printf("0x%X\r\n", pData[i]);
 8000a0e:	463a      	mov	r2, r7
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	4413      	add	r3, r2
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	4619      	mov	r1, r3
 8000a18:	4835      	ldr	r0, [pc, #212]	@ (8000af0 <main+0x128>)
 8000a1a:	f009 fecf 	bl	800a7bc <iprintf>
	for (int i = 0; i < 16; i++)
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	3301      	adds	r3, #1
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	2b0f      	cmp	r3, #15
 8000a28:	ddf1      	ble.n	8000a0e <main+0x46>

	HAL_I2C_Mem_Read(&hi2c2, SGTL5000_CODEC, SGTL5000_CHIP_ID, 1, pData, 16, HAL_MAX_DELAY);
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a2e:	9302      	str	r3, [sp, #8]
 8000a30:	2310      	movs	r3, #16
 8000a32:	9301      	str	r3, [sp, #4]
 8000a34:	463b      	mov	r3, r7
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	2301      	movs	r3, #1
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2114      	movs	r1, #20
 8000a3e:	482d      	ldr	r0, [pc, #180]	@ (8000af4 <main+0x12c>)
 8000a40:	f001 ff04 	bl	800284c <HAL_I2C_Mem_Read>

	printf("After I2C\r\n");
 8000a44:	482c      	ldr	r0, [pc, #176]	@ (8000af8 <main+0x130>)
 8000a46:	f009 ff21 	bl	800a88c <puts>

	for (int i = 0; i < 16; i++)
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	e00a      	b.n	8000a66 <main+0x9e>
		printf("0x%X\r\n", pData[i]);
 8000a50:	463a      	mov	r2, r7
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	4413      	add	r3, r2
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4825      	ldr	r0, [pc, #148]	@ (8000af0 <main+0x128>)
 8000a5c:	f009 feae 	bl	800a7bc <iprintf>
	for (int i = 0; i < 16; i++)
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	3301      	adds	r3, #1
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	2b0f      	cmp	r3, #15
 8000a6a:	ddf1      	ble.n	8000a50 <main+0x88>
	//HAL_SAI_Receive_DMA();
	//HAL_SAI_Transmit_DMA();

	// Test printf
	printf("******* TP Autoradio *******\r\n");
 8000a6c:	4823      	ldr	r0, [pc, #140]	@ (8000afc <main+0x134>)
 8000a6e:	f009 ff0d 	bl	800a88c <puts>

	// Create the task, storing the handle.
	Error_Handler_xTaskCreate(
 8000a72:	4b23      	ldr	r3, [pc, #140]	@ (8000b00 <main+0x138>)
 8000a74:	9301      	str	r3, [sp, #4]
 8000a76:	2302      	movs	r3, #2
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000a7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a82:	4920      	ldr	r1, [pc, #128]	@ (8000b04 <main+0x13c>)
 8000a84:	4820      	ldr	r0, [pc, #128]	@ (8000b08 <main+0x140>)
 8000a86:	f008 f9c7 	bl	8008e18 <xTaskCreate>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ff0d 	bl	80008ac <Error_Handler_xTaskCreate>
					(void *) 500, // 500 ms
					TASK_MCP23S17_PRIORITY, // Priority at which the task is created.
					&h_task_GPIOExpander)); // Used to pass out the created task's handle.

	// Turn on LED2 (Green)
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a92:	2120      	movs	r1, #32
 8000a94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a98:	f001 fe22 	bl	80026e0 <HAL_GPIO_TogglePin>

	// Create the task, storing the handle.
	Error_Handler_xTaskCreate(
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b0c <main+0x144>)
 8000a9e:	9301      	str	r3, [sp, #4]
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	23c8      	movs	r3, #200	@ 0xc8
 8000aa6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000aaa:	4919      	ldr	r1, [pc, #100]	@ (8000b10 <main+0x148>)
 8000aac:	4819      	ldr	r0, [pc, #100]	@ (8000b14 <main+0x14c>)
 8000aae:	f008 f9b3 	bl	8008e18 <xTaskCreate>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fef9 	bl	80008ac <Error_Handler_xTaskCreate>
					STACK_DEPTH, // Stack size in words, not bytes.
					(void *) DELAY_LED_TOGGLE, // Parameter passed into the task.
					1,// Priority at which the task is created.
					&h_task_LED)); // Used to pass out the created task's handle.
	// Shell task
	Error_Handler_xTaskCreate(
 8000aba:	4b17      	ldr	r3, [pc, #92]	@ (8000b18 <main+0x150>)
 8000abc:	9301      	str	r3, [sp, #4]
 8000abe:	2303      	movs	r3, #3
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ac8:	4914      	ldr	r1, [pc, #80]	@ (8000b1c <main+0x154>)
 8000aca:	4815      	ldr	r0, [pc, #84]	@ (8000b20 <main+0x158>)
 8000acc:	f008 f9a4 	bl	8008e18 <xTaskCreate>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff feea 	bl	80008ac <Error_Handler_xTaskCreate>
					NULL,
					TASK_SHELL_PRIORITY,
					&h_task_shell));

	// OS Start
	vTaskStartScheduler();
 8000ad8:	f008 fb24 	bl	8009124 <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 8000adc:	f7ff fd80 	bl	80005e0 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8000ae0:	f007 fd3a 	bl	8008558 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <main+0x11c>
 8000ae8:	20000394 	.word	0x20000394
 8000aec:	0800baf0 	.word	0x0800baf0
 8000af0:	0800bafc 	.word	0x0800bafc
 8000af4:	20000334 	.word	0x20000334
 8000af8:	0800bb04 	.word	0x0800bb04
 8000afc:	0800bb10 	.word	0x0800bb10
 8000b00:	20000390 	.word	0x20000390
 8000b04:	0800bb30 	.word	0x0800bb30
 8000b08:	080009a9 	.word	0x080009a9
 8000b0c:	20000388 	.word	0x20000388
 8000b10:	0800bb40 	.word	0x0800bb40
 8000b14:	08000911 	.word	0x08000911
 8000b18:	2000038c 	.word	0x2000038c
 8000b1c:	0800bb48 	.word	0x0800bb48
 8000b20:	08000935 	.word	0x08000935

08000b24 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b096      	sub	sp, #88	@ 0x58
 8000b28:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	2244      	movs	r2, #68	@ 0x44
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f009 ffbe 	bl	800aab4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b38:	463b      	mov	r3, r7
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
 8000b44:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b46:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b4a:	f002 faad 	bl	80030a8 <HAL_PWREx_ControlVoltageScaling>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000b54:	f000 f874 	bl	8000c40 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b60:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b62:	2310      	movs	r3, #16
 8000b64:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b66:	2302      	movs	r3, #2
 8000b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000b72:	230a      	movs	r3, #10
 8000b74:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b76:	2307      	movs	r3, #7
 8000b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4618      	mov	r0, r3
 8000b88:	f002 fae4 	bl	8003154 <HAL_RCC_OscConfig>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <SystemClock_Config+0x72>
	{
		Error_Handler();
 8000b92:	f000 f855 	bl	8000c40 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b96:	230f      	movs	r3, #15
 8000b98:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000baa:	463b      	mov	r3, r7
 8000bac:	2104      	movs	r1, #4
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f002 feac 	bl	800390c <HAL_RCC_ClockConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000bba:	f000 f841 	bl	8000c40 <Error_Handler>
	}
}
 8000bbe:	bf00      	nop
 8000bc0:	3758      	adds	r7, #88	@ 0x58
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b0a2      	sub	sp, #136	@ 0x88
 8000bca:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bcc:	463b      	mov	r3, r7
 8000bce:	2288      	movs	r2, #136	@ 0x88
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f009 ff6e 	bl	800aab4 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000bd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bdc:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000bde:	2300      	movs	r3, #0
 8000be0:	66bb      	str	r3, [r7, #104]	@ 0x68
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000be2:	2302      	movs	r3, #2
 8000be4:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000be6:	2301      	movs	r3, #1
 8000be8:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 8000bea:	230d      	movs	r3, #13
 8000bec:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8000bee:	2311      	movs	r3, #17
 8000bf0:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000bfa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bfe:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c00:	463b      	mov	r3, r7
 8000c02:	4618      	mov	r0, r3
 8000c04:	f003 f8d8 	bl	8003db8 <HAL_RCCEx_PeriphCLKConfig>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <PeriphCommonClock_Config+0x4c>
	{
		Error_Handler();
 8000c0e:	f000 f817 	bl	8000c40 <Error_Handler>
	}
}
 8000c12:	bf00      	nop
 8000c14:	3788      	adds	r7, #136	@ 0x88
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a04      	ldr	r2, [pc, #16]	@ (8000c3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d101      	bne.n	8000c32 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000c2e:	f001 f8ad 	bl	8001d8c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40001000 	.word	0x40001000

08000c40 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c44:	b672      	cpsid	i
}
 8000c46:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <Error_Handler+0x8>

08000c4c <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8000c50:	4b2a      	ldr	r3, [pc, #168]	@ (8000cfc <MX_SAI2_Init+0xb0>)
 8000c52:	4a2b      	ldr	r2, [pc, #172]	@ (8000d00 <MX_SAI2_Init+0xb4>)
 8000c54:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000c56:	4b29      	ldr	r3, [pc, #164]	@ (8000cfc <MX_SAI2_Init+0xb0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000c5c:	4b27      	ldr	r3, [pc, #156]	@ (8000cfc <MX_SAI2_Init+0xb0>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c62:	4b26      	ldr	r3, [pc, #152]	@ (8000cfc <MX_SAI2_Init+0xb0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000c68:	4b24      	ldr	r3, [pc, #144]	@ (8000cfc <MX_SAI2_Init+0xb0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000c6e:	4b23      	ldr	r3, [pc, #140]	@ (8000cfc <MX_SAI2_Init+0xb0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000c74:	4b21      	ldr	r3, [pc, #132]	@ (8000cfc <MX_SAI2_Init+0xb0>)
 8000c76:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000c7a:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cfc <MX_SAI2_Init+0xb0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000c82:	4b1e      	ldr	r3, [pc, #120]	@ (8000cfc <MX_SAI2_Init+0xb0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000c88:	4b1c      	ldr	r3, [pc, #112]	@ (8000cfc <MX_SAI2_Init+0xb0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cfc <MX_SAI2_Init+0xb0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000c94:	2302      	movs	r3, #2
 8000c96:	2200      	movs	r2, #0
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4818      	ldr	r0, [pc, #96]	@ (8000cfc <MX_SAI2_Init+0xb0>)
 8000c9c:	f004 fba6 	bl	80053ec <HAL_SAI_InitProtocol>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
 8000ca6:	f7ff ffcb 	bl	8000c40 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000caa:	4b16      	ldr	r3, [pc, #88]	@ (8000d04 <MX_SAI2_Init+0xb8>)
 8000cac:	4a16      	ldr	r2, [pc, #88]	@ (8000d08 <MX_SAI2_Init+0xbc>)
 8000cae:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000cb0:	4b14      	ldr	r3, [pc, #80]	@ (8000d04 <MX_SAI2_Init+0xb8>)
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000cb6:	4b13      	ldr	r3, [pc, #76]	@ (8000d04 <MX_SAI2_Init+0xb8>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000cbc:	4b11      	ldr	r3, [pc, #68]	@ (8000d04 <MX_SAI2_Init+0xb8>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000cc2:	4b10      	ldr	r3, [pc, #64]	@ (8000d04 <MX_SAI2_Init+0xb8>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d04 <MX_SAI2_Init+0xb8>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000cce:	4b0d      	ldr	r3, [pc, #52]	@ (8000d04 <MX_SAI2_Init+0xb8>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d04 <MX_SAI2_Init+0xb8>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000cda:	4b0a      	ldr	r3, [pc, #40]	@ (8000d04 <MX_SAI2_Init+0xb8>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4807      	ldr	r0, [pc, #28]	@ (8000d04 <MX_SAI2_Init+0xb8>)
 8000ce8:	f004 fb80 	bl	80053ec <HAL_SAI_InitProtocol>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 8000cf2:	f7ff ffa5 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000394 	.word	0x20000394
 8000d00:	40015804 	.word	0x40015804
 8000d04:	20000418 	.word	0x20000418
 8000d08:	40015824 	.word	0x40015824

08000d0c <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	@ 0x28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a64      	ldr	r2, [pc, #400]	@ (8000eac <HAL_SAI_MspInit+0x1a0>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d15e      	bne.n	8000ddc <HAL_SAI_MspInit+0xd0>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8000d1e:	4b64      	ldr	r3, [pc, #400]	@ (8000eb0 <HAL_SAI_MspInit+0x1a4>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d113      	bne.n	8000d4e <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000d26:	4b63      	ldr	r3, [pc, #396]	@ (8000eb4 <HAL_SAI_MspInit+0x1a8>)
 8000d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d2a:	4a62      	ldr	r2, [pc, #392]	@ (8000eb4 <HAL_SAI_MspInit+0x1a8>)
 8000d2c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d30:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d32:	4b60      	ldr	r3, [pc, #384]	@ (8000eb4 <HAL_SAI_MspInit+0x1a8>)
 8000d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2105      	movs	r1, #5
 8000d42:	204b      	movs	r0, #75	@ 0x4b
 8000d44:	f001 f8fa 	bl	8001f3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000d48:	204b      	movs	r0, #75	@ 0x4b
 8000d4a:	f001 f913 	bl	8001f74 <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 8000d4e:	4b58      	ldr	r3, [pc, #352]	@ (8000eb0 <HAL_SAI_MspInit+0x1a4>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	3301      	adds	r3, #1
 8000d54:	4a56      	ldr	r2, [pc, #344]	@ (8000eb0 <HAL_SAI_MspInit+0x1a4>)
 8000d56:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d58:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000d6a:	230d      	movs	r3, #13
 8000d6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	4850      	ldr	r0, [pc, #320]	@ (8000eb8 <HAL_SAI_MspInit+0x1ac>)
 8000d76:	f001 faf1 	bl	800235c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000d7a:	4b50      	ldr	r3, [pc, #320]	@ (8000ebc <HAL_SAI_MspInit+0x1b0>)
 8000d7c:	4a50      	ldr	r2, [pc, #320]	@ (8000ec0 <HAL_SAI_MspInit+0x1b4>)
 8000d7e:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000d80:	4b4e      	ldr	r3, [pc, #312]	@ (8000ebc <HAL_SAI_MspInit+0x1b0>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d86:	4b4d      	ldr	r3, [pc, #308]	@ (8000ebc <HAL_SAI_MspInit+0x1b0>)
 8000d88:	2210      	movs	r2, #16
 8000d8a:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d8c:	4b4b      	ldr	r3, [pc, #300]	@ (8000ebc <HAL_SAI_MspInit+0x1b0>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000d92:	4b4a      	ldr	r3, [pc, #296]	@ (8000ebc <HAL_SAI_MspInit+0x1b0>)
 8000d94:	2280      	movs	r2, #128	@ 0x80
 8000d96:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d98:	4b48      	ldr	r3, [pc, #288]	@ (8000ebc <HAL_SAI_MspInit+0x1b0>)
 8000d9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d9e:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000da0:	4b46      	ldr	r3, [pc, #280]	@ (8000ebc <HAL_SAI_MspInit+0x1b0>)
 8000da2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000da6:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000da8:	4b44      	ldr	r3, [pc, #272]	@ (8000ebc <HAL_SAI_MspInit+0x1b0>)
 8000daa:	2220      	movs	r2, #32
 8000dac:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8000dae:	4b43      	ldr	r3, [pc, #268]	@ (8000ebc <HAL_SAI_MspInit+0x1b0>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000db4:	4841      	ldr	r0, [pc, #260]	@ (8000ebc <HAL_SAI_MspInit+0x1b0>)
 8000db6:	f001 f8eb 	bl	8001f90 <HAL_DMA_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8000dc0:	f7ff ff3e 	bl	8000c40 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a3d      	ldr	r2, [pc, #244]	@ (8000ebc <HAL_SAI_MspInit+0x1b0>)
 8000dc8:	671a      	str	r2, [r3, #112]	@ 0x70
 8000dca:	4a3c      	ldr	r2, [pc, #240]	@ (8000ebc <HAL_SAI_MspInit+0x1b0>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a3a      	ldr	r2, [pc, #232]	@ (8000ebc <HAL_SAI_MspInit+0x1b0>)
 8000dd4:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000dd6:	4a39      	ldr	r2, [pc, #228]	@ (8000ebc <HAL_SAI_MspInit+0x1b0>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a38      	ldr	r2, [pc, #224]	@ (8000ec4 <HAL_SAI_MspInit+0x1b8>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d15e      	bne.n	8000ea4 <HAL_SAI_MspInit+0x198>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8000de6:	4b32      	ldr	r3, [pc, #200]	@ (8000eb0 <HAL_SAI_MspInit+0x1a4>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d113      	bne.n	8000e16 <HAL_SAI_MspInit+0x10a>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000dee:	4b31      	ldr	r3, [pc, #196]	@ (8000eb4 <HAL_SAI_MspInit+0x1a8>)
 8000df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000df2:	4a30      	ldr	r2, [pc, #192]	@ (8000eb4 <HAL_SAI_MspInit+0x1a8>)
 8000df4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000df8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dfa:	4b2e      	ldr	r3, [pc, #184]	@ (8000eb4 <HAL_SAI_MspInit+0x1a8>)
 8000dfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2105      	movs	r1, #5
 8000e0a:	204b      	movs	r0, #75	@ 0x4b
 8000e0c:	f001 f896 	bl	8001f3c <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000e10:	204b      	movs	r0, #75	@ 0x4b
 8000e12:	f001 f8af 	bl	8001f74 <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8000e16:	4b26      	ldr	r3, [pc, #152]	@ (8000eb0 <HAL_SAI_MspInit+0x1a4>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	4a24      	ldr	r2, [pc, #144]	@ (8000eb0 <HAL_SAI_MspInit+0x1a4>)
 8000e1e:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000e32:	230d      	movs	r3, #13
 8000e34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4822      	ldr	r0, [pc, #136]	@ (8000ec8 <HAL_SAI_MspInit+0x1bc>)
 8000e3e:	f001 fa8d 	bl	800235c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 8000e42:	4b22      	ldr	r3, [pc, #136]	@ (8000ecc <HAL_SAI_MspInit+0x1c0>)
 8000e44:	4a22      	ldr	r2, [pc, #136]	@ (8000ed0 <HAL_SAI_MspInit+0x1c4>)
 8000e46:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 8000e48:	4b20      	ldr	r3, [pc, #128]	@ (8000ecc <HAL_SAI_MspInit+0x1c0>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ecc <HAL_SAI_MspInit+0x1c0>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e54:	4b1d      	ldr	r3, [pc, #116]	@ (8000ecc <HAL_SAI_MspInit+0x1c0>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ecc <HAL_SAI_MspInit+0x1c0>)
 8000e5c:	2280      	movs	r2, #128	@ 0x80
 8000e5e:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e60:	4b1a      	ldr	r3, [pc, #104]	@ (8000ecc <HAL_SAI_MspInit+0x1c0>)
 8000e62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e66:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e68:	4b18      	ldr	r3, [pc, #96]	@ (8000ecc <HAL_SAI_MspInit+0x1c0>)
 8000e6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e6e:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8000e70:	4b16      	ldr	r3, [pc, #88]	@ (8000ecc <HAL_SAI_MspInit+0x1c0>)
 8000e72:	2220      	movs	r2, #32
 8000e74:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8000e76:	4b15      	ldr	r3, [pc, #84]	@ (8000ecc <HAL_SAI_MspInit+0x1c0>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8000e7c:	4813      	ldr	r0, [pc, #76]	@ (8000ecc <HAL_SAI_MspInit+0x1c0>)
 8000e7e:	f001 f887 	bl	8001f90 <HAL_DMA_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 8000e88:	f7ff feda 	bl	8000c40 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000ecc <HAL_SAI_MspInit+0x1c0>)
 8000e90:	671a      	str	r2, [r3, #112]	@ 0x70
 8000e92:	4a0e      	ldr	r2, [pc, #56]	@ (8000ecc <HAL_SAI_MspInit+0x1c0>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a0c      	ldr	r2, [pc, #48]	@ (8000ecc <HAL_SAI_MspInit+0x1c0>)
 8000e9c:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000e9e:	4a0b      	ldr	r2, [pc, #44]	@ (8000ecc <HAL_SAI_MspInit+0x1c0>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 8000ea4:	bf00      	nop
 8000ea6:	3728      	adds	r7, #40	@ 0x28
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40015804 	.word	0x40015804
 8000eb0:	2000052c 	.word	0x2000052c
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	48000400 	.word	0x48000400
 8000ebc:	2000049c 	.word	0x2000049c
 8000ec0:	4002006c 	.word	0x4002006c
 8000ec4:	40015824 	.word	0x40015824
 8000ec8:	48000800 	.word	0x48000800
 8000ecc:	200004e4 	.word	0x200004e4
 8000ed0:	40020080 	.word	0x40020080

08000ed4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f48 <MX_SPI3_Init+0x74>)
 8000eda:	4a1c      	ldr	r2, [pc, #112]	@ (8000f4c <MX_SPI3_Init+0x78>)
 8000edc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ede:	4b1a      	ldr	r3, [pc, #104]	@ (8000f48 <MX_SPI3_Init+0x74>)
 8000ee0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ee4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ee6:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <MX_SPI3_Init+0x74>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eec:	4b16      	ldr	r3, [pc, #88]	@ (8000f48 <MX_SPI3_Init+0x74>)
 8000eee:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000ef2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ef4:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <MX_SPI3_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000efa:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <MX_SPI3_Init+0x74>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f00:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <MX_SPI3_Init+0x74>)
 8000f02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f06:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f08:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <MX_SPI3_Init+0x74>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <MX_SPI3_Init+0x74>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f14:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <MX_SPI3_Init+0x74>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <MX_SPI3_Init+0x74>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000f20:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <MX_SPI3_Init+0x74>)
 8000f22:	2207      	movs	r2, #7
 8000f24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f26:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <MX_SPI3_Init+0x74>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <MX_SPI3_Init+0x74>)
 8000f2e:	2208      	movs	r2, #8
 8000f30:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f32:	4805      	ldr	r0, [pc, #20]	@ (8000f48 <MX_SPI3_Init+0x74>)
 8000f34:	f004 ffb7 	bl	8005ea6 <HAL_SPI_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000f3e:	f7ff fe7f 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000530 	.word	0x20000530
 8000f4c:	40003c00 	.word	0x40003c00

08000f50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	@ 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a29      	ldr	r2, [pc, #164]	@ (8001014 <HAL_SPI_MspInit+0xc4>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d14c      	bne.n	800100c <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f72:	4b29      	ldr	r3, [pc, #164]	@ (8001018 <HAL_SPI_MspInit+0xc8>)
 8000f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f76:	4a28      	ldr	r2, [pc, #160]	@ (8001018 <HAL_SPI_MspInit+0xc8>)
 8000f78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f7e:	4b26      	ldr	r3, [pc, #152]	@ (8001018 <HAL_SPI_MspInit+0xc8>)
 8000f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8a:	4b23      	ldr	r3, [pc, #140]	@ (8001018 <HAL_SPI_MspInit+0xc8>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8e:	4a22      	ldr	r2, [pc, #136]	@ (8001018 <HAL_SPI_MspInit+0xc8>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f96:	4b20      	ldr	r3, [pc, #128]	@ (8001018 <HAL_SPI_MspInit+0xc8>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa2:	4b1d      	ldr	r3, [pc, #116]	@ (8001018 <HAL_SPI_MspInit+0xc8>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa6:	4a1c      	ldr	r2, [pc, #112]	@ (8001018 <HAL_SPI_MspInit+0xc8>)
 8000fa8:	f043 0302 	orr.w	r3, r3, #2
 8000fac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fae:	4b1a      	ldr	r3, [pc, #104]	@ (8001018 <HAL_SPI_MspInit+0xc8>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = VU_SCK_Pin|VU_MISO_Pin;
 8000fba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fcc:	2306      	movs	r3, #6
 8000fce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4811      	ldr	r0, [pc, #68]	@ (800101c <HAL_SPI_MspInit+0xcc>)
 8000fd8:	f001 f9c0 	bl	800235c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VU_MOSI_Pin;
 8000fdc:	2320      	movs	r3, #32
 8000fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fec:	2306      	movs	r3, #6
 8000fee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(VU_MOSI_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	480a      	ldr	r0, [pc, #40]	@ (8001020 <HAL_SPI_MspInit+0xd0>)
 8000ff8:	f001 f9b0 	bl	800235c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2105      	movs	r1, #5
 8001000:	2033      	movs	r0, #51	@ 0x33
 8001002:	f000 ff9b 	bl	8001f3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001006:	2033      	movs	r0, #51	@ 0x33
 8001008:	f000 ffb4 	bl	8001f74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800100c:	bf00      	nop
 800100e:	3728      	adds	r7, #40	@ 0x28
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40003c00 	.word	0x40003c00
 8001018:	40021000 	.word	0x40021000
 800101c:	48000800 	.word	0x48000800
 8001020:	48000400 	.word	0x48000400

08001024 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102a:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <HAL_MspInit+0x4c>)
 800102c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800102e:	4a10      	ldr	r2, [pc, #64]	@ (8001070 <HAL_MspInit+0x4c>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6613      	str	r3, [r2, #96]	@ 0x60
 8001036:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <HAL_MspInit+0x4c>)
 8001038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001042:	4b0b      	ldr	r3, [pc, #44]	@ (8001070 <HAL_MspInit+0x4c>)
 8001044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001046:	4a0a      	ldr	r2, [pc, #40]	@ (8001070 <HAL_MspInit+0x4c>)
 8001048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800104c:	6593      	str	r3, [r2, #88]	@ 0x58
 800104e:	4b08      	ldr	r3, [pc, #32]	@ (8001070 <HAL_MspInit+0x4c>)
 8001050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	210f      	movs	r1, #15
 800105e:	f06f 0001 	mvn.w	r0, #1
 8001062:	f000 ff6b 	bl	8001f3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40021000 	.word	0x40021000

08001074 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08e      	sub	sp, #56	@ 0x38
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 800107c:	2300      	movs	r3, #0
 800107e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001082:	4b34      	ldr	r3, [pc, #208]	@ (8001154 <HAL_InitTick+0xe0>)
 8001084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001086:	4a33      	ldr	r2, [pc, #204]	@ (8001154 <HAL_InitTick+0xe0>)
 8001088:	f043 0310 	orr.w	r3, r3, #16
 800108c:	6593      	str	r3, [r2, #88]	@ 0x58
 800108e:	4b31      	ldr	r3, [pc, #196]	@ (8001154 <HAL_InitTick+0xe0>)
 8001090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001092:	f003 0310 	and.w	r3, r3, #16
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800109a:	f107 0210 	add.w	r2, r7, #16
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	4611      	mov	r1, r2
 80010a4:	4618      	mov	r0, r3
 80010a6:	f002 fdf5 	bl	8003c94 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010aa:	6a3b      	ldr	r3, [r7, #32]
 80010ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d103      	bne.n	80010bc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010b4:	f002 fdc2 	bl	8003c3c <HAL_RCC_GetPCLK1Freq>
 80010b8:	6378      	str	r0, [r7, #52]	@ 0x34
 80010ba:	e004      	b.n	80010c6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010bc:	f002 fdbe 	bl	8003c3c <HAL_RCC_GetPCLK1Freq>
 80010c0:	4603      	mov	r3, r0
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010c8:	4a23      	ldr	r2, [pc, #140]	@ (8001158 <HAL_InitTick+0xe4>)
 80010ca:	fba2 2303 	umull	r2, r3, r2, r3
 80010ce:	0c9b      	lsrs	r3, r3, #18
 80010d0:	3b01      	subs	r3, #1
 80010d2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80010d4:	4b21      	ldr	r3, [pc, #132]	@ (800115c <HAL_InitTick+0xe8>)
 80010d6:	4a22      	ldr	r2, [pc, #136]	@ (8001160 <HAL_InitTick+0xec>)
 80010d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80010da:	4b20      	ldr	r3, [pc, #128]	@ (800115c <HAL_InitTick+0xe8>)
 80010dc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010e0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010e2:	4a1e      	ldr	r2, [pc, #120]	@ (800115c <HAL_InitTick+0xe8>)
 80010e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010e6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010e8:	4b1c      	ldr	r3, [pc, #112]	@ (800115c <HAL_InitTick+0xe8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ee:	4b1b      	ldr	r3, [pc, #108]	@ (800115c <HAL_InitTick+0xe8>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f4:	4b19      	ldr	r3, [pc, #100]	@ (800115c <HAL_InitTick+0xe8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80010fa:	4818      	ldr	r0, [pc, #96]	@ (800115c <HAL_InitTick+0xe8>)
 80010fc:	f005 fb64 	bl	80067c8 <HAL_TIM_Base_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001106:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800110a:	2b00      	cmp	r3, #0
 800110c:	d11b      	bne.n	8001146 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800110e:	4813      	ldr	r0, [pc, #76]	@ (800115c <HAL_InitTick+0xe8>)
 8001110:	f005 fbbc 	bl	800688c <HAL_TIM_Base_Start_IT>
 8001114:	4603      	mov	r3, r0
 8001116:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800111a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800111e:	2b00      	cmp	r3, #0
 8001120:	d111      	bne.n	8001146 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001122:	2036      	movs	r0, #54	@ 0x36
 8001124:	f000 ff26 	bl	8001f74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b0f      	cmp	r3, #15
 800112c:	d808      	bhi.n	8001140 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800112e:	2200      	movs	r2, #0
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	2036      	movs	r0, #54	@ 0x36
 8001134:	f000 ff02 	bl	8001f3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001138:	4a0a      	ldr	r2, [pc, #40]	@ (8001164 <HAL_InitTick+0xf0>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	e002      	b.n	8001146 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001146:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800114a:	4618      	mov	r0, r3
 800114c:	3738      	adds	r7, #56	@ 0x38
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40021000 	.word	0x40021000
 8001158:	431bde83 	.word	0x431bde83
 800115c:	20000594 	.word	0x20000594
 8001160:	40001000 	.word	0x40001000
 8001164:	2000000c 	.word	0x2000000c

08001168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <NMI_Handler+0x4>

08001170 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001174:	bf00      	nop
 8001176:	e7fd      	b.n	8001174 <HardFault_Handler+0x4>

08001178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800117c:	bf00      	nop
 800117e:	e7fd      	b.n	800117c <MemManage_Handler+0x4>

08001180 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <BusFault_Handler+0x4>

08001188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <UsageFault_Handler+0x4>

08001190 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 80011a4:	4802      	ldr	r0, [pc, #8]	@ (80011b0 <DMA1_Channel6_IRQHandler+0x10>)
 80011a6:	f001 f82a 	bl	80021fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	2000049c 	.word	0x2000049c

080011b4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 80011b8:	4802      	ldr	r0, [pc, #8]	@ (80011c4 <DMA1_Channel7_IRQHandler+0x10>)
 80011ba:	f001 f820 	bl	80021fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200004e4 	.word	0x200004e4

080011c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011cc:	4802      	ldr	r0, [pc, #8]	@ (80011d8 <USART2_IRQHandler+0x10>)
 80011ce:	f005 fee5 	bl	8006f9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200005e4 	.word	0x200005e4

080011dc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80011e0:	4802      	ldr	r0, [pc, #8]	@ (80011ec <SPI3_IRQHandler+0x10>)
 80011e2:	f005 f879 	bl	80062d8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000530 	.word	0x20000530

080011f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011f4:	4802      	ldr	r0, [pc, #8]	@ (8001200 <TIM6_DAC_IRQHandler+0x10>)
 80011f6:	f005 fbb9 	bl	800696c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000594 	.word	0x20000594

08001204 <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 8001208:	4803      	ldr	r0, [pc, #12]	@ (8001218 <SAI2_IRQHandler+0x14>)
 800120a:	f004 faf9 	bl	8005800 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 800120e:	4803      	ldr	r0, [pc, #12]	@ (800121c <SAI2_IRQHandler+0x18>)
 8001210:	f004 faf6 	bl	8005800 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000394 	.word	0x20000394
 800121c:	20000418 	.word	0x20000418

08001220 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	e00a      	b.n	8001248 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001232:	f3af 8000 	nop.w
 8001236:	4601      	mov	r1, r0
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	1c5a      	adds	r2, r3, #1
 800123c:	60ba      	str	r2, [r7, #8]
 800123e:	b2ca      	uxtb	r2, r1
 8001240:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	3301      	adds	r3, #1
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	429a      	cmp	r2, r3
 800124e:	dbf0      	blt.n	8001232 <_read+0x12>
  }

  return len;
 8001250:	687b      	ldr	r3, [r7, #4]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	e009      	b.n	8001280 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	60ba      	str	r2, [r7, #8]
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fb07 	bl	8000888 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	3301      	adds	r3, #1
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	697a      	ldr	r2, [r7, #20]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	429a      	cmp	r2, r3
 8001286:	dbf1      	blt.n	800126c <_write+0x12>
  }
  return len;
 8001288:	687b      	ldr	r3, [r7, #4]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <_close>:

int _close(int file)
{
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012ba:	605a      	str	r2, [r3, #4]
  return 0;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <_isatty>:

int _isatty(int file)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012d2:	2301      	movs	r3, #1
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001304:	4a14      	ldr	r2, [pc, #80]	@ (8001358 <_sbrk+0x5c>)
 8001306:	4b15      	ldr	r3, [pc, #84]	@ (800135c <_sbrk+0x60>)
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001310:	4b13      	ldr	r3, [pc, #76]	@ (8001360 <_sbrk+0x64>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d102      	bne.n	800131e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001318:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <_sbrk+0x64>)
 800131a:	4a12      	ldr	r2, [pc, #72]	@ (8001364 <_sbrk+0x68>)
 800131c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800131e:	4b10      	ldr	r3, [pc, #64]	@ (8001360 <_sbrk+0x64>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	429a      	cmp	r2, r3
 800132a:	d207      	bcs.n	800133c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800132c:	f009 fc66 	bl	800abfc <__errno>
 8001330:	4603      	mov	r3, r0
 8001332:	220c      	movs	r2, #12
 8001334:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800133a:	e009      	b.n	8001350 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800133c:	4b08      	ldr	r3, [pc, #32]	@ (8001360 <_sbrk+0x64>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001342:	4b07      	ldr	r3, [pc, #28]	@ (8001360 <_sbrk+0x64>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	4a05      	ldr	r2, [pc, #20]	@ (8001360 <_sbrk+0x64>)
 800134c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800134e:	68fb      	ldr	r3, [r7, #12]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20018000 	.word	0x20018000
 800135c:	00000400 	.word	0x00000400
 8001360:	200005e0 	.word	0x200005e0
 8001364:	20005a90 	.word	0x20005a90

08001368 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800136c:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <SystemInit+0x20>)
 800136e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001372:	4a05      	ldr	r2, [pc, #20]	@ (8001388 <SystemInit+0x20>)
 8001374:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001378:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001390:	4b14      	ldr	r3, [pc, #80]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 8001392:	4a15      	ldr	r2, [pc, #84]	@ (80013e8 <MX_USART2_UART_Init+0x5c>)
 8001394:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001396:	4b13      	ldr	r3, [pc, #76]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 8001398:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800139c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800139e:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 80013b2:	220c      	movs	r2, #12
 80013b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013bc:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013c2:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013c8:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ce:	4805      	ldr	r0, [pc, #20]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 80013d0:	f005 fcc0 	bl	8006d54 <HAL_UART_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013da:	f7ff fc31 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200005e4 	.word	0x200005e4
 80013e8:	40004400 	.word	0x40004400

080013ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b0ac      	sub	sp, #176	@ 0xb0
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2288      	movs	r2, #136	@ 0x88
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f009 fb51 	bl	800aab4 <memset>
  if(uartHandle->Instance==USART2)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a25      	ldr	r2, [pc, #148]	@ (80014ac <HAL_UART_MspInit+0xc0>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d143      	bne.n	80014a4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800141c:	2302      	movs	r3, #2
 800141e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001420:	2300      	movs	r3, #0
 8001422:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4618      	mov	r0, r3
 800142a:	f002 fcc5 	bl	8003db8 <HAL_RCCEx_PeriphCLKConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001434:	f7ff fc04 	bl	8000c40 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001438:	4b1d      	ldr	r3, [pc, #116]	@ (80014b0 <HAL_UART_MspInit+0xc4>)
 800143a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800143c:	4a1c      	ldr	r2, [pc, #112]	@ (80014b0 <HAL_UART_MspInit+0xc4>)
 800143e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001442:	6593      	str	r3, [r2, #88]	@ 0x58
 8001444:	4b1a      	ldr	r3, [pc, #104]	@ (80014b0 <HAL_UART_MspInit+0xc4>)
 8001446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001450:	4b17      	ldr	r3, [pc, #92]	@ (80014b0 <HAL_UART_MspInit+0xc4>)
 8001452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001454:	4a16      	ldr	r2, [pc, #88]	@ (80014b0 <HAL_UART_MspInit+0xc4>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800145c:	4b14      	ldr	r3, [pc, #80]	@ (80014b0 <HAL_UART_MspInit+0xc4>)
 800145e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001468:	230c      	movs	r3, #12
 800146a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001480:	2307      	movs	r3, #7
 8001482:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001486:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800148a:	4619      	mov	r1, r3
 800148c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001490:	f000 ff64 	bl	800235c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001494:	2200      	movs	r2, #0
 8001496:	2105      	movs	r1, #5
 8001498:	2026      	movs	r0, #38	@ 0x26
 800149a:	f000 fd4f 	bl	8001f3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800149e:	2026      	movs	r0, #38	@ 0x26
 80014a0:	f000 fd68 	bl	8001f74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014a4:	bf00      	nop
 80014a6:	37b0      	adds	r7, #176	@ 0xb0
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40004400 	.word	0x40004400
 80014b0:	40021000 	.word	0x40021000

080014b4 <Reset_Handler>:
 80014b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014ec <LoopForever+0x2>
 80014b8:	f7ff ff56 	bl	8001368 <SystemInit>
 80014bc:	480c      	ldr	r0, [pc, #48]	@ (80014f0 <LoopForever+0x6>)
 80014be:	490d      	ldr	r1, [pc, #52]	@ (80014f4 <LoopForever+0xa>)
 80014c0:	4a0d      	ldr	r2, [pc, #52]	@ (80014f8 <LoopForever+0xe>)
 80014c2:	2300      	movs	r3, #0
 80014c4:	e002      	b.n	80014cc <LoopCopyDataInit>

080014c6 <CopyDataInit>:
 80014c6:	58d4      	ldr	r4, [r2, r3]
 80014c8:	50c4      	str	r4, [r0, r3]
 80014ca:	3304      	adds	r3, #4

080014cc <LoopCopyDataInit>:
 80014cc:	18c4      	adds	r4, r0, r3
 80014ce:	428c      	cmp	r4, r1
 80014d0:	d3f9      	bcc.n	80014c6 <CopyDataInit>
 80014d2:	4a0a      	ldr	r2, [pc, #40]	@ (80014fc <LoopForever+0x12>)
 80014d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001500 <LoopForever+0x16>)
 80014d6:	2300      	movs	r3, #0
 80014d8:	e001      	b.n	80014de <LoopFillZerobss>

080014da <FillZerobss>:
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	3204      	adds	r2, #4

080014de <LoopFillZerobss>:
 80014de:	42a2      	cmp	r2, r4
 80014e0:	d3fb      	bcc.n	80014da <FillZerobss>
 80014e2:	f009 fb91 	bl	800ac08 <__libc_init_array>
 80014e6:	f7ff fa6f 	bl	80009c8 <main>

080014ea <LoopForever>:
 80014ea:	e7fe      	b.n	80014ea <LoopForever>
 80014ec:	20018000 	.word	0x20018000
 80014f0:	20000000 	.word	0x20000000
 80014f4:	20000074 	.word	0x20000074
 80014f8:	0800be6c 	.word	0x0800be6c
 80014fc:	20000074 	.word	0x20000074
 8001500:	20005a90 	.word	0x20005a90

08001504 <ADC1_2_IRQHandler>:
 8001504:	e7fe      	b.n	8001504 <ADC1_2_IRQHandler>
	...

08001508 <MCP23S17_WriteRegister>:
h_MCP23S17_t hMCP23S17;


// Function to write to a register of MCP23S17 with error handling
void MCP23S17_WriteRegister(uint8_t reg, uint8_t data)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	460a      	mov	r2, r1
 8001512:	71fb      	strb	r3, [r7, #7]
 8001514:	4613      	mov	r3, r2
 8001516:	71bb      	strb	r3, [r7, #6]
	uint8_t control_byte = MCP23S17_CONTROL_BYTE(MCP23S17_CONTROL_ADDR, VU_WRITE); // Address = 0b000
 8001518:	2340      	movs	r3, #64	@ 0x40
 800151a:	73bb      	strb	r3, [r7, #14]

	uint8_t buffer[2] = {reg, data};
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	733b      	strb	r3, [r7, #12]
 8001520:	79bb      	ldrb	r3, [r7, #6]
 8001522:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status;

	// Assert chip select
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	2180      	movs	r1, #128	@ 0x80
 8001528:	4820      	ldr	r0, [pc, #128]	@ (80015ac <MCP23S17_WriteRegister+0xa4>)
 800152a:	f001 f8c1 	bl	80026b0 <HAL_GPIO_WritePin>

	// Transmit control byte
	status = HAL_SPI_Transmit(hMCP23S17.hspi, &control_byte, 1, HAL_MAX_DELAY);
 800152e:	4b20      	ldr	r3, [pc, #128]	@ (80015b0 <MCP23S17_WriteRegister+0xa8>)
 8001530:	6818      	ldr	r0, [r3, #0]
 8001532:	f107 010e 	add.w	r1, r7, #14
 8001536:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800153a:	2201      	movs	r2, #1
 800153c:	f004 fd56 	bl	8005fec <HAL_SPI_Transmit>
 8001540:	4603      	mov	r3, r0
 8001542:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00c      	beq.n	8001564 <MCP23S17_WriteRegister+0x5c>
		HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET); // Deassert chip select
 800154a:	2201      	movs	r2, #1
 800154c:	2180      	movs	r1, #128	@ 0x80
 800154e:	4817      	ldr	r0, [pc, #92]	@ (80015ac <MCP23S17_WriteRegister+0xa4>)
 8001550:	f001 f8ae 	bl	80026b0 <HAL_GPIO_WritePin>
		printf("Error: Failed to transmit control byte (HAL_SPI_Transmit returned %d)\r\n", status);
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	4619      	mov	r1, r3
 8001558:	4816      	ldr	r0, [pc, #88]	@ (80015b4 <MCP23S17_WriteRegister+0xac>)
 800155a:	f009 f92f 	bl	800a7bc <iprintf>
		Error_Handler(); // Handle the error
 800155e:	f7ff fb6f 	bl	8000c40 <Error_Handler>
		return; // Prevent further execution
 8001562:	e01f      	b.n	80015a4 <MCP23S17_WriteRegister+0x9c>
#if (LOGS)
	printf("SPI3 control transmission status: %d\r\n", status);
#endif

	// Transmit register address and data
	status = HAL_SPI_Transmit(hMCP23S17.hspi, buffer, 2, HAL_MAX_DELAY);
 8001564:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <MCP23S17_WriteRegister+0xa8>)
 8001566:	6818      	ldr	r0, [r3, #0]
 8001568:	f107 010c 	add.w	r1, r7, #12
 800156c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001570:	2202      	movs	r2, #2
 8001572:	f004 fd3b 	bl	8005fec <HAL_SPI_Transmit>
 8001576:	4603      	mov	r3, r0
 8001578:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d00c      	beq.n	800159a <MCP23S17_WriteRegister+0x92>
		HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET); // Deassert chip select
 8001580:	2201      	movs	r2, #1
 8001582:	2180      	movs	r1, #128	@ 0x80
 8001584:	4809      	ldr	r0, [pc, #36]	@ (80015ac <MCP23S17_WriteRegister+0xa4>)
 8001586:	f001 f893 	bl	80026b0 <HAL_GPIO_WritePin>
		printf("Error: Failed to transmit register data (HAL_SPI_Transmit returned %d)\r\n", status);
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	4619      	mov	r1, r3
 800158e:	480a      	ldr	r0, [pc, #40]	@ (80015b8 <MCP23S17_WriteRegister+0xb0>)
 8001590:	f009 f914 	bl	800a7bc <iprintf>
		Error_Handler(); // Handle the error
 8001594:	f7ff fb54 	bl	8000c40 <Error_Handler>
		return; // Prevent further execution
 8001598:	e004      	b.n	80015a4 <MCP23S17_WriteRegister+0x9c>
#if (LOGS)
	printf("SPI3 data Ox%X transmission to register 0x%X status: %d\r\n", data, reg, status);
#endif

	// Deassert chip select
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 800159a:	2201      	movs	r2, #1
 800159c:	2180      	movs	r1, #128	@ 0x80
 800159e:	4803      	ldr	r0, [pc, #12]	@ (80015ac <MCP23S17_WriteRegister+0xa4>)
 80015a0:	f001 f886 	bl	80026b0 <HAL_GPIO_WritePin>
}
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	48000400 	.word	0x48000400
 80015b0:	2000066c 	.word	0x2000066c
 80015b4:	0800bb50 	.word	0x0800bb50
 80015b8:	0800bb98 	.word	0x0800bb98

080015bc <MCP23S17_Update_LEDs>:

void MCP23S17_Update_LEDs()
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
	MCP23S17_WriteRegister(MCP23S17_OLATA, hMCP23S17.GPA);
 80015c0:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <MCP23S17_Update_LEDs+0x20>)
 80015c2:	791b      	ldrb	r3, [r3, #4]
 80015c4:	4619      	mov	r1, r3
 80015c6:	2014      	movs	r0, #20
 80015c8:	f7ff ff9e 	bl	8001508 <MCP23S17_WriteRegister>
	MCP23S17_WriteRegister(MCP23S17_OLATB, hMCP23S17.GPB);
 80015cc:	4b03      	ldr	r3, [pc, #12]	@ (80015dc <MCP23S17_Update_LEDs+0x20>)
 80015ce:	795b      	ldrb	r3, [r3, #5]
 80015d0:	4619      	mov	r1, r3
 80015d2:	2015      	movs	r0, #21
 80015d4:	f7ff ff98 	bl	8001508 <MCP23S17_WriteRegister>
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	2000066c 	.word	0x2000066c

080015e0 <MCP23S17_Init>:

void MCP23S17_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	hMCP23S17.hspi = &hspi3;
 80015e4:	4b12      	ldr	r3, [pc, #72]	@ (8001630 <MCP23S17_Init+0x50>)
 80015e6:	4a13      	ldr	r2, [pc, #76]	@ (8001634 <MCP23S17_Init+0x54>)
 80015e8:	601a      	str	r2, [r3, #0]

	HAL_SPI_Init(hMCP23S17.hspi);
 80015ea:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <MCP23S17_Init+0x50>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f004 fc59 	bl	8005ea6 <HAL_SPI_Init>

	// nRESET to base state
	HAL_GPIO_WritePin(VU_nRESET_GPIO_Port, VU_nRESET_Pin, GPIO_PIN_SET);
 80015f4:	2201      	movs	r2, #1
 80015f6:	2101      	movs	r1, #1
 80015f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015fc:	f001 f858 	bl	80026b0 <HAL_GPIO_WritePin>

	// nCS to reset state
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 8001600:	2201      	movs	r2, #1
 8001602:	2180      	movs	r1, #128	@ 0x80
 8001604:	480c      	ldr	r0, [pc, #48]	@ (8001638 <MCP23S17_Init+0x58>)
 8001606:	f001 f853 	bl	80026b0 <HAL_GPIO_WritePin>

	// Set all GPIOA and GPIOB pins as outputs
	MCP23S17_WriteRegister(MCP23S17_IODIRA, MCP23S17_ALL_ON); // GPA as output
 800160a:	2100      	movs	r1, #0
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff ff7b 	bl	8001508 <MCP23S17_WriteRegister>
	MCP23S17_WriteRegister(MCP23S17_IODIRB, MCP23S17_ALL_ON); // GPB as output
 8001612:	2100      	movs	r1, #0
 8001614:	2001      	movs	r0, #1
 8001616:	f7ff ff77 	bl	8001508 <MCP23S17_WriteRegister>

	hMCP23S17.GPA = 0xFF;	// All LEDs on GPIOA OFF
 800161a:	4b05      	ldr	r3, [pc, #20]	@ (8001630 <MCP23S17_Init+0x50>)
 800161c:	22ff      	movs	r2, #255	@ 0xff
 800161e:	711a      	strb	r2, [r3, #4]
	hMCP23S17.GPB = 0xFF;	// All LEDs on GPIOB OFF
 8001620:	4b03      	ldr	r3, [pc, #12]	@ (8001630 <MCP23S17_Init+0x50>)
 8001622:	22ff      	movs	r2, #255	@ 0xff
 8001624:	715a      	strb	r2, [r3, #5]

	MCP23S17_Update_LEDs();
 8001626:	f7ff ffc9 	bl	80015bc <MCP23S17_Update_LEDs>
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	2000066c 	.word	0x2000066c
 8001634:	20000530 	.word	0x20000530
 8001638:	48000400 	.word	0x48000400

0800163c <MCP23S17_Set_LED_id>:

void MCP23S17_Set_LED_id(uint8_t led)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]
	if (led > 7)
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	2b07      	cmp	r3, #7
 800164a:	d90e      	bls.n	800166a <MCP23S17_Set_LED_id+0x2e>
	{
		hMCP23S17.GPB = ~(1 << led%8);
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	2201      	movs	r2, #1
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	b2db      	uxtb	r3, r3
 800165a:	43db      	mvns	r3, r3
 800165c:	b2da      	uxtb	r2, r3
 800165e:	4b0c      	ldr	r3, [pc, #48]	@ (8001690 <MCP23S17_Set_LED_id+0x54>)
 8001660:	715a      	strb	r2, [r3, #5]
		hMCP23S17.GPA = 0xFF; // All LEDs on GPIOA OFF
 8001662:	4b0b      	ldr	r3, [pc, #44]	@ (8001690 <MCP23S17_Set_LED_id+0x54>)
 8001664:	22ff      	movs	r2, #255	@ 0xff
 8001666:	711a      	strb	r2, [r3, #4]
 8001668:	e00b      	b.n	8001682 <MCP23S17_Set_LED_id+0x46>
	}
	else
	{
		hMCP23S17.GPA = ~(1 << led);
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	2201      	movs	r2, #1
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	b2db      	uxtb	r3, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	b2da      	uxtb	r2, r3
 8001678:	4b05      	ldr	r3, [pc, #20]	@ (8001690 <MCP23S17_Set_LED_id+0x54>)
 800167a:	711a      	strb	r2, [r3, #4]
		hMCP23S17.GPB = 0xFF; // All LEDs on GPIOB OFF
 800167c:	4b04      	ldr	r3, [pc, #16]	@ (8001690 <MCP23S17_Set_LED_id+0x54>)
 800167e:	22ff      	movs	r2, #255	@ 0xff
 8001680:	715a      	strb	r2, [r3, #5]
	}

	MCP23S17_Update_LEDs();
 8001682:	f7ff ff9b 	bl	80015bc <MCP23S17_Update_LEDs>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	2000066c 	.word	0x2000066c

08001694 <MCP23S17_Toggle_LED_id>:

void MCP23S17_Toggle_LED_id(uint8_t led)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
	if (led > 7)
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	2b07      	cmp	r3, #7
 80016a2:	d90f      	bls.n	80016c4 <MCP23S17_Toggle_LED_id+0x30>
	{
		hMCP23S17.GPB = (hMCP23S17.GPB & ~(1 << led%8)) | (~hMCP23S17.GPB & (1 << led%8));
 80016a4:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <MCP23S17_Toggle_LED_id+0x58>)
 80016a6:	795b      	ldrb	r3, [r3, #5]
 80016a8:	b25a      	sxtb	r2, r3
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	2101      	movs	r1, #1
 80016b2:	fa01 f303 	lsl.w	r3, r1, r3
 80016b6:	b25b      	sxtb	r3, r3
 80016b8:	4053      	eors	r3, r2
 80016ba:	b25b      	sxtb	r3, r3
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <MCP23S17_Toggle_LED_id+0x58>)
 80016c0:	715a      	strb	r2, [r3, #5]
 80016c2:	e00c      	b.n	80016de <MCP23S17_Toggle_LED_id+0x4a>
	}
	else
	{
		hMCP23S17.GPA = (hMCP23S17.GPA & ~(1 << led)) | (~hMCP23S17.GPA & (1 << led));
 80016c4:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <MCP23S17_Toggle_LED_id+0x58>)
 80016c6:	791b      	ldrb	r3, [r3, #4]
 80016c8:	b25a      	sxtb	r2, r3
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	2101      	movs	r1, #1
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	b25b      	sxtb	r3, r3
 80016d4:	4053      	eors	r3, r2
 80016d6:	b25b      	sxtb	r3, r3
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	4b04      	ldr	r3, [pc, #16]	@ (80016ec <MCP23S17_Toggle_LED_id+0x58>)
 80016dc:	711a      	strb	r2, [r3, #4]
	}

	MCP23S17_Update_LEDs();
 80016de:	f7ff ff6d 	bl	80015bc <MCP23S17_Update_LEDs>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	2000066c 	.word	0x2000066c

080016f0 <MCP23S17_VUMetre_R>:

/*
 * @param level in percentage
 */
void MCP23S17_VUMetre_R(int level)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	if (level <= 100)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b64      	cmp	r3, #100	@ 0x64
 80016fc:	dc0f      	bgt.n	800171e <MCP23S17_VUMetre_R+0x2e>
	{
		hMCP23S17.GPA = 0xFF & (0x00FF << (int)(8*level/100));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	4a09      	ldr	r2, [pc, #36]	@ (8001728 <MCP23S17_VUMetre_R+0x38>)
 8001704:	fb82 1203 	smull	r1, r2, r2, r3
 8001708:	1152      	asrs	r2, r2, #5
 800170a:	17db      	asrs	r3, r3, #31
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	22ff      	movs	r2, #255	@ 0xff
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4b05      	ldr	r3, [pc, #20]	@ (800172c <MCP23S17_VUMetre_R+0x3c>)
 8001718:	711a      	strb	r2, [r3, #4]

		MCP23S17_Update_LEDs();
 800171a:	f7ff ff4f 	bl	80015bc <MCP23S17_Update_LEDs>
	}
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	51eb851f 	.word	0x51eb851f
 800172c:	2000066c 	.word	0x2000066c

08001730 <MCP23S17_VUMetre_L>:

/*
 * @param level in percentage
 */
void MCP23S17_VUMetre_L(int level)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	if (level <= 100)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b64      	cmp	r3, #100	@ 0x64
 800173c:	dc0f      	bgt.n	800175e <MCP23S17_VUMetre_L+0x2e>
	{
		hMCP23S17.GPB = 0xFF & (0x00FF << (int)(8*level/100));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	4a09      	ldr	r2, [pc, #36]	@ (8001768 <MCP23S17_VUMetre_L+0x38>)
 8001744:	fb82 1203 	smull	r1, r2, r2, r3
 8001748:	1152      	asrs	r2, r2, #5
 800174a:	17db      	asrs	r3, r3, #31
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	22ff      	movs	r2, #255	@ 0xff
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4b05      	ldr	r3, [pc, #20]	@ (800176c <MCP23S17_VUMetre_L+0x3c>)
 8001758:	715a      	strb	r2, [r3, #5]

		MCP23S17_Update_LEDs();
 800175a:	f7ff ff2f 	bl	80015bc <MCP23S17_Update_LEDs>
	}
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	51eb851f 	.word	0x51eb851f
 800176c:	2000066c 	.word	0x2000066c

08001770 <fonction>:

#include "../drivers/MCP23S17.h"


int fonction(int argc, char ** argv)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
	if (argc > 1)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b01      	cmp	r3, #1
 800177e:	dd14      	ble.n	80017aa <fonction+0x3a>
	{
		for (int i = 0; i < argc; i++)
 8001780:	2300      	movs	r3, #0
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	e00d      	b.n	80017a2 <fonction+0x32>
		{
			printf("Paramètre [%d] = %s\r\n", i+1, argv[i]);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	1c59      	adds	r1, r3, #1
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	4413      	add	r3, r2
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	461a      	mov	r2, r3
 8001796:	4807      	ldr	r0, [pc, #28]	@ (80017b4 <fonction+0x44>)
 8001798:	f009 f810 	bl	800a7bc <iprintf>
		for (int i = 0; i < argc; i++)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	3301      	adds	r3, #1
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	dbed      	blt.n	8001786 <fonction+0x16>
		}
	}

	return 0;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	0800bbe4 	.word	0x0800bbe4

080017b8 <calcul>:

int calcul(int argc, char ** argv)
{
 80017b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
	if (argc >= 4)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	dd68      	ble.n	800189a <calcul+0xe2>
	{
		switch(argv[2][0])
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	3308      	adds	r3, #8
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b78      	cmp	r3, #120	@ 0x78
 80017d2:	d03f      	beq.n	8001854 <calcul+0x9c>
 80017d4:	2b78      	cmp	r3, #120	@ 0x78
 80017d6:	dc59      	bgt.n	800188c <calcul+0xd4>
 80017d8:	2b2d      	cmp	r3, #45	@ 0x2d
 80017da:	d020      	beq.n	800181e <calcul+0x66>
 80017dc:	2b2d      	cmp	r3, #45	@ 0x2d
 80017de:	dc55      	bgt.n	800188c <calcul+0xd4>
 80017e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80017e2:	d037      	beq.n	8001854 <calcul+0x9c>
 80017e4:	2b2b      	cmp	r3, #43	@ 0x2b
 80017e6:	d151      	bne.n	800188c <calcul+0xd4>
		{
		case '+':
			printf("%s + %s = %d\r\n", argv[1], argv[3], atoi(argv[1])+atoi(argv[3]));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	3304      	adds	r3, #4
 80017ec:	681c      	ldr	r4, [r3, #0]
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	330c      	adds	r3, #12
 80017f2:	681d      	ldr	r5, [r3, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	3304      	adds	r3, #4
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f008 fe94 	bl	800a528 <atoi>
 8001800:	4606      	mov	r6, r0
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	330c      	adds	r3, #12
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f008 fe8d 	bl	800a528 <atoi>
 800180e:	4603      	mov	r3, r0
 8001810:	4433      	add	r3, r6
 8001812:	462a      	mov	r2, r5
 8001814:	4621      	mov	r1, r4
 8001816:	4823      	ldr	r0, [pc, #140]	@ (80018a4 <calcul+0xec>)
 8001818:	f008 ffd0 	bl	800a7bc <iprintf>
			break;
 800181c:	e03d      	b.n	800189a <calcul+0xe2>
		case '-':
			printf("%s - %s = %d\r\n", argv[1], argv[3], atoi(argv[1])-atoi(argv[3]));
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	3304      	adds	r3, #4
 8001822:	681c      	ldr	r4, [r3, #0]
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	330c      	adds	r3, #12
 8001828:	681d      	ldr	r5, [r3, #0]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	3304      	adds	r3, #4
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f008 fe79 	bl	800a528 <atoi>
 8001836:	4606      	mov	r6, r0
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	330c      	adds	r3, #12
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f008 fe72 	bl	800a528 <atoi>
 8001844:	4603      	mov	r3, r0
 8001846:	1af3      	subs	r3, r6, r3
 8001848:	462a      	mov	r2, r5
 800184a:	4621      	mov	r1, r4
 800184c:	4816      	ldr	r0, [pc, #88]	@ (80018a8 <calcul+0xf0>)
 800184e:	f008 ffb5 	bl	800a7bc <iprintf>
			break;
 8001852:	e022      	b.n	800189a <calcul+0xe2>
		case '*':
		case 'x':
			printf("%s * %s = %d\r\n", argv[1], argv[3], atoi(argv[1])*atoi(argv[3]));
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	3304      	adds	r3, #4
 8001858:	681c      	ldr	r4, [r3, #0]
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	330c      	adds	r3, #12
 800185e:	681d      	ldr	r5, [r3, #0]
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	3304      	adds	r3, #4
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f008 fe5e 	bl	800a528 <atoi>
 800186c:	4606      	mov	r6, r0
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	330c      	adds	r3, #12
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f008 fe57 	bl	800a528 <atoi>
 800187a:	4603      	mov	r3, r0
 800187c:	fb06 f303 	mul.w	r3, r6, r3
 8001880:	462a      	mov	r2, r5
 8001882:	4621      	mov	r1, r4
 8001884:	4809      	ldr	r0, [pc, #36]	@ (80018ac <calcul+0xf4>)
 8001886:	f008 ff99 	bl	800a7bc <iprintf>
			break;
 800188a:	e006      	b.n	800189a <calcul+0xe2>
		default:
			printf("Opération '%s' non supporté!\r\n", argv[2]);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	3308      	adds	r3, #8
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4619      	mov	r1, r3
 8001894:	4806      	ldr	r0, [pc, #24]	@ (80018b0 <calcul+0xf8>)
 8001896:	f008 ff91 	bl	800a7bc <iprintf>
		}
	}

	return 0;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018a4:	0800bbfc 	.word	0x0800bbfc
 80018a8:	0800bc0c 	.word	0x0800bc0c
 80018ac:	0800bc1c 	.word	0x0800bc1c
 80018b0:	0800bc2c 	.word	0x0800bc2c

080018b4 <addition>:

int addition(int argc, char ** argv)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
	if (argc > 1)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	dd24      	ble.n	800190e <addition+0x5a>
	{
		int somme = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
		for (int i = 1; i < argc; i++)
 80018c8:	2301      	movs	r3, #1
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	e017      	b.n	80018fe <addition+0x4a>
		{
			printf(" + %s", argv[i]);
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	4413      	add	r3, r2
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4619      	mov	r1, r3
 80018da:	480f      	ldr	r0, [pc, #60]	@ (8001918 <addition+0x64>)
 80018dc:	f008 ff6e 	bl	800a7bc <iprintf>
			somme = somme + atoi(argv[i]);
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	4413      	add	r3, r2
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f008 fe1c 	bl	800a528 <atoi>
 80018f0:	4602      	mov	r2, r0
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4413      	add	r3, r2
 80018f6:	60fb      	str	r3, [r7, #12]
		for (int i = 1; i < argc; i++)
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	3301      	adds	r3, #1
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	429a      	cmp	r2, r3
 8001904:	dbe3      	blt.n	80018ce <addition+0x1a>
		}

		printf(" = %d\r\n", somme);
 8001906:	68f9      	ldr	r1, [r7, #12]
 8001908:	4804      	ldr	r0, [pc, #16]	@ (800191c <addition+0x68>)
 800190a:	f008 ff57 	bl	800a7bc <iprintf>
	}
	return 0;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	0800bc50 	.word	0x0800bc50
 800191c:	0800bc58 	.word	0x0800bc58

08001920 <GPIOExpander_toggle_LED>:

int GPIOExpander_toggle_LED(int argc, char ** argv)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
	if (argc > 1)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b01      	cmp	r3, #1
 800192e:	dd16      	ble.n	800195e <GPIOExpander_toggle_LED+0x3e>
	{
		for (int i = 1; i < argc; i++)
 8001930:	2301      	movs	r3, #1
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	e00f      	b.n	8001956 <GPIOExpander_toggle_LED+0x36>
		{
			MCP23S17_Toggle_LED_id(atoi(argv[i]));
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	4413      	add	r3, r2
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f008 fdf1 	bl	800a528 <atoi>
 8001946:	4603      	mov	r3, r0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fea2 	bl	8001694 <MCP23S17_Toggle_LED_id>
		for (int i = 1; i < argc; i++)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	3301      	adds	r3, #1
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	429a      	cmp	r2, r3
 800195c:	dbeb      	blt.n	8001936 <GPIOExpander_toggle_LED+0x16>
		}
	}

	return 0;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <GPIOExpander_set_LED>:

int GPIOExpander_set_LED(int argc, char ** argv)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
	if (argc > 1)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b01      	cmp	r3, #1
 8001976:	dd0a      	ble.n	800198e <GPIOExpander_set_LED+0x26>
	{
		MCP23S17_Set_LED_id(atoi(argv[1]));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	3304      	adds	r3, #4
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f008 fdd2 	bl	800a528 <atoi>
 8001984:	4603      	mov	r3, r0
 8001986:	b2db      	uxtb	r3, r3
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fe57 	bl	800163c <MCP23S17_Set_LED_id>
	}

	return 0;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <shell_uart_receive_irq_cb>:
static char print_buffer[BUFFER_SIZE];
static SemaphoreHandle_t sem_uart_read = NULL;


void shell_uart_receive_irq_cb(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]

	xSemaphoreGiveFromISR(sem_uart_read, &pxHigherPriorityTaskWoken);
 80019a2:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <shell_uart_receive_irq_cb+0x38>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	1d3a      	adds	r2, r7, #4
 80019a8:	4611      	mov	r1, r2
 80019aa:	4618      	mov	r0, r3
 80019ac:	f006 ffb4 	bl	8008918 <xQueueGiveFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d007      	beq.n	80019c6 <shell_uart_receive_irq_cb+0x2e>
 80019b6:	4b07      	ldr	r3, [pc, #28]	@ (80019d4 <shell_uart_receive_irq_cb+0x3c>)
 80019b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	f3bf 8f4f 	dsb	sy
 80019c2:	f3bf 8f6f 	isb	sy
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200009a0 	.word	0x200009a0
 80019d4:	e000ed04 	.word	0xe000ed04

080019d8 <uart_read>:

static char uart_read() {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
	char c;

	HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t*)(&c), 1);
 80019de:	1dfb      	adds	r3, r7, #7
 80019e0:	2201      	movs	r2, #1
 80019e2:	4619      	mov	r1, r3
 80019e4:	4807      	ldr	r0, [pc, #28]	@ (8001a04 <uart_read+0x2c>)
 80019e6:	f005 fa8d 	bl	8006f04 <HAL_UART_Receive_IT>
	// il faut mettre la tâche shell dans l'état bloqué, jusqu'à l'interruption de réception de caractère
	// prendre un sémaphore vide par exemple
	xSemaphoreTake(sem_uart_read, portMAX_DELAY);
 80019ea:	4b07      	ldr	r3, [pc, #28]	@ (8001a08 <uart_read+0x30>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019f2:	4618      	mov	r0, r3
 80019f4:	f007 f820 	bl	8008a38 <xQueueSemaphoreTake>

	return c;
 80019f8:	79fb      	ldrb	r3, [r7, #7]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200005e4 	.word	0x200005e4
 8001a08:	200009a0 	.word	0x200009a0

08001a0c <uart_write>:

static int uart_write(char * s, uint16_t size) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
 8001a18:	887a      	ldrh	r2, [r7, #2]
 8001a1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	4803      	ldr	r0, [pc, #12]	@ (8001a30 <uart_write+0x24>)
 8001a22:	f005 f9e5 	bl	8006df0 <HAL_UART_Transmit>
	return size;
 8001a26:	887b      	ldrh	r3, [r7, #2]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	200005e4 	.word	0x200005e4

08001a34 <sh_help>:

static int sh_help(int argc, char ** argv) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af02      	add	r7, sp, #8
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	e022      	b.n	8001a8a <sh_help+0x56>
		int size;
		size = snprintf (print_buffer, BUFFER_SIZE, "%c: %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 8001a44:	4916      	ldr	r1, [pc, #88]	@ (8001aa0 <sh_help+0x6c>)
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4413      	add	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	4912      	ldr	r1, [pc, #72]	@ (8001aa0 <sh_help+0x6c>)
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4413      	add	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	440b      	add	r3, r1
 8001a64:	3308      	adds	r3, #8
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa4 <sh_help+0x70>)
 8001a6e:	2128      	movs	r1, #40	@ 0x28
 8001a70:	480d      	ldr	r0, [pc, #52]	@ (8001aa8 <sh_help+0x74>)
 8001a72:	f008 ff13 	bl	800a89c <sniprintf>
 8001a76:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	480a      	ldr	r0, [pc, #40]	@ (8001aa8 <sh_help+0x74>)
 8001a80:	f7ff ffc4 	bl	8001a0c <uart_write>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	3301      	adds	r3, #1
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	4b08      	ldr	r3, [pc, #32]	@ (8001aac <sh_help+0x78>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	dbd7      	blt.n	8001a44 <sh_help+0x10>
	}

	return 0;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000678 	.word	0x20000678
 8001aa4:	0800bc60 	.word	0x0800bc60
 8001aa8:	20000978 	.word	0x20000978
 8001aac:	20000674 	.word	0x20000674

08001ab0 <shell_init>:

void shell_init() {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
	int size = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]

	size = snprintf (print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8001aba:	4a13      	ldr	r2, [pc, #76]	@ (8001b08 <shell_init+0x58>)
 8001abc:	2128      	movs	r1, #40	@ 0x28
 8001abe:	4813      	ldr	r0, [pc, #76]	@ (8001b0c <shell_init+0x5c>)
 8001ac0:	f008 feec 	bl	800a89c <sniprintf>
 8001ac4:	6078      	str	r0, [r7, #4]
	uart_write(print_buffer, size);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	4619      	mov	r1, r3
 8001acc:	480f      	ldr	r0, [pc, #60]	@ (8001b0c <shell_init+0x5c>)
 8001ace:	f7ff ff9d 	bl	8001a0c <uart_write>

	sem_uart_read = xSemaphoreCreateBinary();
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f006 fec4 	bl	8008864 <xQueueGenericCreate>
 8001adc:	4603      	mov	r3, r0
 8001ade:	4a0c      	ldr	r2, [pc, #48]	@ (8001b10 <shell_init+0x60>)
 8001ae0:	6013      	str	r3, [r2, #0]
	if (sem_uart_read == NULL)
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <shell_init+0x60>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d104      	bne.n	8001af4 <shell_init+0x44>
	{
		printf("Error semaphore shell\r\n");
 8001aea:	480a      	ldr	r0, [pc, #40]	@ (8001b14 <shell_init+0x64>)
 8001aec:	f008 fece 	bl	800a88c <puts>
		while(1);
 8001af0:	bf00      	nop
 8001af2:	e7fd      	b.n	8001af0 <shell_init+0x40>
	}

	shell_add('h', sh_help, "Help");
 8001af4:	4a08      	ldr	r2, [pc, #32]	@ (8001b18 <shell_init+0x68>)
 8001af6:	4909      	ldr	r1, [pc, #36]	@ (8001b1c <shell_init+0x6c>)
 8001af8:	2068      	movs	r0, #104	@ 0x68
 8001afa:	f000 f811 	bl	8001b20 <shell_add>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	0800bc6c 	.word	0x0800bc6c
 8001b0c:	20000978 	.word	0x20000978
 8001b10:	200009a0 	.word	0x200009a0
 8001b14:	0800bc94 	.word	0x0800bc94
 8001b18:	0800bcac 	.word	0x0800bcac
 8001b1c:	08001a35 	.word	0x08001a35

08001b20 <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
 8001b2c:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8001b2e:	4b19      	ldr	r3, [pc, #100]	@ (8001b94 <shell_add+0x74>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b34:	dc26      	bgt.n	8001b84 <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 8001b36:	4b17      	ldr	r3, [pc, #92]	@ (8001b94 <shell_add+0x74>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	4917      	ldr	r1, [pc, #92]	@ (8001b98 <shell_add+0x78>)
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	4413      	add	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	7bfa      	ldrb	r2, [r7, #15]
 8001b48:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 8001b4a:	4b12      	ldr	r3, [pc, #72]	@ (8001b94 <shell_add+0x74>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	4912      	ldr	r1, [pc, #72]	@ (8001b98 <shell_add+0x78>)
 8001b50:	4613      	mov	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	4413      	add	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	440b      	add	r3, r1
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	68ba      	ldr	r2, [r7, #8]
 8001b5e:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 8001b60:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <shell_add+0x74>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	490c      	ldr	r1, [pc, #48]	@ (8001b98 <shell_add+0x78>)
 8001b66:	4613      	mov	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	4413      	add	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	440b      	add	r3, r1
 8001b70:	3308      	adds	r3, #8
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 8001b76:	4b07      	ldr	r3, [pc, #28]	@ (8001b94 <shell_add+0x74>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	4a05      	ldr	r2, [pc, #20]	@ (8001b94 <shell_add+0x74>)
 8001b7e:	6013      	str	r3, [r2, #0]
		return 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	e001      	b.n	8001b88 <shell_add+0x68>
	}

	return -1;
 8001b84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	20000674 	.word	0x20000674
 8001b98:	20000678 	.word	0x20000678

08001b9c <shell_exec>:

static int shell_exec(char * buf) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b090      	sub	sp, #64	@ 0x40
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
	int i;

	char c = buf[0];
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001bac:	2300      	movs	r3, #0
 8001bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bb0:	e040      	b.n	8001c34 <shell_exec+0x98>
		if (shell_func_list[i].c == c) {
 8001bb2:	492d      	ldr	r1, [pc, #180]	@ (8001c68 <shell_exec+0xcc>)
 8001bb4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d131      	bne.n	8001c2e <shell_exec+0x92>
			argc = 1;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bd6:	e013      	b.n	8001c00 <shell_exec+0x64>
				if(*p == ' ') {
 8001bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b20      	cmp	r3, #32
 8001bde:	d10c      	bne.n	8001bfa <shell_exec+0x5e>
					*p = '\0';
 8001be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 8001be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001bec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001bee:	3201      	adds	r2, #1
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	3340      	adds	r3, #64	@ 0x40
 8001bf4:	443b      	add	r3, r7
 8001bf6:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8001bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <shell_exec+0x72>
 8001c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c0a:	2b07      	cmp	r3, #7
 8001c0c:	dde4      	ble.n	8001bd8 <shell_exec+0x3c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 8001c0e:	4916      	ldr	r1, [pc, #88]	@ (8001c68 <shell_exec+0xcc>)
 8001c10:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c12:	4613      	mov	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f107 020c 	add.w	r2, r7, #12
 8001c24:	4611      	mov	r1, r2
 8001c26:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001c28:	4798      	blx	r3
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	e017      	b.n	8001c5e <shell_exec+0xc2>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c30:	3301      	adds	r3, #1
 8001c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c34:	4b0d      	ldr	r3, [pc, #52]	@ (8001c6c <shell_exec+0xd0>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	dbb9      	blt.n	8001bb2 <shell_exec+0x16>
		}
	}

	int size;
	size = snprintf (print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8001c3e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c42:	4a0b      	ldr	r2, [pc, #44]	@ (8001c70 <shell_exec+0xd4>)
 8001c44:	2128      	movs	r1, #40	@ 0x28
 8001c46:	480b      	ldr	r0, [pc, #44]	@ (8001c74 <shell_exec+0xd8>)
 8001c48:	f008 fe28 	bl	800a89c <sniprintf>
 8001c4c:	62f8      	str	r0, [r7, #44]	@ 0x2c
	uart_write(print_buffer, size);
 8001c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4619      	mov	r1, r3
 8001c54:	4807      	ldr	r0, [pc, #28]	@ (8001c74 <shell_exec+0xd8>)
 8001c56:	f7ff fed9 	bl	8001a0c <uart_write>
	return -1;
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3740      	adds	r7, #64	@ 0x40
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000678 	.word	0x20000678
 8001c6c:	20000674 	.word	0x20000674
 8001c70:	0800bcb4 	.word	0x0800bcb4
 8001c74:	20000978 	.word	0x20000978

08001c78 <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run() {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
	int reading = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]

	static char cmd_buffer[BUFFER_SIZE];

	while (1) {
		uart_write(prompt, 2);
 8001c86:	2102      	movs	r1, #2
 8001c88:	482a      	ldr	r0, [pc, #168]	@ (8001d34 <shell_run+0xbc>)
 8001c8a:	f7ff febf 	bl	8001a0c <uart_write>
		reading = 1;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	60fb      	str	r3, [r7, #12]

		while(reading) {
 8001c92:	e047      	b.n	8001d24 <shell_run+0xac>
			char c = uart_read();
 8001c94:	f7ff fea0 	bl	80019d8 <uart_read>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	70fb      	strb	r3, [r7, #3]
			int size;

			switch (c) {
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d025      	beq.n	8001cee <shell_run+0x76>
 8001ca2:	2b0d      	cmp	r3, #13
 8001ca4:	d12e      	bne.n	8001d04 <shell_run+0x8c>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (print_buffer, BUFFER_SIZE, "\r\n");
 8001ca6:	4a24      	ldr	r2, [pc, #144]	@ (8001d38 <shell_run+0xc0>)
 8001ca8:	2128      	movs	r1, #40	@ 0x28
 8001caa:	4824      	ldr	r0, [pc, #144]	@ (8001d3c <shell_run+0xc4>)
 8001cac:	f008 fdf6 	bl	800a89c <sniprintf>
 8001cb0:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4820      	ldr	r0, [pc, #128]	@ (8001d3c <shell_run+0xc4>)
 8001cba:	f7ff fea7 	bl	8001a0c <uart_write>
				cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	1c5a      	adds	r2, r3, #1
 8001cc2:	60ba      	str	r2, [r7, #8]
 8001cc4:	4a1e      	ldr	r2, [pc, #120]	@ (8001d40 <shell_run+0xc8>)
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	54d1      	strb	r1, [r2, r3]
				size = snprintf (print_buffer, BUFFER_SIZE, ":%s\r\n", cmd_buffer);
 8001cca:	4b1d      	ldr	r3, [pc, #116]	@ (8001d40 <shell_run+0xc8>)
 8001ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8001d44 <shell_run+0xcc>)
 8001cce:	2128      	movs	r1, #40	@ 0x28
 8001cd0:	481a      	ldr	r0, [pc, #104]	@ (8001d3c <shell_run+0xc4>)
 8001cd2:	f008 fde3 	bl	800a89c <sniprintf>
 8001cd6:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4817      	ldr	r0, [pc, #92]	@ (8001d3c <shell_run+0xc4>)
 8001ce0:	f7ff fe94 	bl	8001a0c <uart_write>
				reading = 0;        //exit read loop
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]
				pos = 0;            //reset buffer
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60bb      	str	r3, [r7, #8]
				break;
 8001cec:	e01a      	b.n	8001d24 <shell_run+0xac>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	dd16      	ble.n	8001d22 <shell_run+0xaa>
					pos--;          //remove it in buffer
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	60bb      	str	r3, [r7, #8]

					uart_write(backspace, 3);	// delete the char on the terminal
 8001cfa:	2103      	movs	r1, #3
 8001cfc:	4812      	ldr	r0, [pc, #72]	@ (8001d48 <shell_run+0xd0>)
 8001cfe:	f7ff fe85 	bl	8001a0c <uart_write>
				}
				break;
 8001d02:	e00e      	b.n	8001d22 <shell_run+0xaa>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b27      	cmp	r3, #39	@ 0x27
 8001d08:	dc0c      	bgt.n	8001d24 <shell_run+0xac>
					uart_write(&c, 1);
 8001d0a:	1cfb      	adds	r3, r7, #3
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fe7c 	bl	8001a0c <uart_write>
					cmd_buffer[pos++] = c; //store
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	60ba      	str	r2, [r7, #8]
 8001d1a:	78f9      	ldrb	r1, [r7, #3]
 8001d1c:	4a08      	ldr	r2, [pc, #32]	@ (8001d40 <shell_run+0xc8>)
 8001d1e:	54d1      	strb	r1, [r2, r3]
 8001d20:	e000      	b.n	8001d24 <shell_run+0xac>
				break;
 8001d22:	bf00      	nop
		while(reading) {
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1b4      	bne.n	8001c94 <shell_run+0x1c>
				}
			}
		}
		shell_exec(cmd_buffer);
 8001d2a:	4805      	ldr	r0, [pc, #20]	@ (8001d40 <shell_run+0xc8>)
 8001d2c:	f7ff ff36 	bl	8001b9c <shell_exec>
		uart_write(prompt, 2);
 8001d30:	e7a9      	b.n	8001c86 <shell_run+0xe>
 8001d32:	bf00      	nop
 8001d34:	20000008 	.word	0x20000008
 8001d38:	0800bccc 	.word	0x0800bccc
 8001d3c:	20000978 	.word	0x20000978
 8001d40:	200009a4 	.word	0x200009a4
 8001d44:	0800bcd0 	.word	0x0800bcd0
 8001d48:	20000004 	.word	0x20000004

08001d4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d56:	4b0c      	ldr	r3, [pc, #48]	@ (8001d88 <HAL_Init+0x3c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a0b      	ldr	r2, [pc, #44]	@ (8001d88 <HAL_Init+0x3c>)
 8001d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d60:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d62:	2003      	movs	r0, #3
 8001d64:	f000 f8df 	bl	8001f26 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d68:	200f      	movs	r0, #15
 8001d6a:	f7ff f983 	bl	8001074 <HAL_InitTick>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d002      	beq.n	8001d7a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	71fb      	strb	r3, [r7, #7]
 8001d78:	e001      	b.n	8001d7e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d7a:	f7ff f953 	bl	8001024 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40022000 	.word	0x40022000

08001d8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d90:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <HAL_IncTick+0x20>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <HAL_IncTick+0x24>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4a04      	ldr	r2, [pc, #16]	@ (8001db0 <HAL_IncTick+0x24>)
 8001d9e:	6013      	str	r3, [r2, #0]
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	20000010 	.word	0x20000010
 8001db0:	200009cc 	.word	0x200009cc

08001db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return uwTick;
 8001db8:	4b03      	ldr	r3, [pc, #12]	@ (8001dc8 <HAL_GetTick+0x14>)
 8001dba:	681b      	ldr	r3, [r3, #0]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	200009cc 	.word	0x200009cc

08001dcc <__NVIC_SetPriorityGrouping>:
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001de8:	4013      	ands	r3, r2
 8001dea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001df8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfe:	4a04      	ldr	r2, [pc, #16]	@ (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	60d3      	str	r3, [r2, #12]
}
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <__NVIC_GetPriorityGrouping>:
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e18:	4b04      	ldr	r3, [pc, #16]	@ (8001e2c <__NVIC_GetPriorityGrouping+0x18>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	0a1b      	lsrs	r3, r3, #8
 8001e1e:	f003 0307 	and.w	r3, r3, #7
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <__NVIC_EnableIRQ>:
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	db0b      	blt.n	8001e5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	f003 021f 	and.w	r2, r3, #31
 8001e48:	4907      	ldr	r1, [pc, #28]	@ (8001e68 <__NVIC_EnableIRQ+0x38>)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	095b      	lsrs	r3, r3, #5
 8001e50:	2001      	movs	r0, #1
 8001e52:	fa00 f202 	lsl.w	r2, r0, r2
 8001e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000e100 	.word	0xe000e100

08001e6c <__NVIC_SetPriority>:
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	6039      	str	r1, [r7, #0]
 8001e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	db0a      	blt.n	8001e96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	490c      	ldr	r1, [pc, #48]	@ (8001eb8 <__NVIC_SetPriority+0x4c>)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	0112      	lsls	r2, r2, #4
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	440b      	add	r3, r1
 8001e90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001e94:	e00a      	b.n	8001eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	4908      	ldr	r1, [pc, #32]	@ (8001ebc <__NVIC_SetPriority+0x50>)
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	3b04      	subs	r3, #4
 8001ea4:	0112      	lsls	r2, r2, #4
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	761a      	strb	r2, [r3, #24]
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000e100 	.word	0xe000e100
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <NVIC_EncodePriority>:
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b089      	sub	sp, #36	@ 0x24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f1c3 0307 	rsb	r3, r3, #7
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	bf28      	it	cs
 8001ede:	2304      	movcs	r3, #4
 8001ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	2b06      	cmp	r3, #6
 8001ee8:	d902      	bls.n	8001ef0 <NVIC_EncodePriority+0x30>
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3b03      	subs	r3, #3
 8001eee:	e000      	b.n	8001ef2 <NVIC_EncodePriority+0x32>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43da      	mvns	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	401a      	ands	r2, r3
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f08:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f12:	43d9      	mvns	r1, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f18:	4313      	orrs	r3, r2
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3724      	adds	r7, #36	@ 0x24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff ff4c 	bl	8001dcc <__NVIC_SetPriorityGrouping>
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f4e:	f7ff ff61 	bl	8001e14 <__NVIC_GetPriorityGrouping>
 8001f52:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	68b9      	ldr	r1, [r7, #8]
 8001f58:	6978      	ldr	r0, [r7, #20]
 8001f5a:	f7ff ffb1 	bl	8001ec0 <NVIC_EncodePriority>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f64:	4611      	mov	r1, r2
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff ff80 	bl	8001e6c <__NVIC_SetPriority>
}
 8001f6c:	bf00      	nop
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff ff54 	bl	8001e30 <__NVIC_EnableIRQ>
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e098      	b.n	80020d4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	4b4d      	ldr	r3, [pc, #308]	@ (80020e0 <HAL_DMA_Init+0x150>)
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d80f      	bhi.n	8001fce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	4b4b      	ldr	r3, [pc, #300]	@ (80020e4 <HAL_DMA_Init+0x154>)
 8001fb6:	4413      	add	r3, r2
 8001fb8:	4a4b      	ldr	r2, [pc, #300]	@ (80020e8 <HAL_DMA_Init+0x158>)
 8001fba:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbe:	091b      	lsrs	r3, r3, #4
 8001fc0:	009a      	lsls	r2, r3, #2
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a48      	ldr	r2, [pc, #288]	@ (80020ec <HAL_DMA_Init+0x15c>)
 8001fca:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fcc:	e00e      	b.n	8001fec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4b46      	ldr	r3, [pc, #280]	@ (80020f0 <HAL_DMA_Init+0x160>)
 8001fd6:	4413      	add	r3, r2
 8001fd8:	4a43      	ldr	r2, [pc, #268]	@ (80020e8 <HAL_DMA_Init+0x158>)
 8001fda:	fba2 2303 	umull	r2, r3, r2, r3
 8001fde:	091b      	lsrs	r3, r3, #4
 8001fe0:	009a      	lsls	r2, r3, #2
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a42      	ldr	r2, [pc, #264]	@ (80020f4 <HAL_DMA_Init+0x164>)
 8001fea:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002006:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002010:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800201c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002028:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	4313      	orrs	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002046:	d039      	beq.n	80020bc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204c:	4a27      	ldr	r2, [pc, #156]	@ (80020ec <HAL_DMA_Init+0x15c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d11a      	bne.n	8002088 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002052:	4b29      	ldr	r3, [pc, #164]	@ (80020f8 <HAL_DMA_Init+0x168>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205a:	f003 031c 	and.w	r3, r3, #28
 800205e:	210f      	movs	r1, #15
 8002060:	fa01 f303 	lsl.w	r3, r1, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	4924      	ldr	r1, [pc, #144]	@ (80020f8 <HAL_DMA_Init+0x168>)
 8002068:	4013      	ands	r3, r2
 800206a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800206c:	4b22      	ldr	r3, [pc, #136]	@ (80020f8 <HAL_DMA_Init+0x168>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6859      	ldr	r1, [r3, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002078:	f003 031c 	and.w	r3, r3, #28
 800207c:	fa01 f303 	lsl.w	r3, r1, r3
 8002080:	491d      	ldr	r1, [pc, #116]	@ (80020f8 <HAL_DMA_Init+0x168>)
 8002082:	4313      	orrs	r3, r2
 8002084:	600b      	str	r3, [r1, #0]
 8002086:	e019      	b.n	80020bc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002088:	4b1c      	ldr	r3, [pc, #112]	@ (80020fc <HAL_DMA_Init+0x16c>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002090:	f003 031c 	and.w	r3, r3, #28
 8002094:	210f      	movs	r1, #15
 8002096:	fa01 f303 	lsl.w	r3, r1, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	4917      	ldr	r1, [pc, #92]	@ (80020fc <HAL_DMA_Init+0x16c>)
 800209e:	4013      	ands	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80020a2:	4b16      	ldr	r3, [pc, #88]	@ (80020fc <HAL_DMA_Init+0x16c>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6859      	ldr	r1, [r3, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ae:	f003 031c 	and.w	r3, r3, #28
 80020b2:	fa01 f303 	lsl.w	r3, r1, r3
 80020b6:	4911      	ldr	r1, [pc, #68]	@ (80020fc <HAL_DMA_Init+0x16c>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	40020407 	.word	0x40020407
 80020e4:	bffdfff8 	.word	0xbffdfff8
 80020e8:	cccccccd 	.word	0xcccccccd
 80020ec:	40020000 	.word	0x40020000
 80020f0:	bffdfbf8 	.word	0xbffdfbf8
 80020f4:	40020400 	.word	0x40020400
 80020f8:	400200a8 	.word	0x400200a8
 80020fc:	400204a8 	.word	0x400204a8

08002100 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d008      	beq.n	800212a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2204      	movs	r2, #4
 800211c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e022      	b.n	8002170 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 020e 	bic.w	r2, r2, #14
 8002138:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0201 	bic.w	r2, r2, #1
 8002148:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214e:	f003 021c 	and.w	r2, r3, #28
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002156:	2101      	movs	r1, #1
 8002158:	fa01 f202 	lsl.w	r2, r1, r2
 800215c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800216e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002170:	4618      	mov	r0, r3
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002184:	2300      	movs	r3, #0
 8002186:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d005      	beq.n	80021a0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2204      	movs	r2, #4
 8002198:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	73fb      	strb	r3, [r7, #15]
 800219e:	e029      	b.n	80021f4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 020e 	bic.w	r2, r2, #14
 80021ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0201 	bic.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c4:	f003 021c 	and.w	r2, r3, #28
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021cc:	2101      	movs	r1, #1
 80021ce:	fa01 f202 	lsl.w	r2, r1, r2
 80021d2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	4798      	blx	r3
    }
  }
  return status;
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221a:	f003 031c 	and.w	r3, r3, #28
 800221e:	2204      	movs	r2, #4
 8002220:	409a      	lsls	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4013      	ands	r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d026      	beq.n	8002278 <HAL_DMA_IRQHandler+0x7a>
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d021      	beq.n	8002278 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0320 	and.w	r3, r3, #32
 800223e:	2b00      	cmp	r3, #0
 8002240:	d107      	bne.n	8002252 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0204 	bic.w	r2, r2, #4
 8002250:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002256:	f003 021c 	and.w	r2, r3, #28
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225e:	2104      	movs	r1, #4
 8002260:	fa01 f202 	lsl.w	r2, r1, r2
 8002264:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	2b00      	cmp	r3, #0
 800226c:	d071      	beq.n	8002352 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002276:	e06c      	b.n	8002352 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227c:	f003 031c 	and.w	r3, r3, #28
 8002280:	2202      	movs	r2, #2
 8002282:	409a      	lsls	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4013      	ands	r3, r2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d02e      	beq.n	80022ea <HAL_DMA_IRQHandler+0xec>
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d029      	beq.n	80022ea <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0320 	and.w	r3, r3, #32
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10b      	bne.n	80022bc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 020a 	bic.w	r2, r2, #10
 80022b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c0:	f003 021c 	and.w	r2, r3, #28
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c8:	2102      	movs	r1, #2
 80022ca:	fa01 f202 	lsl.w	r2, r1, r2
 80022ce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d038      	beq.n	8002352 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80022e8:	e033      	b.n	8002352 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ee:	f003 031c 	and.w	r3, r3, #28
 80022f2:	2208      	movs	r2, #8
 80022f4:	409a      	lsls	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d02a      	beq.n	8002354 <HAL_DMA_IRQHandler+0x156>
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	2b00      	cmp	r3, #0
 8002306:	d025      	beq.n	8002354 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 020e 	bic.w	r2, r2, #14
 8002316:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231c:	f003 021c 	and.w	r2, r3, #28
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002324:	2101      	movs	r1, #1
 8002326:	fa01 f202 	lsl.w	r2, r1, r2
 800232a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002346:	2b00      	cmp	r3, #0
 8002348:	d004      	beq.n	8002354 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002352:	bf00      	nop
 8002354:	bf00      	nop
}
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800235c:	b480      	push	{r7}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800236a:	e17f      	b.n	800266c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	2101      	movs	r1, #1
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	fa01 f303 	lsl.w	r3, r1, r3
 8002378:	4013      	ands	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 8171 	beq.w	8002666 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	2b01      	cmp	r3, #1
 800238e:	d005      	beq.n	800239c <HAL_GPIO_Init+0x40>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d130      	bne.n	80023fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	2203      	movs	r2, #3
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4013      	ands	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023d2:	2201      	movs	r2, #1
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43db      	mvns	r3, r3
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4013      	ands	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	091b      	lsrs	r3, r3, #4
 80023e8:	f003 0201 	and.w	r2, r3, #1
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	2b03      	cmp	r3, #3
 8002408:	d118      	bne.n	800243c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800240e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002410:	2201      	movs	r2, #1
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4013      	ands	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	08db      	lsrs	r3, r3, #3
 8002426:	f003 0201 	and.w	r2, r3, #1
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	4313      	orrs	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	2b03      	cmp	r3, #3
 8002446:	d017      	beq.n	8002478 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	2203      	movs	r2, #3
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4013      	ands	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d123      	bne.n	80024cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	08da      	lsrs	r2, r3, #3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3208      	adds	r2, #8
 800248c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002490:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	220f      	movs	r2, #15
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	08da      	lsrs	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3208      	adds	r2, #8
 80024c6:	6939      	ldr	r1, [r7, #16]
 80024c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	2203      	movs	r2, #3
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 0203 	and.w	r2, r3, #3
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 80ac 	beq.w	8002666 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800250e:	4b5f      	ldr	r3, [pc, #380]	@ (800268c <HAL_GPIO_Init+0x330>)
 8002510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002512:	4a5e      	ldr	r2, [pc, #376]	@ (800268c <HAL_GPIO_Init+0x330>)
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	6613      	str	r3, [r2, #96]	@ 0x60
 800251a:	4b5c      	ldr	r3, [pc, #368]	@ (800268c <HAL_GPIO_Init+0x330>)
 800251c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002526:	4a5a      	ldr	r2, [pc, #360]	@ (8002690 <HAL_GPIO_Init+0x334>)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	089b      	lsrs	r3, r3, #2
 800252c:	3302      	adds	r3, #2
 800252e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002532:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	220f      	movs	r2, #15
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43db      	mvns	r3, r3
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4013      	ands	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002550:	d025      	beq.n	800259e <HAL_GPIO_Init+0x242>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a4f      	ldr	r2, [pc, #316]	@ (8002694 <HAL_GPIO_Init+0x338>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d01f      	beq.n	800259a <HAL_GPIO_Init+0x23e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a4e      	ldr	r2, [pc, #312]	@ (8002698 <HAL_GPIO_Init+0x33c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d019      	beq.n	8002596 <HAL_GPIO_Init+0x23a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a4d      	ldr	r2, [pc, #308]	@ (800269c <HAL_GPIO_Init+0x340>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d013      	beq.n	8002592 <HAL_GPIO_Init+0x236>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a4c      	ldr	r2, [pc, #304]	@ (80026a0 <HAL_GPIO_Init+0x344>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d00d      	beq.n	800258e <HAL_GPIO_Init+0x232>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a4b      	ldr	r2, [pc, #300]	@ (80026a4 <HAL_GPIO_Init+0x348>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d007      	beq.n	800258a <HAL_GPIO_Init+0x22e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a4a      	ldr	r2, [pc, #296]	@ (80026a8 <HAL_GPIO_Init+0x34c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d101      	bne.n	8002586 <HAL_GPIO_Init+0x22a>
 8002582:	2306      	movs	r3, #6
 8002584:	e00c      	b.n	80025a0 <HAL_GPIO_Init+0x244>
 8002586:	2307      	movs	r3, #7
 8002588:	e00a      	b.n	80025a0 <HAL_GPIO_Init+0x244>
 800258a:	2305      	movs	r3, #5
 800258c:	e008      	b.n	80025a0 <HAL_GPIO_Init+0x244>
 800258e:	2304      	movs	r3, #4
 8002590:	e006      	b.n	80025a0 <HAL_GPIO_Init+0x244>
 8002592:	2303      	movs	r3, #3
 8002594:	e004      	b.n	80025a0 <HAL_GPIO_Init+0x244>
 8002596:	2302      	movs	r3, #2
 8002598:	e002      	b.n	80025a0 <HAL_GPIO_Init+0x244>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <HAL_GPIO_Init+0x244>
 800259e:	2300      	movs	r3, #0
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	f002 0203 	and.w	r2, r2, #3
 80025a6:	0092      	lsls	r2, r2, #2
 80025a8:	4093      	lsls	r3, r2
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025b0:	4937      	ldr	r1, [pc, #220]	@ (8002690 <HAL_GPIO_Init+0x334>)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	089b      	lsrs	r3, r3, #2
 80025b6:	3302      	adds	r3, #2
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025be:	4b3b      	ldr	r3, [pc, #236]	@ (80026ac <HAL_GPIO_Init+0x350>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4013      	ands	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4313      	orrs	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025e2:	4a32      	ldr	r2, [pc, #200]	@ (80026ac <HAL_GPIO_Init+0x350>)
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025e8:	4b30      	ldr	r3, [pc, #192]	@ (80026ac <HAL_GPIO_Init+0x350>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4013      	ands	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4313      	orrs	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800260c:	4a27      	ldr	r2, [pc, #156]	@ (80026ac <HAL_GPIO_Init+0x350>)
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002612:	4b26      	ldr	r3, [pc, #152]	@ (80026ac <HAL_GPIO_Init+0x350>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	43db      	mvns	r3, r3
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4013      	ands	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002636:	4a1d      	ldr	r2, [pc, #116]	@ (80026ac <HAL_GPIO_Init+0x350>)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800263c:	4b1b      	ldr	r3, [pc, #108]	@ (80026ac <HAL_GPIO_Init+0x350>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	43db      	mvns	r3, r3
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4013      	ands	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4313      	orrs	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002660:	4a12      	ldr	r2, [pc, #72]	@ (80026ac <HAL_GPIO_Init+0x350>)
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	3301      	adds	r3, #1
 800266a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	fa22 f303 	lsr.w	r3, r2, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	f47f ae78 	bne.w	800236c <HAL_GPIO_Init+0x10>
  }
}
 800267c:	bf00      	nop
 800267e:	bf00      	nop
 8002680:	371c      	adds	r7, #28
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000
 8002690:	40010000 	.word	0x40010000
 8002694:	48000400 	.word	0x48000400
 8002698:	48000800 	.word	0x48000800
 800269c:	48000c00 	.word	0x48000c00
 80026a0:	48001000 	.word	0x48001000
 80026a4:	48001400 	.word	0x48001400
 80026a8:	48001800 	.word	0x48001800
 80026ac:	40010400 	.word	0x40010400

080026b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	807b      	strh	r3, [r7, #2]
 80026bc:	4613      	mov	r3, r2
 80026be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026c0:	787b      	ldrb	r3, [r7, #1]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026c6:	887a      	ldrh	r2, [r7, #2]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026cc:	e002      	b.n	80026d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026ce:	887a      	ldrh	r2, [r7, #2]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026f2:	887a      	ldrh	r2, [r7, #2]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4013      	ands	r3, r2
 80026f8:	041a      	lsls	r2, r3, #16
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	43d9      	mvns	r1, r3
 80026fe:	887b      	ldrh	r3, [r7, #2]
 8002700:	400b      	ands	r3, r1
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	619a      	str	r2, [r3, #24]
}
 8002708:	bf00      	nop
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e08d      	b.n	8002842 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d106      	bne.n	8002740 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7fe f830 	bl	80007a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2224      	movs	r2, #36	@ 0x24
 8002744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0201 	bic.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002764:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002774:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d107      	bne.n	800278e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	e006      	b.n	800279c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800279a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d108      	bne.n	80027b6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027b2:	605a      	str	r2, [r3, #4]
 80027b4:	e007      	b.n	80027c6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691a      	ldr	r2, [r3, #16]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69d9      	ldr	r1, [r3, #28]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a1a      	ldr	r2, [r3, #32]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0201 	orr.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2220      	movs	r2, #32
 800282e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af02      	add	r7, sp, #8
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	4608      	mov	r0, r1
 8002856:	4611      	mov	r1, r2
 8002858:	461a      	mov	r2, r3
 800285a:	4603      	mov	r3, r0
 800285c:	817b      	strh	r3, [r7, #10]
 800285e:	460b      	mov	r3, r1
 8002860:	813b      	strh	r3, [r7, #8]
 8002862:	4613      	mov	r3, r2
 8002864:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b20      	cmp	r3, #32
 8002870:	f040 80fd 	bne.w	8002a6e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002874:	6a3b      	ldr	r3, [r7, #32]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <HAL_I2C_Mem_Read+0x34>
 800287a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800287c:	2b00      	cmp	r3, #0
 800287e:	d105      	bne.n	800288c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002886:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e0f1      	b.n	8002a70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002892:	2b01      	cmp	r3, #1
 8002894:	d101      	bne.n	800289a <HAL_I2C_Mem_Read+0x4e>
 8002896:	2302      	movs	r3, #2
 8002898:	e0ea      	b.n	8002a70 <HAL_I2C_Mem_Read+0x224>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028a2:	f7ff fa87 	bl	8001db4 <HAL_GetTick>
 80028a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	2319      	movs	r3, #25
 80028ae:	2201      	movs	r2, #1
 80028b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 f95b 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0d5      	b.n	8002a70 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2222      	movs	r2, #34	@ 0x22
 80028c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2240      	movs	r2, #64	@ 0x40
 80028d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a3a      	ldr	r2, [r7, #32]
 80028de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80028e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028ec:	88f8      	ldrh	r0, [r7, #6]
 80028ee:	893a      	ldrh	r2, [r7, #8]
 80028f0:	8979      	ldrh	r1, [r7, #10]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	9301      	str	r3, [sp, #4]
 80028f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	4603      	mov	r3, r0
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 f8bf 	bl	8002a80 <I2C_RequestMemoryRead>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0ad      	b.n	8002a70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	2bff      	cmp	r3, #255	@ 0xff
 800291c:	d90e      	bls.n	800293c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002928:	b2da      	uxtb	r2, r3
 800292a:	8979      	ldrh	r1, [r7, #10]
 800292c:	4b52      	ldr	r3, [pc, #328]	@ (8002a78 <HAL_I2C_Mem_Read+0x22c>)
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 fadf 	bl	8002ef8 <I2C_TransferConfig>
 800293a:	e00f      	b.n	800295c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800294a:	b2da      	uxtb	r2, r3
 800294c:	8979      	ldrh	r1, [r7, #10]
 800294e:	4b4a      	ldr	r3, [pc, #296]	@ (8002a78 <HAL_I2C_Mem_Read+0x22c>)
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 face 	bl	8002ef8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002962:	2200      	movs	r2, #0
 8002964:	2104      	movs	r1, #4
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 f902 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e07c      	b.n	8002a70 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002992:	3b01      	subs	r3, #1
 8002994:	b29a      	uxth	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800299e:	b29b      	uxth	r3, r3
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d034      	beq.n	8002a1c <HAL_I2C_Mem_Read+0x1d0>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d130      	bne.n	8002a1c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c0:	2200      	movs	r2, #0
 80029c2:	2180      	movs	r1, #128	@ 0x80
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 f8d3 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e04d      	b.n	8002a70 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d8:	b29b      	uxth	r3, r3
 80029da:	2bff      	cmp	r3, #255	@ 0xff
 80029dc:	d90e      	bls.n	80029fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2201      	movs	r2, #1
 80029e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	8979      	ldrh	r1, [r7, #10]
 80029ec:	2300      	movs	r3, #0
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 fa7f 	bl	8002ef8 <I2C_TransferConfig>
 80029fa:	e00f      	b.n	8002a1c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	8979      	ldrh	r1, [r7, #10]
 8002a0e:	2300      	movs	r3, #0
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 fa6e 	bl	8002ef8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d19a      	bne.n	800295c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f940 	bl	8002cb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e01a      	b.n	8002a70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6859      	ldr	r1, [r3, #4]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a7c <HAL_I2C_Mem_Read+0x230>)
 8002a4e:	400b      	ands	r3, r1
 8002a50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2220      	movs	r2, #32
 8002a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	e000      	b.n	8002a70 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002a6e:	2302      	movs	r3, #2
  }
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	80002400 	.word	0x80002400
 8002a7c:	fe00e800 	.word	0xfe00e800

08002a80 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	4608      	mov	r0, r1
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4603      	mov	r3, r0
 8002a90:	817b      	strh	r3, [r7, #10]
 8002a92:	460b      	mov	r3, r1
 8002a94:	813b      	strh	r3, [r7, #8]
 8002a96:	4613      	mov	r3, r2
 8002a98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	8979      	ldrh	r1, [r7, #10]
 8002aa0:	4b20      	ldr	r3, [pc, #128]	@ (8002b24 <I2C_RequestMemoryRead+0xa4>)
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 fa26 	bl	8002ef8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aac:	69fa      	ldr	r2, [r7, #28]
 8002aae:	69b9      	ldr	r1, [r7, #24]
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 f8b6 	bl	8002c22 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e02c      	b.n	8002b1a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ac0:	88fb      	ldrh	r3, [r7, #6]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d105      	bne.n	8002ad2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ac6:	893b      	ldrh	r3, [r7, #8]
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ad0:	e015      	b.n	8002afe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ad2:	893b      	ldrh	r3, [r7, #8]
 8002ad4:	0a1b      	lsrs	r3, r3, #8
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ae0:	69fa      	ldr	r2, [r7, #28]
 8002ae2:	69b9      	ldr	r1, [r7, #24]
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f89c 	bl	8002c22 <I2C_WaitOnTXISFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e012      	b.n	8002b1a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002af4:	893b      	ldrh	r3, [r7, #8]
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	2200      	movs	r2, #0
 8002b06:	2140      	movs	r1, #64	@ 0x40
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 f831 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e000      	b.n	8002b1a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	80002000 	.word	0x80002000

08002b28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d103      	bne.n	8002b46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2200      	movs	r2, #0
 8002b44:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d007      	beq.n	8002b64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699a      	ldr	r2, [r3, #24]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0201 	orr.w	r2, r2, #1
 8002b62:	619a      	str	r2, [r3, #24]
  }
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b80:	e03b      	b.n	8002bfa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	6839      	ldr	r1, [r7, #0]
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 f8d6 	bl	8002d38 <I2C_IsErrorOccurred>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e041      	b.n	8002c1a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b9c:	d02d      	beq.n	8002bfa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b9e:	f7ff f909 	bl	8001db4 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d302      	bcc.n	8002bb4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d122      	bne.n	8002bfa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699a      	ldr	r2, [r3, #24]
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	bf0c      	ite	eq
 8002bc4:	2301      	moveq	r3, #1
 8002bc6:	2300      	movne	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	461a      	mov	r2, r3
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d113      	bne.n	8002bfa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd6:	f043 0220 	orr.w	r2, r3, #32
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e00f      	b.n	8002c1a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	699a      	ldr	r2, [r3, #24]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4013      	ands	r3, r2
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	bf0c      	ite	eq
 8002c0a:	2301      	moveq	r3, #1
 8002c0c:	2300      	movne	r3, #0
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	461a      	mov	r2, r3
 8002c12:	79fb      	ldrb	r3, [r7, #7]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d0b4      	beq.n	8002b82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b084      	sub	sp, #16
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	60f8      	str	r0, [r7, #12]
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c2e:	e033      	b.n	8002c98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	68b9      	ldr	r1, [r7, #8]
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 f87f 	bl	8002d38 <I2C_IsErrorOccurred>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e031      	b.n	8002ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c4a:	d025      	beq.n	8002c98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4c:	f7ff f8b2 	bl	8001db4 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d302      	bcc.n	8002c62 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d11a      	bne.n	8002c98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d013      	beq.n	8002c98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c74:	f043 0220 	orr.w	r2, r3, #32
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e007      	b.n	8002ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d1c4      	bne.n	8002c30 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cbc:	e02f      	b.n	8002d1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 f838 	bl	8002d38 <I2C_IsErrorOccurred>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e02d      	b.n	8002d2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd2:	f7ff f86f 	bl	8001db4 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d302      	bcc.n	8002ce8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d11a      	bne.n	8002d1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	f003 0320 	and.w	r3, r3, #32
 8002cf2:	2b20      	cmp	r3, #32
 8002cf4:	d013      	beq.n	8002d1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfa:	f043 0220 	orr.w	r2, r3, #32
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e007      	b.n	8002d2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f003 0320 	and.w	r3, r3, #32
 8002d28:	2b20      	cmp	r3, #32
 8002d2a:	d1c8      	bne.n	8002cbe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08a      	sub	sp, #40	@ 0x28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d52:	2300      	movs	r3, #0
 8002d54:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d068      	beq.n	8002e36 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2210      	movs	r2, #16
 8002d6a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d6c:	e049      	b.n	8002e02 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d74:	d045      	beq.n	8002e02 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d76:	f7ff f81d 	bl	8001db4 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d302      	bcc.n	8002d8c <I2C_IsErrorOccurred+0x54>
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d13a      	bne.n	8002e02 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d96:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d9e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002daa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dae:	d121      	bne.n	8002df4 <I2C_IsErrorOccurred+0xbc>
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002db6:	d01d      	beq.n	8002df4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002db8:	7cfb      	ldrb	r3, [r7, #19]
 8002dba:	2b20      	cmp	r3, #32
 8002dbc:	d01a      	beq.n	8002df4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002dcc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002dce:	f7fe fff1 	bl	8001db4 <HAL_GetTick>
 8002dd2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dd4:	e00e      	b.n	8002df4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002dd6:	f7fe ffed 	bl	8001db4 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b19      	cmp	r3, #25
 8002de2:	d907      	bls.n	8002df4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	f043 0320 	orr.w	r3, r3, #32
 8002dea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002df2:	e006      	b.n	8002e02 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	f003 0320 	and.w	r3, r3, #32
 8002dfe:	2b20      	cmp	r3, #32
 8002e00:	d1e9      	bne.n	8002dd6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	f003 0320 	and.w	r3, r3, #32
 8002e0c:	2b20      	cmp	r3, #32
 8002e0e:	d003      	beq.n	8002e18 <I2C_IsErrorOccurred+0xe0>
 8002e10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0aa      	beq.n	8002d6e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d103      	bne.n	8002e28 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2220      	movs	r2, #32
 8002e26:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	f043 0304 	orr.w	r3, r3, #4
 8002e2e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00b      	beq.n	8002e60 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00b      	beq.n	8002e82 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	f043 0308 	orr.w	r3, r3, #8
 8002e70:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00b      	beq.n	8002ea4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	f043 0302 	orr.w	r3, r3, #2
 8002e92:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d01c      	beq.n	8002ee6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f7ff fe3b 	bl	8002b28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6859      	ldr	r1, [r3, #4]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef4 <I2C_IsErrorOccurred+0x1bc>)
 8002ebe:	400b      	ands	r3, r1
 8002ec0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3728      	adds	r7, #40	@ 0x28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	fe00e800 	.word	0xfe00e800

08002ef8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	607b      	str	r3, [r7, #4]
 8002f02:	460b      	mov	r3, r1
 8002f04:	817b      	strh	r3, [r7, #10]
 8002f06:	4613      	mov	r3, r2
 8002f08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f0a:	897b      	ldrh	r3, [r7, #10]
 8002f0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f10:	7a7b      	ldrb	r3, [r7, #9]
 8002f12:	041b      	lsls	r3, r3, #16
 8002f14:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f18:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f26:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	0d5b      	lsrs	r3, r3, #21
 8002f32:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002f36:	4b08      	ldr	r3, [pc, #32]	@ (8002f58 <I2C_TransferConfig+0x60>)
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	ea02 0103 	and.w	r1, r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f4a:	bf00      	nop
 8002f4c:	371c      	adds	r7, #28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	03ff63ff 	.word	0x03ff63ff

08002f5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b20      	cmp	r3, #32
 8002f70:	d138      	bne.n	8002fe4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e032      	b.n	8002fe6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2224      	movs	r2, #36	@ 0x24
 8002f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0201 	bic.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002fae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6819      	ldr	r1, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	e000      	b.n	8002fe6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fe4:	2302      	movs	r3, #2
  }
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b085      	sub	sp, #20
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b20      	cmp	r3, #32
 8003006:	d139      	bne.n	800307c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003012:	2302      	movs	r3, #2
 8003014:	e033      	b.n	800307e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2224      	movs	r2, #36	@ 0x24
 8003022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0201 	bic.w	r2, r2, #1
 8003034:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003044:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	021b      	lsls	r3, r3, #8
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4313      	orrs	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0201 	orr.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003078:	2300      	movs	r3, #0
 800307a:	e000      	b.n	800307e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800307c:	2302      	movs	r3, #2
  }
}
 800307e:	4618      	mov	r0, r3
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
	...

0800308c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003090:	4b04      	ldr	r3, [pc, #16]	@ (80030a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003098:	4618      	mov	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	40007000 	.word	0x40007000

080030a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030b6:	d130      	bne.n	800311a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80030b8:	4b23      	ldr	r3, [pc, #140]	@ (8003148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80030c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030c4:	d038      	beq.n	8003138 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030c6:	4b20      	ldr	r3, [pc, #128]	@ (8003148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030d6:	4b1d      	ldr	r3, [pc, #116]	@ (800314c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2232      	movs	r2, #50	@ 0x32
 80030dc:	fb02 f303 	mul.w	r3, r2, r3
 80030e0:	4a1b      	ldr	r2, [pc, #108]	@ (8003150 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	0c9b      	lsrs	r3, r3, #18
 80030e8:	3301      	adds	r3, #1
 80030ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030ec:	e002      	b.n	80030f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	3b01      	subs	r3, #1
 80030f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030f4:	4b14      	ldr	r3, [pc, #80]	@ (8003148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003100:	d102      	bne.n	8003108 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f2      	bne.n	80030ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003108:	4b0f      	ldr	r3, [pc, #60]	@ (8003148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003110:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003114:	d110      	bne.n	8003138 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e00f      	b.n	800313a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800311a:	4b0b      	ldr	r3, [pc, #44]	@ (8003148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003126:	d007      	beq.n	8003138 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003128:	4b07      	ldr	r3, [pc, #28]	@ (8003148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003130:	4a05      	ldr	r2, [pc, #20]	@ (8003148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003132:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003136:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40007000 	.word	0x40007000
 800314c:	20000000 	.word	0x20000000
 8003150:	431bde83 	.word	0x431bde83

08003154 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b088      	sub	sp, #32
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e3ca      	b.n	80038fc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003166:	4b97      	ldr	r3, [pc, #604]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003170:	4b94      	ldr	r3, [pc, #592]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0303 	and.w	r3, r3, #3
 8003178:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0310 	and.w	r3, r3, #16
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 80e4 	beq.w	8003350 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d007      	beq.n	800319e <HAL_RCC_OscConfig+0x4a>
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	2b0c      	cmp	r3, #12
 8003192:	f040 808b 	bne.w	80032ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2b01      	cmp	r3, #1
 800319a:	f040 8087 	bne.w	80032ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800319e:	4b89      	ldr	r3, [pc, #548]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <HAL_RCC_OscConfig+0x62>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e3a2      	b.n	80038fc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1a      	ldr	r2, [r3, #32]
 80031ba:	4b82      	ldr	r3, [pc, #520]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d004      	beq.n	80031d0 <HAL_RCC_OscConfig+0x7c>
 80031c6:	4b7f      	ldr	r3, [pc, #508]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031ce:	e005      	b.n	80031dc <HAL_RCC_OscConfig+0x88>
 80031d0:	4b7c      	ldr	r3, [pc, #496]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 80031d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031d6:	091b      	lsrs	r3, r3, #4
 80031d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031dc:	4293      	cmp	r3, r2
 80031de:	d223      	bcs.n	8003228 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f000 fd87 	bl	8003cf8 <RCC_SetFlashLatencyFromMSIRange>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e383      	b.n	80038fc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031f4:	4b73      	ldr	r3, [pc, #460]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a72      	ldr	r2, [pc, #456]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 80031fa:	f043 0308 	orr.w	r3, r3, #8
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	4b70      	ldr	r3, [pc, #448]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	496d      	ldr	r1, [pc, #436]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 800320e:	4313      	orrs	r3, r2
 8003210:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003212:	4b6c      	ldr	r3, [pc, #432]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	021b      	lsls	r3, r3, #8
 8003220:	4968      	ldr	r1, [pc, #416]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 8003222:	4313      	orrs	r3, r2
 8003224:	604b      	str	r3, [r1, #4]
 8003226:	e025      	b.n	8003274 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003228:	4b66      	ldr	r3, [pc, #408]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a65      	ldr	r2, [pc, #404]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 800322e:	f043 0308 	orr.w	r3, r3, #8
 8003232:	6013      	str	r3, [r2, #0]
 8003234:	4b63      	ldr	r3, [pc, #396]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	4960      	ldr	r1, [pc, #384]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 8003242:	4313      	orrs	r3, r2
 8003244:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003246:	4b5f      	ldr	r3, [pc, #380]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	021b      	lsls	r3, r3, #8
 8003254:	495b      	ldr	r1, [pc, #364]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 8003256:	4313      	orrs	r3, r2
 8003258:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d109      	bne.n	8003274 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	4618      	mov	r0, r3
 8003266:	f000 fd47 	bl	8003cf8 <RCC_SetFlashLatencyFromMSIRange>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e343      	b.n	80038fc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003274:	f000 fc4a 	bl	8003b0c <HAL_RCC_GetSysClockFreq>
 8003278:	4602      	mov	r2, r0
 800327a:	4b52      	ldr	r3, [pc, #328]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	091b      	lsrs	r3, r3, #4
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	4950      	ldr	r1, [pc, #320]	@ (80033c8 <HAL_RCC_OscConfig+0x274>)
 8003286:	5ccb      	ldrb	r3, [r1, r3]
 8003288:	f003 031f 	and.w	r3, r3, #31
 800328c:	fa22 f303 	lsr.w	r3, r2, r3
 8003290:	4a4e      	ldr	r2, [pc, #312]	@ (80033cc <HAL_RCC_OscConfig+0x278>)
 8003292:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003294:	4b4e      	ldr	r3, [pc, #312]	@ (80033d0 <HAL_RCC_OscConfig+0x27c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f7fd feeb 	bl	8001074 <HAL_InitTick>
 800329e:	4603      	mov	r3, r0
 80032a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d052      	beq.n	800334e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
 80032aa:	e327      	b.n	80038fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d032      	beq.n	800331a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032b4:	4b43      	ldr	r3, [pc, #268]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a42      	ldr	r2, [pc, #264]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 80032ba:	f043 0301 	orr.w	r3, r3, #1
 80032be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032c0:	f7fe fd78 	bl	8001db4 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032c8:	f7fe fd74 	bl	8001db4 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e310      	b.n	80038fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032da:	4b3a      	ldr	r3, [pc, #232]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f0      	beq.n	80032c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032e6:	4b37      	ldr	r3, [pc, #220]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a36      	ldr	r2, [pc, #216]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 80032ec:	f043 0308 	orr.w	r3, r3, #8
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	4b34      	ldr	r3, [pc, #208]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	4931      	ldr	r1, [pc, #196]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 8003300:	4313      	orrs	r3, r2
 8003302:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003304:	4b2f      	ldr	r3, [pc, #188]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	021b      	lsls	r3, r3, #8
 8003312:	492c      	ldr	r1, [pc, #176]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 8003314:	4313      	orrs	r3, r2
 8003316:	604b      	str	r3, [r1, #4]
 8003318:	e01a      	b.n	8003350 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800331a:	4b2a      	ldr	r3, [pc, #168]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a29      	ldr	r2, [pc, #164]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 8003320:	f023 0301 	bic.w	r3, r3, #1
 8003324:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003326:	f7fe fd45 	bl	8001db4 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800332e:	f7fe fd41 	bl	8001db4 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e2dd      	b.n	80038fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003340:	4b20      	ldr	r3, [pc, #128]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1f0      	bne.n	800332e <HAL_RCC_OscConfig+0x1da>
 800334c:	e000      	b.n	8003350 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800334e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b00      	cmp	r3, #0
 800335a:	d074      	beq.n	8003446 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	2b08      	cmp	r3, #8
 8003360:	d005      	beq.n	800336e <HAL_RCC_OscConfig+0x21a>
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	2b0c      	cmp	r3, #12
 8003366:	d10e      	bne.n	8003386 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	2b03      	cmp	r3, #3
 800336c:	d10b      	bne.n	8003386 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800336e:	4b15      	ldr	r3, [pc, #84]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d064      	beq.n	8003444 <HAL_RCC_OscConfig+0x2f0>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d160      	bne.n	8003444 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e2ba      	b.n	80038fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800338e:	d106      	bne.n	800339e <HAL_RCC_OscConfig+0x24a>
 8003390:	4b0c      	ldr	r3, [pc, #48]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a0b      	ldr	r2, [pc, #44]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 8003396:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	e026      	b.n	80033ec <HAL_RCC_OscConfig+0x298>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033a6:	d115      	bne.n	80033d4 <HAL_RCC_OscConfig+0x280>
 80033a8:	4b06      	ldr	r3, [pc, #24]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a05      	ldr	r2, [pc, #20]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 80033ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033b2:	6013      	str	r3, [r2, #0]
 80033b4:	4b03      	ldr	r3, [pc, #12]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a02      	ldr	r2, [pc, #8]	@ (80033c4 <HAL_RCC_OscConfig+0x270>)
 80033ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033be:	6013      	str	r3, [r2, #0]
 80033c0:	e014      	b.n	80033ec <HAL_RCC_OscConfig+0x298>
 80033c2:	bf00      	nop
 80033c4:	40021000 	.word	0x40021000
 80033c8:	0800bce0 	.word	0x0800bce0
 80033cc:	20000000 	.word	0x20000000
 80033d0:	2000000c 	.word	0x2000000c
 80033d4:	4ba0      	ldr	r3, [pc, #640]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a9f      	ldr	r2, [pc, #636]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 80033da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	4b9d      	ldr	r3, [pc, #628]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a9c      	ldr	r2, [pc, #624]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 80033e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d013      	beq.n	800341c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f4:	f7fe fcde 	bl	8001db4 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033fc:	f7fe fcda 	bl	8001db4 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b64      	cmp	r3, #100	@ 0x64
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e276      	b.n	80038fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800340e:	4b92      	ldr	r3, [pc, #584]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCC_OscConfig+0x2a8>
 800341a:	e014      	b.n	8003446 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341c:	f7fe fcca 	bl	8001db4 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003424:	f7fe fcc6 	bl	8001db4 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b64      	cmp	r3, #100	@ 0x64
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e262      	b.n	80038fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003436:	4b88      	ldr	r3, [pc, #544]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0x2d0>
 8003442:	e000      	b.n	8003446 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d060      	beq.n	8003514 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	2b04      	cmp	r3, #4
 8003456:	d005      	beq.n	8003464 <HAL_RCC_OscConfig+0x310>
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	2b0c      	cmp	r3, #12
 800345c:	d119      	bne.n	8003492 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	2b02      	cmp	r3, #2
 8003462:	d116      	bne.n	8003492 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003464:	4b7c      	ldr	r3, [pc, #496]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <HAL_RCC_OscConfig+0x328>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e23f      	b.n	80038fc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347c:	4b76      	ldr	r3, [pc, #472]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	061b      	lsls	r3, r3, #24
 800348a:	4973      	ldr	r1, [pc, #460]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 800348c:	4313      	orrs	r3, r2
 800348e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003490:	e040      	b.n	8003514 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d023      	beq.n	80034e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800349a:	4b6f      	ldr	r3, [pc, #444]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a6e      	ldr	r2, [pc, #440]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 80034a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a6:	f7fe fc85 	bl	8001db4 <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ae:	f7fe fc81 	bl	8001db4 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e21d      	b.n	80038fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034c0:	4b65      	ldr	r3, [pc, #404]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0f0      	beq.n	80034ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034cc:	4b62      	ldr	r3, [pc, #392]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	061b      	lsls	r3, r3, #24
 80034da:	495f      	ldr	r1, [pc, #380]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	604b      	str	r3, [r1, #4]
 80034e0:	e018      	b.n	8003514 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034e2:	4b5d      	ldr	r3, [pc, #372]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a5c      	ldr	r2, [pc, #368]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 80034e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ee:	f7fe fc61 	bl	8001db4 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f6:	f7fe fc5d 	bl	8001db4 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e1f9      	b.n	80038fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003508:	4b53      	ldr	r3, [pc, #332]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1f0      	bne.n	80034f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0308 	and.w	r3, r3, #8
 800351c:	2b00      	cmp	r3, #0
 800351e:	d03c      	beq.n	800359a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d01c      	beq.n	8003562 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003528:	4b4b      	ldr	r3, [pc, #300]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 800352a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800352e:	4a4a      	ldr	r2, [pc, #296]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003538:	f7fe fc3c 	bl	8001db4 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003540:	f7fe fc38 	bl	8001db4 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e1d4      	b.n	80038fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003552:	4b41      	ldr	r3, [pc, #260]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 8003554:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0ef      	beq.n	8003540 <HAL_RCC_OscConfig+0x3ec>
 8003560:	e01b      	b.n	800359a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003562:	4b3d      	ldr	r3, [pc, #244]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 8003564:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003568:	4a3b      	ldr	r2, [pc, #236]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 800356a:	f023 0301 	bic.w	r3, r3, #1
 800356e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003572:	f7fe fc1f 	bl	8001db4 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800357a:	f7fe fc1b 	bl	8001db4 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e1b7      	b.n	80038fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800358c:	4b32      	ldr	r3, [pc, #200]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 800358e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1ef      	bne.n	800357a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 80a6 	beq.w	80036f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035a8:	2300      	movs	r3, #0
 80035aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80035ac:	4b2a      	ldr	r3, [pc, #168]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 80035ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10d      	bne.n	80035d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b8:	4b27      	ldr	r3, [pc, #156]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 80035ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035bc:	4a26      	ldr	r2, [pc, #152]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 80035be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80035c4:	4b24      	ldr	r3, [pc, #144]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 80035c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d0:	2301      	movs	r3, #1
 80035d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035d4:	4b21      	ldr	r3, [pc, #132]	@ (800365c <HAL_RCC_OscConfig+0x508>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d118      	bne.n	8003612 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035e0:	4b1e      	ldr	r3, [pc, #120]	@ (800365c <HAL_RCC_OscConfig+0x508>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a1d      	ldr	r2, [pc, #116]	@ (800365c <HAL_RCC_OscConfig+0x508>)
 80035e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ec:	f7fe fbe2 	bl	8001db4 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f4:	f7fe fbde 	bl	8001db4 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e17a      	b.n	80038fc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003606:	4b15      	ldr	r3, [pc, #84]	@ (800365c <HAL_RCC_OscConfig+0x508>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0f0      	beq.n	80035f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d108      	bne.n	800362c <HAL_RCC_OscConfig+0x4d8>
 800361a:	4b0f      	ldr	r3, [pc, #60]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 800361c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003620:	4a0d      	ldr	r2, [pc, #52]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 8003622:	f043 0301 	orr.w	r3, r3, #1
 8003626:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800362a:	e029      	b.n	8003680 <HAL_RCC_OscConfig+0x52c>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	2b05      	cmp	r3, #5
 8003632:	d115      	bne.n	8003660 <HAL_RCC_OscConfig+0x50c>
 8003634:	4b08      	ldr	r3, [pc, #32]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800363a:	4a07      	ldr	r2, [pc, #28]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 800363c:	f043 0304 	orr.w	r3, r3, #4
 8003640:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003644:	4b04      	ldr	r3, [pc, #16]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 8003646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800364a:	4a03      	ldr	r2, [pc, #12]	@ (8003658 <HAL_RCC_OscConfig+0x504>)
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003654:	e014      	b.n	8003680 <HAL_RCC_OscConfig+0x52c>
 8003656:	bf00      	nop
 8003658:	40021000 	.word	0x40021000
 800365c:	40007000 	.word	0x40007000
 8003660:	4b9c      	ldr	r3, [pc, #624]	@ (80038d4 <HAL_RCC_OscConfig+0x780>)
 8003662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003666:	4a9b      	ldr	r2, [pc, #620]	@ (80038d4 <HAL_RCC_OscConfig+0x780>)
 8003668:	f023 0301 	bic.w	r3, r3, #1
 800366c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003670:	4b98      	ldr	r3, [pc, #608]	@ (80038d4 <HAL_RCC_OscConfig+0x780>)
 8003672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003676:	4a97      	ldr	r2, [pc, #604]	@ (80038d4 <HAL_RCC_OscConfig+0x780>)
 8003678:	f023 0304 	bic.w	r3, r3, #4
 800367c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d016      	beq.n	80036b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003688:	f7fe fb94 	bl	8001db4 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800368e:	e00a      	b.n	80036a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003690:	f7fe fb90 	bl	8001db4 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800369e:	4293      	cmp	r3, r2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e12a      	b.n	80038fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036a6:	4b8b      	ldr	r3, [pc, #556]	@ (80038d4 <HAL_RCC_OscConfig+0x780>)
 80036a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0ed      	beq.n	8003690 <HAL_RCC_OscConfig+0x53c>
 80036b4:	e015      	b.n	80036e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b6:	f7fe fb7d 	bl	8001db4 <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036bc:	e00a      	b.n	80036d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036be:	f7fe fb79 	bl	8001db4 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e113      	b.n	80038fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036d4:	4b7f      	ldr	r3, [pc, #508]	@ (80038d4 <HAL_RCC_OscConfig+0x780>)
 80036d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1ed      	bne.n	80036be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036e2:	7ffb      	ldrb	r3, [r7, #31]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d105      	bne.n	80036f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036e8:	4b7a      	ldr	r3, [pc, #488]	@ (80038d4 <HAL_RCC_OscConfig+0x780>)
 80036ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ec:	4a79      	ldr	r2, [pc, #484]	@ (80038d4 <HAL_RCC_OscConfig+0x780>)
 80036ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036f2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 80fe 	beq.w	80038fa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003702:	2b02      	cmp	r3, #2
 8003704:	f040 80d0 	bne.w	80038a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003708:	4b72      	ldr	r3, [pc, #456]	@ (80038d4 <HAL_RCC_OscConfig+0x780>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f003 0203 	and.w	r2, r3, #3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003718:	429a      	cmp	r2, r3
 800371a:	d130      	bne.n	800377e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003726:	3b01      	subs	r3, #1
 8003728:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800372a:	429a      	cmp	r2, r3
 800372c:	d127      	bne.n	800377e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003738:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800373a:	429a      	cmp	r2, r3
 800373c:	d11f      	bne.n	800377e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003748:	2a07      	cmp	r2, #7
 800374a:	bf14      	ite	ne
 800374c:	2201      	movne	r2, #1
 800374e:	2200      	moveq	r2, #0
 8003750:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003752:	4293      	cmp	r3, r2
 8003754:	d113      	bne.n	800377e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003760:	085b      	lsrs	r3, r3, #1
 8003762:	3b01      	subs	r3, #1
 8003764:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003766:	429a      	cmp	r2, r3
 8003768:	d109      	bne.n	800377e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	085b      	lsrs	r3, r3, #1
 8003776:	3b01      	subs	r3, #1
 8003778:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800377a:	429a      	cmp	r2, r3
 800377c:	d06e      	beq.n	800385c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	2b0c      	cmp	r3, #12
 8003782:	d069      	beq.n	8003858 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003784:	4b53      	ldr	r3, [pc, #332]	@ (80038d4 <HAL_RCC_OscConfig+0x780>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d105      	bne.n	800379c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003790:	4b50      	ldr	r3, [pc, #320]	@ (80038d4 <HAL_RCC_OscConfig+0x780>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e0ad      	b.n	80038fc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037a0:	4b4c      	ldr	r3, [pc, #304]	@ (80038d4 <HAL_RCC_OscConfig+0x780>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a4b      	ldr	r2, [pc, #300]	@ (80038d4 <HAL_RCC_OscConfig+0x780>)
 80037a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037ac:	f7fe fb02 	bl	8001db4 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b4:	f7fe fafe 	bl	8001db4 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e09a      	b.n	80038fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037c6:	4b43      	ldr	r3, [pc, #268]	@ (80038d4 <HAL_RCC_OscConfig+0x780>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037d2:	4b40      	ldr	r3, [pc, #256]	@ (80038d4 <HAL_RCC_OscConfig+0x780>)
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	4b40      	ldr	r3, [pc, #256]	@ (80038d8 <HAL_RCC_OscConfig+0x784>)
 80037d8:	4013      	ands	r3, r2
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80037e2:	3a01      	subs	r2, #1
 80037e4:	0112      	lsls	r2, r2, #4
 80037e6:	4311      	orrs	r1, r2
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80037ec:	0212      	lsls	r2, r2, #8
 80037ee:	4311      	orrs	r1, r2
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037f4:	0852      	lsrs	r2, r2, #1
 80037f6:	3a01      	subs	r2, #1
 80037f8:	0552      	lsls	r2, r2, #21
 80037fa:	4311      	orrs	r1, r2
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003800:	0852      	lsrs	r2, r2, #1
 8003802:	3a01      	subs	r2, #1
 8003804:	0652      	lsls	r2, r2, #25
 8003806:	4311      	orrs	r1, r2
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800380c:	0912      	lsrs	r2, r2, #4
 800380e:	0452      	lsls	r2, r2, #17
 8003810:	430a      	orrs	r2, r1
 8003812:	4930      	ldr	r1, [pc, #192]	@ (80038d4 <HAL_RCC_OscConfig+0x780>)
 8003814:	4313      	orrs	r3, r2
 8003816:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003818:	4b2e      	ldr	r3, [pc, #184]	@ (80038d4 <HAL_RCC_OscConfig+0x780>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a2d      	ldr	r2, [pc, #180]	@ (80038d4 <HAL_RCC_OscConfig+0x780>)
 800381e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003822:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003824:	4b2b      	ldr	r3, [pc, #172]	@ (80038d4 <HAL_RCC_OscConfig+0x780>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	4a2a      	ldr	r2, [pc, #168]	@ (80038d4 <HAL_RCC_OscConfig+0x780>)
 800382a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800382e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003830:	f7fe fac0 	bl	8001db4 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003838:	f7fe fabc 	bl	8001db4 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e058      	b.n	80038fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800384a:	4b22      	ldr	r3, [pc, #136]	@ (80038d4 <HAL_RCC_OscConfig+0x780>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0f0      	beq.n	8003838 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003856:	e050      	b.n	80038fa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e04f      	b.n	80038fc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800385c:	4b1d      	ldr	r3, [pc, #116]	@ (80038d4 <HAL_RCC_OscConfig+0x780>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d148      	bne.n	80038fa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003868:	4b1a      	ldr	r3, [pc, #104]	@ (80038d4 <HAL_RCC_OscConfig+0x780>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a19      	ldr	r2, [pc, #100]	@ (80038d4 <HAL_RCC_OscConfig+0x780>)
 800386e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003872:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003874:	4b17      	ldr	r3, [pc, #92]	@ (80038d4 <HAL_RCC_OscConfig+0x780>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	4a16      	ldr	r2, [pc, #88]	@ (80038d4 <HAL_RCC_OscConfig+0x780>)
 800387a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800387e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003880:	f7fe fa98 	bl	8001db4 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003888:	f7fe fa94 	bl	8001db4 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e030      	b.n	80038fc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800389a:	4b0e      	ldr	r3, [pc, #56]	@ (80038d4 <HAL_RCC_OscConfig+0x780>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0x734>
 80038a6:	e028      	b.n	80038fa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	2b0c      	cmp	r3, #12
 80038ac:	d023      	beq.n	80038f6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ae:	4b09      	ldr	r3, [pc, #36]	@ (80038d4 <HAL_RCC_OscConfig+0x780>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a08      	ldr	r2, [pc, #32]	@ (80038d4 <HAL_RCC_OscConfig+0x780>)
 80038b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ba:	f7fe fa7b 	bl	8001db4 <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038c0:	e00c      	b.n	80038dc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c2:	f7fe fa77 	bl	8001db4 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d905      	bls.n	80038dc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e013      	b.n	80038fc <HAL_RCC_OscConfig+0x7a8>
 80038d4:	40021000 	.word	0x40021000
 80038d8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038dc:	4b09      	ldr	r3, [pc, #36]	@ (8003904 <HAL_RCC_OscConfig+0x7b0>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1ec      	bne.n	80038c2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80038e8:	4b06      	ldr	r3, [pc, #24]	@ (8003904 <HAL_RCC_OscConfig+0x7b0>)
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	4905      	ldr	r1, [pc, #20]	@ (8003904 <HAL_RCC_OscConfig+0x7b0>)
 80038ee:	4b06      	ldr	r3, [pc, #24]	@ (8003908 <HAL_RCC_OscConfig+0x7b4>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	60cb      	str	r3, [r1, #12]
 80038f4:	e001      	b.n	80038fa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e000      	b.n	80038fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3720      	adds	r7, #32
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40021000 	.word	0x40021000
 8003908:	feeefffc 	.word	0xfeeefffc

0800390c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e0e7      	b.n	8003af0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003920:	4b75      	ldr	r3, [pc, #468]	@ (8003af8 <HAL_RCC_ClockConfig+0x1ec>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d910      	bls.n	8003950 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392e:	4b72      	ldr	r3, [pc, #456]	@ (8003af8 <HAL_RCC_ClockConfig+0x1ec>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f023 0207 	bic.w	r2, r3, #7
 8003936:	4970      	ldr	r1, [pc, #448]	@ (8003af8 <HAL_RCC_ClockConfig+0x1ec>)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	4313      	orrs	r3, r2
 800393c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800393e:	4b6e      	ldr	r3, [pc, #440]	@ (8003af8 <HAL_RCC_ClockConfig+0x1ec>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d001      	beq.n	8003950 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0cf      	b.n	8003af0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d010      	beq.n	800397e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	4b66      	ldr	r3, [pc, #408]	@ (8003afc <HAL_RCC_ClockConfig+0x1f0>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003968:	429a      	cmp	r2, r3
 800396a:	d908      	bls.n	800397e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800396c:	4b63      	ldr	r3, [pc, #396]	@ (8003afc <HAL_RCC_ClockConfig+0x1f0>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	4960      	ldr	r1, [pc, #384]	@ (8003afc <HAL_RCC_ClockConfig+0x1f0>)
 800397a:	4313      	orrs	r3, r2
 800397c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d04c      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b03      	cmp	r3, #3
 8003990:	d107      	bne.n	80039a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003992:	4b5a      	ldr	r3, [pc, #360]	@ (8003afc <HAL_RCC_ClockConfig+0x1f0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d121      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e0a6      	b.n	8003af0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d107      	bne.n	80039ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039aa:	4b54      	ldr	r3, [pc, #336]	@ (8003afc <HAL_RCC_ClockConfig+0x1f0>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d115      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e09a      	b.n	8003af0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d107      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039c2:	4b4e      	ldr	r3, [pc, #312]	@ (8003afc <HAL_RCC_ClockConfig+0x1f0>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d109      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e08e      	b.n	8003af0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039d2:	4b4a      	ldr	r3, [pc, #296]	@ (8003afc <HAL_RCC_ClockConfig+0x1f0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e086      	b.n	8003af0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039e2:	4b46      	ldr	r3, [pc, #280]	@ (8003afc <HAL_RCC_ClockConfig+0x1f0>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f023 0203 	bic.w	r2, r3, #3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	4943      	ldr	r1, [pc, #268]	@ (8003afc <HAL_RCC_ClockConfig+0x1f0>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f4:	f7fe f9de 	bl	8001db4 <HAL_GetTick>
 80039f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fa:	e00a      	b.n	8003a12 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039fc:	f7fe f9da 	bl	8001db4 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e06e      	b.n	8003af0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a12:	4b3a      	ldr	r3, [pc, #232]	@ (8003afc <HAL_RCC_ClockConfig+0x1f0>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 020c 	and.w	r2, r3, #12
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d1eb      	bne.n	80039fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d010      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	4b31      	ldr	r3, [pc, #196]	@ (8003afc <HAL_RCC_ClockConfig+0x1f0>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d208      	bcs.n	8003a52 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a40:	4b2e      	ldr	r3, [pc, #184]	@ (8003afc <HAL_RCC_ClockConfig+0x1f0>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	492b      	ldr	r1, [pc, #172]	@ (8003afc <HAL_RCC_ClockConfig+0x1f0>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a52:	4b29      	ldr	r3, [pc, #164]	@ (8003af8 <HAL_RCC_ClockConfig+0x1ec>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d210      	bcs.n	8003a82 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a60:	4b25      	ldr	r3, [pc, #148]	@ (8003af8 <HAL_RCC_ClockConfig+0x1ec>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f023 0207 	bic.w	r2, r3, #7
 8003a68:	4923      	ldr	r1, [pc, #140]	@ (8003af8 <HAL_RCC_ClockConfig+0x1ec>)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a70:	4b21      	ldr	r3, [pc, #132]	@ (8003af8 <HAL_RCC_ClockConfig+0x1ec>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d001      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e036      	b.n	8003af0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0304 	and.w	r3, r3, #4
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d008      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8003afc <HAL_RCC_ClockConfig+0x1f0>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	4918      	ldr	r1, [pc, #96]	@ (8003afc <HAL_RCC_ClockConfig+0x1f0>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d009      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aac:	4b13      	ldr	r3, [pc, #76]	@ (8003afc <HAL_RCC_ClockConfig+0x1f0>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4910      	ldr	r1, [pc, #64]	@ (8003afc <HAL_RCC_ClockConfig+0x1f0>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ac0:	f000 f824 	bl	8003b0c <HAL_RCC_GetSysClockFreq>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8003afc <HAL_RCC_ClockConfig+0x1f0>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	091b      	lsrs	r3, r3, #4
 8003acc:	f003 030f 	and.w	r3, r3, #15
 8003ad0:	490b      	ldr	r1, [pc, #44]	@ (8003b00 <HAL_RCC_ClockConfig+0x1f4>)
 8003ad2:	5ccb      	ldrb	r3, [r1, r3]
 8003ad4:	f003 031f 	and.w	r3, r3, #31
 8003ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8003adc:	4a09      	ldr	r2, [pc, #36]	@ (8003b04 <HAL_RCC_ClockConfig+0x1f8>)
 8003ade:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ae0:	4b09      	ldr	r3, [pc, #36]	@ (8003b08 <HAL_RCC_ClockConfig+0x1fc>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fd fac5 	bl	8001074 <HAL_InitTick>
 8003aea:	4603      	mov	r3, r0
 8003aec:	72fb      	strb	r3, [r7, #11]

  return status;
 8003aee:	7afb      	ldrb	r3, [r7, #11]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40022000 	.word	0x40022000
 8003afc:	40021000 	.word	0x40021000
 8003b00:	0800bce0 	.word	0x0800bce0
 8003b04:	20000000 	.word	0x20000000
 8003b08:	2000000c 	.word	0x2000000c

08003b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b089      	sub	sp, #36	@ 0x24
 8003b10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61fb      	str	r3, [r7, #28]
 8003b16:	2300      	movs	r3, #0
 8003b18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b1a:	4b3e      	ldr	r3, [pc, #248]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 030c 	and.w	r3, r3, #12
 8003b22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b24:	4b3b      	ldr	r3, [pc, #236]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f003 0303 	and.w	r3, r3, #3
 8003b2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <HAL_RCC_GetSysClockFreq+0x34>
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	2b0c      	cmp	r3, #12
 8003b38:	d121      	bne.n	8003b7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d11e      	bne.n	8003b7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b40:	4b34      	ldr	r3, [pc, #208]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0308 	and.w	r3, r3, #8
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d107      	bne.n	8003b5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b4c:	4b31      	ldr	r3, [pc, #196]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b52:	0a1b      	lsrs	r3, r3, #8
 8003b54:	f003 030f 	and.w	r3, r3, #15
 8003b58:	61fb      	str	r3, [r7, #28]
 8003b5a:	e005      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b5c:	4b2d      	ldr	r3, [pc, #180]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	091b      	lsrs	r3, r3, #4
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b68:	4a2b      	ldr	r2, [pc, #172]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10d      	bne.n	8003b94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b7c:	e00a      	b.n	8003b94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d102      	bne.n	8003b8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b84:	4b25      	ldr	r3, [pc, #148]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0x110>)
 8003b86:	61bb      	str	r3, [r7, #24]
 8003b88:	e004      	b.n	8003b94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d101      	bne.n	8003b94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b90:	4b23      	ldr	r3, [pc, #140]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	2b0c      	cmp	r3, #12
 8003b98:	d134      	bne.n	8003c04 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d003      	beq.n	8003bb2 <HAL_RCC_GetSysClockFreq+0xa6>
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	d003      	beq.n	8003bb8 <HAL_RCC_GetSysClockFreq+0xac>
 8003bb0:	e005      	b.n	8003bbe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0x110>)
 8003bb4:	617b      	str	r3, [r7, #20]
      break;
 8003bb6:	e005      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003bb8:	4b19      	ldr	r3, [pc, #100]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x114>)
 8003bba:	617b      	str	r3, [r7, #20]
      break;
 8003bbc:	e002      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	617b      	str	r3, [r7, #20]
      break;
 8003bc2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bc4:	4b13      	ldr	r3, [pc, #76]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	091b      	lsrs	r3, r3, #4
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	3301      	adds	r3, #1
 8003bd0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003bd2:	4b10      	ldr	r3, [pc, #64]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	0a1b      	lsrs	r3, r3, #8
 8003bd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	fb03 f202 	mul.w	r2, r3, r2
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bea:	4b0a      	ldr	r3, [pc, #40]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	0e5b      	lsrs	r3, r3, #25
 8003bf0:	f003 0303 	and.w	r3, r3, #3
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c04:	69bb      	ldr	r3, [r7, #24]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3724      	adds	r7, #36	@ 0x24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	40021000 	.word	0x40021000
 8003c18:	0800bcf8 	.word	0x0800bcf8
 8003c1c:	00f42400 	.word	0x00f42400
 8003c20:	007a1200 	.word	0x007a1200

08003c24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c28:	4b03      	ldr	r3, [pc, #12]	@ (8003c38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	20000000 	.word	0x20000000

08003c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c40:	f7ff fff0 	bl	8003c24 <HAL_RCC_GetHCLKFreq>
 8003c44:	4602      	mov	r2, r0
 8003c46:	4b06      	ldr	r3, [pc, #24]	@ (8003c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	0a1b      	lsrs	r3, r3, #8
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	4904      	ldr	r1, [pc, #16]	@ (8003c64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c52:	5ccb      	ldrb	r3, [r1, r3]
 8003c54:	f003 031f 	and.w	r3, r3, #31
 8003c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40021000 	.word	0x40021000
 8003c64:	0800bcf0 	.word	0x0800bcf0

08003c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c6c:	f7ff ffda 	bl	8003c24 <HAL_RCC_GetHCLKFreq>
 8003c70:	4602      	mov	r2, r0
 8003c72:	4b06      	ldr	r3, [pc, #24]	@ (8003c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	0adb      	lsrs	r3, r3, #11
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	4904      	ldr	r1, [pc, #16]	@ (8003c90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c7e:	5ccb      	ldrb	r3, [r1, r3]
 8003c80:	f003 031f 	and.w	r3, r3, #31
 8003c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	0800bcf0 	.word	0x0800bcf0

08003c94 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	220f      	movs	r2, #15
 8003ca2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003ca4:	4b12      	ldr	r3, [pc, #72]	@ (8003cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 0203 	and.w	r2, r3, #3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8003cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003cc8:	4b09      	ldr	r3, [pc, #36]	@ (8003cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	08db      	lsrs	r3, r3, #3
 8003cce:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003cd6:	4b07      	ldr	r3, [pc, #28]	@ (8003cf4 <HAL_RCC_GetClockConfig+0x60>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0207 	and.w	r2, r3, #7
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	601a      	str	r2, [r3, #0]
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	40022000 	.word	0x40022000

08003cf8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d00:	2300      	movs	r3, #0
 8003d02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d04:	4b2a      	ldr	r3, [pc, #168]	@ (8003db0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d10:	f7ff f9bc 	bl	800308c <HAL_PWREx_GetVoltageRange>
 8003d14:	6178      	str	r0, [r7, #20]
 8003d16:	e014      	b.n	8003d42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d18:	4b25      	ldr	r3, [pc, #148]	@ (8003db0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d1c:	4a24      	ldr	r2, [pc, #144]	@ (8003db0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d22:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d24:	4b22      	ldr	r3, [pc, #136]	@ (8003db0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d30:	f7ff f9ac 	bl	800308c <HAL_PWREx_GetVoltageRange>
 8003d34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d36:	4b1e      	ldr	r3, [pc, #120]	@ (8003db0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d3a:	4a1d      	ldr	r2, [pc, #116]	@ (8003db0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d40:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d48:	d10b      	bne.n	8003d62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b80      	cmp	r3, #128	@ 0x80
 8003d4e:	d919      	bls.n	8003d84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2ba0      	cmp	r3, #160	@ 0xa0
 8003d54:	d902      	bls.n	8003d5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d56:	2302      	movs	r3, #2
 8003d58:	613b      	str	r3, [r7, #16]
 8003d5a:	e013      	b.n	8003d84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	e010      	b.n	8003d84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b80      	cmp	r3, #128	@ 0x80
 8003d66:	d902      	bls.n	8003d6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d68:	2303      	movs	r3, #3
 8003d6a:	613b      	str	r3, [r7, #16]
 8003d6c:	e00a      	b.n	8003d84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b80      	cmp	r3, #128	@ 0x80
 8003d72:	d102      	bne.n	8003d7a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d74:	2302      	movs	r3, #2
 8003d76:	613b      	str	r3, [r7, #16]
 8003d78:	e004      	b.n	8003d84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b70      	cmp	r3, #112	@ 0x70
 8003d7e:	d101      	bne.n	8003d84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d80:	2301      	movs	r3, #1
 8003d82:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d84:	4b0b      	ldr	r3, [pc, #44]	@ (8003db4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f023 0207 	bic.w	r2, r3, #7
 8003d8c:	4909      	ldr	r1, [pc, #36]	@ (8003db4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d94:	4b07      	ldr	r3, [pc, #28]	@ (8003db4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d001      	beq.n	8003da6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40022000 	.word	0x40022000

08003db8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d041      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003dd8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ddc:	d02a      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003dde:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003de2:	d824      	bhi.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003de4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003de8:	d008      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003dea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003dee:	d81e      	bhi.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00a      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003df4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003df8:	d010      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003dfa:	e018      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003dfc:	4b86      	ldr	r3, [pc, #536]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	4a85      	ldr	r2, [pc, #532]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e06:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e08:	e015      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	2100      	movs	r1, #0
 8003e10:	4618      	mov	r0, r3
 8003e12:	f001 f829 	bl	8004e68 <RCCEx_PLLSAI1_Config>
 8003e16:	4603      	mov	r3, r0
 8003e18:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e1a:	e00c      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3320      	adds	r3, #32
 8003e20:	2100      	movs	r1, #0
 8003e22:	4618      	mov	r0, r3
 8003e24:	f001 f914 	bl	8005050 <RCCEx_PLLSAI2_Config>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e2c:	e003      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	74fb      	strb	r3, [r7, #19]
      break;
 8003e32:	e000      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003e34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e36:	7cfb      	ldrb	r3, [r7, #19]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10b      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e3c:	4b76      	ldr	r3, [pc, #472]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e4a:	4973      	ldr	r1, [pc, #460]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003e52:	e001      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e54:	7cfb      	ldrb	r3, [r7, #19]
 8003e56:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d041      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e68:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003e6c:	d02a      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003e6e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003e72:	d824      	bhi.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e78:	d008      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e7e:	d81e      	bhi.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00a      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003e84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e88:	d010      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003e8a:	e018      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e8c:	4b62      	ldr	r3, [pc, #392]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	4a61      	ldr	r2, [pc, #388]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e96:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e98:	e015      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 ffe1 	bl	8004e68 <RCCEx_PLLSAI1_Config>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003eaa:	e00c      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3320      	adds	r3, #32
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f001 f8cc 	bl	8005050 <RCCEx_PLLSAI2_Config>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ebc:	e003      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	74fb      	strb	r3, [r7, #19]
      break;
 8003ec2:	e000      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003ec4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ec6:	7cfb      	ldrb	r3, [r7, #19]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10b      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ecc:	4b52      	ldr	r3, [pc, #328]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003eda:	494f      	ldr	r1, [pc, #316]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003ee2:	e001      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee4:	7cfb      	ldrb	r3, [r7, #19]
 8003ee6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 80a0 	beq.w	8004036 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003efa:	4b47      	ldr	r3, [pc, #284]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003f06:	2301      	movs	r3, #1
 8003f08:	e000      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00d      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f10:	4b41      	ldr	r3, [pc, #260]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f14:	4a40      	ldr	r2, [pc, #256]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f1c:	4b3e      	ldr	r3, [pc, #248]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f2c:	4b3b      	ldr	r3, [pc, #236]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a3a      	ldr	r2, [pc, #232]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f38:	f7fd ff3c 	bl	8001db4 <HAL_GetTick>
 8003f3c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f3e:	e009      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f40:	f7fd ff38 	bl	8001db4 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d902      	bls.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	74fb      	strb	r3, [r7, #19]
        break;
 8003f52:	e005      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f54:	4b31      	ldr	r3, [pc, #196]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0ef      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003f60:	7cfb      	ldrb	r3, [r7, #19]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d15c      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f66:	4b2c      	ldr	r3, [pc, #176]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f70:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01f      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d019      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f84:	4b24      	ldr	r3, [pc, #144]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f90:	4b21      	ldr	r3, [pc, #132]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f96:	4a20      	ldr	r2, [pc, #128]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fa6:	4a1c      	ldr	r2, [pc, #112]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003fb0:	4a19      	ldr	r2, [pc, #100]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d016      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc2:	f7fd fef7 	bl	8001db4 <HAL_GetTick>
 8003fc6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fc8:	e00b      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fca:	f7fd fef3 	bl	8001db4 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d902      	bls.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	74fb      	strb	r3, [r7, #19]
            break;
 8003fe0:	e006      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0ec      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003ff0:	7cfb      	ldrb	r3, [r7, #19]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10c      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ff6:	4b08      	ldr	r3, [pc, #32]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ffc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004006:	4904      	ldr	r1, [pc, #16]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004008:	4313      	orrs	r3, r2
 800400a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800400e:	e009      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004010:	7cfb      	ldrb	r3, [r7, #19]
 8004012:	74bb      	strb	r3, [r7, #18]
 8004014:	e006      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004016:	bf00      	nop
 8004018:	40021000 	.word	0x40021000
 800401c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004020:	7cfb      	ldrb	r3, [r7, #19]
 8004022:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004024:	7c7b      	ldrb	r3, [r7, #17]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d105      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800402a:	4b9e      	ldr	r3, [pc, #632]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800402c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800402e:	4a9d      	ldr	r2, [pc, #628]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004030:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004034:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004042:	4b98      	ldr	r3, [pc, #608]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004048:	f023 0203 	bic.w	r2, r3, #3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004050:	4994      	ldr	r1, [pc, #592]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00a      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004064:	4b8f      	ldr	r3, [pc, #572]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800406a:	f023 020c 	bic.w	r2, r3, #12
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004072:	498c      	ldr	r1, [pc, #560]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004074:	4313      	orrs	r3, r2
 8004076:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0304 	and.w	r3, r3, #4
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004086:	4b87      	ldr	r3, [pc, #540]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800408c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004094:	4983      	ldr	r1, [pc, #524]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004096:	4313      	orrs	r3, r2
 8004098:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0308 	and.w	r3, r3, #8
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00a      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040a8:	4b7e      	ldr	r3, [pc, #504]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b6:	497b      	ldr	r1, [pc, #492]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0310 	and.w	r3, r3, #16
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00a      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040ca:	4b76      	ldr	r3, [pc, #472]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040d8:	4972      	ldr	r1, [pc, #456]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0320 	and.w	r3, r3, #32
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00a      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040ec:	4b6d      	ldr	r3, [pc, #436]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040fa:	496a      	ldr	r1, [pc, #424]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00a      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800410e:	4b65      	ldr	r3, [pc, #404]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004114:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800411c:	4961      	ldr	r1, [pc, #388]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800411e:	4313      	orrs	r3, r2
 8004120:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004130:	4b5c      	ldr	r3, [pc, #368]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004136:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800413e:	4959      	ldr	r1, [pc, #356]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004140:	4313      	orrs	r3, r2
 8004142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004152:	4b54      	ldr	r3, [pc, #336]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004158:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004160:	4950      	ldr	r1, [pc, #320]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004162:	4313      	orrs	r3, r2
 8004164:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004174:	4b4b      	ldr	r3, [pc, #300]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800417a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004182:	4948      	ldr	r1, [pc, #288]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004184:	4313      	orrs	r3, r2
 8004186:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004196:	4b43      	ldr	r3, [pc, #268]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800419c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a4:	493f      	ldr	r1, [pc, #252]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d028      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041b8:	4b3a      	ldr	r3, [pc, #232]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041c6:	4937      	ldr	r1, [pc, #220]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041d6:	d106      	bne.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041d8:	4b32      	ldr	r3, [pc, #200]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	4a31      	ldr	r2, [pc, #196]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041e2:	60d3      	str	r3, [r2, #12]
 80041e4:	e011      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041ee:	d10c      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3304      	adds	r3, #4
 80041f4:	2101      	movs	r1, #1
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 fe36 	bl	8004e68 <RCCEx_PLLSAI1_Config>
 80041fc:	4603      	mov	r3, r0
 80041fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004200:	7cfb      	ldrb	r3, [r7, #19]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004206:	7cfb      	ldrb	r3, [r7, #19]
 8004208:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d028      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004216:	4b23      	ldr	r3, [pc, #140]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800421c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004224:	491f      	ldr	r1, [pc, #124]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004230:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004234:	d106      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004236:	4b1b      	ldr	r3, [pc, #108]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	4a1a      	ldr	r2, [pc, #104]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004240:	60d3      	str	r3, [r2, #12]
 8004242:	e011      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004248:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800424c:	d10c      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	3304      	adds	r3, #4
 8004252:	2101      	movs	r1, #1
 8004254:	4618      	mov	r0, r3
 8004256:	f000 fe07 	bl	8004e68 <RCCEx_PLLSAI1_Config>
 800425a:	4603      	mov	r3, r0
 800425c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800425e:	7cfb      	ldrb	r3, [r7, #19]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004264:	7cfb      	ldrb	r3, [r7, #19]
 8004266:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d02b      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004274:	4b0b      	ldr	r3, [pc, #44]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800427a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004282:	4908      	ldr	r1, [pc, #32]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800428e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004292:	d109      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004294:	4b03      	ldr	r3, [pc, #12]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	4a02      	ldr	r2, [pc, #8]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800429a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800429e:	60d3      	str	r3, [r2, #12]
 80042a0:	e014      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80042a2:	bf00      	nop
 80042a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042b0:	d10c      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	3304      	adds	r3, #4
 80042b6:	2101      	movs	r1, #1
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 fdd5 	bl	8004e68 <RCCEx_PLLSAI1_Config>
 80042be:	4603      	mov	r3, r0
 80042c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042c2:	7cfb      	ldrb	r3, [r7, #19]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80042c8:	7cfb      	ldrb	r3, [r7, #19]
 80042ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d02f      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042d8:	4b2b      	ldr	r3, [pc, #172]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042e6:	4928      	ldr	r1, [pc, #160]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042f6:	d10d      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3304      	adds	r3, #4
 80042fc:	2102      	movs	r1, #2
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 fdb2 	bl	8004e68 <RCCEx_PLLSAI1_Config>
 8004304:	4603      	mov	r3, r0
 8004306:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004308:	7cfb      	ldrb	r3, [r7, #19]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d014      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800430e:	7cfb      	ldrb	r3, [r7, #19]
 8004310:	74bb      	strb	r3, [r7, #18]
 8004312:	e011      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004318:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800431c:	d10c      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3320      	adds	r3, #32
 8004322:	2102      	movs	r1, #2
 8004324:	4618      	mov	r0, r3
 8004326:	f000 fe93 	bl	8005050 <RCCEx_PLLSAI2_Config>
 800432a:	4603      	mov	r3, r0
 800432c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800432e:	7cfb      	ldrb	r3, [r7, #19]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004334:	7cfb      	ldrb	r3, [r7, #19]
 8004336:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00a      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004344:	4b10      	ldr	r3, [pc, #64]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800434a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004352:	490d      	ldr	r1, [pc, #52]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00b      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004366:	4b08      	ldr	r3, [pc, #32]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800436c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004376:	4904      	ldr	r1, [pc, #16]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800437e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40021000 	.word	0x40021000

0800438c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b088      	sub	sp, #32
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800439e:	d13e      	bne.n	800441e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80043a0:	4bb2      	ldr	r3, [pc, #712]	@ (800466c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80043a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043aa:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043b2:	d028      	beq.n	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043ba:	f200 8542 	bhi.w	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043c4:	d005      	beq.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043cc:	d00e      	beq.n	80043ec <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80043ce:	f000 bd38 	b.w	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80043d2:	4ba6      	ldr	r3, [pc, #664]	@ (800466c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80043d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b02      	cmp	r3, #2
 80043de:	f040 8532 	bne.w	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 80043e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043e6:	61fb      	str	r3, [r7, #28]
      break;
 80043e8:	f000 bd2d 	b.w	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80043ec:	4b9f      	ldr	r3, [pc, #636]	@ (800466c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80043ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	f040 8527 	bne.w	8004e4a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 80043fc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004400:	61fb      	str	r3, [r7, #28]
      break;
 8004402:	f000 bd22 	b.w	8004e4a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004406:	4b99      	ldr	r3, [pc, #612]	@ (800466c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800440e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004412:	f040 851c 	bne.w	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8004416:	4b96      	ldr	r3, [pc, #600]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8004418:	61fb      	str	r3, [r7, #28]
      break;
 800441a:	f000 bd18 	b.w	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800441e:	4b93      	ldr	r3, [pc, #588]	@ (800466c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	2b03      	cmp	r3, #3
 800442c:	d036      	beq.n	800449c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	2b03      	cmp	r3, #3
 8004432:	d840      	bhi.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d003      	beq.n	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b02      	cmp	r3, #2
 800443e:	d020      	beq.n	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004440:	e039      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004442:	4b8a      	ldr	r3, [pc, #552]	@ (800466c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b02      	cmp	r3, #2
 800444c:	d116      	bne.n	800447c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800444e:	4b87      	ldr	r3, [pc, #540]	@ (800466c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b00      	cmp	r3, #0
 8004458:	d005      	beq.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800445a:	4b84      	ldr	r3, [pc, #528]	@ (800466c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	091b      	lsrs	r3, r3, #4
 8004460:	f003 030f 	and.w	r3, r3, #15
 8004464:	e005      	b.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8004466:	4b81      	ldr	r3, [pc, #516]	@ (800466c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004468:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800446c:	0a1b      	lsrs	r3, r3, #8
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	4a80      	ldr	r2, [pc, #512]	@ (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8004474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004478:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800447a:	e01f      	b.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800447c:	2300      	movs	r3, #0
 800447e:	61bb      	str	r3, [r7, #24]
      break;
 8004480:	e01c      	b.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004482:	4b7a      	ldr	r3, [pc, #488]	@ (800466c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800448a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800448e:	d102      	bne.n	8004496 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8004490:	4b79      	ldr	r3, [pc, #484]	@ (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004492:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004494:	e012      	b.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	61bb      	str	r3, [r7, #24]
      break;
 800449a:	e00f      	b.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800449c:	4b73      	ldr	r3, [pc, #460]	@ (800466c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044a8:	d102      	bne.n	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80044aa:	4b74      	ldr	r3, [pc, #464]	@ (800467c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80044ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80044ae:	e005      	b.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	61bb      	str	r3, [r7, #24]
      break;
 80044b4:	e002      	b.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	61bb      	str	r3, [r7, #24]
      break;
 80044ba:	bf00      	nop
    }

    switch(PeriphClk)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80044c2:	f000 80dd 	beq.w	8004680 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80044cc:	f200 84c1 	bhi.w	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80044d6:	f000 80d3 	beq.w	8004680 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80044e0:	f200 84b7 	bhi.w	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044ea:	f000 835f 	beq.w	8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044f4:	f200 84ad 	bhi.w	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044fe:	f000 847e 	beq.w	8004dfe <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004508:	f200 84a3 	bhi.w	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004512:	f000 82cd 	beq.w	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800451c:	f200 8499 	bhi.w	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004526:	f000 80ab 	beq.w	8004680 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004530:	f200 848f 	bhi.w	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800453a:	f000 8090 	beq.w	800465e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004544:	f200 8485 	bhi.w	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800454e:	d07f      	beq.n	8004650 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004556:	f200 847c 	bhi.w	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004560:	f000 8403 	beq.w	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800456a:	f200 8472 	bhi.w	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004574:	f000 83af 	beq.w	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800457e:	f200 8468 	bhi.w	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004588:	f000 8379 	beq.w	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004592:	f200 845e 	bhi.w	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b80      	cmp	r3, #128	@ 0x80
 800459a:	f000 8344 	beq.w	8004c26 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b80      	cmp	r3, #128	@ 0x80
 80045a2:	f200 8456 	bhi.w	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b20      	cmp	r3, #32
 80045aa:	d84b      	bhi.n	8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f000 844f 	beq.w	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	2b1f      	cmp	r3, #31
 80045ba:	f200 844a 	bhi.w	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80045be:	a201      	add	r2, pc, #4	@ (adr r2, 80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 80045c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c4:	080047ad 	.word	0x080047ad
 80045c8:	0800481b 	.word	0x0800481b
 80045cc:	08004e53 	.word	0x08004e53
 80045d0:	080048af 	.word	0x080048af
 80045d4:	08004e53 	.word	0x08004e53
 80045d8:	08004e53 	.word	0x08004e53
 80045dc:	08004e53 	.word	0x08004e53
 80045e0:	08004935 	.word	0x08004935
 80045e4:	08004e53 	.word	0x08004e53
 80045e8:	08004e53 	.word	0x08004e53
 80045ec:	08004e53 	.word	0x08004e53
 80045f0:	08004e53 	.word	0x08004e53
 80045f4:	08004e53 	.word	0x08004e53
 80045f8:	08004e53 	.word	0x08004e53
 80045fc:	08004e53 	.word	0x08004e53
 8004600:	080049ad 	.word	0x080049ad
 8004604:	08004e53 	.word	0x08004e53
 8004608:	08004e53 	.word	0x08004e53
 800460c:	08004e53 	.word	0x08004e53
 8004610:	08004e53 	.word	0x08004e53
 8004614:	08004e53 	.word	0x08004e53
 8004618:	08004e53 	.word	0x08004e53
 800461c:	08004e53 	.word	0x08004e53
 8004620:	08004e53 	.word	0x08004e53
 8004624:	08004e53 	.word	0x08004e53
 8004628:	08004e53 	.word	0x08004e53
 800462c:	08004e53 	.word	0x08004e53
 8004630:	08004e53 	.word	0x08004e53
 8004634:	08004e53 	.word	0x08004e53
 8004638:	08004e53 	.word	0x08004e53
 800463c:	08004e53 	.word	0x08004e53
 8004640:	08004a2f 	.word	0x08004a2f
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b40      	cmp	r3, #64	@ 0x40
 8004648:	f000 82c1 	beq.w	8004bce <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800464c:	f000 bc01 	b.w	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004650:	69b9      	ldr	r1, [r7, #24]
 8004652:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004656:	f000 fdd9 	bl	800520c <RCCEx_GetSAIxPeriphCLKFreq>
 800465a:	61f8      	str	r0, [r7, #28]
      break;
 800465c:	e3fa      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800465e:	69b9      	ldr	r1, [r7, #24]
 8004660:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004664:	f000 fdd2 	bl	800520c <RCCEx_GetSAIxPeriphCLKFreq>
 8004668:	61f8      	str	r0, [r7, #28]
      break;
 800466a:	e3f3      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800466c:	40021000 	.word	0x40021000
 8004670:	0003d090 	.word	0x0003d090
 8004674:	0800bcf8 	.word	0x0800bcf8
 8004678:	00f42400 	.word	0x00f42400
 800467c:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004680:	4ba9      	ldr	r3, [pc, #676]	@ (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004686:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004692:	d00c      	beq.n	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800469a:	d87f      	bhi.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046a2:	d04e      	beq.n	8004742 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046aa:	d01d      	beq.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 80046ac:	e076      	b.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80046ae:	4b9e      	ldr	r3, [pc, #632]	@ (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d172      	bne.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80046ba:	4b9b      	ldr	r3, [pc, #620]	@ (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d005      	beq.n	80046d2 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 80046c6:	4b98      	ldr	r3, [pc, #608]	@ (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	091b      	lsrs	r3, r3, #4
 80046cc:	f003 030f 	and.w	r3, r3, #15
 80046d0:	e005      	b.n	80046de <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 80046d2:	4b95      	ldr	r3, [pc, #596]	@ (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80046d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046d8:	0a1b      	lsrs	r3, r3, #8
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	4a93      	ldr	r2, [pc, #588]	@ (800492c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80046e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046e4:	61fb      	str	r3, [r7, #28]
          break;
 80046e6:	e05b      	b.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80046e8:	4b8f      	ldr	r3, [pc, #572]	@ (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046f4:	d156      	bne.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80046f6:	4b8c      	ldr	r3, [pc, #560]	@ (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004702:	d14f      	bne.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004704:	4b88      	ldr	r3, [pc, #544]	@ (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	0a1b      	lsrs	r3, r3, #8
 800470a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800470e:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	fb03 f202 	mul.w	r2, r3, r2
 8004718:	4b83      	ldr	r3, [pc, #524]	@ (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	091b      	lsrs	r3, r3, #4
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	3301      	adds	r3, #1
 8004724:	fbb2 f3f3 	udiv	r3, r2, r3
 8004728:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800472a:	4b7f      	ldr	r3, [pc, #508]	@ (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	0d5b      	lsrs	r3, r3, #21
 8004730:	f003 0303 	and.w	r3, r3, #3
 8004734:	3301      	adds	r3, #1
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	fbb2 f3f3 	udiv	r3, r2, r3
 800473e:	61fb      	str	r3, [r7, #28]
          break;
 8004740:	e030      	b.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004742:	4b79      	ldr	r3, [pc, #484]	@ (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800474a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800474e:	d12b      	bne.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004750:	4b75      	ldr	r3, [pc, #468]	@ (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004758:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800475c:	d124      	bne.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800475e:	4b72      	ldr	r3, [pc, #456]	@ (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	0a1b      	lsrs	r3, r3, #8
 8004764:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004768:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	fb03 f202 	mul.w	r2, r3, r2
 8004772:	4b6d      	ldr	r3, [pc, #436]	@ (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	091b      	lsrs	r3, r3, #4
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	3301      	adds	r3, #1
 800477e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004782:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004784:	4b68      	ldr	r3, [pc, #416]	@ (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	0d5b      	lsrs	r3, r3, #21
 800478a:	f003 0303 	and.w	r3, r3, #3
 800478e:	3301      	adds	r3, #1
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	fbb2 f3f3 	udiv	r3, r2, r3
 8004798:	61fb      	str	r3, [r7, #28]
          break;
 800479a:	e005      	b.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 800479c:	bf00      	nop
 800479e:	e359      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80047a0:	bf00      	nop
 80047a2:	e357      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80047a4:	bf00      	nop
 80047a6:	e355      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80047a8:	bf00      	nop
        break;
 80047aa:	e353      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80047ac:	4b5e      	ldr	r3, [pc, #376]	@ (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80047ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047b2:	f003 0303 	and.w	r3, r3, #3
 80047b6:	613b      	str	r3, [r7, #16]
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	2b03      	cmp	r3, #3
 80047bc:	d827      	bhi.n	800480e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 80047be:	a201      	add	r2, pc, #4	@ (adr r2, 80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80047c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c4:	080047d5 	.word	0x080047d5
 80047c8:	080047dd 	.word	0x080047dd
 80047cc:	080047e5 	.word	0x080047e5
 80047d0:	080047f9 	.word	0x080047f9
          frequency = HAL_RCC_GetPCLK2Freq();
 80047d4:	f7ff fa48 	bl	8003c68 <HAL_RCC_GetPCLK2Freq>
 80047d8:	61f8      	str	r0, [r7, #28]
          break;
 80047da:	e01d      	b.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 80047dc:	f7ff f996 	bl	8003b0c <HAL_RCC_GetSysClockFreq>
 80047e0:	61f8      	str	r0, [r7, #28]
          break;
 80047e2:	e019      	b.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80047e4:	4b50      	ldr	r3, [pc, #320]	@ (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047f0:	d10f      	bne.n	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 80047f2:	4b4f      	ldr	r3, [pc, #316]	@ (8004930 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80047f4:	61fb      	str	r3, [r7, #28]
          break;
 80047f6:	e00c      	b.n	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80047f8:	4b4b      	ldr	r3, [pc, #300]	@ (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80047fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b02      	cmp	r3, #2
 8004804:	d107      	bne.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8004806:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800480a:	61fb      	str	r3, [r7, #28]
          break;
 800480c:	e003      	b.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 800480e:	bf00      	nop
 8004810:	e320      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004812:	bf00      	nop
 8004814:	e31e      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004816:	bf00      	nop
        break;
 8004818:	e31c      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800481a:	4b43      	ldr	r3, [pc, #268]	@ (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800481c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004820:	f003 030c 	and.w	r3, r3, #12
 8004824:	613b      	str	r3, [r7, #16]
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	2b0c      	cmp	r3, #12
 800482a:	d83a      	bhi.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800482c:	a201      	add	r2, pc, #4	@ (adr r2, 8004834 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 800482e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004832:	bf00      	nop
 8004834:	08004869 	.word	0x08004869
 8004838:	080048a3 	.word	0x080048a3
 800483c:	080048a3 	.word	0x080048a3
 8004840:	080048a3 	.word	0x080048a3
 8004844:	08004871 	.word	0x08004871
 8004848:	080048a3 	.word	0x080048a3
 800484c:	080048a3 	.word	0x080048a3
 8004850:	080048a3 	.word	0x080048a3
 8004854:	08004879 	.word	0x08004879
 8004858:	080048a3 	.word	0x080048a3
 800485c:	080048a3 	.word	0x080048a3
 8004860:	080048a3 	.word	0x080048a3
 8004864:	0800488d 	.word	0x0800488d
          frequency = HAL_RCC_GetPCLK1Freq();
 8004868:	f7ff f9e8 	bl	8003c3c <HAL_RCC_GetPCLK1Freq>
 800486c:	61f8      	str	r0, [r7, #28]
          break;
 800486e:	e01d      	b.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8004870:	f7ff f94c 	bl	8003b0c <HAL_RCC_GetSysClockFreq>
 8004874:	61f8      	str	r0, [r7, #28]
          break;
 8004876:	e019      	b.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004878:	4b2b      	ldr	r3, [pc, #172]	@ (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004880:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004884:	d10f      	bne.n	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8004886:	4b2a      	ldr	r3, [pc, #168]	@ (8004930 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004888:	61fb      	str	r3, [r7, #28]
          break;
 800488a:	e00c      	b.n	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800488c:	4b26      	ldr	r3, [pc, #152]	@ (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800488e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b02      	cmp	r3, #2
 8004898:	d107      	bne.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 800489a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800489e:	61fb      	str	r3, [r7, #28]
          break;
 80048a0:	e003      	b.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 80048a2:	bf00      	nop
 80048a4:	e2d6      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80048a6:	bf00      	nop
 80048a8:	e2d4      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80048aa:	bf00      	nop
        break;
 80048ac:	e2d2      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80048ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80048b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80048b8:	613b      	str	r3, [r7, #16]
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	2b30      	cmp	r3, #48	@ 0x30
 80048be:	d021      	beq.n	8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	2b30      	cmp	r3, #48	@ 0x30
 80048c4:	d829      	bhi.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	d011      	beq.n	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	2b20      	cmp	r3, #32
 80048d0:	d823      	bhi.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d003      	beq.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	2b10      	cmp	r3, #16
 80048dc:	d004      	beq.n	80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 80048de:	e01c      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80048e0:	f7ff f9ac 	bl	8003c3c <HAL_RCC_GetPCLK1Freq>
 80048e4:	61f8      	str	r0, [r7, #28]
          break;
 80048e6:	e01d      	b.n	8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 80048e8:	f7ff f910 	bl	8003b0c <HAL_RCC_GetSysClockFreq>
 80048ec:	61f8      	str	r0, [r7, #28]
          break;
 80048ee:	e019      	b.n	8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80048f0:	4b0d      	ldr	r3, [pc, #52]	@ (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048fc:	d10f      	bne.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 80048fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004930 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004900:	61fb      	str	r3, [r7, #28]
          break;
 8004902:	e00c      	b.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004904:	4b08      	ldr	r3, [pc, #32]	@ (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b02      	cmp	r3, #2
 8004910:	d107      	bne.n	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8004912:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004916:	61fb      	str	r3, [r7, #28]
          break;
 8004918:	e003      	b.n	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 800491a:	bf00      	nop
 800491c:	e29a      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800491e:	bf00      	nop
 8004920:	e298      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004922:	bf00      	nop
        break;
 8004924:	e296      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004926:	bf00      	nop
 8004928:	40021000 	.word	0x40021000
 800492c:	0800bcf8 	.word	0x0800bcf8
 8004930:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004934:	4b9b      	ldr	r3, [pc, #620]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800493a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800493e:	613b      	str	r3, [r7, #16]
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	2bc0      	cmp	r3, #192	@ 0xc0
 8004944:	d021      	beq.n	800498a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2bc0      	cmp	r3, #192	@ 0xc0
 800494a:	d829      	bhi.n	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	2b80      	cmp	r3, #128	@ 0x80
 8004950:	d011      	beq.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	2b80      	cmp	r3, #128	@ 0x80
 8004956:	d823      	bhi.n	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	2b40      	cmp	r3, #64	@ 0x40
 8004962:	d004      	beq.n	800496e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8004964:	e01c      	b.n	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004966:	f7ff f969 	bl	8003c3c <HAL_RCC_GetPCLK1Freq>
 800496a:	61f8      	str	r0, [r7, #28]
          break;
 800496c:	e01d      	b.n	80049aa <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 800496e:	f7ff f8cd 	bl	8003b0c <HAL_RCC_GetSysClockFreq>
 8004972:	61f8      	str	r0, [r7, #28]
          break;
 8004974:	e019      	b.n	80049aa <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004976:	4b8b      	ldr	r3, [pc, #556]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800497e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004982:	d10f      	bne.n	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8004984:	4b88      	ldr	r3, [pc, #544]	@ (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004986:	61fb      	str	r3, [r7, #28]
          break;
 8004988:	e00c      	b.n	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800498a:	4b86      	ldr	r3, [pc, #536]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800498c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b02      	cmp	r3, #2
 8004996:	d107      	bne.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8004998:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800499c:	61fb      	str	r3, [r7, #28]
          break;
 800499e:	e003      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 80049a0:	bf00      	nop
 80049a2:	e257      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80049a4:	bf00      	nop
 80049a6:	e255      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80049a8:	bf00      	nop
        break;
 80049aa:	e253      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80049ac:	4b7d      	ldr	r3, [pc, #500]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80049ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049b6:	613b      	str	r3, [r7, #16]
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049be:	d025      	beq.n	8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049c6:	d82c      	bhi.n	8004a22 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049ce:	d013      	beq.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049d6:	d824      	bhi.n	8004a22 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d004      	beq.n	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049e4:	d004      	beq.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 80049e6:	e01c      	b.n	8004a22 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 80049e8:	f7ff f928 	bl	8003c3c <HAL_RCC_GetPCLK1Freq>
 80049ec:	61f8      	str	r0, [r7, #28]
          break;
 80049ee:	e01d      	b.n	8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 80049f0:	f7ff f88c 	bl	8003b0c <HAL_RCC_GetSysClockFreq>
 80049f4:	61f8      	str	r0, [r7, #28]
          break;
 80049f6:	e019      	b.n	8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80049f8:	4b6a      	ldr	r3, [pc, #424]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a04:	d10f      	bne.n	8004a26 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8004a06:	4b68      	ldr	r3, [pc, #416]	@ (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004a08:	61fb      	str	r3, [r7, #28]
          break;
 8004a0a:	e00c      	b.n	8004a26 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004a0c:	4b65      	ldr	r3, [pc, #404]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d107      	bne.n	8004a2a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8004a1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a1e:	61fb      	str	r3, [r7, #28]
          break;
 8004a20:	e003      	b.n	8004a2a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8004a22:	bf00      	nop
 8004a24:	e216      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004a26:	bf00      	nop
 8004a28:	e214      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004a2a:	bf00      	nop
        break;
 8004a2c:	e212      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004a2e:	4b5d      	ldr	r3, [pc, #372]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a34:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a38:	613b      	str	r3, [r7, #16]
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a40:	d025      	beq.n	8004a8e <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a48:	d82c      	bhi.n	8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a50:	d013      	beq.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a58:	d824      	bhi.n	8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d004      	beq.n	8004a6a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a66:	d004      	beq.n	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8004a68:	e01c      	b.n	8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004a6a:	f7ff f8e7 	bl	8003c3c <HAL_RCC_GetPCLK1Freq>
 8004a6e:	61f8      	str	r0, [r7, #28]
          break;
 8004a70:	e01d      	b.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8004a72:	f7ff f84b 	bl	8003b0c <HAL_RCC_GetSysClockFreq>
 8004a76:	61f8      	str	r0, [r7, #28]
          break;
 8004a78:	e019      	b.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a7a:	4b4a      	ldr	r3, [pc, #296]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a86:	d10f      	bne.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8004a88:	4b47      	ldr	r3, [pc, #284]	@ (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004a8a:	61fb      	str	r3, [r7, #28]
          break;
 8004a8c:	e00c      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004a8e:	4b45      	ldr	r3, [pc, #276]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d107      	bne.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8004a9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aa0:	61fb      	str	r3, [r7, #28]
          break;
 8004aa2:	e003      	b.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8004aa4:	bf00      	nop
 8004aa6:	e1d5      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004aa8:	bf00      	nop
 8004aaa:	e1d3      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004aac:	bf00      	nop
        break;
 8004aae:	e1d1      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004ab0:	4b3c      	ldr	r3, [pc, #240]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004aba:	613b      	str	r3, [r7, #16]
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004ac2:	d00c      	beq.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004aca:	d864      	bhi.n	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ad2:	d008      	beq.n	8004ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ada:	d030      	beq.n	8004b3e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8004adc:	e05b      	b.n	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004ade:	f7ff f815 	bl	8003b0c <HAL_RCC_GetSysClockFreq>
 8004ae2:	61f8      	str	r0, [r7, #28]
          break;
 8004ae4:	e05c      	b.n	8004ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8004ae6:	4b2f      	ldr	r3, [pc, #188]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004aee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004af2:	d152      	bne.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8004af4:	4b2b      	ldr	r3, [pc, #172]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d04c      	beq.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004b00:	4b28      	ldr	r3, [pc, #160]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	0a1b      	lsrs	r3, r3, #8
 8004b06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b0a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	fb03 f202 	mul.w	r2, r3, r2
 8004b14:	4b23      	ldr	r3, [pc, #140]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	091b      	lsrs	r3, r3, #4
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	3301      	adds	r3, #1
 8004b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b24:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004b26:	4b1f      	ldr	r3, [pc, #124]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	0e5b      	lsrs	r3, r3, #25
 8004b2c:	f003 0303 	and.w	r3, r3, #3
 8004b30:	3301      	adds	r3, #1
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3a:	61fb      	str	r3, [r7, #28]
          break;
 8004b3c:	e02d      	b.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8004b3e:	4b19      	ldr	r3, [pc, #100]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b4a:	d128      	bne.n	8004b9e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8004b4c:	4b15      	ldr	r3, [pc, #84]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d022      	beq.n	8004b9e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004b58:	4b12      	ldr	r3, [pc, #72]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	0a1b      	lsrs	r3, r3, #8
 8004b5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b62:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	fb03 f202 	mul.w	r2, r3, r2
 8004b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	091b      	lsrs	r3, r3, #4
 8004b72:	f003 0307 	and.w	r3, r3, #7
 8004b76:	3301      	adds	r3, #1
 8004b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8004b7e:	4b09      	ldr	r3, [pc, #36]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	0e5b      	lsrs	r3, r3, #25
 8004b84:	f003 0303 	and.w	r3, r3, #3
 8004b88:	3301      	adds	r3, #1
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b92:	61fb      	str	r3, [r7, #28]
          break;
 8004b94:	e003      	b.n	8004b9e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8004b96:	bf00      	nop
 8004b98:	e15c      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004b9a:	bf00      	nop
 8004b9c:	e15a      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004b9e:	bf00      	nop
        break;
 8004ba0:	e158      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004ba2:	bf00      	nop
 8004ba4:	40021000 	.word	0x40021000
 8004ba8:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004bac:	4b9d      	ldr	r3, [pc, #628]	@ (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004bb6:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d103      	bne.n	8004bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004bbe:	f7ff f853 	bl	8003c68 <HAL_RCC_GetPCLK2Freq>
 8004bc2:	61f8      	str	r0, [r7, #28]
        break;
 8004bc4:	e146      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8004bc6:	f7fe ffa1 	bl	8003b0c <HAL_RCC_GetSysClockFreq>
 8004bca:	61f8      	str	r0, [r7, #28]
        break;
 8004bcc:	e142      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004bce:	4b95      	ldr	r3, [pc, #596]	@ (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004bd8:	613b      	str	r3, [r7, #16]
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004be0:	d013      	beq.n	8004c0a <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004be8:	d819      	bhi.n	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d004      	beq.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bf6:	d004      	beq.n	8004c02 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8004bf8:	e011      	b.n	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004bfa:	f7ff f81f 	bl	8003c3c <HAL_RCC_GetPCLK1Freq>
 8004bfe:	61f8      	str	r0, [r7, #28]
          break;
 8004c00:	e010      	b.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c02:	f7fe ff83 	bl	8003b0c <HAL_RCC_GetSysClockFreq>
 8004c06:	61f8      	str	r0, [r7, #28]
          break;
 8004c08:	e00c      	b.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c0a:	4b86      	ldr	r3, [pc, #536]	@ (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c16:	d104      	bne.n	8004c22 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8004c18:	4b83      	ldr	r3, [pc, #524]	@ (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004c1a:	61fb      	str	r3, [r7, #28]
          break;
 8004c1c:	e001      	b.n	8004c22 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8004c1e:	bf00      	nop
 8004c20:	e118      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004c22:	bf00      	nop
        break;
 8004c24:	e116      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004c26:	4b7f      	ldr	r3, [pc, #508]	@ (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004c30:	613b      	str	r3, [r7, #16]
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c38:	d013      	beq.n	8004c62 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c40:	d819      	bhi.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d004      	beq.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c4e:	d004      	beq.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8004c50:	e011      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c52:	f7fe fff3 	bl	8003c3c <HAL_RCC_GetPCLK1Freq>
 8004c56:	61f8      	str	r0, [r7, #28]
          break;
 8004c58:	e010      	b.n	8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c5a:	f7fe ff57 	bl	8003b0c <HAL_RCC_GetSysClockFreq>
 8004c5e:	61f8      	str	r0, [r7, #28]
          break;
 8004c60:	e00c      	b.n	8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c62:	4b70      	ldr	r3, [pc, #448]	@ (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c6e:	d104      	bne.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8004c70:	4b6d      	ldr	r3, [pc, #436]	@ (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004c72:	61fb      	str	r3, [r7, #28]
          break;
 8004c74:	e001      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8004c76:	bf00      	nop
 8004c78:	e0ec      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004c7a:	bf00      	nop
        break;
 8004c7c:	e0ea      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004c7e:	4b69      	ldr	r3, [pc, #420]	@ (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c88:	613b      	str	r3, [r7, #16]
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c90:	d013      	beq.n	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c98:	d819      	bhi.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d004      	beq.n	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ca6:	d004      	beq.n	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8004ca8:	e011      	b.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004caa:	f7fe ffc7 	bl	8003c3c <HAL_RCC_GetPCLK1Freq>
 8004cae:	61f8      	str	r0, [r7, #28]
          break;
 8004cb0:	e010      	b.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8004cb2:	f7fe ff2b 	bl	8003b0c <HAL_RCC_GetSysClockFreq>
 8004cb6:	61f8      	str	r0, [r7, #28]
          break;
 8004cb8:	e00c      	b.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004cba:	4b5a      	ldr	r3, [pc, #360]	@ (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cc6:	d104      	bne.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8004cc8:	4b57      	ldr	r3, [pc, #348]	@ (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004cca:	61fb      	str	r3, [r7, #28]
          break;
 8004ccc:	e001      	b.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8004cce:	bf00      	nop
 8004cd0:	e0c0      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004cd2:	bf00      	nop
        break;
 8004cd4:	e0be      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004cd6:	4b53      	ldr	r3, [pc, #332]	@ (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cdc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004ce0:	613b      	str	r3, [r7, #16]
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004ce8:	d02c      	beq.n	8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004cf0:	d833      	bhi.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004cf8:	d01a      	beq.n	8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004d00:	d82b      	bhi.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d004      	beq.n	8004d12 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d0e:	d004      	beq.n	8004d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8004d10:	e023      	b.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004d12:	f7fe ff93 	bl	8003c3c <HAL_RCC_GetPCLK1Freq>
 8004d16:	61f8      	str	r0, [r7, #28]
          break;
 8004d18:	e026      	b.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004d1a:	4b42      	ldr	r3, [pc, #264]	@ (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d11a      	bne.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8004d28:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004d2c:	61fb      	str	r3, [r7, #28]
          break;
 8004d2e:	e016      	b.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d30:	4b3c      	ldr	r3, [pc, #240]	@ (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d3c:	d111      	bne.n	8004d62 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8004d3e:	4b3a      	ldr	r3, [pc, #232]	@ (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004d40:	61fb      	str	r3, [r7, #28]
          break;
 8004d42:	e00e      	b.n	8004d62 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004d44:	4b37      	ldr	r3, [pc, #220]	@ (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d109      	bne.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8004d52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d56:	61fb      	str	r3, [r7, #28]
          break;
 8004d58:	e005      	b.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8004d5a:	bf00      	nop
 8004d5c:	e07a      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004d5e:	bf00      	nop
 8004d60:	e078      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004d62:	bf00      	nop
 8004d64:	e076      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004d66:	bf00      	nop
        break;
 8004d68:	e074      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004d6a:	4b2e      	ldr	r3, [pc, #184]	@ (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d70:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004d74:	613b      	str	r3, [r7, #16]
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d7c:	d02c      	beq.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d84:	d833      	bhi.n	8004dee <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d8c:	d01a      	beq.n	8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d94:	d82b      	bhi.n	8004dee <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d004      	beq.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004da2:	d004      	beq.n	8004dae <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8004da4:	e023      	b.n	8004dee <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004da6:	f7fe ff49 	bl	8003c3c <HAL_RCC_GetPCLK1Freq>
 8004daa:	61f8      	str	r0, [r7, #28]
          break;
 8004dac:	e026      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004dae:	4b1d      	ldr	r3, [pc, #116]	@ (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d11a      	bne.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8004dbc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004dc0:	61fb      	str	r3, [r7, #28]
          break;
 8004dc2:	e016      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004dc4:	4b17      	ldr	r3, [pc, #92]	@ (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dd0:	d111      	bne.n	8004df6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8004dd2:	4b15      	ldr	r3, [pc, #84]	@ (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004dd4:	61fb      	str	r3, [r7, #28]
          break;
 8004dd6:	e00e      	b.n	8004df6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004dd8:	4b12      	ldr	r3, [pc, #72]	@ (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d109      	bne.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8004de6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dea:	61fb      	str	r3, [r7, #28]
          break;
 8004dec:	e005      	b.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8004dee:	bf00      	nop
 8004df0:	e030      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004df2:	bf00      	nop
 8004df4:	e02e      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004df6:	bf00      	nop
 8004df8:	e02c      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004dfa:	bf00      	nop
        break;
 8004dfc:	e02a      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8004dfe:	4b09      	ldr	r3, [pc, #36]	@ (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e04:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d004      	beq.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e16:	d009      	beq.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8004e18:	e012      	b.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004e1a:	f7fe ff0f 	bl	8003c3c <HAL_RCC_GetPCLK1Freq>
 8004e1e:	61f8      	str	r0, [r7, #28]
          break;
 8004e20:	e00e      	b.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8004e22:	bf00      	nop
 8004e24:	40021000 	.word	0x40021000
 8004e28:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e38:	d101      	bne.n	8004e3e <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8004e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004e3c:	61fb      	str	r3, [r7, #28]
          break;
 8004e3e:	bf00      	nop
        break;
 8004e40:	e008      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004e42:	bf00      	nop
 8004e44:	e006      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004e46:	bf00      	nop
 8004e48:	e004      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004e4a:	bf00      	nop
 8004e4c:	e002      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004e4e:	bf00      	nop
 8004e50:	e000      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004e52:	bf00      	nop
    }
  }

  return(frequency);
 8004e54:	69fb      	ldr	r3, [r7, #28]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3720      	adds	r7, #32
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	40021000 	.word	0x40021000
 8004e64:	00f42400 	.word	0x00f42400

08004e68 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e76:	4b75      	ldr	r3, [pc, #468]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d018      	beq.n	8004eb4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004e82:	4b72      	ldr	r3, [pc, #456]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f003 0203 	and.w	r2, r3, #3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d10d      	bne.n	8004eae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
       ||
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d009      	beq.n	8004eae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004e9a:	4b6c      	ldr	r3, [pc, #432]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	091b      	lsrs	r3, r3, #4
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
       ||
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d047      	beq.n	8004f3e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	73fb      	strb	r3, [r7, #15]
 8004eb2:	e044      	b.n	8004f3e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b03      	cmp	r3, #3
 8004eba:	d018      	beq.n	8004eee <RCCEx_PLLSAI1_Config+0x86>
 8004ebc:	2b03      	cmp	r3, #3
 8004ebe:	d825      	bhi.n	8004f0c <RCCEx_PLLSAI1_Config+0xa4>
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d002      	beq.n	8004eca <RCCEx_PLLSAI1_Config+0x62>
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d009      	beq.n	8004edc <RCCEx_PLLSAI1_Config+0x74>
 8004ec8:	e020      	b.n	8004f0c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004eca:	4b60      	ldr	r3, [pc, #384]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d11d      	bne.n	8004f12 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eda:	e01a      	b.n	8004f12 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004edc:	4b5b      	ldr	r3, [pc, #364]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d116      	bne.n	8004f16 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eec:	e013      	b.n	8004f16 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004eee:	4b57      	ldr	r3, [pc, #348]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10f      	bne.n	8004f1a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004efa:	4b54      	ldr	r3, [pc, #336]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d109      	bne.n	8004f1a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f0a:	e006      	b.n	8004f1a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f10:	e004      	b.n	8004f1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f12:	bf00      	nop
 8004f14:	e002      	b.n	8004f1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f16:	bf00      	nop
 8004f18:	e000      	b.n	8004f1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10d      	bne.n	8004f3e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f22:	4b4a      	ldr	r3, [pc, #296]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6819      	ldr	r1, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	430b      	orrs	r3, r1
 8004f38:	4944      	ldr	r1, [pc, #272]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f3e:	7bfb      	ldrb	r3, [r7, #15]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d17d      	bne.n	8005040 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f44:	4b41      	ldr	r3, [pc, #260]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a40      	ldr	r2, [pc, #256]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f4a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f50:	f7fc ff30 	bl	8001db4 <HAL_GetTick>
 8004f54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f56:	e009      	b.n	8004f6c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f58:	f7fc ff2c 	bl	8001db4 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d902      	bls.n	8004f6c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	73fb      	strb	r3, [r7, #15]
        break;
 8004f6a:	e005      	b.n	8004f78 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f6c:	4b37      	ldr	r3, [pc, #220]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1ef      	bne.n	8004f58 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d160      	bne.n	8005040 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d111      	bne.n	8004fa8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f84:	4b31      	ldr	r3, [pc, #196]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004f8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	6892      	ldr	r2, [r2, #8]
 8004f94:	0211      	lsls	r1, r2, #8
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	68d2      	ldr	r2, [r2, #12]
 8004f9a:	0912      	lsrs	r2, r2, #4
 8004f9c:	0452      	lsls	r2, r2, #17
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	492a      	ldr	r1, [pc, #168]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	610b      	str	r3, [r1, #16]
 8004fa6:	e027      	b.n	8004ff8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d112      	bne.n	8004fd4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fae:	4b27      	ldr	r3, [pc, #156]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004fb6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6892      	ldr	r2, [r2, #8]
 8004fbe:	0211      	lsls	r1, r2, #8
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6912      	ldr	r2, [r2, #16]
 8004fc4:	0852      	lsrs	r2, r2, #1
 8004fc6:	3a01      	subs	r2, #1
 8004fc8:	0552      	lsls	r2, r2, #21
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	491f      	ldr	r1, [pc, #124]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	610b      	str	r3, [r1, #16]
 8004fd2:	e011      	b.n	8004ff8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004fdc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	6892      	ldr	r2, [r2, #8]
 8004fe4:	0211      	lsls	r1, r2, #8
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	6952      	ldr	r2, [r2, #20]
 8004fea:	0852      	lsrs	r2, r2, #1
 8004fec:	3a01      	subs	r2, #1
 8004fee:	0652      	lsls	r2, r2, #25
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	4916      	ldr	r1, [pc, #88]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ff8:	4b14      	ldr	r3, [pc, #80]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a13      	ldr	r2, [pc, #76]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ffe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005002:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005004:	f7fc fed6 	bl	8001db4 <HAL_GetTick>
 8005008:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800500a:	e009      	b.n	8005020 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800500c:	f7fc fed2 	bl	8001db4 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d902      	bls.n	8005020 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	73fb      	strb	r3, [r7, #15]
          break;
 800501e:	e005      	b.n	800502c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005020:	4b0a      	ldr	r3, [pc, #40]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0ef      	beq.n	800500c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800502c:	7bfb      	ldrb	r3, [r7, #15]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d106      	bne.n	8005040 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005032:	4b06      	ldr	r3, [pc, #24]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005034:	691a      	ldr	r2, [r3, #16]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	4904      	ldr	r1, [pc, #16]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 800503c:	4313      	orrs	r3, r2
 800503e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005040:	7bfb      	ldrb	r3, [r7, #15]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	40021000 	.word	0x40021000

08005050 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800505e:	4b6a      	ldr	r3, [pc, #424]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f003 0303 	and.w	r3, r3, #3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d018      	beq.n	800509c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800506a:	4b67      	ldr	r3, [pc, #412]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f003 0203 	and.w	r2, r3, #3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	429a      	cmp	r2, r3
 8005078:	d10d      	bne.n	8005096 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
       ||
 800507e:	2b00      	cmp	r3, #0
 8005080:	d009      	beq.n	8005096 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005082:	4b61      	ldr	r3, [pc, #388]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	091b      	lsrs	r3, r3, #4
 8005088:	f003 0307 	and.w	r3, r3, #7
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
       ||
 8005092:	429a      	cmp	r2, r3
 8005094:	d047      	beq.n	8005126 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	73fb      	strb	r3, [r7, #15]
 800509a:	e044      	b.n	8005126 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b03      	cmp	r3, #3
 80050a2:	d018      	beq.n	80050d6 <RCCEx_PLLSAI2_Config+0x86>
 80050a4:	2b03      	cmp	r3, #3
 80050a6:	d825      	bhi.n	80050f4 <RCCEx_PLLSAI2_Config+0xa4>
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d002      	beq.n	80050b2 <RCCEx_PLLSAI2_Config+0x62>
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d009      	beq.n	80050c4 <RCCEx_PLLSAI2_Config+0x74>
 80050b0:	e020      	b.n	80050f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80050b2:	4b55      	ldr	r3, [pc, #340]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d11d      	bne.n	80050fa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050c2:	e01a      	b.n	80050fa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050c4:	4b50      	ldr	r3, [pc, #320]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d116      	bne.n	80050fe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050d4:	e013      	b.n	80050fe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050d6:	4b4c      	ldr	r3, [pc, #304]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10f      	bne.n	8005102 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050e2:	4b49      	ldr	r3, [pc, #292]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d109      	bne.n	8005102 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050f2:	e006      	b.n	8005102 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	73fb      	strb	r3, [r7, #15]
      break;
 80050f8:	e004      	b.n	8005104 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80050fa:	bf00      	nop
 80050fc:	e002      	b.n	8005104 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80050fe:	bf00      	nop
 8005100:	e000      	b.n	8005104 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005102:	bf00      	nop
    }

    if(status == HAL_OK)
 8005104:	7bfb      	ldrb	r3, [r7, #15]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10d      	bne.n	8005126 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800510a:	4b3f      	ldr	r3, [pc, #252]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6819      	ldr	r1, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	3b01      	subs	r3, #1
 800511c:	011b      	lsls	r3, r3, #4
 800511e:	430b      	orrs	r3, r1
 8005120:	4939      	ldr	r1, [pc, #228]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005122:	4313      	orrs	r3, r2
 8005124:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005126:	7bfb      	ldrb	r3, [r7, #15]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d167      	bne.n	80051fc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800512c:	4b36      	ldr	r3, [pc, #216]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a35      	ldr	r2, [pc, #212]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005132:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005136:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005138:	f7fc fe3c 	bl	8001db4 <HAL_GetTick>
 800513c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800513e:	e009      	b.n	8005154 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005140:	f7fc fe38 	bl	8001db4 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d902      	bls.n	8005154 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	73fb      	strb	r3, [r7, #15]
        break;
 8005152:	e005      	b.n	8005160 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005154:	4b2c      	ldr	r3, [pc, #176]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1ef      	bne.n	8005140 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005160:	7bfb      	ldrb	r3, [r7, #15]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d14a      	bne.n	80051fc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d111      	bne.n	8005190 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800516c:	4b26      	ldr	r3, [pc, #152]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005174:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6892      	ldr	r2, [r2, #8]
 800517c:	0211      	lsls	r1, r2, #8
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	68d2      	ldr	r2, [r2, #12]
 8005182:	0912      	lsrs	r2, r2, #4
 8005184:	0452      	lsls	r2, r2, #17
 8005186:	430a      	orrs	r2, r1
 8005188:	491f      	ldr	r1, [pc, #124]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 800518a:	4313      	orrs	r3, r2
 800518c:	614b      	str	r3, [r1, #20]
 800518e:	e011      	b.n	80051b4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005190:	4b1d      	ldr	r3, [pc, #116]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005192:	695b      	ldr	r3, [r3, #20]
 8005194:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005198:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6892      	ldr	r2, [r2, #8]
 80051a0:	0211      	lsls	r1, r2, #8
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6912      	ldr	r2, [r2, #16]
 80051a6:	0852      	lsrs	r2, r2, #1
 80051a8:	3a01      	subs	r2, #1
 80051aa:	0652      	lsls	r2, r2, #25
 80051ac:	430a      	orrs	r2, r1
 80051ae:	4916      	ldr	r1, [pc, #88]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80051b4:	4b14      	ldr	r3, [pc, #80]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a13      	ldr	r2, [pc, #76]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c0:	f7fc fdf8 	bl	8001db4 <HAL_GetTick>
 80051c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80051c6:	e009      	b.n	80051dc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80051c8:	f7fc fdf4 	bl	8001db4 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d902      	bls.n	80051dc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	73fb      	strb	r3, [r7, #15]
          break;
 80051da:	e005      	b.n	80051e8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80051dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0ef      	beq.n	80051c8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80051ee:	4b06      	ldr	r3, [pc, #24]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f0:	695a      	ldr	r2, [r3, #20]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	4904      	ldr	r1, [pc, #16]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	40021000 	.word	0x40021000

0800520c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800520c:	b480      	push	{r7}
 800520e:	b089      	sub	sp, #36	@ 0x24
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8005216:	2300      	movs	r3, #0
 8005218:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800521a:	2300      	movs	r3, #0
 800521c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800521e:	2300      	movs	r3, #0
 8005220:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005228:	d10c      	bne.n	8005244 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800522a:	4b6e      	ldr	r3, [pc, #440]	@ (80053e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800522c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005230:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005234:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800523c:	d112      	bne.n	8005264 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800523e:	4b6a      	ldr	r3, [pc, #424]	@ (80053e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8005240:	61fb      	str	r3, [r7, #28]
 8005242:	e00f      	b.n	8005264 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800524a:	d10b      	bne.n	8005264 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800524c:	4b65      	ldr	r3, [pc, #404]	@ (80053e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800524e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005252:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8005256:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800525e:	d101      	bne.n	8005264 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8005260:	4b61      	ldr	r3, [pc, #388]	@ (80053e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8005262:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	2b00      	cmp	r3, #0
 8005268:	f040 80b4 	bne.w	80053d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005276:	d003      	beq.n	8005280 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800527e:	d135      	bne.n	80052ec <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005280:	4b58      	ldr	r3, [pc, #352]	@ (80053e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005288:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800528c:	f040 80a1 	bne.w	80053d2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8005290:	4b54      	ldr	r3, [pc, #336]	@ (80053e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 809a 	beq.w	80053d2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800529e:	4b51      	ldr	r3, [pc, #324]	@ (80053e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	091b      	lsrs	r3, r3, #4
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	3301      	adds	r3, #1
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80052b2:	4b4c      	ldr	r3, [pc, #304]	@ (80053e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	0a1b      	lsrs	r3, r3, #8
 80052b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052bc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10a      	bne.n	80052da <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80052c4:	4b47      	ldr	r3, [pc, #284]	@ (80053e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d002      	beq.n	80052d6 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 80052d0:	2311      	movs	r3, #17
 80052d2:	617b      	str	r3, [r7, #20]
 80052d4:	e001      	b.n	80052da <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 80052d6:	2307      	movs	r3, #7
 80052d8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	fb03 f202 	mul.w	r2, r3, r2
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e8:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80052ea:	e072      	b.n	80053d2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d133      	bne.n	800535a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80052f2:	4b3c      	ldr	r3, [pc, #240]	@ (80053e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052fe:	d169      	bne.n	80053d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005300:	4b38      	ldr	r3, [pc, #224]	@ (80053e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d063      	beq.n	80053d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800530c:	4b35      	ldr	r3, [pc, #212]	@ (80053e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	091b      	lsrs	r3, r3, #4
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	3301      	adds	r3, #1
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	fbb2 f3f3 	udiv	r3, r2, r3
 800531e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005320:	4b30      	ldr	r3, [pc, #192]	@ (80053e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	0a1b      	lsrs	r3, r3, #8
 8005326:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800532a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10a      	bne.n	8005348 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8005332:	4b2c      	ldr	r3, [pc, #176]	@ (80053e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d002      	beq.n	8005344 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800533e:	2311      	movs	r3, #17
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	e001      	b.n	8005348 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8005344:	2307      	movs	r3, #7
 8005346:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	fb03 f202 	mul.w	r2, r3, r2
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	fbb2 f3f3 	udiv	r3, r2, r3
 8005356:	61fb      	str	r3, [r7, #28]
 8005358:	e03c      	b.n	80053d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005360:	d003      	beq.n	800536a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005368:	d134      	bne.n	80053d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800536a:	4b1e      	ldr	r3, [pc, #120]	@ (80053e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005372:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005376:	d12d      	bne.n	80053d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005378:	4b1a      	ldr	r3, [pc, #104]	@ (80053e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d027      	beq.n	80053d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005384:	4b17      	ldr	r3, [pc, #92]	@ (80053e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	091b      	lsrs	r3, r3, #4
 800538a:	f003 0307 	and.w	r3, r3, #7
 800538e:	3301      	adds	r3, #1
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	fbb2 f3f3 	udiv	r3, r2, r3
 8005396:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005398:	4b12      	ldr	r3, [pc, #72]	@ (80053e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	0a1b      	lsrs	r3, r3, #8
 800539e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053a2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10a      	bne.n	80053c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80053aa:	4b0e      	ldr	r3, [pc, #56]	@ (80053e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d002      	beq.n	80053bc <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 80053b6:	2311      	movs	r3, #17
 80053b8:	617b      	str	r3, [r7, #20]
 80053ba:	e001      	b.n	80053c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 80053bc:	2307      	movs	r3, #7
 80053be:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	fb03 f202 	mul.w	r2, r3, r2
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ce:	61fb      	str	r3, [r7, #28]
 80053d0:	e000      	b.n	80053d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80053d2:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80053d4:	69fb      	ldr	r3, [r7, #28]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3724      	adds	r7, #36	@ 0x24
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	40021000 	.word	0x40021000
 80053e8:	001fff68 	.word	0x001fff68

080053ec <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
 80053f8:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d904      	bls.n	800540a <HAL_SAI_InitProtocol+0x1e>
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	3b03      	subs	r3, #3
 8005404:	2b01      	cmp	r3, #1
 8005406:	d812      	bhi.n	800542e <HAL_SAI_InitProtocol+0x42>
 8005408:	e008      	b.n	800541c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	68b9      	ldr	r1, [r7, #8]
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 fba3 	bl	8005b5c <SAI_InitI2S>
 8005416:	4603      	mov	r3, r0
 8005418:	75fb      	strb	r3, [r7, #23]
      break;
 800541a:	e00b      	b.n	8005434 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	68b9      	ldr	r1, [r7, #8]
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f000 fc4c 	bl	8005cc0 <SAI_InitPCM>
 8005428:	4603      	mov	r3, r0
 800542a:	75fb      	strb	r3, [r7, #23]
      break;
 800542c:	e002      	b.n	8005434 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	75fb      	strb	r3, [r7, #23]
      break;
 8005432:	bf00      	nop
  }

  if (status == HAL_OK)
 8005434:	7dfb      	ldrb	r3, [r7, #23]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d104      	bne.n	8005444 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f000 f808 	bl	8005450 <HAL_SAI_Init>
 8005440:	4603      	mov	r3, r0
 8005442:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005444:	7dfb      	ldrb	r3, [r7, #23]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3718      	adds	r7, #24
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
	...

08005450 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b088      	sub	sp, #32
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e155      	b.n	800570e <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d106      	bne.n	800547c <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7fb fc48 	bl	8000d0c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 fca1 	bl	8005dc4 <SAI_Disable>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e140      	b.n	800570e <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2202      	movs	r2, #2
 8005490:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	2b02      	cmp	r3, #2
 800549a:	d00c      	beq.n	80054b6 <HAL_SAI_Init+0x66>
 800549c:	2b02      	cmp	r3, #2
 800549e:	d80d      	bhi.n	80054bc <HAL_SAI_Init+0x6c>
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <HAL_SAI_Init+0x5a>
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d003      	beq.n	80054b0 <HAL_SAI_Init+0x60>
 80054a8:	e008      	b.n	80054bc <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80054aa:	2300      	movs	r3, #0
 80054ac:	61fb      	str	r3, [r7, #28]
      break;
 80054ae:	e008      	b.n	80054c2 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80054b0:	2310      	movs	r3, #16
 80054b2:	61fb      	str	r3, [r7, #28]
      break;
 80054b4:	e005      	b.n	80054c2 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80054b6:	2320      	movs	r3, #32
 80054b8:	61fb      	str	r3, [r7, #28]
      break;
 80054ba:	e002      	b.n	80054c2 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 80054bc:	2300      	movs	r3, #0
 80054be:	61fb      	str	r3, [r7, #28]
      break;
 80054c0:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	2b03      	cmp	r3, #3
 80054c8:	d81d      	bhi.n	8005506 <HAL_SAI_Init+0xb6>
 80054ca:	a201      	add	r2, pc, #4	@ (adr r2, 80054d0 <HAL_SAI_Init+0x80>)
 80054cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d0:	080054e1 	.word	0x080054e1
 80054d4:	080054e7 	.word	0x080054e7
 80054d8:	080054ef 	.word	0x080054ef
 80054dc:	080054f7 	.word	0x080054f7
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80054e0:	2300      	movs	r3, #0
 80054e2:	617b      	str	r3, [r7, #20]
      break;
 80054e4:	e012      	b.n	800550c <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80054e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054ea:	617b      	str	r3, [r7, #20]
      break;
 80054ec:	e00e      	b.n	800550c <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80054ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80054f2:	617b      	str	r3, [r7, #20]
      break;
 80054f4:	e00a      	b.n	800550c <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80054f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80054fa:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f043 0301 	orr.w	r3, r3, #1
 8005502:	61fb      	str	r3, [r7, #28]
      break;
 8005504:	e002      	b.n	800550c <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8005506:	2300      	movs	r3, #0
 8005508:	617b      	str	r3, [r7, #20]
      break;
 800550a:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a81      	ldr	r2, [pc, #516]	@ (8005718 <HAL_SAI_Init+0x2c8>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d004      	beq.n	8005520 <HAL_SAI_Init+0xd0>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a80      	ldr	r2, [pc, #512]	@ (800571c <HAL_SAI_Init+0x2cc>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d103      	bne.n	8005528 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8005520:	4a7f      	ldr	r2, [pc, #508]	@ (8005720 <HAL_SAI_Init+0x2d0>)
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	6013      	str	r3, [r2, #0]
 8005526:	e002      	b.n	800552e <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005528:	4a7e      	ldr	r2, [pc, #504]	@ (8005724 <HAL_SAI_Init+0x2d4>)
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d041      	beq.n	80055ba <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a77      	ldr	r2, [pc, #476]	@ (8005718 <HAL_SAI_Init+0x2c8>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d004      	beq.n	800554a <HAL_SAI_Init+0xfa>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a75      	ldr	r2, [pc, #468]	@ (800571c <HAL_SAI_Init+0x2cc>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d105      	bne.n	8005556 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800554a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800554e:	f7fe ff1d 	bl	800438c <HAL_RCCEx_GetPeriphCLKFreq>
 8005552:	6138      	str	r0, [r7, #16]
 8005554:	e004      	b.n	8005560 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005556:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800555a:	f7fe ff17 	bl	800438c <HAL_RCCEx_GetPeriphCLKFreq>
 800555e:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	4613      	mov	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4413      	add	r3, r2
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	461a      	mov	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	69db      	ldr	r3, [r3, #28]
 8005570:	025b      	lsls	r3, r3, #9
 8005572:	fbb2 f3f3 	udiv	r3, r2, r3
 8005576:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4a6b      	ldr	r2, [pc, #428]	@ (8005728 <HAL_SAI_Init+0x2d8>)
 800557c:	fba2 2303 	umull	r2, r3, r2, r3
 8005580:	08da      	lsrs	r2, r3, #3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8005586:	68f9      	ldr	r1, [r7, #12]
 8005588:	4b67      	ldr	r3, [pc, #412]	@ (8005728 <HAL_SAI_Init+0x2d8>)
 800558a:	fba3 2301 	umull	r2, r3, r3, r1
 800558e:	08da      	lsrs	r2, r3, #3
 8005590:	4613      	mov	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	1aca      	subs	r2, r1, r3
 800559a:	2a08      	cmp	r2, #8
 800559c:	d904      	bls.n	80055a8 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	1c5a      	adds	r2, r3, #1
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	d104      	bne.n	80055ba <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a1b      	ldr	r3, [r3, #32]
 80055b4:	085a      	lsrs	r2, r3, #1
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <HAL_SAI_Init+0x17a>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d109      	bne.n	80055de <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d101      	bne.n	80055d6 <HAL_SAI_Init+0x186>
 80055d2:	2300      	movs	r3, #0
 80055d4:	e001      	b.n	80055da <HAL_SAI_Init+0x18a>
 80055d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80055da:	61bb      	str	r3, [r7, #24]
 80055dc:	e008      	b.n	80055f0 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d102      	bne.n	80055ec <HAL_SAI_Init+0x19c>
 80055e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80055ea:	e000      	b.n	80055ee <HAL_SAI_Init+0x19e>
 80055ec:	2300      	movs	r3, #0
 80055ee:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6819      	ldr	r1, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	4b4c      	ldr	r3, [pc, #304]	@ (800572c <HAL_SAI_Init+0x2dc>)
 80055fc:	400b      	ands	r3, r1
 80055fe:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6819      	ldr	r1, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800560e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005614:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800561a:	431a      	orrs	r2, r3
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 8005628:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005634:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	051b      	lsls	r3, r3, #20
 800563c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	6812      	ldr	r2, [r2, #0]
 8005650:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005654:	f023 030f 	bic.w	r3, r3, #15
 8005658:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6859      	ldr	r1, [r3, #4]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	699a      	ldr	r2, [r3, #24]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005668:	431a      	orrs	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800566e:	431a      	orrs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6899      	ldr	r1, [r3, #8]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	4b2b      	ldr	r3, [pc, #172]	@ (8005730 <HAL_SAI_Init+0x2e0>)
 8005684:	400b      	ands	r3, r1
 8005686:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6899      	ldr	r1, [r3, #8]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005692:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005698:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800569e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 80056a4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056aa:	3b01      	subs	r3, #1
 80056ac:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80056ae:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68d9      	ldr	r1, [r3, #12]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80056c6:	400b      	ands	r3, r1
 80056c8:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68d9      	ldr	r1, [r3, #12]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056d8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056de:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80056e0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056e6:	3b01      	subs	r3, #1
 80056e8:	021b      	lsls	r3, r3, #8
 80056ea:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3720      	adds	r7, #32
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	40015404 	.word	0x40015404
 800571c:	40015424 	.word	0x40015424
 8005720:	40015400 	.word	0x40015400
 8005724:	40015800 	.word	0x40015800
 8005728:	cccccccd 	.word	0xcccccccd
 800572c:	ff05c010 	.word	0xff05c010
 8005730:	fff88000 	.word	0xfff88000

08005734 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800573c:	2300      	movs	r3, #0
 800573e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005746:	2b01      	cmp	r3, #1
 8005748:	d101      	bne.n	800574e <HAL_SAI_Abort+0x1a>
 800574a:	2302      	movs	r3, #2
 800574c:	e053      	b.n	80057f6 <HAL_SAI_Abort+0xc2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 fb34 	bl	8005dc4 <SAI_Disable>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d001      	beq.n	8005766 <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005770:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005774:	d125      	bne.n	80057c2 <HAL_SAI_Abort+0x8e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005784:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b12      	cmp	r3, #18
 8005790:	d108      	bne.n	80057a4 <HAL_SAI_Abort+0x70>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005796:	2b00      	cmp	r3, #0
 8005798:	d004      	beq.n	80057a4 <HAL_SAI_Abort+0x70>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fc fcae 	bl	8002100 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b22      	cmp	r3, #34	@ 0x22
 80057ae:	d108      	bne.n	80057c2 <HAL_SAI_Abort+0x8e>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d004      	beq.n	80057c2 <HAL_SAI_Abort+0x8e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057bc:	4618      	mov	r0, r3
 80057be:	f7fc fc9f 	bl	8002100 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2200      	movs	r2, #0
 80057c8:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80057d2:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f042 0208 	orr.w	r2, r2, #8
 80057e2:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 80057f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
	...

08005800 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 8192 	beq.w	8005b3a <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f003 0308 	and.w	r3, r3, #8
 8005834:	2b00      	cmp	r3, #0
 8005836:	d009      	beq.n	800584c <HAL_SAI_IRQHandler+0x4c>
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f003 0308 	and.w	r3, r3, #8
 800583e:	2b00      	cmp	r3, #0
 8005840:	d004      	beq.n	800584c <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	4798      	blx	r3
 800584a:	e176      	b.n	8005b3a <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d01e      	beq.n	8005894 <HAL_SAI_IRQHandler+0x94>
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b00      	cmp	r3, #0
 800585e:	d019      	beq.n	8005894 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2201      	movs	r2, #1
 8005866:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b22      	cmp	r3, #34	@ 0x22
 8005872:	d101      	bne.n	8005878 <HAL_SAI_IRQHandler+0x78>
 8005874:	2301      	movs	r3, #1
 8005876:	e000      	b.n	800587a <HAL_SAI_IRQHandler+0x7a>
 8005878:	2302      	movs	r3, #2
 800587a:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	431a      	orrs	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f95b 	bl	8005b48 <HAL_SAI_ErrorCallback>
 8005892:	e152      	b.n	8005b3a <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d011      	beq.n	80058c2 <HAL_SAI_IRQHandler+0xc2>
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00c      	beq.n	80058c2 <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2202      	movs	r2, #2
 80058ae:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 8140 	beq.w	8005b3a <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058be:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 80058c0:	e13b      	b.n	8005b3a <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f003 0320 	and.w	r3, r3, #32
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d055      	beq.n	8005978 <HAL_SAI_IRQHandler+0x178>
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	f003 0320 	and.w	r3, r3, #32
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d050      	beq.n	8005978 <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2220      	movs	r2, #32
 80058dc:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058e4:	f043 0204 	orr.w	r2, r3, #4
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d038      	beq.n	800596a <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d016      	beq.n	800592e <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005904:	4a8f      	ldr	r2, [pc, #572]	@ (8005b44 <HAL_SAI_IRQHandler+0x344>)
 8005906:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800590c:	4618      	mov	r0, r3
 800590e:	f7fc fc35 	bl	800217c <HAL_DMA_Abort_IT>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00a      	beq.n	800592e <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800591e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 f90d 	bl	8005b48 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 80fc 	beq.w	8005b30 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800593c:	4a81      	ldr	r2, [pc, #516]	@ (8005b44 <HAL_SAI_IRQHandler+0x344>)
 800593e:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005944:	4618      	mov	r0, r3
 8005946:	f7fc fc19 	bl	800217c <HAL_DMA_Abort_IT>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 80ef 	beq.w	8005b30 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005958:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f8f0 	bl	8005b48 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005968:	e0e2      	b.n	8005b30 <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f7ff fee2 	bl	8005734 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f8e9 	bl	8005b48 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005976:	e0db      	b.n	8005b30 <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800597e:	2b00      	cmp	r3, #0
 8005980:	d055      	beq.n	8005a2e <HAL_SAI_IRQHandler+0x22e>
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005988:	2b00      	cmp	r3, #0
 800598a:	d050      	beq.n	8005a2e <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2240      	movs	r2, #64	@ 0x40
 8005992:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800599a:	f043 0208 	orr.w	r2, r3, #8
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d038      	beq.n	8005a20 <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d016      	beq.n	80059e4 <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059ba:	4a62      	ldr	r2, [pc, #392]	@ (8005b44 <HAL_SAI_IRQHandler+0x344>)
 80059bc:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7fc fbda 	bl	800217c <HAL_DMA_Abort_IT>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00a      	beq.n	80059e4 <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059d4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f8b2 	bl	8005b48 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 80a3 	beq.w	8005b34 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059f2:	4a54      	ldr	r2, [pc, #336]	@ (8005b44 <HAL_SAI_IRQHandler+0x344>)
 80059f4:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7fc fbbe 	bl	800217c <HAL_DMA_Abort_IT>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 8096 	beq.w	8005b34 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a0e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f895 	bl	8005b48 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005a1e:	e089      	b.n	8005b34 <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7ff fe87 	bl	8005734 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f88e 	bl	8005b48 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005a2c:	e082      	b.n	8005b34 <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f003 0304 	and.w	r3, r3, #4
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d061      	beq.n	8005afc <HAL_SAI_IRQHandler+0x2fc>
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d05c      	beq.n	8005afc <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2204      	movs	r2, #4
 8005a48:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a50:	f043 0220 	orr.w	r2, r3, #32
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d036      	beq.n	8005ad2 <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d016      	beq.n	8005a9a <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a70:	4a34      	ldr	r2, [pc, #208]	@ (8005b44 <HAL_SAI_IRQHandler+0x344>)
 8005a72:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7fc fb7f 	bl	800217c <HAL_DMA_Abort_IT>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00a      	beq.n	8005a9a <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a8a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f857 	bl	8005b48 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d04a      	beq.n	8005b38 <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aa6:	4a27      	ldr	r2, [pc, #156]	@ (8005b44 <HAL_SAI_IRQHandler+0x344>)
 8005aa8:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fc fb64 	bl	800217c <HAL_DMA_Abort_IT>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d03e      	beq.n	8005b38 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ac0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f83c 	bl	8005b48 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005ad0:	e032      	b.n	8005b38 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ae2:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f827 	bl	8005b48 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005afa:	e01d      	b.n	8005b38 <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	f003 0310 	and.w	r3, r3, #16
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d019      	beq.n	8005b3a <HAL_SAI_IRQHandler+0x33a>
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	f003 0310 	and.w	r3, r3, #16
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d014      	beq.n	8005b3a <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2210      	movs	r2, #16
 8005b16:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b1e:	f043 0210 	orr.w	r2, r3, #16
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f80d 	bl	8005b48 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8005b2e:	e004      	b.n	8005b3a <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005b30:	bf00      	nop
 8005b32:	e002      	b.n	8005b3a <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005b34:	bf00      	nop
 8005b36:	e000      	b.n	8005b3a <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005b38:	bf00      	nop
}
 8005b3a:	bf00      	nop
 8005b3c:	3718      	adds	r7, #24
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	08005e39 	.word	0x08005e39

08005b48 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b087      	sub	sp, #28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <SAI_InitI2S+0x2e>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d103      	bne.n	8005b92 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005b90:	e002      	b.n	8005b98 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2201      	movs	r2, #1
 8005b96:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005b9e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005ba6:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e077      	b.n	8005cb2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d107      	bne.n	8005bd8 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005bd4:	651a      	str	r2, [r3, #80]	@ 0x50
 8005bd6:	e006      	b.n	8005be6 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005bde:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b03      	cmp	r3, #3
 8005bea:	d84f      	bhi.n	8005c8c <SAI_InitI2S+0x130>
 8005bec:	a201      	add	r2, pc, #4	@ (adr r2, 8005bf4 <SAI_InitI2S+0x98>)
 8005bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf2:	bf00      	nop
 8005bf4:	08005c05 	.word	0x08005c05
 8005bf8:	08005c27 	.word	0x08005c27
 8005bfc:	08005c49 	.word	0x08005c49
 8005c00:	08005c6b 	.word	0x08005c6b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2280      	movs	r2, #128	@ 0x80
 8005c08:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	085b      	lsrs	r3, r3, #1
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	085b      	lsrs	r3, r3, #1
 8005c18:	011a      	lsls	r2, r3, #4
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2240      	movs	r2, #64	@ 0x40
 8005c22:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005c24:	e035      	b.n	8005c92 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2280      	movs	r2, #128	@ 0x80
 8005c2a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	085b      	lsrs	r3, r3, #1
 8005c30:	019a      	lsls	r2, r3, #6
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	085b      	lsrs	r3, r3, #1
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2280      	movs	r2, #128	@ 0x80
 8005c44:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005c46:	e024      	b.n	8005c92 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	22c0      	movs	r2, #192	@ 0xc0
 8005c4c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	085b      	lsrs	r3, r3, #1
 8005c52:	019a      	lsls	r2, r3, #6
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	085b      	lsrs	r3, r3, #1
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2280      	movs	r2, #128	@ 0x80
 8005c66:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005c68:	e013      	b.n	8005c92 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	22e0      	movs	r2, #224	@ 0xe0
 8005c6e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	085b      	lsrs	r3, r3, #1
 8005c74:	019a      	lsls	r2, r3, #6
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	085b      	lsrs	r3, r3, #1
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2280      	movs	r2, #128	@ 0x80
 8005c88:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005c8a:	e002      	b.n	8005c92 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c90:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d10b      	bne.n	8005cb0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d102      	bne.n	8005ca4 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2210      	movs	r2, #16
 8005ca2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d102      	bne.n	8005cb0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2208      	movs	r2, #8
 8005cae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 8005cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	371c      	adds	r7, #28
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop

08005cc0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
 8005ccc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <SAI_InitPCM+0x2e>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d103      	bne.n	8005cf6 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005cf4:	e002      	b.n	8005cfc <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005d08:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005d10:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005d24:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	2b04      	cmp	r3, #4
 8005d2a:	d103      	bne.n	8005d34 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	645a      	str	r2, [r3, #68]	@ 0x44
 8005d32:	e002      	b.n	8005d3a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	220d      	movs	r2, #13
 8005d38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2b03      	cmp	r3, #3
 8005d3e:	d837      	bhi.n	8005db0 <SAI_InitPCM+0xf0>
 8005d40:	a201      	add	r2, pc, #4	@ (adr r2, 8005d48 <SAI_InitPCM+0x88>)
 8005d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d46:	bf00      	nop
 8005d48:	08005d59 	.word	0x08005d59
 8005d4c:	08005d6f 	.word	0x08005d6f
 8005d50:	08005d85 	.word	0x08005d85
 8005d54:	08005d9b 	.word	0x08005d9b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2280      	movs	r2, #128	@ 0x80
 8005d5c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	011a      	lsls	r2, r3, #4
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2240      	movs	r2, #64	@ 0x40
 8005d6a:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005d6c:	e023      	b.n	8005db6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2280      	movs	r2, #128	@ 0x80
 8005d72:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2280      	movs	r2, #128	@ 0x80
 8005d80:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005d82:	e018      	b.n	8005db6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	22c0      	movs	r2, #192	@ 0xc0
 8005d88:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2280      	movs	r2, #128	@ 0x80
 8005d96:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005d98:	e00d      	b.n	8005db6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	22e0      	movs	r2, #224	@ 0xe0
 8005d9e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	015a      	lsls	r2, r3, #5
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2280      	movs	r2, #128	@ 0x80
 8005dac:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005dae:	e002      	b.n	8005db6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	75fb      	strb	r3, [r7, #23]
      break;
 8005db4:	bf00      	nop
  }

  return status;
 8005db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	371c      	adds	r7, #28
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005dcc:	4b18      	ldr	r3, [pc, #96]	@ (8005e30 <SAI_Disable+0x6c>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a18      	ldr	r2, [pc, #96]	@ (8005e34 <SAI_Disable+0x70>)
 8005dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd6:	0b1b      	lsrs	r3, r3, #12
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005dee:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10a      	bne.n	8005e0c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dfc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	72fb      	strb	r3, [r7, #11]
      break;
 8005e0a:	e009      	b.n	8005e20 <SAI_Disable+0x5c>
    }
    count--;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1e7      	bne.n	8005df0 <SAI_Disable+0x2c>

  return status;
 8005e20:	7afb      	ldrb	r3, [r7, #11]
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	20000000 	.word	0x20000000
 8005e34:	95cbec1b 	.word	0x95cbec1b

08005e38 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e44:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005e54:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e66:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e6e:	2b20      	cmp	r3, #32
 8005e70:	d00a      	beq.n	8005e88 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f7ff ffa6 	bl	8005dc4 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f042 0208 	orr.w	r2, r2, #8
 8005e86:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f7ff fe55 	bl	8005b48 <HAL_SAI_ErrorCallback>
#endif
}
 8005e9e:	bf00      	nop
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b084      	sub	sp, #16
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e095      	b.n	8005fe4 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d108      	bne.n	8005ed2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ec8:	d009      	beq.n	8005ede <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	61da      	str	r2, [r3, #28]
 8005ed0:	e005      	b.n	8005ede <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d106      	bne.n	8005efe <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7fb f829 	bl	8000f50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2202      	movs	r2, #2
 8005f02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f14:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005f1e:	d902      	bls.n	8005f26 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005f20:	2300      	movs	r3, #0
 8005f22:	60fb      	str	r3, [r7, #12]
 8005f24:	e002      	b.n	8005f2c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005f26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005f2a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005f34:	d007      	beq.n	8005f46 <HAL_SPI_Init+0xa0>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005f3e:	d002      	beq.n	8005f46 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005f56:	431a      	orrs	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	431a      	orrs	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f74:	431a      	orrs	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f7e:	431a      	orrs	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f88:	ea42 0103 	orr.w	r1, r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f90:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	0c1b      	lsrs	r3, r3, #16
 8005fa2:	f003 0204 	and.w	r2, r3, #4
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005faa:	f003 0310 	and.w	r3, r3, #16
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fb4:	f003 0308 	and.w	r3, r3, #8
 8005fb8:	431a      	orrs	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005fc2:	ea42 0103 	orr.w	r1, r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b088      	sub	sp, #32
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	603b      	str	r3, [r7, #0]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ffc:	f7fb feda 	bl	8001db4 <HAL_GetTick>
 8006000:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006002:	88fb      	ldrh	r3, [r7, #6]
 8006004:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b01      	cmp	r3, #1
 8006010:	d001      	beq.n	8006016 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006012:	2302      	movs	r3, #2
 8006014:	e15c      	b.n	80062d0 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d002      	beq.n	8006022 <HAL_SPI_Transmit+0x36>
 800601c:	88fb      	ldrh	r3, [r7, #6]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e154      	b.n	80062d0 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800602c:	2b01      	cmp	r3, #1
 800602e:	d101      	bne.n	8006034 <HAL_SPI_Transmit+0x48>
 8006030:	2302      	movs	r3, #2
 8006032:	e14d      	b.n	80062d0 <HAL_SPI_Transmit+0x2e4>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2203      	movs	r2, #3
 8006040:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	88fa      	ldrh	r2, [r7, #6]
 8006054:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	88fa      	ldrh	r2, [r7, #6]
 800605a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006086:	d10f      	bne.n	80060a8 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006096:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b2:	2b40      	cmp	r3, #64	@ 0x40
 80060b4:	d007      	beq.n	80060c6 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80060ce:	d952      	bls.n	8006176 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <HAL_SPI_Transmit+0xf2>
 80060d8:	8b7b      	ldrh	r3, [r7, #26]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d145      	bne.n	800616a <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e2:	881a      	ldrh	r2, [r3, #0]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ee:	1c9a      	adds	r2, r3, #2
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	3b01      	subs	r3, #1
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006102:	e032      	b.n	800616a <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	2b02      	cmp	r3, #2
 8006110:	d112      	bne.n	8006138 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006116:	881a      	ldrh	r2, [r3, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006122:	1c9a      	adds	r2, r3, #2
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800612c:	b29b      	uxth	r3, r3
 800612e:	3b01      	subs	r3, #1
 8006130:	b29a      	uxth	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006136:	e018      	b.n	800616a <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006138:	f7fb fe3c 	bl	8001db4 <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	429a      	cmp	r2, r3
 8006146:	d803      	bhi.n	8006150 <HAL_SPI_Transmit+0x164>
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800614e:	d102      	bne.n	8006156 <HAL_SPI_Transmit+0x16a>
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d109      	bne.n	800616a <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e0b2      	b.n	80062d0 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800616e:	b29b      	uxth	r3, r3
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1c7      	bne.n	8006104 <HAL_SPI_Transmit+0x118>
 8006174:	e083      	b.n	800627e <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d002      	beq.n	8006184 <HAL_SPI_Transmit+0x198>
 800617e:	8b7b      	ldrh	r3, [r7, #26]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d177      	bne.n	8006274 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006188:	b29b      	uxth	r3, r3
 800618a:	2b01      	cmp	r3, #1
 800618c:	d912      	bls.n	80061b4 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006192:	881a      	ldrh	r2, [r3, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800619e:	1c9a      	adds	r2, r3, #2
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	3b02      	subs	r3, #2
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80061b2:	e05f      	b.n	8006274 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	330c      	adds	r3, #12
 80061be:	7812      	ldrb	r2, [r2, #0]
 80061c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c6:	1c5a      	adds	r2, r3, #1
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	3b01      	subs	r3, #1
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80061da:	e04b      	b.n	8006274 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d12b      	bne.n	8006242 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d912      	bls.n	800621a <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f8:	881a      	ldrh	r2, [r3, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006204:	1c9a      	adds	r2, r3, #2
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800620e:	b29b      	uxth	r3, r3
 8006210:	3b02      	subs	r3, #2
 8006212:	b29a      	uxth	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006218:	e02c      	b.n	8006274 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	330c      	adds	r3, #12
 8006224:	7812      	ldrb	r2, [r2, #0]
 8006226:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622c:	1c5a      	adds	r2, r3, #1
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006236:	b29b      	uxth	r3, r3
 8006238:	3b01      	subs	r3, #1
 800623a:	b29a      	uxth	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006240:	e018      	b.n	8006274 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006242:	f7fb fdb7 	bl	8001db4 <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	429a      	cmp	r2, r3
 8006250:	d803      	bhi.n	800625a <HAL_SPI_Transmit+0x26e>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006258:	d102      	bne.n	8006260 <HAL_SPI_Transmit+0x274>
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d109      	bne.n	8006274 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e02d      	b.n	80062d0 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006278:	b29b      	uxth	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1ae      	bne.n	80061dc <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800627e:	69fa      	ldr	r2, [r7, #28]
 8006280:	6839      	ldr	r1, [r7, #0]
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f000 fa5a 	bl	800673c <SPI_EndRxTxTransaction>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d002      	beq.n	8006294 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2220      	movs	r2, #32
 8006292:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10a      	bne.n	80062b2 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800629c:	2300      	movs	r3, #0
 800629e:	617b      	str	r3, [r7, #20]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	617b      	str	r3, [r7, #20]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	617b      	str	r3, [r7, #20]
 80062b0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e000      	b.n	80062d0 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80062ce:	2300      	movs	r3, #0
  }
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3720      	adds	r7, #32
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b088      	sub	sp, #32
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10e      	bne.n	8006318 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006300:	2b00      	cmp	r3, #0
 8006302:	d009      	beq.n	8006318 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800630a:	2b00      	cmp	r3, #0
 800630c:	d004      	beq.n	8006318 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	4798      	blx	r3
    return;
 8006316:	e0ce      	b.n	80064b6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d009      	beq.n	8006336 <HAL_SPI_IRQHandler+0x5e>
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006328:	2b00      	cmp	r3, #0
 800632a:	d004      	beq.n	8006336 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	4798      	blx	r3
    return;
 8006334:	e0bf      	b.n	80064b6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	f003 0320 	and.w	r3, r3, #32
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10a      	bne.n	8006356 <HAL_SPI_IRQHandler+0x7e>
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006346:	2b00      	cmp	r3, #0
 8006348:	d105      	bne.n	8006356 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 80b0 	beq.w	80064b6 <HAL_SPI_IRQHandler+0x1de>
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	f003 0320 	and.w	r3, r3, #32
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 80aa 	beq.w	80064b6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006368:	2b00      	cmp	r3, #0
 800636a:	d023      	beq.n	80063b4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b03      	cmp	r3, #3
 8006376:	d011      	beq.n	800639c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800637c:	f043 0204 	orr.w	r2, r3, #4
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006384:	2300      	movs	r3, #0
 8006386:	617b      	str	r3, [r7, #20]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	617b      	str	r3, [r7, #20]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	617b      	str	r3, [r7, #20]
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	e00b      	b.n	80063b4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800639c:	2300      	movs	r3, #0
 800639e:	613b      	str	r3, [r7, #16]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	613b      	str	r3, [r7, #16]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	613b      	str	r3, [r7, #16]
 80063b0:	693b      	ldr	r3, [r7, #16]
        return;
 80063b2:	e080      	b.n	80064b6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	f003 0320 	and.w	r3, r3, #32
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d014      	beq.n	80063e8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063c2:	f043 0201 	orr.w	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80063ca:	2300      	movs	r3, #0
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	60fb      	str	r3, [r7, #12]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063e4:	601a      	str	r2, [r3, #0]
 80063e6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00c      	beq.n	800640c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063f6:	f043 0208 	orr.w	r2, r3, #8
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80063fe:	2300      	movs	r3, #0
 8006400:	60bb      	str	r3, [r7, #8]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	60bb      	str	r3, [r7, #8]
 800640a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006410:	2b00      	cmp	r3, #0
 8006412:	d04f      	beq.n	80064b4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685a      	ldr	r2, [r3, #4]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006422:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	f003 0302 	and.w	r3, r3, #2
 8006432:	2b00      	cmp	r3, #0
 8006434:	d104      	bne.n	8006440 <HAL_SPI_IRQHandler+0x168>
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	f003 0301 	and.w	r3, r3, #1
 800643c:	2b00      	cmp	r3, #0
 800643e:	d034      	beq.n	80064aa <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f022 0203 	bic.w	r2, r2, #3
 800644e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006454:	2b00      	cmp	r3, #0
 8006456:	d011      	beq.n	800647c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800645c:	4a17      	ldr	r2, [pc, #92]	@ (80064bc <HAL_SPI_IRQHandler+0x1e4>)
 800645e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006464:	4618      	mov	r0, r3
 8006466:	f7fb fe89 	bl	800217c <HAL_DMA_Abort_IT>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d005      	beq.n	800647c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006474:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006480:	2b00      	cmp	r3, #0
 8006482:	d016      	beq.n	80064b2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006488:	4a0c      	ldr	r2, [pc, #48]	@ (80064bc <HAL_SPI_IRQHandler+0x1e4>)
 800648a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006490:	4618      	mov	r0, r3
 8006492:	f7fb fe73 	bl	800217c <HAL_DMA_Abort_IT>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00a      	beq.n	80064b2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064a0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80064a8:	e003      	b.n	80064b2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f808 	bl	80064c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80064b0:	e000      	b.n	80064b4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80064b2:	bf00      	nop
    return;
 80064b4:	bf00      	nop
  }
}
 80064b6:	3720      	adds	r7, #32
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	080064d5 	.word	0x080064d5

080064c0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f7ff ffe5 	bl	80064c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80064f6:	bf00      	nop
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
	...

08006500 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b088      	sub	sp, #32
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	603b      	str	r3, [r7, #0]
 800650c:	4613      	mov	r3, r2
 800650e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006510:	f7fb fc50 	bl	8001db4 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006518:	1a9b      	subs	r3, r3, r2
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	4413      	add	r3, r2
 800651e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006520:	f7fb fc48 	bl	8001db4 <HAL_GetTick>
 8006524:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006526:	4b39      	ldr	r3, [pc, #228]	@ (800660c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	015b      	lsls	r3, r3, #5
 800652c:	0d1b      	lsrs	r3, r3, #20
 800652e:	69fa      	ldr	r2, [r7, #28]
 8006530:	fb02 f303 	mul.w	r3, r2, r3
 8006534:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006536:	e054      	b.n	80065e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800653e:	d050      	beq.n	80065e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006540:	f7fb fc38 	bl	8001db4 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	69fa      	ldr	r2, [r7, #28]
 800654c:	429a      	cmp	r2, r3
 800654e:	d902      	bls.n	8006556 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d13d      	bne.n	80065d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006564:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800656e:	d111      	bne.n	8006594 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006578:	d004      	beq.n	8006584 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006582:	d107      	bne.n	8006594 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006592:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006598:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800659c:	d10f      	bne.n	80065be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e017      	b.n	8006602 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80065d8:	2300      	movs	r3, #0
 80065da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	3b01      	subs	r3, #1
 80065e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	689a      	ldr	r2, [r3, #8]
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	4013      	ands	r3, r2
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	bf0c      	ite	eq
 80065f2:	2301      	moveq	r3, #1
 80065f4:	2300      	movne	r3, #0
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	461a      	mov	r2, r3
 80065fa:	79fb      	ldrb	r3, [r7, #7]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d19b      	bne.n	8006538 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3720      	adds	r7, #32
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	20000000 	.word	0x20000000

08006610 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b08a      	sub	sp, #40	@ 0x28
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
 800661c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800661e:	2300      	movs	r3, #0
 8006620:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006622:	f7fb fbc7 	bl	8001db4 <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662a:	1a9b      	subs	r3, r3, r2
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	4413      	add	r3, r2
 8006630:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006632:	f7fb fbbf 	bl	8001db4 <HAL_GetTick>
 8006636:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	330c      	adds	r3, #12
 800663e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006640:	4b3d      	ldr	r3, [pc, #244]	@ (8006738 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	4613      	mov	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	00da      	lsls	r2, r3, #3
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	0d1b      	lsrs	r3, r3, #20
 8006650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006652:	fb02 f303 	mul.w	r3, r2, r3
 8006656:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006658:	e060      	b.n	800671c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006660:	d107      	bne.n	8006672 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d104      	bne.n	8006672 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	b2db      	uxtb	r3, r3
 800666e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006670:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006678:	d050      	beq.n	800671c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800667a:	f7fb fb9b 	bl	8001db4 <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006686:	429a      	cmp	r2, r3
 8006688:	d902      	bls.n	8006690 <SPI_WaitFifoStateUntilTimeout+0x80>
 800668a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668c:	2b00      	cmp	r3, #0
 800668e:	d13d      	bne.n	800670c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800669e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066a8:	d111      	bne.n	80066ce <SPI_WaitFifoStateUntilTimeout+0xbe>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066b2:	d004      	beq.n	80066be <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066bc:	d107      	bne.n	80066ce <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066d6:	d10f      	bne.n	80066f8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066e6:	601a      	str	r2, [r3, #0]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e010      	b.n	800672e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006712:	2300      	movs	r3, #0
 8006714:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	3b01      	subs	r3, #1
 800671a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	689a      	ldr	r2, [r3, #8]
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	4013      	ands	r3, r2
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	429a      	cmp	r2, r3
 800672a:	d196      	bne.n	800665a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3728      	adds	r7, #40	@ 0x28
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	20000000 	.word	0x20000000

0800673c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af02      	add	r7, sp, #8
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	2200      	movs	r2, #0
 8006750:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f7ff ff5b 	bl	8006610 <SPI_WaitFifoStateUntilTimeout>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d007      	beq.n	8006770 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006764:	f043 0220 	orr.w	r2, r3, #32
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e027      	b.n	80067c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	9300      	str	r3, [sp, #0]
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2200      	movs	r2, #0
 8006778:	2180      	movs	r1, #128	@ 0x80
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f7ff fec0 	bl	8006500 <SPI_WaitFlagStateUntilTimeout>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d007      	beq.n	8006796 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800678a:	f043 0220 	orr.w	r2, r3, #32
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e014      	b.n	80067c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	2200      	movs	r2, #0
 800679e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f7ff ff34 	bl	8006610 <SPI_WaitFifoStateUntilTimeout>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d007      	beq.n	80067be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067b2:	f043 0220 	orr.w	r2, r3, #32
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e000      	b.n	80067c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e049      	b.n	800686e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d106      	bne.n	80067f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f841 	bl	8006876 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2202      	movs	r2, #2
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	3304      	adds	r3, #4
 8006804:	4619      	mov	r1, r3
 8006806:	4610      	mov	r0, r2
 8006808:	f000 f9e0 	bl	8006bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006876:	b480      	push	{r7}
 8006878:	b083      	sub	sp, #12
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800687e:	bf00      	nop
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
	...

0800688c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b01      	cmp	r3, #1
 800689e:	d001      	beq.n	80068a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e04f      	b.n	8006944 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2202      	movs	r2, #2
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68da      	ldr	r2, [r3, #12]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f042 0201 	orr.w	r2, r2, #1
 80068ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a23      	ldr	r2, [pc, #140]	@ (8006950 <HAL_TIM_Base_Start_IT+0xc4>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d01d      	beq.n	8006902 <HAL_TIM_Base_Start_IT+0x76>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068ce:	d018      	beq.n	8006902 <HAL_TIM_Base_Start_IT+0x76>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a1f      	ldr	r2, [pc, #124]	@ (8006954 <HAL_TIM_Base_Start_IT+0xc8>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d013      	beq.n	8006902 <HAL_TIM_Base_Start_IT+0x76>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a1e      	ldr	r2, [pc, #120]	@ (8006958 <HAL_TIM_Base_Start_IT+0xcc>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d00e      	beq.n	8006902 <HAL_TIM_Base_Start_IT+0x76>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a1c      	ldr	r2, [pc, #112]	@ (800695c <HAL_TIM_Base_Start_IT+0xd0>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d009      	beq.n	8006902 <HAL_TIM_Base_Start_IT+0x76>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a1b      	ldr	r2, [pc, #108]	@ (8006960 <HAL_TIM_Base_Start_IT+0xd4>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d004      	beq.n	8006902 <HAL_TIM_Base_Start_IT+0x76>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a19      	ldr	r2, [pc, #100]	@ (8006964 <HAL_TIM_Base_Start_IT+0xd8>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d115      	bne.n	800692e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	689a      	ldr	r2, [r3, #8]
 8006908:	4b17      	ldr	r3, [pc, #92]	@ (8006968 <HAL_TIM_Base_Start_IT+0xdc>)
 800690a:	4013      	ands	r3, r2
 800690c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2b06      	cmp	r3, #6
 8006912:	d015      	beq.n	8006940 <HAL_TIM_Base_Start_IT+0xb4>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800691a:	d011      	beq.n	8006940 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f042 0201 	orr.w	r2, r2, #1
 800692a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800692c:	e008      	b.n	8006940 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f042 0201 	orr.w	r2, r2, #1
 800693c:	601a      	str	r2, [r3, #0]
 800693e:	e000      	b.n	8006942 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006940:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr
 8006950:	40012c00 	.word	0x40012c00
 8006954:	40000400 	.word	0x40000400
 8006958:	40000800 	.word	0x40000800
 800695c:	40000c00 	.word	0x40000c00
 8006960:	40013400 	.word	0x40013400
 8006964:	40014000 	.word	0x40014000
 8006968:	00010007 	.word	0x00010007

0800696c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	f003 0302 	and.w	r3, r3, #2
 800698a:	2b00      	cmp	r3, #0
 800698c:	d020      	beq.n	80069d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f003 0302 	and.w	r3, r3, #2
 8006994:	2b00      	cmp	r3, #0
 8006996:	d01b      	beq.n	80069d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f06f 0202 	mvn.w	r2, #2
 80069a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	f003 0303 	and.w	r3, r3, #3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f8e9 	bl	8006b8e <HAL_TIM_IC_CaptureCallback>
 80069bc:	e005      	b.n	80069ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f8db 	bl	8006b7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f8ec 	bl	8006ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	f003 0304 	and.w	r3, r3, #4
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d020      	beq.n	8006a1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f003 0304 	and.w	r3, r3, #4
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d01b      	beq.n	8006a1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f06f 0204 	mvn.w	r2, #4
 80069ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2202      	movs	r2, #2
 80069f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d003      	beq.n	8006a0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f8c3 	bl	8006b8e <HAL_TIM_IC_CaptureCallback>
 8006a08:	e005      	b.n	8006a16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f8b5 	bl	8006b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 f8c6 	bl	8006ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	f003 0308 	and.w	r3, r3, #8
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d020      	beq.n	8006a68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f003 0308 	and.w	r3, r3, #8
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d01b      	beq.n	8006a68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f06f 0208 	mvn.w	r2, #8
 8006a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2204      	movs	r2, #4
 8006a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	f003 0303 	and.w	r3, r3, #3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f89d 	bl	8006b8e <HAL_TIM_IC_CaptureCallback>
 8006a54:	e005      	b.n	8006a62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f88f 	bl	8006b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f8a0 	bl	8006ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f003 0310 	and.w	r3, r3, #16
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d020      	beq.n	8006ab4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f003 0310 	and.w	r3, r3, #16
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d01b      	beq.n	8006ab4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f06f 0210 	mvn.w	r2, #16
 8006a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2208      	movs	r2, #8
 8006a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f877 	bl	8006b8e <HAL_TIM_IC_CaptureCallback>
 8006aa0:	e005      	b.n	8006aae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f869 	bl	8006b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 f87a 	bl	8006ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00c      	beq.n	8006ad8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d007      	beq.n	8006ad8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f06f 0201 	mvn.w	r2, #1
 8006ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7fa f8a2 	bl	8000c1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d104      	bne.n	8006aec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00c      	beq.n	8006b06 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d007      	beq.n	8006b06 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f913 	bl	8006d2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00c      	beq.n	8006b2a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d007      	beq.n	8006b2a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 f90b 	bl	8006d40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00c      	beq.n	8006b4e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d007      	beq.n	8006b4e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 f834 	bl	8006bb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	f003 0320 	and.w	r3, r3, #32
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00c      	beq.n	8006b72 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f003 0320 	and.w	r3, r3, #32
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d007      	beq.n	8006b72 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f06f 0220 	mvn.w	r2, #32
 8006b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f8d3 	bl	8006d18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b72:	bf00      	nop
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b083      	sub	sp, #12
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b82:	bf00      	nop
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b083      	sub	sp, #12
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b96:	bf00      	nop
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b083      	sub	sp, #12
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006baa:	bf00      	nop
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b083      	sub	sp, #12
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bbe:	bf00      	nop
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
	...

08006bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a46      	ldr	r2, [pc, #280]	@ (8006cf8 <TIM_Base_SetConfig+0x12c>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d013      	beq.n	8006c0c <TIM_Base_SetConfig+0x40>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bea:	d00f      	beq.n	8006c0c <TIM_Base_SetConfig+0x40>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a43      	ldr	r2, [pc, #268]	@ (8006cfc <TIM_Base_SetConfig+0x130>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d00b      	beq.n	8006c0c <TIM_Base_SetConfig+0x40>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a42      	ldr	r2, [pc, #264]	@ (8006d00 <TIM_Base_SetConfig+0x134>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d007      	beq.n	8006c0c <TIM_Base_SetConfig+0x40>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a41      	ldr	r2, [pc, #260]	@ (8006d04 <TIM_Base_SetConfig+0x138>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d003      	beq.n	8006c0c <TIM_Base_SetConfig+0x40>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a40      	ldr	r2, [pc, #256]	@ (8006d08 <TIM_Base_SetConfig+0x13c>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d108      	bne.n	8006c1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a35      	ldr	r2, [pc, #212]	@ (8006cf8 <TIM_Base_SetConfig+0x12c>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d01f      	beq.n	8006c66 <TIM_Base_SetConfig+0x9a>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c2c:	d01b      	beq.n	8006c66 <TIM_Base_SetConfig+0x9a>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a32      	ldr	r2, [pc, #200]	@ (8006cfc <TIM_Base_SetConfig+0x130>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d017      	beq.n	8006c66 <TIM_Base_SetConfig+0x9a>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a31      	ldr	r2, [pc, #196]	@ (8006d00 <TIM_Base_SetConfig+0x134>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d013      	beq.n	8006c66 <TIM_Base_SetConfig+0x9a>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a30      	ldr	r2, [pc, #192]	@ (8006d04 <TIM_Base_SetConfig+0x138>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d00f      	beq.n	8006c66 <TIM_Base_SetConfig+0x9a>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a2f      	ldr	r2, [pc, #188]	@ (8006d08 <TIM_Base_SetConfig+0x13c>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d00b      	beq.n	8006c66 <TIM_Base_SetConfig+0x9a>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a2e      	ldr	r2, [pc, #184]	@ (8006d0c <TIM_Base_SetConfig+0x140>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d007      	beq.n	8006c66 <TIM_Base_SetConfig+0x9a>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a2d      	ldr	r2, [pc, #180]	@ (8006d10 <TIM_Base_SetConfig+0x144>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d003      	beq.n	8006c66 <TIM_Base_SetConfig+0x9a>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a2c      	ldr	r2, [pc, #176]	@ (8006d14 <TIM_Base_SetConfig+0x148>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d108      	bne.n	8006c78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	689a      	ldr	r2, [r3, #8]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a16      	ldr	r2, [pc, #88]	@ (8006cf8 <TIM_Base_SetConfig+0x12c>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d00f      	beq.n	8006cc4 <TIM_Base_SetConfig+0xf8>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a18      	ldr	r2, [pc, #96]	@ (8006d08 <TIM_Base_SetConfig+0x13c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d00b      	beq.n	8006cc4 <TIM_Base_SetConfig+0xf8>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a17      	ldr	r2, [pc, #92]	@ (8006d0c <TIM_Base_SetConfig+0x140>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d007      	beq.n	8006cc4 <TIM_Base_SetConfig+0xf8>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a16      	ldr	r2, [pc, #88]	@ (8006d10 <TIM_Base_SetConfig+0x144>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d003      	beq.n	8006cc4 <TIM_Base_SetConfig+0xf8>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a15      	ldr	r2, [pc, #84]	@ (8006d14 <TIM_Base_SetConfig+0x148>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d103      	bne.n	8006ccc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	691a      	ldr	r2, [r3, #16]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d105      	bne.n	8006cea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	f023 0201 	bic.w	r2, r3, #1
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	611a      	str	r2, [r3, #16]
  }
}
 8006cea:	bf00      	nop
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	40012c00 	.word	0x40012c00
 8006cfc:	40000400 	.word	0x40000400
 8006d00:	40000800 	.word	0x40000800
 8006d04:	40000c00 	.word	0x40000c00
 8006d08:	40013400 	.word	0x40013400
 8006d0c:	40014000 	.word	0x40014000
 8006d10:	40014400 	.word	0x40014400
 8006d14:	40014800 	.word	0x40014800

08006d18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e040      	b.n	8006de8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d106      	bne.n	8006d7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7fa fb38 	bl	80013ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2224      	movs	r2, #36	@ 0x24
 8006d80:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f022 0201 	bic.w	r2, r2, #1
 8006d90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d002      	beq.n	8006da0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fedc 	bl	8007b58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 fc21 	bl	80075e8 <UART_SetConfig>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d101      	bne.n	8006db0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e01b      	b.n	8006de8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685a      	ldr	r2, [r3, #4]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006dbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689a      	ldr	r2, [r3, #8]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006dce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f042 0201 	orr.w	r2, r2, #1
 8006dde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 ff5b 	bl	8007c9c <UART_CheckIdleState>
 8006de6:	4603      	mov	r3, r0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b08a      	sub	sp, #40	@ 0x28
 8006df4:	af02      	add	r7, sp, #8
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	603b      	str	r3, [r7, #0]
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e04:	2b20      	cmp	r3, #32
 8006e06:	d177      	bne.n	8006ef8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d002      	beq.n	8006e14 <HAL_UART_Transmit+0x24>
 8006e0e:	88fb      	ldrh	r3, [r7, #6]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e070      	b.n	8006efa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2221      	movs	r2, #33	@ 0x21
 8006e24:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e26:	f7fa ffc5 	bl	8001db4 <HAL_GetTick>
 8006e2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	88fa      	ldrh	r2, [r7, #6]
 8006e30:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	88fa      	ldrh	r2, [r7, #6]
 8006e38:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e44:	d108      	bne.n	8006e58 <HAL_UART_Transmit+0x68>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d104      	bne.n	8006e58 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	61bb      	str	r3, [r7, #24]
 8006e56:	e003      	b.n	8006e60 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e60:	e02f      	b.n	8006ec2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	2180      	movs	r1, #128	@ 0x80
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f000 ffbd 	bl	8007dec <UART_WaitOnFlagUntilTimeout>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d004      	beq.n	8006e82 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e03b      	b.n	8006efa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10b      	bne.n	8006ea0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	881a      	ldrh	r2, [r3, #0]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e94:	b292      	uxth	r2, r2
 8006e96:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	3302      	adds	r3, #2
 8006e9c:	61bb      	str	r3, [r7, #24]
 8006e9e:	e007      	b.n	8006eb0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	781a      	ldrb	r2, [r3, #0]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	3301      	adds	r3, #1
 8006eae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1c9      	bne.n	8006e62 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	2140      	movs	r1, #64	@ 0x40
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f000 ff87 	bl	8007dec <UART_WaitOnFlagUntilTimeout>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d004      	beq.n	8006eee <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e005      	b.n	8006efa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	e000      	b.n	8006efa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006ef8:	2302      	movs	r3, #2
  }
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3720      	adds	r7, #32
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
	...

08006f04 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b08a      	sub	sp, #40	@ 0x28
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f18:	2b20      	cmp	r3, #32
 8006f1a:	d137      	bne.n	8006f8c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d002      	beq.n	8006f28 <HAL_UART_Receive_IT+0x24>
 8006f22:	88fb      	ldrh	r3, [r7, #6]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e030      	b.n	8006f8e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a18      	ldr	r2, [pc, #96]	@ (8006f98 <HAL_UART_Receive_IT+0x94>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d01f      	beq.n	8006f7c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d018      	beq.n	8006f7c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	e853 3f00 	ldrex	r3, [r3]
 8006f56:	613b      	str	r3, [r7, #16]
   return(result);
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006f5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	461a      	mov	r2, r3
 8006f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f68:	623b      	str	r3, [r7, #32]
 8006f6a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6c:	69f9      	ldr	r1, [r7, #28]
 8006f6e:	6a3a      	ldr	r2, [r7, #32]
 8006f70:	e841 2300 	strex	r3, r2, [r1]
 8006f74:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1e6      	bne.n	8006f4a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006f7c:	88fb      	ldrh	r3, [r7, #6]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	68b9      	ldr	r1, [r7, #8]
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f000 ffa0 	bl	8007ec8 <UART_Start_Receive_IT>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	e000      	b.n	8006f8e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006f8c:	2302      	movs	r3, #2
  }
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3728      	adds	r7, #40	@ 0x28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	40008000 	.word	0x40008000

08006f9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b0ba      	sub	sp, #232	@ 0xe8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	69db      	ldr	r3, [r3, #28]
 8006faa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006fc2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006fc6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006fca:	4013      	ands	r3, r2
 8006fcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006fd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d115      	bne.n	8007004 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fdc:	f003 0320 	and.w	r3, r3, #32
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00f      	beq.n	8007004 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fe8:	f003 0320 	and.w	r3, r3, #32
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d009      	beq.n	8007004 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f000 82ca 	beq.w	800758e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	4798      	blx	r3
      }
      return;
 8007002:	e2c4      	b.n	800758e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007004:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007008:	2b00      	cmp	r3, #0
 800700a:	f000 8117 	beq.w	800723c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800700e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	2b00      	cmp	r3, #0
 8007018:	d106      	bne.n	8007028 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800701a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800701e:	4b85      	ldr	r3, [pc, #532]	@ (8007234 <HAL_UART_IRQHandler+0x298>)
 8007020:	4013      	ands	r3, r2
 8007022:	2b00      	cmp	r3, #0
 8007024:	f000 810a 	beq.w	800723c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800702c:	f003 0301 	and.w	r3, r3, #1
 8007030:	2b00      	cmp	r3, #0
 8007032:	d011      	beq.n	8007058 <HAL_UART_IRQHandler+0xbc>
 8007034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00b      	beq.n	8007058 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2201      	movs	r2, #1
 8007046:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800704e:	f043 0201 	orr.w	r2, r3, #1
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800705c:	f003 0302 	and.w	r3, r3, #2
 8007060:	2b00      	cmp	r3, #0
 8007062:	d011      	beq.n	8007088 <HAL_UART_IRQHandler+0xec>
 8007064:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007068:	f003 0301 	and.w	r3, r3, #1
 800706c:	2b00      	cmp	r3, #0
 800706e:	d00b      	beq.n	8007088 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2202      	movs	r2, #2
 8007076:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800707e:	f043 0204 	orr.w	r2, r3, #4
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800708c:	f003 0304 	and.w	r3, r3, #4
 8007090:	2b00      	cmp	r3, #0
 8007092:	d011      	beq.n	80070b8 <HAL_UART_IRQHandler+0x11c>
 8007094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00b      	beq.n	80070b8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2204      	movs	r2, #4
 80070a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070ae:	f043 0202 	orr.w	r2, r3, #2
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80070b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070bc:	f003 0308 	and.w	r3, r3, #8
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d017      	beq.n	80070f4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80070c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070c8:	f003 0320 	and.w	r3, r3, #32
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d105      	bne.n	80070dc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80070d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00b      	beq.n	80070f4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2208      	movs	r2, #8
 80070e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070ea:	f043 0208 	orr.w	r2, r3, #8
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80070f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d012      	beq.n	8007126 <HAL_UART_IRQHandler+0x18a>
 8007100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007104:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00c      	beq.n	8007126 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007114:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800711c:	f043 0220 	orr.w	r2, r3, #32
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800712c:	2b00      	cmp	r3, #0
 800712e:	f000 8230 	beq.w	8007592 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007136:	f003 0320 	and.w	r3, r3, #32
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00d      	beq.n	800715a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800713e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007142:	f003 0320 	and.w	r3, r3, #32
 8007146:	2b00      	cmp	r3, #0
 8007148:	d007      	beq.n	800715a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800714e:	2b00      	cmp	r3, #0
 8007150:	d003      	beq.n	800715a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007160:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800716e:	2b40      	cmp	r3, #64	@ 0x40
 8007170:	d005      	beq.n	800717e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007172:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007176:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800717a:	2b00      	cmp	r3, #0
 800717c:	d04f      	beq.n	800721e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 ff68 	bl	8008054 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800718e:	2b40      	cmp	r3, #64	@ 0x40
 8007190:	d141      	bne.n	8007216 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	3308      	adds	r3, #8
 8007198:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80071a0:	e853 3f00 	ldrex	r3, [r3]
 80071a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80071a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	3308      	adds	r3, #8
 80071ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80071be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80071c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80071ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80071ce:	e841 2300 	strex	r3, r2, [r1]
 80071d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80071d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1d9      	bne.n	8007192 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d013      	beq.n	800720e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071ea:	4a13      	ldr	r2, [pc, #76]	@ (8007238 <HAL_UART_IRQHandler+0x29c>)
 80071ec:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7fa ffc2 	bl	800217c <HAL_DMA_Abort_IT>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d017      	beq.n	800722e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007208:	4610      	mov	r0, r2
 800720a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800720c:	e00f      	b.n	800722e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f9d4 	bl	80075bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007214:	e00b      	b.n	800722e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f9d0 	bl	80075bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800721c:	e007      	b.n	800722e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f9cc 	bl	80075bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800722c:	e1b1      	b.n	8007592 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800722e:	bf00      	nop
    return;
 8007230:	e1af      	b.n	8007592 <HAL_UART_IRQHandler+0x5f6>
 8007232:	bf00      	nop
 8007234:	04000120 	.word	0x04000120
 8007238:	0800811d 	.word	0x0800811d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007240:	2b01      	cmp	r3, #1
 8007242:	f040 816a 	bne.w	800751a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800724a:	f003 0310 	and.w	r3, r3, #16
 800724e:	2b00      	cmp	r3, #0
 8007250:	f000 8163 	beq.w	800751a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007258:	f003 0310 	and.w	r3, r3, #16
 800725c:	2b00      	cmp	r3, #0
 800725e:	f000 815c 	beq.w	800751a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2210      	movs	r2, #16
 8007268:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007274:	2b40      	cmp	r3, #64	@ 0x40
 8007276:	f040 80d4 	bne.w	8007422 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007286:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800728a:	2b00      	cmp	r3, #0
 800728c:	f000 80ad 	beq.w	80073ea <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007296:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800729a:	429a      	cmp	r2, r3
 800729c:	f080 80a5 	bcs.w	80073ea <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072a6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 0320 	and.w	r3, r3, #32
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	f040 8086 	bne.w	80073c8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80072c8:	e853 3f00 	ldrex	r3, [r3]
 80072cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80072d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	461a      	mov	r2, r3
 80072e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80072e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80072ea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80072f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80072f6:	e841 2300 	strex	r3, r2, [r1]
 80072fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80072fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1da      	bne.n	80072bc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3308      	adds	r3, #8
 800730c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007310:	e853 3f00 	ldrex	r3, [r3]
 8007314:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007316:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007318:	f023 0301 	bic.w	r3, r3, #1
 800731c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3308      	adds	r3, #8
 8007326:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800732a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800732e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007330:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007332:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800733c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1e1      	bne.n	8007306 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3308      	adds	r3, #8
 8007348:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800734c:	e853 3f00 	ldrex	r3, [r3]
 8007350:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007352:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007354:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007358:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	3308      	adds	r3, #8
 8007362:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007366:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007368:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800736c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800736e:	e841 2300 	strex	r3, r2, [r1]
 8007372:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007374:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1e3      	bne.n	8007342 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2220      	movs	r2, #32
 800737e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007390:	e853 3f00 	ldrex	r3, [r3]
 8007394:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007396:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007398:	f023 0310 	bic.w	r3, r3, #16
 800739c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	461a      	mov	r2, r3
 80073a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80073ac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80073b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073b2:	e841 2300 	strex	r3, r2, [r1]
 80073b6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80073b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1e4      	bne.n	8007388 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fa fe9c 	bl	8002100 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2202      	movs	r2, #2
 80073cc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80073da:	b29b      	uxth	r3, r3
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	b29b      	uxth	r3, r3
 80073e0:	4619      	mov	r1, r3
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 f8f4 	bl	80075d0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80073e8:	e0d5      	b.n	8007596 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80073f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80073f4:	429a      	cmp	r2, r3
 80073f6:	f040 80ce 	bne.w	8007596 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 0320 	and.w	r3, r3, #32
 8007406:	2b20      	cmp	r3, #32
 8007408:	f040 80c5 	bne.w	8007596 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2202      	movs	r2, #2
 8007410:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007418:	4619      	mov	r1, r3
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f8d8 	bl	80075d0 <HAL_UARTEx_RxEventCallback>
      return;
 8007420:	e0b9      	b.n	8007596 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800742e:	b29b      	uxth	r3, r3
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800743c:	b29b      	uxth	r3, r3
 800743e:	2b00      	cmp	r3, #0
 8007440:	f000 80ab 	beq.w	800759a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8007444:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 80a6 	beq.w	800759a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007456:	e853 3f00 	ldrex	r3, [r3]
 800745a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800745c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800745e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007462:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	461a      	mov	r2, r3
 800746c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007470:	647b      	str	r3, [r7, #68]	@ 0x44
 8007472:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007474:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007476:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007478:	e841 2300 	strex	r3, r2, [r1]
 800747c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800747e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1e4      	bne.n	800744e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	3308      	adds	r3, #8
 800748a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748e:	e853 3f00 	ldrex	r3, [r3]
 8007492:	623b      	str	r3, [r7, #32]
   return(result);
 8007494:	6a3b      	ldr	r3, [r7, #32]
 8007496:	f023 0301 	bic.w	r3, r3, #1
 800749a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3308      	adds	r3, #8
 80074a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80074a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80074aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074b0:	e841 2300 	strex	r3, r2, [r1]
 80074b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1e3      	bne.n	8007484 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2220      	movs	r2, #32
 80074c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	e853 3f00 	ldrex	r3, [r3]
 80074dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f023 0310 	bic.w	r3, r3, #16
 80074e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	461a      	mov	r2, r3
 80074ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80074f2:	61fb      	str	r3, [r7, #28]
 80074f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f6:	69b9      	ldr	r1, [r7, #24]
 80074f8:	69fa      	ldr	r2, [r7, #28]
 80074fa:	e841 2300 	strex	r3, r2, [r1]
 80074fe:	617b      	str	r3, [r7, #20]
   return(result);
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1e4      	bne.n	80074d0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2202      	movs	r2, #2
 800750a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800750c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007510:	4619      	mov	r1, r3
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f85c 	bl	80075d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007518:	e03f      	b.n	800759a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800751a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800751e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00e      	beq.n	8007544 <HAL_UART_IRQHandler+0x5a8>
 8007526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800752a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d008      	beq.n	8007544 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800753a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 ffe9 	bl	8008514 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007542:	e02d      	b.n	80075a0 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00e      	beq.n	800756e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007558:	2b00      	cmp	r3, #0
 800755a:	d008      	beq.n	800756e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007560:	2b00      	cmp	r3, #0
 8007562:	d01c      	beq.n	800759e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	4798      	blx	r3
    }
    return;
 800756c:	e017      	b.n	800759e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800756e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007576:	2b00      	cmp	r3, #0
 8007578:	d012      	beq.n	80075a0 <HAL_UART_IRQHandler+0x604>
 800757a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800757e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00c      	beq.n	80075a0 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 fdde 	bl	8008148 <UART_EndTransmit_IT>
    return;
 800758c:	e008      	b.n	80075a0 <HAL_UART_IRQHandler+0x604>
      return;
 800758e:	bf00      	nop
 8007590:	e006      	b.n	80075a0 <HAL_UART_IRQHandler+0x604>
    return;
 8007592:	bf00      	nop
 8007594:	e004      	b.n	80075a0 <HAL_UART_IRQHandler+0x604>
      return;
 8007596:	bf00      	nop
 8007598:	e002      	b.n	80075a0 <HAL_UART_IRQHandler+0x604>
      return;
 800759a:	bf00      	nop
 800759c:	e000      	b.n	80075a0 <HAL_UART_IRQHandler+0x604>
    return;
 800759e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80075a0:	37e8      	adds	r7, #232	@ 0xe8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop

080075a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	460b      	mov	r3, r1
 80075da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075ec:	b08a      	sub	sp, #40	@ 0x28
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075f2:	2300      	movs	r3, #0
 80075f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	689a      	ldr	r2, [r3, #8]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	431a      	orrs	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	431a      	orrs	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	69db      	ldr	r3, [r3, #28]
 800760c:	4313      	orrs	r3, r2
 800760e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	4ba4      	ldr	r3, [pc, #656]	@ (80078a8 <UART_SetConfig+0x2c0>)
 8007618:	4013      	ands	r3, r2
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	6812      	ldr	r2, [r2, #0]
 800761e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007620:	430b      	orrs	r3, r1
 8007622:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	68da      	ldr	r2, [r3, #12]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	430a      	orrs	r2, r1
 8007638:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a99      	ldr	r2, [pc, #612]	@ (80078ac <UART_SetConfig+0x2c4>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d004      	beq.n	8007654 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007650:	4313      	orrs	r3, r2
 8007652:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007664:	430a      	orrs	r2, r1
 8007666:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a90      	ldr	r2, [pc, #576]	@ (80078b0 <UART_SetConfig+0x2c8>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d126      	bne.n	80076c0 <UART_SetConfig+0xd8>
 8007672:	4b90      	ldr	r3, [pc, #576]	@ (80078b4 <UART_SetConfig+0x2cc>)
 8007674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007678:	f003 0303 	and.w	r3, r3, #3
 800767c:	2b03      	cmp	r3, #3
 800767e:	d81b      	bhi.n	80076b8 <UART_SetConfig+0xd0>
 8007680:	a201      	add	r2, pc, #4	@ (adr r2, 8007688 <UART_SetConfig+0xa0>)
 8007682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007686:	bf00      	nop
 8007688:	08007699 	.word	0x08007699
 800768c:	080076a9 	.word	0x080076a9
 8007690:	080076a1 	.word	0x080076a1
 8007694:	080076b1 	.word	0x080076b1
 8007698:	2301      	movs	r3, #1
 800769a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800769e:	e116      	b.n	80078ce <UART_SetConfig+0x2e6>
 80076a0:	2302      	movs	r3, #2
 80076a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076a6:	e112      	b.n	80078ce <UART_SetConfig+0x2e6>
 80076a8:	2304      	movs	r3, #4
 80076aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076ae:	e10e      	b.n	80078ce <UART_SetConfig+0x2e6>
 80076b0:	2308      	movs	r3, #8
 80076b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076b6:	e10a      	b.n	80078ce <UART_SetConfig+0x2e6>
 80076b8:	2310      	movs	r3, #16
 80076ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076be:	e106      	b.n	80078ce <UART_SetConfig+0x2e6>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a7c      	ldr	r2, [pc, #496]	@ (80078b8 <UART_SetConfig+0x2d0>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d138      	bne.n	800773c <UART_SetConfig+0x154>
 80076ca:	4b7a      	ldr	r3, [pc, #488]	@ (80078b4 <UART_SetConfig+0x2cc>)
 80076cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076d0:	f003 030c 	and.w	r3, r3, #12
 80076d4:	2b0c      	cmp	r3, #12
 80076d6:	d82d      	bhi.n	8007734 <UART_SetConfig+0x14c>
 80076d8:	a201      	add	r2, pc, #4	@ (adr r2, 80076e0 <UART_SetConfig+0xf8>)
 80076da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076de:	bf00      	nop
 80076e0:	08007715 	.word	0x08007715
 80076e4:	08007735 	.word	0x08007735
 80076e8:	08007735 	.word	0x08007735
 80076ec:	08007735 	.word	0x08007735
 80076f0:	08007725 	.word	0x08007725
 80076f4:	08007735 	.word	0x08007735
 80076f8:	08007735 	.word	0x08007735
 80076fc:	08007735 	.word	0x08007735
 8007700:	0800771d 	.word	0x0800771d
 8007704:	08007735 	.word	0x08007735
 8007708:	08007735 	.word	0x08007735
 800770c:	08007735 	.word	0x08007735
 8007710:	0800772d 	.word	0x0800772d
 8007714:	2300      	movs	r3, #0
 8007716:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800771a:	e0d8      	b.n	80078ce <UART_SetConfig+0x2e6>
 800771c:	2302      	movs	r3, #2
 800771e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007722:	e0d4      	b.n	80078ce <UART_SetConfig+0x2e6>
 8007724:	2304      	movs	r3, #4
 8007726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800772a:	e0d0      	b.n	80078ce <UART_SetConfig+0x2e6>
 800772c:	2308      	movs	r3, #8
 800772e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007732:	e0cc      	b.n	80078ce <UART_SetConfig+0x2e6>
 8007734:	2310      	movs	r3, #16
 8007736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800773a:	e0c8      	b.n	80078ce <UART_SetConfig+0x2e6>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a5e      	ldr	r2, [pc, #376]	@ (80078bc <UART_SetConfig+0x2d4>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d125      	bne.n	8007792 <UART_SetConfig+0x1aa>
 8007746:	4b5b      	ldr	r3, [pc, #364]	@ (80078b4 <UART_SetConfig+0x2cc>)
 8007748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800774c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007750:	2b30      	cmp	r3, #48	@ 0x30
 8007752:	d016      	beq.n	8007782 <UART_SetConfig+0x19a>
 8007754:	2b30      	cmp	r3, #48	@ 0x30
 8007756:	d818      	bhi.n	800778a <UART_SetConfig+0x1a2>
 8007758:	2b20      	cmp	r3, #32
 800775a:	d00a      	beq.n	8007772 <UART_SetConfig+0x18a>
 800775c:	2b20      	cmp	r3, #32
 800775e:	d814      	bhi.n	800778a <UART_SetConfig+0x1a2>
 8007760:	2b00      	cmp	r3, #0
 8007762:	d002      	beq.n	800776a <UART_SetConfig+0x182>
 8007764:	2b10      	cmp	r3, #16
 8007766:	d008      	beq.n	800777a <UART_SetConfig+0x192>
 8007768:	e00f      	b.n	800778a <UART_SetConfig+0x1a2>
 800776a:	2300      	movs	r3, #0
 800776c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007770:	e0ad      	b.n	80078ce <UART_SetConfig+0x2e6>
 8007772:	2302      	movs	r3, #2
 8007774:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007778:	e0a9      	b.n	80078ce <UART_SetConfig+0x2e6>
 800777a:	2304      	movs	r3, #4
 800777c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007780:	e0a5      	b.n	80078ce <UART_SetConfig+0x2e6>
 8007782:	2308      	movs	r3, #8
 8007784:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007788:	e0a1      	b.n	80078ce <UART_SetConfig+0x2e6>
 800778a:	2310      	movs	r3, #16
 800778c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007790:	e09d      	b.n	80078ce <UART_SetConfig+0x2e6>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a4a      	ldr	r2, [pc, #296]	@ (80078c0 <UART_SetConfig+0x2d8>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d125      	bne.n	80077e8 <UART_SetConfig+0x200>
 800779c:	4b45      	ldr	r3, [pc, #276]	@ (80078b4 <UART_SetConfig+0x2cc>)
 800779e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80077a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80077a8:	d016      	beq.n	80077d8 <UART_SetConfig+0x1f0>
 80077aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80077ac:	d818      	bhi.n	80077e0 <UART_SetConfig+0x1f8>
 80077ae:	2b80      	cmp	r3, #128	@ 0x80
 80077b0:	d00a      	beq.n	80077c8 <UART_SetConfig+0x1e0>
 80077b2:	2b80      	cmp	r3, #128	@ 0x80
 80077b4:	d814      	bhi.n	80077e0 <UART_SetConfig+0x1f8>
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d002      	beq.n	80077c0 <UART_SetConfig+0x1d8>
 80077ba:	2b40      	cmp	r3, #64	@ 0x40
 80077bc:	d008      	beq.n	80077d0 <UART_SetConfig+0x1e8>
 80077be:	e00f      	b.n	80077e0 <UART_SetConfig+0x1f8>
 80077c0:	2300      	movs	r3, #0
 80077c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077c6:	e082      	b.n	80078ce <UART_SetConfig+0x2e6>
 80077c8:	2302      	movs	r3, #2
 80077ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077ce:	e07e      	b.n	80078ce <UART_SetConfig+0x2e6>
 80077d0:	2304      	movs	r3, #4
 80077d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077d6:	e07a      	b.n	80078ce <UART_SetConfig+0x2e6>
 80077d8:	2308      	movs	r3, #8
 80077da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077de:	e076      	b.n	80078ce <UART_SetConfig+0x2e6>
 80077e0:	2310      	movs	r3, #16
 80077e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077e6:	e072      	b.n	80078ce <UART_SetConfig+0x2e6>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a35      	ldr	r2, [pc, #212]	@ (80078c4 <UART_SetConfig+0x2dc>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d12a      	bne.n	8007848 <UART_SetConfig+0x260>
 80077f2:	4b30      	ldr	r3, [pc, #192]	@ (80078b4 <UART_SetConfig+0x2cc>)
 80077f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007800:	d01a      	beq.n	8007838 <UART_SetConfig+0x250>
 8007802:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007806:	d81b      	bhi.n	8007840 <UART_SetConfig+0x258>
 8007808:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800780c:	d00c      	beq.n	8007828 <UART_SetConfig+0x240>
 800780e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007812:	d815      	bhi.n	8007840 <UART_SetConfig+0x258>
 8007814:	2b00      	cmp	r3, #0
 8007816:	d003      	beq.n	8007820 <UART_SetConfig+0x238>
 8007818:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800781c:	d008      	beq.n	8007830 <UART_SetConfig+0x248>
 800781e:	e00f      	b.n	8007840 <UART_SetConfig+0x258>
 8007820:	2300      	movs	r3, #0
 8007822:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007826:	e052      	b.n	80078ce <UART_SetConfig+0x2e6>
 8007828:	2302      	movs	r3, #2
 800782a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800782e:	e04e      	b.n	80078ce <UART_SetConfig+0x2e6>
 8007830:	2304      	movs	r3, #4
 8007832:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007836:	e04a      	b.n	80078ce <UART_SetConfig+0x2e6>
 8007838:	2308      	movs	r3, #8
 800783a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800783e:	e046      	b.n	80078ce <UART_SetConfig+0x2e6>
 8007840:	2310      	movs	r3, #16
 8007842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007846:	e042      	b.n	80078ce <UART_SetConfig+0x2e6>
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a17      	ldr	r2, [pc, #92]	@ (80078ac <UART_SetConfig+0x2c4>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d13a      	bne.n	80078c8 <UART_SetConfig+0x2e0>
 8007852:	4b18      	ldr	r3, [pc, #96]	@ (80078b4 <UART_SetConfig+0x2cc>)
 8007854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007858:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800785c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007860:	d01a      	beq.n	8007898 <UART_SetConfig+0x2b0>
 8007862:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007866:	d81b      	bhi.n	80078a0 <UART_SetConfig+0x2b8>
 8007868:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800786c:	d00c      	beq.n	8007888 <UART_SetConfig+0x2a0>
 800786e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007872:	d815      	bhi.n	80078a0 <UART_SetConfig+0x2b8>
 8007874:	2b00      	cmp	r3, #0
 8007876:	d003      	beq.n	8007880 <UART_SetConfig+0x298>
 8007878:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800787c:	d008      	beq.n	8007890 <UART_SetConfig+0x2a8>
 800787e:	e00f      	b.n	80078a0 <UART_SetConfig+0x2b8>
 8007880:	2300      	movs	r3, #0
 8007882:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007886:	e022      	b.n	80078ce <UART_SetConfig+0x2e6>
 8007888:	2302      	movs	r3, #2
 800788a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800788e:	e01e      	b.n	80078ce <UART_SetConfig+0x2e6>
 8007890:	2304      	movs	r3, #4
 8007892:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007896:	e01a      	b.n	80078ce <UART_SetConfig+0x2e6>
 8007898:	2308      	movs	r3, #8
 800789a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800789e:	e016      	b.n	80078ce <UART_SetConfig+0x2e6>
 80078a0:	2310      	movs	r3, #16
 80078a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078a6:	e012      	b.n	80078ce <UART_SetConfig+0x2e6>
 80078a8:	efff69f3 	.word	0xefff69f3
 80078ac:	40008000 	.word	0x40008000
 80078b0:	40013800 	.word	0x40013800
 80078b4:	40021000 	.word	0x40021000
 80078b8:	40004400 	.word	0x40004400
 80078bc:	40004800 	.word	0x40004800
 80078c0:	40004c00 	.word	0x40004c00
 80078c4:	40005000 	.word	0x40005000
 80078c8:	2310      	movs	r3, #16
 80078ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a9f      	ldr	r2, [pc, #636]	@ (8007b50 <UART_SetConfig+0x568>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d17a      	bne.n	80079ce <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80078dc:	2b08      	cmp	r3, #8
 80078de:	d824      	bhi.n	800792a <UART_SetConfig+0x342>
 80078e0:	a201      	add	r2, pc, #4	@ (adr r2, 80078e8 <UART_SetConfig+0x300>)
 80078e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e6:	bf00      	nop
 80078e8:	0800790d 	.word	0x0800790d
 80078ec:	0800792b 	.word	0x0800792b
 80078f0:	08007915 	.word	0x08007915
 80078f4:	0800792b 	.word	0x0800792b
 80078f8:	0800791b 	.word	0x0800791b
 80078fc:	0800792b 	.word	0x0800792b
 8007900:	0800792b 	.word	0x0800792b
 8007904:	0800792b 	.word	0x0800792b
 8007908:	08007923 	.word	0x08007923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800790c:	f7fc f996 	bl	8003c3c <HAL_RCC_GetPCLK1Freq>
 8007910:	61f8      	str	r0, [r7, #28]
        break;
 8007912:	e010      	b.n	8007936 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007914:	4b8f      	ldr	r3, [pc, #572]	@ (8007b54 <UART_SetConfig+0x56c>)
 8007916:	61fb      	str	r3, [r7, #28]
        break;
 8007918:	e00d      	b.n	8007936 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800791a:	f7fc f8f7 	bl	8003b0c <HAL_RCC_GetSysClockFreq>
 800791e:	61f8      	str	r0, [r7, #28]
        break;
 8007920:	e009      	b.n	8007936 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007922:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007926:	61fb      	str	r3, [r7, #28]
        break;
 8007928:	e005      	b.n	8007936 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800792a:	2300      	movs	r3, #0
 800792c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007934:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	2b00      	cmp	r3, #0
 800793a:	f000 80fb 	beq.w	8007b34 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	685a      	ldr	r2, [r3, #4]
 8007942:	4613      	mov	r3, r2
 8007944:	005b      	lsls	r3, r3, #1
 8007946:	4413      	add	r3, r2
 8007948:	69fa      	ldr	r2, [r7, #28]
 800794a:	429a      	cmp	r2, r3
 800794c:	d305      	bcc.n	800795a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007954:	69fa      	ldr	r2, [r7, #28]
 8007956:	429a      	cmp	r2, r3
 8007958:	d903      	bls.n	8007962 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007960:	e0e8      	b.n	8007b34 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	2200      	movs	r2, #0
 8007966:	461c      	mov	r4, r3
 8007968:	4615      	mov	r5, r2
 800796a:	f04f 0200 	mov.w	r2, #0
 800796e:	f04f 0300 	mov.w	r3, #0
 8007972:	022b      	lsls	r3, r5, #8
 8007974:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007978:	0222      	lsls	r2, r4, #8
 800797a:	68f9      	ldr	r1, [r7, #12]
 800797c:	6849      	ldr	r1, [r1, #4]
 800797e:	0849      	lsrs	r1, r1, #1
 8007980:	2000      	movs	r0, #0
 8007982:	4688      	mov	r8, r1
 8007984:	4681      	mov	r9, r0
 8007986:	eb12 0a08 	adds.w	sl, r2, r8
 800798a:	eb43 0b09 	adc.w	fp, r3, r9
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	603b      	str	r3, [r7, #0]
 8007996:	607a      	str	r2, [r7, #4]
 8007998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800799c:	4650      	mov	r0, sl
 800799e:	4659      	mov	r1, fp
 80079a0:	f7f8 fc66 	bl	8000270 <__aeabi_uldivmod>
 80079a4:	4602      	mov	r2, r0
 80079a6:	460b      	mov	r3, r1
 80079a8:	4613      	mov	r3, r2
 80079aa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079b2:	d308      	bcc.n	80079c6 <UART_SetConfig+0x3de>
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079ba:	d204      	bcs.n	80079c6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	69ba      	ldr	r2, [r7, #24]
 80079c2:	60da      	str	r2, [r3, #12]
 80079c4:	e0b6      	b.n	8007b34 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80079cc:	e0b2      	b.n	8007b34 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	69db      	ldr	r3, [r3, #28]
 80079d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079d6:	d15e      	bne.n	8007a96 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80079d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80079dc:	2b08      	cmp	r3, #8
 80079de:	d828      	bhi.n	8007a32 <UART_SetConfig+0x44a>
 80079e0:	a201      	add	r2, pc, #4	@ (adr r2, 80079e8 <UART_SetConfig+0x400>)
 80079e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e6:	bf00      	nop
 80079e8:	08007a0d 	.word	0x08007a0d
 80079ec:	08007a15 	.word	0x08007a15
 80079f0:	08007a1d 	.word	0x08007a1d
 80079f4:	08007a33 	.word	0x08007a33
 80079f8:	08007a23 	.word	0x08007a23
 80079fc:	08007a33 	.word	0x08007a33
 8007a00:	08007a33 	.word	0x08007a33
 8007a04:	08007a33 	.word	0x08007a33
 8007a08:	08007a2b 	.word	0x08007a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a0c:	f7fc f916 	bl	8003c3c <HAL_RCC_GetPCLK1Freq>
 8007a10:	61f8      	str	r0, [r7, #28]
        break;
 8007a12:	e014      	b.n	8007a3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a14:	f7fc f928 	bl	8003c68 <HAL_RCC_GetPCLK2Freq>
 8007a18:	61f8      	str	r0, [r7, #28]
        break;
 8007a1a:	e010      	b.n	8007a3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a1c:	4b4d      	ldr	r3, [pc, #308]	@ (8007b54 <UART_SetConfig+0x56c>)
 8007a1e:	61fb      	str	r3, [r7, #28]
        break;
 8007a20:	e00d      	b.n	8007a3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a22:	f7fc f873 	bl	8003b0c <HAL_RCC_GetSysClockFreq>
 8007a26:	61f8      	str	r0, [r7, #28]
        break;
 8007a28:	e009      	b.n	8007a3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a2e:	61fb      	str	r3, [r7, #28]
        break;
 8007a30:	e005      	b.n	8007a3e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007a32:	2300      	movs	r3, #0
 8007a34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007a3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d077      	beq.n	8007b34 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	005a      	lsls	r2, r3, #1
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	085b      	lsrs	r3, r3, #1
 8007a4e:	441a      	add	r2, r3
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a58:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	2b0f      	cmp	r3, #15
 8007a5e:	d916      	bls.n	8007a8e <UART_SetConfig+0x4a6>
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a66:	d212      	bcs.n	8007a8e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	f023 030f 	bic.w	r3, r3, #15
 8007a70:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	085b      	lsrs	r3, r3, #1
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	f003 0307 	and.w	r3, r3, #7
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	8afb      	ldrh	r3, [r7, #22]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	8afa      	ldrh	r2, [r7, #22]
 8007a8a:	60da      	str	r2, [r3, #12]
 8007a8c:	e052      	b.n	8007b34 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007a94:	e04e      	b.n	8007b34 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a9a:	2b08      	cmp	r3, #8
 8007a9c:	d827      	bhi.n	8007aee <UART_SetConfig+0x506>
 8007a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa4 <UART_SetConfig+0x4bc>)
 8007aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa4:	08007ac9 	.word	0x08007ac9
 8007aa8:	08007ad1 	.word	0x08007ad1
 8007aac:	08007ad9 	.word	0x08007ad9
 8007ab0:	08007aef 	.word	0x08007aef
 8007ab4:	08007adf 	.word	0x08007adf
 8007ab8:	08007aef 	.word	0x08007aef
 8007abc:	08007aef 	.word	0x08007aef
 8007ac0:	08007aef 	.word	0x08007aef
 8007ac4:	08007ae7 	.word	0x08007ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ac8:	f7fc f8b8 	bl	8003c3c <HAL_RCC_GetPCLK1Freq>
 8007acc:	61f8      	str	r0, [r7, #28]
        break;
 8007ace:	e014      	b.n	8007afa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ad0:	f7fc f8ca 	bl	8003c68 <HAL_RCC_GetPCLK2Freq>
 8007ad4:	61f8      	str	r0, [r7, #28]
        break;
 8007ad6:	e010      	b.n	8007afa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ad8:	4b1e      	ldr	r3, [pc, #120]	@ (8007b54 <UART_SetConfig+0x56c>)
 8007ada:	61fb      	str	r3, [r7, #28]
        break;
 8007adc:	e00d      	b.n	8007afa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ade:	f7fc f815 	bl	8003b0c <HAL_RCC_GetSysClockFreq>
 8007ae2:	61f8      	str	r0, [r7, #28]
        break;
 8007ae4:	e009      	b.n	8007afa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ae6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007aea:	61fb      	str	r3, [r7, #28]
        break;
 8007aec:	e005      	b.n	8007afa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007aee:	2300      	movs	r3, #0
 8007af0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007af8:	bf00      	nop
    }

    if (pclk != 0U)
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d019      	beq.n	8007b34 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	085a      	lsrs	r2, r3, #1
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	441a      	add	r2, r3
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b12:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	2b0f      	cmp	r3, #15
 8007b18:	d909      	bls.n	8007b2e <UART_SetConfig+0x546>
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b20:	d205      	bcs.n	8007b2e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	60da      	str	r2, [r3, #12]
 8007b2c:	e002      	b.n	8007b34 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007b40:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3728      	adds	r7, #40	@ 0x28
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b4e:	bf00      	nop
 8007b50:	40008000 	.word	0x40008000
 8007b54:	00f42400 	.word	0x00f42400

08007b58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b64:	f003 0308 	and.w	r3, r3, #8
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00a      	beq.n	8007b82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00a      	beq.n	8007ba4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba8:	f003 0302 	and.w	r3, r3, #2
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00a      	beq.n	8007bc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	430a      	orrs	r2, r1
 8007bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bca:	f003 0304 	and.w	r3, r3, #4
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00a      	beq.n	8007be8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	430a      	orrs	r2, r1
 8007be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bec:	f003 0310 	and.w	r3, r3, #16
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00a      	beq.n	8007c0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	430a      	orrs	r2, r1
 8007c08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c0e:	f003 0320 	and.w	r3, r3, #32
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00a      	beq.n	8007c2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	430a      	orrs	r2, r1
 8007c2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d01a      	beq.n	8007c6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c56:	d10a      	bne.n	8007c6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	430a      	orrs	r2, r1
 8007c6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00a      	beq.n	8007c90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	430a      	orrs	r2, r1
 8007c8e:	605a      	str	r2, [r3, #4]
  }
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b098      	sub	sp, #96	@ 0x60
 8007ca0:	af02      	add	r7, sp, #8
 8007ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007cac:	f7fa f882 	bl	8001db4 <HAL_GetTick>
 8007cb0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 0308 	and.w	r3, r3, #8
 8007cbc:	2b08      	cmp	r3, #8
 8007cbe:	d12e      	bne.n	8007d1e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cc0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f88c 	bl	8007dec <UART_WaitOnFlagUntilTimeout>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d021      	beq.n	8007d1e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce2:	e853 3f00 	ldrex	r3, [r3]
 8007ce6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cee:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cfa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007cfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d00:	e841 2300 	strex	r3, r2, [r1]
 8007d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1e6      	bne.n	8007cda <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2220      	movs	r2, #32
 8007d10:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	e062      	b.n	8007de4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0304 	and.w	r3, r3, #4
 8007d28:	2b04      	cmp	r3, #4
 8007d2a:	d149      	bne.n	8007dc0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d34:	2200      	movs	r2, #0
 8007d36:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 f856 	bl	8007dec <UART_WaitOnFlagUntilTimeout>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d03c      	beq.n	8007dc0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d4e:	e853 3f00 	ldrex	r3, [r3]
 8007d52:	623b      	str	r3, [r7, #32]
   return(result);
 8007d54:	6a3b      	ldr	r3, [r7, #32]
 8007d56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	461a      	mov	r2, r3
 8007d62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d64:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d66:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d6c:	e841 2300 	strex	r3, r2, [r1]
 8007d70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1e6      	bne.n	8007d46 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3308      	adds	r3, #8
 8007d7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	e853 3f00 	ldrex	r3, [r3]
 8007d86:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f023 0301 	bic.w	r3, r3, #1
 8007d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	3308      	adds	r3, #8
 8007d96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d98:	61fa      	str	r2, [r7, #28]
 8007d9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9c:	69b9      	ldr	r1, [r7, #24]
 8007d9e:	69fa      	ldr	r2, [r7, #28]
 8007da0:	e841 2300 	strex	r3, r2, [r1]
 8007da4:	617b      	str	r3, [r7, #20]
   return(result);
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1e5      	bne.n	8007d78 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2220      	movs	r2, #32
 8007db0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	e011      	b.n	8007de4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2220      	movs	r2, #32
 8007dc4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2220      	movs	r2, #32
 8007dca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3758      	adds	r7, #88	@ 0x58
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	603b      	str	r3, [r7, #0]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dfc:	e04f      	b.n	8007e9e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e04:	d04b      	beq.n	8007e9e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e06:	f7f9 ffd5 	bl	8001db4 <HAL_GetTick>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	69ba      	ldr	r2, [r7, #24]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d302      	bcc.n	8007e1c <UART_WaitOnFlagUntilTimeout+0x30>
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d101      	bne.n	8007e20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	e04e      	b.n	8007ebe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f003 0304 	and.w	r3, r3, #4
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d037      	beq.n	8007e9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	2b80      	cmp	r3, #128	@ 0x80
 8007e32:	d034      	beq.n	8007e9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	2b40      	cmp	r3, #64	@ 0x40
 8007e38:	d031      	beq.n	8007e9e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	69db      	ldr	r3, [r3, #28]
 8007e40:	f003 0308 	and.w	r3, r3, #8
 8007e44:	2b08      	cmp	r3, #8
 8007e46:	d110      	bne.n	8007e6a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2208      	movs	r2, #8
 8007e4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f000 f8ff 	bl	8008054 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2208      	movs	r2, #8
 8007e5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e029      	b.n	8007ebe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	69db      	ldr	r3, [r3, #28]
 8007e70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e78:	d111      	bne.n	8007e9e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f000 f8e5 	bl	8008054 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2220      	movs	r2, #32
 8007e8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e00f      	b.n	8007ebe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	69da      	ldr	r2, [r3, #28]
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	bf0c      	ite	eq
 8007eae:	2301      	moveq	r3, #1
 8007eb0:	2300      	movne	r3, #0
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	79fb      	ldrb	r3, [r7, #7]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d0a0      	beq.n	8007dfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
	...

08007ec8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b097      	sub	sp, #92	@ 0x5c
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	68ba      	ldr	r2, [r7, #8]
 8007eda:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	88fa      	ldrh	r2, [r7, #6]
 8007ee0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	88fa      	ldrh	r2, [r7, #6]
 8007ee8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007efa:	d10e      	bne.n	8007f1a <UART_Start_Receive_IT+0x52>
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d105      	bne.n	8007f10 <UART_Start_Receive_IT+0x48>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007f0a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007f0e:	e02d      	b.n	8007f6c <UART_Start_Receive_IT+0xa4>
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	22ff      	movs	r2, #255	@ 0xff
 8007f14:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007f18:	e028      	b.n	8007f6c <UART_Start_Receive_IT+0xa4>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d10d      	bne.n	8007f3e <UART_Start_Receive_IT+0x76>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d104      	bne.n	8007f34 <UART_Start_Receive_IT+0x6c>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	22ff      	movs	r2, #255	@ 0xff
 8007f2e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007f32:	e01b      	b.n	8007f6c <UART_Start_Receive_IT+0xa4>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	227f      	movs	r2, #127	@ 0x7f
 8007f38:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007f3c:	e016      	b.n	8007f6c <UART_Start_Receive_IT+0xa4>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f46:	d10d      	bne.n	8007f64 <UART_Start_Receive_IT+0x9c>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d104      	bne.n	8007f5a <UART_Start_Receive_IT+0x92>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	227f      	movs	r2, #127	@ 0x7f
 8007f54:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007f58:	e008      	b.n	8007f6c <UART_Start_Receive_IT+0xa4>
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	223f      	movs	r2, #63	@ 0x3f
 8007f5e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007f62:	e003      	b.n	8007f6c <UART_Start_Receive_IT+0xa4>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2222      	movs	r2, #34	@ 0x22
 8007f78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	3308      	adds	r3, #8
 8007f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f86:	e853 3f00 	ldrex	r3, [r3]
 8007f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8e:	f043 0301 	orr.w	r3, r3, #1
 8007f92:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	3308      	adds	r3, #8
 8007f9a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007f9c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007f9e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007fa2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007fa4:	e841 2300 	strex	r3, r2, [r1]
 8007fa8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007faa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d1e5      	bne.n	8007f7c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fb8:	d107      	bne.n	8007fca <UART_Start_Receive_IT+0x102>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d103      	bne.n	8007fca <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	4a21      	ldr	r2, [pc, #132]	@ (800804c <UART_Start_Receive_IT+0x184>)
 8007fc6:	669a      	str	r2, [r3, #104]	@ 0x68
 8007fc8:	e002      	b.n	8007fd0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	4a20      	ldr	r2, [pc, #128]	@ (8008050 <UART_Start_Receive_IT+0x188>)
 8007fce:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d019      	beq.n	800800c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe0:	e853 3f00 	ldrex	r3, [r3]
 8007fe4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007fec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ff6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ff8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007ffc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ffe:	e841 2300 	strex	r3, r2, [r1]
 8008002:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1e6      	bne.n	8007fd8 <UART_Start_Receive_IT+0x110>
 800800a:	e018      	b.n	800803e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	e853 3f00 	ldrex	r3, [r3]
 8008018:	613b      	str	r3, [r7, #16]
   return(result);
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	f043 0320 	orr.w	r3, r3, #32
 8008020:	653b      	str	r3, [r7, #80]	@ 0x50
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	461a      	mov	r2, r3
 8008028:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800802a:	623b      	str	r3, [r7, #32]
 800802c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802e:	69f9      	ldr	r1, [r7, #28]
 8008030:	6a3a      	ldr	r2, [r7, #32]
 8008032:	e841 2300 	strex	r3, r2, [r1]
 8008036:	61bb      	str	r3, [r7, #24]
   return(result);
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1e6      	bne.n	800800c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	375c      	adds	r7, #92	@ 0x5c
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr
 800804c:	08008359 	.word	0x08008359
 8008050:	0800819d 	.word	0x0800819d

08008054 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008054:	b480      	push	{r7}
 8008056:	b095      	sub	sp, #84	@ 0x54
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008064:	e853 3f00 	ldrex	r3, [r3]
 8008068:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800806a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008070:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	461a      	mov	r2, r3
 8008078:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800807a:	643b      	str	r3, [r7, #64]	@ 0x40
 800807c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008080:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008082:	e841 2300 	strex	r3, r2, [r1]
 8008086:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1e6      	bne.n	800805c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	3308      	adds	r3, #8
 8008094:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008096:	6a3b      	ldr	r3, [r7, #32]
 8008098:	e853 3f00 	ldrex	r3, [r3]
 800809c:	61fb      	str	r3, [r7, #28]
   return(result);
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	f023 0301 	bic.w	r3, r3, #1
 80080a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	3308      	adds	r3, #8
 80080ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80080b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080b6:	e841 2300 	strex	r3, r2, [r1]
 80080ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80080bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1e5      	bne.n	800808e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d118      	bne.n	80080fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	e853 3f00 	ldrex	r3, [r3]
 80080d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	f023 0310 	bic.w	r3, r3, #16
 80080de:	647b      	str	r3, [r7, #68]	@ 0x44
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	461a      	mov	r2, r3
 80080e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080e8:	61bb      	str	r3, [r7, #24]
 80080ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ec:	6979      	ldr	r1, [r7, #20]
 80080ee:	69ba      	ldr	r2, [r7, #24]
 80080f0:	e841 2300 	strex	r3, r2, [r1]
 80080f4:	613b      	str	r3, [r7, #16]
   return(result);
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1e6      	bne.n	80080ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2220      	movs	r2, #32
 8008100:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008110:	bf00      	nop
 8008112:	3754      	adds	r7, #84	@ 0x54
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008128:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2200      	movs	r2, #0
 8008136:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f7ff fa3e 	bl	80075bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008140:	bf00      	nop
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b088      	sub	sp, #32
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	e853 3f00 	ldrex	r3, [r3]
 800815c:	60bb      	str	r3, [r7, #8]
   return(result);
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008164:	61fb      	str	r3, [r7, #28]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	461a      	mov	r2, r3
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	61bb      	str	r3, [r7, #24]
 8008170:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008172:	6979      	ldr	r1, [r7, #20]
 8008174:	69ba      	ldr	r2, [r7, #24]
 8008176:	e841 2300 	strex	r3, r2, [r1]
 800817a:	613b      	str	r3, [r7, #16]
   return(result);
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1e6      	bne.n	8008150 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2220      	movs	r2, #32
 8008186:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f7ff fa0a 	bl	80075a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008194:	bf00      	nop
 8008196:	3720      	adds	r7, #32
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b09c      	sub	sp, #112	@ 0x70
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80081aa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081b4:	2b22      	cmp	r3, #34	@ 0x22
 80081b6:	f040 80be 	bne.w	8008336 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80081c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80081c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80081c8:	b2d9      	uxtb	r1, r3
 80081ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80081ce:	b2da      	uxtb	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081d4:	400a      	ands	r2, r1
 80081d6:	b2d2      	uxtb	r2, r2
 80081d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081de:	1c5a      	adds	r2, r3, #1
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	3b01      	subs	r3, #1
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f040 80a3 	bne.w	800834a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800820c:	e853 3f00 	ldrex	r3, [r3]
 8008210:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008212:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008214:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008218:	66bb      	str	r3, [r7, #104]	@ 0x68
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	461a      	mov	r2, r3
 8008220:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008222:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008224:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008226:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008228:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800822a:	e841 2300 	strex	r3, r2, [r1]
 800822e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008230:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1e6      	bne.n	8008204 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3308      	adds	r3, #8
 800823c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008240:	e853 3f00 	ldrex	r3, [r3]
 8008244:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008248:	f023 0301 	bic.w	r3, r3, #1
 800824c:	667b      	str	r3, [r7, #100]	@ 0x64
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	3308      	adds	r3, #8
 8008254:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008256:	647a      	str	r2, [r7, #68]	@ 0x44
 8008258:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800825c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800825e:	e841 2300 	strex	r3, r2, [r1]
 8008262:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1e5      	bne.n	8008236 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2220      	movs	r2, #32
 800826e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a34      	ldr	r2, [pc, #208]	@ (8008354 <UART_RxISR_8BIT+0x1b8>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d01f      	beq.n	80082c8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008292:	2b00      	cmp	r3, #0
 8008294:	d018      	beq.n	80082c8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800829e:	e853 3f00 	ldrex	r3, [r3]
 80082a2:	623b      	str	r3, [r7, #32]
   return(result);
 80082a4:	6a3b      	ldr	r3, [r7, #32]
 80082a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80082aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	461a      	mov	r2, r3
 80082b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80082b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80082b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082bc:	e841 2300 	strex	r3, r2, [r1]
 80082c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80082c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d1e6      	bne.n	8008296 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d12e      	bne.n	800832e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	e853 3f00 	ldrex	r3, [r3]
 80082e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f023 0310 	bic.w	r3, r3, #16
 80082ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	461a      	mov	r2, r3
 80082f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80082f4:	61fb      	str	r3, [r7, #28]
 80082f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f8:	69b9      	ldr	r1, [r7, #24]
 80082fa:	69fa      	ldr	r2, [r7, #28]
 80082fc:	e841 2300 	strex	r3, r2, [r1]
 8008300:	617b      	str	r3, [r7, #20]
   return(result);
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1e6      	bne.n	80082d6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	69db      	ldr	r3, [r3, #28]
 800830e:	f003 0310 	and.w	r3, r3, #16
 8008312:	2b10      	cmp	r3, #16
 8008314:	d103      	bne.n	800831e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2210      	movs	r2, #16
 800831c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008324:	4619      	mov	r1, r3
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f7ff f952 	bl	80075d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800832c:	e00d      	b.n	800834a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f7f8 fadc 	bl	80008ec <HAL_UART_RxCpltCallback>
}
 8008334:	e009      	b.n	800834a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	8b1b      	ldrh	r3, [r3, #24]
 800833c:	b29a      	uxth	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f042 0208 	orr.w	r2, r2, #8
 8008346:	b292      	uxth	r2, r2
 8008348:	831a      	strh	r2, [r3, #24]
}
 800834a:	bf00      	nop
 800834c:	3770      	adds	r7, #112	@ 0x70
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	40008000 	.word	0x40008000

08008358 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b09c      	sub	sp, #112	@ 0x70
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008366:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008370:	2b22      	cmp	r3, #34	@ 0x22
 8008372:	f040 80be 	bne.w	80084f2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800837c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008384:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008386:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800838a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800838e:	4013      	ands	r3, r2
 8008390:	b29a      	uxth	r2, r3
 8008392:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008394:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800839a:	1c9a      	adds	r2, r3, #2
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	3b01      	subs	r3, #1
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f040 80a3 	bne.w	8008506 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083c8:	e853 3f00 	ldrex	r3, [r3]
 80083cc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80083ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	461a      	mov	r2, r3
 80083dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80083de:	657b      	str	r3, [r7, #84]	@ 0x54
 80083e0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80083e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80083e6:	e841 2300 	strex	r3, r2, [r1]
 80083ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80083ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1e6      	bne.n	80083c0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	3308      	adds	r3, #8
 80083f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083fc:	e853 3f00 	ldrex	r3, [r3]
 8008400:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008404:	f023 0301 	bic.w	r3, r3, #1
 8008408:	663b      	str	r3, [r7, #96]	@ 0x60
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	3308      	adds	r3, #8
 8008410:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008412:	643a      	str	r2, [r7, #64]	@ 0x40
 8008414:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008416:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008418:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800841a:	e841 2300 	strex	r3, r2, [r1]
 800841e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1e5      	bne.n	80083f2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2220      	movs	r2, #32
 800842a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a34      	ldr	r2, [pc, #208]	@ (8008510 <UART_RxISR_16BIT+0x1b8>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d01f      	beq.n	8008484 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d018      	beq.n	8008484 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008458:	6a3b      	ldr	r3, [r7, #32]
 800845a:	e853 3f00 	ldrex	r3, [r3]
 800845e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008466:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	461a      	mov	r2, r3
 800846e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008470:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008472:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008474:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008476:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008478:	e841 2300 	strex	r3, r2, [r1]
 800847c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800847e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008480:	2b00      	cmp	r3, #0
 8008482:	d1e6      	bne.n	8008452 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008488:	2b01      	cmp	r3, #1
 800848a:	d12e      	bne.n	80084ea <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	e853 3f00 	ldrex	r3, [r3]
 800849e:	60bb      	str	r3, [r7, #8]
   return(result);
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	f023 0310 	bic.w	r3, r3, #16
 80084a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	461a      	mov	r2, r3
 80084ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084b0:	61bb      	str	r3, [r7, #24]
 80084b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b4:	6979      	ldr	r1, [r7, #20]
 80084b6:	69ba      	ldr	r2, [r7, #24]
 80084b8:	e841 2300 	strex	r3, r2, [r1]
 80084bc:	613b      	str	r3, [r7, #16]
   return(result);
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1e6      	bne.n	8008492 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	69db      	ldr	r3, [r3, #28]
 80084ca:	f003 0310 	and.w	r3, r3, #16
 80084ce:	2b10      	cmp	r3, #16
 80084d0:	d103      	bne.n	80084da <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2210      	movs	r2, #16
 80084d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80084e0:	4619      	mov	r1, r3
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f7ff f874 	bl	80075d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80084e8:	e00d      	b.n	8008506 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f7f8 f9fe 	bl	80008ec <HAL_UART_RxCpltCallback>
}
 80084f0:	e009      	b.n	8008506 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	8b1b      	ldrh	r3, [r3, #24]
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f042 0208 	orr.w	r2, r2, #8
 8008502:	b292      	uxth	r2, r2
 8008504:	831a      	strh	r2, [r3, #24]
}
 8008506:	bf00      	nop
 8008508:	3770      	adds	r7, #112	@ 0x70
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	40008000 	.word	0x40008000

08008514 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800851c:	bf00      	nop
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	4603      	mov	r3, r0
 8008530:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008532:	2300      	movs	r3, #0
 8008534:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800853a:	2b84      	cmp	r3, #132	@ 0x84
 800853c:	d005      	beq.n	800854a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800853e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	4413      	add	r3, r2
 8008546:	3303      	adds	r3, #3
 8008548:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800854a:	68fb      	ldr	r3, [r7, #12]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3714      	adds	r7, #20
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800855c:	f000 fde2 	bl	8009124 <vTaskStartScheduler>
  
  return osOK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	bd80      	pop	{r7, pc}

08008566 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008566:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008568:	b089      	sub	sp, #36	@ 0x24
 800856a:	af04      	add	r7, sp, #16
 800856c:	6078      	str	r0, [r7, #4]
 800856e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	695b      	ldr	r3, [r3, #20]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d020      	beq.n	80085ba <osThreadCreate+0x54>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d01c      	beq.n	80085ba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	685c      	ldr	r4, [r3, #4]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	691e      	ldr	r6, [r3, #16]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008592:	4618      	mov	r0, r3
 8008594:	f7ff ffc8 	bl	8008528 <makeFreeRtosPriority>
 8008598:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80085a2:	9202      	str	r2, [sp, #8]
 80085a4:	9301      	str	r3, [sp, #4]
 80085a6:	9100      	str	r1, [sp, #0]
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	4632      	mov	r2, r6
 80085ac:	4629      	mov	r1, r5
 80085ae:	4620      	mov	r0, r4
 80085b0:	f000 fbd2 	bl	8008d58 <xTaskCreateStatic>
 80085b4:	4603      	mov	r3, r0
 80085b6:	60fb      	str	r3, [r7, #12]
 80085b8:	e01c      	b.n	80085f4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	685c      	ldr	r4, [r3, #4]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80085c6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7ff ffaa 	bl	8008528 <makeFreeRtosPriority>
 80085d4:	4602      	mov	r2, r0
 80085d6:	f107 030c 	add.w	r3, r7, #12
 80085da:	9301      	str	r3, [sp, #4]
 80085dc:	9200      	str	r2, [sp, #0]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	4632      	mov	r2, r6
 80085e2:	4629      	mov	r1, r5
 80085e4:	4620      	mov	r0, r4
 80085e6:	f000 fc17 	bl	8008e18 <xTaskCreate>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d001      	beq.n	80085f4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80085f0:	2300      	movs	r3, #0
 80085f2:	e000      	b.n	80085f6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80085f4:	68fb      	ldr	r3, [r7, #12]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3714      	adds	r7, #20
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080085fe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b084      	sub	sp, #16
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d001      	beq.n	8008614 <osDelay+0x16>
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	e000      	b.n	8008616 <osDelay+0x18>
 8008614:	2301      	movs	r3, #1
 8008616:	4618      	mov	r0, r3
 8008618:	f000 fd4e 	bl	80090b8 <vTaskDelay>
  
  return osOK;
 800861c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800861e:	4618      	mov	r0, r3
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008626:	b480      	push	{r7}
 8008628:	b083      	sub	sp, #12
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f103 0208 	add.w	r2, r3, #8
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800863e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f103 0208 	add.w	r2, r3, #8
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f103 0208 	add.w	r2, r3, #8
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800865a:	bf00      	nop
 800865c:	370c      	adds	r7, #12
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr

08008666 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008666:	b480      	push	{r7}
 8008668:	b083      	sub	sp, #12
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008674:	bf00      	nop
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	689a      	ldr	r2, [r3, #8]
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	1c5a      	adds	r2, r3, #1
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	601a      	str	r2, [r3, #0]
}
 80086bc:	bf00      	nop
 80086be:	3714      	adds	r7, #20
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086de:	d103      	bne.n	80086e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	60fb      	str	r3, [r7, #12]
 80086e6:	e00c      	b.n	8008702 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	3308      	adds	r3, #8
 80086ec:	60fb      	str	r3, [r7, #12]
 80086ee:	e002      	b.n	80086f6 <vListInsert+0x2e>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	60fb      	str	r3, [r7, #12]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68ba      	ldr	r2, [r7, #8]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d2f6      	bcs.n	80086f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	685a      	ldr	r2, [r3, #4]
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	683a      	ldr	r2, [r7, #0]
 8008710:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	683a      	ldr	r2, [r7, #0]
 800871c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	1c5a      	adds	r2, r3, #1
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	601a      	str	r2, [r3, #0]
}
 800872e:	bf00      	nop
 8008730:	3714      	adds	r7, #20
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr

0800873a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800873a:	b480      	push	{r7}
 800873c:	b085      	sub	sp, #20
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	6892      	ldr	r2, [r2, #8]
 8008750:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	6852      	ldr	r2, [r2, #4]
 800875a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	429a      	cmp	r2, r3
 8008764:	d103      	bne.n	800876e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	689a      	ldr	r2, [r3, #8]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	1e5a      	subs	r2, r3, #1
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
}
 8008782:	4618      	mov	r0, r3
 8008784:	3714      	adds	r7, #20
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
	...

08008790 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d10b      	bne.n	80087bc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80087a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a8:	f383 8811 	msr	BASEPRI, r3
 80087ac:	f3bf 8f6f 	isb	sy
 80087b0:	f3bf 8f4f 	dsb	sy
 80087b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80087b6:	bf00      	nop
 80087b8:	bf00      	nop
 80087ba:	e7fd      	b.n	80087b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80087bc:	f001 fba4 	bl	8009f08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087c8:	68f9      	ldr	r1, [r7, #12]
 80087ca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80087cc:	fb01 f303 	mul.w	r3, r1, r3
 80087d0:	441a      	add	r2, r3
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087ec:	3b01      	subs	r3, #1
 80087ee:	68f9      	ldr	r1, [r7, #12]
 80087f0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80087f2:	fb01 f303 	mul.w	r3, r1, r3
 80087f6:	441a      	add	r2, r3
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	22ff      	movs	r2, #255	@ 0xff
 8008800:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	22ff      	movs	r2, #255	@ 0xff
 8008808:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d114      	bne.n	800883c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d01a      	beq.n	8008850 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	3310      	adds	r3, #16
 800881e:	4618      	mov	r0, r3
 8008820:	f000 feda 	bl	80095d8 <xTaskRemoveFromEventList>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d012      	beq.n	8008850 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800882a:	4b0d      	ldr	r3, [pc, #52]	@ (8008860 <xQueueGenericReset+0xd0>)
 800882c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008830:	601a      	str	r2, [r3, #0]
 8008832:	f3bf 8f4f 	dsb	sy
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	e009      	b.n	8008850 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	3310      	adds	r3, #16
 8008840:	4618      	mov	r0, r3
 8008842:	f7ff fef0 	bl	8008626 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	3324      	adds	r3, #36	@ 0x24
 800884a:	4618      	mov	r0, r3
 800884c:	f7ff feeb 	bl	8008626 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008850:	f001 fb8c 	bl	8009f6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008854:	2301      	movs	r3, #1
}
 8008856:	4618      	mov	r0, r3
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	e000ed04 	.word	0xe000ed04

08008864 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008864:	b580      	push	{r7, lr}
 8008866:	b08a      	sub	sp, #40	@ 0x28
 8008868:	af02      	add	r7, sp, #8
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	4613      	mov	r3, r2
 8008870:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d10b      	bne.n	8008890 <xQueueGenericCreate+0x2c>
	__asm volatile
 8008878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800887c:	f383 8811 	msr	BASEPRI, r3
 8008880:	f3bf 8f6f 	isb	sy
 8008884:	f3bf 8f4f 	dsb	sy
 8008888:	613b      	str	r3, [r7, #16]
}
 800888a:	bf00      	nop
 800888c:	bf00      	nop
 800888e:	e7fd      	b.n	800888c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	68ba      	ldr	r2, [r7, #8]
 8008894:	fb02 f303 	mul.w	r3, r2, r3
 8008898:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	3348      	adds	r3, #72	@ 0x48
 800889e:	4618      	mov	r0, r3
 80088a0:	f001 fc54 	bl	800a14c <pvPortMalloc>
 80088a4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d011      	beq.n	80088d0 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	3348      	adds	r3, #72	@ 0x48
 80088b4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80088be:	79fa      	ldrb	r2, [r7, #7]
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	4613      	mov	r3, r2
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	68b9      	ldr	r1, [r7, #8]
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f000 f805 	bl	80088da <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80088d0:	69bb      	ldr	r3, [r7, #24]
	}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3720      	adds	r7, #32
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b084      	sub	sp, #16
 80088de:	af00      	add	r7, sp, #0
 80088e0:	60f8      	str	r0, [r7, #12]
 80088e2:	60b9      	str	r1, [r7, #8]
 80088e4:	607a      	str	r2, [r7, #4]
 80088e6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d103      	bne.n	80088f6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	69ba      	ldr	r2, [r7, #24]
 80088f2:	601a      	str	r2, [r3, #0]
 80088f4:	e002      	b.n	80088fc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	68ba      	ldr	r2, [r7, #8]
 8008906:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008908:	2101      	movs	r1, #1
 800890a:	69b8      	ldr	r0, [r7, #24]
 800890c:	f7ff ff40 	bl	8008790 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008910:	bf00      	nop
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b08e      	sub	sp, #56	@ 0x38
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008928:	2b00      	cmp	r3, #0
 800892a:	d10b      	bne.n	8008944 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800892c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008930:	f383 8811 	msr	BASEPRI, r3
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	f3bf 8f4f 	dsb	sy
 800893c:	623b      	str	r3, [r7, #32]
}
 800893e:	bf00      	nop
 8008940:	bf00      	nop
 8008942:	e7fd      	b.n	8008940 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008948:	2b00      	cmp	r3, #0
 800894a:	d00b      	beq.n	8008964 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800894c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008950:	f383 8811 	msr	BASEPRI, r3
 8008954:	f3bf 8f6f 	isb	sy
 8008958:	f3bf 8f4f 	dsb	sy
 800895c:	61fb      	str	r3, [r7, #28]
}
 800895e:	bf00      	nop
 8008960:	bf00      	nop
 8008962:	e7fd      	b.n	8008960 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d103      	bne.n	8008974 <xQueueGiveFromISR+0x5c>
 800896c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d101      	bne.n	8008978 <xQueueGiveFromISR+0x60>
 8008974:	2301      	movs	r3, #1
 8008976:	e000      	b.n	800897a <xQueueGiveFromISR+0x62>
 8008978:	2300      	movs	r3, #0
 800897a:	2b00      	cmp	r3, #0
 800897c:	d10b      	bne.n	8008996 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800897e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008982:	f383 8811 	msr	BASEPRI, r3
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	61bb      	str	r3, [r7, #24]
}
 8008990:	bf00      	nop
 8008992:	bf00      	nop
 8008994:	e7fd      	b.n	8008992 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008996:	f001 fb97 	bl	800a0c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800899a:	f3ef 8211 	mrs	r2, BASEPRI
 800899e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	617a      	str	r2, [r7, #20]
 80089b0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80089b2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80089bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d22b      	bcs.n	8008a1e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80089c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80089d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d2:	1c5a      	adds	r2, r3, #1
 80089d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80089d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80089dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80089e0:	d112      	bne.n	8008a08 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d016      	beq.n	8008a18 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ec:	3324      	adds	r3, #36	@ 0x24
 80089ee:	4618      	mov	r0, r3
 80089f0:	f000 fdf2 	bl	80095d8 <xTaskRemoveFromEventList>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d00e      	beq.n	8008a18 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00b      	beq.n	8008a18 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	2201      	movs	r2, #1
 8008a04:	601a      	str	r2, [r3, #0]
 8008a06:	e007      	b.n	8008a18 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	b25a      	sxtb	r2, r3
 8008a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a1c:	e001      	b.n	8008a22 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a24:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3738      	adds	r7, #56	@ 0x38
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b08e      	sub	sp, #56	@ 0x38
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a42:	2300      	movs	r3, #0
 8008a44:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d10b      	bne.n	8008a6c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a58:	f383 8811 	msr	BASEPRI, r3
 8008a5c:	f3bf 8f6f 	isb	sy
 8008a60:	f3bf 8f4f 	dsb	sy
 8008a64:	623b      	str	r3, [r7, #32]
}
 8008a66:	bf00      	nop
 8008a68:	bf00      	nop
 8008a6a:	e7fd      	b.n	8008a68 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d00b      	beq.n	8008a8c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a78:	f383 8811 	msr	BASEPRI, r3
 8008a7c:	f3bf 8f6f 	isb	sy
 8008a80:	f3bf 8f4f 	dsb	sy
 8008a84:	61fb      	str	r3, [r7, #28]
}
 8008a86:	bf00      	nop
 8008a88:	bf00      	nop
 8008a8a:	e7fd      	b.n	8008a88 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a8c:	f000 ff6a 	bl	8009964 <xTaskGetSchedulerState>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d102      	bne.n	8008a9c <xQueueSemaphoreTake+0x64>
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d101      	bne.n	8008aa0 <xQueueSemaphoreTake+0x68>
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	e000      	b.n	8008aa2 <xQueueSemaphoreTake+0x6a>
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d10b      	bne.n	8008abe <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aaa:	f383 8811 	msr	BASEPRI, r3
 8008aae:	f3bf 8f6f 	isb	sy
 8008ab2:	f3bf 8f4f 	dsb	sy
 8008ab6:	61bb      	str	r3, [r7, #24]
}
 8008ab8:	bf00      	nop
 8008aba:	bf00      	nop
 8008abc:	e7fd      	b.n	8008aba <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008abe:	f001 fa23 	bl	8009f08 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ac6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d024      	beq.n	8008b18 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad0:	1e5a      	subs	r2, r3, #1
 8008ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d104      	bne.n	8008ae8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008ade:	f001 f865 	bl	8009bac <pvTaskIncrementMutexHeldCount>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00f      	beq.n	8008b10 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008af2:	3310      	adds	r3, #16
 8008af4:	4618      	mov	r0, r3
 8008af6:	f000 fd6f 	bl	80095d8 <xTaskRemoveFromEventList>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d007      	beq.n	8008b10 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b00:	4b54      	ldr	r3, [pc, #336]	@ (8008c54 <xQueueSemaphoreTake+0x21c>)
 8008b02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b06:	601a      	str	r2, [r3, #0]
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b10:	f001 fa2c 	bl	8009f6c <vPortExitCritical>
				return pdPASS;
 8008b14:	2301      	movs	r3, #1
 8008b16:	e098      	b.n	8008c4a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d112      	bne.n	8008b44 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00b      	beq.n	8008b3c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b28:	f383 8811 	msr	BASEPRI, r3
 8008b2c:	f3bf 8f6f 	isb	sy
 8008b30:	f3bf 8f4f 	dsb	sy
 8008b34:	617b      	str	r3, [r7, #20]
}
 8008b36:	bf00      	nop
 8008b38:	bf00      	nop
 8008b3a:	e7fd      	b.n	8008b38 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008b3c:	f001 fa16 	bl	8009f6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b40:	2300      	movs	r3, #0
 8008b42:	e082      	b.n	8008c4a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d106      	bne.n	8008b58 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b4a:	f107 030c 	add.w	r3, r7, #12
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f000 fda6 	bl	80096a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b54:	2301      	movs	r3, #1
 8008b56:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b58:	f001 fa08 	bl	8009f6c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b5c:	f000 fb4c 	bl	80091f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b60:	f001 f9d2 	bl	8009f08 <vPortEnterCritical>
 8008b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b6a:	b25b      	sxtb	r3, r3
 8008b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b70:	d103      	bne.n	8008b7a <xQueueSemaphoreTake+0x142>
 8008b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b74:	2200      	movs	r2, #0
 8008b76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b80:	b25b      	sxtb	r3, r3
 8008b82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b86:	d103      	bne.n	8008b90 <xQueueSemaphoreTake+0x158>
 8008b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b90:	f001 f9ec 	bl	8009f6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b94:	463a      	mov	r2, r7
 8008b96:	f107 030c 	add.w	r3, r7, #12
 8008b9a:	4611      	mov	r1, r2
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f000 fd95 	bl	80096cc <xTaskCheckForTimeOut>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d132      	bne.n	8008c0e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ba8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008baa:	f000 f8bf 	bl	8008d2c <prvIsQueueEmpty>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d026      	beq.n	8008c02 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d109      	bne.n	8008bd0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008bbc:	f001 f9a4 	bl	8009f08 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f000 feeb 	bl	80099a0 <xTaskPriorityInherit>
 8008bca:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008bcc:	f001 f9ce 	bl	8009f6c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bd2:	3324      	adds	r3, #36	@ 0x24
 8008bd4:	683a      	ldr	r2, [r7, #0]
 8008bd6:	4611      	mov	r1, r2
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f000 fcd7 	bl	800958c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008bde:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008be0:	f000 f852 	bl	8008c88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008be4:	f000 fb16 	bl	8009214 <xTaskResumeAll>
 8008be8:	4603      	mov	r3, r0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	f47f af67 	bne.w	8008abe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008bf0:	4b18      	ldr	r3, [pc, #96]	@ (8008c54 <xQueueSemaphoreTake+0x21c>)
 8008bf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bf6:	601a      	str	r2, [r3, #0]
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	f3bf 8f6f 	isb	sy
 8008c00:	e75d      	b.n	8008abe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008c02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008c04:	f000 f840 	bl	8008c88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c08:	f000 fb04 	bl	8009214 <xTaskResumeAll>
 8008c0c:	e757      	b.n	8008abe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008c0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008c10:	f000 f83a 	bl	8008c88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c14:	f000 fafe 	bl	8009214 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008c1a:	f000 f887 	bl	8008d2c <prvIsQueueEmpty>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	f43f af4c 	beq.w	8008abe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d00d      	beq.n	8008c48 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008c2c:	f001 f96c 	bl	8009f08 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008c30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008c32:	f000 f811 	bl	8008c58 <prvGetDisinheritPriorityAfterTimeout>
 8008c36:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f000 ff24 	bl	8009a8c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008c44:	f001 f992 	bl	8009f6c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3738      	adds	r7, #56	@ 0x38
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	e000ed04 	.word	0xe000ed04

08008c58 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d006      	beq.n	8008c76 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f1c3 0307 	rsb	r3, r3, #7
 8008c72:	60fb      	str	r3, [r7, #12]
 8008c74:	e001      	b.n	8008c7a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008c76:	2300      	movs	r3, #0
 8008c78:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
	}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3714      	adds	r7, #20
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008c90:	f001 f93a 	bl	8009f08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c9a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c9c:	e011      	b.n	8008cc2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d012      	beq.n	8008ccc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	3324      	adds	r3, #36	@ 0x24
 8008caa:	4618      	mov	r0, r3
 8008cac:	f000 fc94 	bl	80095d8 <xTaskRemoveFromEventList>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d001      	beq.n	8008cba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008cb6:	f000 fd6d 	bl	8009794 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008cba:	7bfb      	ldrb	r3, [r7, #15]
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	dce9      	bgt.n	8008c9e <prvUnlockQueue+0x16>
 8008cca:	e000      	b.n	8008cce <prvUnlockQueue+0x46>
					break;
 8008ccc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	22ff      	movs	r2, #255	@ 0xff
 8008cd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008cd6:	f001 f949 	bl	8009f6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008cda:	f001 f915 	bl	8009f08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ce4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ce6:	e011      	b.n	8008d0c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d012      	beq.n	8008d16 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	3310      	adds	r3, #16
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f000 fc6f 	bl	80095d8 <xTaskRemoveFromEventList>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d001      	beq.n	8008d04 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008d00:	f000 fd48 	bl	8009794 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008d04:	7bbb      	ldrb	r3, [r7, #14]
 8008d06:	3b01      	subs	r3, #1
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	dce9      	bgt.n	8008ce8 <prvUnlockQueue+0x60>
 8008d14:	e000      	b.n	8008d18 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008d16:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	22ff      	movs	r2, #255	@ 0xff
 8008d1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008d20:	f001 f924 	bl	8009f6c <vPortExitCritical>
}
 8008d24:	bf00      	nop
 8008d26:	3710      	adds	r7, #16
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d34:	f001 f8e8 	bl	8009f08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d102      	bne.n	8008d46 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008d40:	2301      	movs	r3, #1
 8008d42:	60fb      	str	r3, [r7, #12]
 8008d44:	e001      	b.n	8008d4a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008d46:	2300      	movs	r3, #0
 8008d48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d4a:	f001 f90f 	bl	8009f6c <vPortExitCritical>

	return xReturn;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3710      	adds	r7, #16
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b08e      	sub	sp, #56	@ 0x38
 8008d5c:	af04      	add	r7, sp, #16
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	607a      	str	r2, [r7, #4]
 8008d64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10b      	bne.n	8008d84 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d70:	f383 8811 	msr	BASEPRI, r3
 8008d74:	f3bf 8f6f 	isb	sy
 8008d78:	f3bf 8f4f 	dsb	sy
 8008d7c:	623b      	str	r3, [r7, #32]
}
 8008d7e:	bf00      	nop
 8008d80:	bf00      	nop
 8008d82:	e7fd      	b.n	8008d80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d10b      	bne.n	8008da2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8008d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d8e:	f383 8811 	msr	BASEPRI, r3
 8008d92:	f3bf 8f6f 	isb	sy
 8008d96:	f3bf 8f4f 	dsb	sy
 8008d9a:	61fb      	str	r3, [r7, #28]
}
 8008d9c:	bf00      	nop
 8008d9e:	bf00      	nop
 8008da0:	e7fd      	b.n	8008d9e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008da2:	23a0      	movs	r3, #160	@ 0xa0
 8008da4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	2ba0      	cmp	r3, #160	@ 0xa0
 8008daa:	d00b      	beq.n	8008dc4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db0:	f383 8811 	msr	BASEPRI, r3
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	f3bf 8f4f 	dsb	sy
 8008dbc:	61bb      	str	r3, [r7, #24]
}
 8008dbe:	bf00      	nop
 8008dc0:	bf00      	nop
 8008dc2:	e7fd      	b.n	8008dc0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008dc4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d01e      	beq.n	8008e0a <xTaskCreateStatic+0xb2>
 8008dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d01b      	beq.n	8008e0a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008dda:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dde:	2202      	movs	r2, #2
 8008de0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008de4:	2300      	movs	r3, #0
 8008de6:	9303      	str	r3, [sp, #12]
 8008de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dea:	9302      	str	r3, [sp, #8]
 8008dec:	f107 0314 	add.w	r3, r7, #20
 8008df0:	9301      	str	r3, [sp, #4]
 8008df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df4:	9300      	str	r3, [sp, #0]
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	68b9      	ldr	r1, [r7, #8]
 8008dfc:	68f8      	ldr	r0, [r7, #12]
 8008dfe:	f000 f851 	bl	8008ea4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008e04:	f000 f8ee 	bl	8008fe4 <prvAddNewTaskToReadyList>
 8008e08:	e001      	b.n	8008e0e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008e0e:	697b      	ldr	r3, [r7, #20]
	}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3728      	adds	r7, #40	@ 0x28
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b08c      	sub	sp, #48	@ 0x30
 8008e1c:	af04      	add	r7, sp, #16
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	603b      	str	r3, [r7, #0]
 8008e24:	4613      	mov	r3, r2
 8008e26:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008e28:	88fb      	ldrh	r3, [r7, #6]
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f001 f98d 	bl	800a14c <pvPortMalloc>
 8008e32:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00e      	beq.n	8008e58 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008e3a:	20a0      	movs	r0, #160	@ 0xa0
 8008e3c:	f001 f986 	bl	800a14c <pvPortMalloc>
 8008e40:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d003      	beq.n	8008e50 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	697a      	ldr	r2, [r7, #20]
 8008e4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e4e:	e005      	b.n	8008e5c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008e50:	6978      	ldr	r0, [r7, #20]
 8008e52:	f001 fa49 	bl	800a2e8 <vPortFree>
 8008e56:	e001      	b.n	8008e5c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d017      	beq.n	8008e92 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008e6a:	88fa      	ldrh	r2, [r7, #6]
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	9303      	str	r3, [sp, #12]
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	9302      	str	r3, [sp, #8]
 8008e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e76:	9301      	str	r3, [sp, #4]
 8008e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e7a:	9300      	str	r3, [sp, #0]
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	68b9      	ldr	r1, [r7, #8]
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	f000 f80f 	bl	8008ea4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e86:	69f8      	ldr	r0, [r7, #28]
 8008e88:	f000 f8ac 	bl	8008fe4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	61bb      	str	r3, [r7, #24]
 8008e90:	e002      	b.n	8008e98 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008e92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008e96:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008e98:	69bb      	ldr	r3, [r7, #24]
	}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3720      	adds	r7, #32
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
	...

08008ea4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b088      	sub	sp, #32
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]
 8008eb0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	4413      	add	r3, r2
 8008ec2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	f023 0307 	bic.w	r3, r3, #7
 8008eca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008ecc:	69bb      	ldr	r3, [r7, #24]
 8008ece:	f003 0307 	and.w	r3, r3, #7
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00b      	beq.n	8008eee <prvInitialiseNewTask+0x4a>
	__asm volatile
 8008ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eda:	f383 8811 	msr	BASEPRI, r3
 8008ede:	f3bf 8f6f 	isb	sy
 8008ee2:	f3bf 8f4f 	dsb	sy
 8008ee6:	617b      	str	r3, [r7, #20]
}
 8008ee8:	bf00      	nop
 8008eea:	bf00      	nop
 8008eec:	e7fd      	b.n	8008eea <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d01f      	beq.n	8008f34 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	61fb      	str	r3, [r7, #28]
 8008ef8:	e012      	b.n	8008f20 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	69fb      	ldr	r3, [r7, #28]
 8008efe:	4413      	add	r3, r2
 8008f00:	7819      	ldrb	r1, [r3, #0]
 8008f02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	4413      	add	r3, r2
 8008f08:	3334      	adds	r3, #52	@ 0x34
 8008f0a:	460a      	mov	r2, r1
 8008f0c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	4413      	add	r3, r2
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d006      	beq.n	8008f28 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	61fb      	str	r3, [r7, #28]
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	2b0f      	cmp	r3, #15
 8008f24:	d9e9      	bls.n	8008efa <prvInitialiseNewTask+0x56>
 8008f26:	e000      	b.n	8008f2a <prvInitialiseNewTask+0x86>
			{
				break;
 8008f28:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008f32:	e003      	b.n	8008f3c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f36:	2200      	movs	r2, #0
 8008f38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f3e:	2b06      	cmp	r3, #6
 8008f40:	d901      	bls.n	8008f46 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008f42:	2306      	movs	r3, #6
 8008f44:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f50:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f54:	2200      	movs	r2, #0
 8008f56:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f5a:	3304      	adds	r3, #4
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7ff fb82 	bl	8008666 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f64:	3318      	adds	r3, #24
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7ff fb7d 	bl	8008666 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f70:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f74:	f1c3 0207 	rsb	r2, r3, #7
 8008f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f7a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f80:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f84:	2200      	movs	r2, #0
 8008f86:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f94:	334c      	adds	r3, #76	@ 0x4c
 8008f96:	224c      	movs	r2, #76	@ 0x4c
 8008f98:	2100      	movs	r1, #0
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f001 fd8a 	bl	800aab4 <memset>
 8008fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa2:	4a0d      	ldr	r2, [pc, #52]	@ (8008fd8 <prvInitialiseNewTask+0x134>)
 8008fa4:	651a      	str	r2, [r3, #80]	@ 0x50
 8008fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa8:	4a0c      	ldr	r2, [pc, #48]	@ (8008fdc <prvInitialiseNewTask+0x138>)
 8008faa:	655a      	str	r2, [r3, #84]	@ 0x54
 8008fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fae:	4a0c      	ldr	r2, [pc, #48]	@ (8008fe0 <prvInitialiseNewTask+0x13c>)
 8008fb0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008fb2:	683a      	ldr	r2, [r7, #0]
 8008fb4:	68f9      	ldr	r1, [r7, #12]
 8008fb6:	69b8      	ldr	r0, [r7, #24]
 8008fb8:	f000 fe72 	bl	8009ca0 <pxPortInitialiseStack>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d002      	beq.n	8008fce <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fce:	bf00      	nop
 8008fd0:	3720      	adds	r7, #32
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	20005944 	.word	0x20005944
 8008fdc:	200059ac 	.word	0x200059ac
 8008fe0:	20005a14 	.word	0x20005a14

08008fe4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008fec:	f000 ff8c 	bl	8009f08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800909c <prvAddNewTaskToReadyList+0xb8>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	4a29      	ldr	r2, [pc, #164]	@ (800909c <prvAddNewTaskToReadyList+0xb8>)
 8008ff8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008ffa:	4b29      	ldr	r3, [pc, #164]	@ (80090a0 <prvAddNewTaskToReadyList+0xbc>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d109      	bne.n	8009016 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009002:	4a27      	ldr	r2, [pc, #156]	@ (80090a0 <prvAddNewTaskToReadyList+0xbc>)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009008:	4b24      	ldr	r3, [pc, #144]	@ (800909c <prvAddNewTaskToReadyList+0xb8>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2b01      	cmp	r3, #1
 800900e:	d110      	bne.n	8009032 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009010:	f000 fbe4 	bl	80097dc <prvInitialiseTaskLists>
 8009014:	e00d      	b.n	8009032 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009016:	4b23      	ldr	r3, [pc, #140]	@ (80090a4 <prvAddNewTaskToReadyList+0xc0>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d109      	bne.n	8009032 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800901e:	4b20      	ldr	r3, [pc, #128]	@ (80090a0 <prvAddNewTaskToReadyList+0xbc>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009028:	429a      	cmp	r2, r3
 800902a:	d802      	bhi.n	8009032 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800902c:	4a1c      	ldr	r2, [pc, #112]	@ (80090a0 <prvAddNewTaskToReadyList+0xbc>)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009032:	4b1d      	ldr	r3, [pc, #116]	@ (80090a8 <prvAddNewTaskToReadyList+0xc4>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	3301      	adds	r3, #1
 8009038:	4a1b      	ldr	r2, [pc, #108]	@ (80090a8 <prvAddNewTaskToReadyList+0xc4>)
 800903a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009040:	2201      	movs	r2, #1
 8009042:	409a      	lsls	r2, r3
 8009044:	4b19      	ldr	r3, [pc, #100]	@ (80090ac <prvAddNewTaskToReadyList+0xc8>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4313      	orrs	r3, r2
 800904a:	4a18      	ldr	r2, [pc, #96]	@ (80090ac <prvAddNewTaskToReadyList+0xc8>)
 800904c:	6013      	str	r3, [r2, #0]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009052:	4613      	mov	r3, r2
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	4413      	add	r3, r2
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	4a15      	ldr	r2, [pc, #84]	@ (80090b0 <prvAddNewTaskToReadyList+0xcc>)
 800905c:	441a      	add	r2, r3
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	3304      	adds	r3, #4
 8009062:	4619      	mov	r1, r3
 8009064:	4610      	mov	r0, r2
 8009066:	f7ff fb0b 	bl	8008680 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800906a:	f000 ff7f 	bl	8009f6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800906e:	4b0d      	ldr	r3, [pc, #52]	@ (80090a4 <prvAddNewTaskToReadyList+0xc0>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00e      	beq.n	8009094 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009076:	4b0a      	ldr	r3, [pc, #40]	@ (80090a0 <prvAddNewTaskToReadyList+0xbc>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009080:	429a      	cmp	r2, r3
 8009082:	d207      	bcs.n	8009094 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009084:	4b0b      	ldr	r3, [pc, #44]	@ (80090b4 <prvAddNewTaskToReadyList+0xd0>)
 8009086:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800908a:	601a      	str	r2, [r3, #0]
 800908c:	f3bf 8f4f 	dsb	sy
 8009090:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009094:	bf00      	nop
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}
 800909c:	20000ad0 	.word	0x20000ad0
 80090a0:	200009d0 	.word	0x200009d0
 80090a4:	20000adc 	.word	0x20000adc
 80090a8:	20000aec 	.word	0x20000aec
 80090ac:	20000ad8 	.word	0x20000ad8
 80090b0:	200009d4 	.word	0x200009d4
 80090b4:	e000ed04 	.word	0xe000ed04

080090b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80090c0:	2300      	movs	r3, #0
 80090c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d018      	beq.n	80090fc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80090ca:	4b14      	ldr	r3, [pc, #80]	@ (800911c <vTaskDelay+0x64>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00b      	beq.n	80090ea <vTaskDelay+0x32>
	__asm volatile
 80090d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d6:	f383 8811 	msr	BASEPRI, r3
 80090da:	f3bf 8f6f 	isb	sy
 80090de:	f3bf 8f4f 	dsb	sy
 80090e2:	60bb      	str	r3, [r7, #8]
}
 80090e4:	bf00      	nop
 80090e6:	bf00      	nop
 80090e8:	e7fd      	b.n	80090e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80090ea:	f000 f885 	bl	80091f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80090ee:	2100      	movs	r1, #0
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 fd6f 	bl	8009bd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80090f6:	f000 f88d 	bl	8009214 <xTaskResumeAll>
 80090fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d107      	bne.n	8009112 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009102:	4b07      	ldr	r3, [pc, #28]	@ (8009120 <vTaskDelay+0x68>)
 8009104:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009108:	601a      	str	r2, [r3, #0]
 800910a:	f3bf 8f4f 	dsb	sy
 800910e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009112:	bf00      	nop
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	20000af8 	.word	0x20000af8
 8009120:	e000ed04 	.word	0xe000ed04

08009124 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b08a      	sub	sp, #40	@ 0x28
 8009128:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800912a:	2300      	movs	r3, #0
 800912c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800912e:	2300      	movs	r3, #0
 8009130:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009132:	463a      	mov	r2, r7
 8009134:	1d39      	adds	r1, r7, #4
 8009136:	f107 0308 	add.w	r3, r7, #8
 800913a:	4618      	mov	r0, r3
 800913c:	f7f7 fa36 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009140:	6839      	ldr	r1, [r7, #0]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	68ba      	ldr	r2, [r7, #8]
 8009146:	9202      	str	r2, [sp, #8]
 8009148:	9301      	str	r3, [sp, #4]
 800914a:	2300      	movs	r3, #0
 800914c:	9300      	str	r3, [sp, #0]
 800914e:	2300      	movs	r3, #0
 8009150:	460a      	mov	r2, r1
 8009152:	4921      	ldr	r1, [pc, #132]	@ (80091d8 <vTaskStartScheduler+0xb4>)
 8009154:	4821      	ldr	r0, [pc, #132]	@ (80091dc <vTaskStartScheduler+0xb8>)
 8009156:	f7ff fdff 	bl	8008d58 <xTaskCreateStatic>
 800915a:	4603      	mov	r3, r0
 800915c:	4a20      	ldr	r2, [pc, #128]	@ (80091e0 <vTaskStartScheduler+0xbc>)
 800915e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009160:	4b1f      	ldr	r3, [pc, #124]	@ (80091e0 <vTaskStartScheduler+0xbc>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d002      	beq.n	800916e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009168:	2301      	movs	r3, #1
 800916a:	617b      	str	r3, [r7, #20]
 800916c:	e001      	b.n	8009172 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800916e:	2300      	movs	r3, #0
 8009170:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	2b01      	cmp	r3, #1
 8009176:	d11b      	bne.n	80091b0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8009178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800917c:	f383 8811 	msr	BASEPRI, r3
 8009180:	f3bf 8f6f 	isb	sy
 8009184:	f3bf 8f4f 	dsb	sy
 8009188:	613b      	str	r3, [r7, #16]
}
 800918a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800918c:	4b15      	ldr	r3, [pc, #84]	@ (80091e4 <vTaskStartScheduler+0xc0>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	334c      	adds	r3, #76	@ 0x4c
 8009192:	4a15      	ldr	r2, [pc, #84]	@ (80091e8 <vTaskStartScheduler+0xc4>)
 8009194:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009196:	4b15      	ldr	r3, [pc, #84]	@ (80091ec <vTaskStartScheduler+0xc8>)
 8009198:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800919c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800919e:	4b14      	ldr	r3, [pc, #80]	@ (80091f0 <vTaskStartScheduler+0xcc>)
 80091a0:	2201      	movs	r2, #1
 80091a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80091a4:	4b13      	ldr	r3, [pc, #76]	@ (80091f4 <vTaskStartScheduler+0xd0>)
 80091a6:	2200      	movs	r2, #0
 80091a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80091aa:	f000 fe09 	bl	8009dc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80091ae:	e00f      	b.n	80091d0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80091b6:	d10b      	bne.n	80091d0 <vTaskStartScheduler+0xac>
	__asm volatile
 80091b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091bc:	f383 8811 	msr	BASEPRI, r3
 80091c0:	f3bf 8f6f 	isb	sy
 80091c4:	f3bf 8f4f 	dsb	sy
 80091c8:	60fb      	str	r3, [r7, #12]
}
 80091ca:	bf00      	nop
 80091cc:	bf00      	nop
 80091ce:	e7fd      	b.n	80091cc <vTaskStartScheduler+0xa8>
}
 80091d0:	bf00      	nop
 80091d2:	3718      	adds	r7, #24
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	0800bcd8 	.word	0x0800bcd8
 80091dc:	080097ad 	.word	0x080097ad
 80091e0:	20000af4 	.word	0x20000af4
 80091e4:	200009d0 	.word	0x200009d0
 80091e8:	20000024 	.word	0x20000024
 80091ec:	20000af0 	.word	0x20000af0
 80091f0:	20000adc 	.word	0x20000adc
 80091f4:	20000ad4 	.word	0x20000ad4

080091f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80091f8:	b480      	push	{r7}
 80091fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80091fc:	4b04      	ldr	r3, [pc, #16]	@ (8009210 <vTaskSuspendAll+0x18>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	3301      	adds	r3, #1
 8009202:	4a03      	ldr	r2, [pc, #12]	@ (8009210 <vTaskSuspendAll+0x18>)
 8009204:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009206:	bf00      	nop
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr
 8009210:	20000af8 	.word	0x20000af8

08009214 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800921a:	2300      	movs	r3, #0
 800921c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800921e:	2300      	movs	r3, #0
 8009220:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009222:	4b42      	ldr	r3, [pc, #264]	@ (800932c <xTaskResumeAll+0x118>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d10b      	bne.n	8009242 <xTaskResumeAll+0x2e>
	__asm volatile
 800922a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800922e:	f383 8811 	msr	BASEPRI, r3
 8009232:	f3bf 8f6f 	isb	sy
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	603b      	str	r3, [r7, #0]
}
 800923c:	bf00      	nop
 800923e:	bf00      	nop
 8009240:	e7fd      	b.n	800923e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009242:	f000 fe61 	bl	8009f08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009246:	4b39      	ldr	r3, [pc, #228]	@ (800932c <xTaskResumeAll+0x118>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	3b01      	subs	r3, #1
 800924c:	4a37      	ldr	r2, [pc, #220]	@ (800932c <xTaskResumeAll+0x118>)
 800924e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009250:	4b36      	ldr	r3, [pc, #216]	@ (800932c <xTaskResumeAll+0x118>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d161      	bne.n	800931c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009258:	4b35      	ldr	r3, [pc, #212]	@ (8009330 <xTaskResumeAll+0x11c>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d05d      	beq.n	800931c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009260:	e02e      	b.n	80092c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009262:	4b34      	ldr	r3, [pc, #208]	@ (8009334 <xTaskResumeAll+0x120>)
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	3318      	adds	r3, #24
 800926e:	4618      	mov	r0, r3
 8009270:	f7ff fa63 	bl	800873a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	3304      	adds	r3, #4
 8009278:	4618      	mov	r0, r3
 800927a:	f7ff fa5e 	bl	800873a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009282:	2201      	movs	r2, #1
 8009284:	409a      	lsls	r2, r3
 8009286:	4b2c      	ldr	r3, [pc, #176]	@ (8009338 <xTaskResumeAll+0x124>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4313      	orrs	r3, r2
 800928c:	4a2a      	ldr	r2, [pc, #168]	@ (8009338 <xTaskResumeAll+0x124>)
 800928e:	6013      	str	r3, [r2, #0]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009294:	4613      	mov	r3, r2
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	4413      	add	r3, r2
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	4a27      	ldr	r2, [pc, #156]	@ (800933c <xTaskResumeAll+0x128>)
 800929e:	441a      	add	r2, r3
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	3304      	adds	r3, #4
 80092a4:	4619      	mov	r1, r3
 80092a6:	4610      	mov	r0, r2
 80092a8:	f7ff f9ea 	bl	8008680 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092b0:	4b23      	ldr	r3, [pc, #140]	@ (8009340 <xTaskResumeAll+0x12c>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d302      	bcc.n	80092c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80092ba:	4b22      	ldr	r3, [pc, #136]	@ (8009344 <xTaskResumeAll+0x130>)
 80092bc:	2201      	movs	r2, #1
 80092be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092c0:	4b1c      	ldr	r3, [pc, #112]	@ (8009334 <xTaskResumeAll+0x120>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d1cc      	bne.n	8009262 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d001      	beq.n	80092d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80092ce:	f000 fb29 	bl	8009924 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80092d2:	4b1d      	ldr	r3, [pc, #116]	@ (8009348 <xTaskResumeAll+0x134>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d010      	beq.n	8009300 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80092de:	f000 f837 	bl	8009350 <xTaskIncrementTick>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d002      	beq.n	80092ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80092e8:	4b16      	ldr	r3, [pc, #88]	@ (8009344 <xTaskResumeAll+0x130>)
 80092ea:	2201      	movs	r2, #1
 80092ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	3b01      	subs	r3, #1
 80092f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d1f1      	bne.n	80092de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80092fa:	4b13      	ldr	r3, [pc, #76]	@ (8009348 <xTaskResumeAll+0x134>)
 80092fc:	2200      	movs	r2, #0
 80092fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009300:	4b10      	ldr	r3, [pc, #64]	@ (8009344 <xTaskResumeAll+0x130>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d009      	beq.n	800931c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009308:	2301      	movs	r3, #1
 800930a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800930c:	4b0f      	ldr	r3, [pc, #60]	@ (800934c <xTaskResumeAll+0x138>)
 800930e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009312:	601a      	str	r2, [r3, #0]
 8009314:	f3bf 8f4f 	dsb	sy
 8009318:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800931c:	f000 fe26 	bl	8009f6c <vPortExitCritical>

	return xAlreadyYielded;
 8009320:	68bb      	ldr	r3, [r7, #8]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	20000af8 	.word	0x20000af8
 8009330:	20000ad0 	.word	0x20000ad0
 8009334:	20000a90 	.word	0x20000a90
 8009338:	20000ad8 	.word	0x20000ad8
 800933c:	200009d4 	.word	0x200009d4
 8009340:	200009d0 	.word	0x200009d0
 8009344:	20000ae4 	.word	0x20000ae4
 8009348:	20000ae0 	.word	0x20000ae0
 800934c:	e000ed04 	.word	0xe000ed04

08009350 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009356:	2300      	movs	r3, #0
 8009358:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800935a:	4b4f      	ldr	r3, [pc, #316]	@ (8009498 <xTaskIncrementTick+0x148>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	f040 808f 	bne.w	8009482 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009364:	4b4d      	ldr	r3, [pc, #308]	@ (800949c <xTaskIncrementTick+0x14c>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	3301      	adds	r3, #1
 800936a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800936c:	4a4b      	ldr	r2, [pc, #300]	@ (800949c <xTaskIncrementTick+0x14c>)
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d121      	bne.n	80093bc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009378:	4b49      	ldr	r3, [pc, #292]	@ (80094a0 <xTaskIncrementTick+0x150>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d00b      	beq.n	800939a <xTaskIncrementTick+0x4a>
	__asm volatile
 8009382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009386:	f383 8811 	msr	BASEPRI, r3
 800938a:	f3bf 8f6f 	isb	sy
 800938e:	f3bf 8f4f 	dsb	sy
 8009392:	603b      	str	r3, [r7, #0]
}
 8009394:	bf00      	nop
 8009396:	bf00      	nop
 8009398:	e7fd      	b.n	8009396 <xTaskIncrementTick+0x46>
 800939a:	4b41      	ldr	r3, [pc, #260]	@ (80094a0 <xTaskIncrementTick+0x150>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	60fb      	str	r3, [r7, #12]
 80093a0:	4b40      	ldr	r3, [pc, #256]	@ (80094a4 <xTaskIncrementTick+0x154>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a3e      	ldr	r2, [pc, #248]	@ (80094a0 <xTaskIncrementTick+0x150>)
 80093a6:	6013      	str	r3, [r2, #0]
 80093a8:	4a3e      	ldr	r2, [pc, #248]	@ (80094a4 <xTaskIncrementTick+0x154>)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6013      	str	r3, [r2, #0]
 80093ae:	4b3e      	ldr	r3, [pc, #248]	@ (80094a8 <xTaskIncrementTick+0x158>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	3301      	adds	r3, #1
 80093b4:	4a3c      	ldr	r2, [pc, #240]	@ (80094a8 <xTaskIncrementTick+0x158>)
 80093b6:	6013      	str	r3, [r2, #0]
 80093b8:	f000 fab4 	bl	8009924 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80093bc:	4b3b      	ldr	r3, [pc, #236]	@ (80094ac <xTaskIncrementTick+0x15c>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	693a      	ldr	r2, [r7, #16]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d348      	bcc.n	8009458 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093c6:	4b36      	ldr	r3, [pc, #216]	@ (80094a0 <xTaskIncrementTick+0x150>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d104      	bne.n	80093da <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093d0:	4b36      	ldr	r3, [pc, #216]	@ (80094ac <xTaskIncrementTick+0x15c>)
 80093d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80093d6:	601a      	str	r2, [r3, #0]
					break;
 80093d8:	e03e      	b.n	8009458 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093da:	4b31      	ldr	r3, [pc, #196]	@ (80094a0 <xTaskIncrementTick+0x150>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80093ea:	693a      	ldr	r2, [r7, #16]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d203      	bcs.n	80093fa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80093f2:	4a2e      	ldr	r2, [pc, #184]	@ (80094ac <xTaskIncrementTick+0x15c>)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80093f8:	e02e      	b.n	8009458 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	3304      	adds	r3, #4
 80093fe:	4618      	mov	r0, r3
 8009400:	f7ff f99b 	bl	800873a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009408:	2b00      	cmp	r3, #0
 800940a:	d004      	beq.n	8009416 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	3318      	adds	r3, #24
 8009410:	4618      	mov	r0, r3
 8009412:	f7ff f992 	bl	800873a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800941a:	2201      	movs	r2, #1
 800941c:	409a      	lsls	r2, r3
 800941e:	4b24      	ldr	r3, [pc, #144]	@ (80094b0 <xTaskIncrementTick+0x160>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4313      	orrs	r3, r2
 8009424:	4a22      	ldr	r2, [pc, #136]	@ (80094b0 <xTaskIncrementTick+0x160>)
 8009426:	6013      	str	r3, [r2, #0]
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800942c:	4613      	mov	r3, r2
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	4413      	add	r3, r2
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	4a1f      	ldr	r2, [pc, #124]	@ (80094b4 <xTaskIncrementTick+0x164>)
 8009436:	441a      	add	r2, r3
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	3304      	adds	r3, #4
 800943c:	4619      	mov	r1, r3
 800943e:	4610      	mov	r0, r2
 8009440:	f7ff f91e 	bl	8008680 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009448:	4b1b      	ldr	r3, [pc, #108]	@ (80094b8 <xTaskIncrementTick+0x168>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800944e:	429a      	cmp	r2, r3
 8009450:	d3b9      	bcc.n	80093c6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009452:	2301      	movs	r3, #1
 8009454:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009456:	e7b6      	b.n	80093c6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009458:	4b17      	ldr	r3, [pc, #92]	@ (80094b8 <xTaskIncrementTick+0x168>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800945e:	4915      	ldr	r1, [pc, #84]	@ (80094b4 <xTaskIncrementTick+0x164>)
 8009460:	4613      	mov	r3, r2
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	4413      	add	r3, r2
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	440b      	add	r3, r1
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2b01      	cmp	r3, #1
 800946e:	d901      	bls.n	8009474 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009470:	2301      	movs	r3, #1
 8009472:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009474:	4b11      	ldr	r3, [pc, #68]	@ (80094bc <xTaskIncrementTick+0x16c>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d007      	beq.n	800948c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800947c:	2301      	movs	r3, #1
 800947e:	617b      	str	r3, [r7, #20]
 8009480:	e004      	b.n	800948c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009482:	4b0f      	ldr	r3, [pc, #60]	@ (80094c0 <xTaskIncrementTick+0x170>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	3301      	adds	r3, #1
 8009488:	4a0d      	ldr	r2, [pc, #52]	@ (80094c0 <xTaskIncrementTick+0x170>)
 800948a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800948c:	697b      	ldr	r3, [r7, #20]
}
 800948e:	4618      	mov	r0, r3
 8009490:	3718      	adds	r7, #24
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	20000af8 	.word	0x20000af8
 800949c:	20000ad4 	.word	0x20000ad4
 80094a0:	20000a88 	.word	0x20000a88
 80094a4:	20000a8c 	.word	0x20000a8c
 80094a8:	20000ae8 	.word	0x20000ae8
 80094ac:	20000af0 	.word	0x20000af0
 80094b0:	20000ad8 	.word	0x20000ad8
 80094b4:	200009d4 	.word	0x200009d4
 80094b8:	200009d0 	.word	0x200009d0
 80094bc:	20000ae4 	.word	0x20000ae4
 80094c0:	20000ae0 	.word	0x20000ae0

080094c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80094c4:	b480      	push	{r7}
 80094c6:	b087      	sub	sp, #28
 80094c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80094ca:	4b2a      	ldr	r3, [pc, #168]	@ (8009574 <vTaskSwitchContext+0xb0>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d003      	beq.n	80094da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80094d2:	4b29      	ldr	r3, [pc, #164]	@ (8009578 <vTaskSwitchContext+0xb4>)
 80094d4:	2201      	movs	r2, #1
 80094d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80094d8:	e045      	b.n	8009566 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80094da:	4b27      	ldr	r3, [pc, #156]	@ (8009578 <vTaskSwitchContext+0xb4>)
 80094dc:	2200      	movs	r2, #0
 80094de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094e0:	4b26      	ldr	r3, [pc, #152]	@ (800957c <vTaskSwitchContext+0xb8>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	fab3 f383 	clz	r3, r3
 80094ec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80094ee:	7afb      	ldrb	r3, [r7, #11]
 80094f0:	f1c3 031f 	rsb	r3, r3, #31
 80094f4:	617b      	str	r3, [r7, #20]
 80094f6:	4922      	ldr	r1, [pc, #136]	@ (8009580 <vTaskSwitchContext+0xbc>)
 80094f8:	697a      	ldr	r2, [r7, #20]
 80094fa:	4613      	mov	r3, r2
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	4413      	add	r3, r2
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	440b      	add	r3, r1
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10b      	bne.n	8009522 <vTaskSwitchContext+0x5e>
	__asm volatile
 800950a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800950e:	f383 8811 	msr	BASEPRI, r3
 8009512:	f3bf 8f6f 	isb	sy
 8009516:	f3bf 8f4f 	dsb	sy
 800951a:	607b      	str	r3, [r7, #4]
}
 800951c:	bf00      	nop
 800951e:	bf00      	nop
 8009520:	e7fd      	b.n	800951e <vTaskSwitchContext+0x5a>
 8009522:	697a      	ldr	r2, [r7, #20]
 8009524:	4613      	mov	r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	4413      	add	r3, r2
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	4a14      	ldr	r2, [pc, #80]	@ (8009580 <vTaskSwitchContext+0xbc>)
 800952e:	4413      	add	r3, r2
 8009530:	613b      	str	r3, [r7, #16]
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	685a      	ldr	r2, [r3, #4]
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	605a      	str	r2, [r3, #4]
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	685a      	ldr	r2, [r3, #4]
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	3308      	adds	r3, #8
 8009544:	429a      	cmp	r2, r3
 8009546:	d104      	bne.n	8009552 <vTaskSwitchContext+0x8e>
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	685a      	ldr	r2, [r3, #4]
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	605a      	str	r2, [r3, #4]
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	4a0a      	ldr	r2, [pc, #40]	@ (8009584 <vTaskSwitchContext+0xc0>)
 800955a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800955c:	4b09      	ldr	r3, [pc, #36]	@ (8009584 <vTaskSwitchContext+0xc0>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	334c      	adds	r3, #76	@ 0x4c
 8009562:	4a09      	ldr	r2, [pc, #36]	@ (8009588 <vTaskSwitchContext+0xc4>)
 8009564:	6013      	str	r3, [r2, #0]
}
 8009566:	bf00      	nop
 8009568:	371c      	adds	r7, #28
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr
 8009572:	bf00      	nop
 8009574:	20000af8 	.word	0x20000af8
 8009578:	20000ae4 	.word	0x20000ae4
 800957c:	20000ad8 	.word	0x20000ad8
 8009580:	200009d4 	.word	0x200009d4
 8009584:	200009d0 	.word	0x200009d0
 8009588:	20000024 	.word	0x20000024

0800958c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d10b      	bne.n	80095b4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800959c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a0:	f383 8811 	msr	BASEPRI, r3
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	f3bf 8f4f 	dsb	sy
 80095ac:	60fb      	str	r3, [r7, #12]
}
 80095ae:	bf00      	nop
 80095b0:	bf00      	nop
 80095b2:	e7fd      	b.n	80095b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095b4:	4b07      	ldr	r3, [pc, #28]	@ (80095d4 <vTaskPlaceOnEventList+0x48>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	3318      	adds	r3, #24
 80095ba:	4619      	mov	r1, r3
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f7ff f883 	bl	80086c8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80095c2:	2101      	movs	r1, #1
 80095c4:	6838      	ldr	r0, [r7, #0]
 80095c6:	f000 fb05 	bl	8009bd4 <prvAddCurrentTaskToDelayedList>
}
 80095ca:	bf00      	nop
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	200009d0 	.word	0x200009d0

080095d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b086      	sub	sp, #24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d10b      	bne.n	8009606 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80095ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095f2:	f383 8811 	msr	BASEPRI, r3
 80095f6:	f3bf 8f6f 	isb	sy
 80095fa:	f3bf 8f4f 	dsb	sy
 80095fe:	60fb      	str	r3, [r7, #12]
}
 8009600:	bf00      	nop
 8009602:	bf00      	nop
 8009604:	e7fd      	b.n	8009602 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	3318      	adds	r3, #24
 800960a:	4618      	mov	r0, r3
 800960c:	f7ff f895 	bl	800873a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009610:	4b1d      	ldr	r3, [pc, #116]	@ (8009688 <xTaskRemoveFromEventList+0xb0>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d11c      	bne.n	8009652 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	3304      	adds	r3, #4
 800961c:	4618      	mov	r0, r3
 800961e:	f7ff f88c 	bl	800873a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009626:	2201      	movs	r2, #1
 8009628:	409a      	lsls	r2, r3
 800962a:	4b18      	ldr	r3, [pc, #96]	@ (800968c <xTaskRemoveFromEventList+0xb4>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4313      	orrs	r3, r2
 8009630:	4a16      	ldr	r2, [pc, #88]	@ (800968c <xTaskRemoveFromEventList+0xb4>)
 8009632:	6013      	str	r3, [r2, #0]
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009638:	4613      	mov	r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4413      	add	r3, r2
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	4a13      	ldr	r2, [pc, #76]	@ (8009690 <xTaskRemoveFromEventList+0xb8>)
 8009642:	441a      	add	r2, r3
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	3304      	adds	r3, #4
 8009648:	4619      	mov	r1, r3
 800964a:	4610      	mov	r0, r2
 800964c:	f7ff f818 	bl	8008680 <vListInsertEnd>
 8009650:	e005      	b.n	800965e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	3318      	adds	r3, #24
 8009656:	4619      	mov	r1, r3
 8009658:	480e      	ldr	r0, [pc, #56]	@ (8009694 <xTaskRemoveFromEventList+0xbc>)
 800965a:	f7ff f811 	bl	8008680 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009662:	4b0d      	ldr	r3, [pc, #52]	@ (8009698 <xTaskRemoveFromEventList+0xc0>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009668:	429a      	cmp	r2, r3
 800966a:	d905      	bls.n	8009678 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800966c:	2301      	movs	r3, #1
 800966e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009670:	4b0a      	ldr	r3, [pc, #40]	@ (800969c <xTaskRemoveFromEventList+0xc4>)
 8009672:	2201      	movs	r2, #1
 8009674:	601a      	str	r2, [r3, #0]
 8009676:	e001      	b.n	800967c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009678:	2300      	movs	r3, #0
 800967a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800967c:	697b      	ldr	r3, [r7, #20]
}
 800967e:	4618      	mov	r0, r3
 8009680:	3718      	adds	r7, #24
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	20000af8 	.word	0x20000af8
 800968c:	20000ad8 	.word	0x20000ad8
 8009690:	200009d4 	.word	0x200009d4
 8009694:	20000a90 	.word	0x20000a90
 8009698:	200009d0 	.word	0x200009d0
 800969c:	20000ae4 	.word	0x20000ae4

080096a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80096a8:	4b06      	ldr	r3, [pc, #24]	@ (80096c4 <vTaskInternalSetTimeOutState+0x24>)
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80096b0:	4b05      	ldr	r3, [pc, #20]	@ (80096c8 <vTaskInternalSetTimeOutState+0x28>)
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	605a      	str	r2, [r3, #4]
}
 80096b8:	bf00      	nop
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr
 80096c4:	20000ae8 	.word	0x20000ae8
 80096c8:	20000ad4 	.word	0x20000ad4

080096cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b088      	sub	sp, #32
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10b      	bne.n	80096f4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80096dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e0:	f383 8811 	msr	BASEPRI, r3
 80096e4:	f3bf 8f6f 	isb	sy
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	613b      	str	r3, [r7, #16]
}
 80096ee:	bf00      	nop
 80096f0:	bf00      	nop
 80096f2:	e7fd      	b.n	80096f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d10b      	bne.n	8009712 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80096fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096fe:	f383 8811 	msr	BASEPRI, r3
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	f3bf 8f4f 	dsb	sy
 800970a:	60fb      	str	r3, [r7, #12]
}
 800970c:	bf00      	nop
 800970e:	bf00      	nop
 8009710:	e7fd      	b.n	800970e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009712:	f000 fbf9 	bl	8009f08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009716:	4b1d      	ldr	r3, [pc, #116]	@ (800978c <xTaskCheckForTimeOut+0xc0>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	69ba      	ldr	r2, [r7, #24]
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800972e:	d102      	bne.n	8009736 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009730:	2300      	movs	r3, #0
 8009732:	61fb      	str	r3, [r7, #28]
 8009734:	e023      	b.n	800977e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	4b15      	ldr	r3, [pc, #84]	@ (8009790 <xTaskCheckForTimeOut+0xc4>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	429a      	cmp	r2, r3
 8009740:	d007      	beq.n	8009752 <xTaskCheckForTimeOut+0x86>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	69ba      	ldr	r2, [r7, #24]
 8009748:	429a      	cmp	r2, r3
 800974a:	d302      	bcc.n	8009752 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800974c:	2301      	movs	r3, #1
 800974e:	61fb      	str	r3, [r7, #28]
 8009750:	e015      	b.n	800977e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	697a      	ldr	r2, [r7, #20]
 8009758:	429a      	cmp	r2, r3
 800975a:	d20b      	bcs.n	8009774 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	1ad2      	subs	r2, r2, r3
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f7ff ff99 	bl	80096a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800976e:	2300      	movs	r3, #0
 8009770:	61fb      	str	r3, [r7, #28]
 8009772:	e004      	b.n	800977e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	2200      	movs	r2, #0
 8009778:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800977a:	2301      	movs	r3, #1
 800977c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800977e:	f000 fbf5 	bl	8009f6c <vPortExitCritical>

	return xReturn;
 8009782:	69fb      	ldr	r3, [r7, #28]
}
 8009784:	4618      	mov	r0, r3
 8009786:	3720      	adds	r7, #32
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	20000ad4 	.word	0x20000ad4
 8009790:	20000ae8 	.word	0x20000ae8

08009794 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009794:	b480      	push	{r7}
 8009796:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009798:	4b03      	ldr	r3, [pc, #12]	@ (80097a8 <vTaskMissedYield+0x14>)
 800979a:	2201      	movs	r2, #1
 800979c:	601a      	str	r2, [r3, #0]
}
 800979e:	bf00      	nop
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr
 80097a8:	20000ae4 	.word	0x20000ae4

080097ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80097b4:	f000 f852 	bl	800985c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80097b8:	4b06      	ldr	r3, [pc, #24]	@ (80097d4 <prvIdleTask+0x28>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d9f9      	bls.n	80097b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80097c0:	4b05      	ldr	r3, [pc, #20]	@ (80097d8 <prvIdleTask+0x2c>)
 80097c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097c6:	601a      	str	r2, [r3, #0]
 80097c8:	f3bf 8f4f 	dsb	sy
 80097cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80097d0:	e7f0      	b.n	80097b4 <prvIdleTask+0x8>
 80097d2:	bf00      	nop
 80097d4:	200009d4 	.word	0x200009d4
 80097d8:	e000ed04 	.word	0xe000ed04

080097dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097e2:	2300      	movs	r3, #0
 80097e4:	607b      	str	r3, [r7, #4]
 80097e6:	e00c      	b.n	8009802 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	4613      	mov	r3, r2
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	4413      	add	r3, r2
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	4a12      	ldr	r2, [pc, #72]	@ (800983c <prvInitialiseTaskLists+0x60>)
 80097f4:	4413      	add	r3, r2
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7fe ff15 	bl	8008626 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	3301      	adds	r3, #1
 8009800:	607b      	str	r3, [r7, #4]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2b06      	cmp	r3, #6
 8009806:	d9ef      	bls.n	80097e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009808:	480d      	ldr	r0, [pc, #52]	@ (8009840 <prvInitialiseTaskLists+0x64>)
 800980a:	f7fe ff0c 	bl	8008626 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800980e:	480d      	ldr	r0, [pc, #52]	@ (8009844 <prvInitialiseTaskLists+0x68>)
 8009810:	f7fe ff09 	bl	8008626 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009814:	480c      	ldr	r0, [pc, #48]	@ (8009848 <prvInitialiseTaskLists+0x6c>)
 8009816:	f7fe ff06 	bl	8008626 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800981a:	480c      	ldr	r0, [pc, #48]	@ (800984c <prvInitialiseTaskLists+0x70>)
 800981c:	f7fe ff03 	bl	8008626 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009820:	480b      	ldr	r0, [pc, #44]	@ (8009850 <prvInitialiseTaskLists+0x74>)
 8009822:	f7fe ff00 	bl	8008626 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009826:	4b0b      	ldr	r3, [pc, #44]	@ (8009854 <prvInitialiseTaskLists+0x78>)
 8009828:	4a05      	ldr	r2, [pc, #20]	@ (8009840 <prvInitialiseTaskLists+0x64>)
 800982a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800982c:	4b0a      	ldr	r3, [pc, #40]	@ (8009858 <prvInitialiseTaskLists+0x7c>)
 800982e:	4a05      	ldr	r2, [pc, #20]	@ (8009844 <prvInitialiseTaskLists+0x68>)
 8009830:	601a      	str	r2, [r3, #0]
}
 8009832:	bf00      	nop
 8009834:	3708      	adds	r7, #8
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	200009d4 	.word	0x200009d4
 8009840:	20000a60 	.word	0x20000a60
 8009844:	20000a74 	.word	0x20000a74
 8009848:	20000a90 	.word	0x20000a90
 800984c:	20000aa4 	.word	0x20000aa4
 8009850:	20000abc 	.word	0x20000abc
 8009854:	20000a88 	.word	0x20000a88
 8009858:	20000a8c 	.word	0x20000a8c

0800985c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009862:	e019      	b.n	8009898 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009864:	f000 fb50 	bl	8009f08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009868:	4b10      	ldr	r3, [pc, #64]	@ (80098ac <prvCheckTasksWaitingTermination+0x50>)
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	3304      	adds	r3, #4
 8009874:	4618      	mov	r0, r3
 8009876:	f7fe ff60 	bl	800873a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800987a:	4b0d      	ldr	r3, [pc, #52]	@ (80098b0 <prvCheckTasksWaitingTermination+0x54>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	3b01      	subs	r3, #1
 8009880:	4a0b      	ldr	r2, [pc, #44]	@ (80098b0 <prvCheckTasksWaitingTermination+0x54>)
 8009882:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009884:	4b0b      	ldr	r3, [pc, #44]	@ (80098b4 <prvCheckTasksWaitingTermination+0x58>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	3b01      	subs	r3, #1
 800988a:	4a0a      	ldr	r2, [pc, #40]	@ (80098b4 <prvCheckTasksWaitingTermination+0x58>)
 800988c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800988e:	f000 fb6d 	bl	8009f6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 f810 	bl	80098b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009898:	4b06      	ldr	r3, [pc, #24]	@ (80098b4 <prvCheckTasksWaitingTermination+0x58>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1e1      	bne.n	8009864 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80098a0:	bf00      	nop
 80098a2:	bf00      	nop
 80098a4:	3708      	adds	r7, #8
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop
 80098ac:	20000aa4 	.word	0x20000aa4
 80098b0:	20000ad0 	.word	0x20000ad0
 80098b4:	20000ab8 	.word	0x20000ab8

080098b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	334c      	adds	r3, #76	@ 0x4c
 80098c4:	4618      	mov	r0, r3
 80098c6:	f001 f90d 	bl	800aae4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d108      	bne.n	80098e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098d8:	4618      	mov	r0, r3
 80098da:	f000 fd05 	bl	800a2e8 <vPortFree>
				vPortFree( pxTCB );
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 fd02 	bl	800a2e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80098e4:	e019      	b.n	800991a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d103      	bne.n	80098f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 fcf9 	bl	800a2e8 <vPortFree>
	}
 80098f6:	e010      	b.n	800991a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d00b      	beq.n	800991a <prvDeleteTCB+0x62>
	__asm volatile
 8009902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009906:	f383 8811 	msr	BASEPRI, r3
 800990a:	f3bf 8f6f 	isb	sy
 800990e:	f3bf 8f4f 	dsb	sy
 8009912:	60fb      	str	r3, [r7, #12]
}
 8009914:	bf00      	nop
 8009916:	bf00      	nop
 8009918:	e7fd      	b.n	8009916 <prvDeleteTCB+0x5e>
	}
 800991a:	bf00      	nop
 800991c:	3710      	adds	r7, #16
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
	...

08009924 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800992a:	4b0c      	ldr	r3, [pc, #48]	@ (800995c <prvResetNextTaskUnblockTime+0x38>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d104      	bne.n	800993e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009934:	4b0a      	ldr	r3, [pc, #40]	@ (8009960 <prvResetNextTaskUnblockTime+0x3c>)
 8009936:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800993a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800993c:	e008      	b.n	8009950 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800993e:	4b07      	ldr	r3, [pc, #28]	@ (800995c <prvResetNextTaskUnblockTime+0x38>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	4a04      	ldr	r2, [pc, #16]	@ (8009960 <prvResetNextTaskUnblockTime+0x3c>)
 800994e:	6013      	str	r3, [r2, #0]
}
 8009950:	bf00      	nop
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr
 800995c:	20000a88 	.word	0x20000a88
 8009960:	20000af0 	.word	0x20000af0

08009964 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800996a:	4b0b      	ldr	r3, [pc, #44]	@ (8009998 <xTaskGetSchedulerState+0x34>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d102      	bne.n	8009978 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009972:	2301      	movs	r3, #1
 8009974:	607b      	str	r3, [r7, #4]
 8009976:	e008      	b.n	800998a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009978:	4b08      	ldr	r3, [pc, #32]	@ (800999c <xTaskGetSchedulerState+0x38>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d102      	bne.n	8009986 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009980:	2302      	movs	r3, #2
 8009982:	607b      	str	r3, [r7, #4]
 8009984:	e001      	b.n	800998a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009986:	2300      	movs	r3, #0
 8009988:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800998a:	687b      	ldr	r3, [r7, #4]
	}
 800998c:	4618      	mov	r0, r3
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr
 8009998:	20000adc 	.word	0x20000adc
 800999c:	20000af8 	.word	0x20000af8

080099a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80099ac:	2300      	movs	r3, #0
 80099ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d05e      	beq.n	8009a74 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099ba:	4b31      	ldr	r3, [pc, #196]	@ (8009a80 <xTaskPriorityInherit+0xe0>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d24e      	bcs.n	8009a62 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	699b      	ldr	r3, [r3, #24]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	db06      	blt.n	80099da <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099cc:	4b2c      	ldr	r3, [pc, #176]	@ (8009a80 <xTaskPriorityInherit+0xe0>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099d2:	f1c3 0207 	rsb	r2, r3, #7
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	6959      	ldr	r1, [r3, #20]
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099e2:	4613      	mov	r3, r2
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4413      	add	r3, r2
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	4a26      	ldr	r2, [pc, #152]	@ (8009a84 <xTaskPriorityInherit+0xe4>)
 80099ec:	4413      	add	r3, r2
 80099ee:	4299      	cmp	r1, r3
 80099f0:	d12f      	bne.n	8009a52 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	3304      	adds	r3, #4
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7fe fe9f 	bl	800873a <uxListRemove>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d10a      	bne.n	8009a18 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a06:	2201      	movs	r2, #1
 8009a08:	fa02 f303 	lsl.w	r3, r2, r3
 8009a0c:	43da      	mvns	r2, r3
 8009a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8009a88 <xTaskPriorityInherit+0xe8>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4013      	ands	r3, r2
 8009a14:	4a1c      	ldr	r2, [pc, #112]	@ (8009a88 <xTaskPriorityInherit+0xe8>)
 8009a16:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009a18:	4b19      	ldr	r3, [pc, #100]	@ (8009a80 <xTaskPriorityInherit+0xe0>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a26:	2201      	movs	r2, #1
 8009a28:	409a      	lsls	r2, r3
 8009a2a:	4b17      	ldr	r3, [pc, #92]	@ (8009a88 <xTaskPriorityInherit+0xe8>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	4a15      	ldr	r2, [pc, #84]	@ (8009a88 <xTaskPriorityInherit+0xe8>)
 8009a32:	6013      	str	r3, [r2, #0]
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a38:	4613      	mov	r3, r2
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	4413      	add	r3, r2
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	4a10      	ldr	r2, [pc, #64]	@ (8009a84 <xTaskPriorityInherit+0xe4>)
 8009a42:	441a      	add	r2, r3
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	3304      	adds	r3, #4
 8009a48:	4619      	mov	r1, r3
 8009a4a:	4610      	mov	r0, r2
 8009a4c:	f7fe fe18 	bl	8008680 <vListInsertEnd>
 8009a50:	e004      	b.n	8009a5c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009a52:	4b0b      	ldr	r3, [pc, #44]	@ (8009a80 <xTaskPriorityInherit+0xe0>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	60fb      	str	r3, [r7, #12]
 8009a60:	e008      	b.n	8009a74 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a66:	4b06      	ldr	r3, [pc, #24]	@ (8009a80 <xTaskPriorityInherit+0xe0>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d201      	bcs.n	8009a74 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009a70:	2301      	movs	r3, #1
 8009a72:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a74:	68fb      	ldr	r3, [r7, #12]
	}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	200009d0 	.word	0x200009d0
 8009a84:	200009d4 	.word	0x200009d4
 8009a88:	20000ad8 	.word	0x20000ad8

08009a8c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b088      	sub	sp, #32
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d079      	beq.n	8009b98 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009aa4:	69bb      	ldr	r3, [r7, #24]
 8009aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d10b      	bne.n	8009ac4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ab0:	f383 8811 	msr	BASEPRI, r3
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	60fb      	str	r3, [r7, #12]
}
 8009abe:	bf00      	nop
 8009ac0:	bf00      	nop
 8009ac2:	e7fd      	b.n	8009ac0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ac8:	683a      	ldr	r2, [r7, #0]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d902      	bls.n	8009ad4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	61fb      	str	r3, [r7, #28]
 8009ad2:	e002      	b.n	8009ada <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ad8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009ada:	69bb      	ldr	r3, [r7, #24]
 8009adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ade:	69fa      	ldr	r2, [r7, #28]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d059      	beq.n	8009b98 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009ae4:	69bb      	ldr	r3, [r7, #24]
 8009ae6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ae8:	697a      	ldr	r2, [r7, #20]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d154      	bne.n	8009b98 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009aee:	4b2c      	ldr	r3, [pc, #176]	@ (8009ba0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	69ba      	ldr	r2, [r7, #24]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d10b      	bne.n	8009b10 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009afc:	f383 8811 	msr	BASEPRI, r3
 8009b00:	f3bf 8f6f 	isb	sy
 8009b04:	f3bf 8f4f 	dsb	sy
 8009b08:	60bb      	str	r3, [r7, #8]
}
 8009b0a:	bf00      	nop
 8009b0c:	bf00      	nop
 8009b0e:	e7fd      	b.n	8009b0c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009b10:	69bb      	ldr	r3, [r7, #24]
 8009b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b14:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	69fa      	ldr	r2, [r7, #28]
 8009b1a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	699b      	ldr	r3, [r3, #24]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	db04      	blt.n	8009b2e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	f1c3 0207 	rsb	r2, r3, #7
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	6959      	ldr	r1, [r3, #20]
 8009b32:	693a      	ldr	r2, [r7, #16]
 8009b34:	4613      	mov	r3, r2
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	4413      	add	r3, r2
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	4a19      	ldr	r2, [pc, #100]	@ (8009ba4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009b3e:	4413      	add	r3, r2
 8009b40:	4299      	cmp	r1, r3
 8009b42:	d129      	bne.n	8009b98 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	3304      	adds	r3, #4
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7fe fdf6 	bl	800873a <uxListRemove>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d10a      	bne.n	8009b6a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b58:	2201      	movs	r2, #1
 8009b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b5e:	43da      	mvns	r2, r3
 8009b60:	4b11      	ldr	r3, [pc, #68]	@ (8009ba8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4013      	ands	r3, r2
 8009b66:	4a10      	ldr	r2, [pc, #64]	@ (8009ba8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009b68:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009b6a:	69bb      	ldr	r3, [r7, #24]
 8009b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b6e:	2201      	movs	r2, #1
 8009b70:	409a      	lsls	r2, r3
 8009b72:	4b0d      	ldr	r3, [pc, #52]	@ (8009ba8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4313      	orrs	r3, r2
 8009b78:	4a0b      	ldr	r2, [pc, #44]	@ (8009ba8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009b7a:	6013      	str	r3, [r2, #0]
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b80:	4613      	mov	r3, r2
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	4413      	add	r3, r2
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	4a06      	ldr	r2, [pc, #24]	@ (8009ba4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009b8a:	441a      	add	r2, r3
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	3304      	adds	r3, #4
 8009b90:	4619      	mov	r1, r3
 8009b92:	4610      	mov	r0, r2
 8009b94:	f7fe fd74 	bl	8008680 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b98:	bf00      	nop
 8009b9a:	3720      	adds	r7, #32
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	200009d0 	.word	0x200009d0
 8009ba4:	200009d4 	.word	0x200009d4
 8009ba8:	20000ad8 	.word	0x20000ad8

08009bac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009bac:	b480      	push	{r7}
 8009bae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009bb0:	4b07      	ldr	r3, [pc, #28]	@ (8009bd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d004      	beq.n	8009bc2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009bb8:	4b05      	ldr	r3, [pc, #20]	@ (8009bd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009bbe:	3201      	adds	r2, #1
 8009bc0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8009bc2:	4b03      	ldr	r3, [pc, #12]	@ (8009bd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
	}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr
 8009bd0:	200009d0 	.word	0x200009d0

08009bd4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009bde:	4b29      	ldr	r3, [pc, #164]	@ (8009c84 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009be4:	4b28      	ldr	r3, [pc, #160]	@ (8009c88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	3304      	adds	r3, #4
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7fe fda5 	bl	800873a <uxListRemove>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d10b      	bne.n	8009c0e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009bf6:	4b24      	ldr	r3, [pc, #144]	@ (8009c88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8009c02:	43da      	mvns	r2, r3
 8009c04:	4b21      	ldr	r3, [pc, #132]	@ (8009c8c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4013      	ands	r3, r2
 8009c0a:	4a20      	ldr	r2, [pc, #128]	@ (8009c8c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009c0c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c14:	d10a      	bne.n	8009c2c <prvAddCurrentTaskToDelayedList+0x58>
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d007      	beq.n	8009c2c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8009c88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	3304      	adds	r3, #4
 8009c22:	4619      	mov	r1, r3
 8009c24:	481a      	ldr	r0, [pc, #104]	@ (8009c90 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009c26:	f7fe fd2b 	bl	8008680 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009c2a:	e026      	b.n	8009c7a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4413      	add	r3, r2
 8009c32:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009c34:	4b14      	ldr	r3, [pc, #80]	@ (8009c88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	68ba      	ldr	r2, [r7, #8]
 8009c3a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009c3c:	68ba      	ldr	r2, [r7, #8]
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d209      	bcs.n	8009c58 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c44:	4b13      	ldr	r3, [pc, #76]	@ (8009c94 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	4b0f      	ldr	r3, [pc, #60]	@ (8009c88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	3304      	adds	r3, #4
 8009c4e:	4619      	mov	r1, r3
 8009c50:	4610      	mov	r0, r2
 8009c52:	f7fe fd39 	bl	80086c8 <vListInsert>
}
 8009c56:	e010      	b.n	8009c7a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c58:	4b0f      	ldr	r3, [pc, #60]	@ (8009c98 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8009c88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	3304      	adds	r3, #4
 8009c62:	4619      	mov	r1, r3
 8009c64:	4610      	mov	r0, r2
 8009c66:	f7fe fd2f 	bl	80086c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8009c9c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	68ba      	ldr	r2, [r7, #8]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d202      	bcs.n	8009c7a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009c74:	4a09      	ldr	r2, [pc, #36]	@ (8009c9c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	6013      	str	r3, [r2, #0]
}
 8009c7a:	bf00      	nop
 8009c7c:	3710      	adds	r7, #16
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	20000ad4 	.word	0x20000ad4
 8009c88:	200009d0 	.word	0x200009d0
 8009c8c:	20000ad8 	.word	0x20000ad8
 8009c90:	20000abc 	.word	0x20000abc
 8009c94:	20000a8c 	.word	0x20000a8c
 8009c98:	20000a88 	.word	0x20000a88
 8009c9c:	20000af0 	.word	0x20000af0

08009ca0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b085      	sub	sp, #20
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	60f8      	str	r0, [r7, #12]
 8009ca8:	60b9      	str	r1, [r7, #8]
 8009caa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	3b04      	subs	r3, #4
 8009cb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009cb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	3b04      	subs	r3, #4
 8009cbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	f023 0201 	bic.w	r2, r3, #1
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	3b04      	subs	r3, #4
 8009cce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009cd0:	4a0c      	ldr	r2, [pc, #48]	@ (8009d04 <pxPortInitialiseStack+0x64>)
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	3b14      	subs	r3, #20
 8009cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	3b04      	subs	r3, #4
 8009ce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f06f 0202 	mvn.w	r2, #2
 8009cee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	3b20      	subs	r3, #32
 8009cf4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3714      	adds	r7, #20
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr
 8009d04:	08009d09 	.word	0x08009d09

08009d08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b085      	sub	sp, #20
 8009d0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009d12:	4b13      	ldr	r3, [pc, #76]	@ (8009d60 <prvTaskExitError+0x58>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d1a:	d00b      	beq.n	8009d34 <prvTaskExitError+0x2c>
	__asm volatile
 8009d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d20:	f383 8811 	msr	BASEPRI, r3
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	60fb      	str	r3, [r7, #12]
}
 8009d2e:	bf00      	nop
 8009d30:	bf00      	nop
 8009d32:	e7fd      	b.n	8009d30 <prvTaskExitError+0x28>
	__asm volatile
 8009d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d38:	f383 8811 	msr	BASEPRI, r3
 8009d3c:	f3bf 8f6f 	isb	sy
 8009d40:	f3bf 8f4f 	dsb	sy
 8009d44:	60bb      	str	r3, [r7, #8]
}
 8009d46:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d48:	bf00      	nop
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d0fc      	beq.n	8009d4a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d50:	bf00      	nop
 8009d52:	bf00      	nop
 8009d54:	3714      	adds	r7, #20
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr
 8009d5e:	bf00      	nop
 8009d60:	20000014 	.word	0x20000014
	...

08009d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d70:	4b07      	ldr	r3, [pc, #28]	@ (8009d90 <pxCurrentTCBConst2>)
 8009d72:	6819      	ldr	r1, [r3, #0]
 8009d74:	6808      	ldr	r0, [r1, #0]
 8009d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d7a:	f380 8809 	msr	PSP, r0
 8009d7e:	f3bf 8f6f 	isb	sy
 8009d82:	f04f 0000 	mov.w	r0, #0
 8009d86:	f380 8811 	msr	BASEPRI, r0
 8009d8a:	4770      	bx	lr
 8009d8c:	f3af 8000 	nop.w

08009d90 <pxCurrentTCBConst2>:
 8009d90:	200009d0 	.word	0x200009d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d94:	bf00      	nop
 8009d96:	bf00      	nop

08009d98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009d98:	4808      	ldr	r0, [pc, #32]	@ (8009dbc <prvPortStartFirstTask+0x24>)
 8009d9a:	6800      	ldr	r0, [r0, #0]
 8009d9c:	6800      	ldr	r0, [r0, #0]
 8009d9e:	f380 8808 	msr	MSP, r0
 8009da2:	f04f 0000 	mov.w	r0, #0
 8009da6:	f380 8814 	msr	CONTROL, r0
 8009daa:	b662      	cpsie	i
 8009dac:	b661      	cpsie	f
 8009dae:	f3bf 8f4f 	dsb	sy
 8009db2:	f3bf 8f6f 	isb	sy
 8009db6:	df00      	svc	0
 8009db8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009dba:	bf00      	nop
 8009dbc:	e000ed08 	.word	0xe000ed08

08009dc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b086      	sub	sp, #24
 8009dc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009dc6:	4b47      	ldr	r3, [pc, #284]	@ (8009ee4 <xPortStartScheduler+0x124>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a47      	ldr	r2, [pc, #284]	@ (8009ee8 <xPortStartScheduler+0x128>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d10b      	bne.n	8009de8 <xPortStartScheduler+0x28>
	__asm volatile
 8009dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dd4:	f383 8811 	msr	BASEPRI, r3
 8009dd8:	f3bf 8f6f 	isb	sy
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	613b      	str	r3, [r7, #16]
}
 8009de2:	bf00      	nop
 8009de4:	bf00      	nop
 8009de6:	e7fd      	b.n	8009de4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009de8:	4b3e      	ldr	r3, [pc, #248]	@ (8009ee4 <xPortStartScheduler+0x124>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a3f      	ldr	r2, [pc, #252]	@ (8009eec <xPortStartScheduler+0x12c>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d10b      	bne.n	8009e0a <xPortStartScheduler+0x4a>
	__asm volatile
 8009df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009df6:	f383 8811 	msr	BASEPRI, r3
 8009dfa:	f3bf 8f6f 	isb	sy
 8009dfe:	f3bf 8f4f 	dsb	sy
 8009e02:	60fb      	str	r3, [r7, #12]
}
 8009e04:	bf00      	nop
 8009e06:	bf00      	nop
 8009e08:	e7fd      	b.n	8009e06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009e0a:	4b39      	ldr	r3, [pc, #228]	@ (8009ef0 <xPortStartScheduler+0x130>)
 8009e0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	22ff      	movs	r2, #255	@ 0xff
 8009e1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e24:	78fb      	ldrb	r3, [r7, #3]
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009e2c:	b2da      	uxtb	r2, r3
 8009e2e:	4b31      	ldr	r3, [pc, #196]	@ (8009ef4 <xPortStartScheduler+0x134>)
 8009e30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e32:	4b31      	ldr	r3, [pc, #196]	@ (8009ef8 <xPortStartScheduler+0x138>)
 8009e34:	2207      	movs	r2, #7
 8009e36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e38:	e009      	b.n	8009e4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8009ef8 <xPortStartScheduler+0x138>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	4a2d      	ldr	r2, [pc, #180]	@ (8009ef8 <xPortStartScheduler+0x138>)
 8009e42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e44:	78fb      	ldrb	r3, [r7, #3]
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	005b      	lsls	r3, r3, #1
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e4e:	78fb      	ldrb	r3, [r7, #3]
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e56:	2b80      	cmp	r3, #128	@ 0x80
 8009e58:	d0ef      	beq.n	8009e3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e5a:	4b27      	ldr	r3, [pc, #156]	@ (8009ef8 <xPortStartScheduler+0x138>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f1c3 0307 	rsb	r3, r3, #7
 8009e62:	2b04      	cmp	r3, #4
 8009e64:	d00b      	beq.n	8009e7e <xPortStartScheduler+0xbe>
	__asm volatile
 8009e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e6a:	f383 8811 	msr	BASEPRI, r3
 8009e6e:	f3bf 8f6f 	isb	sy
 8009e72:	f3bf 8f4f 	dsb	sy
 8009e76:	60bb      	str	r3, [r7, #8]
}
 8009e78:	bf00      	nop
 8009e7a:	bf00      	nop
 8009e7c:	e7fd      	b.n	8009e7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8009ef8 <xPortStartScheduler+0x138>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	021b      	lsls	r3, r3, #8
 8009e84:	4a1c      	ldr	r2, [pc, #112]	@ (8009ef8 <xPortStartScheduler+0x138>)
 8009e86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e88:	4b1b      	ldr	r3, [pc, #108]	@ (8009ef8 <xPortStartScheduler+0x138>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009e90:	4a19      	ldr	r2, [pc, #100]	@ (8009ef8 <xPortStartScheduler+0x138>)
 8009e92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	b2da      	uxtb	r2, r3
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e9c:	4b17      	ldr	r3, [pc, #92]	@ (8009efc <xPortStartScheduler+0x13c>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a16      	ldr	r2, [pc, #88]	@ (8009efc <xPortStartScheduler+0x13c>)
 8009ea2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009ea6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ea8:	4b14      	ldr	r3, [pc, #80]	@ (8009efc <xPortStartScheduler+0x13c>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a13      	ldr	r2, [pc, #76]	@ (8009efc <xPortStartScheduler+0x13c>)
 8009eae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009eb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009eb4:	f000 f8da 	bl	800a06c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009eb8:	4b11      	ldr	r3, [pc, #68]	@ (8009f00 <xPortStartScheduler+0x140>)
 8009eba:	2200      	movs	r2, #0
 8009ebc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009ebe:	f000 f8f9 	bl	800a0b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009ec2:	4b10      	ldr	r3, [pc, #64]	@ (8009f04 <xPortStartScheduler+0x144>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a0f      	ldr	r2, [pc, #60]	@ (8009f04 <xPortStartScheduler+0x144>)
 8009ec8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009ecc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ece:	f7ff ff63 	bl	8009d98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009ed2:	f7ff faf7 	bl	80094c4 <vTaskSwitchContext>
	prvTaskExitError();
 8009ed6:	f7ff ff17 	bl	8009d08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009eda:	2300      	movs	r3, #0
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3718      	adds	r7, #24
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	e000ed00 	.word	0xe000ed00
 8009ee8:	410fc271 	.word	0x410fc271
 8009eec:	410fc270 	.word	0x410fc270
 8009ef0:	e000e400 	.word	0xe000e400
 8009ef4:	20000afc 	.word	0x20000afc
 8009ef8:	20000b00 	.word	0x20000b00
 8009efc:	e000ed20 	.word	0xe000ed20
 8009f00:	20000014 	.word	0x20000014
 8009f04:	e000ef34 	.word	0xe000ef34

08009f08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f12:	f383 8811 	msr	BASEPRI, r3
 8009f16:	f3bf 8f6f 	isb	sy
 8009f1a:	f3bf 8f4f 	dsb	sy
 8009f1e:	607b      	str	r3, [r7, #4]
}
 8009f20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009f22:	4b10      	ldr	r3, [pc, #64]	@ (8009f64 <vPortEnterCritical+0x5c>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	3301      	adds	r3, #1
 8009f28:	4a0e      	ldr	r2, [pc, #56]	@ (8009f64 <vPortEnterCritical+0x5c>)
 8009f2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8009f64 <vPortEnterCritical+0x5c>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d110      	bne.n	8009f56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f34:	4b0c      	ldr	r3, [pc, #48]	@ (8009f68 <vPortEnterCritical+0x60>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d00b      	beq.n	8009f56 <vPortEnterCritical+0x4e>
	__asm volatile
 8009f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f42:	f383 8811 	msr	BASEPRI, r3
 8009f46:	f3bf 8f6f 	isb	sy
 8009f4a:	f3bf 8f4f 	dsb	sy
 8009f4e:	603b      	str	r3, [r7, #0]
}
 8009f50:	bf00      	nop
 8009f52:	bf00      	nop
 8009f54:	e7fd      	b.n	8009f52 <vPortEnterCritical+0x4a>
	}
}
 8009f56:	bf00      	nop
 8009f58:	370c      	adds	r7, #12
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	20000014 	.word	0x20000014
 8009f68:	e000ed04 	.word	0xe000ed04

08009f6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009f72:	4b12      	ldr	r3, [pc, #72]	@ (8009fbc <vPortExitCritical+0x50>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d10b      	bne.n	8009f92 <vPortExitCritical+0x26>
	__asm volatile
 8009f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	607b      	str	r3, [r7, #4]
}
 8009f8c:	bf00      	nop
 8009f8e:	bf00      	nop
 8009f90:	e7fd      	b.n	8009f8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009f92:	4b0a      	ldr	r3, [pc, #40]	@ (8009fbc <vPortExitCritical+0x50>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	3b01      	subs	r3, #1
 8009f98:	4a08      	ldr	r2, [pc, #32]	@ (8009fbc <vPortExitCritical+0x50>)
 8009f9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009f9c:	4b07      	ldr	r3, [pc, #28]	@ (8009fbc <vPortExitCritical+0x50>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d105      	bne.n	8009fb0 <vPortExitCritical+0x44>
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	f383 8811 	msr	BASEPRI, r3
}
 8009fae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009fb0:	bf00      	nop
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr
 8009fbc:	20000014 	.word	0x20000014

08009fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009fc0:	f3ef 8009 	mrs	r0, PSP
 8009fc4:	f3bf 8f6f 	isb	sy
 8009fc8:	4b15      	ldr	r3, [pc, #84]	@ (800a020 <pxCurrentTCBConst>)
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	f01e 0f10 	tst.w	lr, #16
 8009fd0:	bf08      	it	eq
 8009fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fda:	6010      	str	r0, [r2, #0]
 8009fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009fe0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009fe4:	f380 8811 	msr	BASEPRI, r0
 8009fe8:	f3bf 8f4f 	dsb	sy
 8009fec:	f3bf 8f6f 	isb	sy
 8009ff0:	f7ff fa68 	bl	80094c4 <vTaskSwitchContext>
 8009ff4:	f04f 0000 	mov.w	r0, #0
 8009ff8:	f380 8811 	msr	BASEPRI, r0
 8009ffc:	bc09      	pop	{r0, r3}
 8009ffe:	6819      	ldr	r1, [r3, #0]
 800a000:	6808      	ldr	r0, [r1, #0]
 800a002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a006:	f01e 0f10 	tst.w	lr, #16
 800a00a:	bf08      	it	eq
 800a00c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a010:	f380 8809 	msr	PSP, r0
 800a014:	f3bf 8f6f 	isb	sy
 800a018:	4770      	bx	lr
 800a01a:	bf00      	nop
 800a01c:	f3af 8000 	nop.w

0800a020 <pxCurrentTCBConst>:
 800a020:	200009d0 	.word	0x200009d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a024:	bf00      	nop
 800a026:	bf00      	nop

0800a028 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b082      	sub	sp, #8
 800a02c:	af00      	add	r7, sp, #0
	__asm volatile
 800a02e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a032:	f383 8811 	msr	BASEPRI, r3
 800a036:	f3bf 8f6f 	isb	sy
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	607b      	str	r3, [r7, #4]
}
 800a040:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a042:	f7ff f985 	bl	8009350 <xTaskIncrementTick>
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d003      	beq.n	800a054 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a04c:	4b06      	ldr	r3, [pc, #24]	@ (800a068 <SysTick_Handler+0x40>)
 800a04e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a052:	601a      	str	r2, [r3, #0]
 800a054:	2300      	movs	r3, #0
 800a056:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	f383 8811 	msr	BASEPRI, r3
}
 800a05e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a060:	bf00      	nop
 800a062:	3708      	adds	r7, #8
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}
 800a068:	e000ed04 	.word	0xe000ed04

0800a06c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a06c:	b480      	push	{r7}
 800a06e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a070:	4b0b      	ldr	r3, [pc, #44]	@ (800a0a0 <vPortSetupTimerInterrupt+0x34>)
 800a072:	2200      	movs	r2, #0
 800a074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a076:	4b0b      	ldr	r3, [pc, #44]	@ (800a0a4 <vPortSetupTimerInterrupt+0x38>)
 800a078:	2200      	movs	r2, #0
 800a07a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a07c:	4b0a      	ldr	r3, [pc, #40]	@ (800a0a8 <vPortSetupTimerInterrupt+0x3c>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a0a      	ldr	r2, [pc, #40]	@ (800a0ac <vPortSetupTimerInterrupt+0x40>)
 800a082:	fba2 2303 	umull	r2, r3, r2, r3
 800a086:	099b      	lsrs	r3, r3, #6
 800a088:	4a09      	ldr	r2, [pc, #36]	@ (800a0b0 <vPortSetupTimerInterrupt+0x44>)
 800a08a:	3b01      	subs	r3, #1
 800a08c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a08e:	4b04      	ldr	r3, [pc, #16]	@ (800a0a0 <vPortSetupTimerInterrupt+0x34>)
 800a090:	2207      	movs	r2, #7
 800a092:	601a      	str	r2, [r3, #0]
}
 800a094:	bf00      	nop
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr
 800a09e:	bf00      	nop
 800a0a0:	e000e010 	.word	0xe000e010
 800a0a4:	e000e018 	.word	0xe000e018
 800a0a8:	20000000 	.word	0x20000000
 800a0ac:	10624dd3 	.word	0x10624dd3
 800a0b0:	e000e014 	.word	0xe000e014

0800a0b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a0b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a0c4 <vPortEnableVFP+0x10>
 800a0b8:	6801      	ldr	r1, [r0, #0]
 800a0ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a0be:	6001      	str	r1, [r0, #0]
 800a0c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a0c2:	bf00      	nop
 800a0c4:	e000ed88 	.word	0xe000ed88

0800a0c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b085      	sub	sp, #20
 800a0cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a0ce:	f3ef 8305 	mrs	r3, IPSR
 800a0d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2b0f      	cmp	r3, #15
 800a0d8:	d915      	bls.n	800a106 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a0da:	4a18      	ldr	r2, [pc, #96]	@ (800a13c <vPortValidateInterruptPriority+0x74>)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	4413      	add	r3, r2
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a0e4:	4b16      	ldr	r3, [pc, #88]	@ (800a140 <vPortValidateInterruptPriority+0x78>)
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	7afa      	ldrb	r2, [r7, #11]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d20b      	bcs.n	800a106 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f2:	f383 8811 	msr	BASEPRI, r3
 800a0f6:	f3bf 8f6f 	isb	sy
 800a0fa:	f3bf 8f4f 	dsb	sy
 800a0fe:	607b      	str	r3, [r7, #4]
}
 800a100:	bf00      	nop
 800a102:	bf00      	nop
 800a104:	e7fd      	b.n	800a102 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a106:	4b0f      	ldr	r3, [pc, #60]	@ (800a144 <vPortValidateInterruptPriority+0x7c>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a10e:	4b0e      	ldr	r3, [pc, #56]	@ (800a148 <vPortValidateInterruptPriority+0x80>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	429a      	cmp	r2, r3
 800a114:	d90b      	bls.n	800a12e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a11a:	f383 8811 	msr	BASEPRI, r3
 800a11e:	f3bf 8f6f 	isb	sy
 800a122:	f3bf 8f4f 	dsb	sy
 800a126:	603b      	str	r3, [r7, #0]
}
 800a128:	bf00      	nop
 800a12a:	bf00      	nop
 800a12c:	e7fd      	b.n	800a12a <vPortValidateInterruptPriority+0x62>
	}
 800a12e:	bf00      	nop
 800a130:	3714      	adds	r7, #20
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	e000e3f0 	.word	0xe000e3f0
 800a140:	20000afc 	.word	0x20000afc
 800a144:	e000ed0c 	.word	0xe000ed0c
 800a148:	20000b00 	.word	0x20000b00

0800a14c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b08a      	sub	sp, #40	@ 0x28
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a154:	2300      	movs	r3, #0
 800a156:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a158:	f7ff f84e 	bl	80091f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a15c:	4b5c      	ldr	r3, [pc, #368]	@ (800a2d0 <pvPortMalloc+0x184>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d101      	bne.n	800a168 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a164:	f000 f924 	bl	800a3b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a168:	4b5a      	ldr	r3, [pc, #360]	@ (800a2d4 <pvPortMalloc+0x188>)
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4013      	ands	r3, r2
 800a170:	2b00      	cmp	r3, #0
 800a172:	f040 8095 	bne.w	800a2a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d01e      	beq.n	800a1ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a17c:	2208      	movs	r2, #8
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	4413      	add	r3, r2
 800a182:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f003 0307 	and.w	r3, r3, #7
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d015      	beq.n	800a1ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f023 0307 	bic.w	r3, r3, #7
 800a194:	3308      	adds	r3, #8
 800a196:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f003 0307 	and.w	r3, r3, #7
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00b      	beq.n	800a1ba <pvPortMalloc+0x6e>
	__asm volatile
 800a1a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a6:	f383 8811 	msr	BASEPRI, r3
 800a1aa:	f3bf 8f6f 	isb	sy
 800a1ae:	f3bf 8f4f 	dsb	sy
 800a1b2:	617b      	str	r3, [r7, #20]
}
 800a1b4:	bf00      	nop
 800a1b6:	bf00      	nop
 800a1b8:	e7fd      	b.n	800a1b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d06f      	beq.n	800a2a0 <pvPortMalloc+0x154>
 800a1c0:	4b45      	ldr	r3, [pc, #276]	@ (800a2d8 <pvPortMalloc+0x18c>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d86a      	bhi.n	800a2a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a1ca:	4b44      	ldr	r3, [pc, #272]	@ (800a2dc <pvPortMalloc+0x190>)
 800a1cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a1ce:	4b43      	ldr	r3, [pc, #268]	@ (800a2dc <pvPortMalloc+0x190>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1d4:	e004      	b.n	800a1e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d903      	bls.n	800a1f2 <pvPortMalloc+0xa6>
 800a1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1f1      	bne.n	800a1d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a1f2:	4b37      	ldr	r3, [pc, #220]	@ (800a2d0 <pvPortMalloc+0x184>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d051      	beq.n	800a2a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a1fc:	6a3b      	ldr	r3, [r7, #32]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	2208      	movs	r2, #8
 800a202:	4413      	add	r3, r2
 800a204:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	6a3b      	ldr	r3, [r7, #32]
 800a20c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a210:	685a      	ldr	r2, [r3, #4]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	1ad2      	subs	r2, r2, r3
 800a216:	2308      	movs	r3, #8
 800a218:	005b      	lsls	r3, r3, #1
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d920      	bls.n	800a260 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a21e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4413      	add	r3, r2
 800a224:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	f003 0307 	and.w	r3, r3, #7
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d00b      	beq.n	800a248 <pvPortMalloc+0xfc>
	__asm volatile
 800a230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a234:	f383 8811 	msr	BASEPRI, r3
 800a238:	f3bf 8f6f 	isb	sy
 800a23c:	f3bf 8f4f 	dsb	sy
 800a240:	613b      	str	r3, [r7, #16]
}
 800a242:	bf00      	nop
 800a244:	bf00      	nop
 800a246:	e7fd      	b.n	800a244 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a24a:	685a      	ldr	r2, [r3, #4]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	1ad2      	subs	r2, r2, r3
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a25a:	69b8      	ldr	r0, [r7, #24]
 800a25c:	f000 f90a 	bl	800a474 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a260:	4b1d      	ldr	r3, [pc, #116]	@ (800a2d8 <pvPortMalloc+0x18c>)
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	1ad3      	subs	r3, r2, r3
 800a26a:	4a1b      	ldr	r2, [pc, #108]	@ (800a2d8 <pvPortMalloc+0x18c>)
 800a26c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a26e:	4b1a      	ldr	r3, [pc, #104]	@ (800a2d8 <pvPortMalloc+0x18c>)
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	4b1b      	ldr	r3, [pc, #108]	@ (800a2e0 <pvPortMalloc+0x194>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	429a      	cmp	r2, r3
 800a278:	d203      	bcs.n	800a282 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a27a:	4b17      	ldr	r3, [pc, #92]	@ (800a2d8 <pvPortMalloc+0x18c>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4a18      	ldr	r2, [pc, #96]	@ (800a2e0 <pvPortMalloc+0x194>)
 800a280:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a284:	685a      	ldr	r2, [r3, #4]
 800a286:	4b13      	ldr	r3, [pc, #76]	@ (800a2d4 <pvPortMalloc+0x188>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	431a      	orrs	r2, r3
 800a28c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a28e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a292:	2200      	movs	r2, #0
 800a294:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a296:	4b13      	ldr	r3, [pc, #76]	@ (800a2e4 <pvPortMalloc+0x198>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	3301      	adds	r3, #1
 800a29c:	4a11      	ldr	r2, [pc, #68]	@ (800a2e4 <pvPortMalloc+0x198>)
 800a29e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a2a0:	f7fe ffb8 	bl	8009214 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	f003 0307 	and.w	r3, r3, #7
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d00b      	beq.n	800a2c6 <pvPortMalloc+0x17a>
	__asm volatile
 800a2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2b2:	f383 8811 	msr	BASEPRI, r3
 800a2b6:	f3bf 8f6f 	isb	sy
 800a2ba:	f3bf 8f4f 	dsb	sy
 800a2be:	60fb      	str	r3, [r7, #12]
}
 800a2c0:	bf00      	nop
 800a2c2:	bf00      	nop
 800a2c4:	e7fd      	b.n	800a2c2 <pvPortMalloc+0x176>
	return pvReturn;
 800a2c6:	69fb      	ldr	r3, [r7, #28]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3728      	adds	r7, #40	@ 0x28
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	2000592c 	.word	0x2000592c
 800a2d4:	20005940 	.word	0x20005940
 800a2d8:	20005930 	.word	0x20005930
 800a2dc:	20005924 	.word	0x20005924
 800a2e0:	20005934 	.word	0x20005934
 800a2e4:	20005938 	.word	0x20005938

0800a2e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b086      	sub	sp, #24
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d04f      	beq.n	800a39a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a2fa:	2308      	movs	r3, #8
 800a2fc:	425b      	negs	r3, r3
 800a2fe:	697a      	ldr	r2, [r7, #20]
 800a300:	4413      	add	r3, r2
 800a302:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	685a      	ldr	r2, [r3, #4]
 800a30c:	4b25      	ldr	r3, [pc, #148]	@ (800a3a4 <vPortFree+0xbc>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4013      	ands	r3, r2
 800a312:	2b00      	cmp	r3, #0
 800a314:	d10b      	bne.n	800a32e <vPortFree+0x46>
	__asm volatile
 800a316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a31a:	f383 8811 	msr	BASEPRI, r3
 800a31e:	f3bf 8f6f 	isb	sy
 800a322:	f3bf 8f4f 	dsb	sy
 800a326:	60fb      	str	r3, [r7, #12]
}
 800a328:	bf00      	nop
 800a32a:	bf00      	nop
 800a32c:	e7fd      	b.n	800a32a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d00b      	beq.n	800a34e <vPortFree+0x66>
	__asm volatile
 800a336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a33a:	f383 8811 	msr	BASEPRI, r3
 800a33e:	f3bf 8f6f 	isb	sy
 800a342:	f3bf 8f4f 	dsb	sy
 800a346:	60bb      	str	r3, [r7, #8]
}
 800a348:	bf00      	nop
 800a34a:	bf00      	nop
 800a34c:	e7fd      	b.n	800a34a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	685a      	ldr	r2, [r3, #4]
 800a352:	4b14      	ldr	r3, [pc, #80]	@ (800a3a4 <vPortFree+0xbc>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4013      	ands	r3, r2
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d01e      	beq.n	800a39a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d11a      	bne.n	800a39a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	685a      	ldr	r2, [r3, #4]
 800a368:	4b0e      	ldr	r3, [pc, #56]	@ (800a3a4 <vPortFree+0xbc>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	43db      	mvns	r3, r3
 800a36e:	401a      	ands	r2, r3
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a374:	f7fe ff40 	bl	80091f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	685a      	ldr	r2, [r3, #4]
 800a37c:	4b0a      	ldr	r3, [pc, #40]	@ (800a3a8 <vPortFree+0xc0>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4413      	add	r3, r2
 800a382:	4a09      	ldr	r2, [pc, #36]	@ (800a3a8 <vPortFree+0xc0>)
 800a384:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a386:	6938      	ldr	r0, [r7, #16]
 800a388:	f000 f874 	bl	800a474 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a38c:	4b07      	ldr	r3, [pc, #28]	@ (800a3ac <vPortFree+0xc4>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	3301      	adds	r3, #1
 800a392:	4a06      	ldr	r2, [pc, #24]	@ (800a3ac <vPortFree+0xc4>)
 800a394:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a396:	f7fe ff3d 	bl	8009214 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a39a:	bf00      	nop
 800a39c:	3718      	adds	r7, #24
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	20005940 	.word	0x20005940
 800a3a8:	20005930 	.word	0x20005930
 800a3ac:	2000593c 	.word	0x2000593c

0800a3b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a3b6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800a3ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a3bc:	4b27      	ldr	r3, [pc, #156]	@ (800a45c <prvHeapInit+0xac>)
 800a3be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f003 0307 	and.w	r3, r3, #7
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d00c      	beq.n	800a3e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	3307      	adds	r3, #7
 800a3ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f023 0307 	bic.w	r3, r3, #7
 800a3d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a3d8:	68ba      	ldr	r2, [r7, #8]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	1ad3      	subs	r3, r2, r3
 800a3de:	4a1f      	ldr	r2, [pc, #124]	@ (800a45c <prvHeapInit+0xac>)
 800a3e0:	4413      	add	r3, r2
 800a3e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a3e8:	4a1d      	ldr	r2, [pc, #116]	@ (800a460 <prvHeapInit+0xb0>)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a3ee:	4b1c      	ldr	r3, [pc, #112]	@ (800a460 <prvHeapInit+0xb0>)
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	68ba      	ldr	r2, [r7, #8]
 800a3f8:	4413      	add	r3, r2
 800a3fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a3fc:	2208      	movs	r2, #8
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	1a9b      	subs	r3, r3, r2
 800a402:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f023 0307 	bic.w	r3, r3, #7
 800a40a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	4a15      	ldr	r2, [pc, #84]	@ (800a464 <prvHeapInit+0xb4>)
 800a410:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a412:	4b14      	ldr	r3, [pc, #80]	@ (800a464 <prvHeapInit+0xb4>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2200      	movs	r2, #0
 800a418:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a41a:	4b12      	ldr	r3, [pc, #72]	@ (800a464 <prvHeapInit+0xb4>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2200      	movs	r2, #0
 800a420:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	1ad2      	subs	r2, r2, r3
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a430:	4b0c      	ldr	r3, [pc, #48]	@ (800a464 <prvHeapInit+0xb4>)
 800a432:	681a      	ldr	r2, [r3, #0]
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	4a0a      	ldr	r2, [pc, #40]	@ (800a468 <prvHeapInit+0xb8>)
 800a43e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	4a09      	ldr	r2, [pc, #36]	@ (800a46c <prvHeapInit+0xbc>)
 800a446:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a448:	4b09      	ldr	r3, [pc, #36]	@ (800a470 <prvHeapInit+0xc0>)
 800a44a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a44e:	601a      	str	r2, [r3, #0]
}
 800a450:	bf00      	nop
 800a452:	3714      	adds	r7, #20
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr
 800a45c:	20000b04 	.word	0x20000b04
 800a460:	20005924 	.word	0x20005924
 800a464:	2000592c 	.word	0x2000592c
 800a468:	20005934 	.word	0x20005934
 800a46c:	20005930 	.word	0x20005930
 800a470:	20005940 	.word	0x20005940

0800a474 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a474:	b480      	push	{r7}
 800a476:	b085      	sub	sp, #20
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a47c:	4b28      	ldr	r3, [pc, #160]	@ (800a520 <prvInsertBlockIntoFreeList+0xac>)
 800a47e:	60fb      	str	r3, [r7, #12]
 800a480:	e002      	b.n	800a488 <prvInsertBlockIntoFreeList+0x14>
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	60fb      	str	r3, [r7, #12]
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	429a      	cmp	r2, r3
 800a490:	d8f7      	bhi.n	800a482 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	68ba      	ldr	r2, [r7, #8]
 800a49c:	4413      	add	r3, r2
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d108      	bne.n	800a4b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	685a      	ldr	r2, [r3, #4]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	441a      	add	r2, r3
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	68ba      	ldr	r2, [r7, #8]
 800a4c0:	441a      	add	r2, r3
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d118      	bne.n	800a4fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681a      	ldr	r2, [r3, #0]
 800a4ce:	4b15      	ldr	r3, [pc, #84]	@ (800a524 <prvInsertBlockIntoFreeList+0xb0>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d00d      	beq.n	800a4f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	685a      	ldr	r2, [r3, #4]
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	441a      	add	r2, r3
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	601a      	str	r2, [r3, #0]
 800a4f0:	e008      	b.n	800a504 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a4f2:	4b0c      	ldr	r3, [pc, #48]	@ (800a524 <prvInsertBlockIntoFreeList+0xb0>)
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	601a      	str	r2, [r3, #0]
 800a4fa:	e003      	b.n	800a504 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681a      	ldr	r2, [r3, #0]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a504:	68fa      	ldr	r2, [r7, #12]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d002      	beq.n	800a512 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a512:	bf00      	nop
 800a514:	3714      	adds	r7, #20
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr
 800a51e:	bf00      	nop
 800a520:	20005924 	.word	0x20005924
 800a524:	2000592c 	.word	0x2000592c

0800a528 <atoi>:
 800a528:	220a      	movs	r2, #10
 800a52a:	2100      	movs	r1, #0
 800a52c:	f000 b87a 	b.w	800a624 <strtol>

0800a530 <_strtol_l.constprop.0>:
 800a530:	2b24      	cmp	r3, #36	@ 0x24
 800a532:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a536:	4686      	mov	lr, r0
 800a538:	4690      	mov	r8, r2
 800a53a:	d801      	bhi.n	800a540 <_strtol_l.constprop.0+0x10>
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d106      	bne.n	800a54e <_strtol_l.constprop.0+0x1e>
 800a540:	f000 fb5c 	bl	800abfc <__errno>
 800a544:	2316      	movs	r3, #22
 800a546:	6003      	str	r3, [r0, #0]
 800a548:	2000      	movs	r0, #0
 800a54a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a54e:	4834      	ldr	r0, [pc, #208]	@ (800a620 <_strtol_l.constprop.0+0xf0>)
 800a550:	460d      	mov	r5, r1
 800a552:	462a      	mov	r2, r5
 800a554:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a558:	5d06      	ldrb	r6, [r0, r4]
 800a55a:	f016 0608 	ands.w	r6, r6, #8
 800a55e:	d1f8      	bne.n	800a552 <_strtol_l.constprop.0+0x22>
 800a560:	2c2d      	cmp	r4, #45	@ 0x2d
 800a562:	d12d      	bne.n	800a5c0 <_strtol_l.constprop.0+0x90>
 800a564:	782c      	ldrb	r4, [r5, #0]
 800a566:	2601      	movs	r6, #1
 800a568:	1c95      	adds	r5, r2, #2
 800a56a:	f033 0210 	bics.w	r2, r3, #16
 800a56e:	d109      	bne.n	800a584 <_strtol_l.constprop.0+0x54>
 800a570:	2c30      	cmp	r4, #48	@ 0x30
 800a572:	d12a      	bne.n	800a5ca <_strtol_l.constprop.0+0x9a>
 800a574:	782a      	ldrb	r2, [r5, #0]
 800a576:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a57a:	2a58      	cmp	r2, #88	@ 0x58
 800a57c:	d125      	bne.n	800a5ca <_strtol_l.constprop.0+0x9a>
 800a57e:	786c      	ldrb	r4, [r5, #1]
 800a580:	2310      	movs	r3, #16
 800a582:	3502      	adds	r5, #2
 800a584:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a588:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800a58c:	2200      	movs	r2, #0
 800a58e:	fbbc f9f3 	udiv	r9, ip, r3
 800a592:	4610      	mov	r0, r2
 800a594:	fb03 ca19 	mls	sl, r3, r9, ip
 800a598:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a59c:	2f09      	cmp	r7, #9
 800a59e:	d81b      	bhi.n	800a5d8 <_strtol_l.constprop.0+0xa8>
 800a5a0:	463c      	mov	r4, r7
 800a5a2:	42a3      	cmp	r3, r4
 800a5a4:	dd27      	ble.n	800a5f6 <_strtol_l.constprop.0+0xc6>
 800a5a6:	1c57      	adds	r7, r2, #1
 800a5a8:	d007      	beq.n	800a5ba <_strtol_l.constprop.0+0x8a>
 800a5aa:	4581      	cmp	r9, r0
 800a5ac:	d320      	bcc.n	800a5f0 <_strtol_l.constprop.0+0xc0>
 800a5ae:	d101      	bne.n	800a5b4 <_strtol_l.constprop.0+0x84>
 800a5b0:	45a2      	cmp	sl, r4
 800a5b2:	db1d      	blt.n	800a5f0 <_strtol_l.constprop.0+0xc0>
 800a5b4:	fb00 4003 	mla	r0, r0, r3, r4
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a5be:	e7eb      	b.n	800a598 <_strtol_l.constprop.0+0x68>
 800a5c0:	2c2b      	cmp	r4, #43	@ 0x2b
 800a5c2:	bf04      	itt	eq
 800a5c4:	782c      	ldrbeq	r4, [r5, #0]
 800a5c6:	1c95      	addeq	r5, r2, #2
 800a5c8:	e7cf      	b.n	800a56a <_strtol_l.constprop.0+0x3a>
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d1da      	bne.n	800a584 <_strtol_l.constprop.0+0x54>
 800a5ce:	2c30      	cmp	r4, #48	@ 0x30
 800a5d0:	bf0c      	ite	eq
 800a5d2:	2308      	moveq	r3, #8
 800a5d4:	230a      	movne	r3, #10
 800a5d6:	e7d5      	b.n	800a584 <_strtol_l.constprop.0+0x54>
 800a5d8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a5dc:	2f19      	cmp	r7, #25
 800a5de:	d801      	bhi.n	800a5e4 <_strtol_l.constprop.0+0xb4>
 800a5e0:	3c37      	subs	r4, #55	@ 0x37
 800a5e2:	e7de      	b.n	800a5a2 <_strtol_l.constprop.0+0x72>
 800a5e4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a5e8:	2f19      	cmp	r7, #25
 800a5ea:	d804      	bhi.n	800a5f6 <_strtol_l.constprop.0+0xc6>
 800a5ec:	3c57      	subs	r4, #87	@ 0x57
 800a5ee:	e7d8      	b.n	800a5a2 <_strtol_l.constprop.0+0x72>
 800a5f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a5f4:	e7e1      	b.n	800a5ba <_strtol_l.constprop.0+0x8a>
 800a5f6:	1c53      	adds	r3, r2, #1
 800a5f8:	d108      	bne.n	800a60c <_strtol_l.constprop.0+0xdc>
 800a5fa:	2322      	movs	r3, #34	@ 0x22
 800a5fc:	f8ce 3000 	str.w	r3, [lr]
 800a600:	4660      	mov	r0, ip
 800a602:	f1b8 0f00 	cmp.w	r8, #0
 800a606:	d0a0      	beq.n	800a54a <_strtol_l.constprop.0+0x1a>
 800a608:	1e69      	subs	r1, r5, #1
 800a60a:	e006      	b.n	800a61a <_strtol_l.constprop.0+0xea>
 800a60c:	b106      	cbz	r6, 800a610 <_strtol_l.constprop.0+0xe0>
 800a60e:	4240      	negs	r0, r0
 800a610:	f1b8 0f00 	cmp.w	r8, #0
 800a614:	d099      	beq.n	800a54a <_strtol_l.constprop.0+0x1a>
 800a616:	2a00      	cmp	r2, #0
 800a618:	d1f6      	bne.n	800a608 <_strtol_l.constprop.0+0xd8>
 800a61a:	f8c8 1000 	str.w	r1, [r8]
 800a61e:	e794      	b.n	800a54a <_strtol_l.constprop.0+0x1a>
 800a620:	0800bd29 	.word	0x0800bd29

0800a624 <strtol>:
 800a624:	4613      	mov	r3, r2
 800a626:	460a      	mov	r2, r1
 800a628:	4601      	mov	r1, r0
 800a62a:	4802      	ldr	r0, [pc, #8]	@ (800a634 <strtol+0x10>)
 800a62c:	6800      	ldr	r0, [r0, #0]
 800a62e:	f7ff bf7f 	b.w	800a530 <_strtol_l.constprop.0>
 800a632:	bf00      	nop
 800a634:	20000024 	.word	0x20000024

0800a638 <std>:
 800a638:	2300      	movs	r3, #0
 800a63a:	b510      	push	{r4, lr}
 800a63c:	4604      	mov	r4, r0
 800a63e:	e9c0 3300 	strd	r3, r3, [r0]
 800a642:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a646:	6083      	str	r3, [r0, #8]
 800a648:	8181      	strh	r1, [r0, #12]
 800a64a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a64c:	81c2      	strh	r2, [r0, #14]
 800a64e:	6183      	str	r3, [r0, #24]
 800a650:	4619      	mov	r1, r3
 800a652:	2208      	movs	r2, #8
 800a654:	305c      	adds	r0, #92	@ 0x5c
 800a656:	f000 fa2d 	bl	800aab4 <memset>
 800a65a:	4b0d      	ldr	r3, [pc, #52]	@ (800a690 <std+0x58>)
 800a65c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a65e:	4b0d      	ldr	r3, [pc, #52]	@ (800a694 <std+0x5c>)
 800a660:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a662:	4b0d      	ldr	r3, [pc, #52]	@ (800a698 <std+0x60>)
 800a664:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a666:	4b0d      	ldr	r3, [pc, #52]	@ (800a69c <std+0x64>)
 800a668:	6323      	str	r3, [r4, #48]	@ 0x30
 800a66a:	4b0d      	ldr	r3, [pc, #52]	@ (800a6a0 <std+0x68>)
 800a66c:	6224      	str	r4, [r4, #32]
 800a66e:	429c      	cmp	r4, r3
 800a670:	d006      	beq.n	800a680 <std+0x48>
 800a672:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a676:	4294      	cmp	r4, r2
 800a678:	d002      	beq.n	800a680 <std+0x48>
 800a67a:	33d0      	adds	r3, #208	@ 0xd0
 800a67c:	429c      	cmp	r4, r3
 800a67e:	d105      	bne.n	800a68c <std+0x54>
 800a680:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a688:	f000 bae2 	b.w	800ac50 <__retarget_lock_init_recursive>
 800a68c:	bd10      	pop	{r4, pc}
 800a68e:	bf00      	nop
 800a690:	0800a905 	.word	0x0800a905
 800a694:	0800a927 	.word	0x0800a927
 800a698:	0800a95f 	.word	0x0800a95f
 800a69c:	0800a983 	.word	0x0800a983
 800a6a0:	20005944 	.word	0x20005944

0800a6a4 <stdio_exit_handler>:
 800a6a4:	4a02      	ldr	r2, [pc, #8]	@ (800a6b0 <stdio_exit_handler+0xc>)
 800a6a6:	4903      	ldr	r1, [pc, #12]	@ (800a6b4 <stdio_exit_handler+0x10>)
 800a6a8:	4803      	ldr	r0, [pc, #12]	@ (800a6b8 <stdio_exit_handler+0x14>)
 800a6aa:	f000 b869 	b.w	800a780 <_fwalk_sglue>
 800a6ae:	bf00      	nop
 800a6b0:	20000018 	.word	0x20000018
 800a6b4:	0800b7bd 	.word	0x0800b7bd
 800a6b8:	20000028 	.word	0x20000028

0800a6bc <cleanup_stdio>:
 800a6bc:	6841      	ldr	r1, [r0, #4]
 800a6be:	4b0c      	ldr	r3, [pc, #48]	@ (800a6f0 <cleanup_stdio+0x34>)
 800a6c0:	4299      	cmp	r1, r3
 800a6c2:	b510      	push	{r4, lr}
 800a6c4:	4604      	mov	r4, r0
 800a6c6:	d001      	beq.n	800a6cc <cleanup_stdio+0x10>
 800a6c8:	f001 f878 	bl	800b7bc <_fflush_r>
 800a6cc:	68a1      	ldr	r1, [r4, #8]
 800a6ce:	4b09      	ldr	r3, [pc, #36]	@ (800a6f4 <cleanup_stdio+0x38>)
 800a6d0:	4299      	cmp	r1, r3
 800a6d2:	d002      	beq.n	800a6da <cleanup_stdio+0x1e>
 800a6d4:	4620      	mov	r0, r4
 800a6d6:	f001 f871 	bl	800b7bc <_fflush_r>
 800a6da:	68e1      	ldr	r1, [r4, #12]
 800a6dc:	4b06      	ldr	r3, [pc, #24]	@ (800a6f8 <cleanup_stdio+0x3c>)
 800a6de:	4299      	cmp	r1, r3
 800a6e0:	d004      	beq.n	800a6ec <cleanup_stdio+0x30>
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6e8:	f001 b868 	b.w	800b7bc <_fflush_r>
 800a6ec:	bd10      	pop	{r4, pc}
 800a6ee:	bf00      	nop
 800a6f0:	20005944 	.word	0x20005944
 800a6f4:	200059ac 	.word	0x200059ac
 800a6f8:	20005a14 	.word	0x20005a14

0800a6fc <global_stdio_init.part.0>:
 800a6fc:	b510      	push	{r4, lr}
 800a6fe:	4b0b      	ldr	r3, [pc, #44]	@ (800a72c <global_stdio_init.part.0+0x30>)
 800a700:	4c0b      	ldr	r4, [pc, #44]	@ (800a730 <global_stdio_init.part.0+0x34>)
 800a702:	4a0c      	ldr	r2, [pc, #48]	@ (800a734 <global_stdio_init.part.0+0x38>)
 800a704:	601a      	str	r2, [r3, #0]
 800a706:	4620      	mov	r0, r4
 800a708:	2200      	movs	r2, #0
 800a70a:	2104      	movs	r1, #4
 800a70c:	f7ff ff94 	bl	800a638 <std>
 800a710:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a714:	2201      	movs	r2, #1
 800a716:	2109      	movs	r1, #9
 800a718:	f7ff ff8e 	bl	800a638 <std>
 800a71c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a720:	2202      	movs	r2, #2
 800a722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a726:	2112      	movs	r1, #18
 800a728:	f7ff bf86 	b.w	800a638 <std>
 800a72c:	20005a7c 	.word	0x20005a7c
 800a730:	20005944 	.word	0x20005944
 800a734:	0800a6a5 	.word	0x0800a6a5

0800a738 <__sfp_lock_acquire>:
 800a738:	4801      	ldr	r0, [pc, #4]	@ (800a740 <__sfp_lock_acquire+0x8>)
 800a73a:	f000 ba8a 	b.w	800ac52 <__retarget_lock_acquire_recursive>
 800a73e:	bf00      	nop
 800a740:	20005a85 	.word	0x20005a85

0800a744 <__sfp_lock_release>:
 800a744:	4801      	ldr	r0, [pc, #4]	@ (800a74c <__sfp_lock_release+0x8>)
 800a746:	f000 ba85 	b.w	800ac54 <__retarget_lock_release_recursive>
 800a74a:	bf00      	nop
 800a74c:	20005a85 	.word	0x20005a85

0800a750 <__sinit>:
 800a750:	b510      	push	{r4, lr}
 800a752:	4604      	mov	r4, r0
 800a754:	f7ff fff0 	bl	800a738 <__sfp_lock_acquire>
 800a758:	6a23      	ldr	r3, [r4, #32]
 800a75a:	b11b      	cbz	r3, 800a764 <__sinit+0x14>
 800a75c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a760:	f7ff bff0 	b.w	800a744 <__sfp_lock_release>
 800a764:	4b04      	ldr	r3, [pc, #16]	@ (800a778 <__sinit+0x28>)
 800a766:	6223      	str	r3, [r4, #32]
 800a768:	4b04      	ldr	r3, [pc, #16]	@ (800a77c <__sinit+0x2c>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d1f5      	bne.n	800a75c <__sinit+0xc>
 800a770:	f7ff ffc4 	bl	800a6fc <global_stdio_init.part.0>
 800a774:	e7f2      	b.n	800a75c <__sinit+0xc>
 800a776:	bf00      	nop
 800a778:	0800a6bd 	.word	0x0800a6bd
 800a77c:	20005a7c 	.word	0x20005a7c

0800a780 <_fwalk_sglue>:
 800a780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a784:	4607      	mov	r7, r0
 800a786:	4688      	mov	r8, r1
 800a788:	4614      	mov	r4, r2
 800a78a:	2600      	movs	r6, #0
 800a78c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a790:	f1b9 0901 	subs.w	r9, r9, #1
 800a794:	d505      	bpl.n	800a7a2 <_fwalk_sglue+0x22>
 800a796:	6824      	ldr	r4, [r4, #0]
 800a798:	2c00      	cmp	r4, #0
 800a79a:	d1f7      	bne.n	800a78c <_fwalk_sglue+0xc>
 800a79c:	4630      	mov	r0, r6
 800a79e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7a2:	89ab      	ldrh	r3, [r5, #12]
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d907      	bls.n	800a7b8 <_fwalk_sglue+0x38>
 800a7a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	d003      	beq.n	800a7b8 <_fwalk_sglue+0x38>
 800a7b0:	4629      	mov	r1, r5
 800a7b2:	4638      	mov	r0, r7
 800a7b4:	47c0      	blx	r8
 800a7b6:	4306      	orrs	r6, r0
 800a7b8:	3568      	adds	r5, #104	@ 0x68
 800a7ba:	e7e9      	b.n	800a790 <_fwalk_sglue+0x10>

0800a7bc <iprintf>:
 800a7bc:	b40f      	push	{r0, r1, r2, r3}
 800a7be:	b507      	push	{r0, r1, r2, lr}
 800a7c0:	4906      	ldr	r1, [pc, #24]	@ (800a7dc <iprintf+0x20>)
 800a7c2:	ab04      	add	r3, sp, #16
 800a7c4:	6808      	ldr	r0, [r1, #0]
 800a7c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7ca:	6881      	ldr	r1, [r0, #8]
 800a7cc:	9301      	str	r3, [sp, #4]
 800a7ce:	f000 fccb 	bl	800b168 <_vfiprintf_r>
 800a7d2:	b003      	add	sp, #12
 800a7d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7d8:	b004      	add	sp, #16
 800a7da:	4770      	bx	lr
 800a7dc:	20000024 	.word	0x20000024

0800a7e0 <_puts_r>:
 800a7e0:	6a03      	ldr	r3, [r0, #32]
 800a7e2:	b570      	push	{r4, r5, r6, lr}
 800a7e4:	6884      	ldr	r4, [r0, #8]
 800a7e6:	4605      	mov	r5, r0
 800a7e8:	460e      	mov	r6, r1
 800a7ea:	b90b      	cbnz	r3, 800a7f0 <_puts_r+0x10>
 800a7ec:	f7ff ffb0 	bl	800a750 <__sinit>
 800a7f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a7f2:	07db      	lsls	r3, r3, #31
 800a7f4:	d405      	bmi.n	800a802 <_puts_r+0x22>
 800a7f6:	89a3      	ldrh	r3, [r4, #12]
 800a7f8:	0598      	lsls	r0, r3, #22
 800a7fa:	d402      	bmi.n	800a802 <_puts_r+0x22>
 800a7fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a7fe:	f000 fa28 	bl	800ac52 <__retarget_lock_acquire_recursive>
 800a802:	89a3      	ldrh	r3, [r4, #12]
 800a804:	0719      	lsls	r1, r3, #28
 800a806:	d502      	bpl.n	800a80e <_puts_r+0x2e>
 800a808:	6923      	ldr	r3, [r4, #16]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d135      	bne.n	800a87a <_puts_r+0x9a>
 800a80e:	4621      	mov	r1, r4
 800a810:	4628      	mov	r0, r5
 800a812:	f000 f8f9 	bl	800aa08 <__swsetup_r>
 800a816:	b380      	cbz	r0, 800a87a <_puts_r+0x9a>
 800a818:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a81c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a81e:	07da      	lsls	r2, r3, #31
 800a820:	d405      	bmi.n	800a82e <_puts_r+0x4e>
 800a822:	89a3      	ldrh	r3, [r4, #12]
 800a824:	059b      	lsls	r3, r3, #22
 800a826:	d402      	bmi.n	800a82e <_puts_r+0x4e>
 800a828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a82a:	f000 fa13 	bl	800ac54 <__retarget_lock_release_recursive>
 800a82e:	4628      	mov	r0, r5
 800a830:	bd70      	pop	{r4, r5, r6, pc}
 800a832:	2b00      	cmp	r3, #0
 800a834:	da04      	bge.n	800a840 <_puts_r+0x60>
 800a836:	69a2      	ldr	r2, [r4, #24]
 800a838:	429a      	cmp	r2, r3
 800a83a:	dc17      	bgt.n	800a86c <_puts_r+0x8c>
 800a83c:	290a      	cmp	r1, #10
 800a83e:	d015      	beq.n	800a86c <_puts_r+0x8c>
 800a840:	6823      	ldr	r3, [r4, #0]
 800a842:	1c5a      	adds	r2, r3, #1
 800a844:	6022      	str	r2, [r4, #0]
 800a846:	7019      	strb	r1, [r3, #0]
 800a848:	68a3      	ldr	r3, [r4, #8]
 800a84a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a84e:	3b01      	subs	r3, #1
 800a850:	60a3      	str	r3, [r4, #8]
 800a852:	2900      	cmp	r1, #0
 800a854:	d1ed      	bne.n	800a832 <_puts_r+0x52>
 800a856:	2b00      	cmp	r3, #0
 800a858:	da11      	bge.n	800a87e <_puts_r+0x9e>
 800a85a:	4622      	mov	r2, r4
 800a85c:	210a      	movs	r1, #10
 800a85e:	4628      	mov	r0, r5
 800a860:	f000 f893 	bl	800a98a <__swbuf_r>
 800a864:	3001      	adds	r0, #1
 800a866:	d0d7      	beq.n	800a818 <_puts_r+0x38>
 800a868:	250a      	movs	r5, #10
 800a86a:	e7d7      	b.n	800a81c <_puts_r+0x3c>
 800a86c:	4622      	mov	r2, r4
 800a86e:	4628      	mov	r0, r5
 800a870:	f000 f88b 	bl	800a98a <__swbuf_r>
 800a874:	3001      	adds	r0, #1
 800a876:	d1e7      	bne.n	800a848 <_puts_r+0x68>
 800a878:	e7ce      	b.n	800a818 <_puts_r+0x38>
 800a87a:	3e01      	subs	r6, #1
 800a87c:	e7e4      	b.n	800a848 <_puts_r+0x68>
 800a87e:	6823      	ldr	r3, [r4, #0]
 800a880:	1c5a      	adds	r2, r3, #1
 800a882:	6022      	str	r2, [r4, #0]
 800a884:	220a      	movs	r2, #10
 800a886:	701a      	strb	r2, [r3, #0]
 800a888:	e7ee      	b.n	800a868 <_puts_r+0x88>
	...

0800a88c <puts>:
 800a88c:	4b02      	ldr	r3, [pc, #8]	@ (800a898 <puts+0xc>)
 800a88e:	4601      	mov	r1, r0
 800a890:	6818      	ldr	r0, [r3, #0]
 800a892:	f7ff bfa5 	b.w	800a7e0 <_puts_r>
 800a896:	bf00      	nop
 800a898:	20000024 	.word	0x20000024

0800a89c <sniprintf>:
 800a89c:	b40c      	push	{r2, r3}
 800a89e:	b530      	push	{r4, r5, lr}
 800a8a0:	4b17      	ldr	r3, [pc, #92]	@ (800a900 <sniprintf+0x64>)
 800a8a2:	1e0c      	subs	r4, r1, #0
 800a8a4:	681d      	ldr	r5, [r3, #0]
 800a8a6:	b09d      	sub	sp, #116	@ 0x74
 800a8a8:	da08      	bge.n	800a8bc <sniprintf+0x20>
 800a8aa:	238b      	movs	r3, #139	@ 0x8b
 800a8ac:	602b      	str	r3, [r5, #0]
 800a8ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a8b2:	b01d      	add	sp, #116	@ 0x74
 800a8b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8b8:	b002      	add	sp, #8
 800a8ba:	4770      	bx	lr
 800a8bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a8c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a8c4:	bf14      	ite	ne
 800a8c6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800a8ca:	4623      	moveq	r3, r4
 800a8cc:	9304      	str	r3, [sp, #16]
 800a8ce:	9307      	str	r3, [sp, #28]
 800a8d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a8d4:	9002      	str	r0, [sp, #8]
 800a8d6:	9006      	str	r0, [sp, #24]
 800a8d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a8dc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a8de:	ab21      	add	r3, sp, #132	@ 0x84
 800a8e0:	a902      	add	r1, sp, #8
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	9301      	str	r3, [sp, #4]
 800a8e6:	f000 fb19 	bl	800af1c <_svfiprintf_r>
 800a8ea:	1c43      	adds	r3, r0, #1
 800a8ec:	bfbc      	itt	lt
 800a8ee:	238b      	movlt	r3, #139	@ 0x8b
 800a8f0:	602b      	strlt	r3, [r5, #0]
 800a8f2:	2c00      	cmp	r4, #0
 800a8f4:	d0dd      	beq.n	800a8b2 <sniprintf+0x16>
 800a8f6:	9b02      	ldr	r3, [sp, #8]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	701a      	strb	r2, [r3, #0]
 800a8fc:	e7d9      	b.n	800a8b2 <sniprintf+0x16>
 800a8fe:	bf00      	nop
 800a900:	20000024 	.word	0x20000024

0800a904 <__sread>:
 800a904:	b510      	push	{r4, lr}
 800a906:	460c      	mov	r4, r1
 800a908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a90c:	f000 f952 	bl	800abb4 <_read_r>
 800a910:	2800      	cmp	r0, #0
 800a912:	bfab      	itete	ge
 800a914:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a916:	89a3      	ldrhlt	r3, [r4, #12]
 800a918:	181b      	addge	r3, r3, r0
 800a91a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a91e:	bfac      	ite	ge
 800a920:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a922:	81a3      	strhlt	r3, [r4, #12]
 800a924:	bd10      	pop	{r4, pc}

0800a926 <__swrite>:
 800a926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a92a:	461f      	mov	r7, r3
 800a92c:	898b      	ldrh	r3, [r1, #12]
 800a92e:	05db      	lsls	r3, r3, #23
 800a930:	4605      	mov	r5, r0
 800a932:	460c      	mov	r4, r1
 800a934:	4616      	mov	r6, r2
 800a936:	d505      	bpl.n	800a944 <__swrite+0x1e>
 800a938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a93c:	2302      	movs	r3, #2
 800a93e:	2200      	movs	r2, #0
 800a940:	f000 f926 	bl	800ab90 <_lseek_r>
 800a944:	89a3      	ldrh	r3, [r4, #12]
 800a946:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a94a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a94e:	81a3      	strh	r3, [r4, #12]
 800a950:	4632      	mov	r2, r6
 800a952:	463b      	mov	r3, r7
 800a954:	4628      	mov	r0, r5
 800a956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a95a:	f000 b93d 	b.w	800abd8 <_write_r>

0800a95e <__sseek>:
 800a95e:	b510      	push	{r4, lr}
 800a960:	460c      	mov	r4, r1
 800a962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a966:	f000 f913 	bl	800ab90 <_lseek_r>
 800a96a:	1c43      	adds	r3, r0, #1
 800a96c:	89a3      	ldrh	r3, [r4, #12]
 800a96e:	bf15      	itete	ne
 800a970:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a972:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a976:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a97a:	81a3      	strheq	r3, [r4, #12]
 800a97c:	bf18      	it	ne
 800a97e:	81a3      	strhne	r3, [r4, #12]
 800a980:	bd10      	pop	{r4, pc}

0800a982 <__sclose>:
 800a982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a986:	f000 b89d 	b.w	800aac4 <_close_r>

0800a98a <__swbuf_r>:
 800a98a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a98c:	460e      	mov	r6, r1
 800a98e:	4614      	mov	r4, r2
 800a990:	4605      	mov	r5, r0
 800a992:	b118      	cbz	r0, 800a99c <__swbuf_r+0x12>
 800a994:	6a03      	ldr	r3, [r0, #32]
 800a996:	b90b      	cbnz	r3, 800a99c <__swbuf_r+0x12>
 800a998:	f7ff feda 	bl	800a750 <__sinit>
 800a99c:	69a3      	ldr	r3, [r4, #24]
 800a99e:	60a3      	str	r3, [r4, #8]
 800a9a0:	89a3      	ldrh	r3, [r4, #12]
 800a9a2:	071a      	lsls	r2, r3, #28
 800a9a4:	d501      	bpl.n	800a9aa <__swbuf_r+0x20>
 800a9a6:	6923      	ldr	r3, [r4, #16]
 800a9a8:	b943      	cbnz	r3, 800a9bc <__swbuf_r+0x32>
 800a9aa:	4621      	mov	r1, r4
 800a9ac:	4628      	mov	r0, r5
 800a9ae:	f000 f82b 	bl	800aa08 <__swsetup_r>
 800a9b2:	b118      	cbz	r0, 800a9bc <__swbuf_r+0x32>
 800a9b4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a9b8:	4638      	mov	r0, r7
 800a9ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9bc:	6823      	ldr	r3, [r4, #0]
 800a9be:	6922      	ldr	r2, [r4, #16]
 800a9c0:	1a98      	subs	r0, r3, r2
 800a9c2:	6963      	ldr	r3, [r4, #20]
 800a9c4:	b2f6      	uxtb	r6, r6
 800a9c6:	4283      	cmp	r3, r0
 800a9c8:	4637      	mov	r7, r6
 800a9ca:	dc05      	bgt.n	800a9d8 <__swbuf_r+0x4e>
 800a9cc:	4621      	mov	r1, r4
 800a9ce:	4628      	mov	r0, r5
 800a9d0:	f000 fef4 	bl	800b7bc <_fflush_r>
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	d1ed      	bne.n	800a9b4 <__swbuf_r+0x2a>
 800a9d8:	68a3      	ldr	r3, [r4, #8]
 800a9da:	3b01      	subs	r3, #1
 800a9dc:	60a3      	str	r3, [r4, #8]
 800a9de:	6823      	ldr	r3, [r4, #0]
 800a9e0:	1c5a      	adds	r2, r3, #1
 800a9e2:	6022      	str	r2, [r4, #0]
 800a9e4:	701e      	strb	r6, [r3, #0]
 800a9e6:	6962      	ldr	r2, [r4, #20]
 800a9e8:	1c43      	adds	r3, r0, #1
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d004      	beq.n	800a9f8 <__swbuf_r+0x6e>
 800a9ee:	89a3      	ldrh	r3, [r4, #12]
 800a9f0:	07db      	lsls	r3, r3, #31
 800a9f2:	d5e1      	bpl.n	800a9b8 <__swbuf_r+0x2e>
 800a9f4:	2e0a      	cmp	r6, #10
 800a9f6:	d1df      	bne.n	800a9b8 <__swbuf_r+0x2e>
 800a9f8:	4621      	mov	r1, r4
 800a9fa:	4628      	mov	r0, r5
 800a9fc:	f000 fede 	bl	800b7bc <_fflush_r>
 800aa00:	2800      	cmp	r0, #0
 800aa02:	d0d9      	beq.n	800a9b8 <__swbuf_r+0x2e>
 800aa04:	e7d6      	b.n	800a9b4 <__swbuf_r+0x2a>
	...

0800aa08 <__swsetup_r>:
 800aa08:	b538      	push	{r3, r4, r5, lr}
 800aa0a:	4b29      	ldr	r3, [pc, #164]	@ (800aab0 <__swsetup_r+0xa8>)
 800aa0c:	4605      	mov	r5, r0
 800aa0e:	6818      	ldr	r0, [r3, #0]
 800aa10:	460c      	mov	r4, r1
 800aa12:	b118      	cbz	r0, 800aa1c <__swsetup_r+0x14>
 800aa14:	6a03      	ldr	r3, [r0, #32]
 800aa16:	b90b      	cbnz	r3, 800aa1c <__swsetup_r+0x14>
 800aa18:	f7ff fe9a 	bl	800a750 <__sinit>
 800aa1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa20:	0719      	lsls	r1, r3, #28
 800aa22:	d422      	bmi.n	800aa6a <__swsetup_r+0x62>
 800aa24:	06da      	lsls	r2, r3, #27
 800aa26:	d407      	bmi.n	800aa38 <__swsetup_r+0x30>
 800aa28:	2209      	movs	r2, #9
 800aa2a:	602a      	str	r2, [r5, #0]
 800aa2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa30:	81a3      	strh	r3, [r4, #12]
 800aa32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa36:	e033      	b.n	800aaa0 <__swsetup_r+0x98>
 800aa38:	0758      	lsls	r0, r3, #29
 800aa3a:	d512      	bpl.n	800aa62 <__swsetup_r+0x5a>
 800aa3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa3e:	b141      	cbz	r1, 800aa52 <__swsetup_r+0x4a>
 800aa40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa44:	4299      	cmp	r1, r3
 800aa46:	d002      	beq.n	800aa4e <__swsetup_r+0x46>
 800aa48:	4628      	mov	r0, r5
 800aa4a:	f000 f913 	bl	800ac74 <_free_r>
 800aa4e:	2300      	movs	r3, #0
 800aa50:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa52:	89a3      	ldrh	r3, [r4, #12]
 800aa54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aa58:	81a3      	strh	r3, [r4, #12]
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	6063      	str	r3, [r4, #4]
 800aa5e:	6923      	ldr	r3, [r4, #16]
 800aa60:	6023      	str	r3, [r4, #0]
 800aa62:	89a3      	ldrh	r3, [r4, #12]
 800aa64:	f043 0308 	orr.w	r3, r3, #8
 800aa68:	81a3      	strh	r3, [r4, #12]
 800aa6a:	6923      	ldr	r3, [r4, #16]
 800aa6c:	b94b      	cbnz	r3, 800aa82 <__swsetup_r+0x7a>
 800aa6e:	89a3      	ldrh	r3, [r4, #12]
 800aa70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aa74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa78:	d003      	beq.n	800aa82 <__swsetup_r+0x7a>
 800aa7a:	4621      	mov	r1, r4
 800aa7c:	4628      	mov	r0, r5
 800aa7e:	f000 feeb 	bl	800b858 <__smakebuf_r>
 800aa82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa86:	f013 0201 	ands.w	r2, r3, #1
 800aa8a:	d00a      	beq.n	800aaa2 <__swsetup_r+0x9a>
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	60a2      	str	r2, [r4, #8]
 800aa90:	6962      	ldr	r2, [r4, #20]
 800aa92:	4252      	negs	r2, r2
 800aa94:	61a2      	str	r2, [r4, #24]
 800aa96:	6922      	ldr	r2, [r4, #16]
 800aa98:	b942      	cbnz	r2, 800aaac <__swsetup_r+0xa4>
 800aa9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aa9e:	d1c5      	bne.n	800aa2c <__swsetup_r+0x24>
 800aaa0:	bd38      	pop	{r3, r4, r5, pc}
 800aaa2:	0799      	lsls	r1, r3, #30
 800aaa4:	bf58      	it	pl
 800aaa6:	6962      	ldrpl	r2, [r4, #20]
 800aaa8:	60a2      	str	r2, [r4, #8]
 800aaaa:	e7f4      	b.n	800aa96 <__swsetup_r+0x8e>
 800aaac:	2000      	movs	r0, #0
 800aaae:	e7f7      	b.n	800aaa0 <__swsetup_r+0x98>
 800aab0:	20000024 	.word	0x20000024

0800aab4 <memset>:
 800aab4:	4402      	add	r2, r0
 800aab6:	4603      	mov	r3, r0
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d100      	bne.n	800aabe <memset+0xa>
 800aabc:	4770      	bx	lr
 800aabe:	f803 1b01 	strb.w	r1, [r3], #1
 800aac2:	e7f9      	b.n	800aab8 <memset+0x4>

0800aac4 <_close_r>:
 800aac4:	b538      	push	{r3, r4, r5, lr}
 800aac6:	4d06      	ldr	r5, [pc, #24]	@ (800aae0 <_close_r+0x1c>)
 800aac8:	2300      	movs	r3, #0
 800aaca:	4604      	mov	r4, r0
 800aacc:	4608      	mov	r0, r1
 800aace:	602b      	str	r3, [r5, #0]
 800aad0:	f7f6 fbdf 	bl	8001292 <_close>
 800aad4:	1c43      	adds	r3, r0, #1
 800aad6:	d102      	bne.n	800aade <_close_r+0x1a>
 800aad8:	682b      	ldr	r3, [r5, #0]
 800aada:	b103      	cbz	r3, 800aade <_close_r+0x1a>
 800aadc:	6023      	str	r3, [r4, #0]
 800aade:	bd38      	pop	{r3, r4, r5, pc}
 800aae0:	20005a80 	.word	0x20005a80

0800aae4 <_reclaim_reent>:
 800aae4:	4b29      	ldr	r3, [pc, #164]	@ (800ab8c <_reclaim_reent+0xa8>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4283      	cmp	r3, r0
 800aaea:	b570      	push	{r4, r5, r6, lr}
 800aaec:	4604      	mov	r4, r0
 800aaee:	d04b      	beq.n	800ab88 <_reclaim_reent+0xa4>
 800aaf0:	69c3      	ldr	r3, [r0, #28]
 800aaf2:	b1ab      	cbz	r3, 800ab20 <_reclaim_reent+0x3c>
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	b16b      	cbz	r3, 800ab14 <_reclaim_reent+0x30>
 800aaf8:	2500      	movs	r5, #0
 800aafa:	69e3      	ldr	r3, [r4, #28]
 800aafc:	68db      	ldr	r3, [r3, #12]
 800aafe:	5959      	ldr	r1, [r3, r5]
 800ab00:	2900      	cmp	r1, #0
 800ab02:	d13b      	bne.n	800ab7c <_reclaim_reent+0x98>
 800ab04:	3504      	adds	r5, #4
 800ab06:	2d80      	cmp	r5, #128	@ 0x80
 800ab08:	d1f7      	bne.n	800aafa <_reclaim_reent+0x16>
 800ab0a:	69e3      	ldr	r3, [r4, #28]
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	68d9      	ldr	r1, [r3, #12]
 800ab10:	f000 f8b0 	bl	800ac74 <_free_r>
 800ab14:	69e3      	ldr	r3, [r4, #28]
 800ab16:	6819      	ldr	r1, [r3, #0]
 800ab18:	b111      	cbz	r1, 800ab20 <_reclaim_reent+0x3c>
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	f000 f8aa 	bl	800ac74 <_free_r>
 800ab20:	6961      	ldr	r1, [r4, #20]
 800ab22:	b111      	cbz	r1, 800ab2a <_reclaim_reent+0x46>
 800ab24:	4620      	mov	r0, r4
 800ab26:	f000 f8a5 	bl	800ac74 <_free_r>
 800ab2a:	69e1      	ldr	r1, [r4, #28]
 800ab2c:	b111      	cbz	r1, 800ab34 <_reclaim_reent+0x50>
 800ab2e:	4620      	mov	r0, r4
 800ab30:	f000 f8a0 	bl	800ac74 <_free_r>
 800ab34:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ab36:	b111      	cbz	r1, 800ab3e <_reclaim_reent+0x5a>
 800ab38:	4620      	mov	r0, r4
 800ab3a:	f000 f89b 	bl	800ac74 <_free_r>
 800ab3e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab40:	b111      	cbz	r1, 800ab48 <_reclaim_reent+0x64>
 800ab42:	4620      	mov	r0, r4
 800ab44:	f000 f896 	bl	800ac74 <_free_r>
 800ab48:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ab4a:	b111      	cbz	r1, 800ab52 <_reclaim_reent+0x6e>
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	f000 f891 	bl	800ac74 <_free_r>
 800ab52:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ab54:	b111      	cbz	r1, 800ab5c <_reclaim_reent+0x78>
 800ab56:	4620      	mov	r0, r4
 800ab58:	f000 f88c 	bl	800ac74 <_free_r>
 800ab5c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ab5e:	b111      	cbz	r1, 800ab66 <_reclaim_reent+0x82>
 800ab60:	4620      	mov	r0, r4
 800ab62:	f000 f887 	bl	800ac74 <_free_r>
 800ab66:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ab68:	b111      	cbz	r1, 800ab70 <_reclaim_reent+0x8c>
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	f000 f882 	bl	800ac74 <_free_r>
 800ab70:	6a23      	ldr	r3, [r4, #32]
 800ab72:	b14b      	cbz	r3, 800ab88 <_reclaim_reent+0xa4>
 800ab74:	4620      	mov	r0, r4
 800ab76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ab7a:	4718      	bx	r3
 800ab7c:	680e      	ldr	r6, [r1, #0]
 800ab7e:	4620      	mov	r0, r4
 800ab80:	f000 f878 	bl	800ac74 <_free_r>
 800ab84:	4631      	mov	r1, r6
 800ab86:	e7bb      	b.n	800ab00 <_reclaim_reent+0x1c>
 800ab88:	bd70      	pop	{r4, r5, r6, pc}
 800ab8a:	bf00      	nop
 800ab8c:	20000024 	.word	0x20000024

0800ab90 <_lseek_r>:
 800ab90:	b538      	push	{r3, r4, r5, lr}
 800ab92:	4d07      	ldr	r5, [pc, #28]	@ (800abb0 <_lseek_r+0x20>)
 800ab94:	4604      	mov	r4, r0
 800ab96:	4608      	mov	r0, r1
 800ab98:	4611      	mov	r1, r2
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	602a      	str	r2, [r5, #0]
 800ab9e:	461a      	mov	r2, r3
 800aba0:	f7f6 fb9e 	bl	80012e0 <_lseek>
 800aba4:	1c43      	adds	r3, r0, #1
 800aba6:	d102      	bne.n	800abae <_lseek_r+0x1e>
 800aba8:	682b      	ldr	r3, [r5, #0]
 800abaa:	b103      	cbz	r3, 800abae <_lseek_r+0x1e>
 800abac:	6023      	str	r3, [r4, #0]
 800abae:	bd38      	pop	{r3, r4, r5, pc}
 800abb0:	20005a80 	.word	0x20005a80

0800abb4 <_read_r>:
 800abb4:	b538      	push	{r3, r4, r5, lr}
 800abb6:	4d07      	ldr	r5, [pc, #28]	@ (800abd4 <_read_r+0x20>)
 800abb8:	4604      	mov	r4, r0
 800abba:	4608      	mov	r0, r1
 800abbc:	4611      	mov	r1, r2
 800abbe:	2200      	movs	r2, #0
 800abc0:	602a      	str	r2, [r5, #0]
 800abc2:	461a      	mov	r2, r3
 800abc4:	f7f6 fb2c 	bl	8001220 <_read>
 800abc8:	1c43      	adds	r3, r0, #1
 800abca:	d102      	bne.n	800abd2 <_read_r+0x1e>
 800abcc:	682b      	ldr	r3, [r5, #0]
 800abce:	b103      	cbz	r3, 800abd2 <_read_r+0x1e>
 800abd0:	6023      	str	r3, [r4, #0]
 800abd2:	bd38      	pop	{r3, r4, r5, pc}
 800abd4:	20005a80 	.word	0x20005a80

0800abd8 <_write_r>:
 800abd8:	b538      	push	{r3, r4, r5, lr}
 800abda:	4d07      	ldr	r5, [pc, #28]	@ (800abf8 <_write_r+0x20>)
 800abdc:	4604      	mov	r4, r0
 800abde:	4608      	mov	r0, r1
 800abe0:	4611      	mov	r1, r2
 800abe2:	2200      	movs	r2, #0
 800abe4:	602a      	str	r2, [r5, #0]
 800abe6:	461a      	mov	r2, r3
 800abe8:	f7f6 fb37 	bl	800125a <_write>
 800abec:	1c43      	adds	r3, r0, #1
 800abee:	d102      	bne.n	800abf6 <_write_r+0x1e>
 800abf0:	682b      	ldr	r3, [r5, #0]
 800abf2:	b103      	cbz	r3, 800abf6 <_write_r+0x1e>
 800abf4:	6023      	str	r3, [r4, #0]
 800abf6:	bd38      	pop	{r3, r4, r5, pc}
 800abf8:	20005a80 	.word	0x20005a80

0800abfc <__errno>:
 800abfc:	4b01      	ldr	r3, [pc, #4]	@ (800ac04 <__errno+0x8>)
 800abfe:	6818      	ldr	r0, [r3, #0]
 800ac00:	4770      	bx	lr
 800ac02:	bf00      	nop
 800ac04:	20000024 	.word	0x20000024

0800ac08 <__libc_init_array>:
 800ac08:	b570      	push	{r4, r5, r6, lr}
 800ac0a:	4d0d      	ldr	r5, [pc, #52]	@ (800ac40 <__libc_init_array+0x38>)
 800ac0c:	4c0d      	ldr	r4, [pc, #52]	@ (800ac44 <__libc_init_array+0x3c>)
 800ac0e:	1b64      	subs	r4, r4, r5
 800ac10:	10a4      	asrs	r4, r4, #2
 800ac12:	2600      	movs	r6, #0
 800ac14:	42a6      	cmp	r6, r4
 800ac16:	d109      	bne.n	800ac2c <__libc_init_array+0x24>
 800ac18:	4d0b      	ldr	r5, [pc, #44]	@ (800ac48 <__libc_init_array+0x40>)
 800ac1a:	4c0c      	ldr	r4, [pc, #48]	@ (800ac4c <__libc_init_array+0x44>)
 800ac1c:	f000 feda 	bl	800b9d4 <_init>
 800ac20:	1b64      	subs	r4, r4, r5
 800ac22:	10a4      	asrs	r4, r4, #2
 800ac24:	2600      	movs	r6, #0
 800ac26:	42a6      	cmp	r6, r4
 800ac28:	d105      	bne.n	800ac36 <__libc_init_array+0x2e>
 800ac2a:	bd70      	pop	{r4, r5, r6, pc}
 800ac2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac30:	4798      	blx	r3
 800ac32:	3601      	adds	r6, #1
 800ac34:	e7ee      	b.n	800ac14 <__libc_init_array+0xc>
 800ac36:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac3a:	4798      	blx	r3
 800ac3c:	3601      	adds	r6, #1
 800ac3e:	e7f2      	b.n	800ac26 <__libc_init_array+0x1e>
 800ac40:	0800be64 	.word	0x0800be64
 800ac44:	0800be64 	.word	0x0800be64
 800ac48:	0800be64 	.word	0x0800be64
 800ac4c:	0800be68 	.word	0x0800be68

0800ac50 <__retarget_lock_init_recursive>:
 800ac50:	4770      	bx	lr

0800ac52 <__retarget_lock_acquire_recursive>:
 800ac52:	4770      	bx	lr

0800ac54 <__retarget_lock_release_recursive>:
 800ac54:	4770      	bx	lr

0800ac56 <memcpy>:
 800ac56:	440a      	add	r2, r1
 800ac58:	4291      	cmp	r1, r2
 800ac5a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ac5e:	d100      	bne.n	800ac62 <memcpy+0xc>
 800ac60:	4770      	bx	lr
 800ac62:	b510      	push	{r4, lr}
 800ac64:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac68:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac6c:	4291      	cmp	r1, r2
 800ac6e:	d1f9      	bne.n	800ac64 <memcpy+0xe>
 800ac70:	bd10      	pop	{r4, pc}
	...

0800ac74 <_free_r>:
 800ac74:	b538      	push	{r3, r4, r5, lr}
 800ac76:	4605      	mov	r5, r0
 800ac78:	2900      	cmp	r1, #0
 800ac7a:	d041      	beq.n	800ad00 <_free_r+0x8c>
 800ac7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac80:	1f0c      	subs	r4, r1, #4
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	bfb8      	it	lt
 800ac86:	18e4      	addlt	r4, r4, r3
 800ac88:	f000 f8e0 	bl	800ae4c <__malloc_lock>
 800ac8c:	4a1d      	ldr	r2, [pc, #116]	@ (800ad04 <_free_r+0x90>)
 800ac8e:	6813      	ldr	r3, [r2, #0]
 800ac90:	b933      	cbnz	r3, 800aca0 <_free_r+0x2c>
 800ac92:	6063      	str	r3, [r4, #4]
 800ac94:	6014      	str	r4, [r2, #0]
 800ac96:	4628      	mov	r0, r5
 800ac98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac9c:	f000 b8dc 	b.w	800ae58 <__malloc_unlock>
 800aca0:	42a3      	cmp	r3, r4
 800aca2:	d908      	bls.n	800acb6 <_free_r+0x42>
 800aca4:	6820      	ldr	r0, [r4, #0]
 800aca6:	1821      	adds	r1, r4, r0
 800aca8:	428b      	cmp	r3, r1
 800acaa:	bf01      	itttt	eq
 800acac:	6819      	ldreq	r1, [r3, #0]
 800acae:	685b      	ldreq	r3, [r3, #4]
 800acb0:	1809      	addeq	r1, r1, r0
 800acb2:	6021      	streq	r1, [r4, #0]
 800acb4:	e7ed      	b.n	800ac92 <_free_r+0x1e>
 800acb6:	461a      	mov	r2, r3
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	b10b      	cbz	r3, 800acc0 <_free_r+0x4c>
 800acbc:	42a3      	cmp	r3, r4
 800acbe:	d9fa      	bls.n	800acb6 <_free_r+0x42>
 800acc0:	6811      	ldr	r1, [r2, #0]
 800acc2:	1850      	adds	r0, r2, r1
 800acc4:	42a0      	cmp	r0, r4
 800acc6:	d10b      	bne.n	800ace0 <_free_r+0x6c>
 800acc8:	6820      	ldr	r0, [r4, #0]
 800acca:	4401      	add	r1, r0
 800accc:	1850      	adds	r0, r2, r1
 800acce:	4283      	cmp	r3, r0
 800acd0:	6011      	str	r1, [r2, #0]
 800acd2:	d1e0      	bne.n	800ac96 <_free_r+0x22>
 800acd4:	6818      	ldr	r0, [r3, #0]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	6053      	str	r3, [r2, #4]
 800acda:	4408      	add	r0, r1
 800acdc:	6010      	str	r0, [r2, #0]
 800acde:	e7da      	b.n	800ac96 <_free_r+0x22>
 800ace0:	d902      	bls.n	800ace8 <_free_r+0x74>
 800ace2:	230c      	movs	r3, #12
 800ace4:	602b      	str	r3, [r5, #0]
 800ace6:	e7d6      	b.n	800ac96 <_free_r+0x22>
 800ace8:	6820      	ldr	r0, [r4, #0]
 800acea:	1821      	adds	r1, r4, r0
 800acec:	428b      	cmp	r3, r1
 800acee:	bf04      	itt	eq
 800acf0:	6819      	ldreq	r1, [r3, #0]
 800acf2:	685b      	ldreq	r3, [r3, #4]
 800acf4:	6063      	str	r3, [r4, #4]
 800acf6:	bf04      	itt	eq
 800acf8:	1809      	addeq	r1, r1, r0
 800acfa:	6021      	streq	r1, [r4, #0]
 800acfc:	6054      	str	r4, [r2, #4]
 800acfe:	e7ca      	b.n	800ac96 <_free_r+0x22>
 800ad00:	bd38      	pop	{r3, r4, r5, pc}
 800ad02:	bf00      	nop
 800ad04:	20005a8c 	.word	0x20005a8c

0800ad08 <sbrk_aligned>:
 800ad08:	b570      	push	{r4, r5, r6, lr}
 800ad0a:	4e0f      	ldr	r6, [pc, #60]	@ (800ad48 <sbrk_aligned+0x40>)
 800ad0c:	460c      	mov	r4, r1
 800ad0e:	6831      	ldr	r1, [r6, #0]
 800ad10:	4605      	mov	r5, r0
 800ad12:	b911      	cbnz	r1, 800ad1a <sbrk_aligned+0x12>
 800ad14:	f000 fe18 	bl	800b948 <_sbrk_r>
 800ad18:	6030      	str	r0, [r6, #0]
 800ad1a:	4621      	mov	r1, r4
 800ad1c:	4628      	mov	r0, r5
 800ad1e:	f000 fe13 	bl	800b948 <_sbrk_r>
 800ad22:	1c43      	adds	r3, r0, #1
 800ad24:	d103      	bne.n	800ad2e <sbrk_aligned+0x26>
 800ad26:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	bd70      	pop	{r4, r5, r6, pc}
 800ad2e:	1cc4      	adds	r4, r0, #3
 800ad30:	f024 0403 	bic.w	r4, r4, #3
 800ad34:	42a0      	cmp	r0, r4
 800ad36:	d0f8      	beq.n	800ad2a <sbrk_aligned+0x22>
 800ad38:	1a21      	subs	r1, r4, r0
 800ad3a:	4628      	mov	r0, r5
 800ad3c:	f000 fe04 	bl	800b948 <_sbrk_r>
 800ad40:	3001      	adds	r0, #1
 800ad42:	d1f2      	bne.n	800ad2a <sbrk_aligned+0x22>
 800ad44:	e7ef      	b.n	800ad26 <sbrk_aligned+0x1e>
 800ad46:	bf00      	nop
 800ad48:	20005a88 	.word	0x20005a88

0800ad4c <_malloc_r>:
 800ad4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad50:	1ccd      	adds	r5, r1, #3
 800ad52:	f025 0503 	bic.w	r5, r5, #3
 800ad56:	3508      	adds	r5, #8
 800ad58:	2d0c      	cmp	r5, #12
 800ad5a:	bf38      	it	cc
 800ad5c:	250c      	movcc	r5, #12
 800ad5e:	2d00      	cmp	r5, #0
 800ad60:	4606      	mov	r6, r0
 800ad62:	db01      	blt.n	800ad68 <_malloc_r+0x1c>
 800ad64:	42a9      	cmp	r1, r5
 800ad66:	d904      	bls.n	800ad72 <_malloc_r+0x26>
 800ad68:	230c      	movs	r3, #12
 800ad6a:	6033      	str	r3, [r6, #0]
 800ad6c:	2000      	movs	r0, #0
 800ad6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ae48 <_malloc_r+0xfc>
 800ad76:	f000 f869 	bl	800ae4c <__malloc_lock>
 800ad7a:	f8d8 3000 	ldr.w	r3, [r8]
 800ad7e:	461c      	mov	r4, r3
 800ad80:	bb44      	cbnz	r4, 800add4 <_malloc_r+0x88>
 800ad82:	4629      	mov	r1, r5
 800ad84:	4630      	mov	r0, r6
 800ad86:	f7ff ffbf 	bl	800ad08 <sbrk_aligned>
 800ad8a:	1c43      	adds	r3, r0, #1
 800ad8c:	4604      	mov	r4, r0
 800ad8e:	d158      	bne.n	800ae42 <_malloc_r+0xf6>
 800ad90:	f8d8 4000 	ldr.w	r4, [r8]
 800ad94:	4627      	mov	r7, r4
 800ad96:	2f00      	cmp	r7, #0
 800ad98:	d143      	bne.n	800ae22 <_malloc_r+0xd6>
 800ad9a:	2c00      	cmp	r4, #0
 800ad9c:	d04b      	beq.n	800ae36 <_malloc_r+0xea>
 800ad9e:	6823      	ldr	r3, [r4, #0]
 800ada0:	4639      	mov	r1, r7
 800ada2:	4630      	mov	r0, r6
 800ada4:	eb04 0903 	add.w	r9, r4, r3
 800ada8:	f000 fdce 	bl	800b948 <_sbrk_r>
 800adac:	4581      	cmp	r9, r0
 800adae:	d142      	bne.n	800ae36 <_malloc_r+0xea>
 800adb0:	6821      	ldr	r1, [r4, #0]
 800adb2:	1a6d      	subs	r5, r5, r1
 800adb4:	4629      	mov	r1, r5
 800adb6:	4630      	mov	r0, r6
 800adb8:	f7ff ffa6 	bl	800ad08 <sbrk_aligned>
 800adbc:	3001      	adds	r0, #1
 800adbe:	d03a      	beq.n	800ae36 <_malloc_r+0xea>
 800adc0:	6823      	ldr	r3, [r4, #0]
 800adc2:	442b      	add	r3, r5
 800adc4:	6023      	str	r3, [r4, #0]
 800adc6:	f8d8 3000 	ldr.w	r3, [r8]
 800adca:	685a      	ldr	r2, [r3, #4]
 800adcc:	bb62      	cbnz	r2, 800ae28 <_malloc_r+0xdc>
 800adce:	f8c8 7000 	str.w	r7, [r8]
 800add2:	e00f      	b.n	800adf4 <_malloc_r+0xa8>
 800add4:	6822      	ldr	r2, [r4, #0]
 800add6:	1b52      	subs	r2, r2, r5
 800add8:	d420      	bmi.n	800ae1c <_malloc_r+0xd0>
 800adda:	2a0b      	cmp	r2, #11
 800addc:	d917      	bls.n	800ae0e <_malloc_r+0xc2>
 800adde:	1961      	adds	r1, r4, r5
 800ade0:	42a3      	cmp	r3, r4
 800ade2:	6025      	str	r5, [r4, #0]
 800ade4:	bf18      	it	ne
 800ade6:	6059      	strne	r1, [r3, #4]
 800ade8:	6863      	ldr	r3, [r4, #4]
 800adea:	bf08      	it	eq
 800adec:	f8c8 1000 	streq.w	r1, [r8]
 800adf0:	5162      	str	r2, [r4, r5]
 800adf2:	604b      	str	r3, [r1, #4]
 800adf4:	4630      	mov	r0, r6
 800adf6:	f000 f82f 	bl	800ae58 <__malloc_unlock>
 800adfa:	f104 000b 	add.w	r0, r4, #11
 800adfe:	1d23      	adds	r3, r4, #4
 800ae00:	f020 0007 	bic.w	r0, r0, #7
 800ae04:	1ac2      	subs	r2, r0, r3
 800ae06:	bf1c      	itt	ne
 800ae08:	1a1b      	subne	r3, r3, r0
 800ae0a:	50a3      	strne	r3, [r4, r2]
 800ae0c:	e7af      	b.n	800ad6e <_malloc_r+0x22>
 800ae0e:	6862      	ldr	r2, [r4, #4]
 800ae10:	42a3      	cmp	r3, r4
 800ae12:	bf0c      	ite	eq
 800ae14:	f8c8 2000 	streq.w	r2, [r8]
 800ae18:	605a      	strne	r2, [r3, #4]
 800ae1a:	e7eb      	b.n	800adf4 <_malloc_r+0xa8>
 800ae1c:	4623      	mov	r3, r4
 800ae1e:	6864      	ldr	r4, [r4, #4]
 800ae20:	e7ae      	b.n	800ad80 <_malloc_r+0x34>
 800ae22:	463c      	mov	r4, r7
 800ae24:	687f      	ldr	r7, [r7, #4]
 800ae26:	e7b6      	b.n	800ad96 <_malloc_r+0x4a>
 800ae28:	461a      	mov	r2, r3
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	42a3      	cmp	r3, r4
 800ae2e:	d1fb      	bne.n	800ae28 <_malloc_r+0xdc>
 800ae30:	2300      	movs	r3, #0
 800ae32:	6053      	str	r3, [r2, #4]
 800ae34:	e7de      	b.n	800adf4 <_malloc_r+0xa8>
 800ae36:	230c      	movs	r3, #12
 800ae38:	6033      	str	r3, [r6, #0]
 800ae3a:	4630      	mov	r0, r6
 800ae3c:	f000 f80c 	bl	800ae58 <__malloc_unlock>
 800ae40:	e794      	b.n	800ad6c <_malloc_r+0x20>
 800ae42:	6005      	str	r5, [r0, #0]
 800ae44:	e7d6      	b.n	800adf4 <_malloc_r+0xa8>
 800ae46:	bf00      	nop
 800ae48:	20005a8c 	.word	0x20005a8c

0800ae4c <__malloc_lock>:
 800ae4c:	4801      	ldr	r0, [pc, #4]	@ (800ae54 <__malloc_lock+0x8>)
 800ae4e:	f7ff bf00 	b.w	800ac52 <__retarget_lock_acquire_recursive>
 800ae52:	bf00      	nop
 800ae54:	20005a84 	.word	0x20005a84

0800ae58 <__malloc_unlock>:
 800ae58:	4801      	ldr	r0, [pc, #4]	@ (800ae60 <__malloc_unlock+0x8>)
 800ae5a:	f7ff befb 	b.w	800ac54 <__retarget_lock_release_recursive>
 800ae5e:	bf00      	nop
 800ae60:	20005a84 	.word	0x20005a84

0800ae64 <__ssputs_r>:
 800ae64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae68:	688e      	ldr	r6, [r1, #8]
 800ae6a:	461f      	mov	r7, r3
 800ae6c:	42be      	cmp	r6, r7
 800ae6e:	680b      	ldr	r3, [r1, #0]
 800ae70:	4682      	mov	sl, r0
 800ae72:	460c      	mov	r4, r1
 800ae74:	4690      	mov	r8, r2
 800ae76:	d82d      	bhi.n	800aed4 <__ssputs_r+0x70>
 800ae78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ae80:	d026      	beq.n	800aed0 <__ssputs_r+0x6c>
 800ae82:	6965      	ldr	r5, [r4, #20]
 800ae84:	6909      	ldr	r1, [r1, #16]
 800ae86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae8a:	eba3 0901 	sub.w	r9, r3, r1
 800ae8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae92:	1c7b      	adds	r3, r7, #1
 800ae94:	444b      	add	r3, r9
 800ae96:	106d      	asrs	r5, r5, #1
 800ae98:	429d      	cmp	r5, r3
 800ae9a:	bf38      	it	cc
 800ae9c:	461d      	movcc	r5, r3
 800ae9e:	0553      	lsls	r3, r2, #21
 800aea0:	d527      	bpl.n	800aef2 <__ssputs_r+0x8e>
 800aea2:	4629      	mov	r1, r5
 800aea4:	f7ff ff52 	bl	800ad4c <_malloc_r>
 800aea8:	4606      	mov	r6, r0
 800aeaa:	b360      	cbz	r0, 800af06 <__ssputs_r+0xa2>
 800aeac:	6921      	ldr	r1, [r4, #16]
 800aeae:	464a      	mov	r2, r9
 800aeb0:	f7ff fed1 	bl	800ac56 <memcpy>
 800aeb4:	89a3      	ldrh	r3, [r4, #12]
 800aeb6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aeba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aebe:	81a3      	strh	r3, [r4, #12]
 800aec0:	6126      	str	r6, [r4, #16]
 800aec2:	6165      	str	r5, [r4, #20]
 800aec4:	444e      	add	r6, r9
 800aec6:	eba5 0509 	sub.w	r5, r5, r9
 800aeca:	6026      	str	r6, [r4, #0]
 800aecc:	60a5      	str	r5, [r4, #8]
 800aece:	463e      	mov	r6, r7
 800aed0:	42be      	cmp	r6, r7
 800aed2:	d900      	bls.n	800aed6 <__ssputs_r+0x72>
 800aed4:	463e      	mov	r6, r7
 800aed6:	6820      	ldr	r0, [r4, #0]
 800aed8:	4632      	mov	r2, r6
 800aeda:	4641      	mov	r1, r8
 800aedc:	f000 fcf8 	bl	800b8d0 <memmove>
 800aee0:	68a3      	ldr	r3, [r4, #8]
 800aee2:	1b9b      	subs	r3, r3, r6
 800aee4:	60a3      	str	r3, [r4, #8]
 800aee6:	6823      	ldr	r3, [r4, #0]
 800aee8:	4433      	add	r3, r6
 800aeea:	6023      	str	r3, [r4, #0]
 800aeec:	2000      	movs	r0, #0
 800aeee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aef2:	462a      	mov	r2, r5
 800aef4:	f000 fd38 	bl	800b968 <_realloc_r>
 800aef8:	4606      	mov	r6, r0
 800aefa:	2800      	cmp	r0, #0
 800aefc:	d1e0      	bne.n	800aec0 <__ssputs_r+0x5c>
 800aefe:	6921      	ldr	r1, [r4, #16]
 800af00:	4650      	mov	r0, sl
 800af02:	f7ff feb7 	bl	800ac74 <_free_r>
 800af06:	230c      	movs	r3, #12
 800af08:	f8ca 3000 	str.w	r3, [sl]
 800af0c:	89a3      	ldrh	r3, [r4, #12]
 800af0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af12:	81a3      	strh	r3, [r4, #12]
 800af14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af18:	e7e9      	b.n	800aeee <__ssputs_r+0x8a>
	...

0800af1c <_svfiprintf_r>:
 800af1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af20:	4698      	mov	r8, r3
 800af22:	898b      	ldrh	r3, [r1, #12]
 800af24:	061b      	lsls	r3, r3, #24
 800af26:	b09d      	sub	sp, #116	@ 0x74
 800af28:	4607      	mov	r7, r0
 800af2a:	460d      	mov	r5, r1
 800af2c:	4614      	mov	r4, r2
 800af2e:	d510      	bpl.n	800af52 <_svfiprintf_r+0x36>
 800af30:	690b      	ldr	r3, [r1, #16]
 800af32:	b973      	cbnz	r3, 800af52 <_svfiprintf_r+0x36>
 800af34:	2140      	movs	r1, #64	@ 0x40
 800af36:	f7ff ff09 	bl	800ad4c <_malloc_r>
 800af3a:	6028      	str	r0, [r5, #0]
 800af3c:	6128      	str	r0, [r5, #16]
 800af3e:	b930      	cbnz	r0, 800af4e <_svfiprintf_r+0x32>
 800af40:	230c      	movs	r3, #12
 800af42:	603b      	str	r3, [r7, #0]
 800af44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af48:	b01d      	add	sp, #116	@ 0x74
 800af4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af4e:	2340      	movs	r3, #64	@ 0x40
 800af50:	616b      	str	r3, [r5, #20]
 800af52:	2300      	movs	r3, #0
 800af54:	9309      	str	r3, [sp, #36]	@ 0x24
 800af56:	2320      	movs	r3, #32
 800af58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800af60:	2330      	movs	r3, #48	@ 0x30
 800af62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b100 <_svfiprintf_r+0x1e4>
 800af66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af6a:	f04f 0901 	mov.w	r9, #1
 800af6e:	4623      	mov	r3, r4
 800af70:	469a      	mov	sl, r3
 800af72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af76:	b10a      	cbz	r2, 800af7c <_svfiprintf_r+0x60>
 800af78:	2a25      	cmp	r2, #37	@ 0x25
 800af7a:	d1f9      	bne.n	800af70 <_svfiprintf_r+0x54>
 800af7c:	ebba 0b04 	subs.w	fp, sl, r4
 800af80:	d00b      	beq.n	800af9a <_svfiprintf_r+0x7e>
 800af82:	465b      	mov	r3, fp
 800af84:	4622      	mov	r2, r4
 800af86:	4629      	mov	r1, r5
 800af88:	4638      	mov	r0, r7
 800af8a:	f7ff ff6b 	bl	800ae64 <__ssputs_r>
 800af8e:	3001      	adds	r0, #1
 800af90:	f000 80a7 	beq.w	800b0e2 <_svfiprintf_r+0x1c6>
 800af94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af96:	445a      	add	r2, fp
 800af98:	9209      	str	r2, [sp, #36]	@ 0x24
 800af9a:	f89a 3000 	ldrb.w	r3, [sl]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	f000 809f 	beq.w	800b0e2 <_svfiprintf_r+0x1c6>
 800afa4:	2300      	movs	r3, #0
 800afa6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800afaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afae:	f10a 0a01 	add.w	sl, sl, #1
 800afb2:	9304      	str	r3, [sp, #16]
 800afb4:	9307      	str	r3, [sp, #28]
 800afb6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800afba:	931a      	str	r3, [sp, #104]	@ 0x68
 800afbc:	4654      	mov	r4, sl
 800afbe:	2205      	movs	r2, #5
 800afc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afc4:	484e      	ldr	r0, [pc, #312]	@ (800b100 <_svfiprintf_r+0x1e4>)
 800afc6:	f7f5 f903 	bl	80001d0 <memchr>
 800afca:	9a04      	ldr	r2, [sp, #16]
 800afcc:	b9d8      	cbnz	r0, 800b006 <_svfiprintf_r+0xea>
 800afce:	06d0      	lsls	r0, r2, #27
 800afd0:	bf44      	itt	mi
 800afd2:	2320      	movmi	r3, #32
 800afd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afd8:	0711      	lsls	r1, r2, #28
 800afda:	bf44      	itt	mi
 800afdc:	232b      	movmi	r3, #43	@ 0x2b
 800afde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afe2:	f89a 3000 	ldrb.w	r3, [sl]
 800afe6:	2b2a      	cmp	r3, #42	@ 0x2a
 800afe8:	d015      	beq.n	800b016 <_svfiprintf_r+0xfa>
 800afea:	9a07      	ldr	r2, [sp, #28]
 800afec:	4654      	mov	r4, sl
 800afee:	2000      	movs	r0, #0
 800aff0:	f04f 0c0a 	mov.w	ip, #10
 800aff4:	4621      	mov	r1, r4
 800aff6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800affa:	3b30      	subs	r3, #48	@ 0x30
 800affc:	2b09      	cmp	r3, #9
 800affe:	d94b      	bls.n	800b098 <_svfiprintf_r+0x17c>
 800b000:	b1b0      	cbz	r0, 800b030 <_svfiprintf_r+0x114>
 800b002:	9207      	str	r2, [sp, #28]
 800b004:	e014      	b.n	800b030 <_svfiprintf_r+0x114>
 800b006:	eba0 0308 	sub.w	r3, r0, r8
 800b00a:	fa09 f303 	lsl.w	r3, r9, r3
 800b00e:	4313      	orrs	r3, r2
 800b010:	9304      	str	r3, [sp, #16]
 800b012:	46a2      	mov	sl, r4
 800b014:	e7d2      	b.n	800afbc <_svfiprintf_r+0xa0>
 800b016:	9b03      	ldr	r3, [sp, #12]
 800b018:	1d19      	adds	r1, r3, #4
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	9103      	str	r1, [sp, #12]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	bfbb      	ittet	lt
 800b022:	425b      	neglt	r3, r3
 800b024:	f042 0202 	orrlt.w	r2, r2, #2
 800b028:	9307      	strge	r3, [sp, #28]
 800b02a:	9307      	strlt	r3, [sp, #28]
 800b02c:	bfb8      	it	lt
 800b02e:	9204      	strlt	r2, [sp, #16]
 800b030:	7823      	ldrb	r3, [r4, #0]
 800b032:	2b2e      	cmp	r3, #46	@ 0x2e
 800b034:	d10a      	bne.n	800b04c <_svfiprintf_r+0x130>
 800b036:	7863      	ldrb	r3, [r4, #1]
 800b038:	2b2a      	cmp	r3, #42	@ 0x2a
 800b03a:	d132      	bne.n	800b0a2 <_svfiprintf_r+0x186>
 800b03c:	9b03      	ldr	r3, [sp, #12]
 800b03e:	1d1a      	adds	r2, r3, #4
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	9203      	str	r2, [sp, #12]
 800b044:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b048:	3402      	adds	r4, #2
 800b04a:	9305      	str	r3, [sp, #20]
 800b04c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b110 <_svfiprintf_r+0x1f4>
 800b050:	7821      	ldrb	r1, [r4, #0]
 800b052:	2203      	movs	r2, #3
 800b054:	4650      	mov	r0, sl
 800b056:	f7f5 f8bb 	bl	80001d0 <memchr>
 800b05a:	b138      	cbz	r0, 800b06c <_svfiprintf_r+0x150>
 800b05c:	9b04      	ldr	r3, [sp, #16]
 800b05e:	eba0 000a 	sub.w	r0, r0, sl
 800b062:	2240      	movs	r2, #64	@ 0x40
 800b064:	4082      	lsls	r2, r0
 800b066:	4313      	orrs	r3, r2
 800b068:	3401      	adds	r4, #1
 800b06a:	9304      	str	r3, [sp, #16]
 800b06c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b070:	4824      	ldr	r0, [pc, #144]	@ (800b104 <_svfiprintf_r+0x1e8>)
 800b072:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b076:	2206      	movs	r2, #6
 800b078:	f7f5 f8aa 	bl	80001d0 <memchr>
 800b07c:	2800      	cmp	r0, #0
 800b07e:	d036      	beq.n	800b0ee <_svfiprintf_r+0x1d2>
 800b080:	4b21      	ldr	r3, [pc, #132]	@ (800b108 <_svfiprintf_r+0x1ec>)
 800b082:	bb1b      	cbnz	r3, 800b0cc <_svfiprintf_r+0x1b0>
 800b084:	9b03      	ldr	r3, [sp, #12]
 800b086:	3307      	adds	r3, #7
 800b088:	f023 0307 	bic.w	r3, r3, #7
 800b08c:	3308      	adds	r3, #8
 800b08e:	9303      	str	r3, [sp, #12]
 800b090:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b092:	4433      	add	r3, r6
 800b094:	9309      	str	r3, [sp, #36]	@ 0x24
 800b096:	e76a      	b.n	800af6e <_svfiprintf_r+0x52>
 800b098:	fb0c 3202 	mla	r2, ip, r2, r3
 800b09c:	460c      	mov	r4, r1
 800b09e:	2001      	movs	r0, #1
 800b0a0:	e7a8      	b.n	800aff4 <_svfiprintf_r+0xd8>
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	3401      	adds	r4, #1
 800b0a6:	9305      	str	r3, [sp, #20]
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	f04f 0c0a 	mov.w	ip, #10
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0b4:	3a30      	subs	r2, #48	@ 0x30
 800b0b6:	2a09      	cmp	r2, #9
 800b0b8:	d903      	bls.n	800b0c2 <_svfiprintf_r+0x1a6>
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d0c6      	beq.n	800b04c <_svfiprintf_r+0x130>
 800b0be:	9105      	str	r1, [sp, #20]
 800b0c0:	e7c4      	b.n	800b04c <_svfiprintf_r+0x130>
 800b0c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0c6:	4604      	mov	r4, r0
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	e7f0      	b.n	800b0ae <_svfiprintf_r+0x192>
 800b0cc:	ab03      	add	r3, sp, #12
 800b0ce:	9300      	str	r3, [sp, #0]
 800b0d0:	462a      	mov	r2, r5
 800b0d2:	4b0e      	ldr	r3, [pc, #56]	@ (800b10c <_svfiprintf_r+0x1f0>)
 800b0d4:	a904      	add	r1, sp, #16
 800b0d6:	4638      	mov	r0, r7
 800b0d8:	f3af 8000 	nop.w
 800b0dc:	1c42      	adds	r2, r0, #1
 800b0de:	4606      	mov	r6, r0
 800b0e0:	d1d6      	bne.n	800b090 <_svfiprintf_r+0x174>
 800b0e2:	89ab      	ldrh	r3, [r5, #12]
 800b0e4:	065b      	lsls	r3, r3, #25
 800b0e6:	f53f af2d 	bmi.w	800af44 <_svfiprintf_r+0x28>
 800b0ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0ec:	e72c      	b.n	800af48 <_svfiprintf_r+0x2c>
 800b0ee:	ab03      	add	r3, sp, #12
 800b0f0:	9300      	str	r3, [sp, #0]
 800b0f2:	462a      	mov	r2, r5
 800b0f4:	4b05      	ldr	r3, [pc, #20]	@ (800b10c <_svfiprintf_r+0x1f0>)
 800b0f6:	a904      	add	r1, sp, #16
 800b0f8:	4638      	mov	r0, r7
 800b0fa:	f000 f9bb 	bl	800b474 <_printf_i>
 800b0fe:	e7ed      	b.n	800b0dc <_svfiprintf_r+0x1c0>
 800b100:	0800be29 	.word	0x0800be29
 800b104:	0800be33 	.word	0x0800be33
 800b108:	00000000 	.word	0x00000000
 800b10c:	0800ae65 	.word	0x0800ae65
 800b110:	0800be2f 	.word	0x0800be2f

0800b114 <__sfputc_r>:
 800b114:	6893      	ldr	r3, [r2, #8]
 800b116:	3b01      	subs	r3, #1
 800b118:	2b00      	cmp	r3, #0
 800b11a:	b410      	push	{r4}
 800b11c:	6093      	str	r3, [r2, #8]
 800b11e:	da08      	bge.n	800b132 <__sfputc_r+0x1e>
 800b120:	6994      	ldr	r4, [r2, #24]
 800b122:	42a3      	cmp	r3, r4
 800b124:	db01      	blt.n	800b12a <__sfputc_r+0x16>
 800b126:	290a      	cmp	r1, #10
 800b128:	d103      	bne.n	800b132 <__sfputc_r+0x1e>
 800b12a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b12e:	f7ff bc2c 	b.w	800a98a <__swbuf_r>
 800b132:	6813      	ldr	r3, [r2, #0]
 800b134:	1c58      	adds	r0, r3, #1
 800b136:	6010      	str	r0, [r2, #0]
 800b138:	7019      	strb	r1, [r3, #0]
 800b13a:	4608      	mov	r0, r1
 800b13c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b140:	4770      	bx	lr

0800b142 <__sfputs_r>:
 800b142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b144:	4606      	mov	r6, r0
 800b146:	460f      	mov	r7, r1
 800b148:	4614      	mov	r4, r2
 800b14a:	18d5      	adds	r5, r2, r3
 800b14c:	42ac      	cmp	r4, r5
 800b14e:	d101      	bne.n	800b154 <__sfputs_r+0x12>
 800b150:	2000      	movs	r0, #0
 800b152:	e007      	b.n	800b164 <__sfputs_r+0x22>
 800b154:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b158:	463a      	mov	r2, r7
 800b15a:	4630      	mov	r0, r6
 800b15c:	f7ff ffda 	bl	800b114 <__sfputc_r>
 800b160:	1c43      	adds	r3, r0, #1
 800b162:	d1f3      	bne.n	800b14c <__sfputs_r+0xa>
 800b164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b168 <_vfiprintf_r>:
 800b168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b16c:	460d      	mov	r5, r1
 800b16e:	b09d      	sub	sp, #116	@ 0x74
 800b170:	4614      	mov	r4, r2
 800b172:	4698      	mov	r8, r3
 800b174:	4606      	mov	r6, r0
 800b176:	b118      	cbz	r0, 800b180 <_vfiprintf_r+0x18>
 800b178:	6a03      	ldr	r3, [r0, #32]
 800b17a:	b90b      	cbnz	r3, 800b180 <_vfiprintf_r+0x18>
 800b17c:	f7ff fae8 	bl	800a750 <__sinit>
 800b180:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b182:	07d9      	lsls	r1, r3, #31
 800b184:	d405      	bmi.n	800b192 <_vfiprintf_r+0x2a>
 800b186:	89ab      	ldrh	r3, [r5, #12]
 800b188:	059a      	lsls	r2, r3, #22
 800b18a:	d402      	bmi.n	800b192 <_vfiprintf_r+0x2a>
 800b18c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b18e:	f7ff fd60 	bl	800ac52 <__retarget_lock_acquire_recursive>
 800b192:	89ab      	ldrh	r3, [r5, #12]
 800b194:	071b      	lsls	r3, r3, #28
 800b196:	d501      	bpl.n	800b19c <_vfiprintf_r+0x34>
 800b198:	692b      	ldr	r3, [r5, #16]
 800b19a:	b99b      	cbnz	r3, 800b1c4 <_vfiprintf_r+0x5c>
 800b19c:	4629      	mov	r1, r5
 800b19e:	4630      	mov	r0, r6
 800b1a0:	f7ff fc32 	bl	800aa08 <__swsetup_r>
 800b1a4:	b170      	cbz	r0, 800b1c4 <_vfiprintf_r+0x5c>
 800b1a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1a8:	07dc      	lsls	r4, r3, #31
 800b1aa:	d504      	bpl.n	800b1b6 <_vfiprintf_r+0x4e>
 800b1ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b1b0:	b01d      	add	sp, #116	@ 0x74
 800b1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1b6:	89ab      	ldrh	r3, [r5, #12]
 800b1b8:	0598      	lsls	r0, r3, #22
 800b1ba:	d4f7      	bmi.n	800b1ac <_vfiprintf_r+0x44>
 800b1bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1be:	f7ff fd49 	bl	800ac54 <__retarget_lock_release_recursive>
 800b1c2:	e7f3      	b.n	800b1ac <_vfiprintf_r+0x44>
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1c8:	2320      	movs	r3, #32
 800b1ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1d2:	2330      	movs	r3, #48	@ 0x30
 800b1d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b384 <_vfiprintf_r+0x21c>
 800b1d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b1dc:	f04f 0901 	mov.w	r9, #1
 800b1e0:	4623      	mov	r3, r4
 800b1e2:	469a      	mov	sl, r3
 800b1e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1e8:	b10a      	cbz	r2, 800b1ee <_vfiprintf_r+0x86>
 800b1ea:	2a25      	cmp	r2, #37	@ 0x25
 800b1ec:	d1f9      	bne.n	800b1e2 <_vfiprintf_r+0x7a>
 800b1ee:	ebba 0b04 	subs.w	fp, sl, r4
 800b1f2:	d00b      	beq.n	800b20c <_vfiprintf_r+0xa4>
 800b1f4:	465b      	mov	r3, fp
 800b1f6:	4622      	mov	r2, r4
 800b1f8:	4629      	mov	r1, r5
 800b1fa:	4630      	mov	r0, r6
 800b1fc:	f7ff ffa1 	bl	800b142 <__sfputs_r>
 800b200:	3001      	adds	r0, #1
 800b202:	f000 80a7 	beq.w	800b354 <_vfiprintf_r+0x1ec>
 800b206:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b208:	445a      	add	r2, fp
 800b20a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b20c:	f89a 3000 	ldrb.w	r3, [sl]
 800b210:	2b00      	cmp	r3, #0
 800b212:	f000 809f 	beq.w	800b354 <_vfiprintf_r+0x1ec>
 800b216:	2300      	movs	r3, #0
 800b218:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b21c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b220:	f10a 0a01 	add.w	sl, sl, #1
 800b224:	9304      	str	r3, [sp, #16]
 800b226:	9307      	str	r3, [sp, #28]
 800b228:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b22c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b22e:	4654      	mov	r4, sl
 800b230:	2205      	movs	r2, #5
 800b232:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b236:	4853      	ldr	r0, [pc, #332]	@ (800b384 <_vfiprintf_r+0x21c>)
 800b238:	f7f4 ffca 	bl	80001d0 <memchr>
 800b23c:	9a04      	ldr	r2, [sp, #16]
 800b23e:	b9d8      	cbnz	r0, 800b278 <_vfiprintf_r+0x110>
 800b240:	06d1      	lsls	r1, r2, #27
 800b242:	bf44      	itt	mi
 800b244:	2320      	movmi	r3, #32
 800b246:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b24a:	0713      	lsls	r3, r2, #28
 800b24c:	bf44      	itt	mi
 800b24e:	232b      	movmi	r3, #43	@ 0x2b
 800b250:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b254:	f89a 3000 	ldrb.w	r3, [sl]
 800b258:	2b2a      	cmp	r3, #42	@ 0x2a
 800b25a:	d015      	beq.n	800b288 <_vfiprintf_r+0x120>
 800b25c:	9a07      	ldr	r2, [sp, #28]
 800b25e:	4654      	mov	r4, sl
 800b260:	2000      	movs	r0, #0
 800b262:	f04f 0c0a 	mov.w	ip, #10
 800b266:	4621      	mov	r1, r4
 800b268:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b26c:	3b30      	subs	r3, #48	@ 0x30
 800b26e:	2b09      	cmp	r3, #9
 800b270:	d94b      	bls.n	800b30a <_vfiprintf_r+0x1a2>
 800b272:	b1b0      	cbz	r0, 800b2a2 <_vfiprintf_r+0x13a>
 800b274:	9207      	str	r2, [sp, #28]
 800b276:	e014      	b.n	800b2a2 <_vfiprintf_r+0x13a>
 800b278:	eba0 0308 	sub.w	r3, r0, r8
 800b27c:	fa09 f303 	lsl.w	r3, r9, r3
 800b280:	4313      	orrs	r3, r2
 800b282:	9304      	str	r3, [sp, #16]
 800b284:	46a2      	mov	sl, r4
 800b286:	e7d2      	b.n	800b22e <_vfiprintf_r+0xc6>
 800b288:	9b03      	ldr	r3, [sp, #12]
 800b28a:	1d19      	adds	r1, r3, #4
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	9103      	str	r1, [sp, #12]
 800b290:	2b00      	cmp	r3, #0
 800b292:	bfbb      	ittet	lt
 800b294:	425b      	neglt	r3, r3
 800b296:	f042 0202 	orrlt.w	r2, r2, #2
 800b29a:	9307      	strge	r3, [sp, #28]
 800b29c:	9307      	strlt	r3, [sp, #28]
 800b29e:	bfb8      	it	lt
 800b2a0:	9204      	strlt	r2, [sp, #16]
 800b2a2:	7823      	ldrb	r3, [r4, #0]
 800b2a4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2a6:	d10a      	bne.n	800b2be <_vfiprintf_r+0x156>
 800b2a8:	7863      	ldrb	r3, [r4, #1]
 800b2aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2ac:	d132      	bne.n	800b314 <_vfiprintf_r+0x1ac>
 800b2ae:	9b03      	ldr	r3, [sp, #12]
 800b2b0:	1d1a      	adds	r2, r3, #4
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	9203      	str	r2, [sp, #12]
 800b2b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2ba:	3402      	adds	r4, #2
 800b2bc:	9305      	str	r3, [sp, #20]
 800b2be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b394 <_vfiprintf_r+0x22c>
 800b2c2:	7821      	ldrb	r1, [r4, #0]
 800b2c4:	2203      	movs	r2, #3
 800b2c6:	4650      	mov	r0, sl
 800b2c8:	f7f4 ff82 	bl	80001d0 <memchr>
 800b2cc:	b138      	cbz	r0, 800b2de <_vfiprintf_r+0x176>
 800b2ce:	9b04      	ldr	r3, [sp, #16]
 800b2d0:	eba0 000a 	sub.w	r0, r0, sl
 800b2d4:	2240      	movs	r2, #64	@ 0x40
 800b2d6:	4082      	lsls	r2, r0
 800b2d8:	4313      	orrs	r3, r2
 800b2da:	3401      	adds	r4, #1
 800b2dc:	9304      	str	r3, [sp, #16]
 800b2de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2e2:	4829      	ldr	r0, [pc, #164]	@ (800b388 <_vfiprintf_r+0x220>)
 800b2e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b2e8:	2206      	movs	r2, #6
 800b2ea:	f7f4 ff71 	bl	80001d0 <memchr>
 800b2ee:	2800      	cmp	r0, #0
 800b2f0:	d03f      	beq.n	800b372 <_vfiprintf_r+0x20a>
 800b2f2:	4b26      	ldr	r3, [pc, #152]	@ (800b38c <_vfiprintf_r+0x224>)
 800b2f4:	bb1b      	cbnz	r3, 800b33e <_vfiprintf_r+0x1d6>
 800b2f6:	9b03      	ldr	r3, [sp, #12]
 800b2f8:	3307      	adds	r3, #7
 800b2fa:	f023 0307 	bic.w	r3, r3, #7
 800b2fe:	3308      	adds	r3, #8
 800b300:	9303      	str	r3, [sp, #12]
 800b302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b304:	443b      	add	r3, r7
 800b306:	9309      	str	r3, [sp, #36]	@ 0x24
 800b308:	e76a      	b.n	800b1e0 <_vfiprintf_r+0x78>
 800b30a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b30e:	460c      	mov	r4, r1
 800b310:	2001      	movs	r0, #1
 800b312:	e7a8      	b.n	800b266 <_vfiprintf_r+0xfe>
 800b314:	2300      	movs	r3, #0
 800b316:	3401      	adds	r4, #1
 800b318:	9305      	str	r3, [sp, #20]
 800b31a:	4619      	mov	r1, r3
 800b31c:	f04f 0c0a 	mov.w	ip, #10
 800b320:	4620      	mov	r0, r4
 800b322:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b326:	3a30      	subs	r2, #48	@ 0x30
 800b328:	2a09      	cmp	r2, #9
 800b32a:	d903      	bls.n	800b334 <_vfiprintf_r+0x1cc>
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d0c6      	beq.n	800b2be <_vfiprintf_r+0x156>
 800b330:	9105      	str	r1, [sp, #20]
 800b332:	e7c4      	b.n	800b2be <_vfiprintf_r+0x156>
 800b334:	fb0c 2101 	mla	r1, ip, r1, r2
 800b338:	4604      	mov	r4, r0
 800b33a:	2301      	movs	r3, #1
 800b33c:	e7f0      	b.n	800b320 <_vfiprintf_r+0x1b8>
 800b33e:	ab03      	add	r3, sp, #12
 800b340:	9300      	str	r3, [sp, #0]
 800b342:	462a      	mov	r2, r5
 800b344:	4b12      	ldr	r3, [pc, #72]	@ (800b390 <_vfiprintf_r+0x228>)
 800b346:	a904      	add	r1, sp, #16
 800b348:	4630      	mov	r0, r6
 800b34a:	f3af 8000 	nop.w
 800b34e:	4607      	mov	r7, r0
 800b350:	1c78      	adds	r0, r7, #1
 800b352:	d1d6      	bne.n	800b302 <_vfiprintf_r+0x19a>
 800b354:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b356:	07d9      	lsls	r1, r3, #31
 800b358:	d405      	bmi.n	800b366 <_vfiprintf_r+0x1fe>
 800b35a:	89ab      	ldrh	r3, [r5, #12]
 800b35c:	059a      	lsls	r2, r3, #22
 800b35e:	d402      	bmi.n	800b366 <_vfiprintf_r+0x1fe>
 800b360:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b362:	f7ff fc77 	bl	800ac54 <__retarget_lock_release_recursive>
 800b366:	89ab      	ldrh	r3, [r5, #12]
 800b368:	065b      	lsls	r3, r3, #25
 800b36a:	f53f af1f 	bmi.w	800b1ac <_vfiprintf_r+0x44>
 800b36e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b370:	e71e      	b.n	800b1b0 <_vfiprintf_r+0x48>
 800b372:	ab03      	add	r3, sp, #12
 800b374:	9300      	str	r3, [sp, #0]
 800b376:	462a      	mov	r2, r5
 800b378:	4b05      	ldr	r3, [pc, #20]	@ (800b390 <_vfiprintf_r+0x228>)
 800b37a:	a904      	add	r1, sp, #16
 800b37c:	4630      	mov	r0, r6
 800b37e:	f000 f879 	bl	800b474 <_printf_i>
 800b382:	e7e4      	b.n	800b34e <_vfiprintf_r+0x1e6>
 800b384:	0800be29 	.word	0x0800be29
 800b388:	0800be33 	.word	0x0800be33
 800b38c:	00000000 	.word	0x00000000
 800b390:	0800b143 	.word	0x0800b143
 800b394:	0800be2f 	.word	0x0800be2f

0800b398 <_printf_common>:
 800b398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b39c:	4616      	mov	r6, r2
 800b39e:	4698      	mov	r8, r3
 800b3a0:	688a      	ldr	r2, [r1, #8]
 800b3a2:	690b      	ldr	r3, [r1, #16]
 800b3a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	bfb8      	it	lt
 800b3ac:	4613      	movlt	r3, r2
 800b3ae:	6033      	str	r3, [r6, #0]
 800b3b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b3b4:	4607      	mov	r7, r0
 800b3b6:	460c      	mov	r4, r1
 800b3b8:	b10a      	cbz	r2, 800b3be <_printf_common+0x26>
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	6033      	str	r3, [r6, #0]
 800b3be:	6823      	ldr	r3, [r4, #0]
 800b3c0:	0699      	lsls	r1, r3, #26
 800b3c2:	bf42      	ittt	mi
 800b3c4:	6833      	ldrmi	r3, [r6, #0]
 800b3c6:	3302      	addmi	r3, #2
 800b3c8:	6033      	strmi	r3, [r6, #0]
 800b3ca:	6825      	ldr	r5, [r4, #0]
 800b3cc:	f015 0506 	ands.w	r5, r5, #6
 800b3d0:	d106      	bne.n	800b3e0 <_printf_common+0x48>
 800b3d2:	f104 0a19 	add.w	sl, r4, #25
 800b3d6:	68e3      	ldr	r3, [r4, #12]
 800b3d8:	6832      	ldr	r2, [r6, #0]
 800b3da:	1a9b      	subs	r3, r3, r2
 800b3dc:	42ab      	cmp	r3, r5
 800b3de:	dc26      	bgt.n	800b42e <_printf_common+0x96>
 800b3e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b3e4:	6822      	ldr	r2, [r4, #0]
 800b3e6:	3b00      	subs	r3, #0
 800b3e8:	bf18      	it	ne
 800b3ea:	2301      	movne	r3, #1
 800b3ec:	0692      	lsls	r2, r2, #26
 800b3ee:	d42b      	bmi.n	800b448 <_printf_common+0xb0>
 800b3f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b3f4:	4641      	mov	r1, r8
 800b3f6:	4638      	mov	r0, r7
 800b3f8:	47c8      	blx	r9
 800b3fa:	3001      	adds	r0, #1
 800b3fc:	d01e      	beq.n	800b43c <_printf_common+0xa4>
 800b3fe:	6823      	ldr	r3, [r4, #0]
 800b400:	6922      	ldr	r2, [r4, #16]
 800b402:	f003 0306 	and.w	r3, r3, #6
 800b406:	2b04      	cmp	r3, #4
 800b408:	bf02      	ittt	eq
 800b40a:	68e5      	ldreq	r5, [r4, #12]
 800b40c:	6833      	ldreq	r3, [r6, #0]
 800b40e:	1aed      	subeq	r5, r5, r3
 800b410:	68a3      	ldr	r3, [r4, #8]
 800b412:	bf0c      	ite	eq
 800b414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b418:	2500      	movne	r5, #0
 800b41a:	4293      	cmp	r3, r2
 800b41c:	bfc4      	itt	gt
 800b41e:	1a9b      	subgt	r3, r3, r2
 800b420:	18ed      	addgt	r5, r5, r3
 800b422:	2600      	movs	r6, #0
 800b424:	341a      	adds	r4, #26
 800b426:	42b5      	cmp	r5, r6
 800b428:	d11a      	bne.n	800b460 <_printf_common+0xc8>
 800b42a:	2000      	movs	r0, #0
 800b42c:	e008      	b.n	800b440 <_printf_common+0xa8>
 800b42e:	2301      	movs	r3, #1
 800b430:	4652      	mov	r2, sl
 800b432:	4641      	mov	r1, r8
 800b434:	4638      	mov	r0, r7
 800b436:	47c8      	blx	r9
 800b438:	3001      	adds	r0, #1
 800b43a:	d103      	bne.n	800b444 <_printf_common+0xac>
 800b43c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b444:	3501      	adds	r5, #1
 800b446:	e7c6      	b.n	800b3d6 <_printf_common+0x3e>
 800b448:	18e1      	adds	r1, r4, r3
 800b44a:	1c5a      	adds	r2, r3, #1
 800b44c:	2030      	movs	r0, #48	@ 0x30
 800b44e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b452:	4422      	add	r2, r4
 800b454:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b458:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b45c:	3302      	adds	r3, #2
 800b45e:	e7c7      	b.n	800b3f0 <_printf_common+0x58>
 800b460:	2301      	movs	r3, #1
 800b462:	4622      	mov	r2, r4
 800b464:	4641      	mov	r1, r8
 800b466:	4638      	mov	r0, r7
 800b468:	47c8      	blx	r9
 800b46a:	3001      	adds	r0, #1
 800b46c:	d0e6      	beq.n	800b43c <_printf_common+0xa4>
 800b46e:	3601      	adds	r6, #1
 800b470:	e7d9      	b.n	800b426 <_printf_common+0x8e>
	...

0800b474 <_printf_i>:
 800b474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b478:	7e0f      	ldrb	r7, [r1, #24]
 800b47a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b47c:	2f78      	cmp	r7, #120	@ 0x78
 800b47e:	4691      	mov	r9, r2
 800b480:	4680      	mov	r8, r0
 800b482:	460c      	mov	r4, r1
 800b484:	469a      	mov	sl, r3
 800b486:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b48a:	d807      	bhi.n	800b49c <_printf_i+0x28>
 800b48c:	2f62      	cmp	r7, #98	@ 0x62
 800b48e:	d80a      	bhi.n	800b4a6 <_printf_i+0x32>
 800b490:	2f00      	cmp	r7, #0
 800b492:	f000 80d2 	beq.w	800b63a <_printf_i+0x1c6>
 800b496:	2f58      	cmp	r7, #88	@ 0x58
 800b498:	f000 80b9 	beq.w	800b60e <_printf_i+0x19a>
 800b49c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b4a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b4a4:	e03a      	b.n	800b51c <_printf_i+0xa8>
 800b4a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b4aa:	2b15      	cmp	r3, #21
 800b4ac:	d8f6      	bhi.n	800b49c <_printf_i+0x28>
 800b4ae:	a101      	add	r1, pc, #4	@ (adr r1, 800b4b4 <_printf_i+0x40>)
 800b4b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b4b4:	0800b50d 	.word	0x0800b50d
 800b4b8:	0800b521 	.word	0x0800b521
 800b4bc:	0800b49d 	.word	0x0800b49d
 800b4c0:	0800b49d 	.word	0x0800b49d
 800b4c4:	0800b49d 	.word	0x0800b49d
 800b4c8:	0800b49d 	.word	0x0800b49d
 800b4cc:	0800b521 	.word	0x0800b521
 800b4d0:	0800b49d 	.word	0x0800b49d
 800b4d4:	0800b49d 	.word	0x0800b49d
 800b4d8:	0800b49d 	.word	0x0800b49d
 800b4dc:	0800b49d 	.word	0x0800b49d
 800b4e0:	0800b621 	.word	0x0800b621
 800b4e4:	0800b54b 	.word	0x0800b54b
 800b4e8:	0800b5db 	.word	0x0800b5db
 800b4ec:	0800b49d 	.word	0x0800b49d
 800b4f0:	0800b49d 	.word	0x0800b49d
 800b4f4:	0800b643 	.word	0x0800b643
 800b4f8:	0800b49d 	.word	0x0800b49d
 800b4fc:	0800b54b 	.word	0x0800b54b
 800b500:	0800b49d 	.word	0x0800b49d
 800b504:	0800b49d 	.word	0x0800b49d
 800b508:	0800b5e3 	.word	0x0800b5e3
 800b50c:	6833      	ldr	r3, [r6, #0]
 800b50e:	1d1a      	adds	r2, r3, #4
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	6032      	str	r2, [r6, #0]
 800b514:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b518:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b51c:	2301      	movs	r3, #1
 800b51e:	e09d      	b.n	800b65c <_printf_i+0x1e8>
 800b520:	6833      	ldr	r3, [r6, #0]
 800b522:	6820      	ldr	r0, [r4, #0]
 800b524:	1d19      	adds	r1, r3, #4
 800b526:	6031      	str	r1, [r6, #0]
 800b528:	0606      	lsls	r6, r0, #24
 800b52a:	d501      	bpl.n	800b530 <_printf_i+0xbc>
 800b52c:	681d      	ldr	r5, [r3, #0]
 800b52e:	e003      	b.n	800b538 <_printf_i+0xc4>
 800b530:	0645      	lsls	r5, r0, #25
 800b532:	d5fb      	bpl.n	800b52c <_printf_i+0xb8>
 800b534:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b538:	2d00      	cmp	r5, #0
 800b53a:	da03      	bge.n	800b544 <_printf_i+0xd0>
 800b53c:	232d      	movs	r3, #45	@ 0x2d
 800b53e:	426d      	negs	r5, r5
 800b540:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b544:	4859      	ldr	r0, [pc, #356]	@ (800b6ac <_printf_i+0x238>)
 800b546:	230a      	movs	r3, #10
 800b548:	e011      	b.n	800b56e <_printf_i+0xfa>
 800b54a:	6821      	ldr	r1, [r4, #0]
 800b54c:	6833      	ldr	r3, [r6, #0]
 800b54e:	0608      	lsls	r0, r1, #24
 800b550:	f853 5b04 	ldr.w	r5, [r3], #4
 800b554:	d402      	bmi.n	800b55c <_printf_i+0xe8>
 800b556:	0649      	lsls	r1, r1, #25
 800b558:	bf48      	it	mi
 800b55a:	b2ad      	uxthmi	r5, r5
 800b55c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b55e:	4853      	ldr	r0, [pc, #332]	@ (800b6ac <_printf_i+0x238>)
 800b560:	6033      	str	r3, [r6, #0]
 800b562:	bf14      	ite	ne
 800b564:	230a      	movne	r3, #10
 800b566:	2308      	moveq	r3, #8
 800b568:	2100      	movs	r1, #0
 800b56a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b56e:	6866      	ldr	r6, [r4, #4]
 800b570:	60a6      	str	r6, [r4, #8]
 800b572:	2e00      	cmp	r6, #0
 800b574:	bfa2      	ittt	ge
 800b576:	6821      	ldrge	r1, [r4, #0]
 800b578:	f021 0104 	bicge.w	r1, r1, #4
 800b57c:	6021      	strge	r1, [r4, #0]
 800b57e:	b90d      	cbnz	r5, 800b584 <_printf_i+0x110>
 800b580:	2e00      	cmp	r6, #0
 800b582:	d04b      	beq.n	800b61c <_printf_i+0x1a8>
 800b584:	4616      	mov	r6, r2
 800b586:	fbb5 f1f3 	udiv	r1, r5, r3
 800b58a:	fb03 5711 	mls	r7, r3, r1, r5
 800b58e:	5dc7      	ldrb	r7, [r0, r7]
 800b590:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b594:	462f      	mov	r7, r5
 800b596:	42bb      	cmp	r3, r7
 800b598:	460d      	mov	r5, r1
 800b59a:	d9f4      	bls.n	800b586 <_printf_i+0x112>
 800b59c:	2b08      	cmp	r3, #8
 800b59e:	d10b      	bne.n	800b5b8 <_printf_i+0x144>
 800b5a0:	6823      	ldr	r3, [r4, #0]
 800b5a2:	07df      	lsls	r7, r3, #31
 800b5a4:	d508      	bpl.n	800b5b8 <_printf_i+0x144>
 800b5a6:	6923      	ldr	r3, [r4, #16]
 800b5a8:	6861      	ldr	r1, [r4, #4]
 800b5aa:	4299      	cmp	r1, r3
 800b5ac:	bfde      	ittt	le
 800b5ae:	2330      	movle	r3, #48	@ 0x30
 800b5b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b5b4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b5b8:	1b92      	subs	r2, r2, r6
 800b5ba:	6122      	str	r2, [r4, #16]
 800b5bc:	f8cd a000 	str.w	sl, [sp]
 800b5c0:	464b      	mov	r3, r9
 800b5c2:	aa03      	add	r2, sp, #12
 800b5c4:	4621      	mov	r1, r4
 800b5c6:	4640      	mov	r0, r8
 800b5c8:	f7ff fee6 	bl	800b398 <_printf_common>
 800b5cc:	3001      	adds	r0, #1
 800b5ce:	d14a      	bne.n	800b666 <_printf_i+0x1f2>
 800b5d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b5d4:	b004      	add	sp, #16
 800b5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5da:	6823      	ldr	r3, [r4, #0]
 800b5dc:	f043 0320 	orr.w	r3, r3, #32
 800b5e0:	6023      	str	r3, [r4, #0]
 800b5e2:	4833      	ldr	r0, [pc, #204]	@ (800b6b0 <_printf_i+0x23c>)
 800b5e4:	2778      	movs	r7, #120	@ 0x78
 800b5e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b5ea:	6823      	ldr	r3, [r4, #0]
 800b5ec:	6831      	ldr	r1, [r6, #0]
 800b5ee:	061f      	lsls	r7, r3, #24
 800b5f0:	f851 5b04 	ldr.w	r5, [r1], #4
 800b5f4:	d402      	bmi.n	800b5fc <_printf_i+0x188>
 800b5f6:	065f      	lsls	r7, r3, #25
 800b5f8:	bf48      	it	mi
 800b5fa:	b2ad      	uxthmi	r5, r5
 800b5fc:	6031      	str	r1, [r6, #0]
 800b5fe:	07d9      	lsls	r1, r3, #31
 800b600:	bf44      	itt	mi
 800b602:	f043 0320 	orrmi.w	r3, r3, #32
 800b606:	6023      	strmi	r3, [r4, #0]
 800b608:	b11d      	cbz	r5, 800b612 <_printf_i+0x19e>
 800b60a:	2310      	movs	r3, #16
 800b60c:	e7ac      	b.n	800b568 <_printf_i+0xf4>
 800b60e:	4827      	ldr	r0, [pc, #156]	@ (800b6ac <_printf_i+0x238>)
 800b610:	e7e9      	b.n	800b5e6 <_printf_i+0x172>
 800b612:	6823      	ldr	r3, [r4, #0]
 800b614:	f023 0320 	bic.w	r3, r3, #32
 800b618:	6023      	str	r3, [r4, #0]
 800b61a:	e7f6      	b.n	800b60a <_printf_i+0x196>
 800b61c:	4616      	mov	r6, r2
 800b61e:	e7bd      	b.n	800b59c <_printf_i+0x128>
 800b620:	6833      	ldr	r3, [r6, #0]
 800b622:	6825      	ldr	r5, [r4, #0]
 800b624:	6961      	ldr	r1, [r4, #20]
 800b626:	1d18      	adds	r0, r3, #4
 800b628:	6030      	str	r0, [r6, #0]
 800b62a:	062e      	lsls	r6, r5, #24
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	d501      	bpl.n	800b634 <_printf_i+0x1c0>
 800b630:	6019      	str	r1, [r3, #0]
 800b632:	e002      	b.n	800b63a <_printf_i+0x1c6>
 800b634:	0668      	lsls	r0, r5, #25
 800b636:	d5fb      	bpl.n	800b630 <_printf_i+0x1bc>
 800b638:	8019      	strh	r1, [r3, #0]
 800b63a:	2300      	movs	r3, #0
 800b63c:	6123      	str	r3, [r4, #16]
 800b63e:	4616      	mov	r6, r2
 800b640:	e7bc      	b.n	800b5bc <_printf_i+0x148>
 800b642:	6833      	ldr	r3, [r6, #0]
 800b644:	1d1a      	adds	r2, r3, #4
 800b646:	6032      	str	r2, [r6, #0]
 800b648:	681e      	ldr	r6, [r3, #0]
 800b64a:	6862      	ldr	r2, [r4, #4]
 800b64c:	2100      	movs	r1, #0
 800b64e:	4630      	mov	r0, r6
 800b650:	f7f4 fdbe 	bl	80001d0 <memchr>
 800b654:	b108      	cbz	r0, 800b65a <_printf_i+0x1e6>
 800b656:	1b80      	subs	r0, r0, r6
 800b658:	6060      	str	r0, [r4, #4]
 800b65a:	6863      	ldr	r3, [r4, #4]
 800b65c:	6123      	str	r3, [r4, #16]
 800b65e:	2300      	movs	r3, #0
 800b660:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b664:	e7aa      	b.n	800b5bc <_printf_i+0x148>
 800b666:	6923      	ldr	r3, [r4, #16]
 800b668:	4632      	mov	r2, r6
 800b66a:	4649      	mov	r1, r9
 800b66c:	4640      	mov	r0, r8
 800b66e:	47d0      	blx	sl
 800b670:	3001      	adds	r0, #1
 800b672:	d0ad      	beq.n	800b5d0 <_printf_i+0x15c>
 800b674:	6823      	ldr	r3, [r4, #0]
 800b676:	079b      	lsls	r3, r3, #30
 800b678:	d413      	bmi.n	800b6a2 <_printf_i+0x22e>
 800b67a:	68e0      	ldr	r0, [r4, #12]
 800b67c:	9b03      	ldr	r3, [sp, #12]
 800b67e:	4298      	cmp	r0, r3
 800b680:	bfb8      	it	lt
 800b682:	4618      	movlt	r0, r3
 800b684:	e7a6      	b.n	800b5d4 <_printf_i+0x160>
 800b686:	2301      	movs	r3, #1
 800b688:	4632      	mov	r2, r6
 800b68a:	4649      	mov	r1, r9
 800b68c:	4640      	mov	r0, r8
 800b68e:	47d0      	blx	sl
 800b690:	3001      	adds	r0, #1
 800b692:	d09d      	beq.n	800b5d0 <_printf_i+0x15c>
 800b694:	3501      	adds	r5, #1
 800b696:	68e3      	ldr	r3, [r4, #12]
 800b698:	9903      	ldr	r1, [sp, #12]
 800b69a:	1a5b      	subs	r3, r3, r1
 800b69c:	42ab      	cmp	r3, r5
 800b69e:	dcf2      	bgt.n	800b686 <_printf_i+0x212>
 800b6a0:	e7eb      	b.n	800b67a <_printf_i+0x206>
 800b6a2:	2500      	movs	r5, #0
 800b6a4:	f104 0619 	add.w	r6, r4, #25
 800b6a8:	e7f5      	b.n	800b696 <_printf_i+0x222>
 800b6aa:	bf00      	nop
 800b6ac:	0800be3a 	.word	0x0800be3a
 800b6b0:	0800be4b 	.word	0x0800be4b

0800b6b4 <__sflush_r>:
 800b6b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6bc:	0716      	lsls	r6, r2, #28
 800b6be:	4605      	mov	r5, r0
 800b6c0:	460c      	mov	r4, r1
 800b6c2:	d454      	bmi.n	800b76e <__sflush_r+0xba>
 800b6c4:	684b      	ldr	r3, [r1, #4]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	dc02      	bgt.n	800b6d0 <__sflush_r+0x1c>
 800b6ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	dd48      	ble.n	800b762 <__sflush_r+0xae>
 800b6d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b6d2:	2e00      	cmp	r6, #0
 800b6d4:	d045      	beq.n	800b762 <__sflush_r+0xae>
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b6dc:	682f      	ldr	r7, [r5, #0]
 800b6de:	6a21      	ldr	r1, [r4, #32]
 800b6e0:	602b      	str	r3, [r5, #0]
 800b6e2:	d030      	beq.n	800b746 <__sflush_r+0x92>
 800b6e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b6e6:	89a3      	ldrh	r3, [r4, #12]
 800b6e8:	0759      	lsls	r1, r3, #29
 800b6ea:	d505      	bpl.n	800b6f8 <__sflush_r+0x44>
 800b6ec:	6863      	ldr	r3, [r4, #4]
 800b6ee:	1ad2      	subs	r2, r2, r3
 800b6f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b6f2:	b10b      	cbz	r3, 800b6f8 <__sflush_r+0x44>
 800b6f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b6f6:	1ad2      	subs	r2, r2, r3
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b6fc:	6a21      	ldr	r1, [r4, #32]
 800b6fe:	4628      	mov	r0, r5
 800b700:	47b0      	blx	r6
 800b702:	1c43      	adds	r3, r0, #1
 800b704:	89a3      	ldrh	r3, [r4, #12]
 800b706:	d106      	bne.n	800b716 <__sflush_r+0x62>
 800b708:	6829      	ldr	r1, [r5, #0]
 800b70a:	291d      	cmp	r1, #29
 800b70c:	d82b      	bhi.n	800b766 <__sflush_r+0xb2>
 800b70e:	4a2a      	ldr	r2, [pc, #168]	@ (800b7b8 <__sflush_r+0x104>)
 800b710:	410a      	asrs	r2, r1
 800b712:	07d6      	lsls	r6, r2, #31
 800b714:	d427      	bmi.n	800b766 <__sflush_r+0xb2>
 800b716:	2200      	movs	r2, #0
 800b718:	6062      	str	r2, [r4, #4]
 800b71a:	04d9      	lsls	r1, r3, #19
 800b71c:	6922      	ldr	r2, [r4, #16]
 800b71e:	6022      	str	r2, [r4, #0]
 800b720:	d504      	bpl.n	800b72c <__sflush_r+0x78>
 800b722:	1c42      	adds	r2, r0, #1
 800b724:	d101      	bne.n	800b72a <__sflush_r+0x76>
 800b726:	682b      	ldr	r3, [r5, #0]
 800b728:	b903      	cbnz	r3, 800b72c <__sflush_r+0x78>
 800b72a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b72c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b72e:	602f      	str	r7, [r5, #0]
 800b730:	b1b9      	cbz	r1, 800b762 <__sflush_r+0xae>
 800b732:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b736:	4299      	cmp	r1, r3
 800b738:	d002      	beq.n	800b740 <__sflush_r+0x8c>
 800b73a:	4628      	mov	r0, r5
 800b73c:	f7ff fa9a 	bl	800ac74 <_free_r>
 800b740:	2300      	movs	r3, #0
 800b742:	6363      	str	r3, [r4, #52]	@ 0x34
 800b744:	e00d      	b.n	800b762 <__sflush_r+0xae>
 800b746:	2301      	movs	r3, #1
 800b748:	4628      	mov	r0, r5
 800b74a:	47b0      	blx	r6
 800b74c:	4602      	mov	r2, r0
 800b74e:	1c50      	adds	r0, r2, #1
 800b750:	d1c9      	bne.n	800b6e6 <__sflush_r+0x32>
 800b752:	682b      	ldr	r3, [r5, #0]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d0c6      	beq.n	800b6e6 <__sflush_r+0x32>
 800b758:	2b1d      	cmp	r3, #29
 800b75a:	d001      	beq.n	800b760 <__sflush_r+0xac>
 800b75c:	2b16      	cmp	r3, #22
 800b75e:	d11e      	bne.n	800b79e <__sflush_r+0xea>
 800b760:	602f      	str	r7, [r5, #0]
 800b762:	2000      	movs	r0, #0
 800b764:	e022      	b.n	800b7ac <__sflush_r+0xf8>
 800b766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b76a:	b21b      	sxth	r3, r3
 800b76c:	e01b      	b.n	800b7a6 <__sflush_r+0xf2>
 800b76e:	690f      	ldr	r7, [r1, #16]
 800b770:	2f00      	cmp	r7, #0
 800b772:	d0f6      	beq.n	800b762 <__sflush_r+0xae>
 800b774:	0793      	lsls	r3, r2, #30
 800b776:	680e      	ldr	r6, [r1, #0]
 800b778:	bf08      	it	eq
 800b77a:	694b      	ldreq	r3, [r1, #20]
 800b77c:	600f      	str	r7, [r1, #0]
 800b77e:	bf18      	it	ne
 800b780:	2300      	movne	r3, #0
 800b782:	eba6 0807 	sub.w	r8, r6, r7
 800b786:	608b      	str	r3, [r1, #8]
 800b788:	f1b8 0f00 	cmp.w	r8, #0
 800b78c:	dde9      	ble.n	800b762 <__sflush_r+0xae>
 800b78e:	6a21      	ldr	r1, [r4, #32]
 800b790:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b792:	4643      	mov	r3, r8
 800b794:	463a      	mov	r2, r7
 800b796:	4628      	mov	r0, r5
 800b798:	47b0      	blx	r6
 800b79a:	2800      	cmp	r0, #0
 800b79c:	dc08      	bgt.n	800b7b0 <__sflush_r+0xfc>
 800b79e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7a6:	81a3      	strh	r3, [r4, #12]
 800b7a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7b0:	4407      	add	r7, r0
 800b7b2:	eba8 0800 	sub.w	r8, r8, r0
 800b7b6:	e7e7      	b.n	800b788 <__sflush_r+0xd4>
 800b7b8:	dfbffffe 	.word	0xdfbffffe

0800b7bc <_fflush_r>:
 800b7bc:	b538      	push	{r3, r4, r5, lr}
 800b7be:	690b      	ldr	r3, [r1, #16]
 800b7c0:	4605      	mov	r5, r0
 800b7c2:	460c      	mov	r4, r1
 800b7c4:	b913      	cbnz	r3, 800b7cc <_fflush_r+0x10>
 800b7c6:	2500      	movs	r5, #0
 800b7c8:	4628      	mov	r0, r5
 800b7ca:	bd38      	pop	{r3, r4, r5, pc}
 800b7cc:	b118      	cbz	r0, 800b7d6 <_fflush_r+0x1a>
 800b7ce:	6a03      	ldr	r3, [r0, #32]
 800b7d0:	b90b      	cbnz	r3, 800b7d6 <_fflush_r+0x1a>
 800b7d2:	f7fe ffbd 	bl	800a750 <__sinit>
 800b7d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d0f3      	beq.n	800b7c6 <_fflush_r+0xa>
 800b7de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b7e0:	07d0      	lsls	r0, r2, #31
 800b7e2:	d404      	bmi.n	800b7ee <_fflush_r+0x32>
 800b7e4:	0599      	lsls	r1, r3, #22
 800b7e6:	d402      	bmi.n	800b7ee <_fflush_r+0x32>
 800b7e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7ea:	f7ff fa32 	bl	800ac52 <__retarget_lock_acquire_recursive>
 800b7ee:	4628      	mov	r0, r5
 800b7f0:	4621      	mov	r1, r4
 800b7f2:	f7ff ff5f 	bl	800b6b4 <__sflush_r>
 800b7f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b7f8:	07da      	lsls	r2, r3, #31
 800b7fa:	4605      	mov	r5, r0
 800b7fc:	d4e4      	bmi.n	800b7c8 <_fflush_r+0xc>
 800b7fe:	89a3      	ldrh	r3, [r4, #12]
 800b800:	059b      	lsls	r3, r3, #22
 800b802:	d4e1      	bmi.n	800b7c8 <_fflush_r+0xc>
 800b804:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b806:	f7ff fa25 	bl	800ac54 <__retarget_lock_release_recursive>
 800b80a:	e7dd      	b.n	800b7c8 <_fflush_r+0xc>

0800b80c <__swhatbuf_r>:
 800b80c:	b570      	push	{r4, r5, r6, lr}
 800b80e:	460c      	mov	r4, r1
 800b810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b814:	2900      	cmp	r1, #0
 800b816:	b096      	sub	sp, #88	@ 0x58
 800b818:	4615      	mov	r5, r2
 800b81a:	461e      	mov	r6, r3
 800b81c:	da0d      	bge.n	800b83a <__swhatbuf_r+0x2e>
 800b81e:	89a3      	ldrh	r3, [r4, #12]
 800b820:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b824:	f04f 0100 	mov.w	r1, #0
 800b828:	bf14      	ite	ne
 800b82a:	2340      	movne	r3, #64	@ 0x40
 800b82c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b830:	2000      	movs	r0, #0
 800b832:	6031      	str	r1, [r6, #0]
 800b834:	602b      	str	r3, [r5, #0]
 800b836:	b016      	add	sp, #88	@ 0x58
 800b838:	bd70      	pop	{r4, r5, r6, pc}
 800b83a:	466a      	mov	r2, sp
 800b83c:	f000 f862 	bl	800b904 <_fstat_r>
 800b840:	2800      	cmp	r0, #0
 800b842:	dbec      	blt.n	800b81e <__swhatbuf_r+0x12>
 800b844:	9901      	ldr	r1, [sp, #4]
 800b846:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b84a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b84e:	4259      	negs	r1, r3
 800b850:	4159      	adcs	r1, r3
 800b852:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b856:	e7eb      	b.n	800b830 <__swhatbuf_r+0x24>

0800b858 <__smakebuf_r>:
 800b858:	898b      	ldrh	r3, [r1, #12]
 800b85a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b85c:	079d      	lsls	r5, r3, #30
 800b85e:	4606      	mov	r6, r0
 800b860:	460c      	mov	r4, r1
 800b862:	d507      	bpl.n	800b874 <__smakebuf_r+0x1c>
 800b864:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b868:	6023      	str	r3, [r4, #0]
 800b86a:	6123      	str	r3, [r4, #16]
 800b86c:	2301      	movs	r3, #1
 800b86e:	6163      	str	r3, [r4, #20]
 800b870:	b003      	add	sp, #12
 800b872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b874:	ab01      	add	r3, sp, #4
 800b876:	466a      	mov	r2, sp
 800b878:	f7ff ffc8 	bl	800b80c <__swhatbuf_r>
 800b87c:	9f00      	ldr	r7, [sp, #0]
 800b87e:	4605      	mov	r5, r0
 800b880:	4639      	mov	r1, r7
 800b882:	4630      	mov	r0, r6
 800b884:	f7ff fa62 	bl	800ad4c <_malloc_r>
 800b888:	b948      	cbnz	r0, 800b89e <__smakebuf_r+0x46>
 800b88a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b88e:	059a      	lsls	r2, r3, #22
 800b890:	d4ee      	bmi.n	800b870 <__smakebuf_r+0x18>
 800b892:	f023 0303 	bic.w	r3, r3, #3
 800b896:	f043 0302 	orr.w	r3, r3, #2
 800b89a:	81a3      	strh	r3, [r4, #12]
 800b89c:	e7e2      	b.n	800b864 <__smakebuf_r+0xc>
 800b89e:	89a3      	ldrh	r3, [r4, #12]
 800b8a0:	6020      	str	r0, [r4, #0]
 800b8a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8a6:	81a3      	strh	r3, [r4, #12]
 800b8a8:	9b01      	ldr	r3, [sp, #4]
 800b8aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b8ae:	b15b      	cbz	r3, 800b8c8 <__smakebuf_r+0x70>
 800b8b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8b4:	4630      	mov	r0, r6
 800b8b6:	f000 f837 	bl	800b928 <_isatty_r>
 800b8ba:	b128      	cbz	r0, 800b8c8 <__smakebuf_r+0x70>
 800b8bc:	89a3      	ldrh	r3, [r4, #12]
 800b8be:	f023 0303 	bic.w	r3, r3, #3
 800b8c2:	f043 0301 	orr.w	r3, r3, #1
 800b8c6:	81a3      	strh	r3, [r4, #12]
 800b8c8:	89a3      	ldrh	r3, [r4, #12]
 800b8ca:	431d      	orrs	r5, r3
 800b8cc:	81a5      	strh	r5, [r4, #12]
 800b8ce:	e7cf      	b.n	800b870 <__smakebuf_r+0x18>

0800b8d0 <memmove>:
 800b8d0:	4288      	cmp	r0, r1
 800b8d2:	b510      	push	{r4, lr}
 800b8d4:	eb01 0402 	add.w	r4, r1, r2
 800b8d8:	d902      	bls.n	800b8e0 <memmove+0x10>
 800b8da:	4284      	cmp	r4, r0
 800b8dc:	4623      	mov	r3, r4
 800b8de:	d807      	bhi.n	800b8f0 <memmove+0x20>
 800b8e0:	1e43      	subs	r3, r0, #1
 800b8e2:	42a1      	cmp	r1, r4
 800b8e4:	d008      	beq.n	800b8f8 <memmove+0x28>
 800b8e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b8ee:	e7f8      	b.n	800b8e2 <memmove+0x12>
 800b8f0:	4402      	add	r2, r0
 800b8f2:	4601      	mov	r1, r0
 800b8f4:	428a      	cmp	r2, r1
 800b8f6:	d100      	bne.n	800b8fa <memmove+0x2a>
 800b8f8:	bd10      	pop	{r4, pc}
 800b8fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b8fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b902:	e7f7      	b.n	800b8f4 <memmove+0x24>

0800b904 <_fstat_r>:
 800b904:	b538      	push	{r3, r4, r5, lr}
 800b906:	4d07      	ldr	r5, [pc, #28]	@ (800b924 <_fstat_r+0x20>)
 800b908:	2300      	movs	r3, #0
 800b90a:	4604      	mov	r4, r0
 800b90c:	4608      	mov	r0, r1
 800b90e:	4611      	mov	r1, r2
 800b910:	602b      	str	r3, [r5, #0]
 800b912:	f7f5 fcca 	bl	80012aa <_fstat>
 800b916:	1c43      	adds	r3, r0, #1
 800b918:	d102      	bne.n	800b920 <_fstat_r+0x1c>
 800b91a:	682b      	ldr	r3, [r5, #0]
 800b91c:	b103      	cbz	r3, 800b920 <_fstat_r+0x1c>
 800b91e:	6023      	str	r3, [r4, #0]
 800b920:	bd38      	pop	{r3, r4, r5, pc}
 800b922:	bf00      	nop
 800b924:	20005a80 	.word	0x20005a80

0800b928 <_isatty_r>:
 800b928:	b538      	push	{r3, r4, r5, lr}
 800b92a:	4d06      	ldr	r5, [pc, #24]	@ (800b944 <_isatty_r+0x1c>)
 800b92c:	2300      	movs	r3, #0
 800b92e:	4604      	mov	r4, r0
 800b930:	4608      	mov	r0, r1
 800b932:	602b      	str	r3, [r5, #0]
 800b934:	f7f5 fcc9 	bl	80012ca <_isatty>
 800b938:	1c43      	adds	r3, r0, #1
 800b93a:	d102      	bne.n	800b942 <_isatty_r+0x1a>
 800b93c:	682b      	ldr	r3, [r5, #0]
 800b93e:	b103      	cbz	r3, 800b942 <_isatty_r+0x1a>
 800b940:	6023      	str	r3, [r4, #0]
 800b942:	bd38      	pop	{r3, r4, r5, pc}
 800b944:	20005a80 	.word	0x20005a80

0800b948 <_sbrk_r>:
 800b948:	b538      	push	{r3, r4, r5, lr}
 800b94a:	4d06      	ldr	r5, [pc, #24]	@ (800b964 <_sbrk_r+0x1c>)
 800b94c:	2300      	movs	r3, #0
 800b94e:	4604      	mov	r4, r0
 800b950:	4608      	mov	r0, r1
 800b952:	602b      	str	r3, [r5, #0]
 800b954:	f7f5 fcd2 	bl	80012fc <_sbrk>
 800b958:	1c43      	adds	r3, r0, #1
 800b95a:	d102      	bne.n	800b962 <_sbrk_r+0x1a>
 800b95c:	682b      	ldr	r3, [r5, #0]
 800b95e:	b103      	cbz	r3, 800b962 <_sbrk_r+0x1a>
 800b960:	6023      	str	r3, [r4, #0]
 800b962:	bd38      	pop	{r3, r4, r5, pc}
 800b964:	20005a80 	.word	0x20005a80

0800b968 <_realloc_r>:
 800b968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b96c:	4680      	mov	r8, r0
 800b96e:	4615      	mov	r5, r2
 800b970:	460c      	mov	r4, r1
 800b972:	b921      	cbnz	r1, 800b97e <_realloc_r+0x16>
 800b974:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b978:	4611      	mov	r1, r2
 800b97a:	f7ff b9e7 	b.w	800ad4c <_malloc_r>
 800b97e:	b92a      	cbnz	r2, 800b98c <_realloc_r+0x24>
 800b980:	f7ff f978 	bl	800ac74 <_free_r>
 800b984:	2400      	movs	r4, #0
 800b986:	4620      	mov	r0, r4
 800b988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b98c:	f000 f81a 	bl	800b9c4 <_malloc_usable_size_r>
 800b990:	4285      	cmp	r5, r0
 800b992:	4606      	mov	r6, r0
 800b994:	d802      	bhi.n	800b99c <_realloc_r+0x34>
 800b996:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b99a:	d8f4      	bhi.n	800b986 <_realloc_r+0x1e>
 800b99c:	4629      	mov	r1, r5
 800b99e:	4640      	mov	r0, r8
 800b9a0:	f7ff f9d4 	bl	800ad4c <_malloc_r>
 800b9a4:	4607      	mov	r7, r0
 800b9a6:	2800      	cmp	r0, #0
 800b9a8:	d0ec      	beq.n	800b984 <_realloc_r+0x1c>
 800b9aa:	42b5      	cmp	r5, r6
 800b9ac:	462a      	mov	r2, r5
 800b9ae:	4621      	mov	r1, r4
 800b9b0:	bf28      	it	cs
 800b9b2:	4632      	movcs	r2, r6
 800b9b4:	f7ff f94f 	bl	800ac56 <memcpy>
 800b9b8:	4621      	mov	r1, r4
 800b9ba:	4640      	mov	r0, r8
 800b9bc:	f7ff f95a 	bl	800ac74 <_free_r>
 800b9c0:	463c      	mov	r4, r7
 800b9c2:	e7e0      	b.n	800b986 <_realloc_r+0x1e>

0800b9c4 <_malloc_usable_size_r>:
 800b9c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9c8:	1f18      	subs	r0, r3, #4
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	bfbc      	itt	lt
 800b9ce:	580b      	ldrlt	r3, [r1, r0]
 800b9d0:	18c0      	addlt	r0, r0, r3
 800b9d2:	4770      	bx	lr

0800b9d4 <_init>:
 800b9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9d6:	bf00      	nop
 800b9d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9da:	bc08      	pop	{r3}
 800b9dc:	469e      	mov	lr, r3
 800b9de:	4770      	bx	lr

0800b9e0 <_fini>:
 800b9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9e2:	bf00      	nop
 800b9e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9e6:	bc08      	pop	{r3}
 800b9e8:	469e      	mov	lr, r3
 800b9ea:	4770      	bx	lr
