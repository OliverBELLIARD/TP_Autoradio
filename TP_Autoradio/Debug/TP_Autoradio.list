
TP_Autoradio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a60  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  08007bf0  08007bf0  00008bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f80  08007f80  00009074  2**0
                  CONTENTS
  4 .ARM          00000008  08007f80  08007f80  00008f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f88  08007f88  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f88  08007f88  00008f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f8c  08007f8c  00008f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08007f90  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005720  20000074  08008004  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005794  08008004  00009794  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f1c  00000000  00000000  000090a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036ec  00000000  00000000  0001cfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  000206b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cfa  00000000  00000000  000217c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028fa3  00000000  00000000  000224c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141c4  00000000  00000000  0004b465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f29f0  00000000  00000000  0005f629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00152019  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e10  00000000  00000000  0015205c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00156e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007bd8 	.word	0x08007bd8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007bd8 	.word	0x08007bd8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	4a07      	ldr	r2, [pc, #28]	@ (800058c <vApplicationGetIdleTaskMemory+0x2c>)
 8000570:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	4a06      	ldr	r2, [pc, #24]	@ (8000590 <vApplicationGetIdleTaskMemory+0x30>)
 8000576:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2280      	movs	r2, #128	@ 0x80
 800057c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000094 	.word	0x20000094
 8000590:	200000e8 	.word	0x200000e8

08000594 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000594:	b5b0      	push	{r4, r5, r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800059a:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <MX_FREERTOS_Init+0x30>)
 800059c:	1d3c      	adds	r4, r7, #4
 800059e:	461d      	mov	r5, r3
 80005a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f004 f928 	bl	8004806 <osThreadCreate>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a03      	ldr	r2, [pc, #12]	@ (80005c8 <MX_FREERTOS_Init+0x34>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005bc:	bf00      	nop
 80005be:	3720      	adds	r7, #32
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bdb0      	pop	{r4, r5, r7, pc}
 80005c4:	08007bfc 	.word	0x08007bfc
 80005c8:	20000090 	.word	0x20000090

080005cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005d4:	2001      	movs	r0, #1
 80005d6:	f004 f962 	bl	800489e <osDelay>
 80005da:	e7fb      	b.n	80005d4 <StartDefaultTask+0x8>

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	@ 0x28
 80005e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	4b2b      	ldr	r3, [pc, #172]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f6:	4a2a      	ldr	r2, [pc, #168]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 80005f8:	f043 0304 	orr.w	r3, r3, #4
 80005fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005fe:	4b28      	ldr	r3, [pc, #160]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000602:	f003 0304 	and.w	r3, r3, #4
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060a:	4b25      	ldr	r3, [pc, #148]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060e:	4a24      	ldr	r2, [pc, #144]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000614:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000616:	4b22      	ldr	r3, [pc, #136]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b1f      	ldr	r3, [pc, #124]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000626:	4a1e      	ldr	r2, [pc, #120]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800062e:	4b1c      	ldr	r3, [pc, #112]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	4b19      	ldr	r3, [pc, #100]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063e:	4a18      	ldr	r2, [pc, #96]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000646:	4b16      	ldr	r3, [pc, #88]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2120      	movs	r1, #32
 8000656:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800065a:	f001 f979 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800065e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000664:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	480b      	ldr	r0, [pc, #44]	@ (80006a4 <MX_GPIO_Init+0xc8>)
 8000676:	f000 ffc1 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800067a:	2320      	movs	r3, #32
 800067c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067e:	2301      	movs	r3, #1
 8000680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000686:	2300      	movs	r3, #0
 8000688:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4619      	mov	r1, r3
 8000690:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000694:	f000 ffb2 	bl	80015fc <HAL_GPIO_Init>

}
 8000698:	bf00      	nop
 800069a:	3728      	adds	r7, #40	@ 0x28
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40021000 	.word	0x40021000
 80006a4:	48000800 	.word	0x48000800

080006a8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006ac:	f3bf 8f4f 	dsb	sy
}
 80006b0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80006b2:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <__NVIC_SystemReset+0x24>)
 80006b4:	68db      	ldr	r3, [r3, #12]
 80006b6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80006ba:	4904      	ldr	r1, [pc, #16]	@ (80006cc <__NVIC_SystemReset+0x24>)
 80006bc:	4b04      	ldr	r3, [pc, #16]	@ (80006d0 <__NVIC_SystemReset+0x28>)
 80006be:	4313      	orrs	r3, r2
 80006c0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80006c2:	f3bf 8f4f 	dsb	sy
}
 80006c6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <__NVIC_SystemReset+0x20>
 80006cc:	e000ed00 	.word	0xe000ed00
 80006d0:	05fa0004 	.word	0x05fa0004

080006d4 <__io_putchar>:
 * @brief Transmit a character over UART.
 * @param ch: Character to transmit.
 * @retval int: The transmitted character.
 */
int __io_putchar(int ch)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80006dc:	1d39      	adds	r1, r7, #4
 80006de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006e2:	2201      	movs	r2, #1
 80006e4:	4803      	ldr	r0, [pc, #12]	@ (80006f4 <__io_putchar+0x20>)
 80006e6:	f002 fcd3 	bl	8003090 <HAL_UART_Transmit>

	return ch;
 80006ea:	687b      	ldr	r3, [r7, #4]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	200002f0 	.word	0x200002f0

080006f8 <Error_Handler_xTaskCreate>:
/**
 * @brief  Gestion d'erreurs de création de tâche.
 * @param	BaseType_t	Retour de xTaskCreate.
 */
void Error_Handler_xTaskCreate(BaseType_t r)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	/* Vérification si la tâche a été créée avec succès */
	if (pdPASS == r) {
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d103      	bne.n	800070e <Error_Handler_xTaskCreate+0x16>
		/* Si la tâche est créée avec succès, démarrer le scheduler */
#if (LOGS)
		printf("Tâche crée avec succès\r\n");
 8000706:	480c      	ldr	r0, [pc, #48]	@ (8000738 <Error_Handler_xTaskCreate+0x40>)
 8000708:	f006 fa18 	bl	8006b3c <puts>
		/* Cas improbable : code d'erreur non prévu pour xTaskCreate */
		printf("Erreur inconnue lors de la création de la tâche\r\n");
		Error_Handler();  	// Gestion d'erreur générique
		NVIC_SystemReset(); // Réinitialiser le microcontrôleur
	}
}
 800070c:	e010      	b.n	8000730 <Error_Handler_xTaskCreate+0x38>
	} else if (errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY == r) {
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000714:	d105      	bne.n	8000722 <Error_Handler_xTaskCreate+0x2a>
		printf("Erreur: Mémoire insuffisante\r\n");
 8000716:	4809      	ldr	r0, [pc, #36]	@ (800073c <Error_Handler_xTaskCreate+0x44>)
 8000718:	f006 fa10 	bl	8006b3c <puts>
		Error_Handler();
 800071c:	f000 f9b3 	bl	8000a86 <Error_Handler>
}
 8000720:	e006      	b.n	8000730 <Error_Handler_xTaskCreate+0x38>
		printf("Erreur inconnue lors de la création de la tâche\r\n");
 8000722:	4807      	ldr	r0, [pc, #28]	@ (8000740 <Error_Handler_xTaskCreate+0x48>)
 8000724:	f006 fa0a 	bl	8006b3c <puts>
		Error_Handler();  	// Gestion d'erreur générique
 8000728:	f000 f9ad 	bl	8000a86 <Error_Handler>
		NVIC_SystemReset(); // Réinitialiser le microcontrôleur
 800072c:	f7ff ffbc 	bl	80006a8 <__NVIC_SystemReset>
}
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	08007c18 	.word	0x08007c18
 800073c:	08007c34 	.word	0x08007c34
 8000740:	08007c54 	.word	0x08007c54

08000744 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a04      	ldr	r2, [pc, #16]	@ (8000764 <HAL_UART_RxCpltCallback+0x20>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d101      	bne.n	800075a <HAL_UART_RxCpltCallback+0x16>
	{
		shell_uart_receive_irq_cb();	// C'est la fonction qui donne le sémaphore!
 8000756:	f000 fb6b 	bl	8000e30 <shell_uart_receive_irq_cb>
	}
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40004400 	.word	0x40004400

08000768 <fonction>:

int fonction(int argc, char ** argv)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
	if (argc > 1)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2b01      	cmp	r3, #1
 8000776:	dd14      	ble.n	80007a2 <fonction+0x3a>
	{
		for (int i = 0; i < argc; i++)
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	e00d      	b.n	800079a <fonction+0x32>
		{
			printf("Paramètre [%d] = %s\r\n", i+1, argv[i]);
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	1c59      	adds	r1, r3, #1
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	683a      	ldr	r2, [r7, #0]
 8000788:	4413      	add	r3, r2
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	461a      	mov	r2, r3
 800078e:	4807      	ldr	r0, [pc, #28]	@ (80007ac <fonction+0x44>)
 8000790:	f006 f96c 	bl	8006a6c <iprintf>
		for (int i = 0; i < argc; i++)
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	3301      	adds	r3, #1
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	68fa      	ldr	r2, [r7, #12]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	429a      	cmp	r2, r3
 80007a0:	dbed      	blt.n	800077e <fonction+0x16>
		}
	}

	return 0;
 80007a2:	2300      	movs	r3, #0
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	08007c88 	.word	0x08007c88

080007b0 <calcul>:

int calcul(int argc, char ** argv)
{
 80007b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
	if (argc >= 4)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2b03      	cmp	r3, #3
 80007be:	dd68      	ble.n	8000892 <calcul+0xe2>
	{
		switch(argv[2][0])
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	3308      	adds	r3, #8
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b78      	cmp	r3, #120	@ 0x78
 80007ca:	d03f      	beq.n	800084c <calcul+0x9c>
 80007cc:	2b78      	cmp	r3, #120	@ 0x78
 80007ce:	dc59      	bgt.n	8000884 <calcul+0xd4>
 80007d0:	2b2d      	cmp	r3, #45	@ 0x2d
 80007d2:	d020      	beq.n	8000816 <calcul+0x66>
 80007d4:	2b2d      	cmp	r3, #45	@ 0x2d
 80007d6:	dc55      	bgt.n	8000884 <calcul+0xd4>
 80007d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80007da:	d037      	beq.n	800084c <calcul+0x9c>
 80007dc:	2b2b      	cmp	r3, #43	@ 0x2b
 80007de:	d151      	bne.n	8000884 <calcul+0xd4>
		{
		case '+':
			printf("%s + %s = %d\r\n", argv[1], argv[3], atoi(argv[1])+atoi(argv[3]));
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	3304      	adds	r3, #4
 80007e4:	681c      	ldr	r4, [r3, #0]
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	330c      	adds	r3, #12
 80007ea:	681d      	ldr	r5, [r3, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	3304      	adds	r3, #4
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f005 fff0 	bl	80067d8 <atoi>
 80007f8:	4606      	mov	r6, r0
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	330c      	adds	r3, #12
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4618      	mov	r0, r3
 8000802:	f005 ffe9 	bl	80067d8 <atoi>
 8000806:	4603      	mov	r3, r0
 8000808:	4433      	add	r3, r6
 800080a:	462a      	mov	r2, r5
 800080c:	4621      	mov	r1, r4
 800080e:	4823      	ldr	r0, [pc, #140]	@ (800089c <calcul+0xec>)
 8000810:	f006 f92c 	bl	8006a6c <iprintf>
			break;
 8000814:	e03d      	b.n	8000892 <calcul+0xe2>
		case '-':
			printf("%s - %s = %d\r\n", argv[1], argv[3], atoi(argv[1])-atoi(argv[3]));
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	3304      	adds	r3, #4
 800081a:	681c      	ldr	r4, [r3, #0]
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	330c      	adds	r3, #12
 8000820:	681d      	ldr	r5, [r3, #0]
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	3304      	adds	r3, #4
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4618      	mov	r0, r3
 800082a:	f005 ffd5 	bl	80067d8 <atoi>
 800082e:	4606      	mov	r6, r0
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	330c      	adds	r3, #12
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4618      	mov	r0, r3
 8000838:	f005 ffce 	bl	80067d8 <atoi>
 800083c:	4603      	mov	r3, r0
 800083e:	1af3      	subs	r3, r6, r3
 8000840:	462a      	mov	r2, r5
 8000842:	4621      	mov	r1, r4
 8000844:	4816      	ldr	r0, [pc, #88]	@ (80008a0 <calcul+0xf0>)
 8000846:	f006 f911 	bl	8006a6c <iprintf>
			break;
 800084a:	e022      	b.n	8000892 <calcul+0xe2>
		case '*':
		case 'x':
			printf("%s * %s = %d\r\n", argv[1], argv[3], atoi(argv[1])*atoi(argv[3]));
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	3304      	adds	r3, #4
 8000850:	681c      	ldr	r4, [r3, #0]
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	330c      	adds	r3, #12
 8000856:	681d      	ldr	r5, [r3, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	3304      	adds	r3, #4
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4618      	mov	r0, r3
 8000860:	f005 ffba 	bl	80067d8 <atoi>
 8000864:	4606      	mov	r6, r0
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	330c      	adds	r3, #12
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f005 ffb3 	bl	80067d8 <atoi>
 8000872:	4603      	mov	r3, r0
 8000874:	fb06 f303 	mul.w	r3, r6, r3
 8000878:	462a      	mov	r2, r5
 800087a:	4621      	mov	r1, r4
 800087c:	4809      	ldr	r0, [pc, #36]	@ (80008a4 <calcul+0xf4>)
 800087e:	f006 f8f5 	bl	8006a6c <iprintf>
			break;
 8000882:	e006      	b.n	8000892 <calcul+0xe2>
		default:
			printf("Opération '%s' non supporté!\r\n", argv[2]);
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	3308      	adds	r3, #8
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4619      	mov	r1, r3
 800088c:	4806      	ldr	r0, [pc, #24]	@ (80008a8 <calcul+0xf8>)
 800088e:	f006 f8ed 	bl	8006a6c <iprintf>
		}
	}

	return 0;
 8000892:	2300      	movs	r3, #0
}
 8000894:	4618      	mov	r0, r3
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800089c:	08007ca0 	.word	0x08007ca0
 80008a0:	08007cb0 	.word	0x08007cb0
 80008a4:	08007cc0 	.word	0x08007cc0
 80008a8:	08007cd0 	.word	0x08007cd0

080008ac <addition>:

int addition(int argc, char ** argv)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
	if (argc > 1)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	dd24      	ble.n	8000906 <addition+0x5a>
	{
		int somme = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
		for (int i = 1; i < argc; i++)
 80008c0:	2301      	movs	r3, #1
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	e017      	b.n	80008f6 <addition+0x4a>
		{
			printf(" + %s", argv[i]);
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	683a      	ldr	r2, [r7, #0]
 80008cc:	4413      	add	r3, r2
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4619      	mov	r1, r3
 80008d2:	480f      	ldr	r0, [pc, #60]	@ (8000910 <addition+0x64>)
 80008d4:	f006 f8ca 	bl	8006a6c <iprintf>
			somme = somme + atoi(argv[i]);
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	683a      	ldr	r2, [r7, #0]
 80008de:	4413      	add	r3, r2
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f005 ff78 	bl	80067d8 <atoi>
 80008e8:	4602      	mov	r2, r0
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	4413      	add	r3, r2
 80008ee:	60fb      	str	r3, [r7, #12]
		for (int i = 1; i < argc; i++)
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	3301      	adds	r3, #1
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	68ba      	ldr	r2, [r7, #8]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	dbe3      	blt.n	80008c6 <addition+0x1a>
		}

		printf(" = %d\r\n", somme);
 80008fe:	68f9      	ldr	r1, [r7, #12]
 8000900:	4804      	ldr	r0, [pc, #16]	@ (8000914 <addition+0x68>)
 8000902:	f006 f8b3 	bl	8006a6c <iprintf>
	}
	return 0;
 8000906:	2300      	movs	r3, #0
}
 8000908:	4618      	mov	r0, r3
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	08007cf4 	.word	0x08007cf4
 8000914:	08007cfc 	.word	0x08007cfc

08000918 <task_shell>:
		vTaskDelay( duree / portTICK_PERIOD_MS );  // Délai de duree en ms
	}
}

void task_shell(void * unused)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
#if (LOGS)
	printf("%s created\r\n", pcTaskGetName(xTaskGetCurrentTaskHandle()));
 8000920:	f005 f968 	bl	8005bf4 <xTaskGetCurrentTaskHandle>
 8000924:	4603      	mov	r3, r0
 8000926:	4618      	mov	r0, r3
 8000928:	f004 fe42 	bl	80055b0 <pcTaskGetName>
 800092c:	4603      	mov	r3, r0
 800092e:	4619      	mov	r1, r3
 8000930:	480c      	ldr	r0, [pc, #48]	@ (8000964 <task_shell+0x4c>)
 8000932:	f006 f89b 	bl	8006a6c <iprintf>
#endif

	shell_init();
 8000936:	f000 fb07 	bl	8000f48 <shell_init>
	shell_add('f', fonction, "Une fonction inutile");
 800093a:	4a0b      	ldr	r2, [pc, #44]	@ (8000968 <task_shell+0x50>)
 800093c:	490b      	ldr	r1, [pc, #44]	@ (800096c <task_shell+0x54>)
 800093e:	2066      	movs	r0, #102	@ 0x66
 8000940:	f000 fb3a 	bl	8000fb8 <shell_add>
	shell_add('a', addition, "Effectue une somme");
 8000944:	4a0a      	ldr	r2, [pc, #40]	@ (8000970 <task_shell+0x58>)
 8000946:	490b      	ldr	r1, [pc, #44]	@ (8000974 <task_shell+0x5c>)
 8000948:	2061      	movs	r0, #97	@ 0x61
 800094a:	f000 fb35 	bl	8000fb8 <shell_add>
	shell_add('c', calcul, "Opération entre 2 nombres");
 800094e:	4a0a      	ldr	r2, [pc, #40]	@ (8000978 <task_shell+0x60>)
 8000950:	490a      	ldr	r1, [pc, #40]	@ (800097c <task_shell+0x64>)
 8000952:	2063      	movs	r0, #99	@ 0x63
 8000954:	f000 fb30 	bl	8000fb8 <shell_add>
	shell_run();	// boucle infinie
 8000958:	f000 fbda 	bl	8001110 <shell_run>
}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	08007d04 	.word	0x08007d04
 8000968:	08007d14 	.word	0x08007d14
 800096c:	08000769 	.word	0x08000769
 8000970:	08007d2c 	.word	0x08007d2c
 8000974:	080008ad 	.word	0x080008ad
 8000978:	08007d40 	.word	0x08007d40
 800097c:	080007b1 	.word	0x080007b1

08000980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000986:	f000 fc2d 	bl	80011e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098a:	f000 f82b 	bl	80009e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098e:	f7ff fe25 	bl	80005dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000992:	f000 f98f 	bl	8000cb4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	// Test printf
	printf("******* TP Autoradio *******\r\n");
 8000996:	480f      	ldr	r0, [pc, #60]	@ (80009d4 <main+0x54>)
 8000998:	f006 f8d0 	bl	8006b3c <puts>

	// Turn on LED2 (Green)
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800099c:	2120      	movs	r1, #32
 800099e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a2:	f000 ffed 	bl	8001980 <HAL_GPIO_TogglePin>
					(void *) DELAY_LED_TOGGLE, // Parameter passed into the task.
					1,// Priority at which the task is created.
					&h_task_LED)); // Used to pass out the created task's handle.
					*/
	// Shell task
	Error_Handler_xTaskCreate(
 80009a6:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <main+0x58>)
 80009a8:	9301      	str	r3, [sp, #4]
 80009aa:	2302      	movs	r3, #2
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	2300      	movs	r3, #0
 80009b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009b4:	4909      	ldr	r1, [pc, #36]	@ (80009dc <main+0x5c>)
 80009b6:	480a      	ldr	r0, [pc, #40]	@ (80009e0 <main+0x60>)
 80009b8:	f004 fb7e 	bl	80050b8 <xTaskCreate>
 80009bc:	4603      	mov	r3, r0
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fe9a 	bl	80006f8 <Error_Handler_xTaskCreate>
					NULL,
					TASK_SHELL_PRIORITY,
					&h_task_shell));

	// OS Start
	vTaskStartScheduler();
 80009c4:	f004 fce6 	bl	8005394 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80009c8:	f7ff fde4 	bl	8000594 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80009cc:	f003 ff14 	bl	80047f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <main+0x50>
 80009d4:	08007d5c 	.word	0x08007d5c
 80009d8:	200002e8 	.word	0x200002e8
 80009dc:	08007d7c 	.word	0x08007d7c
 80009e0:	08000919 	.word	0x08000919

080009e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b096      	sub	sp, #88	@ 0x58
 80009e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	2244      	movs	r2, #68	@ 0x44
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f006 f9b6 	bl	8006d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f8:	463b      	mov	r3, r7
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a06:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a0a:	f000 ffe1 	bl	80019d0 <HAL_PWREx_ControlVoltageScaling>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a14:	f000 f837 	bl	8000a86 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a20:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a22:	2310      	movs	r3, #16
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a26:	2302      	movs	r3, #2
 8000a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a32:	230a      	movs	r3, #10
 8000a34:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a36:	2307      	movs	r3, #7
 8000a38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4618      	mov	r0, r3
 8000a48:	f001 f818 	bl	8001a7c <HAL_RCC_OscConfig>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a52:	f000 f818 	bl	8000a86 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a56:	230f      	movs	r3, #15
 8000a58:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	2104      	movs	r1, #4
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 fbe0 	bl	8002234 <HAL_RCC_ClockConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a7a:	f000 f804 	bl	8000a86 <Error_Handler>
  }
}
 8000a7e:	bf00      	nop
 8000a80:	3758      	adds	r7, #88	@ 0x58
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8a:	b672      	cpsid	i
}
 8000a8c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a8e:	bf00      	nop
 8000a90:	e7fd      	b.n	8000a8e <Error_Handler+0x8>
	...

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a9e:	4a10      	ldr	r2, [pc, #64]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000ab8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000abc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000abe:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	210f      	movs	r1, #15
 8000ace:	f06f 0001 	mvn.w	r0, #1
 8000ad2:	f000 fcde 	bl	8001492 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <NMI_Handler+0x4>

08000aec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <MemManage_Handler+0x4>

08000afc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <BusFault_Handler+0x4>

08000b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <UsageFault_Handler+0x4>

08000b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b1e:	f000 fbbd 	bl	800129c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b22:	f005 f877 	bl	8005c14 <xTaskGetSchedulerState>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d001      	beq.n	8000b30 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b2c:	f005 fbd4 	bl	80062d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b38:	4802      	ldr	r0, [pc, #8]	@ (8000b44 <USART2_IRQHandler+0x10>)
 8000b3a:	f002 fb7f 	bl	800323c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200002f0 	.word	0x200002f0

08000b48 <_read>:
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	e00a      	b.n	8000b70 <_read+0x28>
 8000b5a:	f3af 8000 	nop.w
 8000b5e:	4601      	mov	r1, r0
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	1c5a      	adds	r2, r3, #1
 8000b64:	60ba      	str	r2, [r7, #8]
 8000b66:	b2ca      	uxtb	r2, r1
 8000b68:	701a      	strb	r2, [r3, #0]
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	697a      	ldr	r2, [r7, #20]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	dbf0      	blt.n	8000b5a <_read+0x12>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <_write>:
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b086      	sub	sp, #24
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	60f8      	str	r0, [r7, #12]
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	e009      	b.n	8000ba8 <_write+0x26>
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	1c5a      	adds	r2, r3, #1
 8000b98:	60ba      	str	r2, [r7, #8]
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fd99 	bl	80006d4 <__io_putchar>
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697a      	ldr	r2, [r7, #20]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	dbf1      	blt.n	8000b94 <_write+0x12>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <_close>:
 8000bba:	b480      	push	{r7}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <_fstat>:
 8000bd2:	b480      	push	{r7}
 8000bd4:	b083      	sub	sp, #12
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
 8000bda:	6039      	str	r1, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	2300      	movs	r3, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <_isatty>:
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <_lseek>:
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
 8000c14:	2300      	movs	r3, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <_sbrk>:
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	4a14      	ldr	r2, [pc, #80]	@ (8000c80 <_sbrk+0x5c>)
 8000c2e:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <_sbrk+0x60>)
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	4b13      	ldr	r3, [pc, #76]	@ (8000c88 <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d102      	bne.n	8000c46 <_sbrk+0x22>
 8000c40:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <_sbrk+0x64>)
 8000c42:	4a12      	ldr	r2, [pc, #72]	@ (8000c8c <_sbrk+0x68>)
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	4b10      	ldr	r3, [pc, #64]	@ (8000c88 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d207      	bcs.n	8000c64 <_sbrk+0x40>
 8000c54:	f006 f8d4 	bl	8006e00 <__errno>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c62:	e009      	b.n	8000c78 <_sbrk+0x54>
 8000c64:	4b08      	ldr	r3, [pc, #32]	@ (8000c88 <_sbrk+0x64>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	4b07      	ldr	r3, [pc, #28]	@ (8000c88 <_sbrk+0x64>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	4a05      	ldr	r2, [pc, #20]	@ (8000c88 <_sbrk+0x64>)
 8000c74:	6013      	str	r3, [r2, #0]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20018000 	.word	0x20018000
 8000c84:	00000400 	.word	0x00000400
 8000c88:	200002ec 	.word	0x200002ec
 8000c8c:	20005798 	.word	0x20005798

08000c90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <SystemInit+0x20>)
 8000c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c9a:	4a05      	ldr	r2, [pc, #20]	@ (8000cb0 <SystemInit+0x20>)
 8000c9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ca0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cb8:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <MX_USART2_UART_Init+0x58>)
 8000cba:	4a15      	ldr	r2, [pc, #84]	@ (8000d10 <MX_USART2_UART_Init+0x5c>)
 8000cbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cbe:	4b13      	ldr	r3, [pc, #76]	@ (8000d0c <MX_USART2_UART_Init+0x58>)
 8000cc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <MX_USART2_UART_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d0c <MX_USART2_UART_Init+0x58>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <MX_USART2_UART_Init+0x58>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <MX_USART2_UART_Init+0x58>)
 8000cda:	220c      	movs	r2, #12
 8000cdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	@ (8000d0c <MX_USART2_UART_Init+0x58>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	@ (8000d0c <MX_USART2_UART_Init+0x58>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cea:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <MX_USART2_UART_Init+0x58>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <MX_USART2_UART_Init+0x58>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cf6:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <MX_USART2_UART_Init+0x58>)
 8000cf8:	f002 f97c 	bl	8002ff4 <HAL_UART_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d02:	f7ff fec0 	bl	8000a86 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200002f0 	.word	0x200002f0
 8000d10:	40004400 	.word	0x40004400

08000d14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b0ac      	sub	sp, #176	@ 0xb0
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2288      	movs	r2, #136	@ 0x88
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f006 f815 	bl	8006d64 <memset>
  if(uartHandle->Instance==USART2)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a25      	ldr	r2, [pc, #148]	@ (8000dd4 <HAL_UART_MspInit+0xc0>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d143      	bne.n	8000dcc <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d44:	2302      	movs	r3, #2
 8000d46:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4618      	mov	r0, r3
 8000d52:	f001 fc93 	bl	800267c <HAL_RCCEx_PeriphCLKConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d5c:	f7ff fe93 	bl	8000a86 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d60:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd8 <HAL_UART_MspInit+0xc4>)
 8000d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d64:	4a1c      	ldr	r2, [pc, #112]	@ (8000dd8 <HAL_UART_MspInit+0xc4>)
 8000d66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd8 <HAL_UART_MspInit+0xc4>)
 8000d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d78:	4b17      	ldr	r3, [pc, #92]	@ (8000dd8 <HAL_UART_MspInit+0xc4>)
 8000d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7c:	4a16      	ldr	r2, [pc, #88]	@ (8000dd8 <HAL_UART_MspInit+0xc4>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d84:	4b14      	ldr	r3, [pc, #80]	@ (8000dd8 <HAL_UART_MspInit+0xc4>)
 8000d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d90:	230c      	movs	r3, #12
 8000d92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da2:	2303      	movs	r3, #3
 8000da4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000da8:	2307      	movs	r3, #7
 8000daa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000db2:	4619      	mov	r1, r3
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000db8:	f000 fc20 	bl	80015fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2105      	movs	r1, #5
 8000dc0:	2026      	movs	r0, #38	@ 0x26
 8000dc2:	f000 fb66 	bl	8001492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dc6:	2026      	movs	r0, #38	@ 0x26
 8000dc8:	f000 fb7f 	bl	80014ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000dcc:	bf00      	nop
 8000dce:	37b0      	adds	r7, #176	@ 0xb0
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40004400 	.word	0x40004400
 8000dd8:	40021000 	.word	0x40021000

08000ddc <Reset_Handler>:
 8000ddc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e14 <LoopForever+0x2>
 8000de0:	f7ff ff56 	bl	8000c90 <SystemInit>
 8000de4:	480c      	ldr	r0, [pc, #48]	@ (8000e18 <LoopForever+0x6>)
 8000de6:	490d      	ldr	r1, [pc, #52]	@ (8000e1c <LoopForever+0xa>)
 8000de8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e20 <LoopForever+0xe>)
 8000dea:	2300      	movs	r3, #0
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:
 8000dee:	58d4      	ldr	r4, [r2, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:
 8000df4:	18c4      	adds	r4, r0, r3
 8000df6:	428c      	cmp	r4, r1
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000e24 <LoopForever+0x12>)
 8000dfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000e28 <LoopForever+0x16>)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:
 8000e02:	6013      	str	r3, [r2, #0]
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:
 8000e06:	42a2      	cmp	r2, r4
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>
 8000e0a:	f005 ffff 	bl	8006e0c <__libc_init_array>
 8000e0e:	f7ff fdb7 	bl	8000980 <main>

08000e12 <LoopForever>:
 8000e12:	e7fe      	b.n	8000e12 <LoopForever>
 8000e14:	20018000 	.word	0x20018000
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	20000074 	.word	0x20000074
 8000e20:	08007f90 	.word	0x08007f90
 8000e24:	20000074 	.word	0x20000074
 8000e28:	20005794 	.word	0x20005794

08000e2c <ADC1_2_IRQHandler>:
 8000e2c:	e7fe      	b.n	8000e2c <ADC1_2_IRQHandler>
	...

08000e30 <shell_uart_receive_irq_cb>:
static char print_buffer[BUFFER_SIZE];

static SemaphoreHandle_t sem_uart_read = NULL;

void shell_uart_receive_irq_cb(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]

	xSemaphoreGiveFromISR(sem_uart_read, &pxHigherPriorityTaskWoken);
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e68 <shell_uart_receive_irq_cb+0x38>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	1d3a      	adds	r2, r7, #4
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f003 feb8 	bl	8004bb8 <xQueueGiveFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d007      	beq.n	8000e5e <shell_uart_receive_irq_cb+0x2e>
 8000e4e:	4b07      	ldr	r3, [pc, #28]	@ (8000e6c <shell_uart_receive_irq_cb+0x3c>)
 8000e50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	f3bf 8f4f 	dsb	sy
 8000e5a:	f3bf 8f6f 	isb	sy
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200006a4 	.word	0x200006a4
 8000e6c:	e000ed04 	.word	0xe000ed04

08000e70 <uart_read>:

static char uart_read() {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
	char c;

	HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t*)(&c), 1);
 8000e76:	1dfb      	adds	r3, r7, #7
 8000e78:	2201      	movs	r2, #1
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4807      	ldr	r0, [pc, #28]	@ (8000e9c <uart_read+0x2c>)
 8000e7e:	f002 f991 	bl	80031a4 <HAL_UART_Receive_IT>
	// il faut mettre la tâche shell dans l'état bloqué, jusqu'à l'interruption de réception de caractère
	// prendre un sémaphore vide par exemple
	xSemaphoreTake(sem_uart_read, portMAX_DELAY);
 8000e82:	4b07      	ldr	r3, [pc, #28]	@ (8000ea0 <uart_read+0x30>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f003 ff24 	bl	8004cd8 <xQueueSemaphoreTake>

	return c;
 8000e90:	79fb      	ldrb	r3, [r7, #7]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200002f0 	.word	0x200002f0
 8000ea0:	200006a4 	.word	0x200006a4

08000ea4 <uart_write>:

static int uart_write(char * s, uint16_t size) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
 8000eb0:	887a      	ldrh	r2, [r7, #2]
 8000eb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	4803      	ldr	r0, [pc, #12]	@ (8000ec8 <uart_write+0x24>)
 8000eba:	f002 f8e9 	bl	8003090 <HAL_UART_Transmit>
	return size;
 8000ebe:	887b      	ldrh	r3, [r7, #2]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200002f0 	.word	0x200002f0

08000ecc <sh_help>:

static int sh_help(int argc, char ** argv) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	e022      	b.n	8000f22 <sh_help+0x56>
		int size;
		size = snprintf (print_buffer, BUFFER_SIZE, "%c: %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 8000edc:	4916      	ldr	r1, [pc, #88]	@ (8000f38 <sh_help+0x6c>)
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	4413      	add	r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	440b      	add	r3, r1
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	4912      	ldr	r1, [pc, #72]	@ (8000f38 <sh_help+0x6c>)
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	4413      	add	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	440b      	add	r3, r1
 8000efc:	3308      	adds	r3, #8
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	4603      	mov	r3, r0
 8000f04:	4a0d      	ldr	r2, [pc, #52]	@ (8000f3c <sh_help+0x70>)
 8000f06:	2128      	movs	r1, #40	@ 0x28
 8000f08:	480d      	ldr	r0, [pc, #52]	@ (8000f40 <sh_help+0x74>)
 8000f0a:	f005 fe1f 	bl	8006b4c <sniprintf>
 8000f0e:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	4619      	mov	r1, r3
 8000f16:	480a      	ldr	r0, [pc, #40]	@ (8000f40 <sh_help+0x74>)
 8000f18:	f7ff ffc4 	bl	8000ea4 <uart_write>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <sh_help+0x78>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	dbd7      	blt.n	8000edc <sh_help+0x10>
	}

	return 0;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000037c 	.word	0x2000037c
 8000f3c:	08007d84 	.word	0x08007d84
 8000f40:	2000067c 	.word	0x2000067c
 8000f44:	20000378 	.word	0x20000378

08000f48 <shell_init>:

void shell_init() {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
	int size = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]

	size = snprintf (print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8000f52:	4a13      	ldr	r2, [pc, #76]	@ (8000fa0 <shell_init+0x58>)
 8000f54:	2128      	movs	r1, #40	@ 0x28
 8000f56:	4813      	ldr	r0, [pc, #76]	@ (8000fa4 <shell_init+0x5c>)
 8000f58:	f005 fdf8 	bl	8006b4c <sniprintf>
 8000f5c:	6078      	str	r0, [r7, #4]
	uart_write(print_buffer, size);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	4619      	mov	r1, r3
 8000f64:	480f      	ldr	r0, [pc, #60]	@ (8000fa4 <shell_init+0x5c>)
 8000f66:	f7ff ff9d 	bl	8000ea4 <uart_write>

	sem_uart_read = xSemaphoreCreateBinary();
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2001      	movs	r0, #1
 8000f70:	f003 fdc8 	bl	8004b04 <xQueueGenericCreate>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4a0c      	ldr	r2, [pc, #48]	@ (8000fa8 <shell_init+0x60>)
 8000f78:	6013      	str	r3, [r2, #0]
	if (sem_uart_read == NULL)
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <shell_init+0x60>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d104      	bne.n	8000f8c <shell_init+0x44>
	{
		printf("Error semaphore shell\r\n");
 8000f82:	480a      	ldr	r0, [pc, #40]	@ (8000fac <shell_init+0x64>)
 8000f84:	f005 fdda 	bl	8006b3c <puts>
		while(1);
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <shell_init+0x40>
	}

	shell_add('h', sh_help, "Help");
 8000f8c:	4a08      	ldr	r2, [pc, #32]	@ (8000fb0 <shell_init+0x68>)
 8000f8e:	4909      	ldr	r1, [pc, #36]	@ (8000fb4 <shell_init+0x6c>)
 8000f90:	2068      	movs	r0, #104	@ 0x68
 8000f92:	f000 f811 	bl	8000fb8 <shell_add>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	08007d90 	.word	0x08007d90
 8000fa4:	2000067c 	.word	0x2000067c
 8000fa8:	200006a4 	.word	0x200006a4
 8000fac:	08007db8 	.word	0x08007db8
 8000fb0:	08007dd0 	.word	0x08007dd0
 8000fb4:	08000ecd 	.word	0x08000ecd

08000fb8 <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
 8000fc4:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8000fc6:	4b19      	ldr	r3, [pc, #100]	@ (800102c <shell_add+0x74>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fcc:	dc26      	bgt.n	800101c <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 8000fce:	4b17      	ldr	r3, [pc, #92]	@ (800102c <shell_add+0x74>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	4917      	ldr	r1, [pc, #92]	@ (8001030 <shell_add+0x78>)
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	4413      	add	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	440b      	add	r3, r1
 8000fde:	7bfa      	ldrb	r2, [r7, #15]
 8000fe0:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 8000fe2:	4b12      	ldr	r3, [pc, #72]	@ (800102c <shell_add+0x74>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	4912      	ldr	r1, [pc, #72]	@ (8001030 <shell_add+0x78>)
 8000fe8:	4613      	mov	r3, r2
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	4413      	add	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	3304      	adds	r3, #4
 8000ff4:	68ba      	ldr	r2, [r7, #8]
 8000ff6:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <shell_add+0x74>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	490c      	ldr	r1, [pc, #48]	@ (8001030 <shell_add+0x78>)
 8000ffe:	4613      	mov	r3, r2
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	4413      	add	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	440b      	add	r3, r1
 8001008:	3308      	adds	r3, #8
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 800100e:	4b07      	ldr	r3, [pc, #28]	@ (800102c <shell_add+0x74>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	3301      	adds	r3, #1
 8001014:	4a05      	ldr	r2, [pc, #20]	@ (800102c <shell_add+0x74>)
 8001016:	6013      	str	r3, [r2, #0]
		return 0;
 8001018:	2300      	movs	r3, #0
 800101a:	e001      	b.n	8001020 <shell_add+0x68>
	}

	return -1;
 800101c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001020:	4618      	mov	r0, r3
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	20000378 	.word	0x20000378
 8001030:	2000037c 	.word	0x2000037c

08001034 <shell_exec>:

static int shell_exec(char * buf) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b090      	sub	sp, #64	@ 0x40
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	int i;

	char c = buf[0];
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001044:	2300      	movs	r3, #0
 8001046:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001048:	e040      	b.n	80010cc <shell_exec+0x98>
		if (shell_func_list[i].c == c) {
 800104a:	492d      	ldr	r1, [pc, #180]	@ (8001100 <shell_exec+0xcc>)
 800104c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800104e:	4613      	mov	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4413      	add	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	440b      	add	r3, r1
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800105e:	429a      	cmp	r2, r3
 8001060:	d131      	bne.n	80010c6 <shell_exec+0x92>
			argc = 1;
 8001062:	2301      	movs	r3, #1
 8001064:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	637b      	str	r3, [r7, #52]	@ 0x34
 800106e:	e013      	b.n	8001098 <shell_exec+0x64>
				if(*p == ' ') {
 8001070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b20      	cmp	r3, #32
 8001076:	d10c      	bne.n	8001092 <shell_exec+0x5e>
					*p = '\0';
 8001078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 800107e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001080:	1c5a      	adds	r2, r3, #1
 8001082:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001084:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001086:	3201      	adds	r2, #1
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	3340      	adds	r3, #64	@ 0x40
 800108c:	443b      	add	r3, r7
 800108e:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8001092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001094:	3301      	adds	r3, #1
 8001096:	637b      	str	r3, [r7, #52]	@ 0x34
 8001098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d002      	beq.n	80010a6 <shell_exec+0x72>
 80010a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010a2:	2b07      	cmp	r3, #7
 80010a4:	dde4      	ble.n	8001070 <shell_exec+0x3c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 80010a6:	4916      	ldr	r1, [pc, #88]	@ (8001100 <shell_exec+0xcc>)
 80010a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80010aa:	4613      	mov	r3, r2
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	4413      	add	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	440b      	add	r3, r1
 80010b4:	3304      	adds	r3, #4
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f107 020c 	add.w	r2, r7, #12
 80010bc:	4611      	mov	r1, r2
 80010be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80010c0:	4798      	blx	r3
 80010c2:	4603      	mov	r3, r0
 80010c4:	e017      	b.n	80010f6 <shell_exec+0xc2>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 80010c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80010c8:	3301      	adds	r3, #1
 80010ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80010cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001104 <shell_exec+0xd0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80010d2:	429a      	cmp	r2, r3
 80010d4:	dbb9      	blt.n	800104a <shell_exec+0x16>
		}
	}

	int size;
	size = snprintf (print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 80010d6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010da:	4a0b      	ldr	r2, [pc, #44]	@ (8001108 <shell_exec+0xd4>)
 80010dc:	2128      	movs	r1, #40	@ 0x28
 80010de:	480b      	ldr	r0, [pc, #44]	@ (800110c <shell_exec+0xd8>)
 80010e0:	f005 fd34 	bl	8006b4c <sniprintf>
 80010e4:	62f8      	str	r0, [r7, #44]	@ 0x2c
	uart_write(print_buffer, size);
 80010e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	4619      	mov	r1, r3
 80010ec:	4807      	ldr	r0, [pc, #28]	@ (800110c <shell_exec+0xd8>)
 80010ee:	f7ff fed9 	bl	8000ea4 <uart_write>
	return -1;
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3740      	adds	r7, #64	@ 0x40
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	2000037c 	.word	0x2000037c
 8001104:	20000378 	.word	0x20000378
 8001108:	08007dd8 	.word	0x08007dd8
 800110c:	2000067c 	.word	0x2000067c

08001110 <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run() {
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
	int reading = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]

	static char cmd_buffer[BUFFER_SIZE];

	while (1) {
		uart_write(prompt, 2);
 800111e:	2102      	movs	r1, #2
 8001120:	482a      	ldr	r0, [pc, #168]	@ (80011cc <shell_run+0xbc>)
 8001122:	f7ff febf 	bl	8000ea4 <uart_write>
		reading = 1;
 8001126:	2301      	movs	r3, #1
 8001128:	60fb      	str	r3, [r7, #12]

		while(reading) {
 800112a:	e047      	b.n	80011bc <shell_run+0xac>
			char c = uart_read();
 800112c:	f7ff fea0 	bl	8000e70 <uart_read>
 8001130:	4603      	mov	r3, r0
 8001132:	70fb      	strb	r3, [r7, #3]
			int size;

			switch (c) {
 8001134:	78fb      	ldrb	r3, [r7, #3]
 8001136:	2b08      	cmp	r3, #8
 8001138:	d025      	beq.n	8001186 <shell_run+0x76>
 800113a:	2b0d      	cmp	r3, #13
 800113c:	d12e      	bne.n	800119c <shell_run+0x8c>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (print_buffer, BUFFER_SIZE, "\r\n");
 800113e:	4a24      	ldr	r2, [pc, #144]	@ (80011d0 <shell_run+0xc0>)
 8001140:	2128      	movs	r1, #40	@ 0x28
 8001142:	4824      	ldr	r0, [pc, #144]	@ (80011d4 <shell_run+0xc4>)
 8001144:	f005 fd02 	bl	8006b4c <sniprintf>
 8001148:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	b29b      	uxth	r3, r3
 800114e:	4619      	mov	r1, r3
 8001150:	4820      	ldr	r0, [pc, #128]	@ (80011d4 <shell_run+0xc4>)
 8001152:	f7ff fea7 	bl	8000ea4 <uart_write>
				cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	1c5a      	adds	r2, r3, #1
 800115a:	60ba      	str	r2, [r7, #8]
 800115c:	4a1e      	ldr	r2, [pc, #120]	@ (80011d8 <shell_run+0xc8>)
 800115e:	2100      	movs	r1, #0
 8001160:	54d1      	strb	r1, [r2, r3]
				size = snprintf (print_buffer, BUFFER_SIZE, ":%s\r\n", cmd_buffer);
 8001162:	4b1d      	ldr	r3, [pc, #116]	@ (80011d8 <shell_run+0xc8>)
 8001164:	4a1d      	ldr	r2, [pc, #116]	@ (80011dc <shell_run+0xcc>)
 8001166:	2128      	movs	r1, #40	@ 0x28
 8001168:	481a      	ldr	r0, [pc, #104]	@ (80011d4 <shell_run+0xc4>)
 800116a:	f005 fcef 	bl	8006b4c <sniprintf>
 800116e:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	b29b      	uxth	r3, r3
 8001174:	4619      	mov	r1, r3
 8001176:	4817      	ldr	r0, [pc, #92]	@ (80011d4 <shell_run+0xc4>)
 8001178:	f7ff fe94 	bl	8000ea4 <uart_write>
				reading = 0;        //exit read loop
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
				pos = 0;            //reset buffer
 8001180:	2300      	movs	r3, #0
 8001182:	60bb      	str	r3, [r7, #8]
				break;
 8001184:	e01a      	b.n	80011bc <shell_run+0xac>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	2b00      	cmp	r3, #0
 800118a:	dd16      	ble.n	80011ba <shell_run+0xaa>
					pos--;          //remove it in buffer
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	3b01      	subs	r3, #1
 8001190:	60bb      	str	r3, [r7, #8]

					uart_write(backspace, 3);	// delete the char on the terminal
 8001192:	2103      	movs	r1, #3
 8001194:	4812      	ldr	r0, [pc, #72]	@ (80011e0 <shell_run+0xd0>)
 8001196:	f7ff fe85 	bl	8000ea4 <uart_write>
				}
				break;
 800119a:	e00e      	b.n	80011ba <shell_run+0xaa>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	2b27      	cmp	r3, #39	@ 0x27
 80011a0:	dc0c      	bgt.n	80011bc <shell_run+0xac>
					uart_write(&c, 1);
 80011a2:	1cfb      	adds	r3, r7, #3
 80011a4:	2101      	movs	r1, #1
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fe7c 	bl	8000ea4 <uart_write>
					cmd_buffer[pos++] = c; //store
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	1c5a      	adds	r2, r3, #1
 80011b0:	60ba      	str	r2, [r7, #8]
 80011b2:	78f9      	ldrb	r1, [r7, #3]
 80011b4:	4a08      	ldr	r2, [pc, #32]	@ (80011d8 <shell_run+0xc8>)
 80011b6:	54d1      	strb	r1, [r2, r3]
 80011b8:	e000      	b.n	80011bc <shell_run+0xac>
				break;
 80011ba:	bf00      	nop
		while(reading) {
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1b4      	bne.n	800112c <shell_run+0x1c>
				}
			}
		}
		shell_exec(cmd_buffer);
 80011c2:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <shell_run+0xc8>)
 80011c4:	f7ff ff36 	bl	8001034 <shell_exec>
		uart_write(prompt, 2);
 80011c8:	e7a9      	b.n	800111e <shell_run+0xe>
 80011ca:	bf00      	nop
 80011cc:	20000008 	.word	0x20000008
 80011d0:	08007df0 	.word	0x08007df0
 80011d4:	2000067c 	.word	0x2000067c
 80011d8:	200006a8 	.word	0x200006a8
 80011dc:	08007df4 	.word	0x08007df4
 80011e0:	20000004 	.word	0x20000004

080011e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <HAL_Init+0x3c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001220 <HAL_Init+0x3c>)
 80011f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011f8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fa:	2003      	movs	r0, #3
 80011fc:	f000 f93e 	bl	800147c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001200:	200f      	movs	r0, #15
 8001202:	f000 f80f 	bl	8001224 <HAL_InitTick>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d002      	beq.n	8001212 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	71fb      	strb	r3, [r7, #7]
 8001210:	e001      	b.n	8001216 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001212:	f7ff fc3f 	bl	8000a94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001216:	79fb      	ldrb	r3, [r7, #7]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40022000 	.word	0x40022000

08001224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800122c:	2300      	movs	r3, #0
 800122e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001230:	4b17      	ldr	r3, [pc, #92]	@ (8001290 <HAL_InitTick+0x6c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d023      	beq.n	8001280 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001238:	4b16      	ldr	r3, [pc, #88]	@ (8001294 <HAL_InitTick+0x70>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b14      	ldr	r3, [pc, #80]	@ (8001290 <HAL_InitTick+0x6c>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	4619      	mov	r1, r3
 8001242:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001246:	fbb3 f3f1 	udiv	r3, r3, r1
 800124a:	fbb2 f3f3 	udiv	r3, r2, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f000 f949 	bl	80014e6 <HAL_SYSTICK_Config>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10f      	bne.n	800127a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b0f      	cmp	r3, #15
 800125e:	d809      	bhi.n	8001274 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001260:	2200      	movs	r2, #0
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001268:	f000 f913 	bl	8001492 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800126c:	4a0a      	ldr	r2, [pc, #40]	@ (8001298 <HAL_InitTick+0x74>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	e007      	b.n	8001284 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	e004      	b.n	8001284 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	73fb      	strb	r3, [r7, #15]
 800127e:	e001      	b.n	8001284 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001284:	7bfb      	ldrb	r3, [r7, #15]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000010 	.word	0x20000010
 8001294:	20000000 	.word	0x20000000
 8001298:	2000000c 	.word	0x2000000c

0800129c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012a0:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <HAL_IncTick+0x20>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <HAL_IncTick+0x24>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4413      	add	r3, r2
 80012ac:	4a04      	ldr	r2, [pc, #16]	@ (80012c0 <HAL_IncTick+0x24>)
 80012ae:	6013      	str	r3, [r2, #0]
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	20000010 	.word	0x20000010
 80012c0:	200006d0 	.word	0x200006d0

080012c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return uwTick;
 80012c8:	4b03      	ldr	r3, [pc, #12]	@ (80012d8 <HAL_GetTick+0x14>)
 80012ca:	681b      	ldr	r3, [r3, #0]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	200006d0 	.word	0x200006d0

080012dc <__NVIC_SetPriorityGrouping>:
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012f8:	4013      	ands	r3, r2
 80012fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001304:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001308:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800130c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130e:	4a04      	ldr	r2, [pc, #16]	@ (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	60d3      	str	r3, [r2, #12]
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_GetPriorityGrouping>:
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001328:	4b04      	ldr	r3, [pc, #16]	@ (800133c <__NVIC_GetPriorityGrouping+0x18>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	f003 0307 	and.w	r3, r3, #7
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_EnableIRQ>:
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	2b00      	cmp	r3, #0
 8001350:	db0b      	blt.n	800136a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	f003 021f 	and.w	r2, r3, #31
 8001358:	4907      	ldr	r1, [pc, #28]	@ (8001378 <__NVIC_EnableIRQ+0x38>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	095b      	lsrs	r3, r3, #5
 8001360:	2001      	movs	r0, #1
 8001362:	fa00 f202 	lsl.w	r2, r0, r2
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000e100 	.word	0xe000e100

0800137c <__NVIC_SetPriority>:
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	6039      	str	r1, [r7, #0]
 8001386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	2b00      	cmp	r3, #0
 800138e:	db0a      	blt.n	80013a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	b2da      	uxtb	r2, r3
 8001394:	490c      	ldr	r1, [pc, #48]	@ (80013c8 <__NVIC_SetPriority+0x4c>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	0112      	lsls	r2, r2, #4
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	440b      	add	r3, r1
 80013a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80013a4:	e00a      	b.n	80013bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4908      	ldr	r1, [pc, #32]	@ (80013cc <__NVIC_SetPriority+0x50>)
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	3b04      	subs	r3, #4
 80013b4:	0112      	lsls	r2, r2, #4
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	440b      	add	r3, r1
 80013ba:	761a      	strb	r2, [r3, #24]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000e100 	.word	0xe000e100
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <NVIC_EncodePriority>:
{
 80013d0:	b480      	push	{r7}
 80013d2:	b089      	sub	sp, #36	@ 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f1c3 0307 	rsb	r3, r3, #7
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	bf28      	it	cs
 80013ee:	2304      	movcs	r3, #4
 80013f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3304      	adds	r3, #4
 80013f6:	2b06      	cmp	r3, #6
 80013f8:	d902      	bls.n	8001400 <NVIC_EncodePriority+0x30>
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3b03      	subs	r3, #3
 80013fe:	e000      	b.n	8001402 <NVIC_EncodePriority+0x32>
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43da      	mvns	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	401a      	ands	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001418:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	43d9      	mvns	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	4313      	orrs	r3, r2
}
 800142a:	4618      	mov	r0, r3
 800142c:	3724      	adds	r7, #36	@ 0x24
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001448:	d301      	bcc.n	800144e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800144a:	2301      	movs	r3, #1
 800144c:	e00f      	b.n	800146e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144e:	4a0a      	ldr	r2, [pc, #40]	@ (8001478 <SysTick_Config+0x40>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001456:	210f      	movs	r1, #15
 8001458:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800145c:	f7ff ff8e 	bl	800137c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001460:	4b05      	ldr	r3, [pc, #20]	@ (8001478 <SysTick_Config+0x40>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001466:	4b04      	ldr	r3, [pc, #16]	@ (8001478 <SysTick_Config+0x40>)
 8001468:	2207      	movs	r2, #7
 800146a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	e000e010 	.word	0xe000e010

0800147c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ff29 	bl	80012dc <__NVIC_SetPriorityGrouping>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014a4:	f7ff ff3e 	bl	8001324 <__NVIC_GetPriorityGrouping>
 80014a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	68b9      	ldr	r1, [r7, #8]
 80014ae:	6978      	ldr	r0, [r7, #20]
 80014b0:	f7ff ff8e 	bl	80013d0 <NVIC_EncodePriority>
 80014b4:	4602      	mov	r2, r0
 80014b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff5d 	bl	800137c <__NVIC_SetPriority>
}
 80014c2:	bf00      	nop
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff31 	bl	8001340 <__NVIC_EnableIRQ>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ffa2 	bl	8001438 <SysTick_Config>
 80014f4:	4603      	mov	r3, r0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014fe:	b480      	push	{r7}
 8001500:	b085      	sub	sp, #20
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d008      	beq.n	8001528 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2204      	movs	r2, #4
 800151a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e022      	b.n	800156e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 020e 	bic.w	r2, r2, #14
 8001536:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0201 	bic.w	r2, r2, #1
 8001546:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154c:	f003 021c 	and.w	r2, r3, #28
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001554:	2101      	movs	r1, #1
 8001556:	fa01 f202 	lsl.w	r2, r1, r2
 800155a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800156c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800156e:	4618      	mov	r0, r3
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b084      	sub	sp, #16
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001582:	2300      	movs	r3, #0
 8001584:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d005      	beq.n	800159e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2204      	movs	r2, #4
 8001596:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	73fb      	strb	r3, [r7, #15]
 800159c:	e029      	b.n	80015f2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 020e 	bic.w	r2, r2, #14
 80015ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 0201 	bic.w	r2, r2, #1
 80015bc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c2:	f003 021c 	and.w	r2, r3, #28
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	2101      	movs	r1, #1
 80015cc:	fa01 f202 	lsl.w	r2, r1, r2
 80015d0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	4798      	blx	r3
    }
  }
  return status;
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b087      	sub	sp, #28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800160a:	e17f      	b.n	800190c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	2101      	movs	r1, #1
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	fa01 f303 	lsl.w	r3, r1, r3
 8001618:	4013      	ands	r3, r2
 800161a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 8171 	beq.w	8001906 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	2b01      	cmp	r3, #1
 800162e:	d005      	beq.n	800163c <HAL_GPIO_Init+0x40>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0303 	and.w	r3, r3, #3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d130      	bne.n	800169e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	2203      	movs	r2, #3
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	68da      	ldr	r2, [r3, #12]
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001672:	2201      	movs	r2, #1
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	4013      	ands	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	091b      	lsrs	r3, r3, #4
 8001688:	f003 0201 	and.w	r2, r3, #1
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d118      	bne.n	80016dc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016b0:	2201      	movs	r2, #1
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	08db      	lsrs	r3, r3, #3
 80016c6:	f003 0201 	and.w	r2, r3, #1
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	2b03      	cmp	r3, #3
 80016e6:	d017      	beq.n	8001718 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	2203      	movs	r2, #3
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4313      	orrs	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d123      	bne.n	800176c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	08da      	lsrs	r2, r3, #3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3208      	adds	r2, #8
 800172c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001730:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	220f      	movs	r2, #15
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	691a      	ldr	r2, [r3, #16]
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4313      	orrs	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	08da      	lsrs	r2, r3, #3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3208      	adds	r2, #8
 8001766:	6939      	ldr	r1, [r7, #16]
 8001768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	2203      	movs	r2, #3
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 0203 	and.w	r2, r3, #3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f000 80ac 	beq.w	8001906 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ae:	4b5f      	ldr	r3, [pc, #380]	@ (800192c <HAL_GPIO_Init+0x330>)
 80017b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017b2:	4a5e      	ldr	r2, [pc, #376]	@ (800192c <HAL_GPIO_Init+0x330>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80017ba:	4b5c      	ldr	r3, [pc, #368]	@ (800192c <HAL_GPIO_Init+0x330>)
 80017bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017c6:	4a5a      	ldr	r2, [pc, #360]	@ (8001930 <HAL_GPIO_Init+0x334>)
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	089b      	lsrs	r3, r3, #2
 80017cc:	3302      	adds	r3, #2
 80017ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	220f      	movs	r2, #15
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80017f0:	d025      	beq.n	800183e <HAL_GPIO_Init+0x242>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a4f      	ldr	r2, [pc, #316]	@ (8001934 <HAL_GPIO_Init+0x338>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d01f      	beq.n	800183a <HAL_GPIO_Init+0x23e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001938 <HAL_GPIO_Init+0x33c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d019      	beq.n	8001836 <HAL_GPIO_Init+0x23a>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a4d      	ldr	r2, [pc, #308]	@ (800193c <HAL_GPIO_Init+0x340>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d013      	beq.n	8001832 <HAL_GPIO_Init+0x236>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a4c      	ldr	r2, [pc, #304]	@ (8001940 <HAL_GPIO_Init+0x344>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d00d      	beq.n	800182e <HAL_GPIO_Init+0x232>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a4b      	ldr	r2, [pc, #300]	@ (8001944 <HAL_GPIO_Init+0x348>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d007      	beq.n	800182a <HAL_GPIO_Init+0x22e>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a4a      	ldr	r2, [pc, #296]	@ (8001948 <HAL_GPIO_Init+0x34c>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d101      	bne.n	8001826 <HAL_GPIO_Init+0x22a>
 8001822:	2306      	movs	r3, #6
 8001824:	e00c      	b.n	8001840 <HAL_GPIO_Init+0x244>
 8001826:	2307      	movs	r3, #7
 8001828:	e00a      	b.n	8001840 <HAL_GPIO_Init+0x244>
 800182a:	2305      	movs	r3, #5
 800182c:	e008      	b.n	8001840 <HAL_GPIO_Init+0x244>
 800182e:	2304      	movs	r3, #4
 8001830:	e006      	b.n	8001840 <HAL_GPIO_Init+0x244>
 8001832:	2303      	movs	r3, #3
 8001834:	e004      	b.n	8001840 <HAL_GPIO_Init+0x244>
 8001836:	2302      	movs	r3, #2
 8001838:	e002      	b.n	8001840 <HAL_GPIO_Init+0x244>
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <HAL_GPIO_Init+0x244>
 800183e:	2300      	movs	r3, #0
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	f002 0203 	and.w	r2, r2, #3
 8001846:	0092      	lsls	r2, r2, #2
 8001848:	4093      	lsls	r3, r2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001850:	4937      	ldr	r1, [pc, #220]	@ (8001930 <HAL_GPIO_Init+0x334>)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	089b      	lsrs	r3, r3, #2
 8001856:	3302      	adds	r3, #2
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800185e:	4b3b      	ldr	r3, [pc, #236]	@ (800194c <HAL_GPIO_Init+0x350>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	43db      	mvns	r3, r3
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4013      	ands	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4313      	orrs	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001882:	4a32      	ldr	r2, [pc, #200]	@ (800194c <HAL_GPIO_Init+0x350>)
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001888:	4b30      	ldr	r3, [pc, #192]	@ (800194c <HAL_GPIO_Init+0x350>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	43db      	mvns	r3, r3
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4013      	ands	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018ac:	4a27      	ldr	r2, [pc, #156]	@ (800194c <HAL_GPIO_Init+0x350>)
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018b2:	4b26      	ldr	r3, [pc, #152]	@ (800194c <HAL_GPIO_Init+0x350>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	43db      	mvns	r3, r3
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4013      	ands	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018d6:	4a1d      	ldr	r2, [pc, #116]	@ (800194c <HAL_GPIO_Init+0x350>)
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018dc:	4b1b      	ldr	r3, [pc, #108]	@ (800194c <HAL_GPIO_Init+0x350>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001900:	4a12      	ldr	r2, [pc, #72]	@ (800194c <HAL_GPIO_Init+0x350>)
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	3301      	adds	r3, #1
 800190a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	fa22 f303 	lsr.w	r3, r2, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	f47f ae78 	bne.w	800160c <HAL_GPIO_Init+0x10>
  }
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	371c      	adds	r7, #28
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000
 8001930:	40010000 	.word	0x40010000
 8001934:	48000400 	.word	0x48000400
 8001938:	48000800 	.word	0x48000800
 800193c:	48000c00 	.word	0x48000c00
 8001940:	48001000 	.word	0x48001000
 8001944:	48001400 	.word	0x48001400
 8001948:	48001800 	.word	0x48001800
 800194c:	40010400 	.word	0x40010400

08001950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	807b      	strh	r3, [r7, #2]
 800195c:	4613      	mov	r3, r2
 800195e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001960:	787b      	ldrb	r3, [r7, #1]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001966:	887a      	ldrh	r2, [r7, #2]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800196c:	e002      	b.n	8001974 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800196e:	887a      	ldrh	r2, [r7, #2]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001992:	887a      	ldrh	r2, [r7, #2]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4013      	ands	r3, r2
 8001998:	041a      	lsls	r2, r3, #16
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	43d9      	mvns	r1, r3
 800199e:	887b      	ldrh	r3, [r7, #2]
 80019a0:	400b      	ands	r3, r1
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	619a      	str	r2, [r3, #24]
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019b8:	4b04      	ldr	r3, [pc, #16]	@ (80019cc <HAL_PWREx_GetVoltageRange+0x18>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40007000 	.word	0x40007000

080019d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019de:	d130      	bne.n	8001a42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019e0:	4b23      	ldr	r3, [pc, #140]	@ (8001a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019ec:	d038      	beq.n	8001a60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019ee:	4b20      	ldr	r3, [pc, #128]	@ (8001a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001a74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2232      	movs	r2, #50	@ 0x32
 8001a04:	fb02 f303 	mul.w	r3, r2, r3
 8001a08:	4a1b      	ldr	r2, [pc, #108]	@ (8001a78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0e:	0c9b      	lsrs	r3, r3, #18
 8001a10:	3301      	adds	r3, #1
 8001a12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a14:	e002      	b.n	8001a1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a1c:	4b14      	ldr	r3, [pc, #80]	@ (8001a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a28:	d102      	bne.n	8001a30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f2      	bne.n	8001a16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a30:	4b0f      	ldr	r3, [pc, #60]	@ (8001a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a3c:	d110      	bne.n	8001a60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e00f      	b.n	8001a62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a42:	4b0b      	ldr	r3, [pc, #44]	@ (8001a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a4e:	d007      	beq.n	8001a60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a50:	4b07      	ldr	r3, [pc, #28]	@ (8001a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a58:	4a05      	ldr	r2, [pc, #20]	@ (8001a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40007000 	.word	0x40007000
 8001a74:	20000000 	.word	0x20000000
 8001a78:	431bde83 	.word	0x431bde83

08001a7c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e3ca      	b.n	8002224 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a8e:	4b97      	ldr	r3, [pc, #604]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 030c 	and.w	r3, r3, #12
 8001a96:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a98:	4b94      	ldr	r3, [pc, #592]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0310 	and.w	r3, r3, #16
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 80e4 	beq.w	8001c78 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d007      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x4a>
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	2b0c      	cmp	r3, #12
 8001aba:	f040 808b 	bne.w	8001bd4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	f040 8087 	bne.w	8001bd4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ac6:	4b89      	ldr	r3, [pc, #548]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d005      	beq.n	8001ade <HAL_RCC_OscConfig+0x62>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e3a2      	b.n	8002224 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a1a      	ldr	r2, [r3, #32]
 8001ae2:	4b82      	ldr	r3, [pc, #520]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d004      	beq.n	8001af8 <HAL_RCC_OscConfig+0x7c>
 8001aee:	4b7f      	ldr	r3, [pc, #508]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001af6:	e005      	b.n	8001b04 <HAL_RCC_OscConfig+0x88>
 8001af8:	4b7c      	ldr	r3, [pc, #496]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001afe:	091b      	lsrs	r3, r3, #4
 8001b00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d223      	bcs.n	8001b50 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f000 fd55 	bl	80025bc <RCC_SetFlashLatencyFromMSIRange>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e383      	b.n	8002224 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b1c:	4b73      	ldr	r3, [pc, #460]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a72      	ldr	r2, [pc, #456]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001b22:	f043 0308 	orr.w	r3, r3, #8
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	4b70      	ldr	r3, [pc, #448]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	496d      	ldr	r1, [pc, #436]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b3a:	4b6c      	ldr	r3, [pc, #432]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	021b      	lsls	r3, r3, #8
 8001b48:	4968      	ldr	r1, [pc, #416]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	604b      	str	r3, [r1, #4]
 8001b4e:	e025      	b.n	8001b9c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b50:	4b66      	ldr	r3, [pc, #408]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a65      	ldr	r2, [pc, #404]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001b56:	f043 0308 	orr.w	r3, r3, #8
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	4b63      	ldr	r3, [pc, #396]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	4960      	ldr	r1, [pc, #384]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b6e:	4b5f      	ldr	r3, [pc, #380]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	021b      	lsls	r3, r3, #8
 8001b7c:	495b      	ldr	r1, [pc, #364]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d109      	bne.n	8001b9c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f000 fd15 	bl	80025bc <RCC_SetFlashLatencyFromMSIRange>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e343      	b.n	8002224 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b9c:	f000 fc4a 	bl	8002434 <HAL_RCC_GetSysClockFreq>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	4b52      	ldr	r3, [pc, #328]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	091b      	lsrs	r3, r3, #4
 8001ba8:	f003 030f 	and.w	r3, r3, #15
 8001bac:	4950      	ldr	r1, [pc, #320]	@ (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001bae:	5ccb      	ldrb	r3, [r1, r3]
 8001bb0:	f003 031f 	and.w	r3, r3, #31
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb8:	4a4e      	ldr	r2, [pc, #312]	@ (8001cf4 <HAL_RCC_OscConfig+0x278>)
 8001bba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bbc:	4b4e      	ldr	r3, [pc, #312]	@ (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fb2f 	bl	8001224 <HAL_InitTick>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d052      	beq.n	8001c76 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
 8001bd2:	e327      	b.n	8002224 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d032      	beq.n	8001c42 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bdc:	4b43      	ldr	r3, [pc, #268]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a42      	ldr	r2, [pc, #264]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001be8:	f7ff fb6c 	bl	80012c4 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bf0:	f7ff fb68 	bl	80012c4 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e310      	b.n	8002224 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c02:	4b3a      	ldr	r3, [pc, #232]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f0      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c0e:	4b37      	ldr	r3, [pc, #220]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a36      	ldr	r2, [pc, #216]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001c14:	f043 0308 	orr.w	r3, r3, #8
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	4b34      	ldr	r3, [pc, #208]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	4931      	ldr	r1, [pc, #196]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c2c:	4b2f      	ldr	r3, [pc, #188]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	021b      	lsls	r3, r3, #8
 8001c3a:	492c      	ldr	r1, [pc, #176]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]
 8001c40:	e01a      	b.n	8001c78 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c42:	4b2a      	ldr	r3, [pc, #168]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a29      	ldr	r2, [pc, #164]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001c48:	f023 0301 	bic.w	r3, r3, #1
 8001c4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c4e:	f7ff fb39 	bl	80012c4 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c56:	f7ff fb35 	bl	80012c4 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e2dd      	b.n	8002224 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c68:	4b20      	ldr	r3, [pc, #128]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1f0      	bne.n	8001c56 <HAL_RCC_OscConfig+0x1da>
 8001c74:	e000      	b.n	8001c78 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c76:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d074      	beq.n	8001d6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d005      	beq.n	8001c96 <HAL_RCC_OscConfig+0x21a>
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	2b0c      	cmp	r3, #12
 8001c8e:	d10e      	bne.n	8001cae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	2b03      	cmp	r3, #3
 8001c94:	d10b      	bne.n	8001cae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c96:	4b15      	ldr	r3, [pc, #84]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d064      	beq.n	8001d6c <HAL_RCC_OscConfig+0x2f0>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d160      	bne.n	8001d6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e2ba      	b.n	8002224 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cb6:	d106      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x24a>
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a0b      	ldr	r2, [pc, #44]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001cbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	e026      	b.n	8001d14 <HAL_RCC_OscConfig+0x298>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cce:	d115      	bne.n	8001cfc <HAL_RCC_OscConfig+0x280>
 8001cd0:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a05      	ldr	r2, [pc, #20]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001cd6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	4b03      	ldr	r3, [pc, #12]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a02      	ldr	r2, [pc, #8]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001ce2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	e014      	b.n	8001d14 <HAL_RCC_OscConfig+0x298>
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	08007e04 	.word	0x08007e04
 8001cf4:	20000000 	.word	0x20000000
 8001cf8:	2000000c 	.word	0x2000000c
 8001cfc:	4ba0      	ldr	r3, [pc, #640]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a9f      	ldr	r2, [pc, #636]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001d02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	4b9d      	ldr	r3, [pc, #628]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a9c      	ldr	r2, [pc, #624]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001d0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d013      	beq.n	8001d44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1c:	f7ff fad2 	bl	80012c4 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d24:	f7ff face 	bl	80012c4 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b64      	cmp	r3, #100	@ 0x64
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e276      	b.n	8002224 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d36:	4b92      	ldr	r3, [pc, #584]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0x2a8>
 8001d42:	e014      	b.n	8001d6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d44:	f7ff fabe 	bl	80012c4 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7ff faba 	bl	80012c4 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b64      	cmp	r3, #100	@ 0x64
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e262      	b.n	8002224 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d5e:	4b88      	ldr	r3, [pc, #544]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x2d0>
 8001d6a:	e000      	b.n	8001d6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d060      	beq.n	8001e3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	2b04      	cmp	r3, #4
 8001d7e:	d005      	beq.n	8001d8c <HAL_RCC_OscConfig+0x310>
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	2b0c      	cmp	r3, #12
 8001d84:	d119      	bne.n	8001dba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d116      	bne.n	8001dba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d8c:	4b7c      	ldr	r3, [pc, #496]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d005      	beq.n	8001da4 <HAL_RCC_OscConfig+0x328>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e23f      	b.n	8002224 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da4:	4b76      	ldr	r3, [pc, #472]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	061b      	lsls	r3, r3, #24
 8001db2:	4973      	ldr	r1, [pc, #460]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001db8:	e040      	b.n	8001e3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d023      	beq.n	8001e0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc2:	4b6f      	ldr	r3, [pc, #444]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a6e      	ldr	r2, [pc, #440]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001dc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dce:	f7ff fa79 	bl	80012c4 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd6:	f7ff fa75 	bl	80012c4 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e21d      	b.n	8002224 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001de8:	4b65      	ldr	r3, [pc, #404]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0f0      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df4:	4b62      	ldr	r3, [pc, #392]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	061b      	lsls	r3, r3, #24
 8001e02:	495f      	ldr	r1, [pc, #380]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	604b      	str	r3, [r1, #4]
 8001e08:	e018      	b.n	8001e3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e0a:	4b5d      	ldr	r3, [pc, #372]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a5c      	ldr	r2, [pc, #368]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001e10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e16:	f7ff fa55 	bl	80012c4 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e1e:	f7ff fa51 	bl	80012c4 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e1f9      	b.n	8002224 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e30:	4b53      	ldr	r3, [pc, #332]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1f0      	bne.n	8001e1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d03c      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d01c      	beq.n	8001e8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e50:	4b4b      	ldr	r3, [pc, #300]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e56:	4a4a      	ldr	r2, [pc, #296]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e60:	f7ff fa30 	bl	80012c4 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e68:	f7ff fa2c 	bl	80012c4 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e1d4      	b.n	8002224 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e7a:	4b41      	ldr	r3, [pc, #260]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0ef      	beq.n	8001e68 <HAL_RCC_OscConfig+0x3ec>
 8001e88:	e01b      	b.n	8001ec2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e8a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e90:	4a3b      	ldr	r2, [pc, #236]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001e92:	f023 0301 	bic.w	r3, r3, #1
 8001e96:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9a:	f7ff fa13 	bl	80012c4 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea2:	f7ff fa0f 	bl	80012c4 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e1b7      	b.n	8002224 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eb4:	4b32      	ldr	r3, [pc, #200]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1ef      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 80a6 	beq.w	800201c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ed4:	4b2a      	ldr	r3, [pc, #168]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10d      	bne.n	8001efc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee0:	4b27      	ldr	r3, [pc, #156]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee4:	4a26      	ldr	r2, [pc, #152]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001ee6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eea:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eec:	4b24      	ldr	r3, [pc, #144]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001efc:	4b21      	ldr	r3, [pc, #132]	@ (8001f84 <HAL_RCC_OscConfig+0x508>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d118      	bne.n	8001f3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f08:	4b1e      	ldr	r3, [pc, #120]	@ (8001f84 <HAL_RCC_OscConfig+0x508>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8001f84 <HAL_RCC_OscConfig+0x508>)
 8001f0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f14:	f7ff f9d6 	bl	80012c4 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1c:	f7ff f9d2 	bl	80012c4 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e17a      	b.n	8002224 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f2e:	4b15      	ldr	r3, [pc, #84]	@ (8001f84 <HAL_RCC_OscConfig+0x508>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d108      	bne.n	8001f54 <HAL_RCC_OscConfig+0x4d8>
 8001f42:	4b0f      	ldr	r3, [pc, #60]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f48:	4a0d      	ldr	r2, [pc, #52]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f52:	e029      	b.n	8001fa8 <HAL_RCC_OscConfig+0x52c>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	2b05      	cmp	r3, #5
 8001f5a:	d115      	bne.n	8001f88 <HAL_RCC_OscConfig+0x50c>
 8001f5c:	4b08      	ldr	r3, [pc, #32]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f62:	4a07      	ldr	r2, [pc, #28]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001f64:	f043 0304 	orr.w	r3, r3, #4
 8001f68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f6c:	4b04      	ldr	r3, [pc, #16]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f72:	4a03      	ldr	r2, [pc, #12]	@ (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f7c:	e014      	b.n	8001fa8 <HAL_RCC_OscConfig+0x52c>
 8001f7e:	bf00      	nop
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40007000 	.word	0x40007000
 8001f88:	4b9c      	ldr	r3, [pc, #624]	@ (80021fc <HAL_RCC_OscConfig+0x780>)
 8001f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f8e:	4a9b      	ldr	r2, [pc, #620]	@ (80021fc <HAL_RCC_OscConfig+0x780>)
 8001f90:	f023 0301 	bic.w	r3, r3, #1
 8001f94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f98:	4b98      	ldr	r3, [pc, #608]	@ (80021fc <HAL_RCC_OscConfig+0x780>)
 8001f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f9e:	4a97      	ldr	r2, [pc, #604]	@ (80021fc <HAL_RCC_OscConfig+0x780>)
 8001fa0:	f023 0304 	bic.w	r3, r3, #4
 8001fa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d016      	beq.n	8001fde <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb0:	f7ff f988 	bl	80012c4 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fb6:	e00a      	b.n	8001fce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb8:	f7ff f984 	bl	80012c4 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e12a      	b.n	8002224 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fce:	4b8b      	ldr	r3, [pc, #556]	@ (80021fc <HAL_RCC_OscConfig+0x780>)
 8001fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0ed      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x53c>
 8001fdc:	e015      	b.n	800200a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fde:	f7ff f971 	bl	80012c4 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fe4:	e00a      	b.n	8001ffc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe6:	f7ff f96d 	bl	80012c4 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e113      	b.n	8002224 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ffc:	4b7f      	ldr	r3, [pc, #508]	@ (80021fc <HAL_RCC_OscConfig+0x780>)
 8001ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1ed      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800200a:	7ffb      	ldrb	r3, [r7, #31]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d105      	bne.n	800201c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002010:	4b7a      	ldr	r3, [pc, #488]	@ (80021fc <HAL_RCC_OscConfig+0x780>)
 8002012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002014:	4a79      	ldr	r2, [pc, #484]	@ (80021fc <HAL_RCC_OscConfig+0x780>)
 8002016:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800201a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80fe 	beq.w	8002222 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202a:	2b02      	cmp	r3, #2
 800202c:	f040 80d0 	bne.w	80021d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002030:	4b72      	ldr	r3, [pc, #456]	@ (80021fc <HAL_RCC_OscConfig+0x780>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f003 0203 	and.w	r2, r3, #3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002040:	429a      	cmp	r2, r3
 8002042:	d130      	bne.n	80020a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204e:	3b01      	subs	r3, #1
 8002050:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002052:	429a      	cmp	r2, r3
 8002054:	d127      	bne.n	80020a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002060:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002062:	429a      	cmp	r2, r3
 8002064:	d11f      	bne.n	80020a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002070:	2a07      	cmp	r2, #7
 8002072:	bf14      	ite	ne
 8002074:	2201      	movne	r2, #1
 8002076:	2200      	moveq	r2, #0
 8002078:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800207a:	4293      	cmp	r3, r2
 800207c:	d113      	bne.n	80020a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002088:	085b      	lsrs	r3, r3, #1
 800208a:	3b01      	subs	r3, #1
 800208c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800208e:	429a      	cmp	r2, r3
 8002090:	d109      	bne.n	80020a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209c:	085b      	lsrs	r3, r3, #1
 800209e:	3b01      	subs	r3, #1
 80020a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d06e      	beq.n	8002184 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	2b0c      	cmp	r3, #12
 80020aa:	d069      	beq.n	8002180 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020ac:	4b53      	ldr	r3, [pc, #332]	@ (80021fc <HAL_RCC_OscConfig+0x780>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d105      	bne.n	80020c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020b8:	4b50      	ldr	r3, [pc, #320]	@ (80021fc <HAL_RCC_OscConfig+0x780>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0ad      	b.n	8002224 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020c8:	4b4c      	ldr	r3, [pc, #304]	@ (80021fc <HAL_RCC_OscConfig+0x780>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a4b      	ldr	r2, [pc, #300]	@ (80021fc <HAL_RCC_OscConfig+0x780>)
 80020ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020d4:	f7ff f8f6 	bl	80012c4 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020dc:	f7ff f8f2 	bl	80012c4 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e09a      	b.n	8002224 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ee:	4b43      	ldr	r3, [pc, #268]	@ (80021fc <HAL_RCC_OscConfig+0x780>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020fa:	4b40      	ldr	r3, [pc, #256]	@ (80021fc <HAL_RCC_OscConfig+0x780>)
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	4b40      	ldr	r3, [pc, #256]	@ (8002200 <HAL_RCC_OscConfig+0x784>)
 8002100:	4013      	ands	r3, r2
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800210a:	3a01      	subs	r2, #1
 800210c:	0112      	lsls	r2, r2, #4
 800210e:	4311      	orrs	r1, r2
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002114:	0212      	lsls	r2, r2, #8
 8002116:	4311      	orrs	r1, r2
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800211c:	0852      	lsrs	r2, r2, #1
 800211e:	3a01      	subs	r2, #1
 8002120:	0552      	lsls	r2, r2, #21
 8002122:	4311      	orrs	r1, r2
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002128:	0852      	lsrs	r2, r2, #1
 800212a:	3a01      	subs	r2, #1
 800212c:	0652      	lsls	r2, r2, #25
 800212e:	4311      	orrs	r1, r2
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002134:	0912      	lsrs	r2, r2, #4
 8002136:	0452      	lsls	r2, r2, #17
 8002138:	430a      	orrs	r2, r1
 800213a:	4930      	ldr	r1, [pc, #192]	@ (80021fc <HAL_RCC_OscConfig+0x780>)
 800213c:	4313      	orrs	r3, r2
 800213e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002140:	4b2e      	ldr	r3, [pc, #184]	@ (80021fc <HAL_RCC_OscConfig+0x780>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a2d      	ldr	r2, [pc, #180]	@ (80021fc <HAL_RCC_OscConfig+0x780>)
 8002146:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800214a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800214c:	4b2b      	ldr	r3, [pc, #172]	@ (80021fc <HAL_RCC_OscConfig+0x780>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	4a2a      	ldr	r2, [pc, #168]	@ (80021fc <HAL_RCC_OscConfig+0x780>)
 8002152:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002156:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002158:	f7ff f8b4 	bl	80012c4 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002160:	f7ff f8b0 	bl	80012c4 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e058      	b.n	8002224 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002172:	4b22      	ldr	r3, [pc, #136]	@ (80021fc <HAL_RCC_OscConfig+0x780>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0f0      	beq.n	8002160 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800217e:	e050      	b.n	8002222 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e04f      	b.n	8002224 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002184:	4b1d      	ldr	r3, [pc, #116]	@ (80021fc <HAL_RCC_OscConfig+0x780>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d148      	bne.n	8002222 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002190:	4b1a      	ldr	r3, [pc, #104]	@ (80021fc <HAL_RCC_OscConfig+0x780>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a19      	ldr	r2, [pc, #100]	@ (80021fc <HAL_RCC_OscConfig+0x780>)
 8002196:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800219a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800219c:	4b17      	ldr	r3, [pc, #92]	@ (80021fc <HAL_RCC_OscConfig+0x780>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4a16      	ldr	r2, [pc, #88]	@ (80021fc <HAL_RCC_OscConfig+0x780>)
 80021a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021a8:	f7ff f88c 	bl	80012c4 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b0:	f7ff f888 	bl	80012c4 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e030      	b.n	8002224 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c2:	4b0e      	ldr	r3, [pc, #56]	@ (80021fc <HAL_RCC_OscConfig+0x780>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCC_OscConfig+0x734>
 80021ce:	e028      	b.n	8002222 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	2b0c      	cmp	r3, #12
 80021d4:	d023      	beq.n	800221e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d6:	4b09      	ldr	r3, [pc, #36]	@ (80021fc <HAL_RCC_OscConfig+0x780>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a08      	ldr	r2, [pc, #32]	@ (80021fc <HAL_RCC_OscConfig+0x780>)
 80021dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e2:	f7ff f86f 	bl	80012c4 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e8:	e00c      	b.n	8002204 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ea:	f7ff f86b 	bl	80012c4 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d905      	bls.n	8002204 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e013      	b.n	8002224 <HAL_RCC_OscConfig+0x7a8>
 80021fc:	40021000 	.word	0x40021000
 8002200:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002204:	4b09      	ldr	r3, [pc, #36]	@ (800222c <HAL_RCC_OscConfig+0x7b0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1ec      	bne.n	80021ea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002210:	4b06      	ldr	r3, [pc, #24]	@ (800222c <HAL_RCC_OscConfig+0x7b0>)
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	4905      	ldr	r1, [pc, #20]	@ (800222c <HAL_RCC_OscConfig+0x7b0>)
 8002216:	4b06      	ldr	r3, [pc, #24]	@ (8002230 <HAL_RCC_OscConfig+0x7b4>)
 8002218:	4013      	ands	r3, r2
 800221a:	60cb      	str	r3, [r1, #12]
 800221c:	e001      	b.n	8002222 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3720      	adds	r7, #32
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021000 	.word	0x40021000
 8002230:	feeefffc 	.word	0xfeeefffc

08002234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e0e7      	b.n	8002418 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002248:	4b75      	ldr	r3, [pc, #468]	@ (8002420 <HAL_RCC_ClockConfig+0x1ec>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	429a      	cmp	r2, r3
 8002254:	d910      	bls.n	8002278 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002256:	4b72      	ldr	r3, [pc, #456]	@ (8002420 <HAL_RCC_ClockConfig+0x1ec>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f023 0207 	bic.w	r2, r3, #7
 800225e:	4970      	ldr	r1, [pc, #448]	@ (8002420 <HAL_RCC_ClockConfig+0x1ec>)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	4313      	orrs	r3, r2
 8002264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002266:	4b6e      	ldr	r3, [pc, #440]	@ (8002420 <HAL_RCC_ClockConfig+0x1ec>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	429a      	cmp	r2, r3
 8002272:	d001      	beq.n	8002278 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e0cf      	b.n	8002418 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d010      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	4b66      	ldr	r3, [pc, #408]	@ (8002424 <HAL_RCC_ClockConfig+0x1f0>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002290:	429a      	cmp	r2, r3
 8002292:	d908      	bls.n	80022a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002294:	4b63      	ldr	r3, [pc, #396]	@ (8002424 <HAL_RCC_ClockConfig+0x1f0>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	4960      	ldr	r1, [pc, #384]	@ (8002424 <HAL_RCC_ClockConfig+0x1f0>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d04c      	beq.n	800234c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	d107      	bne.n	80022ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ba:	4b5a      	ldr	r3, [pc, #360]	@ (8002424 <HAL_RCC_ClockConfig+0x1f0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d121      	bne.n	800230a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e0a6      	b.n	8002418 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d107      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022d2:	4b54      	ldr	r3, [pc, #336]	@ (8002424 <HAL_RCC_ClockConfig+0x1f0>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d115      	bne.n	800230a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e09a      	b.n	8002418 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d107      	bne.n	80022fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022ea:	4b4e      	ldr	r3, [pc, #312]	@ (8002424 <HAL_RCC_ClockConfig+0x1f0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d109      	bne.n	800230a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e08e      	b.n	8002418 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002424 <HAL_RCC_ClockConfig+0x1f0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e086      	b.n	8002418 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800230a:	4b46      	ldr	r3, [pc, #280]	@ (8002424 <HAL_RCC_ClockConfig+0x1f0>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f023 0203 	bic.w	r2, r3, #3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	4943      	ldr	r1, [pc, #268]	@ (8002424 <HAL_RCC_ClockConfig+0x1f0>)
 8002318:	4313      	orrs	r3, r2
 800231a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800231c:	f7fe ffd2 	bl	80012c4 <HAL_GetTick>
 8002320:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002322:	e00a      	b.n	800233a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002324:	f7fe ffce 	bl	80012c4 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002332:	4293      	cmp	r3, r2
 8002334:	d901      	bls.n	800233a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e06e      	b.n	8002418 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233a:	4b3a      	ldr	r3, [pc, #232]	@ (8002424 <HAL_RCC_ClockConfig+0x1f0>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 020c 	and.w	r2, r3, #12
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	429a      	cmp	r2, r3
 800234a:	d1eb      	bne.n	8002324 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d010      	beq.n	800237a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	4b31      	ldr	r3, [pc, #196]	@ (8002424 <HAL_RCC_ClockConfig+0x1f0>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002364:	429a      	cmp	r2, r3
 8002366:	d208      	bcs.n	800237a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002368:	4b2e      	ldr	r3, [pc, #184]	@ (8002424 <HAL_RCC_ClockConfig+0x1f0>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	492b      	ldr	r1, [pc, #172]	@ (8002424 <HAL_RCC_ClockConfig+0x1f0>)
 8002376:	4313      	orrs	r3, r2
 8002378:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800237a:	4b29      	ldr	r3, [pc, #164]	@ (8002420 <HAL_RCC_ClockConfig+0x1ec>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d210      	bcs.n	80023aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002388:	4b25      	ldr	r3, [pc, #148]	@ (8002420 <HAL_RCC_ClockConfig+0x1ec>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f023 0207 	bic.w	r2, r3, #7
 8002390:	4923      	ldr	r1, [pc, #140]	@ (8002420 <HAL_RCC_ClockConfig+0x1ec>)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	4313      	orrs	r3, r2
 8002396:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002398:	4b21      	ldr	r3, [pc, #132]	@ (8002420 <HAL_RCC_ClockConfig+0x1ec>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d001      	beq.n	80023aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e036      	b.n	8002418 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002424 <HAL_RCC_ClockConfig+0x1f0>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	4918      	ldr	r1, [pc, #96]	@ (8002424 <HAL_RCC_ClockConfig+0x1f0>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0308 	and.w	r3, r3, #8
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d009      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023d4:	4b13      	ldr	r3, [pc, #76]	@ (8002424 <HAL_RCC_ClockConfig+0x1f0>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	4910      	ldr	r1, [pc, #64]	@ (8002424 <HAL_RCC_ClockConfig+0x1f0>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023e8:	f000 f824 	bl	8002434 <HAL_RCC_GetSysClockFreq>
 80023ec:	4602      	mov	r2, r0
 80023ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002424 <HAL_RCC_ClockConfig+0x1f0>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	091b      	lsrs	r3, r3, #4
 80023f4:	f003 030f 	and.w	r3, r3, #15
 80023f8:	490b      	ldr	r1, [pc, #44]	@ (8002428 <HAL_RCC_ClockConfig+0x1f4>)
 80023fa:	5ccb      	ldrb	r3, [r1, r3]
 80023fc:	f003 031f 	and.w	r3, r3, #31
 8002400:	fa22 f303 	lsr.w	r3, r2, r3
 8002404:	4a09      	ldr	r2, [pc, #36]	@ (800242c <HAL_RCC_ClockConfig+0x1f8>)
 8002406:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002408:	4b09      	ldr	r3, [pc, #36]	@ (8002430 <HAL_RCC_ClockConfig+0x1fc>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe ff09 	bl	8001224 <HAL_InitTick>
 8002412:	4603      	mov	r3, r0
 8002414:	72fb      	strb	r3, [r7, #11]

  return status;
 8002416:	7afb      	ldrb	r3, [r7, #11]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40022000 	.word	0x40022000
 8002424:	40021000 	.word	0x40021000
 8002428:	08007e04 	.word	0x08007e04
 800242c:	20000000 	.word	0x20000000
 8002430:	2000000c 	.word	0x2000000c

08002434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002434:	b480      	push	{r7}
 8002436:	b089      	sub	sp, #36	@ 0x24
 8002438:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
 800243e:	2300      	movs	r3, #0
 8002440:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002442:	4b3e      	ldr	r3, [pc, #248]	@ (800253c <HAL_RCC_GetSysClockFreq+0x108>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800244c:	4b3b      	ldr	r3, [pc, #236]	@ (800253c <HAL_RCC_GetSysClockFreq+0x108>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_RCC_GetSysClockFreq+0x34>
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	2b0c      	cmp	r3, #12
 8002460:	d121      	bne.n	80024a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d11e      	bne.n	80024a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002468:	4b34      	ldr	r3, [pc, #208]	@ (800253c <HAL_RCC_GetSysClockFreq+0x108>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0308 	and.w	r3, r3, #8
 8002470:	2b00      	cmp	r3, #0
 8002472:	d107      	bne.n	8002484 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002474:	4b31      	ldr	r3, [pc, #196]	@ (800253c <HAL_RCC_GetSysClockFreq+0x108>)
 8002476:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800247a:	0a1b      	lsrs	r3, r3, #8
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	61fb      	str	r3, [r7, #28]
 8002482:	e005      	b.n	8002490 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002484:	4b2d      	ldr	r3, [pc, #180]	@ (800253c <HAL_RCC_GetSysClockFreq+0x108>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	091b      	lsrs	r3, r3, #4
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002490:	4a2b      	ldr	r2, [pc, #172]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002498:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10d      	bne.n	80024bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024a4:	e00a      	b.n	80024bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d102      	bne.n	80024b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024ac:	4b25      	ldr	r3, [pc, #148]	@ (8002544 <HAL_RCC_GetSysClockFreq+0x110>)
 80024ae:	61bb      	str	r3, [r7, #24]
 80024b0:	e004      	b.n	80024bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d101      	bne.n	80024bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024b8:	4b23      	ldr	r3, [pc, #140]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x114>)
 80024ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	2b0c      	cmp	r3, #12
 80024c0:	d134      	bne.n	800252c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024c2:	4b1e      	ldr	r3, [pc, #120]	@ (800253c <HAL_RCC_GetSysClockFreq+0x108>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d003      	beq.n	80024da <HAL_RCC_GetSysClockFreq+0xa6>
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d003      	beq.n	80024e0 <HAL_RCC_GetSysClockFreq+0xac>
 80024d8:	e005      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024da:	4b1a      	ldr	r3, [pc, #104]	@ (8002544 <HAL_RCC_GetSysClockFreq+0x110>)
 80024dc:	617b      	str	r3, [r7, #20]
      break;
 80024de:	e005      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024e0:	4b19      	ldr	r3, [pc, #100]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x114>)
 80024e2:	617b      	str	r3, [r7, #20]
      break;
 80024e4:	e002      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	617b      	str	r3, [r7, #20]
      break;
 80024ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024ec:	4b13      	ldr	r3, [pc, #76]	@ (800253c <HAL_RCC_GetSysClockFreq+0x108>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	3301      	adds	r3, #1
 80024f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024fa:	4b10      	ldr	r3, [pc, #64]	@ (800253c <HAL_RCC_GetSysClockFreq+0x108>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	0a1b      	lsrs	r3, r3, #8
 8002500:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	fb03 f202 	mul.w	r2, r3, r2
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002510:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002512:	4b0a      	ldr	r3, [pc, #40]	@ (800253c <HAL_RCC_GetSysClockFreq+0x108>)
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	0e5b      	lsrs	r3, r3, #25
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	3301      	adds	r3, #1
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	fbb2 f3f3 	udiv	r3, r2, r3
 800252a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800252c:	69bb      	ldr	r3, [r7, #24]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3724      	adds	r7, #36	@ 0x24
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40021000 	.word	0x40021000
 8002540:	08007e1c 	.word	0x08007e1c
 8002544:	00f42400 	.word	0x00f42400
 8002548:	007a1200 	.word	0x007a1200

0800254c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002550:	4b03      	ldr	r3, [pc, #12]	@ (8002560 <HAL_RCC_GetHCLKFreq+0x14>)
 8002552:	681b      	ldr	r3, [r3, #0]
}
 8002554:	4618      	mov	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	20000000 	.word	0x20000000

08002564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002568:	f7ff fff0 	bl	800254c <HAL_RCC_GetHCLKFreq>
 800256c:	4602      	mov	r2, r0
 800256e:	4b06      	ldr	r3, [pc, #24]	@ (8002588 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	0a1b      	lsrs	r3, r3, #8
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	4904      	ldr	r1, [pc, #16]	@ (800258c <HAL_RCC_GetPCLK1Freq+0x28>)
 800257a:	5ccb      	ldrb	r3, [r1, r3]
 800257c:	f003 031f 	and.w	r3, r3, #31
 8002580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002584:	4618      	mov	r0, r3
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40021000 	.word	0x40021000
 800258c:	08007e14 	.word	0x08007e14

08002590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002594:	f7ff ffda 	bl	800254c <HAL_RCC_GetHCLKFreq>
 8002598:	4602      	mov	r2, r0
 800259a:	4b06      	ldr	r3, [pc, #24]	@ (80025b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	0adb      	lsrs	r3, r3, #11
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	4904      	ldr	r1, [pc, #16]	@ (80025b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025a6:	5ccb      	ldrb	r3, [r1, r3]
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40021000 	.word	0x40021000
 80025b8:	08007e14 	.word	0x08007e14

080025bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025c4:	2300      	movs	r3, #0
 80025c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002674 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025d4:	f7ff f9ee 	bl	80019b4 <HAL_PWREx_GetVoltageRange>
 80025d8:	6178      	str	r0, [r7, #20]
 80025da:	e014      	b.n	8002606 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025dc:	4b25      	ldr	r3, [pc, #148]	@ (8002674 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e0:	4a24      	ldr	r2, [pc, #144]	@ (8002674 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80025e8:	4b22      	ldr	r3, [pc, #136]	@ (8002674 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025f4:	f7ff f9de 	bl	80019b4 <HAL_PWREx_GetVoltageRange>
 80025f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002674 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025fe:	4a1d      	ldr	r2, [pc, #116]	@ (8002674 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002600:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002604:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800260c:	d10b      	bne.n	8002626 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b80      	cmp	r3, #128	@ 0x80
 8002612:	d919      	bls.n	8002648 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2ba0      	cmp	r3, #160	@ 0xa0
 8002618:	d902      	bls.n	8002620 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800261a:	2302      	movs	r3, #2
 800261c:	613b      	str	r3, [r7, #16]
 800261e:	e013      	b.n	8002648 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002620:	2301      	movs	r3, #1
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	e010      	b.n	8002648 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b80      	cmp	r3, #128	@ 0x80
 800262a:	d902      	bls.n	8002632 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800262c:	2303      	movs	r3, #3
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	e00a      	b.n	8002648 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b80      	cmp	r3, #128	@ 0x80
 8002636:	d102      	bne.n	800263e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002638:	2302      	movs	r3, #2
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	e004      	b.n	8002648 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b70      	cmp	r3, #112	@ 0x70
 8002642:	d101      	bne.n	8002648 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002644:	2301      	movs	r3, #1
 8002646:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002648:	4b0b      	ldr	r3, [pc, #44]	@ (8002678 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f023 0207 	bic.w	r2, r3, #7
 8002650:	4909      	ldr	r1, [pc, #36]	@ (8002678 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002658:	4b07      	ldr	r3, [pc, #28]	@ (8002678 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	429a      	cmp	r2, r3
 8002664:	d001      	beq.n	800266a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40021000 	.word	0x40021000
 8002678:	40022000 	.word	0x40022000

0800267c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002684:	2300      	movs	r3, #0
 8002686:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002688:	2300      	movs	r3, #0
 800268a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002694:	2b00      	cmp	r3, #0
 8002696:	d041      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800269c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80026a0:	d02a      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80026a2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80026a6:	d824      	bhi.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80026ac:	d008      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80026b2:	d81e      	bhi.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00a      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80026b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026bc:	d010      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026be:	e018      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026c0:	4b86      	ldr	r3, [pc, #536]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4a85      	ldr	r2, [pc, #532]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026cc:	e015      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3304      	adds	r3, #4
 80026d2:	2100      	movs	r1, #0
 80026d4:	4618      	mov	r0, r3
 80026d6:	f000 fabb 	bl	8002c50 <RCCEx_PLLSAI1_Config>
 80026da:	4603      	mov	r3, r0
 80026dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026de:	e00c      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3320      	adds	r3, #32
 80026e4:	2100      	movs	r1, #0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 fba6 	bl	8002e38 <RCCEx_PLLSAI2_Config>
 80026ec:	4603      	mov	r3, r0
 80026ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026f0:	e003      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	74fb      	strb	r3, [r7, #19]
      break;
 80026f6:	e000      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80026f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026fa:	7cfb      	ldrb	r3, [r7, #19]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10b      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002700:	4b76      	ldr	r3, [pc, #472]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002706:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800270e:	4973      	ldr	r1, [pc, #460]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002710:	4313      	orrs	r3, r2
 8002712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002716:	e001      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002718:	7cfb      	ldrb	r3, [r7, #19]
 800271a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d041      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800272c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002730:	d02a      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002732:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002736:	d824      	bhi.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002738:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800273c:	d008      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800273e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002742:	d81e      	bhi.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00a      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002748:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800274c:	d010      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800274e:	e018      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002750:	4b62      	ldr	r3, [pc, #392]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	4a61      	ldr	r2, [pc, #388]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002756:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800275a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800275c:	e015      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3304      	adds	r3, #4
 8002762:	2100      	movs	r1, #0
 8002764:	4618      	mov	r0, r3
 8002766:	f000 fa73 	bl	8002c50 <RCCEx_PLLSAI1_Config>
 800276a:	4603      	mov	r3, r0
 800276c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800276e:	e00c      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3320      	adds	r3, #32
 8002774:	2100      	movs	r1, #0
 8002776:	4618      	mov	r0, r3
 8002778:	f000 fb5e 	bl	8002e38 <RCCEx_PLLSAI2_Config>
 800277c:	4603      	mov	r3, r0
 800277e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002780:	e003      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	74fb      	strb	r3, [r7, #19]
      break;
 8002786:	e000      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002788:	bf00      	nop
    }

    if(ret == HAL_OK)
 800278a:	7cfb      	ldrb	r3, [r7, #19]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10b      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002790:	4b52      	ldr	r3, [pc, #328]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002796:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800279e:	494f      	ldr	r1, [pc, #316]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80027a6:	e001      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027a8:	7cfb      	ldrb	r3, [r7, #19]
 80027aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 80a0 	beq.w	80028fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ba:	2300      	movs	r3, #0
 80027bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027be:	4b47      	ldr	r3, [pc, #284]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x152>
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80027ce:	2300      	movs	r3, #0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00d      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d4:	4b41      	ldr	r3, [pc, #260]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d8:	4a40      	ldr	r2, [pc, #256]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027de:	6593      	str	r3, [r2, #88]	@ 0x58
 80027e0:	4b3e      	ldr	r3, [pc, #248]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ec:	2301      	movs	r3, #1
 80027ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027f0:	4b3b      	ldr	r3, [pc, #236]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a3a      	ldr	r2, [pc, #232]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027fc:	f7fe fd62 	bl	80012c4 <HAL_GetTick>
 8002800:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002802:	e009      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002804:	f7fe fd5e 	bl	80012c4 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d902      	bls.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	74fb      	strb	r3, [r7, #19]
        break;
 8002816:	e005      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002818:	4b31      	ldr	r3, [pc, #196]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0ef      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002824:	7cfb      	ldrb	r3, [r7, #19]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d15c      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800282a:	4b2c      	ldr	r3, [pc, #176]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800282c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002830:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002834:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d01f      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	429a      	cmp	r2, r3
 8002846:	d019      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002848:	4b24      	ldr	r3, [pc, #144]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800284a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800284e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002852:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002854:	4b21      	ldr	r3, [pc, #132]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800285a:	4a20      	ldr	r2, [pc, #128]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002860:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002864:	4b1d      	ldr	r3, [pc, #116]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800286a:	4a1c      	ldr	r2, [pc, #112]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800286c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002874:	4a19      	ldr	r2, [pc, #100]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d016      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002886:	f7fe fd1d 	bl	80012c4 <HAL_GetTick>
 800288a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800288c:	e00b      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288e:	f7fe fd19 	bl	80012c4 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	f241 3288 	movw	r2, #5000	@ 0x1388
 800289c:	4293      	cmp	r3, r2
 800289e:	d902      	bls.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	74fb      	strb	r3, [r7, #19]
            break;
 80028a4:	e006      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a6:	4b0d      	ldr	r3, [pc, #52]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0ec      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80028b4:	7cfb      	ldrb	r3, [r7, #19]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ba:	4b08      	ldr	r3, [pc, #32]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028ca:	4904      	ldr	r1, [pc, #16]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80028d2:	e009      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028d4:	7cfb      	ldrb	r3, [r7, #19]
 80028d6:	74bb      	strb	r3, [r7, #18]
 80028d8:	e006      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80028da:	bf00      	nop
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e4:	7cfb      	ldrb	r3, [r7, #19]
 80028e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028e8:	7c7b      	ldrb	r3, [r7, #17]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d105      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ee:	4b9e      	ldr	r3, [pc, #632]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f2:	4a9d      	ldr	r2, [pc, #628]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028f8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002906:	4b98      	ldr	r3, [pc, #608]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800290c:	f023 0203 	bic.w	r2, r3, #3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002914:	4994      	ldr	r1, [pc, #592]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002916:	4313      	orrs	r3, r2
 8002918:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00a      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002928:	4b8f      	ldr	r3, [pc, #572]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800292e:	f023 020c 	bic.w	r2, r3, #12
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002936:	498c      	ldr	r1, [pc, #560]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00a      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800294a:	4b87      	ldr	r3, [pc, #540]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002950:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002958:	4983      	ldr	r1, [pc, #524]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00a      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800296c:	4b7e      	ldr	r3, [pc, #504]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002972:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297a:	497b      	ldr	r1, [pc, #492]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0310 	and.w	r3, r3, #16
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00a      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800298e:	4b76      	ldr	r3, [pc, #472]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002994:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800299c:	4972      	ldr	r1, [pc, #456]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0320 	and.w	r3, r3, #32
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00a      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029b0:	4b6d      	ldr	r3, [pc, #436]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029be:	496a      	ldr	r1, [pc, #424]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00a      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029d2:	4b65      	ldr	r3, [pc, #404]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e0:	4961      	ldr	r1, [pc, #388]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00a      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029f4:	4b5c      	ldr	r3, [pc, #368]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a02:	4959      	ldr	r1, [pc, #356]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00a      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a16:	4b54      	ldr	r3, [pc, #336]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a1c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a24:	4950      	ldr	r1, [pc, #320]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00a      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a38:	4b4b      	ldr	r3, [pc, #300]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a3e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a46:	4948      	ldr	r1, [pc, #288]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00a      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a5a:	4b43      	ldr	r3, [pc, #268]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a68:	493f      	ldr	r1, [pc, #252]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d028      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a7c:	4b3a      	ldr	r3, [pc, #232]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a8a:	4937      	ldr	r1, [pc, #220]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a9a:	d106      	bne.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a9c:	4b32      	ldr	r3, [pc, #200]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4a31      	ldr	r2, [pc, #196]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002aa6:	60d3      	str	r3, [r2, #12]
 8002aa8:	e011      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002aae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ab2:	d10c      	bne.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	2101      	movs	r1, #1
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 f8c8 	bl	8002c50 <RCCEx_PLLSAI1_Config>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ac4:	7cfb      	ldrb	r3, [r7, #19]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002aca:	7cfb      	ldrb	r3, [r7, #19]
 8002acc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d028      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ada:	4b23      	ldr	r3, [pc, #140]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ae0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae8:	491f      	ldr	r1, [pc, #124]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002af8:	d106      	bne.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002afa:	4b1b      	ldr	r3, [pc, #108]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	4a1a      	ldr	r2, [pc, #104]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b04:	60d3      	str	r3, [r2, #12]
 8002b06:	e011      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b0c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b10:	d10c      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3304      	adds	r3, #4
 8002b16:	2101      	movs	r1, #1
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f000 f899 	bl	8002c50 <RCCEx_PLLSAI1_Config>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b22:	7cfb      	ldrb	r3, [r7, #19]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b28:	7cfb      	ldrb	r3, [r7, #19]
 8002b2a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d02b      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b38:	4b0b      	ldr	r3, [pc, #44]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b46:	4908      	ldr	r1, [pc, #32]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b56:	d109      	bne.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b58:	4b03      	ldr	r3, [pc, #12]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	4a02      	ldr	r2, [pc, #8]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b62:	60d3      	str	r3, [r2, #12]
 8002b64:	e014      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b66:	bf00      	nop
 8002b68:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b74:	d10c      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3304      	adds	r3, #4
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 f867 	bl	8002c50 <RCCEx_PLLSAI1_Config>
 8002b82:	4603      	mov	r3, r0
 8002b84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b86:	7cfb      	ldrb	r3, [r7, #19]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002b8c:	7cfb      	ldrb	r3, [r7, #19]
 8002b8e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d02f      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002baa:	4928      	ldr	r1, [pc, #160]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002bb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002bba:	d10d      	bne.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	2102      	movs	r1, #2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 f844 	bl	8002c50 <RCCEx_PLLSAI1_Config>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bcc:	7cfb      	ldrb	r3, [r7, #19]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d014      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002bd2:	7cfb      	ldrb	r3, [r7, #19]
 8002bd4:	74bb      	strb	r3, [r7, #18]
 8002bd6:	e011      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002bdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	3320      	adds	r3, #32
 8002be6:	2102      	movs	r1, #2
 8002be8:	4618      	mov	r0, r3
 8002bea:	f000 f925 	bl	8002e38 <RCCEx_PLLSAI2_Config>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bf2:	7cfb      	ldrb	r3, [r7, #19]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002bf8:	7cfb      	ldrb	r3, [r7, #19]
 8002bfa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00a      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c08:	4b10      	ldr	r3, [pc, #64]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c0e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c16:	490d      	ldr	r1, [pc, #52]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00b      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c2a:	4b08      	ldr	r3, [pc, #32]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c30:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c3a:	4904      	ldr	r1, [pc, #16]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c42:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40021000 	.word	0x40021000

08002c50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c5e:	4b75      	ldr	r3, [pc, #468]	@ (8002e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d018      	beq.n	8002c9c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c6a:	4b72      	ldr	r3, [pc, #456]	@ (8002e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f003 0203 	and.w	r2, r3, #3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d10d      	bne.n	8002c96 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
       ||
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d009      	beq.n	8002c96 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c82:	4b6c      	ldr	r3, [pc, #432]	@ (8002e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	091b      	lsrs	r3, r3, #4
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
       ||
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d047      	beq.n	8002d26 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	73fb      	strb	r3, [r7, #15]
 8002c9a:	e044      	b.n	8002d26 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d018      	beq.n	8002cd6 <RCCEx_PLLSAI1_Config+0x86>
 8002ca4:	2b03      	cmp	r3, #3
 8002ca6:	d825      	bhi.n	8002cf4 <RCCEx_PLLSAI1_Config+0xa4>
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d002      	beq.n	8002cb2 <RCCEx_PLLSAI1_Config+0x62>
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d009      	beq.n	8002cc4 <RCCEx_PLLSAI1_Config+0x74>
 8002cb0:	e020      	b.n	8002cf4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cb2:	4b60      	ldr	r3, [pc, #384]	@ (8002e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d11d      	bne.n	8002cfa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cc2:	e01a      	b.n	8002cfa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cc4:	4b5b      	ldr	r3, [pc, #364]	@ (8002e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d116      	bne.n	8002cfe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd4:	e013      	b.n	8002cfe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cd6:	4b57      	ldr	r3, [pc, #348]	@ (8002e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10f      	bne.n	8002d02 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ce2:	4b54      	ldr	r3, [pc, #336]	@ (8002e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d109      	bne.n	8002d02 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cf2:	e006      	b.n	8002d02 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf8:	e004      	b.n	8002d04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cfa:	bf00      	nop
 8002cfc:	e002      	b.n	8002d04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cfe:	bf00      	nop
 8002d00:	e000      	b.n	8002d04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d02:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10d      	bne.n	8002d26 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d0a:	4b4a      	ldr	r3, [pc, #296]	@ (8002e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6819      	ldr	r1, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	011b      	lsls	r3, r3, #4
 8002d1e:	430b      	orrs	r3, r1
 8002d20:	4944      	ldr	r1, [pc, #272]	@ (8002e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d17d      	bne.n	8002e28 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d2c:	4b41      	ldr	r3, [pc, #260]	@ (8002e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a40      	ldr	r2, [pc, #256]	@ (8002e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d32:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002d36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d38:	f7fe fac4 	bl	80012c4 <HAL_GetTick>
 8002d3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d3e:	e009      	b.n	8002d54 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d40:	f7fe fac0 	bl	80012c4 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d902      	bls.n	8002d54 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	73fb      	strb	r3, [r7, #15]
        break;
 8002d52:	e005      	b.n	8002d60 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d54:	4b37      	ldr	r3, [pc, #220]	@ (8002e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1ef      	bne.n	8002d40 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d160      	bne.n	8002e28 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d111      	bne.n	8002d90 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d6c:	4b31      	ldr	r3, [pc, #196]	@ (8002e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002d74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6892      	ldr	r2, [r2, #8]
 8002d7c:	0211      	lsls	r1, r2, #8
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	68d2      	ldr	r2, [r2, #12]
 8002d82:	0912      	lsrs	r2, r2, #4
 8002d84:	0452      	lsls	r2, r2, #17
 8002d86:	430a      	orrs	r2, r1
 8002d88:	492a      	ldr	r1, [pc, #168]	@ (8002e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	610b      	str	r3, [r1, #16]
 8002d8e:	e027      	b.n	8002de0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d112      	bne.n	8002dbc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d96:	4b27      	ldr	r3, [pc, #156]	@ (8002e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002d9e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6892      	ldr	r2, [r2, #8]
 8002da6:	0211      	lsls	r1, r2, #8
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6912      	ldr	r2, [r2, #16]
 8002dac:	0852      	lsrs	r2, r2, #1
 8002dae:	3a01      	subs	r2, #1
 8002db0:	0552      	lsls	r2, r2, #21
 8002db2:	430a      	orrs	r2, r1
 8002db4:	491f      	ldr	r1, [pc, #124]	@ (8002e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	610b      	str	r3, [r1, #16]
 8002dba:	e011      	b.n	8002de0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002dc4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6892      	ldr	r2, [r2, #8]
 8002dcc:	0211      	lsls	r1, r2, #8
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6952      	ldr	r2, [r2, #20]
 8002dd2:	0852      	lsrs	r2, r2, #1
 8002dd4:	3a01      	subs	r2, #1
 8002dd6:	0652      	lsls	r2, r2, #25
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	4916      	ldr	r1, [pc, #88]	@ (8002e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002de0:	4b14      	ldr	r3, [pc, #80]	@ (8002e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a13      	ldr	r2, [pc, #76]	@ (8002e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002dea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dec:	f7fe fa6a 	bl	80012c4 <HAL_GetTick>
 8002df0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002df2:	e009      	b.n	8002e08 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002df4:	f7fe fa66 	bl	80012c4 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d902      	bls.n	8002e08 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	73fb      	strb	r3, [r7, #15]
          break;
 8002e06:	e005      	b.n	8002e14 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e08:	4b0a      	ldr	r3, [pc, #40]	@ (8002e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0ef      	beq.n	8002df4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d106      	bne.n	8002e28 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e1a:	4b06      	ldr	r3, [pc, #24]	@ (8002e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e1c:	691a      	ldr	r2, [r3, #16]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	4904      	ldr	r1, [pc, #16]	@ (8002e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40021000 	.word	0x40021000

08002e38 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e42:	2300      	movs	r3, #0
 8002e44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e46:	4b6a      	ldr	r3, [pc, #424]	@ (8002ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d018      	beq.n	8002e84 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e52:	4b67      	ldr	r3, [pc, #412]	@ (8002ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f003 0203 	and.w	r2, r3, #3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d10d      	bne.n	8002e7e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
       ||
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d009      	beq.n	8002e7e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e6a:	4b61      	ldr	r3, [pc, #388]	@ (8002ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	091b      	lsrs	r3, r3, #4
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
       ||
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d047      	beq.n	8002f0e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	73fb      	strb	r3, [r7, #15]
 8002e82:	e044      	b.n	8002f0e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d018      	beq.n	8002ebe <RCCEx_PLLSAI2_Config+0x86>
 8002e8c:	2b03      	cmp	r3, #3
 8002e8e:	d825      	bhi.n	8002edc <RCCEx_PLLSAI2_Config+0xa4>
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d002      	beq.n	8002e9a <RCCEx_PLLSAI2_Config+0x62>
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d009      	beq.n	8002eac <RCCEx_PLLSAI2_Config+0x74>
 8002e98:	e020      	b.n	8002edc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e9a:	4b55      	ldr	r3, [pc, #340]	@ (8002ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d11d      	bne.n	8002ee2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eaa:	e01a      	b.n	8002ee2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002eac:	4b50      	ldr	r3, [pc, #320]	@ (8002ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d116      	bne.n	8002ee6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ebc:	e013      	b.n	8002ee6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ebe:	4b4c      	ldr	r3, [pc, #304]	@ (8002ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10f      	bne.n	8002eea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002eca:	4b49      	ldr	r3, [pc, #292]	@ (8002ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d109      	bne.n	8002eea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002eda:	e006      	b.n	8002eea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	73fb      	strb	r3, [r7, #15]
      break;
 8002ee0:	e004      	b.n	8002eec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ee2:	bf00      	nop
 8002ee4:	e002      	b.n	8002eec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ee6:	bf00      	nop
 8002ee8:	e000      	b.n	8002eec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002eea:	bf00      	nop
    }

    if(status == HAL_OK)
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10d      	bne.n	8002f0e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ef2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6819      	ldr	r1, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	430b      	orrs	r3, r1
 8002f08:	4939      	ldr	r1, [pc, #228]	@ (8002ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d167      	bne.n	8002fe4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f14:	4b36      	ldr	r3, [pc, #216]	@ (8002ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a35      	ldr	r2, [pc, #212]	@ (8002ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f20:	f7fe f9d0 	bl	80012c4 <HAL_GetTick>
 8002f24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f26:	e009      	b.n	8002f3c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f28:	f7fe f9cc 	bl	80012c4 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d902      	bls.n	8002f3c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	73fb      	strb	r3, [r7, #15]
        break;
 8002f3a:	e005      	b.n	8002f48 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f3c:	4b2c      	ldr	r3, [pc, #176]	@ (8002ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1ef      	bne.n	8002f28 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d14a      	bne.n	8002fe4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d111      	bne.n	8002f78 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f54:	4b26      	ldr	r3, [pc, #152]	@ (8002ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002f5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6892      	ldr	r2, [r2, #8]
 8002f64:	0211      	lsls	r1, r2, #8
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	68d2      	ldr	r2, [r2, #12]
 8002f6a:	0912      	lsrs	r2, r2, #4
 8002f6c:	0452      	lsls	r2, r2, #17
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	491f      	ldr	r1, [pc, #124]	@ (8002ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	614b      	str	r3, [r1, #20]
 8002f76:	e011      	b.n	8002f9c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f78:	4b1d      	ldr	r3, [pc, #116]	@ (8002ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002f80:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6892      	ldr	r2, [r2, #8]
 8002f88:	0211      	lsls	r1, r2, #8
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6912      	ldr	r2, [r2, #16]
 8002f8e:	0852      	lsrs	r2, r2, #1
 8002f90:	3a01      	subs	r2, #1
 8002f92:	0652      	lsls	r2, r2, #25
 8002f94:	430a      	orrs	r2, r1
 8002f96:	4916      	ldr	r1, [pc, #88]	@ (8002ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f9c:	4b14      	ldr	r3, [pc, #80]	@ (8002ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a13      	ldr	r2, [pc, #76]	@ (8002ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fa6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa8:	f7fe f98c 	bl	80012c4 <HAL_GetTick>
 8002fac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fae:	e009      	b.n	8002fc4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fb0:	f7fe f988 	bl	80012c4 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d902      	bls.n	8002fc4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	73fb      	strb	r3, [r7, #15]
          break;
 8002fc2:	e005      	b.n	8002fd0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0ef      	beq.n	8002fb0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002fd6:	4b06      	ldr	r3, [pc, #24]	@ (8002ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd8:	695a      	ldr	r2, [r3, #20]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	4904      	ldr	r1, [pc, #16]	@ (8002ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40021000 	.word	0x40021000

08002ff4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e040      	b.n	8003088 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800300a:	2b00      	cmp	r3, #0
 800300c:	d106      	bne.n	800301c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7fd fe7c 	bl	8000d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2224      	movs	r2, #36	@ 0x24
 8003020:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0201 	bic.w	r2, r2, #1
 8003030:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fedc 	bl	8003df8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 fc21 	bl	8003888 <UART_SetConfig>
 8003046:	4603      	mov	r3, r0
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e01b      	b.n	8003088 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800305e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800306e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 ff5b 	bl	8003f3c <UART_CheckIdleState>
 8003086:	4603      	mov	r3, r0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08a      	sub	sp, #40	@ 0x28
 8003094:	af02      	add	r7, sp, #8
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	603b      	str	r3, [r7, #0]
 800309c:	4613      	mov	r3, r2
 800309e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030a4:	2b20      	cmp	r3, #32
 80030a6:	d177      	bne.n	8003198 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <HAL_UART_Transmit+0x24>
 80030ae:	88fb      	ldrh	r3, [r7, #6]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e070      	b.n	800319a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2221      	movs	r2, #33	@ 0x21
 80030c4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030c6:	f7fe f8fd 	bl	80012c4 <HAL_GetTick>
 80030ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	88fa      	ldrh	r2, [r7, #6]
 80030d0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	88fa      	ldrh	r2, [r7, #6]
 80030d8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030e4:	d108      	bne.n	80030f8 <HAL_UART_Transmit+0x68>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d104      	bne.n	80030f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	61bb      	str	r3, [r7, #24]
 80030f6:	e003      	b.n	8003100 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030fc:	2300      	movs	r3, #0
 80030fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003100:	e02f      	b.n	8003162 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2200      	movs	r2, #0
 800310a:	2180      	movs	r1, #128	@ 0x80
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 ffbd 	bl	800408c <UART_WaitOnFlagUntilTimeout>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d004      	beq.n	8003122 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2220      	movs	r2, #32
 800311c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e03b      	b.n	800319a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10b      	bne.n	8003140 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	881a      	ldrh	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003134:	b292      	uxth	r2, r2
 8003136:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	3302      	adds	r3, #2
 800313c:	61bb      	str	r3, [r7, #24]
 800313e:	e007      	b.n	8003150 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	781a      	ldrb	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	3301      	adds	r3, #1
 800314e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003156:	b29b      	uxth	r3, r3
 8003158:	3b01      	subs	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003168:	b29b      	uxth	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1c9      	bne.n	8003102 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2200      	movs	r2, #0
 8003176:	2140      	movs	r1, #64	@ 0x40
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 ff87 	bl	800408c <UART_WaitOnFlagUntilTimeout>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d004      	beq.n	800318e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2220      	movs	r2, #32
 8003188:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e005      	b.n	800319a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2220      	movs	r2, #32
 8003192:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	e000      	b.n	800319a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003198:	2302      	movs	r3, #2
  }
}
 800319a:	4618      	mov	r0, r3
 800319c:	3720      	adds	r7, #32
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08a      	sub	sp, #40	@ 0x28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	4613      	mov	r3, r2
 80031b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	d137      	bne.n	800322c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <HAL_UART_Receive_IT+0x24>
 80031c2:	88fb      	ldrh	r3, [r7, #6]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e030      	b.n	800322e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a18      	ldr	r2, [pc, #96]	@ (8003238 <HAL_UART_Receive_IT+0x94>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d01f      	beq.n	800321c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d018      	beq.n	800321c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	e853 3f00 	ldrex	r3, [r3]
 80031f6:	613b      	str	r3, [r7, #16]
   return(result);
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80031fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003208:	623b      	str	r3, [r7, #32]
 800320a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320c:	69f9      	ldr	r1, [r7, #28]
 800320e:	6a3a      	ldr	r2, [r7, #32]
 8003210:	e841 2300 	strex	r3, r2, [r1]
 8003214:	61bb      	str	r3, [r7, #24]
   return(result);
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1e6      	bne.n	80031ea <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800321c:	88fb      	ldrh	r3, [r7, #6]
 800321e:	461a      	mov	r2, r3
 8003220:	68b9      	ldr	r1, [r7, #8]
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 ffa0 	bl	8004168 <UART_Start_Receive_IT>
 8003228:	4603      	mov	r3, r0
 800322a:	e000      	b.n	800322e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800322c:	2302      	movs	r3, #2
  }
}
 800322e:	4618      	mov	r0, r3
 8003230:	3728      	adds	r7, #40	@ 0x28
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40008000 	.word	0x40008000

0800323c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b0ba      	sub	sp, #232	@ 0xe8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003262:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003266:	f640 030f 	movw	r3, #2063	@ 0x80f
 800326a:	4013      	ands	r3, r2
 800326c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003270:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003274:	2b00      	cmp	r3, #0
 8003276:	d115      	bne.n	80032a4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800327c:	f003 0320 	and.w	r3, r3, #32
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00f      	beq.n	80032a4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003288:	f003 0320 	and.w	r3, r3, #32
 800328c:	2b00      	cmp	r3, #0
 800328e:	d009      	beq.n	80032a4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 82ca 	beq.w	800382e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	4798      	blx	r3
      }
      return;
 80032a2:	e2c4      	b.n	800382e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80032a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 8117 	beq.w	80034dc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80032ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d106      	bne.n	80032c8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80032ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80032be:	4b85      	ldr	r3, [pc, #532]	@ (80034d4 <HAL_UART_IRQHandler+0x298>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 810a 	beq.w	80034dc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80032c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d011      	beq.n	80032f8 <HAL_UART_IRQHandler+0xbc>
 80032d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00b      	beq.n	80032f8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2201      	movs	r2, #1
 80032e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032ee:	f043 0201 	orr.w	r2, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d011      	beq.n	8003328 <HAL_UART_IRQHandler+0xec>
 8003304:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00b      	beq.n	8003328 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2202      	movs	r2, #2
 8003316:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800331e:	f043 0204 	orr.w	r2, r3, #4
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d011      	beq.n	8003358 <HAL_UART_IRQHandler+0x11c>
 8003334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00b      	beq.n	8003358 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2204      	movs	r2, #4
 8003346:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800334e:	f043 0202 	orr.w	r2, r3, #2
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800335c:	f003 0308 	and.w	r3, r3, #8
 8003360:	2b00      	cmp	r3, #0
 8003362:	d017      	beq.n	8003394 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003368:	f003 0320 	and.w	r3, r3, #32
 800336c:	2b00      	cmp	r3, #0
 800336e:	d105      	bne.n	800337c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003370:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003374:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00b      	beq.n	8003394 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2208      	movs	r2, #8
 8003382:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800338a:	f043 0208 	orr.w	r2, r3, #8
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003398:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800339c:	2b00      	cmp	r3, #0
 800339e:	d012      	beq.n	80033c6 <HAL_UART_IRQHandler+0x18a>
 80033a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00c      	beq.n	80033c6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033bc:	f043 0220 	orr.w	r2, r3, #32
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 8230 	beq.w	8003832 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80033d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033d6:	f003 0320 	and.w	r3, r3, #32
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00d      	beq.n	80033fa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80033de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033e2:	f003 0320 	and.w	r3, r3, #32
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d007      	beq.n	80033fa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003400:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800340e:	2b40      	cmp	r3, #64	@ 0x40
 8003410:	d005      	beq.n	800341e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003412:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003416:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800341a:	2b00      	cmp	r3, #0
 800341c:	d04f      	beq.n	80034be <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 ff68 	bl	80042f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800342e:	2b40      	cmp	r3, #64	@ 0x40
 8003430:	d141      	bne.n	80034b6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	3308      	adds	r3, #8
 8003438:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003440:	e853 3f00 	ldrex	r3, [r3]
 8003444:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003448:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800344c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003450:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	3308      	adds	r3, #8
 800345a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800345e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003462:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003466:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800346a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800346e:	e841 2300 	strex	r3, r2, [r1]
 8003472:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003476:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1d9      	bne.n	8003432 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003482:	2b00      	cmp	r3, #0
 8003484:	d013      	beq.n	80034ae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800348a:	4a13      	ldr	r2, [pc, #76]	@ (80034d8 <HAL_UART_IRQHandler+0x29c>)
 800348c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003492:	4618      	mov	r0, r3
 8003494:	f7fe f871 	bl	800157a <HAL_DMA_Abort_IT>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d017      	beq.n	80034ce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80034a8:	4610      	mov	r0, r2
 80034aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ac:	e00f      	b.n	80034ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f9d4 	bl	800385c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b4:	e00b      	b.n	80034ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f9d0 	bl	800385c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034bc:	e007      	b.n	80034ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f9cc 	bl	800385c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80034cc:	e1b1      	b.n	8003832 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ce:	bf00      	nop
    return;
 80034d0:	e1af      	b.n	8003832 <HAL_UART_IRQHandler+0x5f6>
 80034d2:	bf00      	nop
 80034d4:	04000120 	.word	0x04000120
 80034d8:	080043bd 	.word	0x080043bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	f040 816a 	bne.w	80037ba <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80034e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ea:	f003 0310 	and.w	r3, r3, #16
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 8163 	beq.w	80037ba <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80034f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034f8:	f003 0310 	and.w	r3, r3, #16
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 815c 	beq.w	80037ba <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2210      	movs	r2, #16
 8003508:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003514:	2b40      	cmp	r3, #64	@ 0x40
 8003516:	f040 80d4 	bne.w	80036c2 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003526:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 80ad 	beq.w	800368a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003536:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800353a:	429a      	cmp	r2, r3
 800353c:	f080 80a5 	bcs.w	800368a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003546:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0320 	and.w	r3, r3, #32
 8003556:	2b00      	cmp	r3, #0
 8003558:	f040 8086 	bne.w	8003668 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003564:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003568:	e853 3f00 	ldrex	r3, [r3]
 800356c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003570:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003574:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003578:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	461a      	mov	r2, r3
 8003582:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003586:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800358a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003592:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003596:	e841 2300 	strex	r3, r2, [r1]
 800359a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800359e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1da      	bne.n	800355c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	3308      	adds	r3, #8
 80035ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035b0:	e853 3f00 	ldrex	r3, [r3]
 80035b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80035b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035b8:	f023 0301 	bic.w	r3, r3, #1
 80035bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	3308      	adds	r3, #8
 80035c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80035ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80035ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80035d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80035d6:	e841 2300 	strex	r3, r2, [r1]
 80035da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80035dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1e1      	bne.n	80035a6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	3308      	adds	r3, #8
 80035e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035ec:	e853 3f00 	ldrex	r3, [r3]
 80035f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80035f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	3308      	adds	r3, #8
 8003602:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003606:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003608:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800360c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800360e:	e841 2300 	strex	r3, r2, [r1]
 8003612:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003614:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1e3      	bne.n	80035e2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2220      	movs	r2, #32
 800361e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003630:	e853 3f00 	ldrex	r3, [r3]
 8003634:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003636:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003638:	f023 0310 	bic.w	r3, r3, #16
 800363c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	461a      	mov	r2, r3
 8003646:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800364a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800364c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003650:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003652:	e841 2300 	strex	r3, r2, [r1]
 8003656:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003658:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1e4      	bne.n	8003628 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003662:	4618      	mov	r0, r3
 8003664:	f7fd ff4b 	bl	80014fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2202      	movs	r2, #2
 800366c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800367a:	b29b      	uxth	r3, r3
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	b29b      	uxth	r3, r3
 8003680:	4619      	mov	r1, r3
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f8f4 	bl	8003870 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003688:	e0d5      	b.n	8003836 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003690:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003694:	429a      	cmp	r2, r3
 8003696:	f040 80ce 	bne.w	8003836 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b20      	cmp	r3, #32
 80036a8:	f040 80c5 	bne.w	8003836 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80036b8:	4619      	mov	r1, r3
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f8d8 	bl	8003870 <HAL_UARTEx_RxEventCallback>
      return;
 80036c0:	e0b9      	b.n	8003836 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 80ab 	beq.w	800383a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80036e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 80a6 	beq.w	800383a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036f6:	e853 3f00 	ldrex	r3, [r3]
 80036fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80036fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003702:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003710:	647b      	str	r3, [r7, #68]	@ 0x44
 8003712:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003714:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003716:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003718:	e841 2300 	strex	r3, r2, [r1]
 800371c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800371e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1e4      	bne.n	80036ee <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	3308      	adds	r3, #8
 800372a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372e:	e853 3f00 	ldrex	r3, [r3]
 8003732:	623b      	str	r3, [r7, #32]
   return(result);
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	f023 0301 	bic.w	r3, r3, #1
 800373a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3308      	adds	r3, #8
 8003744:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003748:	633a      	str	r2, [r7, #48]	@ 0x30
 800374a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800374e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003750:	e841 2300 	strex	r3, r2, [r1]
 8003754:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1e3      	bne.n	8003724 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2220      	movs	r2, #32
 8003760:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	e853 3f00 	ldrex	r3, [r3]
 800377c:	60fb      	str	r3, [r7, #12]
   return(result);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f023 0310 	bic.w	r3, r3, #16
 8003784:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	461a      	mov	r2, r3
 800378e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003792:	61fb      	str	r3, [r7, #28]
 8003794:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003796:	69b9      	ldr	r1, [r7, #24]
 8003798:	69fa      	ldr	r2, [r7, #28]
 800379a:	e841 2300 	strex	r3, r2, [r1]
 800379e:	617b      	str	r3, [r7, #20]
   return(result);
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1e4      	bne.n	8003770 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2202      	movs	r2, #2
 80037aa:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80037b0:	4619      	mov	r1, r3
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f85c 	bl	8003870 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80037b8:	e03f      	b.n	800383a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80037ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00e      	beq.n	80037e4 <HAL_UART_IRQHandler+0x5a8>
 80037c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d008      	beq.n	80037e4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80037da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 ffe9 	bl	80047b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037e2:	e02d      	b.n	8003840 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80037e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00e      	beq.n	800380e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80037f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d008      	beq.n	800380e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003800:	2b00      	cmp	r3, #0
 8003802:	d01c      	beq.n	800383e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	4798      	blx	r3
    }
    return;
 800380c:	e017      	b.n	800383e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800380e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003816:	2b00      	cmp	r3, #0
 8003818:	d012      	beq.n	8003840 <HAL_UART_IRQHandler+0x604>
 800381a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800381e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00c      	beq.n	8003840 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fdde 	bl	80043e8 <UART_EndTransmit_IT>
    return;
 800382c:	e008      	b.n	8003840 <HAL_UART_IRQHandler+0x604>
      return;
 800382e:	bf00      	nop
 8003830:	e006      	b.n	8003840 <HAL_UART_IRQHandler+0x604>
    return;
 8003832:	bf00      	nop
 8003834:	e004      	b.n	8003840 <HAL_UART_IRQHandler+0x604>
      return;
 8003836:	bf00      	nop
 8003838:	e002      	b.n	8003840 <HAL_UART_IRQHandler+0x604>
      return;
 800383a:	bf00      	nop
 800383c:	e000      	b.n	8003840 <HAL_UART_IRQHandler+0x604>
    return;
 800383e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003840:	37e8      	adds	r7, #232	@ 0xe8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop

08003848 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	460b      	mov	r3, r1
 800387a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800388c:	b08a      	sub	sp, #40	@ 0x28
 800388e:	af00      	add	r7, sp, #0
 8003890:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	431a      	orrs	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	4ba4      	ldr	r3, [pc, #656]	@ (8003b48 <UART_SetConfig+0x2c0>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	6812      	ldr	r2, [r2, #0]
 80038be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038c0:	430b      	orrs	r3, r1
 80038c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a99      	ldr	r2, [pc, #612]	@ (8003b4c <UART_SetConfig+0x2c4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d004      	beq.n	80038f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038f0:	4313      	orrs	r3, r2
 80038f2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003904:	430a      	orrs	r2, r1
 8003906:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a90      	ldr	r2, [pc, #576]	@ (8003b50 <UART_SetConfig+0x2c8>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d126      	bne.n	8003960 <UART_SetConfig+0xd8>
 8003912:	4b90      	ldr	r3, [pc, #576]	@ (8003b54 <UART_SetConfig+0x2cc>)
 8003914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003918:	f003 0303 	and.w	r3, r3, #3
 800391c:	2b03      	cmp	r3, #3
 800391e:	d81b      	bhi.n	8003958 <UART_SetConfig+0xd0>
 8003920:	a201      	add	r2, pc, #4	@ (adr r2, 8003928 <UART_SetConfig+0xa0>)
 8003922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003926:	bf00      	nop
 8003928:	08003939 	.word	0x08003939
 800392c:	08003949 	.word	0x08003949
 8003930:	08003941 	.word	0x08003941
 8003934:	08003951 	.word	0x08003951
 8003938:	2301      	movs	r3, #1
 800393a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800393e:	e116      	b.n	8003b6e <UART_SetConfig+0x2e6>
 8003940:	2302      	movs	r3, #2
 8003942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003946:	e112      	b.n	8003b6e <UART_SetConfig+0x2e6>
 8003948:	2304      	movs	r3, #4
 800394a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800394e:	e10e      	b.n	8003b6e <UART_SetConfig+0x2e6>
 8003950:	2308      	movs	r3, #8
 8003952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003956:	e10a      	b.n	8003b6e <UART_SetConfig+0x2e6>
 8003958:	2310      	movs	r3, #16
 800395a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800395e:	e106      	b.n	8003b6e <UART_SetConfig+0x2e6>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a7c      	ldr	r2, [pc, #496]	@ (8003b58 <UART_SetConfig+0x2d0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d138      	bne.n	80039dc <UART_SetConfig+0x154>
 800396a:	4b7a      	ldr	r3, [pc, #488]	@ (8003b54 <UART_SetConfig+0x2cc>)
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003970:	f003 030c 	and.w	r3, r3, #12
 8003974:	2b0c      	cmp	r3, #12
 8003976:	d82d      	bhi.n	80039d4 <UART_SetConfig+0x14c>
 8003978:	a201      	add	r2, pc, #4	@ (adr r2, 8003980 <UART_SetConfig+0xf8>)
 800397a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397e:	bf00      	nop
 8003980:	080039b5 	.word	0x080039b5
 8003984:	080039d5 	.word	0x080039d5
 8003988:	080039d5 	.word	0x080039d5
 800398c:	080039d5 	.word	0x080039d5
 8003990:	080039c5 	.word	0x080039c5
 8003994:	080039d5 	.word	0x080039d5
 8003998:	080039d5 	.word	0x080039d5
 800399c:	080039d5 	.word	0x080039d5
 80039a0:	080039bd 	.word	0x080039bd
 80039a4:	080039d5 	.word	0x080039d5
 80039a8:	080039d5 	.word	0x080039d5
 80039ac:	080039d5 	.word	0x080039d5
 80039b0:	080039cd 	.word	0x080039cd
 80039b4:	2300      	movs	r3, #0
 80039b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039ba:	e0d8      	b.n	8003b6e <UART_SetConfig+0x2e6>
 80039bc:	2302      	movs	r3, #2
 80039be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039c2:	e0d4      	b.n	8003b6e <UART_SetConfig+0x2e6>
 80039c4:	2304      	movs	r3, #4
 80039c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039ca:	e0d0      	b.n	8003b6e <UART_SetConfig+0x2e6>
 80039cc:	2308      	movs	r3, #8
 80039ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039d2:	e0cc      	b.n	8003b6e <UART_SetConfig+0x2e6>
 80039d4:	2310      	movs	r3, #16
 80039d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039da:	e0c8      	b.n	8003b6e <UART_SetConfig+0x2e6>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a5e      	ldr	r2, [pc, #376]	@ (8003b5c <UART_SetConfig+0x2d4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d125      	bne.n	8003a32 <UART_SetConfig+0x1aa>
 80039e6:	4b5b      	ldr	r3, [pc, #364]	@ (8003b54 <UART_SetConfig+0x2cc>)
 80039e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80039f0:	2b30      	cmp	r3, #48	@ 0x30
 80039f2:	d016      	beq.n	8003a22 <UART_SetConfig+0x19a>
 80039f4:	2b30      	cmp	r3, #48	@ 0x30
 80039f6:	d818      	bhi.n	8003a2a <UART_SetConfig+0x1a2>
 80039f8:	2b20      	cmp	r3, #32
 80039fa:	d00a      	beq.n	8003a12 <UART_SetConfig+0x18a>
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	d814      	bhi.n	8003a2a <UART_SetConfig+0x1a2>
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <UART_SetConfig+0x182>
 8003a04:	2b10      	cmp	r3, #16
 8003a06:	d008      	beq.n	8003a1a <UART_SetConfig+0x192>
 8003a08:	e00f      	b.n	8003a2a <UART_SetConfig+0x1a2>
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a10:	e0ad      	b.n	8003b6e <UART_SetConfig+0x2e6>
 8003a12:	2302      	movs	r3, #2
 8003a14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a18:	e0a9      	b.n	8003b6e <UART_SetConfig+0x2e6>
 8003a1a:	2304      	movs	r3, #4
 8003a1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a20:	e0a5      	b.n	8003b6e <UART_SetConfig+0x2e6>
 8003a22:	2308      	movs	r3, #8
 8003a24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a28:	e0a1      	b.n	8003b6e <UART_SetConfig+0x2e6>
 8003a2a:	2310      	movs	r3, #16
 8003a2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a30:	e09d      	b.n	8003b6e <UART_SetConfig+0x2e6>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a4a      	ldr	r2, [pc, #296]	@ (8003b60 <UART_SetConfig+0x2d8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d125      	bne.n	8003a88 <UART_SetConfig+0x200>
 8003a3c:	4b45      	ldr	r3, [pc, #276]	@ (8003b54 <UART_SetConfig+0x2cc>)
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a42:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003a46:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a48:	d016      	beq.n	8003a78 <UART_SetConfig+0x1f0>
 8003a4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a4c:	d818      	bhi.n	8003a80 <UART_SetConfig+0x1f8>
 8003a4e:	2b80      	cmp	r3, #128	@ 0x80
 8003a50:	d00a      	beq.n	8003a68 <UART_SetConfig+0x1e0>
 8003a52:	2b80      	cmp	r3, #128	@ 0x80
 8003a54:	d814      	bhi.n	8003a80 <UART_SetConfig+0x1f8>
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <UART_SetConfig+0x1d8>
 8003a5a:	2b40      	cmp	r3, #64	@ 0x40
 8003a5c:	d008      	beq.n	8003a70 <UART_SetConfig+0x1e8>
 8003a5e:	e00f      	b.n	8003a80 <UART_SetConfig+0x1f8>
 8003a60:	2300      	movs	r3, #0
 8003a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a66:	e082      	b.n	8003b6e <UART_SetConfig+0x2e6>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a6e:	e07e      	b.n	8003b6e <UART_SetConfig+0x2e6>
 8003a70:	2304      	movs	r3, #4
 8003a72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a76:	e07a      	b.n	8003b6e <UART_SetConfig+0x2e6>
 8003a78:	2308      	movs	r3, #8
 8003a7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a7e:	e076      	b.n	8003b6e <UART_SetConfig+0x2e6>
 8003a80:	2310      	movs	r3, #16
 8003a82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a86:	e072      	b.n	8003b6e <UART_SetConfig+0x2e6>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a35      	ldr	r2, [pc, #212]	@ (8003b64 <UART_SetConfig+0x2dc>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d12a      	bne.n	8003ae8 <UART_SetConfig+0x260>
 8003a92:	4b30      	ldr	r3, [pc, #192]	@ (8003b54 <UART_SetConfig+0x2cc>)
 8003a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003aa0:	d01a      	beq.n	8003ad8 <UART_SetConfig+0x250>
 8003aa2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003aa6:	d81b      	bhi.n	8003ae0 <UART_SetConfig+0x258>
 8003aa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003aac:	d00c      	beq.n	8003ac8 <UART_SetConfig+0x240>
 8003aae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ab2:	d815      	bhi.n	8003ae0 <UART_SetConfig+0x258>
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <UART_SetConfig+0x238>
 8003ab8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003abc:	d008      	beq.n	8003ad0 <UART_SetConfig+0x248>
 8003abe:	e00f      	b.n	8003ae0 <UART_SetConfig+0x258>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ac6:	e052      	b.n	8003b6e <UART_SetConfig+0x2e6>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ace:	e04e      	b.n	8003b6e <UART_SetConfig+0x2e6>
 8003ad0:	2304      	movs	r3, #4
 8003ad2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ad6:	e04a      	b.n	8003b6e <UART_SetConfig+0x2e6>
 8003ad8:	2308      	movs	r3, #8
 8003ada:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ade:	e046      	b.n	8003b6e <UART_SetConfig+0x2e6>
 8003ae0:	2310      	movs	r3, #16
 8003ae2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ae6:	e042      	b.n	8003b6e <UART_SetConfig+0x2e6>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a17      	ldr	r2, [pc, #92]	@ (8003b4c <UART_SetConfig+0x2c4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d13a      	bne.n	8003b68 <UART_SetConfig+0x2e0>
 8003af2:	4b18      	ldr	r3, [pc, #96]	@ (8003b54 <UART_SetConfig+0x2cc>)
 8003af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003afc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b00:	d01a      	beq.n	8003b38 <UART_SetConfig+0x2b0>
 8003b02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b06:	d81b      	bhi.n	8003b40 <UART_SetConfig+0x2b8>
 8003b08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b0c:	d00c      	beq.n	8003b28 <UART_SetConfig+0x2a0>
 8003b0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b12:	d815      	bhi.n	8003b40 <UART_SetConfig+0x2b8>
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <UART_SetConfig+0x298>
 8003b18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b1c:	d008      	beq.n	8003b30 <UART_SetConfig+0x2a8>
 8003b1e:	e00f      	b.n	8003b40 <UART_SetConfig+0x2b8>
 8003b20:	2300      	movs	r3, #0
 8003b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b26:	e022      	b.n	8003b6e <UART_SetConfig+0x2e6>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b2e:	e01e      	b.n	8003b6e <UART_SetConfig+0x2e6>
 8003b30:	2304      	movs	r3, #4
 8003b32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b36:	e01a      	b.n	8003b6e <UART_SetConfig+0x2e6>
 8003b38:	2308      	movs	r3, #8
 8003b3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b3e:	e016      	b.n	8003b6e <UART_SetConfig+0x2e6>
 8003b40:	2310      	movs	r3, #16
 8003b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b46:	e012      	b.n	8003b6e <UART_SetConfig+0x2e6>
 8003b48:	efff69f3 	.word	0xefff69f3
 8003b4c:	40008000 	.word	0x40008000
 8003b50:	40013800 	.word	0x40013800
 8003b54:	40021000 	.word	0x40021000
 8003b58:	40004400 	.word	0x40004400
 8003b5c:	40004800 	.word	0x40004800
 8003b60:	40004c00 	.word	0x40004c00
 8003b64:	40005000 	.word	0x40005000
 8003b68:	2310      	movs	r3, #16
 8003b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a9f      	ldr	r2, [pc, #636]	@ (8003df0 <UART_SetConfig+0x568>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d17a      	bne.n	8003c6e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	d824      	bhi.n	8003bca <UART_SetConfig+0x342>
 8003b80:	a201      	add	r2, pc, #4	@ (adr r2, 8003b88 <UART_SetConfig+0x300>)
 8003b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b86:	bf00      	nop
 8003b88:	08003bad 	.word	0x08003bad
 8003b8c:	08003bcb 	.word	0x08003bcb
 8003b90:	08003bb5 	.word	0x08003bb5
 8003b94:	08003bcb 	.word	0x08003bcb
 8003b98:	08003bbb 	.word	0x08003bbb
 8003b9c:	08003bcb 	.word	0x08003bcb
 8003ba0:	08003bcb 	.word	0x08003bcb
 8003ba4:	08003bcb 	.word	0x08003bcb
 8003ba8:	08003bc3 	.word	0x08003bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bac:	f7fe fcda 	bl	8002564 <HAL_RCC_GetPCLK1Freq>
 8003bb0:	61f8      	str	r0, [r7, #28]
        break;
 8003bb2:	e010      	b.n	8003bd6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bb4:	4b8f      	ldr	r3, [pc, #572]	@ (8003df4 <UART_SetConfig+0x56c>)
 8003bb6:	61fb      	str	r3, [r7, #28]
        break;
 8003bb8:	e00d      	b.n	8003bd6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bba:	f7fe fc3b 	bl	8002434 <HAL_RCC_GetSysClockFreq>
 8003bbe:	61f8      	str	r0, [r7, #28]
        break;
 8003bc0:	e009      	b.n	8003bd6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bc6:	61fb      	str	r3, [r7, #28]
        break;
 8003bc8:	e005      	b.n	8003bd6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003bd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 80fb 	beq.w	8003dd4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	4613      	mov	r3, r2
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	4413      	add	r3, r2
 8003be8:	69fa      	ldr	r2, [r7, #28]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d305      	bcc.n	8003bfa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bf4:	69fa      	ldr	r2, [r7, #28]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d903      	bls.n	8003c02 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003c00:	e0e8      	b.n	8003dd4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	2200      	movs	r2, #0
 8003c06:	461c      	mov	r4, r3
 8003c08:	4615      	mov	r5, r2
 8003c0a:	f04f 0200 	mov.w	r2, #0
 8003c0e:	f04f 0300 	mov.w	r3, #0
 8003c12:	022b      	lsls	r3, r5, #8
 8003c14:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c18:	0222      	lsls	r2, r4, #8
 8003c1a:	68f9      	ldr	r1, [r7, #12]
 8003c1c:	6849      	ldr	r1, [r1, #4]
 8003c1e:	0849      	lsrs	r1, r1, #1
 8003c20:	2000      	movs	r0, #0
 8003c22:	4688      	mov	r8, r1
 8003c24:	4681      	mov	r9, r0
 8003c26:	eb12 0a08 	adds.w	sl, r2, r8
 8003c2a:	eb43 0b09 	adc.w	fp, r3, r9
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	603b      	str	r3, [r7, #0]
 8003c36:	607a      	str	r2, [r7, #4]
 8003c38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c3c:	4650      	mov	r0, sl
 8003c3e:	4659      	mov	r1, fp
 8003c40:	f7fc fb16 	bl	8000270 <__aeabi_uldivmod>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4613      	mov	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c52:	d308      	bcc.n	8003c66 <UART_SetConfig+0x3de>
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c5a:	d204      	bcs.n	8003c66 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	60da      	str	r2, [r3, #12]
 8003c64:	e0b6      	b.n	8003dd4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003c6c:	e0b2      	b.n	8003dd4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c76:	d15e      	bne.n	8003d36 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003c78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d828      	bhi.n	8003cd2 <UART_SetConfig+0x44a>
 8003c80:	a201      	add	r2, pc, #4	@ (adr r2, 8003c88 <UART_SetConfig+0x400>)
 8003c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c86:	bf00      	nop
 8003c88:	08003cad 	.word	0x08003cad
 8003c8c:	08003cb5 	.word	0x08003cb5
 8003c90:	08003cbd 	.word	0x08003cbd
 8003c94:	08003cd3 	.word	0x08003cd3
 8003c98:	08003cc3 	.word	0x08003cc3
 8003c9c:	08003cd3 	.word	0x08003cd3
 8003ca0:	08003cd3 	.word	0x08003cd3
 8003ca4:	08003cd3 	.word	0x08003cd3
 8003ca8:	08003ccb 	.word	0x08003ccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cac:	f7fe fc5a 	bl	8002564 <HAL_RCC_GetPCLK1Freq>
 8003cb0:	61f8      	str	r0, [r7, #28]
        break;
 8003cb2:	e014      	b.n	8003cde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cb4:	f7fe fc6c 	bl	8002590 <HAL_RCC_GetPCLK2Freq>
 8003cb8:	61f8      	str	r0, [r7, #28]
        break;
 8003cba:	e010      	b.n	8003cde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cbc:	4b4d      	ldr	r3, [pc, #308]	@ (8003df4 <UART_SetConfig+0x56c>)
 8003cbe:	61fb      	str	r3, [r7, #28]
        break;
 8003cc0:	e00d      	b.n	8003cde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cc2:	f7fe fbb7 	bl	8002434 <HAL_RCC_GetSysClockFreq>
 8003cc6:	61f8      	str	r0, [r7, #28]
        break;
 8003cc8:	e009      	b.n	8003cde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cce:	61fb      	str	r3, [r7, #28]
        break;
 8003cd0:	e005      	b.n	8003cde <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003cdc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d077      	beq.n	8003dd4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	005a      	lsls	r2, r3, #1
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	085b      	lsrs	r3, r3, #1
 8003cee:	441a      	add	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	2b0f      	cmp	r3, #15
 8003cfe:	d916      	bls.n	8003d2e <UART_SetConfig+0x4a6>
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d06:	d212      	bcs.n	8003d2e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	f023 030f 	bic.w	r3, r3, #15
 8003d10:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	085b      	lsrs	r3, r3, #1
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	8afb      	ldrh	r3, [r7, #22]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	8afa      	ldrh	r2, [r7, #22]
 8003d2a:	60da      	str	r2, [r3, #12]
 8003d2c:	e052      	b.n	8003dd4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d34:	e04e      	b.n	8003dd4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d36:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d827      	bhi.n	8003d8e <UART_SetConfig+0x506>
 8003d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d44 <UART_SetConfig+0x4bc>)
 8003d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d44:	08003d69 	.word	0x08003d69
 8003d48:	08003d71 	.word	0x08003d71
 8003d4c:	08003d79 	.word	0x08003d79
 8003d50:	08003d8f 	.word	0x08003d8f
 8003d54:	08003d7f 	.word	0x08003d7f
 8003d58:	08003d8f 	.word	0x08003d8f
 8003d5c:	08003d8f 	.word	0x08003d8f
 8003d60:	08003d8f 	.word	0x08003d8f
 8003d64:	08003d87 	.word	0x08003d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d68:	f7fe fbfc 	bl	8002564 <HAL_RCC_GetPCLK1Freq>
 8003d6c:	61f8      	str	r0, [r7, #28]
        break;
 8003d6e:	e014      	b.n	8003d9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d70:	f7fe fc0e 	bl	8002590 <HAL_RCC_GetPCLK2Freq>
 8003d74:	61f8      	str	r0, [r7, #28]
        break;
 8003d76:	e010      	b.n	8003d9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d78:	4b1e      	ldr	r3, [pc, #120]	@ (8003df4 <UART_SetConfig+0x56c>)
 8003d7a:	61fb      	str	r3, [r7, #28]
        break;
 8003d7c:	e00d      	b.n	8003d9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d7e:	f7fe fb59 	bl	8002434 <HAL_RCC_GetSysClockFreq>
 8003d82:	61f8      	str	r0, [r7, #28]
        break;
 8003d84:	e009      	b.n	8003d9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d8a:	61fb      	str	r3, [r7, #28]
        break;
 8003d8c:	e005      	b.n	8003d9a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003d98:	bf00      	nop
    }

    if (pclk != 0U)
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d019      	beq.n	8003dd4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	085a      	lsrs	r2, r3, #1
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	441a      	add	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	2b0f      	cmp	r3, #15
 8003db8:	d909      	bls.n	8003dce <UART_SetConfig+0x546>
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dc0:	d205      	bcs.n	8003dce <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	60da      	str	r2, [r3, #12]
 8003dcc:	e002      	b.n	8003dd4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003de0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3728      	adds	r7, #40	@ 0x28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dee:	bf00      	nop
 8003df0:	40008000 	.word	0x40008000
 8003df4:	00f42400 	.word	0x00f42400

08003df8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e04:	f003 0308 	and.w	r3, r3, #8
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00a      	beq.n	8003e22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00a      	beq.n	8003e66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8c:	f003 0310 	and.w	r3, r3, #16
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00a      	beq.n	8003eaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eae:	f003 0320 	and.w	r3, r3, #32
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d01a      	beq.n	8003f0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ef6:	d10a      	bne.n	8003f0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00a      	beq.n	8003f30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	605a      	str	r2, [r3, #4]
  }
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b098      	sub	sp, #96	@ 0x60
 8003f40:	af02      	add	r7, sp, #8
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f4c:	f7fd f9ba 	bl	80012c4 <HAL_GetTick>
 8003f50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0308 	and.w	r3, r3, #8
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d12e      	bne.n	8003fbe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f88c 	bl	800408c <UART_WaitOnFlagUntilTimeout>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d021      	beq.n	8003fbe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f82:	e853 3f00 	ldrex	r3, [r3]
 8003f86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	461a      	mov	r2, r3
 8003f96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f98:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f9a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fa0:	e841 2300 	strex	r3, r2, [r1]
 8003fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003fa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1e6      	bne.n	8003f7a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e062      	b.n	8004084 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d149      	bne.n	8004060 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fcc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f856 	bl	800408c <UART_WaitOnFlagUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d03c      	beq.n	8004060 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fee:	e853 3f00 	ldrex	r3, [r3]
 8003ff2:	623b      	str	r3, [r7, #32]
   return(result);
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	461a      	mov	r2, r3
 8004002:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004004:	633b      	str	r3, [r7, #48]	@ 0x30
 8004006:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004008:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800400a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800400c:	e841 2300 	strex	r3, r2, [r1]
 8004010:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1e6      	bne.n	8003fe6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3308      	adds	r3, #8
 800401e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	e853 3f00 	ldrex	r3, [r3]
 8004026:	60fb      	str	r3, [r7, #12]
   return(result);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 0301 	bic.w	r3, r3, #1
 800402e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3308      	adds	r3, #8
 8004036:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004038:	61fa      	str	r2, [r7, #28]
 800403a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403c:	69b9      	ldr	r1, [r7, #24]
 800403e:	69fa      	ldr	r2, [r7, #28]
 8004040:	e841 2300 	strex	r3, r2, [r1]
 8004044:	617b      	str	r3, [r7, #20]
   return(result);
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1e5      	bne.n	8004018 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2220      	movs	r2, #32
 8004050:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e011      	b.n	8004084 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2220      	movs	r2, #32
 8004064:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2220      	movs	r2, #32
 800406a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3758      	adds	r7, #88	@ 0x58
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	4613      	mov	r3, r2
 800409a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800409c:	e04f      	b.n	800413e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040a4:	d04b      	beq.n	800413e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040a6:	f7fd f90d 	bl	80012c4 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d302      	bcc.n	80040bc <UART_WaitOnFlagUntilTimeout+0x30>
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e04e      	b.n	800415e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0304 	and.w	r3, r3, #4
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d037      	beq.n	800413e <UART_WaitOnFlagUntilTimeout+0xb2>
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b80      	cmp	r3, #128	@ 0x80
 80040d2:	d034      	beq.n	800413e <UART_WaitOnFlagUntilTimeout+0xb2>
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2b40      	cmp	r3, #64	@ 0x40
 80040d8:	d031      	beq.n	800413e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d110      	bne.n	800410a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2208      	movs	r2, #8
 80040ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 f8ff 	bl	80042f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2208      	movs	r2, #8
 80040fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e029      	b.n	800415e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004114:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004118:	d111      	bne.n	800413e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004122:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 f8e5 	bl	80042f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e00f      	b.n	800415e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69da      	ldr	r2, [r3, #28]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	4013      	ands	r3, r2
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	429a      	cmp	r2, r3
 800414c:	bf0c      	ite	eq
 800414e:	2301      	moveq	r3, #1
 8004150:	2300      	movne	r3, #0
 8004152:	b2db      	uxtb	r3, r3
 8004154:	461a      	mov	r2, r3
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	429a      	cmp	r2, r3
 800415a:	d0a0      	beq.n	800409e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
	...

08004168 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004168:	b480      	push	{r7}
 800416a:	b097      	sub	sp, #92	@ 0x5c
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	4613      	mov	r3, r2
 8004174:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	88fa      	ldrh	r2, [r7, #6]
 8004180:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	88fa      	ldrh	r2, [r7, #6]
 8004188:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800419a:	d10e      	bne.n	80041ba <UART_Start_Receive_IT+0x52>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d105      	bne.n	80041b0 <UART_Start_Receive_IT+0x48>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80041aa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80041ae:	e02d      	b.n	800420c <UART_Start_Receive_IT+0xa4>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	22ff      	movs	r2, #255	@ 0xff
 80041b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80041b8:	e028      	b.n	800420c <UART_Start_Receive_IT+0xa4>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10d      	bne.n	80041de <UART_Start_Receive_IT+0x76>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d104      	bne.n	80041d4 <UART_Start_Receive_IT+0x6c>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	22ff      	movs	r2, #255	@ 0xff
 80041ce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80041d2:	e01b      	b.n	800420c <UART_Start_Receive_IT+0xa4>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	227f      	movs	r2, #127	@ 0x7f
 80041d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80041dc:	e016      	b.n	800420c <UART_Start_Receive_IT+0xa4>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041e6:	d10d      	bne.n	8004204 <UART_Start_Receive_IT+0x9c>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d104      	bne.n	80041fa <UART_Start_Receive_IT+0x92>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	227f      	movs	r2, #127	@ 0x7f
 80041f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80041f8:	e008      	b.n	800420c <UART_Start_Receive_IT+0xa4>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	223f      	movs	r2, #63	@ 0x3f
 80041fe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004202:	e003      	b.n	800420c <UART_Start_Receive_IT+0xa4>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2222      	movs	r2, #34	@ 0x22
 8004218:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3308      	adds	r3, #8
 8004222:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004226:	e853 3f00 	ldrex	r3, [r3]
 800422a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800422c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800422e:	f043 0301 	orr.w	r3, r3, #1
 8004232:	657b      	str	r3, [r7, #84]	@ 0x54
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	3308      	adds	r3, #8
 800423a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800423c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800423e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004240:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004242:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004244:	e841 2300 	strex	r3, r2, [r1]
 8004248:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800424a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1e5      	bne.n	800421c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004258:	d107      	bne.n	800426a <UART_Start_Receive_IT+0x102>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d103      	bne.n	800426a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4a21      	ldr	r2, [pc, #132]	@ (80042ec <UART_Start_Receive_IT+0x184>)
 8004266:	669a      	str	r2, [r3, #104]	@ 0x68
 8004268:	e002      	b.n	8004270 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4a20      	ldr	r2, [pc, #128]	@ (80042f0 <UART_Start_Receive_IT+0x188>)
 800426e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d019      	beq.n	80042ac <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004280:	e853 3f00 	ldrex	r3, [r3]
 8004284:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004288:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800428c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004296:	637b      	str	r3, [r7, #52]	@ 0x34
 8004298:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800429c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800429e:	e841 2300 	strex	r3, r2, [r1]
 80042a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80042a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1e6      	bne.n	8004278 <UART_Start_Receive_IT+0x110>
 80042aa:	e018      	b.n	80042de <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	e853 3f00 	ldrex	r3, [r3]
 80042b8:	613b      	str	r3, [r7, #16]
   return(result);
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f043 0320 	orr.w	r3, r3, #32
 80042c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042ca:	623b      	str	r3, [r7, #32]
 80042cc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ce:	69f9      	ldr	r1, [r7, #28]
 80042d0:	6a3a      	ldr	r2, [r7, #32]
 80042d2:	e841 2300 	strex	r3, r2, [r1]
 80042d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1e6      	bne.n	80042ac <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	375c      	adds	r7, #92	@ 0x5c
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	080045f9 	.word	0x080045f9
 80042f0:	0800443d 	.word	0x0800443d

080042f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b095      	sub	sp, #84	@ 0x54
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004304:	e853 3f00 	ldrex	r3, [r3]
 8004308:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800430a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004310:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	461a      	mov	r2, r3
 8004318:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800431a:	643b      	str	r3, [r7, #64]	@ 0x40
 800431c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004320:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004322:	e841 2300 	strex	r3, r2, [r1]
 8004326:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1e6      	bne.n	80042fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3308      	adds	r3, #8
 8004334:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	e853 3f00 	ldrex	r3, [r3]
 800433c:	61fb      	str	r3, [r7, #28]
   return(result);
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	f023 0301 	bic.w	r3, r3, #1
 8004344:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	3308      	adds	r3, #8
 800434c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800434e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004350:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004352:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004354:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004356:	e841 2300 	strex	r3, r2, [r1]
 800435a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800435c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1e5      	bne.n	800432e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004366:	2b01      	cmp	r3, #1
 8004368:	d118      	bne.n	800439c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	e853 3f00 	ldrex	r3, [r3]
 8004376:	60bb      	str	r3, [r7, #8]
   return(result);
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f023 0310 	bic.w	r3, r3, #16
 800437e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	461a      	mov	r2, r3
 8004386:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004388:	61bb      	str	r3, [r7, #24]
 800438a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438c:	6979      	ldr	r1, [r7, #20]
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	e841 2300 	strex	r3, r2, [r1]
 8004394:	613b      	str	r3, [r7, #16]
   return(result);
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1e6      	bne.n	800436a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2220      	movs	r2, #32
 80043a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80043b0:	bf00      	nop
 80043b2:	3754      	adds	r7, #84	@ 0x54
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f7ff fa3e 	bl	800385c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043e0:	bf00      	nop
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	e853 3f00 	ldrex	r3, [r3]
 80043fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004404:	61fb      	str	r3, [r7, #28]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	461a      	mov	r2, r3
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	61bb      	str	r3, [r7, #24]
 8004410:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004412:	6979      	ldr	r1, [r7, #20]
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	e841 2300 	strex	r3, r2, [r1]
 800441a:	613b      	str	r3, [r7, #16]
   return(result);
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1e6      	bne.n	80043f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2220      	movs	r2, #32
 8004426:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7ff fa0a 	bl	8003848 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004434:	bf00      	nop
 8004436:	3720      	adds	r7, #32
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b09c      	sub	sp, #112	@ 0x70
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800444a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004454:	2b22      	cmp	r3, #34	@ 0x22
 8004456:	f040 80be 	bne.w	80045d6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004460:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004464:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004468:	b2d9      	uxtb	r1, r3
 800446a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800446e:	b2da      	uxtb	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004474:	400a      	ands	r2, r1
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800447e:	1c5a      	adds	r2, r3, #1
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800448a:	b29b      	uxth	r3, r3
 800448c:	3b01      	subs	r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800449c:	b29b      	uxth	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f040 80a3 	bne.w	80045ea <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044ac:	e853 3f00 	ldrex	r3, [r3]
 80044b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80044b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	461a      	mov	r2, r3
 80044c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044c4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80044c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80044ca:	e841 2300 	strex	r3, r2, [r1]
 80044ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80044d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1e6      	bne.n	80044a4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3308      	adds	r3, #8
 80044dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e0:	e853 3f00 	ldrex	r3, [r3]
 80044e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044e8:	f023 0301 	bic.w	r3, r3, #1
 80044ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3308      	adds	r3, #8
 80044f4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80044f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80044f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1e5      	bne.n	80044d6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2220      	movs	r2, #32
 800450e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a34      	ldr	r2, [pc, #208]	@ (80045f4 <UART_RxISR_8BIT+0x1b8>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d01f      	beq.n	8004568 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d018      	beq.n	8004568 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453e:	e853 3f00 	ldrex	r3, [r3]
 8004542:	623b      	str	r3, [r7, #32]
   return(result);
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800454a:	663b      	str	r3, [r7, #96]	@ 0x60
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	461a      	mov	r2, r3
 8004552:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004554:	633b      	str	r3, [r7, #48]	@ 0x30
 8004556:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004558:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800455a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800455c:	e841 2300 	strex	r3, r2, [r1]
 8004560:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1e6      	bne.n	8004536 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800456c:	2b01      	cmp	r3, #1
 800456e:	d12e      	bne.n	80045ce <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	e853 3f00 	ldrex	r3, [r3]
 8004582:	60fb      	str	r3, [r7, #12]
   return(result);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 0310 	bic.w	r3, r3, #16
 800458a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	461a      	mov	r2, r3
 8004592:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004594:	61fb      	str	r3, [r7, #28]
 8004596:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004598:	69b9      	ldr	r1, [r7, #24]
 800459a:	69fa      	ldr	r2, [r7, #28]
 800459c:	e841 2300 	strex	r3, r2, [r1]
 80045a0:	617b      	str	r3, [r7, #20]
   return(result);
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1e6      	bne.n	8004576 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	f003 0310 	and.w	r3, r3, #16
 80045b2:	2b10      	cmp	r3, #16
 80045b4:	d103      	bne.n	80045be <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2210      	movs	r2, #16
 80045bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80045c4:	4619      	mov	r1, r3
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7ff f952 	bl	8003870 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045cc:	e00d      	b.n	80045ea <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7fc f8b8 	bl	8000744 <HAL_UART_RxCpltCallback>
}
 80045d4:	e009      	b.n	80045ea <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	8b1b      	ldrh	r3, [r3, #24]
 80045dc:	b29a      	uxth	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0208 	orr.w	r2, r2, #8
 80045e6:	b292      	uxth	r2, r2
 80045e8:	831a      	strh	r2, [r3, #24]
}
 80045ea:	bf00      	nop
 80045ec:	3770      	adds	r7, #112	@ 0x70
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	40008000 	.word	0x40008000

080045f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b09c      	sub	sp, #112	@ 0x70
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004606:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004610:	2b22      	cmp	r3, #34	@ 0x22
 8004612:	f040 80be 	bne.w	8004792 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800461c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004624:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004626:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800462a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800462e:	4013      	ands	r3, r2
 8004630:	b29a      	uxth	r2, r3
 8004632:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004634:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800463a:	1c9a      	adds	r2, r3, #2
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004646:	b29b      	uxth	r3, r3
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	f040 80a3 	bne.w	80047a6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004666:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004668:	e853 3f00 	ldrex	r3, [r3]
 800466c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800466e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004670:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004674:	667b      	str	r3, [r7, #100]	@ 0x64
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800467e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004680:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004682:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004684:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004686:	e841 2300 	strex	r3, r2, [r1]
 800468a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800468c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1e6      	bne.n	8004660 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	3308      	adds	r3, #8
 8004698:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800469c:	e853 3f00 	ldrex	r3, [r3]
 80046a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a4:	f023 0301 	bic.w	r3, r3, #1
 80046a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3308      	adds	r3, #8
 80046b0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80046b2:	643a      	str	r2, [r7, #64]	@ 0x40
 80046b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046ba:	e841 2300 	strex	r3, r2, [r1]
 80046be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1e5      	bne.n	8004692 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a34      	ldr	r2, [pc, #208]	@ (80047b0 <UART_RxISR_16BIT+0x1b8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d01f      	beq.n	8004724 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d018      	beq.n	8004724 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	e853 3f00 	ldrex	r3, [r3]
 80046fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004706:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	461a      	mov	r2, r3
 800470e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004710:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004712:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004714:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004716:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004718:	e841 2300 	strex	r3, r2, [r1]
 800471c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800471e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1e6      	bne.n	80046f2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004728:	2b01      	cmp	r3, #1
 800472a:	d12e      	bne.n	800478a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	e853 3f00 	ldrex	r3, [r3]
 800473e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	f023 0310 	bic.w	r3, r3, #16
 8004746:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	461a      	mov	r2, r3
 800474e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004750:	61bb      	str	r3, [r7, #24]
 8004752:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004754:	6979      	ldr	r1, [r7, #20]
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	e841 2300 	strex	r3, r2, [r1]
 800475c:	613b      	str	r3, [r7, #16]
   return(result);
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1e6      	bne.n	8004732 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	f003 0310 	and.w	r3, r3, #16
 800476e:	2b10      	cmp	r3, #16
 8004770:	d103      	bne.n	800477a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2210      	movs	r2, #16
 8004778:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004780:	4619      	mov	r1, r3
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7ff f874 	bl	8003870 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004788:	e00d      	b.n	80047a6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fb ffda 	bl	8000744 <HAL_UART_RxCpltCallback>
}
 8004790:	e009      	b.n	80047a6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	8b1b      	ldrh	r3, [r3, #24]
 8004798:	b29a      	uxth	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0208 	orr.w	r2, r2, #8
 80047a2:	b292      	uxth	r2, r2
 80047a4:	831a      	strh	r2, [r3, #24]
}
 80047a6:	bf00      	nop
 80047a8:	3770      	adds	r7, #112	@ 0x70
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	40008000 	.word	0x40008000

080047b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	4603      	mov	r3, r0
 80047d0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80047d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047da:	2b84      	cmp	r3, #132	@ 0x84
 80047dc:	d005      	beq.n	80047ea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80047de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4413      	add	r3, r2
 80047e6:	3303      	adds	r3, #3
 80047e8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80047ea:	68fb      	ldr	r3, [r7, #12]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80047fc:	f000 fdca 	bl	8005394 <vTaskStartScheduler>
  
  return osOK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	bd80      	pop	{r7, pc}

08004806 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004806:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004808:	b089      	sub	sp, #36	@ 0x24
 800480a:	af04      	add	r7, sp, #16
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d020      	beq.n	800485a <osThreadCreate+0x54>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d01c      	beq.n	800485a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685c      	ldr	r4, [r3, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	691e      	ldr	r6, [r3, #16]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff ffc8 	bl	80047c8 <makeFreeRtosPriority>
 8004838:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004842:	9202      	str	r2, [sp, #8]
 8004844:	9301      	str	r3, [sp, #4]
 8004846:	9100      	str	r1, [sp, #0]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	4632      	mov	r2, r6
 800484c:	4629      	mov	r1, r5
 800484e:	4620      	mov	r0, r4
 8004850:	f000 fbd2 	bl	8004ff8 <xTaskCreateStatic>
 8004854:	4603      	mov	r3, r0
 8004856:	60fb      	str	r3, [r7, #12]
 8004858:	e01c      	b.n	8004894 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685c      	ldr	r4, [r3, #4]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004866:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff ffaa 	bl	80047c8 <makeFreeRtosPriority>
 8004874:	4602      	mov	r2, r0
 8004876:	f107 030c 	add.w	r3, r7, #12
 800487a:	9301      	str	r3, [sp, #4]
 800487c:	9200      	str	r2, [sp, #0]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	4632      	mov	r2, r6
 8004882:	4629      	mov	r1, r5
 8004884:	4620      	mov	r0, r4
 8004886:	f000 fc17 	bl	80050b8 <xTaskCreate>
 800488a:	4603      	mov	r3, r0
 800488c:	2b01      	cmp	r3, #1
 800488e:	d001      	beq.n	8004894 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004890:	2300      	movs	r3, #0
 8004892:	e000      	b.n	8004896 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004894:	68fb      	ldr	r3, [r7, #12]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800489e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b084      	sub	sp, #16
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <osDelay+0x16>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	e000      	b.n	80048b6 <osDelay+0x18>
 80048b4:	2301      	movs	r3, #1
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 fd36 	bl	8005328 <vTaskDelay>
  
  return osOK;
 80048bc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f103 0208 	add.w	r2, r3, #8
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80048de:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f103 0208 	add.w	r2, r3, #8
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f103 0208 	add.w	r2, r3, #8
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	689a      	ldr	r2, [r3, #8]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	601a      	str	r2, [r3, #0]
}
 800495c:	bf00      	nop
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800497e:	d103      	bne.n	8004988 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	e00c      	b.n	80049a2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3308      	adds	r3, #8
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	e002      	b.n	8004996 <vListInsert+0x2e>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d2f6      	bcs.n	8004990 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	601a      	str	r2, [r3, #0]
}
 80049ce:	bf00      	nop
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80049da:	b480      	push	{r7}
 80049dc:	b085      	sub	sp, #20
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6892      	ldr	r2, [r2, #8]
 80049f0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6852      	ldr	r2, [r2, #4]
 80049fa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d103      	bne.n	8004a0e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689a      	ldr	r2, [r3, #8]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	1e5a      	subs	r2, r3, #1
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
	...

08004a30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10b      	bne.n	8004a5c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a56:	bf00      	nop
 8004a58:	bf00      	nop
 8004a5a:	e7fd      	b.n	8004a58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a5c:	f001 fbac 	bl	80061b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a68:	68f9      	ldr	r1, [r7, #12]
 8004a6a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004a6c:	fb01 f303 	mul.w	r3, r1, r3
 8004a70:	441a      	add	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	68f9      	ldr	r1, [r7, #12]
 8004a90:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004a92:	fb01 f303 	mul.w	r3, r1, r3
 8004a96:	441a      	add	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	22ff      	movs	r2, #255	@ 0xff
 8004aa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	22ff      	movs	r2, #255	@ 0xff
 8004aa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d114      	bne.n	8004adc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d01a      	beq.n	8004af0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	3310      	adds	r3, #16
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 fed8 	bl	8005874 <xTaskRemoveFromEventList>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d012      	beq.n	8004af0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004aca:	4b0d      	ldr	r3, [pc, #52]	@ (8004b00 <xQueueGenericReset+0xd0>)
 8004acc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	e009      	b.n	8004af0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	3310      	adds	r3, #16
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7ff fef0 	bl	80048c6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	3324      	adds	r3, #36	@ 0x24
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff feeb 	bl	80048c6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004af0:	f001 fb94 	bl	800621c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004af4:	2301      	movs	r3, #1
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	e000ed04 	.word	0xe000ed04

08004b04 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b08a      	sub	sp, #40	@ 0x28
 8004b08:	af02      	add	r7, sp, #8
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10b      	bne.n	8004b30 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b1c:	f383 8811 	msr	BASEPRI, r3
 8004b20:	f3bf 8f6f 	isb	sy
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	613b      	str	r3, [r7, #16]
}
 8004b2a:	bf00      	nop
 8004b2c:	bf00      	nop
 8004b2e:	e7fd      	b.n	8004b2c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	fb02 f303 	mul.w	r3, r2, r3
 8004b38:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	3348      	adds	r3, #72	@ 0x48
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f001 fc5c 	bl	80063fc <pvPortMalloc>
 8004b44:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d011      	beq.n	8004b70 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	3348      	adds	r3, #72	@ 0x48
 8004b54:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b5e:	79fa      	ldrb	r2, [r7, #7]
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	4613      	mov	r3, r2
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	68b9      	ldr	r1, [r7, #8]
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 f805 	bl	8004b7a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b70:	69bb      	ldr	r3, [r7, #24]
	}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3720      	adds	r7, #32
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b084      	sub	sp, #16
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	60f8      	str	r0, [r7, #12]
 8004b82:	60b9      	str	r1, [r7, #8]
 8004b84:	607a      	str	r2, [r7, #4]
 8004b86:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d103      	bne.n	8004b96 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	e002      	b.n	8004b9c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ba8:	2101      	movs	r1, #1
 8004baa:	69b8      	ldr	r0, [r7, #24]
 8004bac:	f7ff ff40 	bl	8004a30 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004bb0:	bf00      	nop
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08e      	sub	sp, #56	@ 0x38
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10b      	bne.n	8004be4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8004bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	623b      	str	r3, [r7, #32]
}
 8004bde:	bf00      	nop
 8004be0:	bf00      	nop
 8004be2:	e7fd      	b.n	8004be0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00b      	beq.n	8004c04 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8004bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	61fb      	str	r3, [r7, #28]
}
 8004bfe:	bf00      	nop
 8004c00:	bf00      	nop
 8004c02:	e7fd      	b.n	8004c00 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d103      	bne.n	8004c14 <xQueueGiveFromISR+0x5c>
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <xQueueGiveFromISR+0x60>
 8004c14:	2301      	movs	r3, #1
 8004c16:	e000      	b.n	8004c1a <xQueueGiveFromISR+0x62>
 8004c18:	2300      	movs	r3, #0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10b      	bne.n	8004c36 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8004c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	61bb      	str	r3, [r7, #24]
}
 8004c30:	bf00      	nop
 8004c32:	bf00      	nop
 8004c34:	e7fd      	b.n	8004c32 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c36:	f001 fb9f 	bl	8006378 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c3a:	f3ef 8211 	mrs	r2, BASEPRI
 8004c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	617a      	str	r2, [r7, #20]
 8004c50:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c52:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c5a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d22b      	bcs.n	8004cbe <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c72:	1c5a      	adds	r2, r3, #1
 8004c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c76:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c78:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004c7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c80:	d112      	bne.n	8004ca8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d016      	beq.n	8004cb8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c8c:	3324      	adds	r3, #36	@ 0x24
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 fdf0 	bl	8005874 <xTaskRemoveFromEventList>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00e      	beq.n	8004cb8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00b      	beq.n	8004cb8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	e007      	b.n	8004cb8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004cac:	3301      	adds	r3, #1
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	b25a      	sxtb	r2, r3
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cbc:	e001      	b.n	8004cc2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ccc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3738      	adds	r7, #56	@ 0x38
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b08e      	sub	sp, #56	@ 0x38
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004cea:	2300      	movs	r3, #0
 8004cec:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10b      	bne.n	8004d0c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf8:	f383 8811 	msr	BASEPRI, r3
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f3bf 8f4f 	dsb	sy
 8004d04:	623b      	str	r3, [r7, #32]
}
 8004d06:	bf00      	nop
 8004d08:	bf00      	nop
 8004d0a:	e7fd      	b.n	8004d08 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00b      	beq.n	8004d2c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	61fb      	str	r3, [r7, #28]
}
 8004d26:	bf00      	nop
 8004d28:	bf00      	nop
 8004d2a:	e7fd      	b.n	8004d28 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d2c:	f000 ff72 	bl	8005c14 <xTaskGetSchedulerState>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d102      	bne.n	8004d3c <xQueueSemaphoreTake+0x64>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <xQueueSemaphoreTake+0x68>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e000      	b.n	8004d42 <xQueueSemaphoreTake+0x6a>
 8004d40:	2300      	movs	r3, #0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10b      	bne.n	8004d5e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d4a:	f383 8811 	msr	BASEPRI, r3
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	61bb      	str	r3, [r7, #24]
}
 8004d58:	bf00      	nop
 8004d5a:	bf00      	nop
 8004d5c:	e7fd      	b.n	8004d5a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d5e:	f001 fa2b 	bl	80061b8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d66:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d024      	beq.n	8004db8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d70:	1e5a      	subs	r2, r3, #1
 8004d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d74:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d104      	bne.n	8004d88 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004d7e:	f001 f86d 	bl	8005e5c <pvTaskIncrementMutexHeldCount>
 8004d82:	4602      	mov	r2, r0
 8004d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d86:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00f      	beq.n	8004db0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d92:	3310      	adds	r3, #16
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 fd6d 	bl	8005874 <xTaskRemoveFromEventList>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d007      	beq.n	8004db0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004da0:	4b54      	ldr	r3, [pc, #336]	@ (8004ef4 <xQueueSemaphoreTake+0x21c>)
 8004da2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004da6:	601a      	str	r2, [r3, #0]
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004db0:	f001 fa34 	bl	800621c <vPortExitCritical>
				return pdPASS;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e098      	b.n	8004eea <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d112      	bne.n	8004de4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00b      	beq.n	8004ddc <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	617b      	str	r3, [r7, #20]
}
 8004dd6:	bf00      	nop
 8004dd8:	bf00      	nop
 8004dda:	e7fd      	b.n	8004dd8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004ddc:	f001 fa1e 	bl	800621c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004de0:	2300      	movs	r3, #0
 8004de2:	e082      	b.n	8004eea <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d106      	bne.n	8004df8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004dea:	f107 030c 	add.w	r3, r7, #12
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 fda4 	bl	800593c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004df4:	2301      	movs	r3, #1
 8004df6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004df8:	f001 fa10 	bl	800621c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004dfc:	f000 fb2c 	bl	8005458 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e00:	f001 f9da 	bl	80061b8 <vPortEnterCritical>
 8004e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e06:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e0a:	b25b      	sxtb	r3, r3
 8004e0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e10:	d103      	bne.n	8004e1a <xQueueSemaphoreTake+0x142>
 8004e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e20:	b25b      	sxtb	r3, r3
 8004e22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e26:	d103      	bne.n	8004e30 <xQueueSemaphoreTake+0x158>
 8004e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e30:	f001 f9f4 	bl	800621c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e34:	463a      	mov	r2, r7
 8004e36:	f107 030c 	add.w	r3, r7, #12
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 fd93 	bl	8005968 <xTaskCheckForTimeOut>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d132      	bne.n	8004eae <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e4a:	f000 f8bf 	bl	8004fcc <prvIsQueueEmpty>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d026      	beq.n	8004ea2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d109      	bne.n	8004e70 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004e5c:	f001 f9ac 	bl	80061b8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f000 fef3 	bl	8005c50 <xTaskPriorityInherit>
 8004e6a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004e6c:	f001 f9d6 	bl	800621c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e72:	3324      	adds	r3, #36	@ 0x24
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	4611      	mov	r1, r2
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 fcd5 	bl	8005828 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e80:	f000 f852 	bl	8004f28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e84:	f000 faf6 	bl	8005474 <xTaskResumeAll>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f47f af67 	bne.w	8004d5e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004e90:	4b18      	ldr	r3, [pc, #96]	@ (8004ef4 <xQueueSemaphoreTake+0x21c>)
 8004e92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	f3bf 8f6f 	isb	sy
 8004ea0:	e75d      	b.n	8004d5e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004ea2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ea4:	f000 f840 	bl	8004f28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ea8:	f000 fae4 	bl	8005474 <xTaskResumeAll>
 8004eac:	e757      	b.n	8004d5e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004eae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004eb0:	f000 f83a 	bl	8004f28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004eb4:	f000 fade 	bl	8005474 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004eb8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004eba:	f000 f887 	bl	8004fcc <prvIsQueueEmpty>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f43f af4c 	beq.w	8004d5e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00d      	beq.n	8004ee8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004ecc:	f001 f974 	bl	80061b8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004ed0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ed2:	f000 f811 	bl	8004ef8 <prvGetDisinheritPriorityAfterTimeout>
 8004ed6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 ff2c 	bl	8005d3c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004ee4:	f001 f99a 	bl	800621c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ee8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3738      	adds	r7, #56	@ 0x38
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	e000ed04 	.word	0xe000ed04

08004ef8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d006      	beq.n	8004f16 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f1c3 0307 	rsb	r3, r3, #7
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	e001      	b.n	8004f1a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
	}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f30:	f001 f942 	bl	80061b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f3c:	e011      	b.n	8004f62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d012      	beq.n	8004f6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	3324      	adds	r3, #36	@ 0x24
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 fc92 	bl	8005874 <xTaskRemoveFromEventList>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f56:	f000 fd6b 	bl	8005a30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f5a:	7bfb      	ldrb	r3, [r7, #15]
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	dce9      	bgt.n	8004f3e <prvUnlockQueue+0x16>
 8004f6a:	e000      	b.n	8004f6e <prvUnlockQueue+0x46>
					break;
 8004f6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	22ff      	movs	r2, #255	@ 0xff
 8004f72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004f76:	f001 f951 	bl	800621c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f7a:	f001 f91d 	bl	80061b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f86:	e011      	b.n	8004fac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d012      	beq.n	8004fb6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3310      	adds	r3, #16
 8004f94:	4618      	mov	r0, r3
 8004f96:	f000 fc6d 	bl	8005874 <xTaskRemoveFromEventList>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004fa0:	f000 fd46 	bl	8005a30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004fa4:	7bbb      	ldrb	r3, [r7, #14]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	dce9      	bgt.n	8004f88 <prvUnlockQueue+0x60>
 8004fb4:	e000      	b.n	8004fb8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004fb6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	22ff      	movs	r2, #255	@ 0xff
 8004fbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004fc0:	f001 f92c 	bl	800621c <vPortExitCritical>
}
 8004fc4:	bf00      	nop
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fd4:	f001 f8f0 	bl	80061b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d102      	bne.n	8004fe6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	e001      	b.n	8004fea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fea:	f001 f917 	bl	800621c <vPortExitCritical>

	return xReturn;
 8004fee:	68fb      	ldr	r3, [r7, #12]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b08e      	sub	sp, #56	@ 0x38
 8004ffc:	af04      	add	r7, sp, #16
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
 8005004:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10b      	bne.n	8005024 <xTaskCreateStatic+0x2c>
	__asm volatile
 800500c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005010:	f383 8811 	msr	BASEPRI, r3
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	623b      	str	r3, [r7, #32]
}
 800501e:	bf00      	nop
 8005020:	bf00      	nop
 8005022:	e7fd      	b.n	8005020 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10b      	bne.n	8005042 <xTaskCreateStatic+0x4a>
	__asm volatile
 800502a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	61fb      	str	r3, [r7, #28]
}
 800503c:	bf00      	nop
 800503e:	bf00      	nop
 8005040:	e7fd      	b.n	800503e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005042:	2354      	movs	r3, #84	@ 0x54
 8005044:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	2b54      	cmp	r3, #84	@ 0x54
 800504a:	d00b      	beq.n	8005064 <xTaskCreateStatic+0x6c>
	__asm volatile
 800504c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005050:	f383 8811 	msr	BASEPRI, r3
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	61bb      	str	r3, [r7, #24]
}
 800505e:	bf00      	nop
 8005060:	bf00      	nop
 8005062:	e7fd      	b.n	8005060 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005064:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005068:	2b00      	cmp	r3, #0
 800506a:	d01e      	beq.n	80050aa <xTaskCreateStatic+0xb2>
 800506c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800506e:	2b00      	cmp	r3, #0
 8005070:	d01b      	beq.n	80050aa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005074:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005078:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800507a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800507c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507e:	2202      	movs	r2, #2
 8005080:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005084:	2300      	movs	r3, #0
 8005086:	9303      	str	r3, [sp, #12]
 8005088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508a:	9302      	str	r3, [sp, #8]
 800508c:	f107 0314 	add.w	r3, r7, #20
 8005090:	9301      	str	r3, [sp, #4]
 8005092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	68b9      	ldr	r1, [r7, #8]
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 f850 	bl	8005142 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80050a4:	f000 f8d6 	bl	8005254 <prvAddNewTaskToReadyList>
 80050a8:	e001      	b.n	80050ae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80050aa:	2300      	movs	r3, #0
 80050ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80050ae:	697b      	ldr	r3, [r7, #20]
	}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3728      	adds	r7, #40	@ 0x28
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b08c      	sub	sp, #48	@ 0x30
 80050bc:	af04      	add	r7, sp, #16
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	603b      	str	r3, [r7, #0]
 80050c4:	4613      	mov	r3, r2
 80050c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80050c8:	88fb      	ldrh	r3, [r7, #6]
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4618      	mov	r0, r3
 80050ce:	f001 f995 	bl	80063fc <pvPortMalloc>
 80050d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00e      	beq.n	80050f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80050da:	2054      	movs	r0, #84	@ 0x54
 80050dc:	f001 f98e 	bl	80063fc <pvPortMalloc>
 80050e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d003      	beq.n	80050f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80050ee:	e005      	b.n	80050fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80050f0:	6978      	ldr	r0, [r7, #20]
 80050f2:	f001 fa51 	bl	8006598 <vPortFree>
 80050f6:	e001      	b.n	80050fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80050f8:	2300      	movs	r3, #0
 80050fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d017      	beq.n	8005132 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800510a:	88fa      	ldrh	r2, [r7, #6]
 800510c:	2300      	movs	r3, #0
 800510e:	9303      	str	r3, [sp, #12]
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	9302      	str	r3, [sp, #8]
 8005114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005116:	9301      	str	r3, [sp, #4]
 8005118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	68b9      	ldr	r1, [r7, #8]
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 f80e 	bl	8005142 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005126:	69f8      	ldr	r0, [r7, #28]
 8005128:	f000 f894 	bl	8005254 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800512c:	2301      	movs	r3, #1
 800512e:	61bb      	str	r3, [r7, #24]
 8005130:	e002      	b.n	8005138 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005132:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005136:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005138:	69bb      	ldr	r3, [r7, #24]
	}
 800513a:	4618      	mov	r0, r3
 800513c:	3720      	adds	r7, #32
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b088      	sub	sp, #32
 8005146:	af00      	add	r7, sp, #0
 8005148:	60f8      	str	r0, [r7, #12]
 800514a:	60b9      	str	r1, [r7, #8]
 800514c:	607a      	str	r2, [r7, #4]
 800514e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005152:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800515a:	3b01      	subs	r3, #1
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	f023 0307 	bic.w	r3, r3, #7
 8005168:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00b      	beq.n	800518c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005178:	f383 8811 	msr	BASEPRI, r3
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	617b      	str	r3, [r7, #20]
}
 8005186:	bf00      	nop
 8005188:	bf00      	nop
 800518a:	e7fd      	b.n	8005188 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d01f      	beq.n	80051d2 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005192:	2300      	movs	r3, #0
 8005194:	61fb      	str	r3, [r7, #28]
 8005196:	e012      	b.n	80051be <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	4413      	add	r3, r2
 800519e:	7819      	ldrb	r1, [r3, #0]
 80051a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	4413      	add	r3, r2
 80051a6:	3334      	adds	r3, #52	@ 0x34
 80051a8:	460a      	mov	r2, r1
 80051aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	4413      	add	r3, r2
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d006      	beq.n	80051c6 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	3301      	adds	r3, #1
 80051bc:	61fb      	str	r3, [r7, #28]
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	2b0f      	cmp	r3, #15
 80051c2:	d9e9      	bls.n	8005198 <prvInitialiseNewTask+0x56>
 80051c4:	e000      	b.n	80051c8 <prvInitialiseNewTask+0x86>
			{
				break;
 80051c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051d0:	e003      	b.n	80051da <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80051d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051dc:	2b06      	cmp	r3, #6
 80051de:	d901      	bls.n	80051e4 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051e0:	2306      	movs	r3, #6
 80051e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80051e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051e8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80051ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051ee:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80051f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f2:	2200      	movs	r2, #0
 80051f4:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80051f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f8:	3304      	adds	r3, #4
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7ff fb83 	bl	8004906 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005202:	3318      	adds	r3, #24
 8005204:	4618      	mov	r0, r3
 8005206:	f7ff fb7e 	bl	8004906 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800520a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800520c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800520e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005212:	f1c3 0207 	rsb	r2, r3, #7
 8005216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005218:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800521a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800521e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005222:	2200      	movs	r2, #0
 8005224:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	68f9      	ldr	r1, [r7, #12]
 8005232:	69b8      	ldr	r0, [r7, #24]
 8005234:	f000 fe8c 	bl	8005f50 <pxPortInitialiseStack>
 8005238:	4602      	mov	r2, r0
 800523a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800523e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005246:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005248:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800524a:	bf00      	nop
 800524c:	3720      	adds	r7, #32
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
	...

08005254 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800525c:	f000 ffac 	bl	80061b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005260:	4b2a      	ldr	r3, [pc, #168]	@ (800530c <prvAddNewTaskToReadyList+0xb8>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	3301      	adds	r3, #1
 8005266:	4a29      	ldr	r2, [pc, #164]	@ (800530c <prvAddNewTaskToReadyList+0xb8>)
 8005268:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800526a:	4b29      	ldr	r3, [pc, #164]	@ (8005310 <prvAddNewTaskToReadyList+0xbc>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d109      	bne.n	8005286 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005272:	4a27      	ldr	r2, [pc, #156]	@ (8005310 <prvAddNewTaskToReadyList+0xbc>)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005278:	4b24      	ldr	r3, [pc, #144]	@ (800530c <prvAddNewTaskToReadyList+0xb8>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d110      	bne.n	80052a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005280:	f000 fbfa 	bl	8005a78 <prvInitialiseTaskLists>
 8005284:	e00d      	b.n	80052a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005286:	4b23      	ldr	r3, [pc, #140]	@ (8005314 <prvAddNewTaskToReadyList+0xc0>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d109      	bne.n	80052a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800528e:	4b20      	ldr	r3, [pc, #128]	@ (8005310 <prvAddNewTaskToReadyList+0xbc>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005298:	429a      	cmp	r2, r3
 800529a:	d802      	bhi.n	80052a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800529c:	4a1c      	ldr	r2, [pc, #112]	@ (8005310 <prvAddNewTaskToReadyList+0xbc>)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052a2:	4b1d      	ldr	r3, [pc, #116]	@ (8005318 <prvAddNewTaskToReadyList+0xc4>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	3301      	adds	r3, #1
 80052a8:	4a1b      	ldr	r2, [pc, #108]	@ (8005318 <prvAddNewTaskToReadyList+0xc4>)
 80052aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b0:	2201      	movs	r2, #1
 80052b2:	409a      	lsls	r2, r3
 80052b4:	4b19      	ldr	r3, [pc, #100]	@ (800531c <prvAddNewTaskToReadyList+0xc8>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	4a18      	ldr	r2, [pc, #96]	@ (800531c <prvAddNewTaskToReadyList+0xc8>)
 80052bc:	6013      	str	r3, [r2, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052c2:	4613      	mov	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4a15      	ldr	r2, [pc, #84]	@ (8005320 <prvAddNewTaskToReadyList+0xcc>)
 80052cc:	441a      	add	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	3304      	adds	r3, #4
 80052d2:	4619      	mov	r1, r3
 80052d4:	4610      	mov	r0, r2
 80052d6:	f7ff fb23 	bl	8004920 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80052da:	f000 ff9f 	bl	800621c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80052de:	4b0d      	ldr	r3, [pc, #52]	@ (8005314 <prvAddNewTaskToReadyList+0xc0>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00e      	beq.n	8005304 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80052e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005310 <prvAddNewTaskToReadyList+0xbc>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d207      	bcs.n	8005304 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80052f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005324 <prvAddNewTaskToReadyList+0xd0>)
 80052f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005304:	bf00      	nop
 8005306:	3708      	adds	r7, #8
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	200007d4 	.word	0x200007d4
 8005310:	200006d4 	.word	0x200006d4
 8005314:	200007e0 	.word	0x200007e0
 8005318:	200007f0 	.word	0x200007f0
 800531c:	200007dc 	.word	0x200007dc
 8005320:	200006d8 	.word	0x200006d8
 8005324:	e000ed04 	.word	0xe000ed04

08005328 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005330:	2300      	movs	r3, #0
 8005332:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d018      	beq.n	800536c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800533a:	4b14      	ldr	r3, [pc, #80]	@ (800538c <vTaskDelay+0x64>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00b      	beq.n	800535a <vTaskDelay+0x32>
	__asm volatile
 8005342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	60bb      	str	r3, [r7, #8]
}
 8005354:	bf00      	nop
 8005356:	bf00      	nop
 8005358:	e7fd      	b.n	8005356 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800535a:	f000 f87d 	bl	8005458 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800535e:	2100      	movs	r1, #0
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 fd8f 	bl	8005e84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005366:	f000 f885 	bl	8005474 <xTaskResumeAll>
 800536a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d107      	bne.n	8005382 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005372:	4b07      	ldr	r3, [pc, #28]	@ (8005390 <vTaskDelay+0x68>)
 8005374:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005382:	bf00      	nop
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	200007fc 	.word	0x200007fc
 8005390:	e000ed04 	.word	0xe000ed04

08005394 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08a      	sub	sp, #40	@ 0x28
 8005398:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800539a:	2300      	movs	r3, #0
 800539c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800539e:	2300      	movs	r3, #0
 80053a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80053a2:	463a      	mov	r2, r7
 80053a4:	1d39      	adds	r1, r7, #4
 80053a6:	f107 0308 	add.w	r3, r7, #8
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7fb f8d8 	bl	8000560 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80053b0:	6839      	ldr	r1, [r7, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	9202      	str	r2, [sp, #8]
 80053b8:	9301      	str	r3, [sp, #4]
 80053ba:	2300      	movs	r3, #0
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	2300      	movs	r3, #0
 80053c0:	460a      	mov	r2, r1
 80053c2:	491f      	ldr	r1, [pc, #124]	@ (8005440 <vTaskStartScheduler+0xac>)
 80053c4:	481f      	ldr	r0, [pc, #124]	@ (8005444 <vTaskStartScheduler+0xb0>)
 80053c6:	f7ff fe17 	bl	8004ff8 <xTaskCreateStatic>
 80053ca:	4603      	mov	r3, r0
 80053cc:	4a1e      	ldr	r2, [pc, #120]	@ (8005448 <vTaskStartScheduler+0xb4>)
 80053ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80053d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005448 <vTaskStartScheduler+0xb4>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d002      	beq.n	80053de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80053d8:	2301      	movs	r3, #1
 80053da:	617b      	str	r3, [r7, #20]
 80053dc:	e001      	b.n	80053e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80053de:	2300      	movs	r3, #0
 80053e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d116      	bne.n	8005416 <vTaskStartScheduler+0x82>
	__asm volatile
 80053e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ec:	f383 8811 	msr	BASEPRI, r3
 80053f0:	f3bf 8f6f 	isb	sy
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	613b      	str	r3, [r7, #16]
}
 80053fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80053fc:	4b13      	ldr	r3, [pc, #76]	@ (800544c <vTaskStartScheduler+0xb8>)
 80053fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005402:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005404:	4b12      	ldr	r3, [pc, #72]	@ (8005450 <vTaskStartScheduler+0xbc>)
 8005406:	2201      	movs	r2, #1
 8005408:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800540a:	4b12      	ldr	r3, [pc, #72]	@ (8005454 <vTaskStartScheduler+0xc0>)
 800540c:	2200      	movs	r2, #0
 800540e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005410:	f000 fe2e 	bl	8006070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005414:	e00f      	b.n	8005436 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800541c:	d10b      	bne.n	8005436 <vTaskStartScheduler+0xa2>
	__asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	60fb      	str	r3, [r7, #12]
}
 8005430:	bf00      	nop
 8005432:	bf00      	nop
 8005434:	e7fd      	b.n	8005432 <vTaskStartScheduler+0x9e>
}
 8005436:	bf00      	nop
 8005438:	3718      	adds	r7, #24
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	08007dfc 	.word	0x08007dfc
 8005444:	08005a49 	.word	0x08005a49
 8005448:	200007f8 	.word	0x200007f8
 800544c:	200007f4 	.word	0x200007f4
 8005450:	200007e0 	.word	0x200007e0
 8005454:	200007d8 	.word	0x200007d8

08005458 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800545c:	4b04      	ldr	r3, [pc, #16]	@ (8005470 <vTaskSuspendAll+0x18>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3301      	adds	r3, #1
 8005462:	4a03      	ldr	r2, [pc, #12]	@ (8005470 <vTaskSuspendAll+0x18>)
 8005464:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005466:	bf00      	nop
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	200007fc 	.word	0x200007fc

08005474 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800547a:	2300      	movs	r3, #0
 800547c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800547e:	2300      	movs	r3, #0
 8005480:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005482:	4b42      	ldr	r3, [pc, #264]	@ (800558c <xTaskResumeAll+0x118>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10b      	bne.n	80054a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800548a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800548e:	f383 8811 	msr	BASEPRI, r3
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	603b      	str	r3, [r7, #0]
}
 800549c:	bf00      	nop
 800549e:	bf00      	nop
 80054a0:	e7fd      	b.n	800549e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80054a2:	f000 fe89 	bl	80061b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80054a6:	4b39      	ldr	r3, [pc, #228]	@ (800558c <xTaskResumeAll+0x118>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	4a37      	ldr	r2, [pc, #220]	@ (800558c <xTaskResumeAll+0x118>)
 80054ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054b0:	4b36      	ldr	r3, [pc, #216]	@ (800558c <xTaskResumeAll+0x118>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d161      	bne.n	800557c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054b8:	4b35      	ldr	r3, [pc, #212]	@ (8005590 <xTaskResumeAll+0x11c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d05d      	beq.n	800557c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054c0:	e02e      	b.n	8005520 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054c2:	4b34      	ldr	r3, [pc, #208]	@ (8005594 <xTaskResumeAll+0x120>)
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	3318      	adds	r3, #24
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff fa83 	bl	80049da <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	3304      	adds	r3, #4
 80054d8:	4618      	mov	r0, r3
 80054da:	f7ff fa7e 	bl	80049da <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e2:	2201      	movs	r2, #1
 80054e4:	409a      	lsls	r2, r3
 80054e6:	4b2c      	ldr	r3, [pc, #176]	@ (8005598 <xTaskResumeAll+0x124>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	4a2a      	ldr	r2, [pc, #168]	@ (8005598 <xTaskResumeAll+0x124>)
 80054ee:	6013      	str	r3, [r2, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054f4:	4613      	mov	r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4413      	add	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4a27      	ldr	r2, [pc, #156]	@ (800559c <xTaskResumeAll+0x128>)
 80054fe:	441a      	add	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	3304      	adds	r3, #4
 8005504:	4619      	mov	r1, r3
 8005506:	4610      	mov	r0, r2
 8005508:	f7ff fa0a 	bl	8004920 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005510:	4b23      	ldr	r3, [pc, #140]	@ (80055a0 <xTaskResumeAll+0x12c>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005516:	429a      	cmp	r2, r3
 8005518:	d302      	bcc.n	8005520 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800551a:	4b22      	ldr	r3, [pc, #136]	@ (80055a4 <xTaskResumeAll+0x130>)
 800551c:	2201      	movs	r2, #1
 800551e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005520:	4b1c      	ldr	r3, [pc, #112]	@ (8005594 <xTaskResumeAll+0x120>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1cc      	bne.n	80054c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800552e:	f000 fb41 	bl	8005bb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005532:	4b1d      	ldr	r3, [pc, #116]	@ (80055a8 <xTaskResumeAll+0x134>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d010      	beq.n	8005560 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800553e:	f000 f85d 	bl	80055fc <xTaskIncrementTick>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d002      	beq.n	800554e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005548:	4b16      	ldr	r3, [pc, #88]	@ (80055a4 <xTaskResumeAll+0x130>)
 800554a:	2201      	movs	r2, #1
 800554c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	3b01      	subs	r3, #1
 8005552:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1f1      	bne.n	800553e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800555a:	4b13      	ldr	r3, [pc, #76]	@ (80055a8 <xTaskResumeAll+0x134>)
 800555c:	2200      	movs	r2, #0
 800555e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005560:	4b10      	ldr	r3, [pc, #64]	@ (80055a4 <xTaskResumeAll+0x130>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d009      	beq.n	800557c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005568:	2301      	movs	r3, #1
 800556a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800556c:	4b0f      	ldr	r3, [pc, #60]	@ (80055ac <xTaskResumeAll+0x138>)
 800556e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800557c:	f000 fe4e 	bl	800621c <vPortExitCritical>

	return xAlreadyYielded;
 8005580:	68bb      	ldr	r3, [r7, #8]
}
 8005582:	4618      	mov	r0, r3
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	200007fc 	.word	0x200007fc
 8005590:	200007d4 	.word	0x200007d4
 8005594:	20000794 	.word	0x20000794
 8005598:	200007dc 	.word	0x200007dc
 800559c:	200006d8 	.word	0x200006d8
 80055a0:	200006d4 	.word	0x200006d4
 80055a4:	200007e8 	.word	0x200007e8
 80055a8:	200007e4 	.word	0x200007e4
 80055ac:	e000ed04 	.word	0xe000ed04

080055b0 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d102      	bne.n	80055c4 <pcTaskGetName+0x14>
 80055be:	4b0e      	ldr	r3, [pc, #56]	@ (80055f8 <pcTaskGetName+0x48>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	e000      	b.n	80055c6 <pcTaskGetName+0x16>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10b      	bne.n	80055e6 <pcTaskGetName+0x36>
	__asm volatile
 80055ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	60bb      	str	r3, [r7, #8]
}
 80055e0:	bf00      	nop
 80055e2:	bf00      	nop
 80055e4:	e7fd      	b.n	80055e2 <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	3334      	adds	r3, #52	@ 0x34
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	200006d4 	.word	0x200006d4

080055fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005602:	2300      	movs	r3, #0
 8005604:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005606:	4b4f      	ldr	r3, [pc, #316]	@ (8005744 <xTaskIncrementTick+0x148>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	f040 808f 	bne.w	800572e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005610:	4b4d      	ldr	r3, [pc, #308]	@ (8005748 <xTaskIncrementTick+0x14c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	3301      	adds	r3, #1
 8005616:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005618:	4a4b      	ldr	r2, [pc, #300]	@ (8005748 <xTaskIncrementTick+0x14c>)
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d121      	bne.n	8005668 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005624:	4b49      	ldr	r3, [pc, #292]	@ (800574c <xTaskIncrementTick+0x150>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00b      	beq.n	8005646 <xTaskIncrementTick+0x4a>
	__asm volatile
 800562e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	603b      	str	r3, [r7, #0]
}
 8005640:	bf00      	nop
 8005642:	bf00      	nop
 8005644:	e7fd      	b.n	8005642 <xTaskIncrementTick+0x46>
 8005646:	4b41      	ldr	r3, [pc, #260]	@ (800574c <xTaskIncrementTick+0x150>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	4b40      	ldr	r3, [pc, #256]	@ (8005750 <xTaskIncrementTick+0x154>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a3e      	ldr	r2, [pc, #248]	@ (800574c <xTaskIncrementTick+0x150>)
 8005652:	6013      	str	r3, [r2, #0]
 8005654:	4a3e      	ldr	r2, [pc, #248]	@ (8005750 <xTaskIncrementTick+0x154>)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6013      	str	r3, [r2, #0]
 800565a:	4b3e      	ldr	r3, [pc, #248]	@ (8005754 <xTaskIncrementTick+0x158>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3301      	adds	r3, #1
 8005660:	4a3c      	ldr	r2, [pc, #240]	@ (8005754 <xTaskIncrementTick+0x158>)
 8005662:	6013      	str	r3, [r2, #0]
 8005664:	f000 faa6 	bl	8005bb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005668:	4b3b      	ldr	r3, [pc, #236]	@ (8005758 <xTaskIncrementTick+0x15c>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	429a      	cmp	r2, r3
 8005670:	d348      	bcc.n	8005704 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005672:	4b36      	ldr	r3, [pc, #216]	@ (800574c <xTaskIncrementTick+0x150>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d104      	bne.n	8005686 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800567c:	4b36      	ldr	r3, [pc, #216]	@ (8005758 <xTaskIncrementTick+0x15c>)
 800567e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005682:	601a      	str	r2, [r3, #0]
					break;
 8005684:	e03e      	b.n	8005704 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005686:	4b31      	ldr	r3, [pc, #196]	@ (800574c <xTaskIncrementTick+0x150>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	429a      	cmp	r2, r3
 800569c:	d203      	bcs.n	80056a6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800569e:	4a2e      	ldr	r2, [pc, #184]	@ (8005758 <xTaskIncrementTick+0x15c>)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80056a4:	e02e      	b.n	8005704 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	3304      	adds	r3, #4
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff f995 	bl	80049da <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d004      	beq.n	80056c2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	3318      	adds	r3, #24
 80056bc:	4618      	mov	r0, r3
 80056be:	f7ff f98c 	bl	80049da <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c6:	2201      	movs	r2, #1
 80056c8:	409a      	lsls	r2, r3
 80056ca:	4b24      	ldr	r3, [pc, #144]	@ (800575c <xTaskIncrementTick+0x160>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	4a22      	ldr	r2, [pc, #136]	@ (800575c <xTaskIncrementTick+0x160>)
 80056d2:	6013      	str	r3, [r2, #0]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056d8:	4613      	mov	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4a1f      	ldr	r2, [pc, #124]	@ (8005760 <xTaskIncrementTick+0x164>)
 80056e2:	441a      	add	r2, r3
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	3304      	adds	r3, #4
 80056e8:	4619      	mov	r1, r3
 80056ea:	4610      	mov	r0, r2
 80056ec:	f7ff f918 	bl	8004920 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005764 <xTaskIncrementTick+0x168>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d3b9      	bcc.n	8005672 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80056fe:	2301      	movs	r3, #1
 8005700:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005702:	e7b6      	b.n	8005672 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005704:	4b17      	ldr	r3, [pc, #92]	@ (8005764 <xTaskIncrementTick+0x168>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800570a:	4915      	ldr	r1, [pc, #84]	@ (8005760 <xTaskIncrementTick+0x164>)
 800570c:	4613      	mov	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	440b      	add	r3, r1
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d901      	bls.n	8005720 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800571c:	2301      	movs	r3, #1
 800571e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005720:	4b11      	ldr	r3, [pc, #68]	@ (8005768 <xTaskIncrementTick+0x16c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d007      	beq.n	8005738 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005728:	2301      	movs	r3, #1
 800572a:	617b      	str	r3, [r7, #20]
 800572c:	e004      	b.n	8005738 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800572e:	4b0f      	ldr	r3, [pc, #60]	@ (800576c <xTaskIncrementTick+0x170>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	3301      	adds	r3, #1
 8005734:	4a0d      	ldr	r2, [pc, #52]	@ (800576c <xTaskIncrementTick+0x170>)
 8005736:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005738:	697b      	ldr	r3, [r7, #20]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	200007fc 	.word	0x200007fc
 8005748:	200007d8 	.word	0x200007d8
 800574c:	2000078c 	.word	0x2000078c
 8005750:	20000790 	.word	0x20000790
 8005754:	200007ec 	.word	0x200007ec
 8005758:	200007f4 	.word	0x200007f4
 800575c:	200007dc 	.word	0x200007dc
 8005760:	200006d8 	.word	0x200006d8
 8005764:	200006d4 	.word	0x200006d4
 8005768:	200007e8 	.word	0x200007e8
 800576c:	200007e4 	.word	0x200007e4

08005770 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005776:	4b27      	ldr	r3, [pc, #156]	@ (8005814 <vTaskSwitchContext+0xa4>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800577e:	4b26      	ldr	r3, [pc, #152]	@ (8005818 <vTaskSwitchContext+0xa8>)
 8005780:	2201      	movs	r2, #1
 8005782:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005784:	e040      	b.n	8005808 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005786:	4b24      	ldr	r3, [pc, #144]	@ (8005818 <vTaskSwitchContext+0xa8>)
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800578c:	4b23      	ldr	r3, [pc, #140]	@ (800581c <vTaskSwitchContext+0xac>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	fab3 f383 	clz	r3, r3
 8005798:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800579a:	7afb      	ldrb	r3, [r7, #11]
 800579c:	f1c3 031f 	rsb	r3, r3, #31
 80057a0:	617b      	str	r3, [r7, #20]
 80057a2:	491f      	ldr	r1, [pc, #124]	@ (8005820 <vTaskSwitchContext+0xb0>)
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	4613      	mov	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	440b      	add	r3, r1
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10b      	bne.n	80057ce <vTaskSwitchContext+0x5e>
	__asm volatile
 80057b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	607b      	str	r3, [r7, #4]
}
 80057c8:	bf00      	nop
 80057ca:	bf00      	nop
 80057cc:	e7fd      	b.n	80057ca <vTaskSwitchContext+0x5a>
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	4613      	mov	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4413      	add	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4a11      	ldr	r2, [pc, #68]	@ (8005820 <vTaskSwitchContext+0xb0>)
 80057da:	4413      	add	r3, r2
 80057dc:	613b      	str	r3, [r7, #16]
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	605a      	str	r2, [r3, #4]
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	3308      	adds	r3, #8
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d104      	bne.n	80057fe <vTaskSwitchContext+0x8e>
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	605a      	str	r2, [r3, #4]
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	4a07      	ldr	r2, [pc, #28]	@ (8005824 <vTaskSwitchContext+0xb4>)
 8005806:	6013      	str	r3, [r2, #0]
}
 8005808:	bf00      	nop
 800580a:	371c      	adds	r7, #28
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	200007fc 	.word	0x200007fc
 8005818:	200007e8 	.word	0x200007e8
 800581c:	200007dc 	.word	0x200007dc
 8005820:	200006d8 	.word	0x200006d8
 8005824:	200006d4 	.word	0x200006d4

08005828 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10b      	bne.n	8005850 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583c:	f383 8811 	msr	BASEPRI, r3
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	60fb      	str	r3, [r7, #12]
}
 800584a:	bf00      	nop
 800584c:	bf00      	nop
 800584e:	e7fd      	b.n	800584c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005850:	4b07      	ldr	r3, [pc, #28]	@ (8005870 <vTaskPlaceOnEventList+0x48>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	3318      	adds	r3, #24
 8005856:	4619      	mov	r1, r3
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7ff f885 	bl	8004968 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800585e:	2101      	movs	r1, #1
 8005860:	6838      	ldr	r0, [r7, #0]
 8005862:	f000 fb0f 	bl	8005e84 <prvAddCurrentTaskToDelayedList>
}
 8005866:	bf00      	nop
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	200006d4 	.word	0x200006d4

08005874 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10b      	bne.n	80058a2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800588a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800588e:	f383 8811 	msr	BASEPRI, r3
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	60fb      	str	r3, [r7, #12]
}
 800589c:	bf00      	nop
 800589e:	bf00      	nop
 80058a0:	e7fd      	b.n	800589e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	3318      	adds	r3, #24
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7ff f897 	bl	80049da <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005924 <xTaskRemoveFromEventList+0xb0>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d11c      	bne.n	80058ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	3304      	adds	r3, #4
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7ff f88e 	bl	80049da <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c2:	2201      	movs	r2, #1
 80058c4:	409a      	lsls	r2, r3
 80058c6:	4b18      	ldr	r3, [pc, #96]	@ (8005928 <xTaskRemoveFromEventList+0xb4>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	4a16      	ldr	r2, [pc, #88]	@ (8005928 <xTaskRemoveFromEventList+0xb4>)
 80058ce:	6013      	str	r3, [r2, #0]
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058d4:	4613      	mov	r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4413      	add	r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4a13      	ldr	r2, [pc, #76]	@ (800592c <xTaskRemoveFromEventList+0xb8>)
 80058de:	441a      	add	r2, r3
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	3304      	adds	r3, #4
 80058e4:	4619      	mov	r1, r3
 80058e6:	4610      	mov	r0, r2
 80058e8:	f7ff f81a 	bl	8004920 <vListInsertEnd>
 80058ec:	e005      	b.n	80058fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	3318      	adds	r3, #24
 80058f2:	4619      	mov	r1, r3
 80058f4:	480e      	ldr	r0, [pc, #56]	@ (8005930 <xTaskRemoveFromEventList+0xbc>)
 80058f6:	f7ff f813 	bl	8004920 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005934 <xTaskRemoveFromEventList+0xc0>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005904:	429a      	cmp	r2, r3
 8005906:	d905      	bls.n	8005914 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005908:	2301      	movs	r3, #1
 800590a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800590c:	4b0a      	ldr	r3, [pc, #40]	@ (8005938 <xTaskRemoveFromEventList+0xc4>)
 800590e:	2201      	movs	r2, #1
 8005910:	601a      	str	r2, [r3, #0]
 8005912:	e001      	b.n	8005918 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005914:	2300      	movs	r3, #0
 8005916:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005918:	697b      	ldr	r3, [r7, #20]
}
 800591a:	4618      	mov	r0, r3
 800591c:	3718      	adds	r7, #24
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	200007fc 	.word	0x200007fc
 8005928:	200007dc 	.word	0x200007dc
 800592c:	200006d8 	.word	0x200006d8
 8005930:	20000794 	.word	0x20000794
 8005934:	200006d4 	.word	0x200006d4
 8005938:	200007e8 	.word	0x200007e8

0800593c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005944:	4b06      	ldr	r3, [pc, #24]	@ (8005960 <vTaskInternalSetTimeOutState+0x24>)
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800594c:	4b05      	ldr	r3, [pc, #20]	@ (8005964 <vTaskInternalSetTimeOutState+0x28>)
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	605a      	str	r2, [r3, #4]
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	200007ec 	.word	0x200007ec
 8005964:	200007d8 	.word	0x200007d8

08005968 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b088      	sub	sp, #32
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d10b      	bne.n	8005990 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800597c:	f383 8811 	msr	BASEPRI, r3
 8005980:	f3bf 8f6f 	isb	sy
 8005984:	f3bf 8f4f 	dsb	sy
 8005988:	613b      	str	r3, [r7, #16]
}
 800598a:	bf00      	nop
 800598c:	bf00      	nop
 800598e:	e7fd      	b.n	800598c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10b      	bne.n	80059ae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	60fb      	str	r3, [r7, #12]
}
 80059a8:	bf00      	nop
 80059aa:	bf00      	nop
 80059ac:	e7fd      	b.n	80059aa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80059ae:	f000 fc03 	bl	80061b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80059b2:	4b1d      	ldr	r3, [pc, #116]	@ (8005a28 <xTaskCheckForTimeOut+0xc0>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059ca:	d102      	bne.n	80059d2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80059cc:	2300      	movs	r3, #0
 80059ce:	61fb      	str	r3, [r7, #28]
 80059d0:	e023      	b.n	8005a1a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	4b15      	ldr	r3, [pc, #84]	@ (8005a2c <xTaskCheckForTimeOut+0xc4>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d007      	beq.n	80059ee <xTaskCheckForTimeOut+0x86>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	69ba      	ldr	r2, [r7, #24]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d302      	bcc.n	80059ee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80059e8:	2301      	movs	r3, #1
 80059ea:	61fb      	str	r3, [r7, #28]
 80059ec:	e015      	b.n	8005a1a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d20b      	bcs.n	8005a10 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	1ad2      	subs	r2, r2, r3
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7ff ff99 	bl	800593c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	61fb      	str	r3, [r7, #28]
 8005a0e:	e004      	b.n	8005a1a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2200      	movs	r2, #0
 8005a14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a16:	2301      	movs	r3, #1
 8005a18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a1a:	f000 fbff 	bl	800621c <vPortExitCritical>

	return xReturn;
 8005a1e:	69fb      	ldr	r3, [r7, #28]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3720      	adds	r7, #32
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	200007d8 	.word	0x200007d8
 8005a2c:	200007ec 	.word	0x200007ec

08005a30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a30:	b480      	push	{r7}
 8005a32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a34:	4b03      	ldr	r3, [pc, #12]	@ (8005a44 <vTaskMissedYield+0x14>)
 8005a36:	2201      	movs	r2, #1
 8005a38:	601a      	str	r2, [r3, #0]
}
 8005a3a:	bf00      	nop
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	200007e8 	.word	0x200007e8

08005a48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a50:	f000 f852 	bl	8005af8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a54:	4b06      	ldr	r3, [pc, #24]	@ (8005a70 <prvIdleTask+0x28>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d9f9      	bls.n	8005a50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a5c:	4b05      	ldr	r3, [pc, #20]	@ (8005a74 <prvIdleTask+0x2c>)
 8005a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a6c:	e7f0      	b.n	8005a50 <prvIdleTask+0x8>
 8005a6e:	bf00      	nop
 8005a70:	200006d8 	.word	0x200006d8
 8005a74:	e000ed04 	.word	0xe000ed04

08005a78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a7e:	2300      	movs	r3, #0
 8005a80:	607b      	str	r3, [r7, #4]
 8005a82:	e00c      	b.n	8005a9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	4613      	mov	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4413      	add	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4a12      	ldr	r2, [pc, #72]	@ (8005ad8 <prvInitialiseTaskLists+0x60>)
 8005a90:	4413      	add	r3, r2
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fe ff17 	bl	80048c6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	607b      	str	r3, [r7, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b06      	cmp	r3, #6
 8005aa2:	d9ef      	bls.n	8005a84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005aa4:	480d      	ldr	r0, [pc, #52]	@ (8005adc <prvInitialiseTaskLists+0x64>)
 8005aa6:	f7fe ff0e 	bl	80048c6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005aaa:	480d      	ldr	r0, [pc, #52]	@ (8005ae0 <prvInitialiseTaskLists+0x68>)
 8005aac:	f7fe ff0b 	bl	80048c6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ab0:	480c      	ldr	r0, [pc, #48]	@ (8005ae4 <prvInitialiseTaskLists+0x6c>)
 8005ab2:	f7fe ff08 	bl	80048c6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ab6:	480c      	ldr	r0, [pc, #48]	@ (8005ae8 <prvInitialiseTaskLists+0x70>)
 8005ab8:	f7fe ff05 	bl	80048c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005abc:	480b      	ldr	r0, [pc, #44]	@ (8005aec <prvInitialiseTaskLists+0x74>)
 8005abe:	f7fe ff02 	bl	80048c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8005af0 <prvInitialiseTaskLists+0x78>)
 8005ac4:	4a05      	ldr	r2, [pc, #20]	@ (8005adc <prvInitialiseTaskLists+0x64>)
 8005ac6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8005af4 <prvInitialiseTaskLists+0x7c>)
 8005aca:	4a05      	ldr	r2, [pc, #20]	@ (8005ae0 <prvInitialiseTaskLists+0x68>)
 8005acc:	601a      	str	r2, [r3, #0]
}
 8005ace:	bf00      	nop
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	200006d8 	.word	0x200006d8
 8005adc:	20000764 	.word	0x20000764
 8005ae0:	20000778 	.word	0x20000778
 8005ae4:	20000794 	.word	0x20000794
 8005ae8:	200007a8 	.word	0x200007a8
 8005aec:	200007c0 	.word	0x200007c0
 8005af0:	2000078c 	.word	0x2000078c
 8005af4:	20000790 	.word	0x20000790

08005af8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005afe:	e019      	b.n	8005b34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b00:	f000 fb5a 	bl	80061b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b04:	4b10      	ldr	r3, [pc, #64]	@ (8005b48 <prvCheckTasksWaitingTermination+0x50>)
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	3304      	adds	r3, #4
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7fe ff62 	bl	80049da <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b16:	4b0d      	ldr	r3, [pc, #52]	@ (8005b4c <prvCheckTasksWaitingTermination+0x54>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	4a0b      	ldr	r2, [pc, #44]	@ (8005b4c <prvCheckTasksWaitingTermination+0x54>)
 8005b1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b20:	4b0b      	ldr	r3, [pc, #44]	@ (8005b50 <prvCheckTasksWaitingTermination+0x58>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	3b01      	subs	r3, #1
 8005b26:	4a0a      	ldr	r2, [pc, #40]	@ (8005b50 <prvCheckTasksWaitingTermination+0x58>)
 8005b28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b2a:	f000 fb77 	bl	800621c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f810 	bl	8005b54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b34:	4b06      	ldr	r3, [pc, #24]	@ (8005b50 <prvCheckTasksWaitingTermination+0x58>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1e1      	bne.n	8005b00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b3c:	bf00      	nop
 8005b3e:	bf00      	nop
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	200007a8 	.word	0x200007a8
 8005b4c:	200007d4 	.word	0x200007d4
 8005b50:	200007bc 	.word	0x200007bc

08005b54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d108      	bne.n	8005b78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 fd14 	bl	8006598 <vPortFree>
				vPortFree( pxTCB );
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 fd11 	bl	8006598 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b76:	e019      	b.n	8005bac <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d103      	bne.n	8005b8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fd08 	bl	8006598 <vPortFree>
	}
 8005b88:	e010      	b.n	8005bac <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d00b      	beq.n	8005bac <prvDeleteTCB+0x58>
	__asm volatile
 8005b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b98:	f383 8811 	msr	BASEPRI, r3
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	60fb      	str	r3, [r7, #12]
}
 8005ba6:	bf00      	nop
 8005ba8:	bf00      	nop
 8005baa:	e7fd      	b.n	8005ba8 <prvDeleteTCB+0x54>
	}
 8005bac:	bf00      	nop
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bba:	4b0c      	ldr	r3, [pc, #48]	@ (8005bec <prvResetNextTaskUnblockTime+0x38>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d104      	bne.n	8005bce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf0 <prvResetNextTaskUnblockTime+0x3c>)
 8005bc6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005bca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005bcc:	e008      	b.n	8005be0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bce:	4b07      	ldr	r3, [pc, #28]	@ (8005bec <prvResetNextTaskUnblockTime+0x38>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	4a04      	ldr	r2, [pc, #16]	@ (8005bf0 <prvResetNextTaskUnblockTime+0x3c>)
 8005bde:	6013      	str	r3, [r2, #0]
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr
 8005bec:	2000078c 	.word	0x2000078c
 8005bf0:	200007f4 	.word	0x200007f4

08005bf4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005bfa:	4b05      	ldr	r3, [pc, #20]	@ (8005c10 <xTaskGetCurrentTaskHandle+0x1c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005c00:	687b      	ldr	r3, [r7, #4]
	}
 8005c02:	4618      	mov	r0, r3
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	200006d4 	.word	0x200006d4

08005c14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c48 <xTaskGetSchedulerState+0x34>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d102      	bne.n	8005c28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c22:	2301      	movs	r3, #1
 8005c24:	607b      	str	r3, [r7, #4]
 8005c26:	e008      	b.n	8005c3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c28:	4b08      	ldr	r3, [pc, #32]	@ (8005c4c <xTaskGetSchedulerState+0x38>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d102      	bne.n	8005c36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c30:	2302      	movs	r3, #2
 8005c32:	607b      	str	r3, [r7, #4]
 8005c34:	e001      	b.n	8005c3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c36:	2300      	movs	r3, #0
 8005c38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c3a:	687b      	ldr	r3, [r7, #4]
	}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	200007e0 	.word	0x200007e0
 8005c4c:	200007fc 	.word	0x200007fc

08005c50 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d05e      	beq.n	8005d24 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c6a:	4b31      	ldr	r3, [pc, #196]	@ (8005d30 <xTaskPriorityInherit+0xe0>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d24e      	bcs.n	8005d12 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	db06      	blt.n	8005c8a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c7c:	4b2c      	ldr	r3, [pc, #176]	@ (8005d30 <xTaskPriorityInherit+0xe0>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c82:	f1c3 0207 	rsb	r2, r3, #7
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	6959      	ldr	r1, [r3, #20]
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c92:	4613      	mov	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4a26      	ldr	r2, [pc, #152]	@ (8005d34 <xTaskPriorityInherit+0xe4>)
 8005c9c:	4413      	add	r3, r2
 8005c9e:	4299      	cmp	r1, r3
 8005ca0:	d12f      	bne.n	8005d02 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7fe fe97 	bl	80049da <uxListRemove>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10a      	bne.n	8005cc8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cbc:	43da      	mvns	r2, r3
 8005cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8005d38 <xTaskPriorityInherit+0xe8>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8005d38 <xTaskPriorityInherit+0xe8>)
 8005cc6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005cc8:	4b19      	ldr	r3, [pc, #100]	@ (8005d30 <xTaskPriorityInherit+0xe0>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	409a      	lsls	r2, r3
 8005cda:	4b17      	ldr	r3, [pc, #92]	@ (8005d38 <xTaskPriorityInherit+0xe8>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	4a15      	ldr	r2, [pc, #84]	@ (8005d38 <xTaskPriorityInherit+0xe8>)
 8005ce2:	6013      	str	r3, [r2, #0]
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ce8:	4613      	mov	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4a10      	ldr	r2, [pc, #64]	@ (8005d34 <xTaskPriorityInherit+0xe4>)
 8005cf2:	441a      	add	r2, r3
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	3304      	adds	r3, #4
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	4610      	mov	r0, r2
 8005cfc:	f7fe fe10 	bl	8004920 <vListInsertEnd>
 8005d00:	e004      	b.n	8005d0c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d02:	4b0b      	ldr	r3, [pc, #44]	@ (8005d30 <xTaskPriorityInherit+0xe0>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	60fb      	str	r3, [r7, #12]
 8005d10:	e008      	b.n	8005d24 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d16:	4b06      	ldr	r3, [pc, #24]	@ (8005d30 <xTaskPriorityInherit+0xe0>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d201      	bcs.n	8005d24 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005d20:	2301      	movs	r3, #1
 8005d22:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d24:	68fb      	ldr	r3, [r7, #12]
	}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	200006d4 	.word	0x200006d4
 8005d34:	200006d8 	.word	0x200006d8
 8005d38:	200007dc 	.word	0x200007dc

08005d3c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b088      	sub	sp, #32
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d079      	beq.n	8005e48 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10b      	bne.n	8005d74 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	60fb      	str	r3, [r7, #12]
}
 8005d6e:	bf00      	nop
 8005d70:	bf00      	nop
 8005d72:	e7fd      	b.n	8005d70 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d78:	683a      	ldr	r2, [r7, #0]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d902      	bls.n	8005d84 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	61fb      	str	r3, [r7, #28]
 8005d82:	e002      	b.n	8005d8a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d88:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d8e:	69fa      	ldr	r2, [r7, #28]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d059      	beq.n	8005e48 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d154      	bne.n	8005e48 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005d9e:	4b2c      	ldr	r3, [pc, #176]	@ (8005e50 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d10b      	bne.n	8005dc0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dac:	f383 8811 	msr	BASEPRI, r3
 8005db0:	f3bf 8f6f 	isb	sy
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	60bb      	str	r3, [r7, #8]
}
 8005dba:	bf00      	nop
 8005dbc:	bf00      	nop
 8005dbe:	e7fd      	b.n	8005dbc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	69fa      	ldr	r2, [r7, #28]
 8005dca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	db04      	blt.n	8005dde <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	f1c3 0207 	rsb	r2, r3, #7
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	6959      	ldr	r1, [r3, #20]
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	4613      	mov	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4a19      	ldr	r2, [pc, #100]	@ (8005e54 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005dee:	4413      	add	r3, r2
 8005df0:	4299      	cmp	r1, r3
 8005df2:	d129      	bne.n	8005e48 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	3304      	adds	r3, #4
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fe fdee 	bl	80049da <uxListRemove>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10a      	bne.n	8005e1a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e08:	2201      	movs	r2, #1
 8005e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0e:	43da      	mvns	r2, r3
 8005e10:	4b11      	ldr	r3, [pc, #68]	@ (8005e58 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4013      	ands	r3, r2
 8005e16:	4a10      	ldr	r2, [pc, #64]	@ (8005e58 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005e18:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1e:	2201      	movs	r2, #1
 8005e20:	409a      	lsls	r2, r3
 8005e22:	4b0d      	ldr	r3, [pc, #52]	@ (8005e58 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	4a0b      	ldr	r2, [pc, #44]	@ (8005e58 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005e2a:	6013      	str	r3, [r2, #0]
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e30:	4613      	mov	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4a06      	ldr	r2, [pc, #24]	@ (8005e54 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005e3a:	441a      	add	r2, r3
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	3304      	adds	r3, #4
 8005e40:	4619      	mov	r1, r3
 8005e42:	4610      	mov	r0, r2
 8005e44:	f7fe fd6c 	bl	8004920 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e48:	bf00      	nop
 8005e4a:	3720      	adds	r7, #32
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	200006d4 	.word	0x200006d4
 8005e54:	200006d8 	.word	0x200006d8
 8005e58:	200007dc 	.word	0x200007dc

08005e5c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005e5c:	b480      	push	{r7}
 8005e5e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005e60:	4b07      	ldr	r3, [pc, #28]	@ (8005e80 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d004      	beq.n	8005e72 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005e68:	4b05      	ldr	r3, [pc, #20]	@ (8005e80 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e6e:	3201      	adds	r2, #1
 8005e70:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8005e72:	4b03      	ldr	r3, [pc, #12]	@ (8005e80 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e74:	681b      	ldr	r3, [r3, #0]
	}
 8005e76:	4618      	mov	r0, r3
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	200006d4 	.word	0x200006d4

08005e84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e8e:	4b29      	ldr	r3, [pc, #164]	@ (8005f34 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e94:	4b28      	ldr	r3, [pc, #160]	@ (8005f38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3304      	adds	r3, #4
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fe fd9d 	bl	80049da <uxListRemove>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10b      	bne.n	8005ebe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005ea6:	4b24      	ldr	r3, [pc, #144]	@ (8005f38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eac:	2201      	movs	r2, #1
 8005eae:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb2:	43da      	mvns	r2, r3
 8005eb4:	4b21      	ldr	r3, [pc, #132]	@ (8005f3c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4013      	ands	r3, r2
 8005eba:	4a20      	ldr	r2, [pc, #128]	@ (8005f3c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ebc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ec4:	d10a      	bne.n	8005edc <prvAddCurrentTaskToDelayedList+0x58>
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d007      	beq.n	8005edc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8005f38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	3304      	adds	r3, #4
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	481a      	ldr	r0, [pc, #104]	@ (8005f40 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005ed6:	f7fe fd23 	bl	8004920 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005eda:	e026      	b.n	8005f2a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ee4:	4b14      	ldr	r3, [pc, #80]	@ (8005f38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d209      	bcs.n	8005f08 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ef4:	4b13      	ldr	r3, [pc, #76]	@ (8005f44 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8005f38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3304      	adds	r3, #4
 8005efe:	4619      	mov	r1, r3
 8005f00:	4610      	mov	r0, r2
 8005f02:	f7fe fd31 	bl	8004968 <vListInsert>
}
 8005f06:	e010      	b.n	8005f2a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f08:	4b0f      	ldr	r3, [pc, #60]	@ (8005f48 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	3304      	adds	r3, #4
 8005f12:	4619      	mov	r1, r3
 8005f14:	4610      	mov	r0, r2
 8005f16:	f7fe fd27 	bl	8004968 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f4c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d202      	bcs.n	8005f2a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005f24:	4a09      	ldr	r2, [pc, #36]	@ (8005f4c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	6013      	str	r3, [r2, #0]
}
 8005f2a:	bf00      	nop
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	200007d8 	.word	0x200007d8
 8005f38:	200006d4 	.word	0x200006d4
 8005f3c:	200007dc 	.word	0x200007dc
 8005f40:	200007c0 	.word	0x200007c0
 8005f44:	20000790 	.word	0x20000790
 8005f48:	2000078c 	.word	0x2000078c
 8005f4c:	200007f4 	.word	0x200007f4

08005f50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	3b04      	subs	r3, #4
 8005f60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005f68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	3b04      	subs	r3, #4
 8005f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	f023 0201 	bic.w	r2, r3, #1
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	3b04      	subs	r3, #4
 8005f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f80:	4a0c      	ldr	r2, [pc, #48]	@ (8005fb4 <pxPortInitialiseStack+0x64>)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	3b14      	subs	r3, #20
 8005f8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	3b04      	subs	r3, #4
 8005f96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f06f 0202 	mvn.w	r2, #2
 8005f9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	3b20      	subs	r3, #32
 8005fa4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3714      	adds	r7, #20
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr
 8005fb4:	08005fb9 	.word	0x08005fb9

08005fb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005fc2:	4b13      	ldr	r3, [pc, #76]	@ (8006010 <prvTaskExitError+0x58>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fca:	d00b      	beq.n	8005fe4 <prvTaskExitError+0x2c>
	__asm volatile
 8005fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd0:	f383 8811 	msr	BASEPRI, r3
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	60fb      	str	r3, [r7, #12]
}
 8005fde:	bf00      	nop
 8005fe0:	bf00      	nop
 8005fe2:	e7fd      	b.n	8005fe0 <prvTaskExitError+0x28>
	__asm volatile
 8005fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe8:	f383 8811 	msr	BASEPRI, r3
 8005fec:	f3bf 8f6f 	isb	sy
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	60bb      	str	r3, [r7, #8]
}
 8005ff6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ff8:	bf00      	nop
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d0fc      	beq.n	8005ffa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006000:	bf00      	nop
 8006002:	bf00      	nop
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	20000014 	.word	0x20000014
	...

08006020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006020:	4b07      	ldr	r3, [pc, #28]	@ (8006040 <pxCurrentTCBConst2>)
 8006022:	6819      	ldr	r1, [r3, #0]
 8006024:	6808      	ldr	r0, [r1, #0]
 8006026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800602a:	f380 8809 	msr	PSP, r0
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f04f 0000 	mov.w	r0, #0
 8006036:	f380 8811 	msr	BASEPRI, r0
 800603a:	4770      	bx	lr
 800603c:	f3af 8000 	nop.w

08006040 <pxCurrentTCBConst2>:
 8006040:	200006d4 	.word	0x200006d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop

08006048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006048:	4808      	ldr	r0, [pc, #32]	@ (800606c <prvPortStartFirstTask+0x24>)
 800604a:	6800      	ldr	r0, [r0, #0]
 800604c:	6800      	ldr	r0, [r0, #0]
 800604e:	f380 8808 	msr	MSP, r0
 8006052:	f04f 0000 	mov.w	r0, #0
 8006056:	f380 8814 	msr	CONTROL, r0
 800605a:	b662      	cpsie	i
 800605c:	b661      	cpsie	f
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	df00      	svc	0
 8006068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800606a:	bf00      	nop
 800606c:	e000ed08 	.word	0xe000ed08

08006070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006076:	4b47      	ldr	r3, [pc, #284]	@ (8006194 <xPortStartScheduler+0x124>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a47      	ldr	r2, [pc, #284]	@ (8006198 <xPortStartScheduler+0x128>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d10b      	bne.n	8006098 <xPortStartScheduler+0x28>
	__asm volatile
 8006080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	613b      	str	r3, [r7, #16]
}
 8006092:	bf00      	nop
 8006094:	bf00      	nop
 8006096:	e7fd      	b.n	8006094 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006098:	4b3e      	ldr	r3, [pc, #248]	@ (8006194 <xPortStartScheduler+0x124>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a3f      	ldr	r2, [pc, #252]	@ (800619c <xPortStartScheduler+0x12c>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d10b      	bne.n	80060ba <xPortStartScheduler+0x4a>
	__asm volatile
 80060a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	60fb      	str	r3, [r7, #12]
}
 80060b4:	bf00      	nop
 80060b6:	bf00      	nop
 80060b8:	e7fd      	b.n	80060b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060ba:	4b39      	ldr	r3, [pc, #228]	@ (80061a0 <xPortStartScheduler+0x130>)
 80060bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	22ff      	movs	r2, #255	@ 0xff
 80060ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060d4:	78fb      	ldrb	r3, [r7, #3]
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80060dc:	b2da      	uxtb	r2, r3
 80060de:	4b31      	ldr	r3, [pc, #196]	@ (80061a4 <xPortStartScheduler+0x134>)
 80060e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80060e2:	4b31      	ldr	r3, [pc, #196]	@ (80061a8 <xPortStartScheduler+0x138>)
 80060e4:	2207      	movs	r2, #7
 80060e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060e8:	e009      	b.n	80060fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80060ea:	4b2f      	ldr	r3, [pc, #188]	@ (80061a8 <xPortStartScheduler+0x138>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	3b01      	subs	r3, #1
 80060f0:	4a2d      	ldr	r2, [pc, #180]	@ (80061a8 <xPortStartScheduler+0x138>)
 80060f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80060f4:	78fb      	ldrb	r3, [r7, #3]
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	005b      	lsls	r3, r3, #1
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060fe:	78fb      	ldrb	r3, [r7, #3]
 8006100:	b2db      	uxtb	r3, r3
 8006102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006106:	2b80      	cmp	r3, #128	@ 0x80
 8006108:	d0ef      	beq.n	80060ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800610a:	4b27      	ldr	r3, [pc, #156]	@ (80061a8 <xPortStartScheduler+0x138>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f1c3 0307 	rsb	r3, r3, #7
 8006112:	2b04      	cmp	r3, #4
 8006114:	d00b      	beq.n	800612e <xPortStartScheduler+0xbe>
	__asm volatile
 8006116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	60bb      	str	r3, [r7, #8]
}
 8006128:	bf00      	nop
 800612a:	bf00      	nop
 800612c:	e7fd      	b.n	800612a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800612e:	4b1e      	ldr	r3, [pc, #120]	@ (80061a8 <xPortStartScheduler+0x138>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	021b      	lsls	r3, r3, #8
 8006134:	4a1c      	ldr	r2, [pc, #112]	@ (80061a8 <xPortStartScheduler+0x138>)
 8006136:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006138:	4b1b      	ldr	r3, [pc, #108]	@ (80061a8 <xPortStartScheduler+0x138>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006140:	4a19      	ldr	r2, [pc, #100]	@ (80061a8 <xPortStartScheduler+0x138>)
 8006142:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	b2da      	uxtb	r2, r3
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800614c:	4b17      	ldr	r3, [pc, #92]	@ (80061ac <xPortStartScheduler+0x13c>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a16      	ldr	r2, [pc, #88]	@ (80061ac <xPortStartScheduler+0x13c>)
 8006152:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006156:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006158:	4b14      	ldr	r3, [pc, #80]	@ (80061ac <xPortStartScheduler+0x13c>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a13      	ldr	r2, [pc, #76]	@ (80061ac <xPortStartScheduler+0x13c>)
 800615e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006162:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006164:	f000 f8da 	bl	800631c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006168:	4b11      	ldr	r3, [pc, #68]	@ (80061b0 <xPortStartScheduler+0x140>)
 800616a:	2200      	movs	r2, #0
 800616c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800616e:	f000 f8f9 	bl	8006364 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006172:	4b10      	ldr	r3, [pc, #64]	@ (80061b4 <xPortStartScheduler+0x144>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a0f      	ldr	r2, [pc, #60]	@ (80061b4 <xPortStartScheduler+0x144>)
 8006178:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800617c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800617e:	f7ff ff63 	bl	8006048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006182:	f7ff faf5 	bl	8005770 <vTaskSwitchContext>
	prvTaskExitError();
 8006186:	f7ff ff17 	bl	8005fb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3718      	adds	r7, #24
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	e000ed00 	.word	0xe000ed00
 8006198:	410fc271 	.word	0x410fc271
 800619c:	410fc270 	.word	0x410fc270
 80061a0:	e000e400 	.word	0xe000e400
 80061a4:	20000800 	.word	0x20000800
 80061a8:	20000804 	.word	0x20000804
 80061ac:	e000ed20 	.word	0xe000ed20
 80061b0:	20000014 	.word	0x20000014
 80061b4:	e000ef34 	.word	0xe000ef34

080061b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
	__asm volatile
 80061be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	607b      	str	r3, [r7, #4]
}
 80061d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80061d2:	4b10      	ldr	r3, [pc, #64]	@ (8006214 <vPortEnterCritical+0x5c>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	3301      	adds	r3, #1
 80061d8:	4a0e      	ldr	r2, [pc, #56]	@ (8006214 <vPortEnterCritical+0x5c>)
 80061da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80061dc:	4b0d      	ldr	r3, [pc, #52]	@ (8006214 <vPortEnterCritical+0x5c>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d110      	bne.n	8006206 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80061e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006218 <vPortEnterCritical+0x60>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00b      	beq.n	8006206 <vPortEnterCritical+0x4e>
	__asm volatile
 80061ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f2:	f383 8811 	msr	BASEPRI, r3
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	603b      	str	r3, [r7, #0]
}
 8006200:	bf00      	nop
 8006202:	bf00      	nop
 8006204:	e7fd      	b.n	8006202 <vPortEnterCritical+0x4a>
	}
}
 8006206:	bf00      	nop
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	20000014 	.word	0x20000014
 8006218:	e000ed04 	.word	0xe000ed04

0800621c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006222:	4b12      	ldr	r3, [pc, #72]	@ (800626c <vPortExitCritical+0x50>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10b      	bne.n	8006242 <vPortExitCritical+0x26>
	__asm volatile
 800622a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	607b      	str	r3, [r7, #4]
}
 800623c:	bf00      	nop
 800623e:	bf00      	nop
 8006240:	e7fd      	b.n	800623e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006242:	4b0a      	ldr	r3, [pc, #40]	@ (800626c <vPortExitCritical+0x50>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	3b01      	subs	r3, #1
 8006248:	4a08      	ldr	r2, [pc, #32]	@ (800626c <vPortExitCritical+0x50>)
 800624a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800624c:	4b07      	ldr	r3, [pc, #28]	@ (800626c <vPortExitCritical+0x50>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d105      	bne.n	8006260 <vPortExitCritical+0x44>
 8006254:	2300      	movs	r3, #0
 8006256:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	f383 8811 	msr	BASEPRI, r3
}
 800625e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	20000014 	.word	0x20000014

08006270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006270:	f3ef 8009 	mrs	r0, PSP
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	4b15      	ldr	r3, [pc, #84]	@ (80062d0 <pxCurrentTCBConst>)
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	f01e 0f10 	tst.w	lr, #16
 8006280:	bf08      	it	eq
 8006282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800628a:	6010      	str	r0, [r2, #0]
 800628c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006290:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006294:	f380 8811 	msr	BASEPRI, r0
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f7ff fa66 	bl	8005770 <vTaskSwitchContext>
 80062a4:	f04f 0000 	mov.w	r0, #0
 80062a8:	f380 8811 	msr	BASEPRI, r0
 80062ac:	bc09      	pop	{r0, r3}
 80062ae:	6819      	ldr	r1, [r3, #0]
 80062b0:	6808      	ldr	r0, [r1, #0]
 80062b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b6:	f01e 0f10 	tst.w	lr, #16
 80062ba:	bf08      	it	eq
 80062bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80062c0:	f380 8809 	msr	PSP, r0
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	f3af 8000 	nop.w

080062d0 <pxCurrentTCBConst>:
 80062d0:	200006d4 	.word	0x200006d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80062d4:	bf00      	nop
 80062d6:	bf00      	nop

080062d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
	__asm volatile
 80062de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	607b      	str	r3, [r7, #4]
}
 80062f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80062f2:	f7ff f983 	bl	80055fc <xTaskIncrementTick>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d003      	beq.n	8006304 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80062fc:	4b06      	ldr	r3, [pc, #24]	@ (8006318 <xPortSysTickHandler+0x40>)
 80062fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	2300      	movs	r3, #0
 8006306:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	f383 8811 	msr	BASEPRI, r3
}
 800630e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006310:	bf00      	nop
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	e000ed04 	.word	0xe000ed04

0800631c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800631c:	b480      	push	{r7}
 800631e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006320:	4b0b      	ldr	r3, [pc, #44]	@ (8006350 <vPortSetupTimerInterrupt+0x34>)
 8006322:	2200      	movs	r2, #0
 8006324:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006326:	4b0b      	ldr	r3, [pc, #44]	@ (8006354 <vPortSetupTimerInterrupt+0x38>)
 8006328:	2200      	movs	r2, #0
 800632a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800632c:	4b0a      	ldr	r3, [pc, #40]	@ (8006358 <vPortSetupTimerInterrupt+0x3c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a0a      	ldr	r2, [pc, #40]	@ (800635c <vPortSetupTimerInterrupt+0x40>)
 8006332:	fba2 2303 	umull	r2, r3, r2, r3
 8006336:	099b      	lsrs	r3, r3, #6
 8006338:	4a09      	ldr	r2, [pc, #36]	@ (8006360 <vPortSetupTimerInterrupt+0x44>)
 800633a:	3b01      	subs	r3, #1
 800633c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800633e:	4b04      	ldr	r3, [pc, #16]	@ (8006350 <vPortSetupTimerInterrupt+0x34>)
 8006340:	2207      	movs	r2, #7
 8006342:	601a      	str	r2, [r3, #0]
}
 8006344:	bf00      	nop
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	e000e010 	.word	0xe000e010
 8006354:	e000e018 	.word	0xe000e018
 8006358:	20000000 	.word	0x20000000
 800635c:	10624dd3 	.word	0x10624dd3
 8006360:	e000e014 	.word	0xe000e014

08006364 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006364:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006374 <vPortEnableVFP+0x10>
 8006368:	6801      	ldr	r1, [r0, #0]
 800636a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800636e:	6001      	str	r1, [r0, #0]
 8006370:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006372:	bf00      	nop
 8006374:	e000ed88 	.word	0xe000ed88

08006378 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800637e:	f3ef 8305 	mrs	r3, IPSR
 8006382:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2b0f      	cmp	r3, #15
 8006388:	d915      	bls.n	80063b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800638a:	4a18      	ldr	r2, [pc, #96]	@ (80063ec <vPortValidateInterruptPriority+0x74>)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	4413      	add	r3, r2
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006394:	4b16      	ldr	r3, [pc, #88]	@ (80063f0 <vPortValidateInterruptPriority+0x78>)
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	7afa      	ldrb	r2, [r7, #11]
 800639a:	429a      	cmp	r2, r3
 800639c:	d20b      	bcs.n	80063b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	607b      	str	r3, [r7, #4]
}
 80063b0:	bf00      	nop
 80063b2:	bf00      	nop
 80063b4:	e7fd      	b.n	80063b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80063b6:	4b0f      	ldr	r3, [pc, #60]	@ (80063f4 <vPortValidateInterruptPriority+0x7c>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80063be:	4b0e      	ldr	r3, [pc, #56]	@ (80063f8 <vPortValidateInterruptPriority+0x80>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d90b      	bls.n	80063de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80063c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	603b      	str	r3, [r7, #0]
}
 80063d8:	bf00      	nop
 80063da:	bf00      	nop
 80063dc:	e7fd      	b.n	80063da <vPortValidateInterruptPriority+0x62>
	}
 80063de:	bf00      	nop
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	e000e3f0 	.word	0xe000e3f0
 80063f0:	20000800 	.word	0x20000800
 80063f4:	e000ed0c 	.word	0xe000ed0c
 80063f8:	20000804 	.word	0x20000804

080063fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b08a      	sub	sp, #40	@ 0x28
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006404:	2300      	movs	r3, #0
 8006406:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006408:	f7ff f826 	bl	8005458 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800640c:	4b5c      	ldr	r3, [pc, #368]	@ (8006580 <pvPortMalloc+0x184>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d101      	bne.n	8006418 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006414:	f000 f924 	bl	8006660 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006418:	4b5a      	ldr	r3, [pc, #360]	@ (8006584 <pvPortMalloc+0x188>)
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4013      	ands	r3, r2
 8006420:	2b00      	cmp	r3, #0
 8006422:	f040 8095 	bne.w	8006550 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d01e      	beq.n	800646a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800642c:	2208      	movs	r2, #8
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4413      	add	r3, r2
 8006432:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f003 0307 	and.w	r3, r3, #7
 800643a:	2b00      	cmp	r3, #0
 800643c:	d015      	beq.n	800646a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f023 0307 	bic.w	r3, r3, #7
 8006444:	3308      	adds	r3, #8
 8006446:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f003 0307 	and.w	r3, r3, #7
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00b      	beq.n	800646a <pvPortMalloc+0x6e>
	__asm volatile
 8006452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006456:	f383 8811 	msr	BASEPRI, r3
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	617b      	str	r3, [r7, #20]
}
 8006464:	bf00      	nop
 8006466:	bf00      	nop
 8006468:	e7fd      	b.n	8006466 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d06f      	beq.n	8006550 <pvPortMalloc+0x154>
 8006470:	4b45      	ldr	r3, [pc, #276]	@ (8006588 <pvPortMalloc+0x18c>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	429a      	cmp	r2, r3
 8006478:	d86a      	bhi.n	8006550 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800647a:	4b44      	ldr	r3, [pc, #272]	@ (800658c <pvPortMalloc+0x190>)
 800647c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800647e:	4b43      	ldr	r3, [pc, #268]	@ (800658c <pvPortMalloc+0x190>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006484:	e004      	b.n	8006490 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006488:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800648a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	429a      	cmp	r2, r3
 8006498:	d903      	bls.n	80064a2 <pvPortMalloc+0xa6>
 800649a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1f1      	bne.n	8006486 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80064a2:	4b37      	ldr	r3, [pc, #220]	@ (8006580 <pvPortMalloc+0x184>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d051      	beq.n	8006550 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2208      	movs	r2, #8
 80064b2:	4413      	add	r3, r2
 80064b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80064b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	6a3b      	ldr	r3, [r7, #32]
 80064bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80064be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	1ad2      	subs	r2, r2, r3
 80064c6:	2308      	movs	r3, #8
 80064c8:	005b      	lsls	r3, r3, #1
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d920      	bls.n	8006510 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80064ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4413      	add	r3, r2
 80064d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	f003 0307 	and.w	r3, r3, #7
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00b      	beq.n	80064f8 <pvPortMalloc+0xfc>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	613b      	str	r3, [r7, #16]
}
 80064f2:	bf00      	nop
 80064f4:	bf00      	nop
 80064f6:	e7fd      	b.n	80064f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80064f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	1ad2      	subs	r2, r2, r3
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800650a:	69b8      	ldr	r0, [r7, #24]
 800650c:	f000 f90a 	bl	8006724 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006510:	4b1d      	ldr	r3, [pc, #116]	@ (8006588 <pvPortMalloc+0x18c>)
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	4a1b      	ldr	r2, [pc, #108]	@ (8006588 <pvPortMalloc+0x18c>)
 800651c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800651e:	4b1a      	ldr	r3, [pc, #104]	@ (8006588 <pvPortMalloc+0x18c>)
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	4b1b      	ldr	r3, [pc, #108]	@ (8006590 <pvPortMalloc+0x194>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	429a      	cmp	r2, r3
 8006528:	d203      	bcs.n	8006532 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800652a:	4b17      	ldr	r3, [pc, #92]	@ (8006588 <pvPortMalloc+0x18c>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a18      	ldr	r2, [pc, #96]	@ (8006590 <pvPortMalloc+0x194>)
 8006530:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	4b13      	ldr	r3, [pc, #76]	@ (8006584 <pvPortMalloc+0x188>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	431a      	orrs	r2, r3
 800653c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006542:	2200      	movs	r2, #0
 8006544:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006546:	4b13      	ldr	r3, [pc, #76]	@ (8006594 <pvPortMalloc+0x198>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	3301      	adds	r3, #1
 800654c:	4a11      	ldr	r2, [pc, #68]	@ (8006594 <pvPortMalloc+0x198>)
 800654e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006550:	f7fe ff90 	bl	8005474 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	f003 0307 	and.w	r3, r3, #7
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00b      	beq.n	8006576 <pvPortMalloc+0x17a>
	__asm volatile
 800655e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	60fb      	str	r3, [r7, #12]
}
 8006570:	bf00      	nop
 8006572:	bf00      	nop
 8006574:	e7fd      	b.n	8006572 <pvPortMalloc+0x176>
	return pvReturn;
 8006576:	69fb      	ldr	r3, [r7, #28]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3728      	adds	r7, #40	@ 0x28
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	20005630 	.word	0x20005630
 8006584:	20005644 	.word	0x20005644
 8006588:	20005634 	.word	0x20005634
 800658c:	20005628 	.word	0x20005628
 8006590:	20005638 	.word	0x20005638
 8006594:	2000563c 	.word	0x2000563c

08006598 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d04f      	beq.n	800664a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80065aa:	2308      	movs	r3, #8
 80065ac:	425b      	negs	r3, r3
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	4413      	add	r3, r2
 80065b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	4b25      	ldr	r3, [pc, #148]	@ (8006654 <vPortFree+0xbc>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4013      	ands	r3, r2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10b      	bne.n	80065de <vPortFree+0x46>
	__asm volatile
 80065c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ca:	f383 8811 	msr	BASEPRI, r3
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f3bf 8f4f 	dsb	sy
 80065d6:	60fb      	str	r3, [r7, #12]
}
 80065d8:	bf00      	nop
 80065da:	bf00      	nop
 80065dc:	e7fd      	b.n	80065da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00b      	beq.n	80065fe <vPortFree+0x66>
	__asm volatile
 80065e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ea:	f383 8811 	msr	BASEPRI, r3
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	60bb      	str	r3, [r7, #8]
}
 80065f8:	bf00      	nop
 80065fa:	bf00      	nop
 80065fc:	e7fd      	b.n	80065fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	685a      	ldr	r2, [r3, #4]
 8006602:	4b14      	ldr	r3, [pc, #80]	@ (8006654 <vPortFree+0xbc>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4013      	ands	r3, r2
 8006608:	2b00      	cmp	r3, #0
 800660a:	d01e      	beq.n	800664a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d11a      	bne.n	800664a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	4b0e      	ldr	r3, [pc, #56]	@ (8006654 <vPortFree+0xbc>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	43db      	mvns	r3, r3
 800661e:	401a      	ands	r2, r3
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006624:	f7fe ff18 	bl	8005458 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	4b0a      	ldr	r3, [pc, #40]	@ (8006658 <vPortFree+0xc0>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4413      	add	r3, r2
 8006632:	4a09      	ldr	r2, [pc, #36]	@ (8006658 <vPortFree+0xc0>)
 8006634:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006636:	6938      	ldr	r0, [r7, #16]
 8006638:	f000 f874 	bl	8006724 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800663c:	4b07      	ldr	r3, [pc, #28]	@ (800665c <vPortFree+0xc4>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3301      	adds	r3, #1
 8006642:	4a06      	ldr	r2, [pc, #24]	@ (800665c <vPortFree+0xc4>)
 8006644:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006646:	f7fe ff15 	bl	8005474 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800664a:	bf00      	nop
 800664c:	3718      	adds	r7, #24
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	20005644 	.word	0x20005644
 8006658:	20005634 	.word	0x20005634
 800665c:	20005640 	.word	0x20005640

08006660 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006666:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800666a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800666c:	4b27      	ldr	r3, [pc, #156]	@ (800670c <prvHeapInit+0xac>)
 800666e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f003 0307 	and.w	r3, r3, #7
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00c      	beq.n	8006694 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	3307      	adds	r3, #7
 800667e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f023 0307 	bic.w	r3, r3, #7
 8006686:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	4a1f      	ldr	r2, [pc, #124]	@ (800670c <prvHeapInit+0xac>)
 8006690:	4413      	add	r3, r2
 8006692:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006698:	4a1d      	ldr	r2, [pc, #116]	@ (8006710 <prvHeapInit+0xb0>)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800669e:	4b1c      	ldr	r3, [pc, #112]	@ (8006710 <prvHeapInit+0xb0>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	4413      	add	r3, r2
 80066aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066ac:	2208      	movs	r2, #8
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	1a9b      	subs	r3, r3, r2
 80066b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 0307 	bic.w	r3, r3, #7
 80066ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	4a15      	ldr	r2, [pc, #84]	@ (8006714 <prvHeapInit+0xb4>)
 80066c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80066c2:	4b14      	ldr	r3, [pc, #80]	@ (8006714 <prvHeapInit+0xb4>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2200      	movs	r2, #0
 80066c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80066ca:	4b12      	ldr	r3, [pc, #72]	@ (8006714 <prvHeapInit+0xb4>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2200      	movs	r2, #0
 80066d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	1ad2      	subs	r2, r2, r3
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80066e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006714 <prvHeapInit+0xb4>)
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	4a0a      	ldr	r2, [pc, #40]	@ (8006718 <prvHeapInit+0xb8>)
 80066ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	4a09      	ldr	r2, [pc, #36]	@ (800671c <prvHeapInit+0xbc>)
 80066f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80066f8:	4b09      	ldr	r3, [pc, #36]	@ (8006720 <prvHeapInit+0xc0>)
 80066fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80066fe:	601a      	str	r2, [r3, #0]
}
 8006700:	bf00      	nop
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	20000808 	.word	0x20000808
 8006710:	20005628 	.word	0x20005628
 8006714:	20005630 	.word	0x20005630
 8006718:	20005638 	.word	0x20005638
 800671c:	20005634 	.word	0x20005634
 8006720:	20005644 	.word	0x20005644

08006724 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800672c:	4b28      	ldr	r3, [pc, #160]	@ (80067d0 <prvInsertBlockIntoFreeList+0xac>)
 800672e:	60fb      	str	r3, [r7, #12]
 8006730:	e002      	b.n	8006738 <prvInsertBlockIntoFreeList+0x14>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	60fb      	str	r3, [r7, #12]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	429a      	cmp	r2, r3
 8006740:	d8f7      	bhi.n	8006732 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	4413      	add	r3, r2
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	429a      	cmp	r2, r3
 8006752:	d108      	bne.n	8006766 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	441a      	add	r2, r3
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	441a      	add	r2, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	429a      	cmp	r2, r3
 8006778:	d118      	bne.n	80067ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	4b15      	ldr	r3, [pc, #84]	@ (80067d4 <prvInsertBlockIntoFreeList+0xb0>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	429a      	cmp	r2, r3
 8006784:	d00d      	beq.n	80067a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685a      	ldr	r2, [r3, #4]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	441a      	add	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	601a      	str	r2, [r3, #0]
 80067a0:	e008      	b.n	80067b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067a2:	4b0c      	ldr	r3, [pc, #48]	@ (80067d4 <prvInsertBlockIntoFreeList+0xb0>)
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	601a      	str	r2, [r3, #0]
 80067aa:	e003      	b.n	80067b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d002      	beq.n	80067c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067c2:	bf00      	nop
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	20005628 	.word	0x20005628
 80067d4:	20005630 	.word	0x20005630

080067d8 <atoi>:
 80067d8:	220a      	movs	r2, #10
 80067da:	2100      	movs	r1, #0
 80067dc:	f000 b87a 	b.w	80068d4 <strtol>

080067e0 <_strtol_l.constprop.0>:
 80067e0:	2b24      	cmp	r3, #36	@ 0x24
 80067e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067e6:	4686      	mov	lr, r0
 80067e8:	4690      	mov	r8, r2
 80067ea:	d801      	bhi.n	80067f0 <_strtol_l.constprop.0+0x10>
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d106      	bne.n	80067fe <_strtol_l.constprop.0+0x1e>
 80067f0:	f000 fb06 	bl	8006e00 <__errno>
 80067f4:	2316      	movs	r3, #22
 80067f6:	6003      	str	r3, [r0, #0]
 80067f8:	2000      	movs	r0, #0
 80067fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067fe:	4834      	ldr	r0, [pc, #208]	@ (80068d0 <_strtol_l.constprop.0+0xf0>)
 8006800:	460d      	mov	r5, r1
 8006802:	462a      	mov	r2, r5
 8006804:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006808:	5d06      	ldrb	r6, [r0, r4]
 800680a:	f016 0608 	ands.w	r6, r6, #8
 800680e:	d1f8      	bne.n	8006802 <_strtol_l.constprop.0+0x22>
 8006810:	2c2d      	cmp	r4, #45	@ 0x2d
 8006812:	d12d      	bne.n	8006870 <_strtol_l.constprop.0+0x90>
 8006814:	782c      	ldrb	r4, [r5, #0]
 8006816:	2601      	movs	r6, #1
 8006818:	1c95      	adds	r5, r2, #2
 800681a:	f033 0210 	bics.w	r2, r3, #16
 800681e:	d109      	bne.n	8006834 <_strtol_l.constprop.0+0x54>
 8006820:	2c30      	cmp	r4, #48	@ 0x30
 8006822:	d12a      	bne.n	800687a <_strtol_l.constprop.0+0x9a>
 8006824:	782a      	ldrb	r2, [r5, #0]
 8006826:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800682a:	2a58      	cmp	r2, #88	@ 0x58
 800682c:	d125      	bne.n	800687a <_strtol_l.constprop.0+0x9a>
 800682e:	786c      	ldrb	r4, [r5, #1]
 8006830:	2310      	movs	r3, #16
 8006832:	3502      	adds	r5, #2
 8006834:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006838:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800683c:	2200      	movs	r2, #0
 800683e:	fbbc f9f3 	udiv	r9, ip, r3
 8006842:	4610      	mov	r0, r2
 8006844:	fb03 ca19 	mls	sl, r3, r9, ip
 8006848:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800684c:	2f09      	cmp	r7, #9
 800684e:	d81b      	bhi.n	8006888 <_strtol_l.constprop.0+0xa8>
 8006850:	463c      	mov	r4, r7
 8006852:	42a3      	cmp	r3, r4
 8006854:	dd27      	ble.n	80068a6 <_strtol_l.constprop.0+0xc6>
 8006856:	1c57      	adds	r7, r2, #1
 8006858:	d007      	beq.n	800686a <_strtol_l.constprop.0+0x8a>
 800685a:	4581      	cmp	r9, r0
 800685c:	d320      	bcc.n	80068a0 <_strtol_l.constprop.0+0xc0>
 800685e:	d101      	bne.n	8006864 <_strtol_l.constprop.0+0x84>
 8006860:	45a2      	cmp	sl, r4
 8006862:	db1d      	blt.n	80068a0 <_strtol_l.constprop.0+0xc0>
 8006864:	fb00 4003 	mla	r0, r0, r3, r4
 8006868:	2201      	movs	r2, #1
 800686a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800686e:	e7eb      	b.n	8006848 <_strtol_l.constprop.0+0x68>
 8006870:	2c2b      	cmp	r4, #43	@ 0x2b
 8006872:	bf04      	itt	eq
 8006874:	782c      	ldrbeq	r4, [r5, #0]
 8006876:	1c95      	addeq	r5, r2, #2
 8006878:	e7cf      	b.n	800681a <_strtol_l.constprop.0+0x3a>
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1da      	bne.n	8006834 <_strtol_l.constprop.0+0x54>
 800687e:	2c30      	cmp	r4, #48	@ 0x30
 8006880:	bf0c      	ite	eq
 8006882:	2308      	moveq	r3, #8
 8006884:	230a      	movne	r3, #10
 8006886:	e7d5      	b.n	8006834 <_strtol_l.constprop.0+0x54>
 8006888:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800688c:	2f19      	cmp	r7, #25
 800688e:	d801      	bhi.n	8006894 <_strtol_l.constprop.0+0xb4>
 8006890:	3c37      	subs	r4, #55	@ 0x37
 8006892:	e7de      	b.n	8006852 <_strtol_l.constprop.0+0x72>
 8006894:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006898:	2f19      	cmp	r7, #25
 800689a:	d804      	bhi.n	80068a6 <_strtol_l.constprop.0+0xc6>
 800689c:	3c57      	subs	r4, #87	@ 0x57
 800689e:	e7d8      	b.n	8006852 <_strtol_l.constprop.0+0x72>
 80068a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80068a4:	e7e1      	b.n	800686a <_strtol_l.constprop.0+0x8a>
 80068a6:	1c53      	adds	r3, r2, #1
 80068a8:	d108      	bne.n	80068bc <_strtol_l.constprop.0+0xdc>
 80068aa:	2322      	movs	r3, #34	@ 0x22
 80068ac:	f8ce 3000 	str.w	r3, [lr]
 80068b0:	4660      	mov	r0, ip
 80068b2:	f1b8 0f00 	cmp.w	r8, #0
 80068b6:	d0a0      	beq.n	80067fa <_strtol_l.constprop.0+0x1a>
 80068b8:	1e69      	subs	r1, r5, #1
 80068ba:	e006      	b.n	80068ca <_strtol_l.constprop.0+0xea>
 80068bc:	b106      	cbz	r6, 80068c0 <_strtol_l.constprop.0+0xe0>
 80068be:	4240      	negs	r0, r0
 80068c0:	f1b8 0f00 	cmp.w	r8, #0
 80068c4:	d099      	beq.n	80067fa <_strtol_l.constprop.0+0x1a>
 80068c6:	2a00      	cmp	r2, #0
 80068c8:	d1f6      	bne.n	80068b8 <_strtol_l.constprop.0+0xd8>
 80068ca:	f8c8 1000 	str.w	r1, [r8]
 80068ce:	e794      	b.n	80067fa <_strtol_l.constprop.0+0x1a>
 80068d0:	08007e4d 	.word	0x08007e4d

080068d4 <strtol>:
 80068d4:	4613      	mov	r3, r2
 80068d6:	460a      	mov	r2, r1
 80068d8:	4601      	mov	r1, r0
 80068da:	4802      	ldr	r0, [pc, #8]	@ (80068e4 <strtol+0x10>)
 80068dc:	6800      	ldr	r0, [r0, #0]
 80068de:	f7ff bf7f 	b.w	80067e0 <_strtol_l.constprop.0>
 80068e2:	bf00      	nop
 80068e4:	20000024 	.word	0x20000024

080068e8 <std>:
 80068e8:	2300      	movs	r3, #0
 80068ea:	b510      	push	{r4, lr}
 80068ec:	4604      	mov	r4, r0
 80068ee:	e9c0 3300 	strd	r3, r3, [r0]
 80068f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068f6:	6083      	str	r3, [r0, #8]
 80068f8:	8181      	strh	r1, [r0, #12]
 80068fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80068fc:	81c2      	strh	r2, [r0, #14]
 80068fe:	6183      	str	r3, [r0, #24]
 8006900:	4619      	mov	r1, r3
 8006902:	2208      	movs	r2, #8
 8006904:	305c      	adds	r0, #92	@ 0x5c
 8006906:	f000 fa2d 	bl	8006d64 <memset>
 800690a:	4b0d      	ldr	r3, [pc, #52]	@ (8006940 <std+0x58>)
 800690c:	6263      	str	r3, [r4, #36]	@ 0x24
 800690e:	4b0d      	ldr	r3, [pc, #52]	@ (8006944 <std+0x5c>)
 8006910:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006912:	4b0d      	ldr	r3, [pc, #52]	@ (8006948 <std+0x60>)
 8006914:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006916:	4b0d      	ldr	r3, [pc, #52]	@ (800694c <std+0x64>)
 8006918:	6323      	str	r3, [r4, #48]	@ 0x30
 800691a:	4b0d      	ldr	r3, [pc, #52]	@ (8006950 <std+0x68>)
 800691c:	6224      	str	r4, [r4, #32]
 800691e:	429c      	cmp	r4, r3
 8006920:	d006      	beq.n	8006930 <std+0x48>
 8006922:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006926:	4294      	cmp	r4, r2
 8006928:	d002      	beq.n	8006930 <std+0x48>
 800692a:	33d0      	adds	r3, #208	@ 0xd0
 800692c:	429c      	cmp	r4, r3
 800692e:	d105      	bne.n	800693c <std+0x54>
 8006930:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006938:	f000 ba8c 	b.w	8006e54 <__retarget_lock_init_recursive>
 800693c:	bd10      	pop	{r4, pc}
 800693e:	bf00      	nop
 8006940:	08006bb5 	.word	0x08006bb5
 8006944:	08006bd7 	.word	0x08006bd7
 8006948:	08006c0f 	.word	0x08006c0f
 800694c:	08006c33 	.word	0x08006c33
 8006950:	20005648 	.word	0x20005648

08006954 <stdio_exit_handler>:
 8006954:	4a02      	ldr	r2, [pc, #8]	@ (8006960 <stdio_exit_handler+0xc>)
 8006956:	4903      	ldr	r1, [pc, #12]	@ (8006964 <stdio_exit_handler+0x10>)
 8006958:	4803      	ldr	r0, [pc, #12]	@ (8006968 <stdio_exit_handler+0x14>)
 800695a:	f000 b869 	b.w	8006a30 <_fwalk_sglue>
 800695e:	bf00      	nop
 8006960:	20000018 	.word	0x20000018
 8006964:	080079c1 	.word	0x080079c1
 8006968:	20000028 	.word	0x20000028

0800696c <cleanup_stdio>:
 800696c:	6841      	ldr	r1, [r0, #4]
 800696e:	4b0c      	ldr	r3, [pc, #48]	@ (80069a0 <cleanup_stdio+0x34>)
 8006970:	4299      	cmp	r1, r3
 8006972:	b510      	push	{r4, lr}
 8006974:	4604      	mov	r4, r0
 8006976:	d001      	beq.n	800697c <cleanup_stdio+0x10>
 8006978:	f001 f822 	bl	80079c0 <_fflush_r>
 800697c:	68a1      	ldr	r1, [r4, #8]
 800697e:	4b09      	ldr	r3, [pc, #36]	@ (80069a4 <cleanup_stdio+0x38>)
 8006980:	4299      	cmp	r1, r3
 8006982:	d002      	beq.n	800698a <cleanup_stdio+0x1e>
 8006984:	4620      	mov	r0, r4
 8006986:	f001 f81b 	bl	80079c0 <_fflush_r>
 800698a:	68e1      	ldr	r1, [r4, #12]
 800698c:	4b06      	ldr	r3, [pc, #24]	@ (80069a8 <cleanup_stdio+0x3c>)
 800698e:	4299      	cmp	r1, r3
 8006990:	d004      	beq.n	800699c <cleanup_stdio+0x30>
 8006992:	4620      	mov	r0, r4
 8006994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006998:	f001 b812 	b.w	80079c0 <_fflush_r>
 800699c:	bd10      	pop	{r4, pc}
 800699e:	bf00      	nop
 80069a0:	20005648 	.word	0x20005648
 80069a4:	200056b0 	.word	0x200056b0
 80069a8:	20005718 	.word	0x20005718

080069ac <global_stdio_init.part.0>:
 80069ac:	b510      	push	{r4, lr}
 80069ae:	4b0b      	ldr	r3, [pc, #44]	@ (80069dc <global_stdio_init.part.0+0x30>)
 80069b0:	4c0b      	ldr	r4, [pc, #44]	@ (80069e0 <global_stdio_init.part.0+0x34>)
 80069b2:	4a0c      	ldr	r2, [pc, #48]	@ (80069e4 <global_stdio_init.part.0+0x38>)
 80069b4:	601a      	str	r2, [r3, #0]
 80069b6:	4620      	mov	r0, r4
 80069b8:	2200      	movs	r2, #0
 80069ba:	2104      	movs	r1, #4
 80069bc:	f7ff ff94 	bl	80068e8 <std>
 80069c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80069c4:	2201      	movs	r2, #1
 80069c6:	2109      	movs	r1, #9
 80069c8:	f7ff ff8e 	bl	80068e8 <std>
 80069cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80069d0:	2202      	movs	r2, #2
 80069d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069d6:	2112      	movs	r1, #18
 80069d8:	f7ff bf86 	b.w	80068e8 <std>
 80069dc:	20005780 	.word	0x20005780
 80069e0:	20005648 	.word	0x20005648
 80069e4:	08006955 	.word	0x08006955

080069e8 <__sfp_lock_acquire>:
 80069e8:	4801      	ldr	r0, [pc, #4]	@ (80069f0 <__sfp_lock_acquire+0x8>)
 80069ea:	f000 ba34 	b.w	8006e56 <__retarget_lock_acquire_recursive>
 80069ee:	bf00      	nop
 80069f0:	20005789 	.word	0x20005789

080069f4 <__sfp_lock_release>:
 80069f4:	4801      	ldr	r0, [pc, #4]	@ (80069fc <__sfp_lock_release+0x8>)
 80069f6:	f000 ba2f 	b.w	8006e58 <__retarget_lock_release_recursive>
 80069fa:	bf00      	nop
 80069fc:	20005789 	.word	0x20005789

08006a00 <__sinit>:
 8006a00:	b510      	push	{r4, lr}
 8006a02:	4604      	mov	r4, r0
 8006a04:	f7ff fff0 	bl	80069e8 <__sfp_lock_acquire>
 8006a08:	6a23      	ldr	r3, [r4, #32]
 8006a0a:	b11b      	cbz	r3, 8006a14 <__sinit+0x14>
 8006a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a10:	f7ff bff0 	b.w	80069f4 <__sfp_lock_release>
 8006a14:	4b04      	ldr	r3, [pc, #16]	@ (8006a28 <__sinit+0x28>)
 8006a16:	6223      	str	r3, [r4, #32]
 8006a18:	4b04      	ldr	r3, [pc, #16]	@ (8006a2c <__sinit+0x2c>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1f5      	bne.n	8006a0c <__sinit+0xc>
 8006a20:	f7ff ffc4 	bl	80069ac <global_stdio_init.part.0>
 8006a24:	e7f2      	b.n	8006a0c <__sinit+0xc>
 8006a26:	bf00      	nop
 8006a28:	0800696d 	.word	0x0800696d
 8006a2c:	20005780 	.word	0x20005780

08006a30 <_fwalk_sglue>:
 8006a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a34:	4607      	mov	r7, r0
 8006a36:	4688      	mov	r8, r1
 8006a38:	4614      	mov	r4, r2
 8006a3a:	2600      	movs	r6, #0
 8006a3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a40:	f1b9 0901 	subs.w	r9, r9, #1
 8006a44:	d505      	bpl.n	8006a52 <_fwalk_sglue+0x22>
 8006a46:	6824      	ldr	r4, [r4, #0]
 8006a48:	2c00      	cmp	r4, #0
 8006a4a:	d1f7      	bne.n	8006a3c <_fwalk_sglue+0xc>
 8006a4c:	4630      	mov	r0, r6
 8006a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a52:	89ab      	ldrh	r3, [r5, #12]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d907      	bls.n	8006a68 <_fwalk_sglue+0x38>
 8006a58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	d003      	beq.n	8006a68 <_fwalk_sglue+0x38>
 8006a60:	4629      	mov	r1, r5
 8006a62:	4638      	mov	r0, r7
 8006a64:	47c0      	blx	r8
 8006a66:	4306      	orrs	r6, r0
 8006a68:	3568      	adds	r5, #104	@ 0x68
 8006a6a:	e7e9      	b.n	8006a40 <_fwalk_sglue+0x10>

08006a6c <iprintf>:
 8006a6c:	b40f      	push	{r0, r1, r2, r3}
 8006a6e:	b507      	push	{r0, r1, r2, lr}
 8006a70:	4906      	ldr	r1, [pc, #24]	@ (8006a8c <iprintf+0x20>)
 8006a72:	ab04      	add	r3, sp, #16
 8006a74:	6808      	ldr	r0, [r1, #0]
 8006a76:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a7a:	6881      	ldr	r1, [r0, #8]
 8006a7c:	9301      	str	r3, [sp, #4]
 8006a7e:	f000 fc75 	bl	800736c <_vfiprintf_r>
 8006a82:	b003      	add	sp, #12
 8006a84:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a88:	b004      	add	sp, #16
 8006a8a:	4770      	bx	lr
 8006a8c:	20000024 	.word	0x20000024

08006a90 <_puts_r>:
 8006a90:	6a03      	ldr	r3, [r0, #32]
 8006a92:	b570      	push	{r4, r5, r6, lr}
 8006a94:	6884      	ldr	r4, [r0, #8]
 8006a96:	4605      	mov	r5, r0
 8006a98:	460e      	mov	r6, r1
 8006a9a:	b90b      	cbnz	r3, 8006aa0 <_puts_r+0x10>
 8006a9c:	f7ff ffb0 	bl	8006a00 <__sinit>
 8006aa0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006aa2:	07db      	lsls	r3, r3, #31
 8006aa4:	d405      	bmi.n	8006ab2 <_puts_r+0x22>
 8006aa6:	89a3      	ldrh	r3, [r4, #12]
 8006aa8:	0598      	lsls	r0, r3, #22
 8006aaa:	d402      	bmi.n	8006ab2 <_puts_r+0x22>
 8006aac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006aae:	f000 f9d2 	bl	8006e56 <__retarget_lock_acquire_recursive>
 8006ab2:	89a3      	ldrh	r3, [r4, #12]
 8006ab4:	0719      	lsls	r1, r3, #28
 8006ab6:	d502      	bpl.n	8006abe <_puts_r+0x2e>
 8006ab8:	6923      	ldr	r3, [r4, #16]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d135      	bne.n	8006b2a <_puts_r+0x9a>
 8006abe:	4621      	mov	r1, r4
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	f000 f8f9 	bl	8006cb8 <__swsetup_r>
 8006ac6:	b380      	cbz	r0, 8006b2a <_puts_r+0x9a>
 8006ac8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006acc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ace:	07da      	lsls	r2, r3, #31
 8006ad0:	d405      	bmi.n	8006ade <_puts_r+0x4e>
 8006ad2:	89a3      	ldrh	r3, [r4, #12]
 8006ad4:	059b      	lsls	r3, r3, #22
 8006ad6:	d402      	bmi.n	8006ade <_puts_r+0x4e>
 8006ad8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ada:	f000 f9bd 	bl	8006e58 <__retarget_lock_release_recursive>
 8006ade:	4628      	mov	r0, r5
 8006ae0:	bd70      	pop	{r4, r5, r6, pc}
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	da04      	bge.n	8006af0 <_puts_r+0x60>
 8006ae6:	69a2      	ldr	r2, [r4, #24]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	dc17      	bgt.n	8006b1c <_puts_r+0x8c>
 8006aec:	290a      	cmp	r1, #10
 8006aee:	d015      	beq.n	8006b1c <_puts_r+0x8c>
 8006af0:	6823      	ldr	r3, [r4, #0]
 8006af2:	1c5a      	adds	r2, r3, #1
 8006af4:	6022      	str	r2, [r4, #0]
 8006af6:	7019      	strb	r1, [r3, #0]
 8006af8:	68a3      	ldr	r3, [r4, #8]
 8006afa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006afe:	3b01      	subs	r3, #1
 8006b00:	60a3      	str	r3, [r4, #8]
 8006b02:	2900      	cmp	r1, #0
 8006b04:	d1ed      	bne.n	8006ae2 <_puts_r+0x52>
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	da11      	bge.n	8006b2e <_puts_r+0x9e>
 8006b0a:	4622      	mov	r2, r4
 8006b0c:	210a      	movs	r1, #10
 8006b0e:	4628      	mov	r0, r5
 8006b10:	f000 f893 	bl	8006c3a <__swbuf_r>
 8006b14:	3001      	adds	r0, #1
 8006b16:	d0d7      	beq.n	8006ac8 <_puts_r+0x38>
 8006b18:	250a      	movs	r5, #10
 8006b1a:	e7d7      	b.n	8006acc <_puts_r+0x3c>
 8006b1c:	4622      	mov	r2, r4
 8006b1e:	4628      	mov	r0, r5
 8006b20:	f000 f88b 	bl	8006c3a <__swbuf_r>
 8006b24:	3001      	adds	r0, #1
 8006b26:	d1e7      	bne.n	8006af8 <_puts_r+0x68>
 8006b28:	e7ce      	b.n	8006ac8 <_puts_r+0x38>
 8006b2a:	3e01      	subs	r6, #1
 8006b2c:	e7e4      	b.n	8006af8 <_puts_r+0x68>
 8006b2e:	6823      	ldr	r3, [r4, #0]
 8006b30:	1c5a      	adds	r2, r3, #1
 8006b32:	6022      	str	r2, [r4, #0]
 8006b34:	220a      	movs	r2, #10
 8006b36:	701a      	strb	r2, [r3, #0]
 8006b38:	e7ee      	b.n	8006b18 <_puts_r+0x88>
	...

08006b3c <puts>:
 8006b3c:	4b02      	ldr	r3, [pc, #8]	@ (8006b48 <puts+0xc>)
 8006b3e:	4601      	mov	r1, r0
 8006b40:	6818      	ldr	r0, [r3, #0]
 8006b42:	f7ff bfa5 	b.w	8006a90 <_puts_r>
 8006b46:	bf00      	nop
 8006b48:	20000024 	.word	0x20000024

08006b4c <sniprintf>:
 8006b4c:	b40c      	push	{r2, r3}
 8006b4e:	b530      	push	{r4, r5, lr}
 8006b50:	4b17      	ldr	r3, [pc, #92]	@ (8006bb0 <sniprintf+0x64>)
 8006b52:	1e0c      	subs	r4, r1, #0
 8006b54:	681d      	ldr	r5, [r3, #0]
 8006b56:	b09d      	sub	sp, #116	@ 0x74
 8006b58:	da08      	bge.n	8006b6c <sniprintf+0x20>
 8006b5a:	238b      	movs	r3, #139	@ 0x8b
 8006b5c:	602b      	str	r3, [r5, #0]
 8006b5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b62:	b01d      	add	sp, #116	@ 0x74
 8006b64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b68:	b002      	add	sp, #8
 8006b6a:	4770      	bx	lr
 8006b6c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006b70:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006b74:	bf14      	ite	ne
 8006b76:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8006b7a:	4623      	moveq	r3, r4
 8006b7c:	9304      	str	r3, [sp, #16]
 8006b7e:	9307      	str	r3, [sp, #28]
 8006b80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006b84:	9002      	str	r0, [sp, #8]
 8006b86:	9006      	str	r0, [sp, #24]
 8006b88:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006b8c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006b8e:	ab21      	add	r3, sp, #132	@ 0x84
 8006b90:	a902      	add	r1, sp, #8
 8006b92:	4628      	mov	r0, r5
 8006b94:	9301      	str	r3, [sp, #4]
 8006b96:	f000 fac3 	bl	8007120 <_svfiprintf_r>
 8006b9a:	1c43      	adds	r3, r0, #1
 8006b9c:	bfbc      	itt	lt
 8006b9e:	238b      	movlt	r3, #139	@ 0x8b
 8006ba0:	602b      	strlt	r3, [r5, #0]
 8006ba2:	2c00      	cmp	r4, #0
 8006ba4:	d0dd      	beq.n	8006b62 <sniprintf+0x16>
 8006ba6:	9b02      	ldr	r3, [sp, #8]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	701a      	strb	r2, [r3, #0]
 8006bac:	e7d9      	b.n	8006b62 <sniprintf+0x16>
 8006bae:	bf00      	nop
 8006bb0:	20000024 	.word	0x20000024

08006bb4 <__sread>:
 8006bb4:	b510      	push	{r4, lr}
 8006bb6:	460c      	mov	r4, r1
 8006bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bbc:	f000 f8fc 	bl	8006db8 <_read_r>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	bfab      	itete	ge
 8006bc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006bc6:	89a3      	ldrhlt	r3, [r4, #12]
 8006bc8:	181b      	addge	r3, r3, r0
 8006bca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006bce:	bfac      	ite	ge
 8006bd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006bd2:	81a3      	strhlt	r3, [r4, #12]
 8006bd4:	bd10      	pop	{r4, pc}

08006bd6 <__swrite>:
 8006bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bda:	461f      	mov	r7, r3
 8006bdc:	898b      	ldrh	r3, [r1, #12]
 8006bde:	05db      	lsls	r3, r3, #23
 8006be0:	4605      	mov	r5, r0
 8006be2:	460c      	mov	r4, r1
 8006be4:	4616      	mov	r6, r2
 8006be6:	d505      	bpl.n	8006bf4 <__swrite+0x1e>
 8006be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bec:	2302      	movs	r3, #2
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f000 f8d0 	bl	8006d94 <_lseek_r>
 8006bf4:	89a3      	ldrh	r3, [r4, #12]
 8006bf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006bfe:	81a3      	strh	r3, [r4, #12]
 8006c00:	4632      	mov	r2, r6
 8006c02:	463b      	mov	r3, r7
 8006c04:	4628      	mov	r0, r5
 8006c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c0a:	f000 b8e7 	b.w	8006ddc <_write_r>

08006c0e <__sseek>:
 8006c0e:	b510      	push	{r4, lr}
 8006c10:	460c      	mov	r4, r1
 8006c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c16:	f000 f8bd 	bl	8006d94 <_lseek_r>
 8006c1a:	1c43      	adds	r3, r0, #1
 8006c1c:	89a3      	ldrh	r3, [r4, #12]
 8006c1e:	bf15      	itete	ne
 8006c20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006c22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006c26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006c2a:	81a3      	strheq	r3, [r4, #12]
 8006c2c:	bf18      	it	ne
 8006c2e:	81a3      	strhne	r3, [r4, #12]
 8006c30:	bd10      	pop	{r4, pc}

08006c32 <__sclose>:
 8006c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c36:	f000 b89d 	b.w	8006d74 <_close_r>

08006c3a <__swbuf_r>:
 8006c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3c:	460e      	mov	r6, r1
 8006c3e:	4614      	mov	r4, r2
 8006c40:	4605      	mov	r5, r0
 8006c42:	b118      	cbz	r0, 8006c4c <__swbuf_r+0x12>
 8006c44:	6a03      	ldr	r3, [r0, #32]
 8006c46:	b90b      	cbnz	r3, 8006c4c <__swbuf_r+0x12>
 8006c48:	f7ff feda 	bl	8006a00 <__sinit>
 8006c4c:	69a3      	ldr	r3, [r4, #24]
 8006c4e:	60a3      	str	r3, [r4, #8]
 8006c50:	89a3      	ldrh	r3, [r4, #12]
 8006c52:	071a      	lsls	r2, r3, #28
 8006c54:	d501      	bpl.n	8006c5a <__swbuf_r+0x20>
 8006c56:	6923      	ldr	r3, [r4, #16]
 8006c58:	b943      	cbnz	r3, 8006c6c <__swbuf_r+0x32>
 8006c5a:	4621      	mov	r1, r4
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	f000 f82b 	bl	8006cb8 <__swsetup_r>
 8006c62:	b118      	cbz	r0, 8006c6c <__swbuf_r+0x32>
 8006c64:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006c68:	4638      	mov	r0, r7
 8006c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c6c:	6823      	ldr	r3, [r4, #0]
 8006c6e:	6922      	ldr	r2, [r4, #16]
 8006c70:	1a98      	subs	r0, r3, r2
 8006c72:	6963      	ldr	r3, [r4, #20]
 8006c74:	b2f6      	uxtb	r6, r6
 8006c76:	4283      	cmp	r3, r0
 8006c78:	4637      	mov	r7, r6
 8006c7a:	dc05      	bgt.n	8006c88 <__swbuf_r+0x4e>
 8006c7c:	4621      	mov	r1, r4
 8006c7e:	4628      	mov	r0, r5
 8006c80:	f000 fe9e 	bl	80079c0 <_fflush_r>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d1ed      	bne.n	8006c64 <__swbuf_r+0x2a>
 8006c88:	68a3      	ldr	r3, [r4, #8]
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	60a3      	str	r3, [r4, #8]
 8006c8e:	6823      	ldr	r3, [r4, #0]
 8006c90:	1c5a      	adds	r2, r3, #1
 8006c92:	6022      	str	r2, [r4, #0]
 8006c94:	701e      	strb	r6, [r3, #0]
 8006c96:	6962      	ldr	r2, [r4, #20]
 8006c98:	1c43      	adds	r3, r0, #1
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d004      	beq.n	8006ca8 <__swbuf_r+0x6e>
 8006c9e:	89a3      	ldrh	r3, [r4, #12]
 8006ca0:	07db      	lsls	r3, r3, #31
 8006ca2:	d5e1      	bpl.n	8006c68 <__swbuf_r+0x2e>
 8006ca4:	2e0a      	cmp	r6, #10
 8006ca6:	d1df      	bne.n	8006c68 <__swbuf_r+0x2e>
 8006ca8:	4621      	mov	r1, r4
 8006caa:	4628      	mov	r0, r5
 8006cac:	f000 fe88 	bl	80079c0 <_fflush_r>
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	d0d9      	beq.n	8006c68 <__swbuf_r+0x2e>
 8006cb4:	e7d6      	b.n	8006c64 <__swbuf_r+0x2a>
	...

08006cb8 <__swsetup_r>:
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	4b29      	ldr	r3, [pc, #164]	@ (8006d60 <__swsetup_r+0xa8>)
 8006cbc:	4605      	mov	r5, r0
 8006cbe:	6818      	ldr	r0, [r3, #0]
 8006cc0:	460c      	mov	r4, r1
 8006cc2:	b118      	cbz	r0, 8006ccc <__swsetup_r+0x14>
 8006cc4:	6a03      	ldr	r3, [r0, #32]
 8006cc6:	b90b      	cbnz	r3, 8006ccc <__swsetup_r+0x14>
 8006cc8:	f7ff fe9a 	bl	8006a00 <__sinit>
 8006ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cd0:	0719      	lsls	r1, r3, #28
 8006cd2:	d422      	bmi.n	8006d1a <__swsetup_r+0x62>
 8006cd4:	06da      	lsls	r2, r3, #27
 8006cd6:	d407      	bmi.n	8006ce8 <__swsetup_r+0x30>
 8006cd8:	2209      	movs	r2, #9
 8006cda:	602a      	str	r2, [r5, #0]
 8006cdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ce0:	81a3      	strh	r3, [r4, #12]
 8006ce2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ce6:	e033      	b.n	8006d50 <__swsetup_r+0x98>
 8006ce8:	0758      	lsls	r0, r3, #29
 8006cea:	d512      	bpl.n	8006d12 <__swsetup_r+0x5a>
 8006cec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006cee:	b141      	cbz	r1, 8006d02 <__swsetup_r+0x4a>
 8006cf0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006cf4:	4299      	cmp	r1, r3
 8006cf6:	d002      	beq.n	8006cfe <__swsetup_r+0x46>
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	f000 f8bd 	bl	8006e78 <_free_r>
 8006cfe:	2300      	movs	r3, #0
 8006d00:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d02:	89a3      	ldrh	r3, [r4, #12]
 8006d04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006d08:	81a3      	strh	r3, [r4, #12]
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	6063      	str	r3, [r4, #4]
 8006d0e:	6923      	ldr	r3, [r4, #16]
 8006d10:	6023      	str	r3, [r4, #0]
 8006d12:	89a3      	ldrh	r3, [r4, #12]
 8006d14:	f043 0308 	orr.w	r3, r3, #8
 8006d18:	81a3      	strh	r3, [r4, #12]
 8006d1a:	6923      	ldr	r3, [r4, #16]
 8006d1c:	b94b      	cbnz	r3, 8006d32 <__swsetup_r+0x7a>
 8006d1e:	89a3      	ldrh	r3, [r4, #12]
 8006d20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006d24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d28:	d003      	beq.n	8006d32 <__swsetup_r+0x7a>
 8006d2a:	4621      	mov	r1, r4
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	f000 fe95 	bl	8007a5c <__smakebuf_r>
 8006d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d36:	f013 0201 	ands.w	r2, r3, #1
 8006d3a:	d00a      	beq.n	8006d52 <__swsetup_r+0x9a>
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	60a2      	str	r2, [r4, #8]
 8006d40:	6962      	ldr	r2, [r4, #20]
 8006d42:	4252      	negs	r2, r2
 8006d44:	61a2      	str	r2, [r4, #24]
 8006d46:	6922      	ldr	r2, [r4, #16]
 8006d48:	b942      	cbnz	r2, 8006d5c <__swsetup_r+0xa4>
 8006d4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006d4e:	d1c5      	bne.n	8006cdc <__swsetup_r+0x24>
 8006d50:	bd38      	pop	{r3, r4, r5, pc}
 8006d52:	0799      	lsls	r1, r3, #30
 8006d54:	bf58      	it	pl
 8006d56:	6962      	ldrpl	r2, [r4, #20]
 8006d58:	60a2      	str	r2, [r4, #8]
 8006d5a:	e7f4      	b.n	8006d46 <__swsetup_r+0x8e>
 8006d5c:	2000      	movs	r0, #0
 8006d5e:	e7f7      	b.n	8006d50 <__swsetup_r+0x98>
 8006d60:	20000024 	.word	0x20000024

08006d64 <memset>:
 8006d64:	4402      	add	r2, r0
 8006d66:	4603      	mov	r3, r0
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d100      	bne.n	8006d6e <memset+0xa>
 8006d6c:	4770      	bx	lr
 8006d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d72:	e7f9      	b.n	8006d68 <memset+0x4>

08006d74 <_close_r>:
 8006d74:	b538      	push	{r3, r4, r5, lr}
 8006d76:	4d06      	ldr	r5, [pc, #24]	@ (8006d90 <_close_r+0x1c>)
 8006d78:	2300      	movs	r3, #0
 8006d7a:	4604      	mov	r4, r0
 8006d7c:	4608      	mov	r0, r1
 8006d7e:	602b      	str	r3, [r5, #0]
 8006d80:	f7f9 ff1b 	bl	8000bba <_close>
 8006d84:	1c43      	adds	r3, r0, #1
 8006d86:	d102      	bne.n	8006d8e <_close_r+0x1a>
 8006d88:	682b      	ldr	r3, [r5, #0]
 8006d8a:	b103      	cbz	r3, 8006d8e <_close_r+0x1a>
 8006d8c:	6023      	str	r3, [r4, #0]
 8006d8e:	bd38      	pop	{r3, r4, r5, pc}
 8006d90:	20005784 	.word	0x20005784

08006d94 <_lseek_r>:
 8006d94:	b538      	push	{r3, r4, r5, lr}
 8006d96:	4d07      	ldr	r5, [pc, #28]	@ (8006db4 <_lseek_r+0x20>)
 8006d98:	4604      	mov	r4, r0
 8006d9a:	4608      	mov	r0, r1
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	2200      	movs	r2, #0
 8006da0:	602a      	str	r2, [r5, #0]
 8006da2:	461a      	mov	r2, r3
 8006da4:	f7f9 ff30 	bl	8000c08 <_lseek>
 8006da8:	1c43      	adds	r3, r0, #1
 8006daa:	d102      	bne.n	8006db2 <_lseek_r+0x1e>
 8006dac:	682b      	ldr	r3, [r5, #0]
 8006dae:	b103      	cbz	r3, 8006db2 <_lseek_r+0x1e>
 8006db0:	6023      	str	r3, [r4, #0]
 8006db2:	bd38      	pop	{r3, r4, r5, pc}
 8006db4:	20005784 	.word	0x20005784

08006db8 <_read_r>:
 8006db8:	b538      	push	{r3, r4, r5, lr}
 8006dba:	4d07      	ldr	r5, [pc, #28]	@ (8006dd8 <_read_r+0x20>)
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	4608      	mov	r0, r1
 8006dc0:	4611      	mov	r1, r2
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	602a      	str	r2, [r5, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	f7f9 febe 	bl	8000b48 <_read>
 8006dcc:	1c43      	adds	r3, r0, #1
 8006dce:	d102      	bne.n	8006dd6 <_read_r+0x1e>
 8006dd0:	682b      	ldr	r3, [r5, #0]
 8006dd2:	b103      	cbz	r3, 8006dd6 <_read_r+0x1e>
 8006dd4:	6023      	str	r3, [r4, #0]
 8006dd6:	bd38      	pop	{r3, r4, r5, pc}
 8006dd8:	20005784 	.word	0x20005784

08006ddc <_write_r>:
 8006ddc:	b538      	push	{r3, r4, r5, lr}
 8006dde:	4d07      	ldr	r5, [pc, #28]	@ (8006dfc <_write_r+0x20>)
 8006de0:	4604      	mov	r4, r0
 8006de2:	4608      	mov	r0, r1
 8006de4:	4611      	mov	r1, r2
 8006de6:	2200      	movs	r2, #0
 8006de8:	602a      	str	r2, [r5, #0]
 8006dea:	461a      	mov	r2, r3
 8006dec:	f7f9 fec9 	bl	8000b82 <_write>
 8006df0:	1c43      	adds	r3, r0, #1
 8006df2:	d102      	bne.n	8006dfa <_write_r+0x1e>
 8006df4:	682b      	ldr	r3, [r5, #0]
 8006df6:	b103      	cbz	r3, 8006dfa <_write_r+0x1e>
 8006df8:	6023      	str	r3, [r4, #0]
 8006dfa:	bd38      	pop	{r3, r4, r5, pc}
 8006dfc:	20005784 	.word	0x20005784

08006e00 <__errno>:
 8006e00:	4b01      	ldr	r3, [pc, #4]	@ (8006e08 <__errno+0x8>)
 8006e02:	6818      	ldr	r0, [r3, #0]
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	20000024 	.word	0x20000024

08006e0c <__libc_init_array>:
 8006e0c:	b570      	push	{r4, r5, r6, lr}
 8006e0e:	4d0d      	ldr	r5, [pc, #52]	@ (8006e44 <__libc_init_array+0x38>)
 8006e10:	4c0d      	ldr	r4, [pc, #52]	@ (8006e48 <__libc_init_array+0x3c>)
 8006e12:	1b64      	subs	r4, r4, r5
 8006e14:	10a4      	asrs	r4, r4, #2
 8006e16:	2600      	movs	r6, #0
 8006e18:	42a6      	cmp	r6, r4
 8006e1a:	d109      	bne.n	8006e30 <__libc_init_array+0x24>
 8006e1c:	4d0b      	ldr	r5, [pc, #44]	@ (8006e4c <__libc_init_array+0x40>)
 8006e1e:	4c0c      	ldr	r4, [pc, #48]	@ (8006e50 <__libc_init_array+0x44>)
 8006e20:	f000 feda 	bl	8007bd8 <_init>
 8006e24:	1b64      	subs	r4, r4, r5
 8006e26:	10a4      	asrs	r4, r4, #2
 8006e28:	2600      	movs	r6, #0
 8006e2a:	42a6      	cmp	r6, r4
 8006e2c:	d105      	bne.n	8006e3a <__libc_init_array+0x2e>
 8006e2e:	bd70      	pop	{r4, r5, r6, pc}
 8006e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e34:	4798      	blx	r3
 8006e36:	3601      	adds	r6, #1
 8006e38:	e7ee      	b.n	8006e18 <__libc_init_array+0xc>
 8006e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e3e:	4798      	blx	r3
 8006e40:	3601      	adds	r6, #1
 8006e42:	e7f2      	b.n	8006e2a <__libc_init_array+0x1e>
 8006e44:	08007f88 	.word	0x08007f88
 8006e48:	08007f88 	.word	0x08007f88
 8006e4c:	08007f88 	.word	0x08007f88
 8006e50:	08007f8c 	.word	0x08007f8c

08006e54 <__retarget_lock_init_recursive>:
 8006e54:	4770      	bx	lr

08006e56 <__retarget_lock_acquire_recursive>:
 8006e56:	4770      	bx	lr

08006e58 <__retarget_lock_release_recursive>:
 8006e58:	4770      	bx	lr

08006e5a <memcpy>:
 8006e5a:	440a      	add	r2, r1
 8006e5c:	4291      	cmp	r1, r2
 8006e5e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006e62:	d100      	bne.n	8006e66 <memcpy+0xc>
 8006e64:	4770      	bx	lr
 8006e66:	b510      	push	{r4, lr}
 8006e68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e70:	4291      	cmp	r1, r2
 8006e72:	d1f9      	bne.n	8006e68 <memcpy+0xe>
 8006e74:	bd10      	pop	{r4, pc}
	...

08006e78 <_free_r>:
 8006e78:	b538      	push	{r3, r4, r5, lr}
 8006e7a:	4605      	mov	r5, r0
 8006e7c:	2900      	cmp	r1, #0
 8006e7e:	d041      	beq.n	8006f04 <_free_r+0x8c>
 8006e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e84:	1f0c      	subs	r4, r1, #4
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	bfb8      	it	lt
 8006e8a:	18e4      	addlt	r4, r4, r3
 8006e8c:	f000 f8e0 	bl	8007050 <__malloc_lock>
 8006e90:	4a1d      	ldr	r2, [pc, #116]	@ (8006f08 <_free_r+0x90>)
 8006e92:	6813      	ldr	r3, [r2, #0]
 8006e94:	b933      	cbnz	r3, 8006ea4 <_free_r+0x2c>
 8006e96:	6063      	str	r3, [r4, #4]
 8006e98:	6014      	str	r4, [r2, #0]
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ea0:	f000 b8dc 	b.w	800705c <__malloc_unlock>
 8006ea4:	42a3      	cmp	r3, r4
 8006ea6:	d908      	bls.n	8006eba <_free_r+0x42>
 8006ea8:	6820      	ldr	r0, [r4, #0]
 8006eaa:	1821      	adds	r1, r4, r0
 8006eac:	428b      	cmp	r3, r1
 8006eae:	bf01      	itttt	eq
 8006eb0:	6819      	ldreq	r1, [r3, #0]
 8006eb2:	685b      	ldreq	r3, [r3, #4]
 8006eb4:	1809      	addeq	r1, r1, r0
 8006eb6:	6021      	streq	r1, [r4, #0]
 8006eb8:	e7ed      	b.n	8006e96 <_free_r+0x1e>
 8006eba:	461a      	mov	r2, r3
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	b10b      	cbz	r3, 8006ec4 <_free_r+0x4c>
 8006ec0:	42a3      	cmp	r3, r4
 8006ec2:	d9fa      	bls.n	8006eba <_free_r+0x42>
 8006ec4:	6811      	ldr	r1, [r2, #0]
 8006ec6:	1850      	adds	r0, r2, r1
 8006ec8:	42a0      	cmp	r0, r4
 8006eca:	d10b      	bne.n	8006ee4 <_free_r+0x6c>
 8006ecc:	6820      	ldr	r0, [r4, #0]
 8006ece:	4401      	add	r1, r0
 8006ed0:	1850      	adds	r0, r2, r1
 8006ed2:	4283      	cmp	r3, r0
 8006ed4:	6011      	str	r1, [r2, #0]
 8006ed6:	d1e0      	bne.n	8006e9a <_free_r+0x22>
 8006ed8:	6818      	ldr	r0, [r3, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	6053      	str	r3, [r2, #4]
 8006ede:	4408      	add	r0, r1
 8006ee0:	6010      	str	r0, [r2, #0]
 8006ee2:	e7da      	b.n	8006e9a <_free_r+0x22>
 8006ee4:	d902      	bls.n	8006eec <_free_r+0x74>
 8006ee6:	230c      	movs	r3, #12
 8006ee8:	602b      	str	r3, [r5, #0]
 8006eea:	e7d6      	b.n	8006e9a <_free_r+0x22>
 8006eec:	6820      	ldr	r0, [r4, #0]
 8006eee:	1821      	adds	r1, r4, r0
 8006ef0:	428b      	cmp	r3, r1
 8006ef2:	bf04      	itt	eq
 8006ef4:	6819      	ldreq	r1, [r3, #0]
 8006ef6:	685b      	ldreq	r3, [r3, #4]
 8006ef8:	6063      	str	r3, [r4, #4]
 8006efa:	bf04      	itt	eq
 8006efc:	1809      	addeq	r1, r1, r0
 8006efe:	6021      	streq	r1, [r4, #0]
 8006f00:	6054      	str	r4, [r2, #4]
 8006f02:	e7ca      	b.n	8006e9a <_free_r+0x22>
 8006f04:	bd38      	pop	{r3, r4, r5, pc}
 8006f06:	bf00      	nop
 8006f08:	20005790 	.word	0x20005790

08006f0c <sbrk_aligned>:
 8006f0c:	b570      	push	{r4, r5, r6, lr}
 8006f0e:	4e0f      	ldr	r6, [pc, #60]	@ (8006f4c <sbrk_aligned+0x40>)
 8006f10:	460c      	mov	r4, r1
 8006f12:	6831      	ldr	r1, [r6, #0]
 8006f14:	4605      	mov	r5, r0
 8006f16:	b911      	cbnz	r1, 8006f1e <sbrk_aligned+0x12>
 8006f18:	f000 fe18 	bl	8007b4c <_sbrk_r>
 8006f1c:	6030      	str	r0, [r6, #0]
 8006f1e:	4621      	mov	r1, r4
 8006f20:	4628      	mov	r0, r5
 8006f22:	f000 fe13 	bl	8007b4c <_sbrk_r>
 8006f26:	1c43      	adds	r3, r0, #1
 8006f28:	d103      	bne.n	8006f32 <sbrk_aligned+0x26>
 8006f2a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006f2e:	4620      	mov	r0, r4
 8006f30:	bd70      	pop	{r4, r5, r6, pc}
 8006f32:	1cc4      	adds	r4, r0, #3
 8006f34:	f024 0403 	bic.w	r4, r4, #3
 8006f38:	42a0      	cmp	r0, r4
 8006f3a:	d0f8      	beq.n	8006f2e <sbrk_aligned+0x22>
 8006f3c:	1a21      	subs	r1, r4, r0
 8006f3e:	4628      	mov	r0, r5
 8006f40:	f000 fe04 	bl	8007b4c <_sbrk_r>
 8006f44:	3001      	adds	r0, #1
 8006f46:	d1f2      	bne.n	8006f2e <sbrk_aligned+0x22>
 8006f48:	e7ef      	b.n	8006f2a <sbrk_aligned+0x1e>
 8006f4a:	bf00      	nop
 8006f4c:	2000578c 	.word	0x2000578c

08006f50 <_malloc_r>:
 8006f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f54:	1ccd      	adds	r5, r1, #3
 8006f56:	f025 0503 	bic.w	r5, r5, #3
 8006f5a:	3508      	adds	r5, #8
 8006f5c:	2d0c      	cmp	r5, #12
 8006f5e:	bf38      	it	cc
 8006f60:	250c      	movcc	r5, #12
 8006f62:	2d00      	cmp	r5, #0
 8006f64:	4606      	mov	r6, r0
 8006f66:	db01      	blt.n	8006f6c <_malloc_r+0x1c>
 8006f68:	42a9      	cmp	r1, r5
 8006f6a:	d904      	bls.n	8006f76 <_malloc_r+0x26>
 8006f6c:	230c      	movs	r3, #12
 8006f6e:	6033      	str	r3, [r6, #0]
 8006f70:	2000      	movs	r0, #0
 8006f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800704c <_malloc_r+0xfc>
 8006f7a:	f000 f869 	bl	8007050 <__malloc_lock>
 8006f7e:	f8d8 3000 	ldr.w	r3, [r8]
 8006f82:	461c      	mov	r4, r3
 8006f84:	bb44      	cbnz	r4, 8006fd8 <_malloc_r+0x88>
 8006f86:	4629      	mov	r1, r5
 8006f88:	4630      	mov	r0, r6
 8006f8a:	f7ff ffbf 	bl	8006f0c <sbrk_aligned>
 8006f8e:	1c43      	adds	r3, r0, #1
 8006f90:	4604      	mov	r4, r0
 8006f92:	d158      	bne.n	8007046 <_malloc_r+0xf6>
 8006f94:	f8d8 4000 	ldr.w	r4, [r8]
 8006f98:	4627      	mov	r7, r4
 8006f9a:	2f00      	cmp	r7, #0
 8006f9c:	d143      	bne.n	8007026 <_malloc_r+0xd6>
 8006f9e:	2c00      	cmp	r4, #0
 8006fa0:	d04b      	beq.n	800703a <_malloc_r+0xea>
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	4639      	mov	r1, r7
 8006fa6:	4630      	mov	r0, r6
 8006fa8:	eb04 0903 	add.w	r9, r4, r3
 8006fac:	f000 fdce 	bl	8007b4c <_sbrk_r>
 8006fb0:	4581      	cmp	r9, r0
 8006fb2:	d142      	bne.n	800703a <_malloc_r+0xea>
 8006fb4:	6821      	ldr	r1, [r4, #0]
 8006fb6:	1a6d      	subs	r5, r5, r1
 8006fb8:	4629      	mov	r1, r5
 8006fba:	4630      	mov	r0, r6
 8006fbc:	f7ff ffa6 	bl	8006f0c <sbrk_aligned>
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	d03a      	beq.n	800703a <_malloc_r+0xea>
 8006fc4:	6823      	ldr	r3, [r4, #0]
 8006fc6:	442b      	add	r3, r5
 8006fc8:	6023      	str	r3, [r4, #0]
 8006fca:	f8d8 3000 	ldr.w	r3, [r8]
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	bb62      	cbnz	r2, 800702c <_malloc_r+0xdc>
 8006fd2:	f8c8 7000 	str.w	r7, [r8]
 8006fd6:	e00f      	b.n	8006ff8 <_malloc_r+0xa8>
 8006fd8:	6822      	ldr	r2, [r4, #0]
 8006fda:	1b52      	subs	r2, r2, r5
 8006fdc:	d420      	bmi.n	8007020 <_malloc_r+0xd0>
 8006fde:	2a0b      	cmp	r2, #11
 8006fe0:	d917      	bls.n	8007012 <_malloc_r+0xc2>
 8006fe2:	1961      	adds	r1, r4, r5
 8006fe4:	42a3      	cmp	r3, r4
 8006fe6:	6025      	str	r5, [r4, #0]
 8006fe8:	bf18      	it	ne
 8006fea:	6059      	strne	r1, [r3, #4]
 8006fec:	6863      	ldr	r3, [r4, #4]
 8006fee:	bf08      	it	eq
 8006ff0:	f8c8 1000 	streq.w	r1, [r8]
 8006ff4:	5162      	str	r2, [r4, r5]
 8006ff6:	604b      	str	r3, [r1, #4]
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	f000 f82f 	bl	800705c <__malloc_unlock>
 8006ffe:	f104 000b 	add.w	r0, r4, #11
 8007002:	1d23      	adds	r3, r4, #4
 8007004:	f020 0007 	bic.w	r0, r0, #7
 8007008:	1ac2      	subs	r2, r0, r3
 800700a:	bf1c      	itt	ne
 800700c:	1a1b      	subne	r3, r3, r0
 800700e:	50a3      	strne	r3, [r4, r2]
 8007010:	e7af      	b.n	8006f72 <_malloc_r+0x22>
 8007012:	6862      	ldr	r2, [r4, #4]
 8007014:	42a3      	cmp	r3, r4
 8007016:	bf0c      	ite	eq
 8007018:	f8c8 2000 	streq.w	r2, [r8]
 800701c:	605a      	strne	r2, [r3, #4]
 800701e:	e7eb      	b.n	8006ff8 <_malloc_r+0xa8>
 8007020:	4623      	mov	r3, r4
 8007022:	6864      	ldr	r4, [r4, #4]
 8007024:	e7ae      	b.n	8006f84 <_malloc_r+0x34>
 8007026:	463c      	mov	r4, r7
 8007028:	687f      	ldr	r7, [r7, #4]
 800702a:	e7b6      	b.n	8006f9a <_malloc_r+0x4a>
 800702c:	461a      	mov	r2, r3
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	42a3      	cmp	r3, r4
 8007032:	d1fb      	bne.n	800702c <_malloc_r+0xdc>
 8007034:	2300      	movs	r3, #0
 8007036:	6053      	str	r3, [r2, #4]
 8007038:	e7de      	b.n	8006ff8 <_malloc_r+0xa8>
 800703a:	230c      	movs	r3, #12
 800703c:	6033      	str	r3, [r6, #0]
 800703e:	4630      	mov	r0, r6
 8007040:	f000 f80c 	bl	800705c <__malloc_unlock>
 8007044:	e794      	b.n	8006f70 <_malloc_r+0x20>
 8007046:	6005      	str	r5, [r0, #0]
 8007048:	e7d6      	b.n	8006ff8 <_malloc_r+0xa8>
 800704a:	bf00      	nop
 800704c:	20005790 	.word	0x20005790

08007050 <__malloc_lock>:
 8007050:	4801      	ldr	r0, [pc, #4]	@ (8007058 <__malloc_lock+0x8>)
 8007052:	f7ff bf00 	b.w	8006e56 <__retarget_lock_acquire_recursive>
 8007056:	bf00      	nop
 8007058:	20005788 	.word	0x20005788

0800705c <__malloc_unlock>:
 800705c:	4801      	ldr	r0, [pc, #4]	@ (8007064 <__malloc_unlock+0x8>)
 800705e:	f7ff befb 	b.w	8006e58 <__retarget_lock_release_recursive>
 8007062:	bf00      	nop
 8007064:	20005788 	.word	0x20005788

08007068 <__ssputs_r>:
 8007068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800706c:	688e      	ldr	r6, [r1, #8]
 800706e:	461f      	mov	r7, r3
 8007070:	42be      	cmp	r6, r7
 8007072:	680b      	ldr	r3, [r1, #0]
 8007074:	4682      	mov	sl, r0
 8007076:	460c      	mov	r4, r1
 8007078:	4690      	mov	r8, r2
 800707a:	d82d      	bhi.n	80070d8 <__ssputs_r+0x70>
 800707c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007080:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007084:	d026      	beq.n	80070d4 <__ssputs_r+0x6c>
 8007086:	6965      	ldr	r5, [r4, #20]
 8007088:	6909      	ldr	r1, [r1, #16]
 800708a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800708e:	eba3 0901 	sub.w	r9, r3, r1
 8007092:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007096:	1c7b      	adds	r3, r7, #1
 8007098:	444b      	add	r3, r9
 800709a:	106d      	asrs	r5, r5, #1
 800709c:	429d      	cmp	r5, r3
 800709e:	bf38      	it	cc
 80070a0:	461d      	movcc	r5, r3
 80070a2:	0553      	lsls	r3, r2, #21
 80070a4:	d527      	bpl.n	80070f6 <__ssputs_r+0x8e>
 80070a6:	4629      	mov	r1, r5
 80070a8:	f7ff ff52 	bl	8006f50 <_malloc_r>
 80070ac:	4606      	mov	r6, r0
 80070ae:	b360      	cbz	r0, 800710a <__ssputs_r+0xa2>
 80070b0:	6921      	ldr	r1, [r4, #16]
 80070b2:	464a      	mov	r2, r9
 80070b4:	f7ff fed1 	bl	8006e5a <memcpy>
 80070b8:	89a3      	ldrh	r3, [r4, #12]
 80070ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80070be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070c2:	81a3      	strh	r3, [r4, #12]
 80070c4:	6126      	str	r6, [r4, #16]
 80070c6:	6165      	str	r5, [r4, #20]
 80070c8:	444e      	add	r6, r9
 80070ca:	eba5 0509 	sub.w	r5, r5, r9
 80070ce:	6026      	str	r6, [r4, #0]
 80070d0:	60a5      	str	r5, [r4, #8]
 80070d2:	463e      	mov	r6, r7
 80070d4:	42be      	cmp	r6, r7
 80070d6:	d900      	bls.n	80070da <__ssputs_r+0x72>
 80070d8:	463e      	mov	r6, r7
 80070da:	6820      	ldr	r0, [r4, #0]
 80070dc:	4632      	mov	r2, r6
 80070de:	4641      	mov	r1, r8
 80070e0:	f000 fcf8 	bl	8007ad4 <memmove>
 80070e4:	68a3      	ldr	r3, [r4, #8]
 80070e6:	1b9b      	subs	r3, r3, r6
 80070e8:	60a3      	str	r3, [r4, #8]
 80070ea:	6823      	ldr	r3, [r4, #0]
 80070ec:	4433      	add	r3, r6
 80070ee:	6023      	str	r3, [r4, #0]
 80070f0:	2000      	movs	r0, #0
 80070f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070f6:	462a      	mov	r2, r5
 80070f8:	f000 fd38 	bl	8007b6c <_realloc_r>
 80070fc:	4606      	mov	r6, r0
 80070fe:	2800      	cmp	r0, #0
 8007100:	d1e0      	bne.n	80070c4 <__ssputs_r+0x5c>
 8007102:	6921      	ldr	r1, [r4, #16]
 8007104:	4650      	mov	r0, sl
 8007106:	f7ff feb7 	bl	8006e78 <_free_r>
 800710a:	230c      	movs	r3, #12
 800710c:	f8ca 3000 	str.w	r3, [sl]
 8007110:	89a3      	ldrh	r3, [r4, #12]
 8007112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007116:	81a3      	strh	r3, [r4, #12]
 8007118:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800711c:	e7e9      	b.n	80070f2 <__ssputs_r+0x8a>
	...

08007120 <_svfiprintf_r>:
 8007120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007124:	4698      	mov	r8, r3
 8007126:	898b      	ldrh	r3, [r1, #12]
 8007128:	061b      	lsls	r3, r3, #24
 800712a:	b09d      	sub	sp, #116	@ 0x74
 800712c:	4607      	mov	r7, r0
 800712e:	460d      	mov	r5, r1
 8007130:	4614      	mov	r4, r2
 8007132:	d510      	bpl.n	8007156 <_svfiprintf_r+0x36>
 8007134:	690b      	ldr	r3, [r1, #16]
 8007136:	b973      	cbnz	r3, 8007156 <_svfiprintf_r+0x36>
 8007138:	2140      	movs	r1, #64	@ 0x40
 800713a:	f7ff ff09 	bl	8006f50 <_malloc_r>
 800713e:	6028      	str	r0, [r5, #0]
 8007140:	6128      	str	r0, [r5, #16]
 8007142:	b930      	cbnz	r0, 8007152 <_svfiprintf_r+0x32>
 8007144:	230c      	movs	r3, #12
 8007146:	603b      	str	r3, [r7, #0]
 8007148:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800714c:	b01d      	add	sp, #116	@ 0x74
 800714e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007152:	2340      	movs	r3, #64	@ 0x40
 8007154:	616b      	str	r3, [r5, #20]
 8007156:	2300      	movs	r3, #0
 8007158:	9309      	str	r3, [sp, #36]	@ 0x24
 800715a:	2320      	movs	r3, #32
 800715c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007160:	f8cd 800c 	str.w	r8, [sp, #12]
 8007164:	2330      	movs	r3, #48	@ 0x30
 8007166:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007304 <_svfiprintf_r+0x1e4>
 800716a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800716e:	f04f 0901 	mov.w	r9, #1
 8007172:	4623      	mov	r3, r4
 8007174:	469a      	mov	sl, r3
 8007176:	f813 2b01 	ldrb.w	r2, [r3], #1
 800717a:	b10a      	cbz	r2, 8007180 <_svfiprintf_r+0x60>
 800717c:	2a25      	cmp	r2, #37	@ 0x25
 800717e:	d1f9      	bne.n	8007174 <_svfiprintf_r+0x54>
 8007180:	ebba 0b04 	subs.w	fp, sl, r4
 8007184:	d00b      	beq.n	800719e <_svfiprintf_r+0x7e>
 8007186:	465b      	mov	r3, fp
 8007188:	4622      	mov	r2, r4
 800718a:	4629      	mov	r1, r5
 800718c:	4638      	mov	r0, r7
 800718e:	f7ff ff6b 	bl	8007068 <__ssputs_r>
 8007192:	3001      	adds	r0, #1
 8007194:	f000 80a7 	beq.w	80072e6 <_svfiprintf_r+0x1c6>
 8007198:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800719a:	445a      	add	r2, fp
 800719c:	9209      	str	r2, [sp, #36]	@ 0x24
 800719e:	f89a 3000 	ldrb.w	r3, [sl]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	f000 809f 	beq.w	80072e6 <_svfiprintf_r+0x1c6>
 80071a8:	2300      	movs	r3, #0
 80071aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80071ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071b2:	f10a 0a01 	add.w	sl, sl, #1
 80071b6:	9304      	str	r3, [sp, #16]
 80071b8:	9307      	str	r3, [sp, #28]
 80071ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80071be:	931a      	str	r3, [sp, #104]	@ 0x68
 80071c0:	4654      	mov	r4, sl
 80071c2:	2205      	movs	r2, #5
 80071c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071c8:	484e      	ldr	r0, [pc, #312]	@ (8007304 <_svfiprintf_r+0x1e4>)
 80071ca:	f7f9 f801 	bl	80001d0 <memchr>
 80071ce:	9a04      	ldr	r2, [sp, #16]
 80071d0:	b9d8      	cbnz	r0, 800720a <_svfiprintf_r+0xea>
 80071d2:	06d0      	lsls	r0, r2, #27
 80071d4:	bf44      	itt	mi
 80071d6:	2320      	movmi	r3, #32
 80071d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071dc:	0711      	lsls	r1, r2, #28
 80071de:	bf44      	itt	mi
 80071e0:	232b      	movmi	r3, #43	@ 0x2b
 80071e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071e6:	f89a 3000 	ldrb.w	r3, [sl]
 80071ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80071ec:	d015      	beq.n	800721a <_svfiprintf_r+0xfa>
 80071ee:	9a07      	ldr	r2, [sp, #28]
 80071f0:	4654      	mov	r4, sl
 80071f2:	2000      	movs	r0, #0
 80071f4:	f04f 0c0a 	mov.w	ip, #10
 80071f8:	4621      	mov	r1, r4
 80071fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071fe:	3b30      	subs	r3, #48	@ 0x30
 8007200:	2b09      	cmp	r3, #9
 8007202:	d94b      	bls.n	800729c <_svfiprintf_r+0x17c>
 8007204:	b1b0      	cbz	r0, 8007234 <_svfiprintf_r+0x114>
 8007206:	9207      	str	r2, [sp, #28]
 8007208:	e014      	b.n	8007234 <_svfiprintf_r+0x114>
 800720a:	eba0 0308 	sub.w	r3, r0, r8
 800720e:	fa09 f303 	lsl.w	r3, r9, r3
 8007212:	4313      	orrs	r3, r2
 8007214:	9304      	str	r3, [sp, #16]
 8007216:	46a2      	mov	sl, r4
 8007218:	e7d2      	b.n	80071c0 <_svfiprintf_r+0xa0>
 800721a:	9b03      	ldr	r3, [sp, #12]
 800721c:	1d19      	adds	r1, r3, #4
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	9103      	str	r1, [sp, #12]
 8007222:	2b00      	cmp	r3, #0
 8007224:	bfbb      	ittet	lt
 8007226:	425b      	neglt	r3, r3
 8007228:	f042 0202 	orrlt.w	r2, r2, #2
 800722c:	9307      	strge	r3, [sp, #28]
 800722e:	9307      	strlt	r3, [sp, #28]
 8007230:	bfb8      	it	lt
 8007232:	9204      	strlt	r2, [sp, #16]
 8007234:	7823      	ldrb	r3, [r4, #0]
 8007236:	2b2e      	cmp	r3, #46	@ 0x2e
 8007238:	d10a      	bne.n	8007250 <_svfiprintf_r+0x130>
 800723a:	7863      	ldrb	r3, [r4, #1]
 800723c:	2b2a      	cmp	r3, #42	@ 0x2a
 800723e:	d132      	bne.n	80072a6 <_svfiprintf_r+0x186>
 8007240:	9b03      	ldr	r3, [sp, #12]
 8007242:	1d1a      	adds	r2, r3, #4
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	9203      	str	r2, [sp, #12]
 8007248:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800724c:	3402      	adds	r4, #2
 800724e:	9305      	str	r3, [sp, #20]
 8007250:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007314 <_svfiprintf_r+0x1f4>
 8007254:	7821      	ldrb	r1, [r4, #0]
 8007256:	2203      	movs	r2, #3
 8007258:	4650      	mov	r0, sl
 800725a:	f7f8 ffb9 	bl	80001d0 <memchr>
 800725e:	b138      	cbz	r0, 8007270 <_svfiprintf_r+0x150>
 8007260:	9b04      	ldr	r3, [sp, #16]
 8007262:	eba0 000a 	sub.w	r0, r0, sl
 8007266:	2240      	movs	r2, #64	@ 0x40
 8007268:	4082      	lsls	r2, r0
 800726a:	4313      	orrs	r3, r2
 800726c:	3401      	adds	r4, #1
 800726e:	9304      	str	r3, [sp, #16]
 8007270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007274:	4824      	ldr	r0, [pc, #144]	@ (8007308 <_svfiprintf_r+0x1e8>)
 8007276:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800727a:	2206      	movs	r2, #6
 800727c:	f7f8 ffa8 	bl	80001d0 <memchr>
 8007280:	2800      	cmp	r0, #0
 8007282:	d036      	beq.n	80072f2 <_svfiprintf_r+0x1d2>
 8007284:	4b21      	ldr	r3, [pc, #132]	@ (800730c <_svfiprintf_r+0x1ec>)
 8007286:	bb1b      	cbnz	r3, 80072d0 <_svfiprintf_r+0x1b0>
 8007288:	9b03      	ldr	r3, [sp, #12]
 800728a:	3307      	adds	r3, #7
 800728c:	f023 0307 	bic.w	r3, r3, #7
 8007290:	3308      	adds	r3, #8
 8007292:	9303      	str	r3, [sp, #12]
 8007294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007296:	4433      	add	r3, r6
 8007298:	9309      	str	r3, [sp, #36]	@ 0x24
 800729a:	e76a      	b.n	8007172 <_svfiprintf_r+0x52>
 800729c:	fb0c 3202 	mla	r2, ip, r2, r3
 80072a0:	460c      	mov	r4, r1
 80072a2:	2001      	movs	r0, #1
 80072a4:	e7a8      	b.n	80071f8 <_svfiprintf_r+0xd8>
 80072a6:	2300      	movs	r3, #0
 80072a8:	3401      	adds	r4, #1
 80072aa:	9305      	str	r3, [sp, #20]
 80072ac:	4619      	mov	r1, r3
 80072ae:	f04f 0c0a 	mov.w	ip, #10
 80072b2:	4620      	mov	r0, r4
 80072b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072b8:	3a30      	subs	r2, #48	@ 0x30
 80072ba:	2a09      	cmp	r2, #9
 80072bc:	d903      	bls.n	80072c6 <_svfiprintf_r+0x1a6>
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d0c6      	beq.n	8007250 <_svfiprintf_r+0x130>
 80072c2:	9105      	str	r1, [sp, #20]
 80072c4:	e7c4      	b.n	8007250 <_svfiprintf_r+0x130>
 80072c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80072ca:	4604      	mov	r4, r0
 80072cc:	2301      	movs	r3, #1
 80072ce:	e7f0      	b.n	80072b2 <_svfiprintf_r+0x192>
 80072d0:	ab03      	add	r3, sp, #12
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	462a      	mov	r2, r5
 80072d6:	4b0e      	ldr	r3, [pc, #56]	@ (8007310 <_svfiprintf_r+0x1f0>)
 80072d8:	a904      	add	r1, sp, #16
 80072da:	4638      	mov	r0, r7
 80072dc:	f3af 8000 	nop.w
 80072e0:	1c42      	adds	r2, r0, #1
 80072e2:	4606      	mov	r6, r0
 80072e4:	d1d6      	bne.n	8007294 <_svfiprintf_r+0x174>
 80072e6:	89ab      	ldrh	r3, [r5, #12]
 80072e8:	065b      	lsls	r3, r3, #25
 80072ea:	f53f af2d 	bmi.w	8007148 <_svfiprintf_r+0x28>
 80072ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80072f0:	e72c      	b.n	800714c <_svfiprintf_r+0x2c>
 80072f2:	ab03      	add	r3, sp, #12
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	462a      	mov	r2, r5
 80072f8:	4b05      	ldr	r3, [pc, #20]	@ (8007310 <_svfiprintf_r+0x1f0>)
 80072fa:	a904      	add	r1, sp, #16
 80072fc:	4638      	mov	r0, r7
 80072fe:	f000 f9bb 	bl	8007678 <_printf_i>
 8007302:	e7ed      	b.n	80072e0 <_svfiprintf_r+0x1c0>
 8007304:	08007f4d 	.word	0x08007f4d
 8007308:	08007f57 	.word	0x08007f57
 800730c:	00000000 	.word	0x00000000
 8007310:	08007069 	.word	0x08007069
 8007314:	08007f53 	.word	0x08007f53

08007318 <__sfputc_r>:
 8007318:	6893      	ldr	r3, [r2, #8]
 800731a:	3b01      	subs	r3, #1
 800731c:	2b00      	cmp	r3, #0
 800731e:	b410      	push	{r4}
 8007320:	6093      	str	r3, [r2, #8]
 8007322:	da08      	bge.n	8007336 <__sfputc_r+0x1e>
 8007324:	6994      	ldr	r4, [r2, #24]
 8007326:	42a3      	cmp	r3, r4
 8007328:	db01      	blt.n	800732e <__sfputc_r+0x16>
 800732a:	290a      	cmp	r1, #10
 800732c:	d103      	bne.n	8007336 <__sfputc_r+0x1e>
 800732e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007332:	f7ff bc82 	b.w	8006c3a <__swbuf_r>
 8007336:	6813      	ldr	r3, [r2, #0]
 8007338:	1c58      	adds	r0, r3, #1
 800733a:	6010      	str	r0, [r2, #0]
 800733c:	7019      	strb	r1, [r3, #0]
 800733e:	4608      	mov	r0, r1
 8007340:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007344:	4770      	bx	lr

08007346 <__sfputs_r>:
 8007346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007348:	4606      	mov	r6, r0
 800734a:	460f      	mov	r7, r1
 800734c:	4614      	mov	r4, r2
 800734e:	18d5      	adds	r5, r2, r3
 8007350:	42ac      	cmp	r4, r5
 8007352:	d101      	bne.n	8007358 <__sfputs_r+0x12>
 8007354:	2000      	movs	r0, #0
 8007356:	e007      	b.n	8007368 <__sfputs_r+0x22>
 8007358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800735c:	463a      	mov	r2, r7
 800735e:	4630      	mov	r0, r6
 8007360:	f7ff ffda 	bl	8007318 <__sfputc_r>
 8007364:	1c43      	adds	r3, r0, #1
 8007366:	d1f3      	bne.n	8007350 <__sfputs_r+0xa>
 8007368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800736c <_vfiprintf_r>:
 800736c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007370:	460d      	mov	r5, r1
 8007372:	b09d      	sub	sp, #116	@ 0x74
 8007374:	4614      	mov	r4, r2
 8007376:	4698      	mov	r8, r3
 8007378:	4606      	mov	r6, r0
 800737a:	b118      	cbz	r0, 8007384 <_vfiprintf_r+0x18>
 800737c:	6a03      	ldr	r3, [r0, #32]
 800737e:	b90b      	cbnz	r3, 8007384 <_vfiprintf_r+0x18>
 8007380:	f7ff fb3e 	bl	8006a00 <__sinit>
 8007384:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007386:	07d9      	lsls	r1, r3, #31
 8007388:	d405      	bmi.n	8007396 <_vfiprintf_r+0x2a>
 800738a:	89ab      	ldrh	r3, [r5, #12]
 800738c:	059a      	lsls	r2, r3, #22
 800738e:	d402      	bmi.n	8007396 <_vfiprintf_r+0x2a>
 8007390:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007392:	f7ff fd60 	bl	8006e56 <__retarget_lock_acquire_recursive>
 8007396:	89ab      	ldrh	r3, [r5, #12]
 8007398:	071b      	lsls	r3, r3, #28
 800739a:	d501      	bpl.n	80073a0 <_vfiprintf_r+0x34>
 800739c:	692b      	ldr	r3, [r5, #16]
 800739e:	b99b      	cbnz	r3, 80073c8 <_vfiprintf_r+0x5c>
 80073a0:	4629      	mov	r1, r5
 80073a2:	4630      	mov	r0, r6
 80073a4:	f7ff fc88 	bl	8006cb8 <__swsetup_r>
 80073a8:	b170      	cbz	r0, 80073c8 <_vfiprintf_r+0x5c>
 80073aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073ac:	07dc      	lsls	r4, r3, #31
 80073ae:	d504      	bpl.n	80073ba <_vfiprintf_r+0x4e>
 80073b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073b4:	b01d      	add	sp, #116	@ 0x74
 80073b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ba:	89ab      	ldrh	r3, [r5, #12]
 80073bc:	0598      	lsls	r0, r3, #22
 80073be:	d4f7      	bmi.n	80073b0 <_vfiprintf_r+0x44>
 80073c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073c2:	f7ff fd49 	bl	8006e58 <__retarget_lock_release_recursive>
 80073c6:	e7f3      	b.n	80073b0 <_vfiprintf_r+0x44>
 80073c8:	2300      	movs	r3, #0
 80073ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80073cc:	2320      	movs	r3, #32
 80073ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80073d6:	2330      	movs	r3, #48	@ 0x30
 80073d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007588 <_vfiprintf_r+0x21c>
 80073dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073e0:	f04f 0901 	mov.w	r9, #1
 80073e4:	4623      	mov	r3, r4
 80073e6:	469a      	mov	sl, r3
 80073e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073ec:	b10a      	cbz	r2, 80073f2 <_vfiprintf_r+0x86>
 80073ee:	2a25      	cmp	r2, #37	@ 0x25
 80073f0:	d1f9      	bne.n	80073e6 <_vfiprintf_r+0x7a>
 80073f2:	ebba 0b04 	subs.w	fp, sl, r4
 80073f6:	d00b      	beq.n	8007410 <_vfiprintf_r+0xa4>
 80073f8:	465b      	mov	r3, fp
 80073fa:	4622      	mov	r2, r4
 80073fc:	4629      	mov	r1, r5
 80073fe:	4630      	mov	r0, r6
 8007400:	f7ff ffa1 	bl	8007346 <__sfputs_r>
 8007404:	3001      	adds	r0, #1
 8007406:	f000 80a7 	beq.w	8007558 <_vfiprintf_r+0x1ec>
 800740a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800740c:	445a      	add	r2, fp
 800740e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007410:	f89a 3000 	ldrb.w	r3, [sl]
 8007414:	2b00      	cmp	r3, #0
 8007416:	f000 809f 	beq.w	8007558 <_vfiprintf_r+0x1ec>
 800741a:	2300      	movs	r3, #0
 800741c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007420:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007424:	f10a 0a01 	add.w	sl, sl, #1
 8007428:	9304      	str	r3, [sp, #16]
 800742a:	9307      	str	r3, [sp, #28]
 800742c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007430:	931a      	str	r3, [sp, #104]	@ 0x68
 8007432:	4654      	mov	r4, sl
 8007434:	2205      	movs	r2, #5
 8007436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800743a:	4853      	ldr	r0, [pc, #332]	@ (8007588 <_vfiprintf_r+0x21c>)
 800743c:	f7f8 fec8 	bl	80001d0 <memchr>
 8007440:	9a04      	ldr	r2, [sp, #16]
 8007442:	b9d8      	cbnz	r0, 800747c <_vfiprintf_r+0x110>
 8007444:	06d1      	lsls	r1, r2, #27
 8007446:	bf44      	itt	mi
 8007448:	2320      	movmi	r3, #32
 800744a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800744e:	0713      	lsls	r3, r2, #28
 8007450:	bf44      	itt	mi
 8007452:	232b      	movmi	r3, #43	@ 0x2b
 8007454:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007458:	f89a 3000 	ldrb.w	r3, [sl]
 800745c:	2b2a      	cmp	r3, #42	@ 0x2a
 800745e:	d015      	beq.n	800748c <_vfiprintf_r+0x120>
 8007460:	9a07      	ldr	r2, [sp, #28]
 8007462:	4654      	mov	r4, sl
 8007464:	2000      	movs	r0, #0
 8007466:	f04f 0c0a 	mov.w	ip, #10
 800746a:	4621      	mov	r1, r4
 800746c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007470:	3b30      	subs	r3, #48	@ 0x30
 8007472:	2b09      	cmp	r3, #9
 8007474:	d94b      	bls.n	800750e <_vfiprintf_r+0x1a2>
 8007476:	b1b0      	cbz	r0, 80074a6 <_vfiprintf_r+0x13a>
 8007478:	9207      	str	r2, [sp, #28]
 800747a:	e014      	b.n	80074a6 <_vfiprintf_r+0x13a>
 800747c:	eba0 0308 	sub.w	r3, r0, r8
 8007480:	fa09 f303 	lsl.w	r3, r9, r3
 8007484:	4313      	orrs	r3, r2
 8007486:	9304      	str	r3, [sp, #16]
 8007488:	46a2      	mov	sl, r4
 800748a:	e7d2      	b.n	8007432 <_vfiprintf_r+0xc6>
 800748c:	9b03      	ldr	r3, [sp, #12]
 800748e:	1d19      	adds	r1, r3, #4
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	9103      	str	r1, [sp, #12]
 8007494:	2b00      	cmp	r3, #0
 8007496:	bfbb      	ittet	lt
 8007498:	425b      	neglt	r3, r3
 800749a:	f042 0202 	orrlt.w	r2, r2, #2
 800749e:	9307      	strge	r3, [sp, #28]
 80074a0:	9307      	strlt	r3, [sp, #28]
 80074a2:	bfb8      	it	lt
 80074a4:	9204      	strlt	r2, [sp, #16]
 80074a6:	7823      	ldrb	r3, [r4, #0]
 80074a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80074aa:	d10a      	bne.n	80074c2 <_vfiprintf_r+0x156>
 80074ac:	7863      	ldrb	r3, [r4, #1]
 80074ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80074b0:	d132      	bne.n	8007518 <_vfiprintf_r+0x1ac>
 80074b2:	9b03      	ldr	r3, [sp, #12]
 80074b4:	1d1a      	adds	r2, r3, #4
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	9203      	str	r2, [sp, #12]
 80074ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80074be:	3402      	adds	r4, #2
 80074c0:	9305      	str	r3, [sp, #20]
 80074c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007598 <_vfiprintf_r+0x22c>
 80074c6:	7821      	ldrb	r1, [r4, #0]
 80074c8:	2203      	movs	r2, #3
 80074ca:	4650      	mov	r0, sl
 80074cc:	f7f8 fe80 	bl	80001d0 <memchr>
 80074d0:	b138      	cbz	r0, 80074e2 <_vfiprintf_r+0x176>
 80074d2:	9b04      	ldr	r3, [sp, #16]
 80074d4:	eba0 000a 	sub.w	r0, r0, sl
 80074d8:	2240      	movs	r2, #64	@ 0x40
 80074da:	4082      	lsls	r2, r0
 80074dc:	4313      	orrs	r3, r2
 80074de:	3401      	adds	r4, #1
 80074e0:	9304      	str	r3, [sp, #16]
 80074e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074e6:	4829      	ldr	r0, [pc, #164]	@ (800758c <_vfiprintf_r+0x220>)
 80074e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80074ec:	2206      	movs	r2, #6
 80074ee:	f7f8 fe6f 	bl	80001d0 <memchr>
 80074f2:	2800      	cmp	r0, #0
 80074f4:	d03f      	beq.n	8007576 <_vfiprintf_r+0x20a>
 80074f6:	4b26      	ldr	r3, [pc, #152]	@ (8007590 <_vfiprintf_r+0x224>)
 80074f8:	bb1b      	cbnz	r3, 8007542 <_vfiprintf_r+0x1d6>
 80074fa:	9b03      	ldr	r3, [sp, #12]
 80074fc:	3307      	adds	r3, #7
 80074fe:	f023 0307 	bic.w	r3, r3, #7
 8007502:	3308      	adds	r3, #8
 8007504:	9303      	str	r3, [sp, #12]
 8007506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007508:	443b      	add	r3, r7
 800750a:	9309      	str	r3, [sp, #36]	@ 0x24
 800750c:	e76a      	b.n	80073e4 <_vfiprintf_r+0x78>
 800750e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007512:	460c      	mov	r4, r1
 8007514:	2001      	movs	r0, #1
 8007516:	e7a8      	b.n	800746a <_vfiprintf_r+0xfe>
 8007518:	2300      	movs	r3, #0
 800751a:	3401      	adds	r4, #1
 800751c:	9305      	str	r3, [sp, #20]
 800751e:	4619      	mov	r1, r3
 8007520:	f04f 0c0a 	mov.w	ip, #10
 8007524:	4620      	mov	r0, r4
 8007526:	f810 2b01 	ldrb.w	r2, [r0], #1
 800752a:	3a30      	subs	r2, #48	@ 0x30
 800752c:	2a09      	cmp	r2, #9
 800752e:	d903      	bls.n	8007538 <_vfiprintf_r+0x1cc>
 8007530:	2b00      	cmp	r3, #0
 8007532:	d0c6      	beq.n	80074c2 <_vfiprintf_r+0x156>
 8007534:	9105      	str	r1, [sp, #20]
 8007536:	e7c4      	b.n	80074c2 <_vfiprintf_r+0x156>
 8007538:	fb0c 2101 	mla	r1, ip, r1, r2
 800753c:	4604      	mov	r4, r0
 800753e:	2301      	movs	r3, #1
 8007540:	e7f0      	b.n	8007524 <_vfiprintf_r+0x1b8>
 8007542:	ab03      	add	r3, sp, #12
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	462a      	mov	r2, r5
 8007548:	4b12      	ldr	r3, [pc, #72]	@ (8007594 <_vfiprintf_r+0x228>)
 800754a:	a904      	add	r1, sp, #16
 800754c:	4630      	mov	r0, r6
 800754e:	f3af 8000 	nop.w
 8007552:	4607      	mov	r7, r0
 8007554:	1c78      	adds	r0, r7, #1
 8007556:	d1d6      	bne.n	8007506 <_vfiprintf_r+0x19a>
 8007558:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800755a:	07d9      	lsls	r1, r3, #31
 800755c:	d405      	bmi.n	800756a <_vfiprintf_r+0x1fe>
 800755e:	89ab      	ldrh	r3, [r5, #12]
 8007560:	059a      	lsls	r2, r3, #22
 8007562:	d402      	bmi.n	800756a <_vfiprintf_r+0x1fe>
 8007564:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007566:	f7ff fc77 	bl	8006e58 <__retarget_lock_release_recursive>
 800756a:	89ab      	ldrh	r3, [r5, #12]
 800756c:	065b      	lsls	r3, r3, #25
 800756e:	f53f af1f 	bmi.w	80073b0 <_vfiprintf_r+0x44>
 8007572:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007574:	e71e      	b.n	80073b4 <_vfiprintf_r+0x48>
 8007576:	ab03      	add	r3, sp, #12
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	462a      	mov	r2, r5
 800757c:	4b05      	ldr	r3, [pc, #20]	@ (8007594 <_vfiprintf_r+0x228>)
 800757e:	a904      	add	r1, sp, #16
 8007580:	4630      	mov	r0, r6
 8007582:	f000 f879 	bl	8007678 <_printf_i>
 8007586:	e7e4      	b.n	8007552 <_vfiprintf_r+0x1e6>
 8007588:	08007f4d 	.word	0x08007f4d
 800758c:	08007f57 	.word	0x08007f57
 8007590:	00000000 	.word	0x00000000
 8007594:	08007347 	.word	0x08007347
 8007598:	08007f53 	.word	0x08007f53

0800759c <_printf_common>:
 800759c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075a0:	4616      	mov	r6, r2
 80075a2:	4698      	mov	r8, r3
 80075a4:	688a      	ldr	r2, [r1, #8]
 80075a6:	690b      	ldr	r3, [r1, #16]
 80075a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075ac:	4293      	cmp	r3, r2
 80075ae:	bfb8      	it	lt
 80075b0:	4613      	movlt	r3, r2
 80075b2:	6033      	str	r3, [r6, #0]
 80075b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80075b8:	4607      	mov	r7, r0
 80075ba:	460c      	mov	r4, r1
 80075bc:	b10a      	cbz	r2, 80075c2 <_printf_common+0x26>
 80075be:	3301      	adds	r3, #1
 80075c0:	6033      	str	r3, [r6, #0]
 80075c2:	6823      	ldr	r3, [r4, #0]
 80075c4:	0699      	lsls	r1, r3, #26
 80075c6:	bf42      	ittt	mi
 80075c8:	6833      	ldrmi	r3, [r6, #0]
 80075ca:	3302      	addmi	r3, #2
 80075cc:	6033      	strmi	r3, [r6, #0]
 80075ce:	6825      	ldr	r5, [r4, #0]
 80075d0:	f015 0506 	ands.w	r5, r5, #6
 80075d4:	d106      	bne.n	80075e4 <_printf_common+0x48>
 80075d6:	f104 0a19 	add.w	sl, r4, #25
 80075da:	68e3      	ldr	r3, [r4, #12]
 80075dc:	6832      	ldr	r2, [r6, #0]
 80075de:	1a9b      	subs	r3, r3, r2
 80075e0:	42ab      	cmp	r3, r5
 80075e2:	dc26      	bgt.n	8007632 <_printf_common+0x96>
 80075e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80075e8:	6822      	ldr	r2, [r4, #0]
 80075ea:	3b00      	subs	r3, #0
 80075ec:	bf18      	it	ne
 80075ee:	2301      	movne	r3, #1
 80075f0:	0692      	lsls	r2, r2, #26
 80075f2:	d42b      	bmi.n	800764c <_printf_common+0xb0>
 80075f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80075f8:	4641      	mov	r1, r8
 80075fa:	4638      	mov	r0, r7
 80075fc:	47c8      	blx	r9
 80075fe:	3001      	adds	r0, #1
 8007600:	d01e      	beq.n	8007640 <_printf_common+0xa4>
 8007602:	6823      	ldr	r3, [r4, #0]
 8007604:	6922      	ldr	r2, [r4, #16]
 8007606:	f003 0306 	and.w	r3, r3, #6
 800760a:	2b04      	cmp	r3, #4
 800760c:	bf02      	ittt	eq
 800760e:	68e5      	ldreq	r5, [r4, #12]
 8007610:	6833      	ldreq	r3, [r6, #0]
 8007612:	1aed      	subeq	r5, r5, r3
 8007614:	68a3      	ldr	r3, [r4, #8]
 8007616:	bf0c      	ite	eq
 8007618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800761c:	2500      	movne	r5, #0
 800761e:	4293      	cmp	r3, r2
 8007620:	bfc4      	itt	gt
 8007622:	1a9b      	subgt	r3, r3, r2
 8007624:	18ed      	addgt	r5, r5, r3
 8007626:	2600      	movs	r6, #0
 8007628:	341a      	adds	r4, #26
 800762a:	42b5      	cmp	r5, r6
 800762c:	d11a      	bne.n	8007664 <_printf_common+0xc8>
 800762e:	2000      	movs	r0, #0
 8007630:	e008      	b.n	8007644 <_printf_common+0xa8>
 8007632:	2301      	movs	r3, #1
 8007634:	4652      	mov	r2, sl
 8007636:	4641      	mov	r1, r8
 8007638:	4638      	mov	r0, r7
 800763a:	47c8      	blx	r9
 800763c:	3001      	adds	r0, #1
 800763e:	d103      	bne.n	8007648 <_printf_common+0xac>
 8007640:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007648:	3501      	adds	r5, #1
 800764a:	e7c6      	b.n	80075da <_printf_common+0x3e>
 800764c:	18e1      	adds	r1, r4, r3
 800764e:	1c5a      	adds	r2, r3, #1
 8007650:	2030      	movs	r0, #48	@ 0x30
 8007652:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007656:	4422      	add	r2, r4
 8007658:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800765c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007660:	3302      	adds	r3, #2
 8007662:	e7c7      	b.n	80075f4 <_printf_common+0x58>
 8007664:	2301      	movs	r3, #1
 8007666:	4622      	mov	r2, r4
 8007668:	4641      	mov	r1, r8
 800766a:	4638      	mov	r0, r7
 800766c:	47c8      	blx	r9
 800766e:	3001      	adds	r0, #1
 8007670:	d0e6      	beq.n	8007640 <_printf_common+0xa4>
 8007672:	3601      	adds	r6, #1
 8007674:	e7d9      	b.n	800762a <_printf_common+0x8e>
	...

08007678 <_printf_i>:
 8007678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800767c:	7e0f      	ldrb	r7, [r1, #24]
 800767e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007680:	2f78      	cmp	r7, #120	@ 0x78
 8007682:	4691      	mov	r9, r2
 8007684:	4680      	mov	r8, r0
 8007686:	460c      	mov	r4, r1
 8007688:	469a      	mov	sl, r3
 800768a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800768e:	d807      	bhi.n	80076a0 <_printf_i+0x28>
 8007690:	2f62      	cmp	r7, #98	@ 0x62
 8007692:	d80a      	bhi.n	80076aa <_printf_i+0x32>
 8007694:	2f00      	cmp	r7, #0
 8007696:	f000 80d2 	beq.w	800783e <_printf_i+0x1c6>
 800769a:	2f58      	cmp	r7, #88	@ 0x58
 800769c:	f000 80b9 	beq.w	8007812 <_printf_i+0x19a>
 80076a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80076a8:	e03a      	b.n	8007720 <_printf_i+0xa8>
 80076aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80076ae:	2b15      	cmp	r3, #21
 80076b0:	d8f6      	bhi.n	80076a0 <_printf_i+0x28>
 80076b2:	a101      	add	r1, pc, #4	@ (adr r1, 80076b8 <_printf_i+0x40>)
 80076b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076b8:	08007711 	.word	0x08007711
 80076bc:	08007725 	.word	0x08007725
 80076c0:	080076a1 	.word	0x080076a1
 80076c4:	080076a1 	.word	0x080076a1
 80076c8:	080076a1 	.word	0x080076a1
 80076cc:	080076a1 	.word	0x080076a1
 80076d0:	08007725 	.word	0x08007725
 80076d4:	080076a1 	.word	0x080076a1
 80076d8:	080076a1 	.word	0x080076a1
 80076dc:	080076a1 	.word	0x080076a1
 80076e0:	080076a1 	.word	0x080076a1
 80076e4:	08007825 	.word	0x08007825
 80076e8:	0800774f 	.word	0x0800774f
 80076ec:	080077df 	.word	0x080077df
 80076f0:	080076a1 	.word	0x080076a1
 80076f4:	080076a1 	.word	0x080076a1
 80076f8:	08007847 	.word	0x08007847
 80076fc:	080076a1 	.word	0x080076a1
 8007700:	0800774f 	.word	0x0800774f
 8007704:	080076a1 	.word	0x080076a1
 8007708:	080076a1 	.word	0x080076a1
 800770c:	080077e7 	.word	0x080077e7
 8007710:	6833      	ldr	r3, [r6, #0]
 8007712:	1d1a      	adds	r2, r3, #4
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	6032      	str	r2, [r6, #0]
 8007718:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800771c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007720:	2301      	movs	r3, #1
 8007722:	e09d      	b.n	8007860 <_printf_i+0x1e8>
 8007724:	6833      	ldr	r3, [r6, #0]
 8007726:	6820      	ldr	r0, [r4, #0]
 8007728:	1d19      	adds	r1, r3, #4
 800772a:	6031      	str	r1, [r6, #0]
 800772c:	0606      	lsls	r6, r0, #24
 800772e:	d501      	bpl.n	8007734 <_printf_i+0xbc>
 8007730:	681d      	ldr	r5, [r3, #0]
 8007732:	e003      	b.n	800773c <_printf_i+0xc4>
 8007734:	0645      	lsls	r5, r0, #25
 8007736:	d5fb      	bpl.n	8007730 <_printf_i+0xb8>
 8007738:	f9b3 5000 	ldrsh.w	r5, [r3]
 800773c:	2d00      	cmp	r5, #0
 800773e:	da03      	bge.n	8007748 <_printf_i+0xd0>
 8007740:	232d      	movs	r3, #45	@ 0x2d
 8007742:	426d      	negs	r5, r5
 8007744:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007748:	4859      	ldr	r0, [pc, #356]	@ (80078b0 <_printf_i+0x238>)
 800774a:	230a      	movs	r3, #10
 800774c:	e011      	b.n	8007772 <_printf_i+0xfa>
 800774e:	6821      	ldr	r1, [r4, #0]
 8007750:	6833      	ldr	r3, [r6, #0]
 8007752:	0608      	lsls	r0, r1, #24
 8007754:	f853 5b04 	ldr.w	r5, [r3], #4
 8007758:	d402      	bmi.n	8007760 <_printf_i+0xe8>
 800775a:	0649      	lsls	r1, r1, #25
 800775c:	bf48      	it	mi
 800775e:	b2ad      	uxthmi	r5, r5
 8007760:	2f6f      	cmp	r7, #111	@ 0x6f
 8007762:	4853      	ldr	r0, [pc, #332]	@ (80078b0 <_printf_i+0x238>)
 8007764:	6033      	str	r3, [r6, #0]
 8007766:	bf14      	ite	ne
 8007768:	230a      	movne	r3, #10
 800776a:	2308      	moveq	r3, #8
 800776c:	2100      	movs	r1, #0
 800776e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007772:	6866      	ldr	r6, [r4, #4]
 8007774:	60a6      	str	r6, [r4, #8]
 8007776:	2e00      	cmp	r6, #0
 8007778:	bfa2      	ittt	ge
 800777a:	6821      	ldrge	r1, [r4, #0]
 800777c:	f021 0104 	bicge.w	r1, r1, #4
 8007780:	6021      	strge	r1, [r4, #0]
 8007782:	b90d      	cbnz	r5, 8007788 <_printf_i+0x110>
 8007784:	2e00      	cmp	r6, #0
 8007786:	d04b      	beq.n	8007820 <_printf_i+0x1a8>
 8007788:	4616      	mov	r6, r2
 800778a:	fbb5 f1f3 	udiv	r1, r5, r3
 800778e:	fb03 5711 	mls	r7, r3, r1, r5
 8007792:	5dc7      	ldrb	r7, [r0, r7]
 8007794:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007798:	462f      	mov	r7, r5
 800779a:	42bb      	cmp	r3, r7
 800779c:	460d      	mov	r5, r1
 800779e:	d9f4      	bls.n	800778a <_printf_i+0x112>
 80077a0:	2b08      	cmp	r3, #8
 80077a2:	d10b      	bne.n	80077bc <_printf_i+0x144>
 80077a4:	6823      	ldr	r3, [r4, #0]
 80077a6:	07df      	lsls	r7, r3, #31
 80077a8:	d508      	bpl.n	80077bc <_printf_i+0x144>
 80077aa:	6923      	ldr	r3, [r4, #16]
 80077ac:	6861      	ldr	r1, [r4, #4]
 80077ae:	4299      	cmp	r1, r3
 80077b0:	bfde      	ittt	le
 80077b2:	2330      	movle	r3, #48	@ 0x30
 80077b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077b8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80077bc:	1b92      	subs	r2, r2, r6
 80077be:	6122      	str	r2, [r4, #16]
 80077c0:	f8cd a000 	str.w	sl, [sp]
 80077c4:	464b      	mov	r3, r9
 80077c6:	aa03      	add	r2, sp, #12
 80077c8:	4621      	mov	r1, r4
 80077ca:	4640      	mov	r0, r8
 80077cc:	f7ff fee6 	bl	800759c <_printf_common>
 80077d0:	3001      	adds	r0, #1
 80077d2:	d14a      	bne.n	800786a <_printf_i+0x1f2>
 80077d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077d8:	b004      	add	sp, #16
 80077da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077de:	6823      	ldr	r3, [r4, #0]
 80077e0:	f043 0320 	orr.w	r3, r3, #32
 80077e4:	6023      	str	r3, [r4, #0]
 80077e6:	4833      	ldr	r0, [pc, #204]	@ (80078b4 <_printf_i+0x23c>)
 80077e8:	2778      	movs	r7, #120	@ 0x78
 80077ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80077ee:	6823      	ldr	r3, [r4, #0]
 80077f0:	6831      	ldr	r1, [r6, #0]
 80077f2:	061f      	lsls	r7, r3, #24
 80077f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80077f8:	d402      	bmi.n	8007800 <_printf_i+0x188>
 80077fa:	065f      	lsls	r7, r3, #25
 80077fc:	bf48      	it	mi
 80077fe:	b2ad      	uxthmi	r5, r5
 8007800:	6031      	str	r1, [r6, #0]
 8007802:	07d9      	lsls	r1, r3, #31
 8007804:	bf44      	itt	mi
 8007806:	f043 0320 	orrmi.w	r3, r3, #32
 800780a:	6023      	strmi	r3, [r4, #0]
 800780c:	b11d      	cbz	r5, 8007816 <_printf_i+0x19e>
 800780e:	2310      	movs	r3, #16
 8007810:	e7ac      	b.n	800776c <_printf_i+0xf4>
 8007812:	4827      	ldr	r0, [pc, #156]	@ (80078b0 <_printf_i+0x238>)
 8007814:	e7e9      	b.n	80077ea <_printf_i+0x172>
 8007816:	6823      	ldr	r3, [r4, #0]
 8007818:	f023 0320 	bic.w	r3, r3, #32
 800781c:	6023      	str	r3, [r4, #0]
 800781e:	e7f6      	b.n	800780e <_printf_i+0x196>
 8007820:	4616      	mov	r6, r2
 8007822:	e7bd      	b.n	80077a0 <_printf_i+0x128>
 8007824:	6833      	ldr	r3, [r6, #0]
 8007826:	6825      	ldr	r5, [r4, #0]
 8007828:	6961      	ldr	r1, [r4, #20]
 800782a:	1d18      	adds	r0, r3, #4
 800782c:	6030      	str	r0, [r6, #0]
 800782e:	062e      	lsls	r6, r5, #24
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	d501      	bpl.n	8007838 <_printf_i+0x1c0>
 8007834:	6019      	str	r1, [r3, #0]
 8007836:	e002      	b.n	800783e <_printf_i+0x1c6>
 8007838:	0668      	lsls	r0, r5, #25
 800783a:	d5fb      	bpl.n	8007834 <_printf_i+0x1bc>
 800783c:	8019      	strh	r1, [r3, #0]
 800783e:	2300      	movs	r3, #0
 8007840:	6123      	str	r3, [r4, #16]
 8007842:	4616      	mov	r6, r2
 8007844:	e7bc      	b.n	80077c0 <_printf_i+0x148>
 8007846:	6833      	ldr	r3, [r6, #0]
 8007848:	1d1a      	adds	r2, r3, #4
 800784a:	6032      	str	r2, [r6, #0]
 800784c:	681e      	ldr	r6, [r3, #0]
 800784e:	6862      	ldr	r2, [r4, #4]
 8007850:	2100      	movs	r1, #0
 8007852:	4630      	mov	r0, r6
 8007854:	f7f8 fcbc 	bl	80001d0 <memchr>
 8007858:	b108      	cbz	r0, 800785e <_printf_i+0x1e6>
 800785a:	1b80      	subs	r0, r0, r6
 800785c:	6060      	str	r0, [r4, #4]
 800785e:	6863      	ldr	r3, [r4, #4]
 8007860:	6123      	str	r3, [r4, #16]
 8007862:	2300      	movs	r3, #0
 8007864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007868:	e7aa      	b.n	80077c0 <_printf_i+0x148>
 800786a:	6923      	ldr	r3, [r4, #16]
 800786c:	4632      	mov	r2, r6
 800786e:	4649      	mov	r1, r9
 8007870:	4640      	mov	r0, r8
 8007872:	47d0      	blx	sl
 8007874:	3001      	adds	r0, #1
 8007876:	d0ad      	beq.n	80077d4 <_printf_i+0x15c>
 8007878:	6823      	ldr	r3, [r4, #0]
 800787a:	079b      	lsls	r3, r3, #30
 800787c:	d413      	bmi.n	80078a6 <_printf_i+0x22e>
 800787e:	68e0      	ldr	r0, [r4, #12]
 8007880:	9b03      	ldr	r3, [sp, #12]
 8007882:	4298      	cmp	r0, r3
 8007884:	bfb8      	it	lt
 8007886:	4618      	movlt	r0, r3
 8007888:	e7a6      	b.n	80077d8 <_printf_i+0x160>
 800788a:	2301      	movs	r3, #1
 800788c:	4632      	mov	r2, r6
 800788e:	4649      	mov	r1, r9
 8007890:	4640      	mov	r0, r8
 8007892:	47d0      	blx	sl
 8007894:	3001      	adds	r0, #1
 8007896:	d09d      	beq.n	80077d4 <_printf_i+0x15c>
 8007898:	3501      	adds	r5, #1
 800789a:	68e3      	ldr	r3, [r4, #12]
 800789c:	9903      	ldr	r1, [sp, #12]
 800789e:	1a5b      	subs	r3, r3, r1
 80078a0:	42ab      	cmp	r3, r5
 80078a2:	dcf2      	bgt.n	800788a <_printf_i+0x212>
 80078a4:	e7eb      	b.n	800787e <_printf_i+0x206>
 80078a6:	2500      	movs	r5, #0
 80078a8:	f104 0619 	add.w	r6, r4, #25
 80078ac:	e7f5      	b.n	800789a <_printf_i+0x222>
 80078ae:	bf00      	nop
 80078b0:	08007f5e 	.word	0x08007f5e
 80078b4:	08007f6f 	.word	0x08007f6f

080078b8 <__sflush_r>:
 80078b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078c0:	0716      	lsls	r6, r2, #28
 80078c2:	4605      	mov	r5, r0
 80078c4:	460c      	mov	r4, r1
 80078c6:	d454      	bmi.n	8007972 <__sflush_r+0xba>
 80078c8:	684b      	ldr	r3, [r1, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	dc02      	bgt.n	80078d4 <__sflush_r+0x1c>
 80078ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	dd48      	ble.n	8007966 <__sflush_r+0xae>
 80078d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078d6:	2e00      	cmp	r6, #0
 80078d8:	d045      	beq.n	8007966 <__sflush_r+0xae>
 80078da:	2300      	movs	r3, #0
 80078dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80078e0:	682f      	ldr	r7, [r5, #0]
 80078e2:	6a21      	ldr	r1, [r4, #32]
 80078e4:	602b      	str	r3, [r5, #0]
 80078e6:	d030      	beq.n	800794a <__sflush_r+0x92>
 80078e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80078ea:	89a3      	ldrh	r3, [r4, #12]
 80078ec:	0759      	lsls	r1, r3, #29
 80078ee:	d505      	bpl.n	80078fc <__sflush_r+0x44>
 80078f0:	6863      	ldr	r3, [r4, #4]
 80078f2:	1ad2      	subs	r2, r2, r3
 80078f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80078f6:	b10b      	cbz	r3, 80078fc <__sflush_r+0x44>
 80078f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80078fa:	1ad2      	subs	r2, r2, r3
 80078fc:	2300      	movs	r3, #0
 80078fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007900:	6a21      	ldr	r1, [r4, #32]
 8007902:	4628      	mov	r0, r5
 8007904:	47b0      	blx	r6
 8007906:	1c43      	adds	r3, r0, #1
 8007908:	89a3      	ldrh	r3, [r4, #12]
 800790a:	d106      	bne.n	800791a <__sflush_r+0x62>
 800790c:	6829      	ldr	r1, [r5, #0]
 800790e:	291d      	cmp	r1, #29
 8007910:	d82b      	bhi.n	800796a <__sflush_r+0xb2>
 8007912:	4a2a      	ldr	r2, [pc, #168]	@ (80079bc <__sflush_r+0x104>)
 8007914:	410a      	asrs	r2, r1
 8007916:	07d6      	lsls	r6, r2, #31
 8007918:	d427      	bmi.n	800796a <__sflush_r+0xb2>
 800791a:	2200      	movs	r2, #0
 800791c:	6062      	str	r2, [r4, #4]
 800791e:	04d9      	lsls	r1, r3, #19
 8007920:	6922      	ldr	r2, [r4, #16]
 8007922:	6022      	str	r2, [r4, #0]
 8007924:	d504      	bpl.n	8007930 <__sflush_r+0x78>
 8007926:	1c42      	adds	r2, r0, #1
 8007928:	d101      	bne.n	800792e <__sflush_r+0x76>
 800792a:	682b      	ldr	r3, [r5, #0]
 800792c:	b903      	cbnz	r3, 8007930 <__sflush_r+0x78>
 800792e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007930:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007932:	602f      	str	r7, [r5, #0]
 8007934:	b1b9      	cbz	r1, 8007966 <__sflush_r+0xae>
 8007936:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800793a:	4299      	cmp	r1, r3
 800793c:	d002      	beq.n	8007944 <__sflush_r+0x8c>
 800793e:	4628      	mov	r0, r5
 8007940:	f7ff fa9a 	bl	8006e78 <_free_r>
 8007944:	2300      	movs	r3, #0
 8007946:	6363      	str	r3, [r4, #52]	@ 0x34
 8007948:	e00d      	b.n	8007966 <__sflush_r+0xae>
 800794a:	2301      	movs	r3, #1
 800794c:	4628      	mov	r0, r5
 800794e:	47b0      	blx	r6
 8007950:	4602      	mov	r2, r0
 8007952:	1c50      	adds	r0, r2, #1
 8007954:	d1c9      	bne.n	80078ea <__sflush_r+0x32>
 8007956:	682b      	ldr	r3, [r5, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d0c6      	beq.n	80078ea <__sflush_r+0x32>
 800795c:	2b1d      	cmp	r3, #29
 800795e:	d001      	beq.n	8007964 <__sflush_r+0xac>
 8007960:	2b16      	cmp	r3, #22
 8007962:	d11e      	bne.n	80079a2 <__sflush_r+0xea>
 8007964:	602f      	str	r7, [r5, #0]
 8007966:	2000      	movs	r0, #0
 8007968:	e022      	b.n	80079b0 <__sflush_r+0xf8>
 800796a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800796e:	b21b      	sxth	r3, r3
 8007970:	e01b      	b.n	80079aa <__sflush_r+0xf2>
 8007972:	690f      	ldr	r7, [r1, #16]
 8007974:	2f00      	cmp	r7, #0
 8007976:	d0f6      	beq.n	8007966 <__sflush_r+0xae>
 8007978:	0793      	lsls	r3, r2, #30
 800797a:	680e      	ldr	r6, [r1, #0]
 800797c:	bf08      	it	eq
 800797e:	694b      	ldreq	r3, [r1, #20]
 8007980:	600f      	str	r7, [r1, #0]
 8007982:	bf18      	it	ne
 8007984:	2300      	movne	r3, #0
 8007986:	eba6 0807 	sub.w	r8, r6, r7
 800798a:	608b      	str	r3, [r1, #8]
 800798c:	f1b8 0f00 	cmp.w	r8, #0
 8007990:	dde9      	ble.n	8007966 <__sflush_r+0xae>
 8007992:	6a21      	ldr	r1, [r4, #32]
 8007994:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007996:	4643      	mov	r3, r8
 8007998:	463a      	mov	r2, r7
 800799a:	4628      	mov	r0, r5
 800799c:	47b0      	blx	r6
 800799e:	2800      	cmp	r0, #0
 80079a0:	dc08      	bgt.n	80079b4 <__sflush_r+0xfc>
 80079a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079aa:	81a3      	strh	r3, [r4, #12]
 80079ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80079b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079b4:	4407      	add	r7, r0
 80079b6:	eba8 0800 	sub.w	r8, r8, r0
 80079ba:	e7e7      	b.n	800798c <__sflush_r+0xd4>
 80079bc:	dfbffffe 	.word	0xdfbffffe

080079c0 <_fflush_r>:
 80079c0:	b538      	push	{r3, r4, r5, lr}
 80079c2:	690b      	ldr	r3, [r1, #16]
 80079c4:	4605      	mov	r5, r0
 80079c6:	460c      	mov	r4, r1
 80079c8:	b913      	cbnz	r3, 80079d0 <_fflush_r+0x10>
 80079ca:	2500      	movs	r5, #0
 80079cc:	4628      	mov	r0, r5
 80079ce:	bd38      	pop	{r3, r4, r5, pc}
 80079d0:	b118      	cbz	r0, 80079da <_fflush_r+0x1a>
 80079d2:	6a03      	ldr	r3, [r0, #32]
 80079d4:	b90b      	cbnz	r3, 80079da <_fflush_r+0x1a>
 80079d6:	f7ff f813 	bl	8006a00 <__sinit>
 80079da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d0f3      	beq.n	80079ca <_fflush_r+0xa>
 80079e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80079e4:	07d0      	lsls	r0, r2, #31
 80079e6:	d404      	bmi.n	80079f2 <_fflush_r+0x32>
 80079e8:	0599      	lsls	r1, r3, #22
 80079ea:	d402      	bmi.n	80079f2 <_fflush_r+0x32>
 80079ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079ee:	f7ff fa32 	bl	8006e56 <__retarget_lock_acquire_recursive>
 80079f2:	4628      	mov	r0, r5
 80079f4:	4621      	mov	r1, r4
 80079f6:	f7ff ff5f 	bl	80078b8 <__sflush_r>
 80079fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079fc:	07da      	lsls	r2, r3, #31
 80079fe:	4605      	mov	r5, r0
 8007a00:	d4e4      	bmi.n	80079cc <_fflush_r+0xc>
 8007a02:	89a3      	ldrh	r3, [r4, #12]
 8007a04:	059b      	lsls	r3, r3, #22
 8007a06:	d4e1      	bmi.n	80079cc <_fflush_r+0xc>
 8007a08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a0a:	f7ff fa25 	bl	8006e58 <__retarget_lock_release_recursive>
 8007a0e:	e7dd      	b.n	80079cc <_fflush_r+0xc>

08007a10 <__swhatbuf_r>:
 8007a10:	b570      	push	{r4, r5, r6, lr}
 8007a12:	460c      	mov	r4, r1
 8007a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a18:	2900      	cmp	r1, #0
 8007a1a:	b096      	sub	sp, #88	@ 0x58
 8007a1c:	4615      	mov	r5, r2
 8007a1e:	461e      	mov	r6, r3
 8007a20:	da0d      	bge.n	8007a3e <__swhatbuf_r+0x2e>
 8007a22:	89a3      	ldrh	r3, [r4, #12]
 8007a24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a28:	f04f 0100 	mov.w	r1, #0
 8007a2c:	bf14      	ite	ne
 8007a2e:	2340      	movne	r3, #64	@ 0x40
 8007a30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a34:	2000      	movs	r0, #0
 8007a36:	6031      	str	r1, [r6, #0]
 8007a38:	602b      	str	r3, [r5, #0]
 8007a3a:	b016      	add	sp, #88	@ 0x58
 8007a3c:	bd70      	pop	{r4, r5, r6, pc}
 8007a3e:	466a      	mov	r2, sp
 8007a40:	f000 f862 	bl	8007b08 <_fstat_r>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	dbec      	blt.n	8007a22 <__swhatbuf_r+0x12>
 8007a48:	9901      	ldr	r1, [sp, #4]
 8007a4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007a4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007a52:	4259      	negs	r1, r3
 8007a54:	4159      	adcs	r1, r3
 8007a56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a5a:	e7eb      	b.n	8007a34 <__swhatbuf_r+0x24>

08007a5c <__smakebuf_r>:
 8007a5c:	898b      	ldrh	r3, [r1, #12]
 8007a5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a60:	079d      	lsls	r5, r3, #30
 8007a62:	4606      	mov	r6, r0
 8007a64:	460c      	mov	r4, r1
 8007a66:	d507      	bpl.n	8007a78 <__smakebuf_r+0x1c>
 8007a68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a6c:	6023      	str	r3, [r4, #0]
 8007a6e:	6123      	str	r3, [r4, #16]
 8007a70:	2301      	movs	r3, #1
 8007a72:	6163      	str	r3, [r4, #20]
 8007a74:	b003      	add	sp, #12
 8007a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a78:	ab01      	add	r3, sp, #4
 8007a7a:	466a      	mov	r2, sp
 8007a7c:	f7ff ffc8 	bl	8007a10 <__swhatbuf_r>
 8007a80:	9f00      	ldr	r7, [sp, #0]
 8007a82:	4605      	mov	r5, r0
 8007a84:	4639      	mov	r1, r7
 8007a86:	4630      	mov	r0, r6
 8007a88:	f7ff fa62 	bl	8006f50 <_malloc_r>
 8007a8c:	b948      	cbnz	r0, 8007aa2 <__smakebuf_r+0x46>
 8007a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a92:	059a      	lsls	r2, r3, #22
 8007a94:	d4ee      	bmi.n	8007a74 <__smakebuf_r+0x18>
 8007a96:	f023 0303 	bic.w	r3, r3, #3
 8007a9a:	f043 0302 	orr.w	r3, r3, #2
 8007a9e:	81a3      	strh	r3, [r4, #12]
 8007aa0:	e7e2      	b.n	8007a68 <__smakebuf_r+0xc>
 8007aa2:	89a3      	ldrh	r3, [r4, #12]
 8007aa4:	6020      	str	r0, [r4, #0]
 8007aa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007aaa:	81a3      	strh	r3, [r4, #12]
 8007aac:	9b01      	ldr	r3, [sp, #4]
 8007aae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ab2:	b15b      	cbz	r3, 8007acc <__smakebuf_r+0x70>
 8007ab4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ab8:	4630      	mov	r0, r6
 8007aba:	f000 f837 	bl	8007b2c <_isatty_r>
 8007abe:	b128      	cbz	r0, 8007acc <__smakebuf_r+0x70>
 8007ac0:	89a3      	ldrh	r3, [r4, #12]
 8007ac2:	f023 0303 	bic.w	r3, r3, #3
 8007ac6:	f043 0301 	orr.w	r3, r3, #1
 8007aca:	81a3      	strh	r3, [r4, #12]
 8007acc:	89a3      	ldrh	r3, [r4, #12]
 8007ace:	431d      	orrs	r5, r3
 8007ad0:	81a5      	strh	r5, [r4, #12]
 8007ad2:	e7cf      	b.n	8007a74 <__smakebuf_r+0x18>

08007ad4 <memmove>:
 8007ad4:	4288      	cmp	r0, r1
 8007ad6:	b510      	push	{r4, lr}
 8007ad8:	eb01 0402 	add.w	r4, r1, r2
 8007adc:	d902      	bls.n	8007ae4 <memmove+0x10>
 8007ade:	4284      	cmp	r4, r0
 8007ae0:	4623      	mov	r3, r4
 8007ae2:	d807      	bhi.n	8007af4 <memmove+0x20>
 8007ae4:	1e43      	subs	r3, r0, #1
 8007ae6:	42a1      	cmp	r1, r4
 8007ae8:	d008      	beq.n	8007afc <memmove+0x28>
 8007aea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007aee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007af2:	e7f8      	b.n	8007ae6 <memmove+0x12>
 8007af4:	4402      	add	r2, r0
 8007af6:	4601      	mov	r1, r0
 8007af8:	428a      	cmp	r2, r1
 8007afa:	d100      	bne.n	8007afe <memmove+0x2a>
 8007afc:	bd10      	pop	{r4, pc}
 8007afe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b06:	e7f7      	b.n	8007af8 <memmove+0x24>

08007b08 <_fstat_r>:
 8007b08:	b538      	push	{r3, r4, r5, lr}
 8007b0a:	4d07      	ldr	r5, [pc, #28]	@ (8007b28 <_fstat_r+0x20>)
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	4604      	mov	r4, r0
 8007b10:	4608      	mov	r0, r1
 8007b12:	4611      	mov	r1, r2
 8007b14:	602b      	str	r3, [r5, #0]
 8007b16:	f7f9 f85c 	bl	8000bd2 <_fstat>
 8007b1a:	1c43      	adds	r3, r0, #1
 8007b1c:	d102      	bne.n	8007b24 <_fstat_r+0x1c>
 8007b1e:	682b      	ldr	r3, [r5, #0]
 8007b20:	b103      	cbz	r3, 8007b24 <_fstat_r+0x1c>
 8007b22:	6023      	str	r3, [r4, #0]
 8007b24:	bd38      	pop	{r3, r4, r5, pc}
 8007b26:	bf00      	nop
 8007b28:	20005784 	.word	0x20005784

08007b2c <_isatty_r>:
 8007b2c:	b538      	push	{r3, r4, r5, lr}
 8007b2e:	4d06      	ldr	r5, [pc, #24]	@ (8007b48 <_isatty_r+0x1c>)
 8007b30:	2300      	movs	r3, #0
 8007b32:	4604      	mov	r4, r0
 8007b34:	4608      	mov	r0, r1
 8007b36:	602b      	str	r3, [r5, #0]
 8007b38:	f7f9 f85b 	bl	8000bf2 <_isatty>
 8007b3c:	1c43      	adds	r3, r0, #1
 8007b3e:	d102      	bne.n	8007b46 <_isatty_r+0x1a>
 8007b40:	682b      	ldr	r3, [r5, #0]
 8007b42:	b103      	cbz	r3, 8007b46 <_isatty_r+0x1a>
 8007b44:	6023      	str	r3, [r4, #0]
 8007b46:	bd38      	pop	{r3, r4, r5, pc}
 8007b48:	20005784 	.word	0x20005784

08007b4c <_sbrk_r>:
 8007b4c:	b538      	push	{r3, r4, r5, lr}
 8007b4e:	4d06      	ldr	r5, [pc, #24]	@ (8007b68 <_sbrk_r+0x1c>)
 8007b50:	2300      	movs	r3, #0
 8007b52:	4604      	mov	r4, r0
 8007b54:	4608      	mov	r0, r1
 8007b56:	602b      	str	r3, [r5, #0]
 8007b58:	f7f9 f864 	bl	8000c24 <_sbrk>
 8007b5c:	1c43      	adds	r3, r0, #1
 8007b5e:	d102      	bne.n	8007b66 <_sbrk_r+0x1a>
 8007b60:	682b      	ldr	r3, [r5, #0]
 8007b62:	b103      	cbz	r3, 8007b66 <_sbrk_r+0x1a>
 8007b64:	6023      	str	r3, [r4, #0]
 8007b66:	bd38      	pop	{r3, r4, r5, pc}
 8007b68:	20005784 	.word	0x20005784

08007b6c <_realloc_r>:
 8007b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b70:	4680      	mov	r8, r0
 8007b72:	4615      	mov	r5, r2
 8007b74:	460c      	mov	r4, r1
 8007b76:	b921      	cbnz	r1, 8007b82 <_realloc_r+0x16>
 8007b78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b7c:	4611      	mov	r1, r2
 8007b7e:	f7ff b9e7 	b.w	8006f50 <_malloc_r>
 8007b82:	b92a      	cbnz	r2, 8007b90 <_realloc_r+0x24>
 8007b84:	f7ff f978 	bl	8006e78 <_free_r>
 8007b88:	2400      	movs	r4, #0
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b90:	f000 f81a 	bl	8007bc8 <_malloc_usable_size_r>
 8007b94:	4285      	cmp	r5, r0
 8007b96:	4606      	mov	r6, r0
 8007b98:	d802      	bhi.n	8007ba0 <_realloc_r+0x34>
 8007b9a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007b9e:	d8f4      	bhi.n	8007b8a <_realloc_r+0x1e>
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	4640      	mov	r0, r8
 8007ba4:	f7ff f9d4 	bl	8006f50 <_malloc_r>
 8007ba8:	4607      	mov	r7, r0
 8007baa:	2800      	cmp	r0, #0
 8007bac:	d0ec      	beq.n	8007b88 <_realloc_r+0x1c>
 8007bae:	42b5      	cmp	r5, r6
 8007bb0:	462a      	mov	r2, r5
 8007bb2:	4621      	mov	r1, r4
 8007bb4:	bf28      	it	cs
 8007bb6:	4632      	movcs	r2, r6
 8007bb8:	f7ff f94f 	bl	8006e5a <memcpy>
 8007bbc:	4621      	mov	r1, r4
 8007bbe:	4640      	mov	r0, r8
 8007bc0:	f7ff f95a 	bl	8006e78 <_free_r>
 8007bc4:	463c      	mov	r4, r7
 8007bc6:	e7e0      	b.n	8007b8a <_realloc_r+0x1e>

08007bc8 <_malloc_usable_size_r>:
 8007bc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bcc:	1f18      	subs	r0, r3, #4
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	bfbc      	itt	lt
 8007bd2:	580b      	ldrlt	r3, [r1, r0]
 8007bd4:	18c0      	addlt	r0, r0, r3
 8007bd6:	4770      	bx	lr

08007bd8 <_init>:
 8007bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bda:	bf00      	nop
 8007bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bde:	bc08      	pop	{r3}
 8007be0:	469e      	mov	lr, r3
 8007be2:	4770      	bx	lr

08007be4 <_fini>:
 8007be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be6:	bf00      	nop
 8007be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bea:	bc08      	pop	{r3}
 8007bec:	469e      	mov	lr, r3
 8007bee:	4770      	bx	lr
