
TP_Autoradio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2ec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  0800c47c  0800c47c  0000d47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca58  0800ca58  0000e074  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca58  0800ca58  0000da58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca60  0800ca60  0000e074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca60  0800ca60  0000da60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ca64  0800ca64  0000da64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800ca68  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006024  20000074  0800cadc  0000e074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006098  0800cadc  0000e098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000245f1  00000000  00000000  0000e0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054e8  00000000  00000000  00032695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e98  00000000  00000000  00037b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017b7  00000000  00000000  00039a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cf7d  00000000  00000000  0003b1cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000268dd  00000000  00000000  0006814c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106004  00000000  00000000  0008ea29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00194a2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008874  00000000  00000000  00194a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0019d2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c464 	.word	0x0800c464

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800c464 	.word	0x0800c464

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000566:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <MX_DMA_Init+0x48>)
 8000568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800056a:	4a0f      	ldr	r2, [pc, #60]	@ (80005a8 <MX_DMA_Init+0x48>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6493      	str	r3, [r2, #72]	@ 0x48
 8000572:	4b0d      	ldr	r3, [pc, #52]	@ (80005a8 <MX_DMA_Init+0x48>)
 8000574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2105      	movs	r1, #5
 8000582:	2010      	movs	r0, #16
 8000584:	f001 fdf4 	bl	8002170 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000588:	2010      	movs	r0, #16
 800058a:	f001 fe0d 	bl	80021a8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2105      	movs	r1, #5
 8000592:	2011      	movs	r0, #17
 8000594:	f001 fdec 	bl	8002170 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000598:	2011      	movs	r0, #17
 800059a:	f001 fe05 	bl	80021a8 <HAL_NVIC_EnableIRQ>

}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40021000 	.word	0x40021000

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000094 	.word	0x20000094
 80005dc:	20000134 	.word	0x20000134

080005e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <MX_FREERTOS_Init+0x30>)
 80005e8:	1d3c      	adds	r4, r7, #4
 80005ea:	461d      	mov	r5, r3
 80005ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f008 fcfc 	bl	8008ffa <osThreadCreate>
 8000602:	4603      	mov	r3, r0
 8000604:	4a03      	ldr	r2, [pc, #12]	@ (8000614 <MX_FREERTOS_Init+0x34>)
 8000606:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000608:	bf00      	nop
 800060a:	3720      	adds	r7, #32
 800060c:	46bd      	mov	sp, r7
 800060e:	bdb0      	pop	{r4, r5, r7, pc}
 8000610:	0800c488 	.word	0x0800c488
 8000614:	20000090 	.word	0x20000090

08000618 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000620:	2001      	movs	r0, #1
 8000622:	f008 fd36 	bl	8009092 <osDelay>
 8000626:	e7fb      	b.n	8000620 <StartDefaultTask+0x8>

08000628 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	@ 0x28
 800062c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063e:	4b35      	ldr	r3, [pc, #212]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	4a34      	ldr	r2, [pc, #208]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000644:	f043 0304 	orr.w	r3, r3, #4
 8000648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800064a:	4b32      	ldr	r3, [pc, #200]	@ (8000714 <MX_GPIO_Init+0xec>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	f003 0304 	and.w	r3, r3, #4
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000656:	4b2f      	ldr	r3, [pc, #188]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	4a2e      	ldr	r2, [pc, #184]	@ (8000714 <MX_GPIO_Init+0xec>)
 800065c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000662:	4b2c      	ldr	r3, [pc, #176]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b29      	ldr	r3, [pc, #164]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000672:	4a28      	ldr	r2, [pc, #160]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067a:	4b26      	ldr	r3, [pc, #152]	@ (8000714 <MX_GPIO_Init+0xec>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000686:	4b23      	ldr	r3, [pc, #140]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068a:	4a22      	ldr	r2, [pc, #136]	@ (8000714 <MX_GPIO_Init+0xec>)
 800068c:	f043 0302 	orr.w	r3, r3, #2
 8000690:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000692:	4b20      	ldr	r3, [pc, #128]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000696:	f003 0302 	and.w	r3, r3, #2
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VU_nRESET_Pin|LD2_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2121      	movs	r1, #33	@ 0x21
 80006a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a6:	f002 f9ad 	bl	8002a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2180      	movs	r1, #128	@ 0x80
 80006ae:	481a      	ldr	r0, [pc, #104]	@ (8000718 <MX_GPIO_Init+0xf0>)
 80006b0:	f002 f9a8 	bl	8002a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006ba:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4619      	mov	r1, r3
 80006ca:	4814      	ldr	r0, [pc, #80]	@ (800071c <MX_GPIO_Init+0xf4>)
 80006cc:	f001 fff0 	bl	80026b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VU_nRESET_Pin LD2_Pin */
  GPIO_InitStruct.Pin = VU_nRESET_Pin|LD2_Pin;
 80006d0:	2321      	movs	r3, #33	@ 0x21
 80006d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	4619      	mov	r1, r3
 80006e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ea:	f001 ffe1 	bl	80026b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VU_nCS_Pin */
  GPIO_InitStruct.Pin = VU_nCS_Pin;
 80006ee:	2380      	movs	r3, #128	@ 0x80
 80006f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2300      	movs	r3, #0
 80006fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VU_nCS_GPIO_Port, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	4804      	ldr	r0, [pc, #16]	@ (8000718 <MX_GPIO_Init+0xf0>)
 8000706:	f001 ffd3 	bl	80026b0 <HAL_GPIO_Init>

}
 800070a:	bf00      	nop
 800070c:	3728      	adds	r7, #40	@ 0x28
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000
 8000718:	48000400 	.word	0x48000400
 800071c:	48000800 	.word	0x48000800

08000720 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000724:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	@ (8000798 <MX_I2C2_Init+0x78>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 800072a:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <MX_I2C2_Init+0x74>)
 800072c:	4a1b      	ldr	r2, [pc, #108]	@ (800079c <MX_I2C2_Init+0x7c>)
 800072e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000738:	2201      	movs	r2, #1
 800073a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <MX_I2C2_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000742:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <MX_I2C2_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074e:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800075a:	480e      	ldr	r0, [pc, #56]	@ (8000794 <MX_I2C2_Init+0x74>)
 800075c:	f002 f984 	bl	8002a68 <HAL_I2C_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000766:	f000 fae9 	bl	8000d3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800076a:	2100      	movs	r1, #0
 800076c:	4809      	ldr	r0, [pc, #36]	@ (8000794 <MX_I2C2_Init+0x74>)
 800076e:	f002 ff07 	bl	8003580 <HAL_I2CEx_ConfigAnalogFilter>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000778:	f000 fae0 	bl	8000d3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800077c:	2100      	movs	r1, #0
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000780:	f002 ff49 	bl	8003616 <HAL_I2CEx_ConfigDigitalFilter>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800078a:	f000 fad7 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000334 	.word	0x20000334
 8000798:	40005800 	.word	0x40005800
 800079c:	10d19ce4 	.word	0x10d19ce4

080007a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b0ac      	sub	sp, #176	@ 0xb0
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	2288      	movs	r2, #136	@ 0x88
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f00a febf 	bl	800b544 <memset>
  if(i2cHandle->Instance==I2C2)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a21      	ldr	r2, [pc, #132]	@ (8000850 <HAL_I2C_MspInit+0xb0>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d13b      	bne.n	8000848 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80007d0:	2380      	movs	r3, #128	@ 0x80
 80007d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4618      	mov	r0, r3
 80007de:	f003 fdfd 	bl	80043dc <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80007e8:	f000 faa8 	bl	8000d3c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ec:	4b19      	ldr	r3, [pc, #100]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 80007ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f0:	4a18      	ldr	r2, [pc, #96]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 80007f2:	f043 0302 	orr.w	r3, r3, #2
 80007f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f8:	4b16      	ldr	r3, [pc, #88]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 80007fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fc:	f003 0302 	and.w	r3, r3, #2
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000804:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000808:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800080c:	2312      	movs	r3, #18
 800080e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800081e:	2304      	movs	r3, #4
 8000820:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000828:	4619      	mov	r1, r3
 800082a:	480b      	ldr	r0, [pc, #44]	@ (8000858 <HAL_I2C_MspInit+0xb8>)
 800082c:	f001 ff40 	bl	80026b0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000830:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 8000832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000834:	4a07      	ldr	r2, [pc, #28]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 8000836:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800083a:	6593      	str	r3, [r2, #88]	@ 0x58
 800083c:	4b05      	ldr	r3, [pc, #20]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 800083e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000840:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000848:	bf00      	nop
 800084a:	37b0      	adds	r7, #176	@ 0xb0
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40005800 	.word	0x40005800
 8000854:	40021000 	.word	0x40021000
 8000858:	48000400 	.word	0x48000400

0800085c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000860:	f3bf 8f4f 	dsb	sy
}
 8000864:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <__NVIC_SystemReset+0x24>)
 8000868:	68db      	ldr	r3, [r3, #12]
 800086a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800086e:	4904      	ldr	r1, [pc, #16]	@ (8000880 <__NVIC_SystemReset+0x24>)
 8000870:	4b04      	ldr	r3, [pc, #16]	@ (8000884 <__NVIC_SystemReset+0x28>)
 8000872:	4313      	orrs	r3, r2
 8000874:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000876:	f3bf 8f4f 	dsb	sy
}
 800087a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <__NVIC_SystemReset+0x20>
 8000880:	e000ed00 	.word	0xe000ed00
 8000884:	05fa0004 	.word	0x05fa0004

08000888 <__io_putchar>:
 * @brief Transmit a character over UART.
 * @param ch: Character to transmit.
 * @retval int: The transmitted character.
 */
int __io_putchar(int ch)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000890:	1d39      	adds	r1, r7, #4
 8000892:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000896:	2201      	movs	r2, #1
 8000898:	4803      	ldr	r0, [pc, #12]	@ (80008a8 <__io_putchar+0x20>)
 800089a:	f006 fff3 	bl	8007884 <HAL_UART_Transmit>

	return ch;
 800089e:	687b      	ldr	r3, [r7, #4]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000be4 	.word	0x20000be4

080008ac <Error_Handler_xTaskCreate>:
/**
 * @brief  Gestion d'erreurs de création de tâche.
 * @param	BaseType_t	Retour de xTaskCreate.
 */
void Error_Handler_xTaskCreate(BaseType_t r)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	/* Vérification si la tâche a été créée avec succès */
	if (pdPASS == r) {
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d010      	beq.n	80008dc <Error_Handler_xTaskCreate+0x30>
		/* Si la tâche est créée avec succès, démarrer le scheduler */
#if (LOGS)
		printf("Tâche crée avec succès\r\n");
#endif
	} else if (errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY == r) {
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80008c0:	d105      	bne.n	80008ce <Error_Handler_xTaskCreate+0x22>
		printf("Erreur: Mémoire insuffisante\r\n");
 80008c2:	4808      	ldr	r0, [pc, #32]	@ (80008e4 <Error_Handler_xTaskCreate+0x38>)
 80008c4:	f00a fd2a 	bl	800b31c <puts>
		Error_Handler();
 80008c8:	f000 fa38 	bl	8000d3c <Error_Handler>
		/* Cas improbable : code d'erreur non prévu pour xTaskCreate */
		printf("Erreur inconnue lors de la création de la tâche\r\n");
		Error_Handler();  	// Gestion d'erreur générique
		NVIC_SystemReset(); // Réinitialiser le microcontrôleur
	}
}
 80008cc:	e006      	b.n	80008dc <Error_Handler_xTaskCreate+0x30>
		printf("Erreur inconnue lors de la création de la tâche\r\n");
 80008ce:	4806      	ldr	r0, [pc, #24]	@ (80008e8 <Error_Handler_xTaskCreate+0x3c>)
 80008d0:	f00a fd24 	bl	800b31c <puts>
		Error_Handler();  	// Gestion d'erreur générique
 80008d4:	f000 fa32 	bl	8000d3c <Error_Handler>
		NVIC_SystemReset(); // Réinitialiser le microcontrôleur
 80008d8:	f7ff ffc0 	bl	800085c <__NVIC_SystemReset>
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	0800c4a4 	.word	0x0800c4a4
 80008e8:	0800c4c4 	.word	0x0800c4c4

080008ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a04      	ldr	r2, [pc, #16]	@ (800090c <HAL_UART_RxCpltCallback+0x20>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d101      	bne.n	8000902 <HAL_UART_RxCpltCallback+0x16>
	{
		shell_uart_receive_irq_cb();	// Function giving the semaphore!
 80008fe:	f001 f965 	bl	8001bcc <shell_uart_receive_irq_cb>
	}
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40004400 	.word	0x40004400

08000910 <task_LED>:

//////////////////////////////////////////////////////////////////////
// TASKS
////////////////////////////////////////////////////////////////////

void task_LED (void * pvParameters) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	int duree = (int) pvParameters;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	60fb      	str	r3, [r7, #12]
#if (LOGS)
	printf("Task %s created\r\n", pcTaskGetName(xTaskGetCurrentTaskHandle()));
#endif
	for (;;)
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800091c:	2120      	movs	r1, #32
 800091e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000922:	f002 f887 	bl	8002a34 <HAL_GPIO_TogglePin>
		vTaskDelay( duree / portTICK_PERIOD_MS );  // Délai de duree en ms
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	4618      	mov	r0, r3
 800092a:	f009 f90f 	bl	8009b4c <vTaskDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800092e:	bf00      	nop
 8000930:	e7f4      	b.n	800091c <task_LED+0xc>
	...

08000934 <task_shell>:
	}
}

void task_shell(void * unused)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
#if (LOGS)
	printf("Task %s created\r\n", pcTaskGetName(xTaskGetCurrentTaskHandle()));
#endif

	shell_init();	// Shell initialization
 800093c:	f001 f9d2 	bl	8001ce4 <shell_init>

	// Creation of all commands
	shell_add('f', fonction, "Une fonction inutile");
 8000940:	4a0f      	ldr	r2, [pc, #60]	@ (8000980 <task_shell+0x4c>)
 8000942:	4910      	ldr	r1, [pc, #64]	@ (8000984 <task_shell+0x50>)
 8000944:	2066      	movs	r0, #102	@ 0x66
 8000946:	f001 fa05 	bl	8001d54 <shell_add>
	shell_add('a', addition, "Effectue une somme");
 800094a:	4a0f      	ldr	r2, [pc, #60]	@ (8000988 <task_shell+0x54>)
 800094c:	490f      	ldr	r1, [pc, #60]	@ (800098c <task_shell+0x58>)
 800094e:	2061      	movs	r0, #97	@ 0x61
 8000950:	f001 fa00 	bl	8001d54 <shell_add>
	shell_add('c', calcul, "Opération entre 2 nombres");
 8000954:	4a0e      	ldr	r2, [pc, #56]	@ (8000990 <task_shell+0x5c>)
 8000956:	490f      	ldr	r1, [pc, #60]	@ (8000994 <task_shell+0x60>)
 8000958:	2063      	movs	r0, #99	@ 0x63
 800095a:	f001 f9fb 	bl	8001d54 <shell_add>
	shell_add('t', GPIOExpander_toggle_LED, "Change l'état des LED avec les id");
 800095e:	4a0e      	ldr	r2, [pc, #56]	@ (8000998 <task_shell+0x64>)
 8000960:	490e      	ldr	r1, [pc, #56]	@ (800099c <task_shell+0x68>)
 8000962:	2074      	movs	r0, #116	@ 0x74
 8000964:	f001 f9f6 	bl	8001d54 <shell_add>
	shell_add('s', GPIOExpander_set_LED, "Allume une LED avec son id");
 8000968:	4a0d      	ldr	r2, [pc, #52]	@ (80009a0 <task_shell+0x6c>)
 800096a:	490e      	ldr	r1, [pc, #56]	@ (80009a4 <task_shell+0x70>)
 800096c:	2073      	movs	r0, #115	@ 0x73
 800096e:	f001 f9f1 	bl	8001d54 <shell_add>

	shell_run();	// boucle infinie
 8000972:	f001 fa9b 	bl	8001eac <shell_run>
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	0800c4f8 	.word	0x0800c4f8
 8000984:	080019a5 	.word	0x080019a5
 8000988:	0800c510 	.word	0x0800c510
 800098c:	08001ae9 	.word	0x08001ae9
 8000990:	0800c524 	.word	0x0800c524
 8000994:	080019ed 	.word	0x080019ed
 8000998:	0800c540 	.word	0x0800c540
 800099c:	08001b55 	.word	0x08001b55
 80009a0:	0800c564 	.word	0x0800c564
 80009a4:	08001b9d 	.word	0x08001b9d

080009a8 <test_chenillard>:

void test_chenillard(int delay)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	int i = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]

	for (;;)
	{
		MCP23S17_Set_LEDs(~(1 << i%8 | ((1 << i%8) << 8)));
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	2201      	movs	r2, #1
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	b21a      	sxth	r2, r3
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	f003 0307 	and.w	r3, r3, #7
 80009c8:	2101      	movs	r1, #1
 80009ca:	fa01 f303 	lsl.w	r3, r1, r3
 80009ce:	021b      	lsls	r3, r3, #8
 80009d0:	b21b      	sxth	r3, r3
 80009d2:	4313      	orrs	r3, r2
 80009d4:	b21b      	sxth	r3, r3
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	43db      	mvns	r3, r3
 80009da:	b29b      	uxth	r3, r3
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 ff05 	bl	80017ec <MCP23S17_Set_LEDs>
		i++;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	3301      	adds	r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
		vTaskDelay( delay / portTICK_PERIOD_MS );  // Délai de duree en Dms
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f009 f8ae 	bl	8009b4c <vTaskDelay>
		MCP23S17_Set_LEDs(~(1 << i%8 | ((1 << i%8) << 8)));
 80009f0:	bf00      	nop
 80009f2:	e7df      	b.n	80009b4 <test_chenillard+0xc>

080009f4 <task_GPIO_expander>:
	}
}

void task_GPIO_expander (void * unused) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	MCP23S17_level_L(30);
	MCP23S17_level_R(50);
	 */

	// Simple test of the array of leds with an animation
	test_chenillard(100);
 80009fc:	2064      	movs	r0, #100	@ 0x64
 80009fe:	f7ff ffd3 	bl	80009a8 <test_chenillard>

	for (;;)
	{
		vTaskDelay(1);  // Délai de duree en ms
 8000a02:	2001      	movs	r0, #1
 8000a04:	f009 f8a2 	bl	8009b4c <vTaskDelay>
 8000a08:	e7fb      	b.n	8000a02 <task_GPIO_expander+0xe>

08000a0a <GenerateTriangleWave>:
 * @param buffer: Pointer to the buffer to hold the waveform.
 * @param length: Number of samples in the waveform.
 * @param amplitude: Peak amplitude of the waveform.
 */
void GenerateTriangleWave(uint16_t* buffer, uint16_t length, uint16_t amplitude)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	b085      	sub	sp, #20
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
 8000a12:	460b      	mov	r3, r1
 8000a14:	807b      	strh	r3, [r7, #2]
 8000a16:	4613      	mov	r3, r2
 8000a18:	803b      	strh	r3, [r7, #0]
	uint16_t step = (2 * amplitude) / length;
 8000a1a:	883b      	ldrh	r3, [r7, #0]
 8000a1c:	005a      	lsls	r2, r3, #1
 8000a1e:	887b      	ldrh	r3, [r7, #2]
 8000a20:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a24:	813b      	strh	r3, [r7, #8]
	uint16_t value = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	81fb      	strh	r3, [r7, #14]
	int8_t direction = 1;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	737b      	strb	r3, [r7, #13]

	for (uint16_t i = 0; i < length; i++) {
 8000a2e:	2300      	movs	r3, #0
 8000a30:	817b      	strh	r3, [r7, #10]
 8000a32:	e022      	b.n	8000a7a <GenerateTriangleWave+0x70>
		buffer[i] = value;
 8000a34:	897b      	ldrh	r3, [r7, #10]
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	89fa      	ldrh	r2, [r7, #14]
 8000a3e:	801a      	strh	r2, [r3, #0]
		value += step * direction;
 8000a40:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	893a      	ldrh	r2, [r7, #8]
 8000a48:	fb12 f303 	smulbb	r3, r2, r3
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	89fb      	ldrh	r3, [r7, #14]
 8000a50:	4413      	add	r3, r2
 8000a52:	81fb      	strh	r3, [r7, #14]

		if (value >= amplitude) {
 8000a54:	89fa      	ldrh	r2, [r7, #14]
 8000a56:	883b      	ldrh	r3, [r7, #0]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d304      	bcc.n	8000a66 <GenerateTriangleWave+0x5c>
			value = amplitude;
 8000a5c:	883b      	ldrh	r3, [r7, #0]
 8000a5e:	81fb      	strh	r3, [r7, #14]
			direction = -1; // Start decreasing
 8000a60:	23ff      	movs	r3, #255	@ 0xff
 8000a62:	737b      	strb	r3, [r7, #13]
 8000a64:	e006      	b.n	8000a74 <GenerateTriangleWave+0x6a>
		} else if (value <= 0) {
 8000a66:	89fb      	ldrh	r3, [r7, #14]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d103      	bne.n	8000a74 <GenerateTriangleWave+0x6a>
			value = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	81fb      	strh	r3, [r7, #14]
			direction = 1; // Start increasing
 8000a70:	2301      	movs	r3, #1
 8000a72:	737b      	strb	r3, [r7, #13]
	for (uint16_t i = 0; i < length; i++) {
 8000a74:	897b      	ldrh	r3, [r7, #10]
 8000a76:	3301      	adds	r3, #1
 8000a78:	817b      	strh	r3, [r7, #10]
 8000a7a:	897a      	ldrh	r2, [r7, #10]
 8000a7c:	887b      	ldrh	r3, [r7, #2]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d3d8      	bcc.n	8000a34 <GenerateTriangleWave+0x2a>
		}
	}
}
 8000a82:	bf00      	nop
 8000a84:	bf00      	nop
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <HAL_SAI_ErrorCallback>:
/**
 * @brief SAI error callback.
 * @param hsai: Pointer to the SAI handle.
 */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
    printf("Error: SAI encountered an error\r\n");
 8000a98:	4811      	ldr	r0, [pc, #68]	@ (8000ae0 <HAL_SAI_ErrorCallback+0x50>)
 8000a9a:	f00a fc3f 	bl	800b31c <puts>

    // Attempt to restart DMA transmission and reception
    if (HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)triangleWave, TRIANGLE_SAMPLES) != HAL_OK) {
 8000a9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000aa2:	4910      	ldr	r1, [pc, #64]	@ (8000ae4 <HAL_SAI_ErrorCallback+0x54>)
 8000aa4:	4810      	ldr	r0, [pc, #64]	@ (8000ae8 <HAL_SAI_ErrorCallback+0x58>)
 8000aa6:	f005 f9bd 	bl	8005e24 <HAL_SAI_Transmit_DMA>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d004      	beq.n	8000aba <HAL_SAI_ErrorCallback+0x2a>
        printf("Error: Failed to restart SAI DMA transmission\r\n");
 8000ab0:	480e      	ldr	r0, [pc, #56]	@ (8000aec <HAL_SAI_ErrorCallback+0x5c>)
 8000ab2:	f00a fc33 	bl	800b31c <puts>
        Error_Handler();
 8000ab6:	f000 f941 	bl	8000d3c <Error_Handler>
    }

    if (HAL_SAI_Receive_DMA(&hsai_BlockA2, rxSAI, SAI_BUFFER_LENGTH) != HAL_OK) {
 8000aba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000abe:	490c      	ldr	r1, [pc, #48]	@ (8000af0 <HAL_SAI_ErrorCallback+0x60>)
 8000ac0:	4809      	ldr	r0, [pc, #36]	@ (8000ae8 <HAL_SAI_ErrorCallback+0x58>)
 8000ac2:	f005 fa5f 	bl	8005f84 <HAL_SAI_Receive_DMA>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d004      	beq.n	8000ad6 <HAL_SAI_ErrorCallback+0x46>
        printf("Error: Failed to restart SAI DMA reception\r\n");
 8000acc:	4809      	ldr	r0, [pc, #36]	@ (8000af4 <HAL_SAI_ErrorCallback+0x64>)
 8000ace:	f00a fc25 	bl	800b31c <puts>
        Error_Handler();
 8000ad2:	f000 f933 	bl	8000d3c <Error_Handler>
    }
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	0800c580 	.word	0x0800c580
 8000ae4:	20000794 	.word	0x20000794
 8000ae8:	20000994 	.word	0x20000994
 8000aec:	0800c5a4 	.word	0x0800c5a4
 8000af0:	20000394 	.word	0x20000394
 8000af4:	0800c5d4 	.word	0x0800c5d4

08000af8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000afe:	f001 fa3f 	bl	8001f80 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b02:	f000 f88d 	bl	8000c20 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000b06:	f000 f8dc 	bl	8000cc2 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b0a:	f7ff fd8d 	bl	8000628 <MX_GPIO_Init>
	MX_DMA_Init();
 8000b0e:	f7ff fd27 	bl	8000560 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000b12:	f000 fcb9 	bl	8001488 <MX_USART2_UART_Init>
	MX_I2C2_Init();
 8000b16:	f7ff fe03 	bl	8000720 <MX_I2C2_Init>
	MX_SPI3_Init();
 8000b1a:	f000 fa59 	bl	8000fd0 <MX_SPI3_Init>
	MX_SAI2_Init();
 8000b1e:	f000 f913 	bl	8000d48 <MX_SAI2_Init>
	/* USER CODE BEGIN 2 */
	// Initialize GPIO expander
	MCP23S17_Init();
 8000b22:	f000 fddb 	bl	80016dc <MCP23S17_Init>

	__HAL_SAI_ENABLE(&hsai_BlockA2);
 8000b26:	4b30      	ldr	r3, [pc, #192]	@ (8000be8 <main+0xf0>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4b2e      	ldr	r3, [pc, #184]	@ (8000be8 <main+0xf0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000b34:	601a      	str	r2, [r3, #0]

	SGTL5000_Init();
 8000b36:	f000 fee7 	bl	8001908 <SGTL5000_Init>

	printf("Triangle Wave generation\r\n");
 8000b3a:	482c      	ldr	r0, [pc, #176]	@ (8000bec <main+0xf4>)
 8000b3c:	f00a fbee 	bl	800b31c <puts>
	// Generate the triangular waveform
	GenerateTriangleWave(triangleWave, TRIANGLE_SAMPLES, 0x7FFF); // 16-bit amplitude (0x7FFF)
 8000b40:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000b44:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b48:	4829      	ldr	r0, [pc, #164]	@ (8000bf0 <main+0xf8>)
 8000b4a:	f7ff ff5e 	bl	8000a0a <GenerateTriangleWave>

	// Start SAI DMA transmission
	if (HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)triangleWave, TRIANGLE_SAMPLES) != HAL_OK) {
 8000b4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b52:	4927      	ldr	r1, [pc, #156]	@ (8000bf0 <main+0xf8>)
 8000b54:	4824      	ldr	r0, [pc, #144]	@ (8000be8 <main+0xf0>)
 8000b56:	f005 f965 	bl	8005e24 <HAL_SAI_Transmit_DMA>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d004      	beq.n	8000b6a <main+0x72>
		printf("Error: Failed to start SAI DMA transmission\r\n");
 8000b60:	4824      	ldr	r0, [pc, #144]	@ (8000bf4 <main+0xfc>)
 8000b62:	f00a fbdb 	bl	800b31c <puts>
		Error_Handler();
 8000b66:	f000 f8e9 	bl	8000d3c <Error_Handler>
		Error_Handler();
	}
	*/

	// Test printf
	printf("******* TP Autoradio *******\r\n");
 8000b6a:	4823      	ldr	r0, [pc, #140]	@ (8000bf8 <main+0x100>)
 8000b6c:	f00a fbd6 	bl	800b31c <puts>

	// Create the task, storing the handle.
	Error_Handler_xTaskCreate(
 8000b70:	4b22      	ldr	r3, [pc, #136]	@ (8000bfc <main+0x104>)
 8000b72:	9301      	str	r3, [sp, #4]
 8000b74:	2302      	movs	r3, #2
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000b7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b80:	491f      	ldr	r1, [pc, #124]	@ (8000c00 <main+0x108>)
 8000b82:	4820      	ldr	r0, [pc, #128]	@ (8000c04 <main+0x10c>)
 8000b84:	f008 fe92 	bl	80098ac <xTaskCreate>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fe8e 	bl	80008ac <Error_Handler_xTaskCreate>
					(void *) 500, // 500 ms
					TASK_MCP23S17_PRIORITY, // Priority at which the task is created.
					&h_task_GPIOExpander)); // Used to pass out the created task's handle.

	// Turn on LED2 (Green)
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b90:	2120      	movs	r1, #32
 8000b92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b96:	f001 ff4d 	bl	8002a34 <HAL_GPIO_TogglePin>

	// Create the task, storing the handle.
	Error_Handler_xTaskCreate(
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c08 <main+0x110>)
 8000b9c:	9301      	str	r3, [sp, #4]
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	23c8      	movs	r3, #200	@ 0xc8
 8000ba4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ba8:	4918      	ldr	r1, [pc, #96]	@ (8000c0c <main+0x114>)
 8000baa:	4819      	ldr	r0, [pc, #100]	@ (8000c10 <main+0x118>)
 8000bac:	f008 fe7e 	bl	80098ac <xTaskCreate>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fe7a 	bl	80008ac <Error_Handler_xTaskCreate>
					STACK_DEPTH, // Stack size in words, not bytes.
					(void *) DELAY_LED_TOGGLE, // Parameter passed into the task.
					1,// Priority at which the task is created.
					&h_task_LED)); // Used to pass out the created task's handle.
	// Shell task
	Error_Handler_xTaskCreate(
 8000bb8:	4b16      	ldr	r3, [pc, #88]	@ (8000c14 <main+0x11c>)
 8000bba:	9301      	str	r3, [sp, #4]
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	9300      	str	r3, [sp, #0]
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bc6:	4914      	ldr	r1, [pc, #80]	@ (8000c18 <main+0x120>)
 8000bc8:	4814      	ldr	r0, [pc, #80]	@ (8000c1c <main+0x124>)
 8000bca:	f008 fe6f 	bl	80098ac <xTaskCreate>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fe6b 	bl	80008ac <Error_Handler_xTaskCreate>
					NULL,
					TASK_SHELL_PRIORITY,
					&h_task_shell));

	// OS Start
	vTaskStartScheduler();
 8000bd6:	f008 ffef 	bl	8009bb8 <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 8000bda:	f7ff fd01 	bl	80005e0 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8000bde:	f008 fa05 	bl	8008fec <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000be2:	bf00      	nop
 8000be4:	e7fd      	b.n	8000be2 <main+0xea>
 8000be6:	bf00      	nop
 8000be8:	20000994 	.word	0x20000994
 8000bec:	0800c600 	.word	0x0800c600
 8000bf0:	20000794 	.word	0x20000794
 8000bf4:	0800c61c 	.word	0x0800c61c
 8000bf8:	0800c64c 	.word	0x0800c64c
 8000bfc:	20000390 	.word	0x20000390
 8000c00:	0800c66c 	.word	0x0800c66c
 8000c04:	080009f5 	.word	0x080009f5
 8000c08:	20000388 	.word	0x20000388
 8000c0c:	0800c67c 	.word	0x0800c67c
 8000c10:	08000911 	.word	0x08000911
 8000c14:	2000038c 	.word	0x2000038c
 8000c18:	0800c684 	.word	0x0800c684
 8000c1c:	08000935 	.word	0x08000935

08000c20 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b096      	sub	sp, #88	@ 0x58
 8000c24:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	2244      	movs	r2, #68	@ 0x44
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f00a fc88 	bl	800b544 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c34:	463b      	mov	r3, r7
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
 8000c40:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c42:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c46:	f002 fd41 	bl	80036cc <HAL_PWREx_ControlVoltageScaling>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000c50:	f000 f874 	bl	8000d3c <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c54:	2302      	movs	r3, #2
 8000c56:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c5c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c5e:	2310      	movs	r3, #16
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c62:	2302      	movs	r3, #2
 8000c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c66:	2302      	movs	r3, #2
 8000c68:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000c6e:	230a      	movs	r3, #10
 8000c70:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c72:	2307      	movs	r3, #7
 8000c74:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c76:	2302      	movs	r3, #2
 8000c78:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4618      	mov	r0, r3
 8000c84:	f002 fd78 	bl	8003778 <HAL_RCC_OscConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SystemClock_Config+0x72>
	{
		Error_Handler();
 8000c8e:	f000 f855 	bl	8000d3c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c92:	230f      	movs	r3, #15
 8000c94:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c96:	2303      	movs	r3, #3
 8000c98:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	2104      	movs	r1, #4
 8000caa:	4618      	mov	r0, r3
 8000cac:	f003 f940 	bl	8003f30 <HAL_RCC_ClockConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000cb6:	f000 f841 	bl	8000d3c <Error_Handler>
	}
}
 8000cba:	bf00      	nop
 8000cbc:	3758      	adds	r7, #88	@ 0x58
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b0a2      	sub	sp, #136	@ 0x88
 8000cc6:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc8:	463b      	mov	r3, r7
 8000cca:	2288      	movs	r2, #136	@ 0x88
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f00a fc38 	bl	800b544 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000cd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cd8:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	66bb      	str	r3, [r7, #104]	@ 0x68
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 8000ce6:	230d      	movs	r3, #13
 8000ce8:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8000cea:	2311      	movs	r3, #17
 8000cec:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000cf6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cfa:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f003 fb6c 	bl	80043dc <HAL_RCCEx_PeriphCLKConfig>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <PeriphCommonClock_Config+0x4c>
	{
		Error_Handler();
 8000d0a:	f000 f817 	bl	8000d3c <Error_Handler>
	}
}
 8000d0e:	bf00      	nop
 8000d10:	3788      	adds	r7, #136	@ 0x88
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a04      	ldr	r2, [pc, #16]	@ (8000d38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d101      	bne.n	8000d2e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000d2a:	f001 f949 	bl	8001fc0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40001000 	.word	0x40001000

08000d3c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i
}
 8000d42:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <Error_Handler+0x8>

08000d48 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8000d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000df8 <MX_SAI2_Init+0xb0>)
 8000d4e:	4a2b      	ldr	r2, [pc, #172]	@ (8000dfc <MX_SAI2_Init+0xb4>)
 8000d50:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000d52:	4b29      	ldr	r3, [pc, #164]	@ (8000df8 <MX_SAI2_Init+0xb0>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000d58:	4b27      	ldr	r3, [pc, #156]	@ (8000df8 <MX_SAI2_Init+0xb0>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d5e:	4b26      	ldr	r3, [pc, #152]	@ (8000df8 <MX_SAI2_Init+0xb0>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d64:	4b24      	ldr	r3, [pc, #144]	@ (8000df8 <MX_SAI2_Init+0xb0>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d6a:	4b23      	ldr	r3, [pc, #140]	@ (8000df8 <MX_SAI2_Init+0xb0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000d70:	4b21      	ldr	r3, [pc, #132]	@ (8000df8 <MX_SAI2_Init+0xb0>)
 8000d72:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000d76:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d78:	4b1f      	ldr	r3, [pc, #124]	@ (8000df8 <MX_SAI2_Init+0xb0>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000df8 <MX_SAI2_Init+0xb0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d84:	4b1c      	ldr	r3, [pc, #112]	@ (8000df8 <MX_SAI2_Init+0xb0>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000df8 <MX_SAI2_Init+0xb0>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000d90:	2302      	movs	r3, #2
 8000d92:	2200      	movs	r2, #0
 8000d94:	2100      	movs	r1, #0
 8000d96:	4818      	ldr	r0, [pc, #96]	@ (8000df8 <MX_SAI2_Init+0xb0>)
 8000d98:	f004 fe3a 	bl	8005a10 <HAL_SAI_InitProtocol>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
 8000da2:	f7ff ffcb 	bl	8000d3c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000da6:	4b16      	ldr	r3, [pc, #88]	@ (8000e00 <MX_SAI2_Init+0xb8>)
 8000da8:	4a16      	ldr	r2, [pc, #88]	@ (8000e04 <MX_SAI2_Init+0xbc>)
 8000daa:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000dac:	4b14      	ldr	r3, [pc, #80]	@ (8000e00 <MX_SAI2_Init+0xb8>)
 8000dae:	2203      	movs	r2, #3
 8000db0:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000db2:	4b13      	ldr	r3, [pc, #76]	@ (8000e00 <MX_SAI2_Init+0xb8>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000db8:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <MX_SAI2_Init+0xb8>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000dbe:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <MX_SAI2_Init+0xb8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <MX_SAI2_Init+0xb8>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000dca:	4b0d      	ldr	r3, [pc, #52]	@ (8000e00 <MX_SAI2_Init+0xb8>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e00 <MX_SAI2_Init+0xb8>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e00 <MX_SAI2_Init+0xb8>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000ddc:	2302      	movs	r3, #2
 8000dde:	2200      	movs	r2, #0
 8000de0:	2100      	movs	r1, #0
 8000de2:	4807      	ldr	r0, [pc, #28]	@ (8000e00 <MX_SAI2_Init+0xb8>)
 8000de4:	f004 fe14 	bl	8005a10 <HAL_SAI_InitProtocol>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 8000dee:	f7ff ffa5 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000994 	.word	0x20000994
 8000dfc:	40015804 	.word	0x40015804
 8000e00:	20000a18 	.word	0x20000a18
 8000e04:	40015824 	.word	0x40015824

08000e08 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	@ 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a64      	ldr	r2, [pc, #400]	@ (8000fa8 <HAL_SAI_MspInit+0x1a0>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d15e      	bne.n	8000ed8 <HAL_SAI_MspInit+0xd0>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8000e1a:	4b64      	ldr	r3, [pc, #400]	@ (8000fac <HAL_SAI_MspInit+0x1a4>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d113      	bne.n	8000e4a <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000e22:	4b63      	ldr	r3, [pc, #396]	@ (8000fb0 <HAL_SAI_MspInit+0x1a8>)
 8000e24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e26:	4a62      	ldr	r2, [pc, #392]	@ (8000fb0 <HAL_SAI_MspInit+0x1a8>)
 8000e28:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e2e:	4b60      	ldr	r3, [pc, #384]	@ (8000fb0 <HAL_SAI_MspInit+0x1a8>)
 8000e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2105      	movs	r1, #5
 8000e3e:	204b      	movs	r0, #75	@ 0x4b
 8000e40:	f001 f996 	bl	8002170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000e44:	204b      	movs	r0, #75	@ 0x4b
 8000e46:	f001 f9af 	bl	80021a8 <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 8000e4a:	4b58      	ldr	r3, [pc, #352]	@ (8000fac <HAL_SAI_MspInit+0x1a4>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	4a56      	ldr	r2, [pc, #344]	@ (8000fac <HAL_SAI_MspInit+0x1a4>)
 8000e52:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e54:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000e66:	230d      	movs	r3, #13
 8000e68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4850      	ldr	r0, [pc, #320]	@ (8000fb4 <HAL_SAI_MspInit+0x1ac>)
 8000e72:	f001 fc1d 	bl	80026b0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000e76:	4b50      	ldr	r3, [pc, #320]	@ (8000fb8 <HAL_SAI_MspInit+0x1b0>)
 8000e78:	4a50      	ldr	r2, [pc, #320]	@ (8000fbc <HAL_SAI_MspInit+0x1b4>)
 8000e7a:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000e7c:	4b4e      	ldr	r3, [pc, #312]	@ (8000fb8 <HAL_SAI_MspInit+0x1b0>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e82:	4b4d      	ldr	r3, [pc, #308]	@ (8000fb8 <HAL_SAI_MspInit+0x1b0>)
 8000e84:	2210      	movs	r2, #16
 8000e86:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e88:	4b4b      	ldr	r3, [pc, #300]	@ (8000fb8 <HAL_SAI_MspInit+0x1b0>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000e8e:	4b4a      	ldr	r3, [pc, #296]	@ (8000fb8 <HAL_SAI_MspInit+0x1b0>)
 8000e90:	2280      	movs	r2, #128	@ 0x80
 8000e92:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e94:	4b48      	ldr	r3, [pc, #288]	@ (8000fb8 <HAL_SAI_MspInit+0x1b0>)
 8000e96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e9a:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e9c:	4b46      	ldr	r3, [pc, #280]	@ (8000fb8 <HAL_SAI_MspInit+0x1b0>)
 8000e9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ea2:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000ea4:	4b44      	ldr	r3, [pc, #272]	@ (8000fb8 <HAL_SAI_MspInit+0x1b0>)
 8000ea6:	2220      	movs	r2, #32
 8000ea8:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8000eaa:	4b43      	ldr	r3, [pc, #268]	@ (8000fb8 <HAL_SAI_MspInit+0x1b0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000eb0:	4841      	ldr	r0, [pc, #260]	@ (8000fb8 <HAL_SAI_MspInit+0x1b0>)
 8000eb2:	f001 f987 	bl	80021c4 <HAL_DMA_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8000ebc:	f7ff ff3e 	bl	8000d3c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a3d      	ldr	r2, [pc, #244]	@ (8000fb8 <HAL_SAI_MspInit+0x1b0>)
 8000ec4:	671a      	str	r2, [r3, #112]	@ 0x70
 8000ec6:	4a3c      	ldr	r2, [pc, #240]	@ (8000fb8 <HAL_SAI_MspInit+0x1b0>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a3a      	ldr	r2, [pc, #232]	@ (8000fb8 <HAL_SAI_MspInit+0x1b0>)
 8000ed0:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000ed2:	4a39      	ldr	r2, [pc, #228]	@ (8000fb8 <HAL_SAI_MspInit+0x1b0>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a38      	ldr	r2, [pc, #224]	@ (8000fc0 <HAL_SAI_MspInit+0x1b8>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d15e      	bne.n	8000fa0 <HAL_SAI_MspInit+0x198>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8000ee2:	4b32      	ldr	r3, [pc, #200]	@ (8000fac <HAL_SAI_MspInit+0x1a4>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d113      	bne.n	8000f12 <HAL_SAI_MspInit+0x10a>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000eea:	4b31      	ldr	r3, [pc, #196]	@ (8000fb0 <HAL_SAI_MspInit+0x1a8>)
 8000eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eee:	4a30      	ldr	r2, [pc, #192]	@ (8000fb0 <HAL_SAI_MspInit+0x1a8>)
 8000ef0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ef4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ef6:	4b2e      	ldr	r3, [pc, #184]	@ (8000fb0 <HAL_SAI_MspInit+0x1a8>)
 8000ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000efa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2105      	movs	r1, #5
 8000f06:	204b      	movs	r0, #75	@ 0x4b
 8000f08:	f001 f932 	bl	8002170 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000f0c:	204b      	movs	r0, #75	@ 0x4b
 8000f0e:	f001 f94b 	bl	80021a8 <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8000f12:	4b26      	ldr	r3, [pc, #152]	@ (8000fac <HAL_SAI_MspInit+0x1a4>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	3301      	adds	r3, #1
 8000f18:	4a24      	ldr	r2, [pc, #144]	@ (8000fac <HAL_SAI_MspInit+0x1a4>)
 8000f1a:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000f2e:	230d      	movs	r3, #13
 8000f30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	4822      	ldr	r0, [pc, #136]	@ (8000fc4 <HAL_SAI_MspInit+0x1bc>)
 8000f3a:	f001 fbb9 	bl	80026b0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 8000f3e:	4b22      	ldr	r3, [pc, #136]	@ (8000fc8 <HAL_SAI_MspInit+0x1c0>)
 8000f40:	4a22      	ldr	r2, [pc, #136]	@ (8000fcc <HAL_SAI_MspInit+0x1c4>)
 8000f42:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 8000f44:	4b20      	ldr	r3, [pc, #128]	@ (8000fc8 <HAL_SAI_MspInit+0x1c0>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc8 <HAL_SAI_MspInit+0x1c0>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f50:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc8 <HAL_SAI_MspInit+0x1c0>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8000f56:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc8 <HAL_SAI_MspInit+0x1c0>)
 8000f58:	2280      	movs	r2, #128	@ 0x80
 8000f5a:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc8 <HAL_SAI_MspInit+0x1c0>)
 8000f5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f62:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f64:	4b18      	ldr	r3, [pc, #96]	@ (8000fc8 <HAL_SAI_MspInit+0x1c0>)
 8000f66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f6a:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8000f6c:	4b16      	ldr	r3, [pc, #88]	@ (8000fc8 <HAL_SAI_MspInit+0x1c0>)
 8000f6e:	2220      	movs	r2, #32
 8000f70:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8000f72:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <HAL_SAI_MspInit+0x1c0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8000f78:	4813      	ldr	r0, [pc, #76]	@ (8000fc8 <HAL_SAI_MspInit+0x1c0>)
 8000f7a:	f001 f923 	bl	80021c4 <HAL_DMA_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 8000f84:	f7ff feda 	bl	8000d3c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000fc8 <HAL_SAI_MspInit+0x1c0>)
 8000f8c:	671a      	str	r2, [r3, #112]	@ 0x70
 8000f8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000fc8 <HAL_SAI_MspInit+0x1c0>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a0c      	ldr	r2, [pc, #48]	@ (8000fc8 <HAL_SAI_MspInit+0x1c0>)
 8000f98:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000f9a:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc8 <HAL_SAI_MspInit+0x1c0>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 8000fa0:	bf00      	nop
 8000fa2:	3728      	adds	r7, #40	@ 0x28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40015804 	.word	0x40015804
 8000fac:	20000b2c 	.word	0x20000b2c
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	48000400 	.word	0x48000400
 8000fb8:	20000a9c 	.word	0x20000a9c
 8000fbc:	4002006c 	.word	0x4002006c
 8000fc0:	40015824 	.word	0x40015824
 8000fc4:	48000800 	.word	0x48000800
 8000fc8:	20000ae4 	.word	0x20000ae4
 8000fcc:	40020080 	.word	0x40020080

08000fd0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001044 <MX_SPI3_Init+0x74>)
 8000fd6:	4a1c      	ldr	r2, [pc, #112]	@ (8001048 <MX_SPI3_Init+0x78>)
 8000fd8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000fda:	4b1a      	ldr	r3, [pc, #104]	@ (8001044 <MX_SPI3_Init+0x74>)
 8000fdc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fe0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000fe2:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <MX_SPI3_Init+0x74>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fe8:	4b16      	ldr	r3, [pc, #88]	@ (8001044 <MX_SPI3_Init+0x74>)
 8000fea:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000fee:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ff0:	4b14      	ldr	r3, [pc, #80]	@ (8001044 <MX_SPI3_Init+0x74>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ff6:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <MX_SPI3_Init+0x74>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <MX_SPI3_Init+0x74>)
 8000ffe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001002:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001004:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <MX_SPI3_Init+0x74>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800100a:	4b0e      	ldr	r3, [pc, #56]	@ (8001044 <MX_SPI3_Init+0x74>)
 800100c:	2200      	movs	r2, #0
 800100e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001010:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <MX_SPI3_Init+0x74>)
 8001012:	2200      	movs	r2, #0
 8001014:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001016:	4b0b      	ldr	r3, [pc, #44]	@ (8001044 <MX_SPI3_Init+0x74>)
 8001018:	2200      	movs	r2, #0
 800101a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800101c:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <MX_SPI3_Init+0x74>)
 800101e:	2207      	movs	r2, #7
 8001020:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001022:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <MX_SPI3_Init+0x74>)
 8001024:	2200      	movs	r2, #0
 8001026:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001028:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <MX_SPI3_Init+0x74>)
 800102a:	2208      	movs	r2, #8
 800102c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800102e:	4805      	ldr	r0, [pc, #20]	@ (8001044 <MX_SPI3_Init+0x74>)
 8001030:	f005 fc82 	bl	8006938 <HAL_SPI_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800103a:	f7ff fe7f 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000b30 	.word	0x20000b30
 8001048:	40003c00 	.word	0x40003c00

0800104c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	@ 0x28
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a29      	ldr	r2, [pc, #164]	@ (8001110 <HAL_SPI_MspInit+0xc4>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d14c      	bne.n	8001108 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800106e:	4b29      	ldr	r3, [pc, #164]	@ (8001114 <HAL_SPI_MspInit+0xc8>)
 8001070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001072:	4a28      	ldr	r2, [pc, #160]	@ (8001114 <HAL_SPI_MspInit+0xc8>)
 8001074:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001078:	6593      	str	r3, [r2, #88]	@ 0x58
 800107a:	4b26      	ldr	r3, [pc, #152]	@ (8001114 <HAL_SPI_MspInit+0xc8>)
 800107c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800107e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001086:	4b23      	ldr	r3, [pc, #140]	@ (8001114 <HAL_SPI_MspInit+0xc8>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108a:	4a22      	ldr	r2, [pc, #136]	@ (8001114 <HAL_SPI_MspInit+0xc8>)
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001092:	4b20      	ldr	r3, [pc, #128]	@ (8001114 <HAL_SPI_MspInit+0xc8>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	4b1d      	ldr	r3, [pc, #116]	@ (8001114 <HAL_SPI_MspInit+0xc8>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001114 <HAL_SPI_MspInit+0xc8>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001114 <HAL_SPI_MspInit+0xc8>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = VU_SCK_Pin|VU_MISO_Pin;
 80010b6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010c8:	2306      	movs	r3, #6
 80010ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4619      	mov	r1, r3
 80010d2:	4811      	ldr	r0, [pc, #68]	@ (8001118 <HAL_SPI_MspInit+0xcc>)
 80010d4:	f001 faec 	bl	80026b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VU_MOSI_Pin;
 80010d8:	2320      	movs	r3, #32
 80010da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010dc:	2302      	movs	r3, #2
 80010de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e4:	2303      	movs	r3, #3
 80010e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010e8:	2306      	movs	r3, #6
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(VU_MOSI_GPIO_Port, &GPIO_InitStruct);
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	4619      	mov	r1, r3
 80010f2:	480a      	ldr	r0, [pc, #40]	@ (800111c <HAL_SPI_MspInit+0xd0>)
 80010f4:	f001 fadc 	bl	80026b0 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2105      	movs	r1, #5
 80010fc:	2033      	movs	r0, #51	@ 0x33
 80010fe:	f001 f837 	bl	8002170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001102:	2033      	movs	r0, #51	@ 0x33
 8001104:	f001 f850 	bl	80021a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001108:	bf00      	nop
 800110a:	3728      	adds	r7, #40	@ 0x28
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40003c00 	.word	0x40003c00
 8001114:	40021000 	.word	0x40021000
 8001118:	48000800 	.word	0x48000800
 800111c:	48000400 	.word	0x48000400

08001120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	4b11      	ldr	r3, [pc, #68]	@ (800116c <HAL_MspInit+0x4c>)
 8001128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800112a:	4a10      	ldr	r2, [pc, #64]	@ (800116c <HAL_MspInit+0x4c>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6613      	str	r3, [r2, #96]	@ 0x60
 8001132:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <HAL_MspInit+0x4c>)
 8001134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113e:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <HAL_MspInit+0x4c>)
 8001140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001142:	4a0a      	ldr	r2, [pc, #40]	@ (800116c <HAL_MspInit+0x4c>)
 8001144:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001148:	6593      	str	r3, [r2, #88]	@ 0x58
 800114a:	4b08      	ldr	r3, [pc, #32]	@ (800116c <HAL_MspInit+0x4c>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800114e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	210f      	movs	r1, #15
 800115a:	f06f 0001 	mvn.w	r0, #1
 800115e:	f001 f807 	bl	8002170 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40021000 	.word	0x40021000

08001170 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08e      	sub	sp, #56	@ 0x38
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001178:	2300      	movs	r3, #0
 800117a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800117e:	4b34      	ldr	r3, [pc, #208]	@ (8001250 <HAL_InitTick+0xe0>)
 8001180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001182:	4a33      	ldr	r2, [pc, #204]	@ (8001250 <HAL_InitTick+0xe0>)
 8001184:	f043 0310 	orr.w	r3, r3, #16
 8001188:	6593      	str	r3, [r2, #88]	@ 0x58
 800118a:	4b31      	ldr	r3, [pc, #196]	@ (8001250 <HAL_InitTick+0xe0>)
 800118c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800118e:	f003 0310 	and.w	r3, r3, #16
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001196:	f107 0210 	add.w	r2, r7, #16
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f003 f889 	bl	80042b8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011a6:	6a3b      	ldr	r3, [r7, #32]
 80011a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d103      	bne.n	80011b8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011b0:	f003 f856 	bl	8004260 <HAL_RCC_GetPCLK1Freq>
 80011b4:	6378      	str	r0, [r7, #52]	@ 0x34
 80011b6:	e004      	b.n	80011c2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011b8:	f003 f852 	bl	8004260 <HAL_RCC_GetPCLK1Freq>
 80011bc:	4603      	mov	r3, r0
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011c4:	4a23      	ldr	r2, [pc, #140]	@ (8001254 <HAL_InitTick+0xe4>)
 80011c6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ca:	0c9b      	lsrs	r3, r3, #18
 80011cc:	3b01      	subs	r3, #1
 80011ce:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011d0:	4b21      	ldr	r3, [pc, #132]	@ (8001258 <HAL_InitTick+0xe8>)
 80011d2:	4a22      	ldr	r2, [pc, #136]	@ (800125c <HAL_InitTick+0xec>)
 80011d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011d6:	4b20      	ldr	r3, [pc, #128]	@ (8001258 <HAL_InitTick+0xe8>)
 80011d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011dc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011de:	4a1e      	ldr	r2, [pc, #120]	@ (8001258 <HAL_InitTick+0xe8>)
 80011e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011e2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001258 <HAL_InitTick+0xe8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001258 <HAL_InitTick+0xe8>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f0:	4b19      	ldr	r3, [pc, #100]	@ (8001258 <HAL_InitTick+0xe8>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80011f6:	4818      	ldr	r0, [pc, #96]	@ (8001258 <HAL_InitTick+0xe8>)
 80011f8:	f006 f830 	bl	800725c <HAL_TIM_Base_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001202:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001206:	2b00      	cmp	r3, #0
 8001208:	d11b      	bne.n	8001242 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800120a:	4813      	ldr	r0, [pc, #76]	@ (8001258 <HAL_InitTick+0xe8>)
 800120c:	f006 f888 	bl	8007320 <HAL_TIM_Base_Start_IT>
 8001210:	4603      	mov	r3, r0
 8001212:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001216:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800121a:	2b00      	cmp	r3, #0
 800121c:	d111      	bne.n	8001242 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800121e:	2036      	movs	r0, #54	@ 0x36
 8001220:	f000 ffc2 	bl	80021a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b0f      	cmp	r3, #15
 8001228:	d808      	bhi.n	800123c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800122a:	2200      	movs	r2, #0
 800122c:	6879      	ldr	r1, [r7, #4]
 800122e:	2036      	movs	r0, #54	@ 0x36
 8001230:	f000 ff9e 	bl	8002170 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001234:	4a0a      	ldr	r2, [pc, #40]	@ (8001260 <HAL_InitTick+0xf0>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	e002      	b.n	8001242 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001242:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001246:	4618      	mov	r0, r3
 8001248:	3738      	adds	r7, #56	@ 0x38
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40021000 	.word	0x40021000
 8001254:	431bde83 	.word	0x431bde83
 8001258:	20000b94 	.word	0x20000b94
 800125c:	40001000 	.word	0x40001000
 8001260:	2000000c 	.word	0x2000000c

08001264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <NMI_Handler+0x4>

0800126c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <HardFault_Handler+0x4>

08001274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <MemManage_Handler+0x4>

0800127c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <BusFault_Handler+0x4>

08001284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <UsageFault_Handler+0x4>

0800128c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 80012a0:	4802      	ldr	r0, [pc, #8]	@ (80012ac <DMA1_Channel6_IRQHandler+0x10>)
 80012a2:	f001 f926 	bl	80024f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000a9c 	.word	0x20000a9c

080012b0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 80012b4:	4802      	ldr	r0, [pc, #8]	@ (80012c0 <DMA1_Channel7_IRQHandler+0x10>)
 80012b6:	f001 f91c 	bl	80024f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000ae4 	.word	0x20000ae4

080012c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012c8:	4802      	ldr	r0, [pc, #8]	@ (80012d4 <USART2_IRQHandler+0x10>)
 80012ca:	f006 fbb1 	bl	8007a30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000be4 	.word	0x20000be4

080012d8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80012dc:	4802      	ldr	r0, [pc, #8]	@ (80012e8 <SPI3_IRQHandler+0x10>)
 80012de:	f005 fd45 	bl	8006d6c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000b30 	.word	0x20000b30

080012ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012f0:	4802      	ldr	r0, [pc, #8]	@ (80012fc <TIM6_DAC_IRQHandler+0x10>)
 80012f2:	f006 f885 	bl	8007400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000b94 	.word	0x20000b94

08001300 <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 8001304:	4803      	ldr	r0, [pc, #12]	@ (8001314 <SAI2_IRQHandler+0x14>)
 8001306:	f004 fecb 	bl	80060a0 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 800130a:	4803      	ldr	r0, [pc, #12]	@ (8001318 <SAI2_IRQHandler+0x18>)
 800130c:	f004 fec8 	bl	80060a0 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000994 	.word	0x20000994
 8001318:	20000a18 	.word	0x20000a18

0800131c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	e00a      	b.n	8001344 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800132e:	f3af 8000 	nop.w
 8001332:	4601      	mov	r1, r0
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	1c5a      	adds	r2, r3, #1
 8001338:	60ba      	str	r2, [r7, #8]
 800133a:	b2ca      	uxtb	r2, r1
 800133c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	3301      	adds	r3, #1
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	429a      	cmp	r2, r3
 800134a:	dbf0      	blt.n	800132e <_read+0x12>
  }

  return len;
 800134c:	687b      	ldr	r3, [r7, #4]
}
 800134e:	4618      	mov	r0, r3
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b086      	sub	sp, #24
 800135a:	af00      	add	r7, sp, #0
 800135c:	60f8      	str	r0, [r7, #12]
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	e009      	b.n	800137c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	1c5a      	adds	r2, r3, #1
 800136c:	60ba      	str	r2, [r7, #8]
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fa89 	bl	8000888 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	3301      	adds	r3, #1
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	697a      	ldr	r2, [r7, #20]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	429a      	cmp	r2, r3
 8001382:	dbf1      	blt.n	8001368 <_write+0x12>
  }
  return len;
 8001384:	687b      	ldr	r3, [r7, #4]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <_close>:

int _close(int file)
{
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001396:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800139a:	4618      	mov	r0, r3
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013b6:	605a      	str	r2, [r3, #4]
  return 0;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <_isatty>:

int _isatty(int file)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013ce:	2301      	movs	r3, #1
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001400:	4a14      	ldr	r2, [pc, #80]	@ (8001454 <_sbrk+0x5c>)
 8001402:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <_sbrk+0x60>)
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800140c:	4b13      	ldr	r3, [pc, #76]	@ (800145c <_sbrk+0x64>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d102      	bne.n	800141a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001414:	4b11      	ldr	r3, [pc, #68]	@ (800145c <_sbrk+0x64>)
 8001416:	4a12      	ldr	r2, [pc, #72]	@ (8001460 <_sbrk+0x68>)
 8001418:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800141a:	4b10      	ldr	r3, [pc, #64]	@ (800145c <_sbrk+0x64>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	429a      	cmp	r2, r3
 8001426:	d207      	bcs.n	8001438 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001428:	f00a f930 	bl	800b68c <__errno>
 800142c:	4603      	mov	r3, r0
 800142e:	220c      	movs	r2, #12
 8001430:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001432:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001436:	e009      	b.n	800144c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001438:	4b08      	ldr	r3, [pc, #32]	@ (800145c <_sbrk+0x64>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800143e:	4b07      	ldr	r3, [pc, #28]	@ (800145c <_sbrk+0x64>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	4a05      	ldr	r2, [pc, #20]	@ (800145c <_sbrk+0x64>)
 8001448:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800144a:	68fb      	ldr	r3, [r7, #12]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20018000 	.word	0x20018000
 8001458:	00000400 	.word	0x00000400
 800145c:	20000be0 	.word	0x20000be0
 8001460:	20006098 	.word	0x20006098

08001464 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001468:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <SystemInit+0x20>)
 800146a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800146e:	4a05      	ldr	r2, [pc, #20]	@ (8001484 <SystemInit+0x20>)
 8001470:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001474:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800148c:	4b14      	ldr	r3, [pc, #80]	@ (80014e0 <MX_USART2_UART_Init+0x58>)
 800148e:	4a15      	ldr	r2, [pc, #84]	@ (80014e4 <MX_USART2_UART_Init+0x5c>)
 8001490:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001492:	4b13      	ldr	r3, [pc, #76]	@ (80014e0 <MX_USART2_UART_Init+0x58>)
 8001494:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001498:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800149a:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <MX_USART2_UART_Init+0x58>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <MX_USART2_UART_Init+0x58>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	@ (80014e0 <MX_USART2_UART_Init+0x58>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014ac:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <MX_USART2_UART_Init+0x58>)
 80014ae:	220c      	movs	r2, #12
 80014b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b2:	4b0b      	ldr	r3, [pc, #44]	@ (80014e0 <MX_USART2_UART_Init+0x58>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b8:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <MX_USART2_UART_Init+0x58>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014be:	4b08      	ldr	r3, [pc, #32]	@ (80014e0 <MX_USART2_UART_Init+0x58>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c4:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <MX_USART2_UART_Init+0x58>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ca:	4805      	ldr	r0, [pc, #20]	@ (80014e0 <MX_USART2_UART_Init+0x58>)
 80014cc:	f006 f98c 	bl	80077e8 <HAL_UART_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014d6:	f7ff fc31 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000be4 	.word	0x20000be4
 80014e4:	40004400 	.word	0x40004400

080014e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b0ac      	sub	sp, #176	@ 0xb0
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	2288      	movs	r2, #136	@ 0x88
 8001506:	2100      	movs	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f00a f81b 	bl	800b544 <memset>
  if(uartHandle->Instance==USART2)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a25      	ldr	r2, [pc, #148]	@ (80015a8 <HAL_UART_MspInit+0xc0>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d143      	bne.n	80015a0 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001518:	2302      	movs	r3, #2
 800151a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800151c:	2300      	movs	r3, #0
 800151e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	4618      	mov	r0, r3
 8001526:	f002 ff59 	bl	80043dc <HAL_RCCEx_PeriphCLKConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001530:	f7ff fc04 	bl	8000d3c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001534:	4b1d      	ldr	r3, [pc, #116]	@ (80015ac <HAL_UART_MspInit+0xc4>)
 8001536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001538:	4a1c      	ldr	r2, [pc, #112]	@ (80015ac <HAL_UART_MspInit+0xc4>)
 800153a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800153e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001540:	4b1a      	ldr	r3, [pc, #104]	@ (80015ac <HAL_UART_MspInit+0xc4>)
 8001542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154c:	4b17      	ldr	r3, [pc, #92]	@ (80015ac <HAL_UART_MspInit+0xc4>)
 800154e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001550:	4a16      	ldr	r2, [pc, #88]	@ (80015ac <HAL_UART_MspInit+0xc4>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001558:	4b14      	ldr	r3, [pc, #80]	@ (80015ac <HAL_UART_MspInit+0xc4>)
 800155a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001564:	230c      	movs	r3, #12
 8001566:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800157c:	2307      	movs	r3, #7
 800157e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001582:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001586:	4619      	mov	r1, r3
 8001588:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800158c:	f001 f890 	bl	80026b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	2105      	movs	r1, #5
 8001594:	2026      	movs	r0, #38	@ 0x26
 8001596:	f000 fdeb 	bl	8002170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800159a:	2026      	movs	r0, #38	@ 0x26
 800159c:	f000 fe04 	bl	80021a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015a0:	bf00      	nop
 80015a2:	37b0      	adds	r7, #176	@ 0xb0
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40004400 	.word	0x40004400
 80015ac:	40021000 	.word	0x40021000

080015b0 <Reset_Handler>:
 80015b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015e8 <LoopForever+0x2>
 80015b4:	f7ff ff56 	bl	8001464 <SystemInit>
 80015b8:	480c      	ldr	r0, [pc, #48]	@ (80015ec <LoopForever+0x6>)
 80015ba:	490d      	ldr	r1, [pc, #52]	@ (80015f0 <LoopForever+0xa>)
 80015bc:	4a0d      	ldr	r2, [pc, #52]	@ (80015f4 <LoopForever+0xe>)
 80015be:	2300      	movs	r3, #0
 80015c0:	e002      	b.n	80015c8 <LoopCopyDataInit>

080015c2 <CopyDataInit>:
 80015c2:	58d4      	ldr	r4, [r2, r3]
 80015c4:	50c4      	str	r4, [r0, r3]
 80015c6:	3304      	adds	r3, #4

080015c8 <LoopCopyDataInit>:
 80015c8:	18c4      	adds	r4, r0, r3
 80015ca:	428c      	cmp	r4, r1
 80015cc:	d3f9      	bcc.n	80015c2 <CopyDataInit>
 80015ce:	4a0a      	ldr	r2, [pc, #40]	@ (80015f8 <LoopForever+0x12>)
 80015d0:	4c0a      	ldr	r4, [pc, #40]	@ (80015fc <LoopForever+0x16>)
 80015d2:	2300      	movs	r3, #0
 80015d4:	e001      	b.n	80015da <LoopFillZerobss>

080015d6 <FillZerobss>:
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	3204      	adds	r2, #4

080015da <LoopFillZerobss>:
 80015da:	42a2      	cmp	r2, r4
 80015dc:	d3fb      	bcc.n	80015d6 <FillZerobss>
 80015de:	f00a f85b 	bl	800b698 <__libc_init_array>
 80015e2:	f7ff fa89 	bl	8000af8 <main>

080015e6 <LoopForever>:
 80015e6:	e7fe      	b.n	80015e6 <LoopForever>
 80015e8:	20018000 	.word	0x20018000
 80015ec:	20000000 	.word	0x20000000
 80015f0:	20000074 	.word	0x20000074
 80015f4:	0800ca68 	.word	0x0800ca68
 80015f8:	20000074 	.word	0x20000074
 80015fc:	20006098 	.word	0x20006098

08001600 <ADC1_2_IRQHandler>:
 8001600:	e7fe      	b.n	8001600 <ADC1_2_IRQHandler>
	...

08001604 <MCP23S17_WriteRegister>:
h_MCP23S17_t hMCP23S17;


// Function to write to a register of MCP23S17 with error handling
void MCP23S17_WriteRegister(uint8_t reg, uint8_t data)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	460a      	mov	r2, r1
 800160e:	71fb      	strb	r3, [r7, #7]
 8001610:	4613      	mov	r3, r2
 8001612:	71bb      	strb	r3, [r7, #6]
	uint8_t control_byte = MCP23S17_CONTROL_BYTE(MCP23S17_CONTROL_ADDR, VU_WRITE); // Address = 0b000
 8001614:	2340      	movs	r3, #64	@ 0x40
 8001616:	73bb      	strb	r3, [r7, #14]

	uint8_t buffer[2] = {reg, data};
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	733b      	strb	r3, [r7, #12]
 800161c:	79bb      	ldrb	r3, [r7, #6]
 800161e:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status;

	// Assert chip select
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 8001620:	2200      	movs	r2, #0
 8001622:	2180      	movs	r1, #128	@ 0x80
 8001624:	4820      	ldr	r0, [pc, #128]	@ (80016a8 <MCP23S17_WriteRegister+0xa4>)
 8001626:	f001 f9ed 	bl	8002a04 <HAL_GPIO_WritePin>

	// Transmit control byte
	status = HAL_SPI_Transmit(hMCP23S17.hspi, &control_byte, 1, HAL_MAX_DELAY);
 800162a:	4b20      	ldr	r3, [pc, #128]	@ (80016ac <MCP23S17_WriteRegister+0xa8>)
 800162c:	6818      	ldr	r0, [r3, #0]
 800162e:	f107 010e 	add.w	r1, r7, #14
 8001632:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001636:	2201      	movs	r2, #1
 8001638:	f005 fa21 	bl	8006a7e <HAL_SPI_Transmit>
 800163c:	4603      	mov	r3, r0
 800163e:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00c      	beq.n	8001660 <MCP23S17_WriteRegister+0x5c>
		HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET); // Deassert chip select
 8001646:	2201      	movs	r2, #1
 8001648:	2180      	movs	r1, #128	@ 0x80
 800164a:	4817      	ldr	r0, [pc, #92]	@ (80016a8 <MCP23S17_WriteRegister+0xa4>)
 800164c:	f001 f9da 	bl	8002a04 <HAL_GPIO_WritePin>
		printf("Error: Failed to transmit control byte (HAL_SPI_Transmit returned %d)\r\n", status);
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	4619      	mov	r1, r3
 8001654:	4816      	ldr	r0, [pc, #88]	@ (80016b0 <MCP23S17_WriteRegister+0xac>)
 8001656:	f009 fdf9 	bl	800b24c <iprintf>
		Error_Handler(); // Handle the error
 800165a:	f7ff fb6f 	bl	8000d3c <Error_Handler>
		return; // Prevent further execution
 800165e:	e01f      	b.n	80016a0 <MCP23S17_WriteRegister+0x9c>
#if (LOGS)
	printf("SPI3 control transmission status: %d\r\n", status);
#endif

	// Transmit register address and data
	status = HAL_SPI_Transmit(hMCP23S17.hspi, buffer, 2, HAL_MAX_DELAY);
 8001660:	4b12      	ldr	r3, [pc, #72]	@ (80016ac <MCP23S17_WriteRegister+0xa8>)
 8001662:	6818      	ldr	r0, [r3, #0]
 8001664:	f107 010c 	add.w	r1, r7, #12
 8001668:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800166c:	2202      	movs	r2, #2
 800166e:	f005 fa06 	bl	8006a7e <HAL_SPI_Transmit>
 8001672:	4603      	mov	r3, r0
 8001674:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00c      	beq.n	8001696 <MCP23S17_WriteRegister+0x92>
		HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET); // Deassert chip select
 800167c:	2201      	movs	r2, #1
 800167e:	2180      	movs	r1, #128	@ 0x80
 8001680:	4809      	ldr	r0, [pc, #36]	@ (80016a8 <MCP23S17_WriteRegister+0xa4>)
 8001682:	f001 f9bf 	bl	8002a04 <HAL_GPIO_WritePin>
		printf("Error: Failed to transmit register data (HAL_SPI_Transmit returned %d)\r\n", status);
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	4619      	mov	r1, r3
 800168a:	480a      	ldr	r0, [pc, #40]	@ (80016b4 <MCP23S17_WriteRegister+0xb0>)
 800168c:	f009 fdde 	bl	800b24c <iprintf>
		Error_Handler(); // Handle the error
 8001690:	f7ff fb54 	bl	8000d3c <Error_Handler>
		return; // Prevent further execution
 8001694:	e004      	b.n	80016a0 <MCP23S17_WriteRegister+0x9c>
#if (LOGS)
	printf("SPI3 data Ox%X transmission to register 0x%X status: %d\r\n", data, reg, status);
#endif

	// Deassert chip select
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 8001696:	2201      	movs	r2, #1
 8001698:	2180      	movs	r1, #128	@ 0x80
 800169a:	4803      	ldr	r0, [pc, #12]	@ (80016a8 <MCP23S17_WriteRegister+0xa4>)
 800169c:	f001 f9b2 	bl	8002a04 <HAL_GPIO_WritePin>
}
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	48000400 	.word	0x48000400
 80016ac:	20000c6c 	.word	0x20000c6c
 80016b0:	0800c68c 	.word	0x0800c68c
 80016b4:	0800c6d4 	.word	0x0800c6d4

080016b8 <MCP23S17_Update_LEDs>:

void MCP23S17_Update_LEDs()
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	MCP23S17_WriteRegister(MCP23S17_OLATA, hMCP23S17.GPA);
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <MCP23S17_Update_LEDs+0x20>)
 80016be:	791b      	ldrb	r3, [r3, #4]
 80016c0:	4619      	mov	r1, r3
 80016c2:	2014      	movs	r0, #20
 80016c4:	f7ff ff9e 	bl	8001604 <MCP23S17_WriteRegister>
	MCP23S17_WriteRegister(MCP23S17_OLATB, hMCP23S17.GPB);
 80016c8:	4b03      	ldr	r3, [pc, #12]	@ (80016d8 <MCP23S17_Update_LEDs+0x20>)
 80016ca:	795b      	ldrb	r3, [r3, #5]
 80016cc:	4619      	mov	r1, r3
 80016ce:	2015      	movs	r0, #21
 80016d0:	f7ff ff98 	bl	8001604 <MCP23S17_WriteRegister>
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000c6c 	.word	0x20000c6c

080016dc <MCP23S17_Init>:

void MCP23S17_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	hMCP23S17.hspi = &hspi3;
 80016e0:	4b12      	ldr	r3, [pc, #72]	@ (800172c <MCP23S17_Init+0x50>)
 80016e2:	4a13      	ldr	r2, [pc, #76]	@ (8001730 <MCP23S17_Init+0x54>)
 80016e4:	601a      	str	r2, [r3, #0]

	HAL_SPI_Init(hMCP23S17.hspi);
 80016e6:	4b11      	ldr	r3, [pc, #68]	@ (800172c <MCP23S17_Init+0x50>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f005 f924 	bl	8006938 <HAL_SPI_Init>

	// nRESET to base state
	HAL_GPIO_WritePin(VU_nRESET_GPIO_Port, VU_nRESET_Pin, GPIO_PIN_SET);
 80016f0:	2201      	movs	r2, #1
 80016f2:	2101      	movs	r1, #1
 80016f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016f8:	f001 f984 	bl	8002a04 <HAL_GPIO_WritePin>

	// nCS to reset state
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 80016fc:	2201      	movs	r2, #1
 80016fe:	2180      	movs	r1, #128	@ 0x80
 8001700:	480c      	ldr	r0, [pc, #48]	@ (8001734 <MCP23S17_Init+0x58>)
 8001702:	f001 f97f 	bl	8002a04 <HAL_GPIO_WritePin>

	// Set all GPIOA and GPIOB pins as outputs
	MCP23S17_WriteRegister(MCP23S17_IODIRA, MCP23S17_ALL_ON); // GPA as output
 8001706:	2100      	movs	r1, #0
 8001708:	2000      	movs	r0, #0
 800170a:	f7ff ff7b 	bl	8001604 <MCP23S17_WriteRegister>
	MCP23S17_WriteRegister(MCP23S17_IODIRB, MCP23S17_ALL_ON); // GPB as output
 800170e:	2100      	movs	r1, #0
 8001710:	2001      	movs	r0, #1
 8001712:	f7ff ff77 	bl	8001604 <MCP23S17_WriteRegister>

	hMCP23S17.GPA = 0xFF;	// All LEDs on GPIOA OFF
 8001716:	4b05      	ldr	r3, [pc, #20]	@ (800172c <MCP23S17_Init+0x50>)
 8001718:	22ff      	movs	r2, #255	@ 0xff
 800171a:	711a      	strb	r2, [r3, #4]
	hMCP23S17.GPB = 0xFF;	// All LEDs on GPIOB OFF
 800171c:	4b03      	ldr	r3, [pc, #12]	@ (800172c <MCP23S17_Init+0x50>)
 800171e:	22ff      	movs	r2, #255	@ 0xff
 8001720:	715a      	strb	r2, [r3, #5]

	MCP23S17_Update_LEDs();
 8001722:	f7ff ffc9 	bl	80016b8 <MCP23S17_Update_LEDs>
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000c6c 	.word	0x20000c6c
 8001730:	20000b30 	.word	0x20000b30
 8001734:	48000400 	.word	0x48000400

08001738 <MCP23S17_Set_LED_id>:

void MCP23S17_Set_LED_id(uint8_t led)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
	if (led > 7)
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	2b07      	cmp	r3, #7
 8001746:	d90e      	bls.n	8001766 <MCP23S17_Set_LED_id+0x2e>
	{
		hMCP23S17.GPB = ~(1 << led%8);
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	2201      	movs	r2, #1
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	b2db      	uxtb	r3, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <MCP23S17_Set_LED_id+0x54>)
 800175c:	715a      	strb	r2, [r3, #5]
		hMCP23S17.GPA = 0xFF; // All LEDs on GPIOA OFF
 800175e:	4b0b      	ldr	r3, [pc, #44]	@ (800178c <MCP23S17_Set_LED_id+0x54>)
 8001760:	22ff      	movs	r2, #255	@ 0xff
 8001762:	711a      	strb	r2, [r3, #4]
 8001764:	e00b      	b.n	800177e <MCP23S17_Set_LED_id+0x46>
	}
	else
	{
		hMCP23S17.GPA = ~(1 << led);
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	2201      	movs	r2, #1
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	b2db      	uxtb	r3, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	b2da      	uxtb	r2, r3
 8001774:	4b05      	ldr	r3, [pc, #20]	@ (800178c <MCP23S17_Set_LED_id+0x54>)
 8001776:	711a      	strb	r2, [r3, #4]
		hMCP23S17.GPB = 0xFF; // All LEDs on GPIOB OFF
 8001778:	4b04      	ldr	r3, [pc, #16]	@ (800178c <MCP23S17_Set_LED_id+0x54>)
 800177a:	22ff      	movs	r2, #255	@ 0xff
 800177c:	715a      	strb	r2, [r3, #5]
	}

	MCP23S17_Update_LEDs();
 800177e:	f7ff ff9b 	bl	80016b8 <MCP23S17_Update_LEDs>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000c6c 	.word	0x20000c6c

08001790 <MCP23S17_Toggle_LED_id>:

void MCP23S17_Toggle_LED_id(uint8_t led)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
	if (led > 7)
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	2b07      	cmp	r3, #7
 800179e:	d90f      	bls.n	80017c0 <MCP23S17_Toggle_LED_id+0x30>
	{
		hMCP23S17.GPB = (hMCP23S17.GPB & ~(1 << led%8)) | (~hMCP23S17.GPB & (1 << led%8));
 80017a0:	4b11      	ldr	r3, [pc, #68]	@ (80017e8 <MCP23S17_Toggle_LED_id+0x58>)
 80017a2:	795b      	ldrb	r3, [r3, #5]
 80017a4:	b25a      	sxtb	r2, r3
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	2101      	movs	r1, #1
 80017ae:	fa01 f303 	lsl.w	r3, r1, r3
 80017b2:	b25b      	sxtb	r3, r3
 80017b4:	4053      	eors	r3, r2
 80017b6:	b25b      	sxtb	r3, r3
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4b0b      	ldr	r3, [pc, #44]	@ (80017e8 <MCP23S17_Toggle_LED_id+0x58>)
 80017bc:	715a      	strb	r2, [r3, #5]
 80017be:	e00c      	b.n	80017da <MCP23S17_Toggle_LED_id+0x4a>
	}
	else
	{
		hMCP23S17.GPA = (hMCP23S17.GPA & ~(1 << led)) | (~hMCP23S17.GPA & (1 << led));
 80017c0:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <MCP23S17_Toggle_LED_id+0x58>)
 80017c2:	791b      	ldrb	r3, [r3, #4]
 80017c4:	b25a      	sxtb	r2, r3
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	2101      	movs	r1, #1
 80017ca:	fa01 f303 	lsl.w	r3, r1, r3
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	4053      	eors	r3, r2
 80017d2:	b25b      	sxtb	r3, r3
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4b04      	ldr	r3, [pc, #16]	@ (80017e8 <MCP23S17_Toggle_LED_id+0x58>)
 80017d8:	711a      	strb	r2, [r3, #4]
	}

	MCP23S17_Update_LEDs();
 80017da:	f7ff ff6d 	bl	80016b8 <MCP23S17_Update_LEDs>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000c6c 	.word	0x20000c6c

080017ec <MCP23S17_Set_LEDs>:

void MCP23S17_Set_LEDs(uint16_t leds)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	80fb      	strh	r3, [r7, #6]
	hMCP23S17.GPB = (0xFF00 & leds) >> 8;
 80017f6:	88fb      	ldrh	r3, [r7, #6]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <MCP23S17_Set_LEDs+0x2c>)
 8001800:	715a      	strb	r2, [r3, #5]
	hMCP23S17.GPA = 0xFF & leds;
 8001802:	88fb      	ldrh	r3, [r7, #6]
 8001804:	b2da      	uxtb	r2, r3
 8001806:	4b04      	ldr	r3, [pc, #16]	@ (8001818 <MCP23S17_Set_LEDs+0x2c>)
 8001808:	711a      	strb	r2, [r3, #4]

	MCP23S17_Update_LEDs();
 800180a:	f7ff ff55 	bl	80016b8 <MCP23S17_Update_LEDs>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000c6c 	.word	0x20000c6c

0800181c <SGTL5000_ErrorHandler>:
/**
 * @brief Error handler for SGTL5000 operations.
 * @param message: Error message to display.
 */
void SGTL5000_ErrorHandler(const char* message)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
    printf("SGTL5000 Error: %s\r\n", message);
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	4804      	ldr	r0, [pc, #16]	@ (8001838 <SGTL5000_ErrorHandler+0x1c>)
 8001828:	f009 fd10 	bl	800b24c <iprintf>
    Error_Handler(); // Use HAL's Error_Handler or customize as needed
 800182c:	f7ff fa86 	bl	8000d3c <Error_Handler>
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	0800c720 	.word	0x0800c720

0800183c <SGTL5000_ReadRegister>:
 * @param address: Register address to read from.
 * @param pData: Pointer to data buffer for storing the read data.
 * @param length: Number of bytes to read.
 */
void SGTL5000_ReadRegister(uint16_t address, uint8_t* pData, uint16_t length)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af04      	add	r7, sp, #16
 8001842:	4603      	mov	r3, r0
 8001844:	6039      	str	r1, [r7, #0]
 8001846:	80fb      	strh	r3, [r7, #6]
 8001848:	4613      	mov	r3, r2
 800184a:	80bb      	strh	r3, [r7, #4]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hSGTL5000.hi2c, SGTL5000_CODEC,
 800184c:	4b0f      	ldr	r3, [pc, #60]	@ (800188c <SGTL5000_ReadRegister+0x50>)
 800184e:	6818      	ldr	r0, [r3, #0]
 8001850:	88fa      	ldrh	r2, [r7, #6]
 8001852:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001856:	9302      	str	r3, [sp, #8]
 8001858:	88bb      	ldrh	r3, [r7, #4]
 800185a:	9301      	str	r3, [sp, #4]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	2302      	movs	r3, #2
 8001862:	2114      	movs	r1, #20
 8001864:	f001 fab0 	bl	8002dc8 <HAL_I2C_Mem_Read>
 8001868:	4603      	mov	r3, r0
 800186a:	73fb      	strb	r3, [r7, #15]
    		address, SGTL5000_MEM_SIZE, pData, length, HAL_MAX_DELAY);

    if (status != HAL_OK) {
 800186c:	7bfb      	ldrb	r3, [r7, #15]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d007      	beq.n	8001882 <SGTL5000_ReadRegister+0x46>
        printf("Error: Failed to read from address 0x%04X\r\n", address);
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	4619      	mov	r1, r3
 8001876:	4806      	ldr	r0, [pc, #24]	@ (8001890 <SGTL5000_ReadRegister+0x54>)
 8001878:	f009 fce8 	bl	800b24c <iprintf>
        SGTL5000_ErrorHandler("ReadRegister failed");
 800187c:	4805      	ldr	r0, [pc, #20]	@ (8001894 <SGTL5000_ReadRegister+0x58>)
 800187e:	f7ff ffcd 	bl	800181c <SGTL5000_ErrorHandler>
    }
}
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000c74 	.word	0x20000c74
 8001890:	0800c738 	.word	0x0800c738
 8001894:	0800c764 	.word	0x0800c764

08001898 <SGTL5000_WriteRegister>:
 * @brief Writes data to a register of SGTL5000 with error management.
 * @param address: Register address to write to.
 * @param value: Data value to write to the register.
 */
void SGTL5000_WriteRegister(uint16_t address, uint16_t value)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b088      	sub	sp, #32
 800189c:	af04      	add	r7, sp, #16
 800189e:	4603      	mov	r3, r0
 80018a0:	460a      	mov	r2, r1
 80018a2:	80fb      	strh	r3, [r7, #6]
 80018a4:	4613      	mov	r3, r2
 80018a6:	80bb      	strh	r3, [r7, #4]
    uint8_t data[2] = { (uint8_t)(value >> 8), (uint8_t)(value & 0xFF) };
 80018a8:	88bb      	ldrh	r3, [r7, #4]
 80018aa:	0a1b      	lsrs	r3, r3, #8
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	733b      	strb	r3, [r7, #12]
 80018b2:	88bb      	ldrh	r3, [r7, #4]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	737b      	strb	r3, [r7, #13]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(hSGTL5000.hi2c, SGTL5000_CODEC,
 80018b8:	4b10      	ldr	r3, [pc, #64]	@ (80018fc <SGTL5000_WriteRegister+0x64>)
 80018ba:	6818      	ldr	r0, [r3, #0]
 80018bc:	88fa      	ldrh	r2, [r7, #6]
 80018be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018c2:	9302      	str	r3, [sp, #8]
 80018c4:	2302      	movs	r3, #2
 80018c6:	9301      	str	r3, [sp, #4]
 80018c8:	f107 030c 	add.w	r3, r7, #12
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	2302      	movs	r3, #2
 80018d0:	2114      	movs	r1, #20
 80018d2:	f001 f965 	bl	8002ba0 <HAL_I2C_Mem_Write>
 80018d6:	4603      	mov	r3, r0
 80018d8:	73fb      	strb	r3, [r7, #15]
    		address, SGTL5000_MEM_SIZE, data, 2, HAL_MAX_DELAY);

    if (status != HAL_OK) {
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d008      	beq.n	80018f2 <SGTL5000_WriteRegister+0x5a>
        printf("Error: Failed to write 0x%04X to address 0x%04X\r\n", value, address);
 80018e0:	88bb      	ldrh	r3, [r7, #4]
 80018e2:	88fa      	ldrh	r2, [r7, #6]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4806      	ldr	r0, [pc, #24]	@ (8001900 <SGTL5000_WriteRegister+0x68>)
 80018e8:	f009 fcb0 	bl	800b24c <iprintf>
        SGTL5000_ErrorHandler("WriteRegister failed");
 80018ec:	4805      	ldr	r0, [pc, #20]	@ (8001904 <SGTL5000_WriteRegister+0x6c>)
 80018ee:	f7ff ff95 	bl	800181c <SGTL5000_ErrorHandler>
    }
}
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000c74 	.word	0x20000c74
 8001900:	0800c778 	.word	0x0800c778
 8001904:	0800c7ac 	.word	0x0800c7ac

08001908 <SGTL5000_Init>:

/**
 * @brief Initializes the SGTL5000 codec.
 */
void SGTL5000_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
    hSGTL5000.hi2c = &hi2c2;
 800190e:	4b22      	ldr	r3, [pc, #136]	@ (8001998 <SGTL5000_Init+0x90>)
 8001910:	4a22      	ldr	r2, [pc, #136]	@ (800199c <SGTL5000_Init+0x94>)
 8001912:	601a      	str	r2, [r3, #0]

    uint8_t chip_id_data[2];
    SGTL5000_ReadRegister(SGTL5000_CHIP_ID, chip_id_data, SGTL5000_MEM_SIZE);
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	2202      	movs	r2, #2
 8001918:	4619      	mov	r1, r3
 800191a:	2000      	movs	r0, #0
 800191c:	f7ff ff8e 	bl	800183c <SGTL5000_ReadRegister>
    hSGTL5000.chip_id = (chip_id_data[0] << 8) | chip_id_data[1];
 8001920:	793b      	ldrb	r3, [r7, #4]
 8001922:	021b      	lsls	r3, r3, #8
 8001924:	b21a      	sxth	r2, r3
 8001926:	797b      	ldrb	r3, [r7, #5]
 8001928:	b21b      	sxth	r3, r3
 800192a:	4313      	orrs	r3, r2
 800192c:	b21b      	sxth	r3, r3
 800192e:	b29a      	uxth	r2, r3
 8001930:	4b19      	ldr	r3, [pc, #100]	@ (8001998 <SGTL5000_Init+0x90>)
 8001932:	809a      	strh	r2, [r3, #4]

    if (hSGTL5000.chip_id != 0xA011) { // Example CHIP_ID, replace with actual expected ID
 8001934:	4b18      	ldr	r3, [pc, #96]	@ (8001998 <SGTL5000_Init+0x90>)
 8001936:	889b      	ldrh	r3, [r3, #4]
 8001938:	f24a 0211 	movw	r2, #40977	@ 0xa011
 800193c:	4293      	cmp	r3, r2
 800193e:	d002      	beq.n	8001946 <SGTL5000_Init+0x3e>
        SGTL5000_ErrorHandler("Invalid CHIP_ID detected");
 8001940:	4817      	ldr	r0, [pc, #92]	@ (80019a0 <SGTL5000_Init+0x98>)
 8001942:	f7ff ff6b 	bl	800181c <SGTL5000_ErrorHandler>
    }

    // Initialize registers
    SGTL5000_WriteRegister(CHIP_LINREG_CTRL, 0x0008);     // Configure VDDD level to 1.2V
 8001946:	2108      	movs	r1, #8
 8001948:	2022      	movs	r0, #34	@ 0x22
 800194a:	f7ff ffa5 	bl	8001898 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(CHIP_ANA_POWER, 0x7260);       // Power up internal linear regulator
 800194e:	f247 2160 	movw	r1, #29280	@ 0x7260
 8001952:	2030      	movs	r0, #48	@ 0x30
 8001954:	f7ff ffa0 	bl	8001898 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(CHIP_REF_CTRL, 0x004E);        // Set reference voltage
 8001958:	214e      	movs	r1, #78	@ 0x4e
 800195a:	2028      	movs	r0, #40	@ 0x28
 800195c:	f7ff ff9c 	bl	8001898 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(CHIP_LINE_OUT_CTRL, 0x0322);   // Configure line-out reference and bias
 8001960:	f240 3122 	movw	r1, #802	@ 0x322
 8001964:	202c      	movs	r0, #44	@ 0x2c
 8001966:	f7ff ff97 	bl	8001898 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(CHIP_SHORT_CTRL, 0x1106);      // Enable short circuit detect
 800196a:	f241 1106 	movw	r1, #4358	@ 0x1106
 800196e:	202e      	movs	r0, #46	@ 0x2e
 8001970:	f7ff ff92 	bl	8001898 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(CHIP_ANA_CTRL, 0x0133);        // Enable analog controls
 8001974:	f240 1133 	movw	r1, #307	@ 0x133
 8001978:	2034      	movs	r0, #52	@ 0x34
 800197a:	f7ff ff8d 	bl	8001898 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(CHIP_DIG_POWER, 0x0073);       // Power up digital blocks
 800197e:	2173      	movs	r1, #115	@ 0x73
 8001980:	2002      	movs	r0, #2
 8001982:	f7ff ff89 	bl	8001898 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(CHIP_LINE_OUT_VOL, 0x0F0F);    // Set line-out volume
 8001986:	f640 710f 	movw	r1, #3855	@ 0xf0f
 800198a:	202a      	movs	r0, #42	@ 0x2a
 800198c:	f7ff ff84 	bl	8001898 <SGTL5000_WriteRegister>

#if (LOGS)
    printf("SGTL5000 initialized successfully, CHIP_ID: 0x%04X\r\n", hSGTL5000.chip_id);
#endif
}
 8001990:	bf00      	nop
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000c74 	.word	0x20000c74
 800199c:	20000334 	.word	0x20000334
 80019a0:	0800c7c4 	.word	0x0800c7c4

080019a4 <fonction>:

#include "../drivers/MCP23S17.h"


int fonction(int argc, char ** argv)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
	if (argc > 1)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	dd14      	ble.n	80019de <fonction+0x3a>
	{
		for (int i = 0; i < argc; i++)
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	e00d      	b.n	80019d6 <fonction+0x32>
		{
			printf("Paramètre [%d] = %s\r\n", i+1, argv[i]);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	1c59      	adds	r1, r3, #1
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	4413      	add	r3, r2
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4807      	ldr	r0, [pc, #28]	@ (80019e8 <fonction+0x44>)
 80019cc:	f009 fc3e 	bl	800b24c <iprintf>
		for (int i = 0; i < argc; i++)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	3301      	adds	r3, #1
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	429a      	cmp	r2, r3
 80019dc:	dbed      	blt.n	80019ba <fonction+0x16>
		}
	}

	return 0;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	0800c7e0 	.word	0x0800c7e0

080019ec <calcul>:

int calcul(int argc, char ** argv)
{
 80019ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
	if (argc >= 4)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	dd68      	ble.n	8001ace <calcul+0xe2>
	{
		switch(argv[2][0])
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	3308      	adds	r3, #8
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b78      	cmp	r3, #120	@ 0x78
 8001a06:	d03f      	beq.n	8001a88 <calcul+0x9c>
 8001a08:	2b78      	cmp	r3, #120	@ 0x78
 8001a0a:	dc59      	bgt.n	8001ac0 <calcul+0xd4>
 8001a0c:	2b2d      	cmp	r3, #45	@ 0x2d
 8001a0e:	d020      	beq.n	8001a52 <calcul+0x66>
 8001a10:	2b2d      	cmp	r3, #45	@ 0x2d
 8001a12:	dc55      	bgt.n	8001ac0 <calcul+0xd4>
 8001a14:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a16:	d037      	beq.n	8001a88 <calcul+0x9c>
 8001a18:	2b2b      	cmp	r3, #43	@ 0x2b
 8001a1a:	d151      	bne.n	8001ac0 <calcul+0xd4>
		{
		case '+':
			printf("%s + %s = %d\r\n", argv[1], argv[3], atoi(argv[1])+atoi(argv[3]));
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	3304      	adds	r3, #4
 8001a20:	681c      	ldr	r4, [r3, #0]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	330c      	adds	r3, #12
 8001a26:	681d      	ldr	r5, [r3, #0]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f009 fac2 	bl	800afb8 <atoi>
 8001a34:	4606      	mov	r6, r0
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	330c      	adds	r3, #12
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f009 fabb 	bl	800afb8 <atoi>
 8001a42:	4603      	mov	r3, r0
 8001a44:	4433      	add	r3, r6
 8001a46:	462a      	mov	r2, r5
 8001a48:	4621      	mov	r1, r4
 8001a4a:	4823      	ldr	r0, [pc, #140]	@ (8001ad8 <calcul+0xec>)
 8001a4c:	f009 fbfe 	bl	800b24c <iprintf>
			break;
 8001a50:	e03d      	b.n	8001ace <calcul+0xe2>
		case '-':
			printf("%s - %s = %d\r\n", argv[1], argv[3], atoi(argv[1])-atoi(argv[3]));
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	3304      	adds	r3, #4
 8001a56:	681c      	ldr	r4, [r3, #0]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	330c      	adds	r3, #12
 8001a5c:	681d      	ldr	r5, [r3, #0]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	3304      	adds	r3, #4
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f009 faa7 	bl	800afb8 <atoi>
 8001a6a:	4606      	mov	r6, r0
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	330c      	adds	r3, #12
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f009 faa0 	bl	800afb8 <atoi>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	1af3      	subs	r3, r6, r3
 8001a7c:	462a      	mov	r2, r5
 8001a7e:	4621      	mov	r1, r4
 8001a80:	4816      	ldr	r0, [pc, #88]	@ (8001adc <calcul+0xf0>)
 8001a82:	f009 fbe3 	bl	800b24c <iprintf>
			break;
 8001a86:	e022      	b.n	8001ace <calcul+0xe2>
		case '*':
		case 'x':
			printf("%s * %s = %d\r\n", argv[1], argv[3], atoi(argv[1])*atoi(argv[3]));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	3304      	adds	r3, #4
 8001a8c:	681c      	ldr	r4, [r3, #0]
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	330c      	adds	r3, #12
 8001a92:	681d      	ldr	r5, [r3, #0]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	3304      	adds	r3, #4
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f009 fa8c 	bl	800afb8 <atoi>
 8001aa0:	4606      	mov	r6, r0
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	330c      	adds	r3, #12
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f009 fa85 	bl	800afb8 <atoi>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	fb06 f303 	mul.w	r3, r6, r3
 8001ab4:	462a      	mov	r2, r5
 8001ab6:	4621      	mov	r1, r4
 8001ab8:	4809      	ldr	r0, [pc, #36]	@ (8001ae0 <calcul+0xf4>)
 8001aba:	f009 fbc7 	bl	800b24c <iprintf>
			break;
 8001abe:	e006      	b.n	8001ace <calcul+0xe2>
		default:
			printf("Opération '%s' non supporté!\r\n", argv[2]);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	3308      	adds	r3, #8
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4806      	ldr	r0, [pc, #24]	@ (8001ae4 <calcul+0xf8>)
 8001aca:	f009 fbbf 	bl	800b24c <iprintf>
		}
	}

	return 0;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ad8:	0800c7f8 	.word	0x0800c7f8
 8001adc:	0800c808 	.word	0x0800c808
 8001ae0:	0800c818 	.word	0x0800c818
 8001ae4:	0800c828 	.word	0x0800c828

08001ae8 <addition>:

int addition(int argc, char ** argv)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
	if (argc > 1)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	dd24      	ble.n	8001b42 <addition+0x5a>
	{
		int somme = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
		for (int i = 1; i < argc; i++)
 8001afc:	2301      	movs	r3, #1
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	e017      	b.n	8001b32 <addition+0x4a>
		{
			printf(" + %s", argv[i]);
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	4413      	add	r3, r2
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	480f      	ldr	r0, [pc, #60]	@ (8001b4c <addition+0x64>)
 8001b10:	f009 fb9c 	bl	800b24c <iprintf>
			somme = somme + atoi(argv[i]);
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f009 fa4a 	bl	800afb8 <atoi>
 8001b24:	4602      	mov	r2, r0
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4413      	add	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]
		for (int i = 1; i < argc; i++)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	dbe3      	blt.n	8001b02 <addition+0x1a>
		}

		printf(" = %d\r\n", somme);
 8001b3a:	68f9      	ldr	r1, [r7, #12]
 8001b3c:	4804      	ldr	r0, [pc, #16]	@ (8001b50 <addition+0x68>)
 8001b3e:	f009 fb85 	bl	800b24c <iprintf>
	}
	return 0;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	0800c84c 	.word	0x0800c84c
 8001b50:	0800c854 	.word	0x0800c854

08001b54 <GPIOExpander_toggle_LED>:

int GPIOExpander_toggle_LED(int argc, char ** argv)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
	if (argc > 1)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	dd16      	ble.n	8001b92 <GPIOExpander_toggle_LED+0x3e>
	{
		for (int i = 1; i < argc; i++)
 8001b64:	2301      	movs	r3, #1
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	e00f      	b.n	8001b8a <GPIOExpander_toggle_LED+0x36>
		{
			MCP23S17_Toggle_LED_id(atoi(argv[i]));
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	4413      	add	r3, r2
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f009 fa1f 	bl	800afb8 <atoi>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fe06 	bl	8001790 <MCP23S17_Toggle_LED_id>
		for (int i = 1; i < argc; i++)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	3301      	adds	r3, #1
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	dbeb      	blt.n	8001b6a <GPIOExpander_toggle_LED+0x16>
		}
	}

	return 0;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <GPIOExpander_set_LED>:

int GPIOExpander_set_LED(int argc, char ** argv)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
	if (argc > 1)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	dd0a      	ble.n	8001bc2 <GPIOExpander_set_LED+0x26>
	{
		MCP23S17_Set_LED_id(atoi(argv[1]));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	3304      	adds	r3, #4
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f009 fa00 	bl	800afb8 <atoi>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fdbb 	bl	8001738 <MCP23S17_Set_LED_id>
	}

	return 0;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <shell_uart_receive_irq_cb>:
static char print_buffer[BUFFER_SIZE];
static SemaphoreHandle_t sem_uart_read = NULL;


void shell_uart_receive_irq_cb(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	607b      	str	r3, [r7, #4]

	xSemaphoreGiveFromISR(sem_uart_read, &pxHigherPriorityTaskWoken);
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001c04 <shell_uart_receive_irq_cb+0x38>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	1d3a      	adds	r2, r7, #4
 8001bdc:	4611      	mov	r1, r2
 8001bde:	4618      	mov	r0, r3
 8001be0:	f007 fbe4 	bl	80093ac <xQueueGiveFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d007      	beq.n	8001bfa <shell_uart_receive_irq_cb+0x2e>
 8001bea:	4b07      	ldr	r3, [pc, #28]	@ (8001c08 <shell_uart_receive_irq_cb+0x3c>)
 8001bec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	f3bf 8f4f 	dsb	sy
 8001bf6:	f3bf 8f6f 	isb	sy
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000fa8 	.word	0x20000fa8
 8001c08:	e000ed04 	.word	0xe000ed04

08001c0c <uart_read>:

static char uart_read() {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
	char c;

	HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t*)(&c), 1);
 8001c12:	1dfb      	adds	r3, r7, #7
 8001c14:	2201      	movs	r2, #1
 8001c16:	4619      	mov	r1, r3
 8001c18:	4807      	ldr	r0, [pc, #28]	@ (8001c38 <uart_read+0x2c>)
 8001c1a:	f005 febd 	bl	8007998 <HAL_UART_Receive_IT>
	// il faut mettre la tâche shell dans l'état bloqué, jusqu'à l'interruption de réception de caractère
	// prendre un sémaphore vide par exemple
	xSemaphoreTake(sem_uart_read, portMAX_DELAY);
 8001c1e:	4b07      	ldr	r3, [pc, #28]	@ (8001c3c <uart_read+0x30>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c26:	4618      	mov	r0, r3
 8001c28:	f007 fc50 	bl	80094cc <xQueueSemaphoreTake>

	return c;
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000be4 	.word	0x20000be4
 8001c3c:	20000fa8 	.word	0x20000fa8

08001c40 <uart_write>:

static int uart_write(char * s, uint16_t size) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
 8001c4c:	887a      	ldrh	r2, [r7, #2]
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	4803      	ldr	r0, [pc, #12]	@ (8001c64 <uart_write+0x24>)
 8001c56:	f005 fe15 	bl	8007884 <HAL_UART_Transmit>
	return size;
 8001c5a:	887b      	ldrh	r3, [r7, #2]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000be4 	.word	0x20000be4

08001c68 <sh_help>:

static int sh_help(int argc, char ** argv) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	e022      	b.n	8001cbe <sh_help+0x56>
		int size;
		size = snprintf (print_buffer, BUFFER_SIZE, "%c: %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 8001c78:	4916      	ldr	r1, [pc, #88]	@ (8001cd4 <sh_help+0x6c>)
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	4413      	add	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	440b      	add	r3, r1
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	4912      	ldr	r1, [pc, #72]	@ (8001cd4 <sh_help+0x6c>)
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	440b      	add	r3, r1
 8001c98:	3308      	adds	r3, #8
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd8 <sh_help+0x70>)
 8001ca2:	2128      	movs	r1, #40	@ 0x28
 8001ca4:	480d      	ldr	r0, [pc, #52]	@ (8001cdc <sh_help+0x74>)
 8001ca6:	f009 fb41 	bl	800b32c <sniprintf>
 8001caa:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	480a      	ldr	r0, [pc, #40]	@ (8001cdc <sh_help+0x74>)
 8001cb4:	f7ff ffc4 	bl	8001c40 <uart_write>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	4b08      	ldr	r3, [pc, #32]	@ (8001ce0 <sh_help+0x78>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	dbd7      	blt.n	8001c78 <sh_help+0x10>
	}

	return 0;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000c80 	.word	0x20000c80
 8001cd8:	0800c85c 	.word	0x0800c85c
 8001cdc:	20000f80 	.word	0x20000f80
 8001ce0:	20000c7c 	.word	0x20000c7c

08001ce4 <shell_init>:

void shell_init() {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
	int size = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]

	size = snprintf (print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8001cee:	4a13      	ldr	r2, [pc, #76]	@ (8001d3c <shell_init+0x58>)
 8001cf0:	2128      	movs	r1, #40	@ 0x28
 8001cf2:	4813      	ldr	r0, [pc, #76]	@ (8001d40 <shell_init+0x5c>)
 8001cf4:	f009 fb1a 	bl	800b32c <sniprintf>
 8001cf8:	6078      	str	r0, [r7, #4]
	uart_write(print_buffer, size);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	4619      	mov	r1, r3
 8001d00:	480f      	ldr	r0, [pc, #60]	@ (8001d40 <shell_init+0x5c>)
 8001d02:	f7ff ff9d 	bl	8001c40 <uart_write>

	sem_uart_read = xSemaphoreCreateBinary();
 8001d06:	2203      	movs	r2, #3
 8001d08:	2100      	movs	r1, #0
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	f007 faf4 	bl	80092f8 <xQueueGenericCreate>
 8001d10:	4603      	mov	r3, r0
 8001d12:	4a0c      	ldr	r2, [pc, #48]	@ (8001d44 <shell_init+0x60>)
 8001d14:	6013      	str	r3, [r2, #0]
	if (sem_uart_read == NULL)
 8001d16:	4b0b      	ldr	r3, [pc, #44]	@ (8001d44 <shell_init+0x60>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d104      	bne.n	8001d28 <shell_init+0x44>
	{
		printf("Error semaphore shell\r\n");
 8001d1e:	480a      	ldr	r0, [pc, #40]	@ (8001d48 <shell_init+0x64>)
 8001d20:	f009 fafc 	bl	800b31c <puts>
		while(1);
 8001d24:	bf00      	nop
 8001d26:	e7fd      	b.n	8001d24 <shell_init+0x40>
	}

	shell_add('h', sh_help, "Help");
 8001d28:	4a08      	ldr	r2, [pc, #32]	@ (8001d4c <shell_init+0x68>)
 8001d2a:	4909      	ldr	r1, [pc, #36]	@ (8001d50 <shell_init+0x6c>)
 8001d2c:	2068      	movs	r0, #104	@ 0x68
 8001d2e:	f000 f811 	bl	8001d54 <shell_add>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	0800c868 	.word	0x0800c868
 8001d40:	20000f80 	.word	0x20000f80
 8001d44:	20000fa8 	.word	0x20000fa8
 8001d48:	0800c890 	.word	0x0800c890
 8001d4c:	0800c8a8 	.word	0x0800c8a8
 8001d50:	08001c69 	.word	0x08001c69

08001d54 <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
 8001d60:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8001d62:	4b19      	ldr	r3, [pc, #100]	@ (8001dc8 <shell_add+0x74>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d68:	dc26      	bgt.n	8001db8 <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 8001d6a:	4b17      	ldr	r3, [pc, #92]	@ (8001dc8 <shell_add+0x74>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	4917      	ldr	r1, [pc, #92]	@ (8001dcc <shell_add+0x78>)
 8001d70:	4613      	mov	r3, r2
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	4413      	add	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	7bfa      	ldrb	r2, [r7, #15]
 8001d7c:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 8001d7e:	4b12      	ldr	r3, [pc, #72]	@ (8001dc8 <shell_add+0x74>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	4912      	ldr	r1, [pc, #72]	@ (8001dcc <shell_add+0x78>)
 8001d84:	4613      	mov	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4413      	add	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	3304      	adds	r3, #4
 8001d90:	68ba      	ldr	r2, [r7, #8]
 8001d92:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 8001d94:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc8 <shell_add+0x74>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	490c      	ldr	r1, [pc, #48]	@ (8001dcc <shell_add+0x78>)
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4413      	add	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	440b      	add	r3, r1
 8001da4:	3308      	adds	r3, #8
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 8001daa:	4b07      	ldr	r3, [pc, #28]	@ (8001dc8 <shell_add+0x74>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	3301      	adds	r3, #1
 8001db0:	4a05      	ldr	r2, [pc, #20]	@ (8001dc8 <shell_add+0x74>)
 8001db2:	6013      	str	r3, [r2, #0]
		return 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	e001      	b.n	8001dbc <shell_add+0x68>
	}

	return -1;
 8001db8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	20000c7c 	.word	0x20000c7c
 8001dcc:	20000c80 	.word	0x20000c80

08001dd0 <shell_exec>:

static int shell_exec(char * buf) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b090      	sub	sp, #64	@ 0x40
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	int i;

	char c = buf[0];
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001de0:	2300      	movs	r3, #0
 8001de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001de4:	e040      	b.n	8001e68 <shell_exec+0x98>
		if (shell_func_list[i].c == c) {
 8001de6:	492d      	ldr	r1, [pc, #180]	@ (8001e9c <shell_exec+0xcc>)
 8001de8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001dea:	4613      	mov	r3, r2
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	4413      	add	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	440b      	add	r3, r1
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d131      	bne.n	8001e62 <shell_exec+0x92>
			argc = 1;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e0a:	e013      	b.n	8001e34 <shell_exec+0x64>
				if(*p == ' ') {
 8001e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b20      	cmp	r3, #32
 8001e12:	d10c      	bne.n	8001e2e <shell_exec+0x5e>
					*p = '\0';
 8001e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e16:	2200      	movs	r2, #0
 8001e18:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 8001e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e1c:	1c5a      	adds	r2, r3, #1
 8001e1e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001e20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e22:	3201      	adds	r2, #1
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	3340      	adds	r3, #64	@ 0x40
 8001e28:	443b      	add	r3, r7
 8001e2a:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8001e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e30:	3301      	adds	r3, #1
 8001e32:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d002      	beq.n	8001e42 <shell_exec+0x72>
 8001e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e3e:	2b07      	cmp	r3, #7
 8001e40:	dde4      	ble.n	8001e0c <shell_exec+0x3c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 8001e42:	4916      	ldr	r1, [pc, #88]	@ (8001e9c <shell_exec+0xcc>)
 8001e44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e46:	4613      	mov	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	440b      	add	r3, r1
 8001e50:	3304      	adds	r3, #4
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f107 020c 	add.w	r2, r7, #12
 8001e58:	4611      	mov	r1, r2
 8001e5a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001e5c:	4798      	blx	r3
 8001e5e:	4603      	mov	r3, r0
 8001e60:	e017      	b.n	8001e92 <shell_exec+0xc2>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001e62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e64:	3301      	adds	r3, #1
 8001e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e68:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea0 <shell_exec+0xd0>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	dbb9      	blt.n	8001de6 <shell_exec+0x16>
		}
	}

	int size;
	size = snprintf (print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8001e72:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e76:	4a0b      	ldr	r2, [pc, #44]	@ (8001ea4 <shell_exec+0xd4>)
 8001e78:	2128      	movs	r1, #40	@ 0x28
 8001e7a:	480b      	ldr	r0, [pc, #44]	@ (8001ea8 <shell_exec+0xd8>)
 8001e7c:	f009 fa56 	bl	800b32c <sniprintf>
 8001e80:	62f8      	str	r0, [r7, #44]	@ 0x2c
	uart_write(print_buffer, size);
 8001e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	4619      	mov	r1, r3
 8001e88:	4807      	ldr	r0, [pc, #28]	@ (8001ea8 <shell_exec+0xd8>)
 8001e8a:	f7ff fed9 	bl	8001c40 <uart_write>
	return -1;
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3740      	adds	r7, #64	@ 0x40
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000c80 	.word	0x20000c80
 8001ea0:	20000c7c 	.word	0x20000c7c
 8001ea4:	0800c8b0 	.word	0x0800c8b0
 8001ea8:	20000f80 	.word	0x20000f80

08001eac <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run() {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
	int reading = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60bb      	str	r3, [r7, #8]

	static char cmd_buffer[BUFFER_SIZE];

	while (1) {
		uart_write(prompt, 2);
 8001eba:	2102      	movs	r1, #2
 8001ebc:	482a      	ldr	r0, [pc, #168]	@ (8001f68 <shell_run+0xbc>)
 8001ebe:	f7ff febf 	bl	8001c40 <uart_write>
		reading = 1;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	60fb      	str	r3, [r7, #12]

		while(reading) {
 8001ec6:	e047      	b.n	8001f58 <shell_run+0xac>
			char c = uart_read();
 8001ec8:	f7ff fea0 	bl	8001c0c <uart_read>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	70fb      	strb	r3, [r7, #3]
			int size;

			switch (c) {
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d025      	beq.n	8001f22 <shell_run+0x76>
 8001ed6:	2b0d      	cmp	r3, #13
 8001ed8:	d12e      	bne.n	8001f38 <shell_run+0x8c>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (print_buffer, BUFFER_SIZE, "\r\n");
 8001eda:	4a24      	ldr	r2, [pc, #144]	@ (8001f6c <shell_run+0xc0>)
 8001edc:	2128      	movs	r1, #40	@ 0x28
 8001ede:	4824      	ldr	r0, [pc, #144]	@ (8001f70 <shell_run+0xc4>)
 8001ee0:	f009 fa24 	bl	800b32c <sniprintf>
 8001ee4:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	4619      	mov	r1, r3
 8001eec:	4820      	ldr	r0, [pc, #128]	@ (8001f70 <shell_run+0xc4>)
 8001eee:	f7ff fea7 	bl	8001c40 <uart_write>
				cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	1c5a      	adds	r2, r3, #1
 8001ef6:	60ba      	str	r2, [r7, #8]
 8001ef8:	4a1e      	ldr	r2, [pc, #120]	@ (8001f74 <shell_run+0xc8>)
 8001efa:	2100      	movs	r1, #0
 8001efc:	54d1      	strb	r1, [r2, r3]
				size = snprintf (print_buffer, BUFFER_SIZE, ":%s\r\n", cmd_buffer);
 8001efe:	4b1d      	ldr	r3, [pc, #116]	@ (8001f74 <shell_run+0xc8>)
 8001f00:	4a1d      	ldr	r2, [pc, #116]	@ (8001f78 <shell_run+0xcc>)
 8001f02:	2128      	movs	r1, #40	@ 0x28
 8001f04:	481a      	ldr	r0, [pc, #104]	@ (8001f70 <shell_run+0xc4>)
 8001f06:	f009 fa11 	bl	800b32c <sniprintf>
 8001f0a:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	4619      	mov	r1, r3
 8001f12:	4817      	ldr	r0, [pc, #92]	@ (8001f70 <shell_run+0xc4>)
 8001f14:	f7ff fe94 	bl	8001c40 <uart_write>
				reading = 0;        //exit read loop
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
				pos = 0;            //reset buffer
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60bb      	str	r3, [r7, #8]
				break;
 8001f20:	e01a      	b.n	8001f58 <shell_run+0xac>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	dd16      	ble.n	8001f56 <shell_run+0xaa>
					pos--;          //remove it in buffer
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	60bb      	str	r3, [r7, #8]

					uart_write(backspace, 3);	// delete the char on the terminal
 8001f2e:	2103      	movs	r1, #3
 8001f30:	4812      	ldr	r0, [pc, #72]	@ (8001f7c <shell_run+0xd0>)
 8001f32:	f7ff fe85 	bl	8001c40 <uart_write>
				}
				break;
 8001f36:	e00e      	b.n	8001f56 <shell_run+0xaa>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	2b27      	cmp	r3, #39	@ 0x27
 8001f3c:	dc0c      	bgt.n	8001f58 <shell_run+0xac>
					uart_write(&c, 1);
 8001f3e:	1cfb      	adds	r3, r7, #3
 8001f40:	2101      	movs	r1, #1
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fe7c 	bl	8001c40 <uart_write>
					cmd_buffer[pos++] = c; //store
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	60ba      	str	r2, [r7, #8]
 8001f4e:	78f9      	ldrb	r1, [r7, #3]
 8001f50:	4a08      	ldr	r2, [pc, #32]	@ (8001f74 <shell_run+0xc8>)
 8001f52:	54d1      	strb	r1, [r2, r3]
 8001f54:	e000      	b.n	8001f58 <shell_run+0xac>
				break;
 8001f56:	bf00      	nop
		while(reading) {
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1b4      	bne.n	8001ec8 <shell_run+0x1c>
				}
			}
		}
		shell_exec(cmd_buffer);
 8001f5e:	4805      	ldr	r0, [pc, #20]	@ (8001f74 <shell_run+0xc8>)
 8001f60:	f7ff ff36 	bl	8001dd0 <shell_exec>
		uart_write(prompt, 2);
 8001f64:	e7a9      	b.n	8001eba <shell_run+0xe>
 8001f66:	bf00      	nop
 8001f68:	20000008 	.word	0x20000008
 8001f6c:	0800c8c8 	.word	0x0800c8c8
 8001f70:	20000f80 	.word	0x20000f80
 8001f74:	20000fac 	.word	0x20000fac
 8001f78:	0800c8cc 	.word	0x0800c8cc
 8001f7c:	20000004 	.word	0x20000004

08001f80 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001fbc <HAL_Init+0x3c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a0b      	ldr	r2, [pc, #44]	@ (8001fbc <HAL_Init+0x3c>)
 8001f90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f94:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f96:	2003      	movs	r0, #3
 8001f98:	f000 f8df 	bl	800215a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f9c:	200f      	movs	r0, #15
 8001f9e:	f7ff f8e7 	bl	8001170 <HAL_InitTick>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d002      	beq.n	8001fae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	71fb      	strb	r3, [r7, #7]
 8001fac:	e001      	b.n	8001fb2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fae:	f7ff f8b7 	bl	8001120 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40022000 	.word	0x40022000

08001fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <HAL_IncTick+0x20>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <HAL_IncTick+0x24>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4413      	add	r3, r2
 8001fd0:	4a04      	ldr	r2, [pc, #16]	@ (8001fe4 <HAL_IncTick+0x24>)
 8001fd2:	6013      	str	r3, [r2, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000010 	.word	0x20000010
 8001fe4:	20000fd4 	.word	0x20000fd4

08001fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return uwTick;
 8001fec:	4b03      	ldr	r3, [pc, #12]	@ (8001ffc <HAL_GetTick+0x14>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20000fd4 	.word	0x20000fd4

08002000 <__NVIC_SetPriorityGrouping>:
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002010:	4b0c      	ldr	r3, [pc, #48]	@ (8002044 <__NVIC_SetPriorityGrouping+0x44>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800201c:	4013      	ands	r3, r2
 800201e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002028:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800202c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002032:	4a04      	ldr	r2, [pc, #16]	@ (8002044 <__NVIC_SetPriorityGrouping+0x44>)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	60d3      	str	r3, [r2, #12]
}
 8002038:	bf00      	nop
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <__NVIC_GetPriorityGrouping>:
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800204c:	4b04      	ldr	r3, [pc, #16]	@ (8002060 <__NVIC_GetPriorityGrouping+0x18>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	f003 0307 	and.w	r3, r3, #7
}
 8002056:	4618      	mov	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <__NVIC_EnableIRQ>:
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	2b00      	cmp	r3, #0
 8002074:	db0b      	blt.n	800208e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	f003 021f 	and.w	r2, r3, #31
 800207c:	4907      	ldr	r1, [pc, #28]	@ (800209c <__NVIC_EnableIRQ+0x38>)
 800207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002082:	095b      	lsrs	r3, r3, #5
 8002084:	2001      	movs	r0, #1
 8002086:	fa00 f202 	lsl.w	r2, r0, r2
 800208a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	e000e100 	.word	0xe000e100

080020a0 <__NVIC_SetPriority>:
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	6039      	str	r1, [r7, #0]
 80020aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	db0a      	blt.n	80020ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	490c      	ldr	r1, [pc, #48]	@ (80020ec <__NVIC_SetPriority+0x4c>)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	0112      	lsls	r2, r2, #4
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	440b      	add	r3, r1
 80020c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80020c8:	e00a      	b.n	80020e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	4908      	ldr	r1, [pc, #32]	@ (80020f0 <__NVIC_SetPriority+0x50>)
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	3b04      	subs	r3, #4
 80020d8:	0112      	lsls	r2, r2, #4
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	440b      	add	r3, r1
 80020de:	761a      	strb	r2, [r3, #24]
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000e100 	.word	0xe000e100
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <NVIC_EncodePriority>:
{
 80020f4:	b480      	push	{r7}
 80020f6:	b089      	sub	sp, #36	@ 0x24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f1c3 0307 	rsb	r3, r3, #7
 800210e:	2b04      	cmp	r3, #4
 8002110:	bf28      	it	cs
 8002112:	2304      	movcs	r3, #4
 8002114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3304      	adds	r3, #4
 800211a:	2b06      	cmp	r3, #6
 800211c:	d902      	bls.n	8002124 <NVIC_EncodePriority+0x30>
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3b03      	subs	r3, #3
 8002122:	e000      	b.n	8002126 <NVIC_EncodePriority+0x32>
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002128:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43da      	mvns	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	401a      	ands	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800213c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	fa01 f303 	lsl.w	r3, r1, r3
 8002146:	43d9      	mvns	r1, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	4313      	orrs	r3, r2
}
 800214e:	4618      	mov	r0, r3
 8002150:	3724      	adds	r7, #36	@ 0x24
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff ff4c 	bl	8002000 <__NVIC_SetPriorityGrouping>
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002182:	f7ff ff61 	bl	8002048 <__NVIC_GetPriorityGrouping>
 8002186:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	68b9      	ldr	r1, [r7, #8]
 800218c:	6978      	ldr	r0, [r7, #20]
 800218e:	f7ff ffb1 	bl	80020f4 <NVIC_EncodePriority>
 8002192:	4602      	mov	r2, r0
 8002194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002198:	4611      	mov	r1, r2
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff ff80 	bl	80020a0 <__NVIC_SetPriority>
}
 80021a0:	bf00      	nop
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff ff54 	bl	8002064 <__NVIC_EnableIRQ>
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e098      	b.n	8002308 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002314 <HAL_DMA_Init+0x150>)
 80021de:	429a      	cmp	r2, r3
 80021e0:	d80f      	bhi.n	8002202 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	4b4b      	ldr	r3, [pc, #300]	@ (8002318 <HAL_DMA_Init+0x154>)
 80021ea:	4413      	add	r3, r2
 80021ec:	4a4b      	ldr	r2, [pc, #300]	@ (800231c <HAL_DMA_Init+0x158>)
 80021ee:	fba2 2303 	umull	r2, r3, r2, r3
 80021f2:	091b      	lsrs	r3, r3, #4
 80021f4:	009a      	lsls	r2, r3, #2
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a48      	ldr	r2, [pc, #288]	@ (8002320 <HAL_DMA_Init+0x15c>)
 80021fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8002200:	e00e      	b.n	8002220 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	4b46      	ldr	r3, [pc, #280]	@ (8002324 <HAL_DMA_Init+0x160>)
 800220a:	4413      	add	r3, r2
 800220c:	4a43      	ldr	r2, [pc, #268]	@ (800231c <HAL_DMA_Init+0x158>)
 800220e:	fba2 2303 	umull	r2, r3, r2, r3
 8002212:	091b      	lsrs	r3, r3, #4
 8002214:	009a      	lsls	r2, r3, #2
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a42      	ldr	r2, [pc, #264]	@ (8002328 <HAL_DMA_Init+0x164>)
 800221e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2202      	movs	r2, #2
 8002224:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800223a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002244:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002250:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800225c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	4313      	orrs	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800227a:	d039      	beq.n	80022f0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002280:	4a27      	ldr	r2, [pc, #156]	@ (8002320 <HAL_DMA_Init+0x15c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d11a      	bne.n	80022bc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002286:	4b29      	ldr	r3, [pc, #164]	@ (800232c <HAL_DMA_Init+0x168>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228e:	f003 031c 	and.w	r3, r3, #28
 8002292:	210f      	movs	r1, #15
 8002294:	fa01 f303 	lsl.w	r3, r1, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	4924      	ldr	r1, [pc, #144]	@ (800232c <HAL_DMA_Init+0x168>)
 800229c:	4013      	ands	r3, r2
 800229e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80022a0:	4b22      	ldr	r3, [pc, #136]	@ (800232c <HAL_DMA_Init+0x168>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6859      	ldr	r1, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ac:	f003 031c 	and.w	r3, r3, #28
 80022b0:	fa01 f303 	lsl.w	r3, r1, r3
 80022b4:	491d      	ldr	r1, [pc, #116]	@ (800232c <HAL_DMA_Init+0x168>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	600b      	str	r3, [r1, #0]
 80022ba:	e019      	b.n	80022f0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80022bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002330 <HAL_DMA_Init+0x16c>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c4:	f003 031c 	and.w	r3, r3, #28
 80022c8:	210f      	movs	r1, #15
 80022ca:	fa01 f303 	lsl.w	r3, r1, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	4917      	ldr	r1, [pc, #92]	@ (8002330 <HAL_DMA_Init+0x16c>)
 80022d2:	4013      	ands	r3, r2
 80022d4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80022d6:	4b16      	ldr	r3, [pc, #88]	@ (8002330 <HAL_DMA_Init+0x16c>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6859      	ldr	r1, [r3, #4]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e2:	f003 031c 	and.w	r3, r3, #28
 80022e6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ea:	4911      	ldr	r1, [pc, #68]	@ (8002330 <HAL_DMA_Init+0x16c>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	40020407 	.word	0x40020407
 8002318:	bffdfff8 	.word	0xbffdfff8
 800231c:	cccccccd 	.word	0xcccccccd
 8002320:	40020000 	.word	0x40020000
 8002324:	bffdfbf8 	.word	0xbffdfbf8
 8002328:	40020400 	.word	0x40020400
 800232c:	400200a8 	.word	0x400200a8
 8002330:	400204a8 	.word	0x400204a8

08002334 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
 8002340:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002342:	2300      	movs	r3, #0
 8002344:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800234c:	2b01      	cmp	r3, #1
 800234e:	d101      	bne.n	8002354 <HAL_DMA_Start_IT+0x20>
 8002350:	2302      	movs	r3, #2
 8002352:	e04b      	b.n	80023ec <HAL_DMA_Start_IT+0xb8>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b01      	cmp	r3, #1
 8002366:	d13a      	bne.n	80023de <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2202      	movs	r2, #2
 800236c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0201 	bic.w	r2, r2, #1
 8002384:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	68b9      	ldr	r1, [r7, #8]
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 f95f 	bl	8002650 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002396:	2b00      	cmp	r3, #0
 8002398:	d008      	beq.n	80023ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f042 020e 	orr.w	r2, r2, #14
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	e00f      	b.n	80023cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0204 	bic.w	r2, r2, #4
 80023ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 020a 	orr.w	r2, r2, #10
 80023ca:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	e005      	b.n	80023ea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80023e6:	2302      	movs	r3, #2
 80023e8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80023ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d008      	beq.n	800241e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2204      	movs	r2, #4
 8002410:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e022      	b.n	8002464 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 020e 	bic.w	r2, r2, #14
 800242c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0201 	bic.w	r2, r2, #1
 800243c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002442:	f003 021c 	and.w	r2, r3, #28
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244a:	2101      	movs	r1, #1
 800244c:	fa01 f202 	lsl.w	r2, r1, r2
 8002450:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002462:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002464:	4618      	mov	r0, r3
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d005      	beq.n	8002494 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2204      	movs	r2, #4
 800248c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	73fb      	strb	r3, [r7, #15]
 8002492:	e029      	b.n	80024e8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 020e 	bic.w	r2, r2, #14
 80024a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0201 	bic.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b8:	f003 021c 	and.w	r2, r3, #28
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c0:	2101      	movs	r1, #1
 80024c2:	fa01 f202 	lsl.w	r2, r1, r2
 80024c6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	4798      	blx	r3
    }
  }
  return status;
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b084      	sub	sp, #16
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250e:	f003 031c 	and.w	r3, r3, #28
 8002512:	2204      	movs	r2, #4
 8002514:	409a      	lsls	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4013      	ands	r3, r2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d026      	beq.n	800256c <HAL_DMA_IRQHandler+0x7a>
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d021      	beq.n	800256c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0320 	and.w	r3, r3, #32
 8002532:	2b00      	cmp	r3, #0
 8002534:	d107      	bne.n	8002546 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0204 	bic.w	r2, r2, #4
 8002544:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254a:	f003 021c 	and.w	r2, r3, #28
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002552:	2104      	movs	r1, #4
 8002554:	fa01 f202 	lsl.w	r2, r1, r2
 8002558:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	2b00      	cmp	r3, #0
 8002560:	d071      	beq.n	8002646 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800256a:	e06c      	b.n	8002646 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002570:	f003 031c 	and.w	r3, r3, #28
 8002574:	2202      	movs	r2, #2
 8002576:	409a      	lsls	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4013      	ands	r3, r2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d02e      	beq.n	80025de <HAL_DMA_IRQHandler+0xec>
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d029      	beq.n	80025de <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0320 	and.w	r3, r3, #32
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10b      	bne.n	80025b0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 020a 	bic.w	r2, r2, #10
 80025a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b4:	f003 021c 	and.w	r2, r3, #28
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025bc:	2102      	movs	r1, #2
 80025be:	fa01 f202 	lsl.w	r2, r1, r2
 80025c2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d038      	beq.n	8002646 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80025dc:	e033      	b.n	8002646 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e2:	f003 031c 	and.w	r3, r3, #28
 80025e6:	2208      	movs	r2, #8
 80025e8:	409a      	lsls	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d02a      	beq.n	8002648 <HAL_DMA_IRQHandler+0x156>
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d025      	beq.n	8002648 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 020e 	bic.w	r2, r2, #14
 800260a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002610:	f003 021c 	and.w	r2, r3, #28
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002618:	2101      	movs	r1, #1
 800261a:	fa01 f202 	lsl.w	r2, r1, r2
 800261e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800263a:	2b00      	cmp	r3, #0
 800263c:	d004      	beq.n	8002648 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002646:	bf00      	nop
 8002648:	bf00      	nop
}
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
 800265c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002662:	f003 021c 	and.w	r2, r3, #28
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	2101      	movs	r1, #1
 800266c:	fa01 f202 	lsl.w	r2, r1, r2
 8002670:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b10      	cmp	r3, #16
 8002680:	d108      	bne.n	8002694 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002692:	e007      	b.n	80026a4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	60da      	str	r2, [r3, #12]
}
 80026a4:	bf00      	nop
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026be:	e17f      	b.n	80029c0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	2101      	movs	r1, #1
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	fa01 f303 	lsl.w	r3, r1, r3
 80026cc:	4013      	ands	r3, r2
 80026ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 8171 	beq.w	80029ba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f003 0303 	and.w	r3, r3, #3
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d005      	beq.n	80026f0 <HAL_GPIO_Init+0x40>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d130      	bne.n	8002752 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	2203      	movs	r2, #3
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4013      	ands	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002726:	2201      	movs	r2, #1
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	4013      	ands	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	091b      	lsrs	r3, r3, #4
 800273c:	f003 0201 	and.w	r2, r3, #1
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	2b03      	cmp	r3, #3
 800275c:	d118      	bne.n	8002790 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002762:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002764:	2201      	movs	r2, #1
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4013      	ands	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	08db      	lsrs	r3, r3, #3
 800277a:	f003 0201 	and.w	r2, r3, #1
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 0303 	and.w	r3, r3, #3
 8002798:	2b03      	cmp	r3, #3
 800279a:	d017      	beq.n	80027cc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	2203      	movs	r2, #3
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4013      	ands	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 0303 	and.w	r3, r3, #3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d123      	bne.n	8002820 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	08da      	lsrs	r2, r3, #3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3208      	adds	r2, #8
 80027e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	220f      	movs	r2, #15
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4013      	ands	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	08da      	lsrs	r2, r3, #3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3208      	adds	r2, #8
 800281a:	6939      	ldr	r1, [r7, #16]
 800281c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	2203      	movs	r2, #3
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4013      	ands	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 0203 	and.w	r2, r3, #3
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 80ac 	beq.w	80029ba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002862:	4b5f      	ldr	r3, [pc, #380]	@ (80029e0 <HAL_GPIO_Init+0x330>)
 8002864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002866:	4a5e      	ldr	r2, [pc, #376]	@ (80029e0 <HAL_GPIO_Init+0x330>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	6613      	str	r3, [r2, #96]	@ 0x60
 800286e:	4b5c      	ldr	r3, [pc, #368]	@ (80029e0 <HAL_GPIO_Init+0x330>)
 8002870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800287a:	4a5a      	ldr	r2, [pc, #360]	@ (80029e4 <HAL_GPIO_Init+0x334>)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	089b      	lsrs	r3, r3, #2
 8002880:	3302      	adds	r3, #2
 8002882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002886:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	220f      	movs	r2, #15
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4013      	ands	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80028a4:	d025      	beq.n	80028f2 <HAL_GPIO_Init+0x242>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a4f      	ldr	r2, [pc, #316]	@ (80029e8 <HAL_GPIO_Init+0x338>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d01f      	beq.n	80028ee <HAL_GPIO_Init+0x23e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a4e      	ldr	r2, [pc, #312]	@ (80029ec <HAL_GPIO_Init+0x33c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d019      	beq.n	80028ea <HAL_GPIO_Init+0x23a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a4d      	ldr	r2, [pc, #308]	@ (80029f0 <HAL_GPIO_Init+0x340>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d013      	beq.n	80028e6 <HAL_GPIO_Init+0x236>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a4c      	ldr	r2, [pc, #304]	@ (80029f4 <HAL_GPIO_Init+0x344>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d00d      	beq.n	80028e2 <HAL_GPIO_Init+0x232>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a4b      	ldr	r2, [pc, #300]	@ (80029f8 <HAL_GPIO_Init+0x348>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d007      	beq.n	80028de <HAL_GPIO_Init+0x22e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a4a      	ldr	r2, [pc, #296]	@ (80029fc <HAL_GPIO_Init+0x34c>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d101      	bne.n	80028da <HAL_GPIO_Init+0x22a>
 80028d6:	2306      	movs	r3, #6
 80028d8:	e00c      	b.n	80028f4 <HAL_GPIO_Init+0x244>
 80028da:	2307      	movs	r3, #7
 80028dc:	e00a      	b.n	80028f4 <HAL_GPIO_Init+0x244>
 80028de:	2305      	movs	r3, #5
 80028e0:	e008      	b.n	80028f4 <HAL_GPIO_Init+0x244>
 80028e2:	2304      	movs	r3, #4
 80028e4:	e006      	b.n	80028f4 <HAL_GPIO_Init+0x244>
 80028e6:	2303      	movs	r3, #3
 80028e8:	e004      	b.n	80028f4 <HAL_GPIO_Init+0x244>
 80028ea:	2302      	movs	r3, #2
 80028ec:	e002      	b.n	80028f4 <HAL_GPIO_Init+0x244>
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <HAL_GPIO_Init+0x244>
 80028f2:	2300      	movs	r3, #0
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	f002 0203 	and.w	r2, r2, #3
 80028fa:	0092      	lsls	r2, r2, #2
 80028fc:	4093      	lsls	r3, r2
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002904:	4937      	ldr	r1, [pc, #220]	@ (80029e4 <HAL_GPIO_Init+0x334>)
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	089b      	lsrs	r3, r3, #2
 800290a:	3302      	adds	r3, #2
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002912:	4b3b      	ldr	r3, [pc, #236]	@ (8002a00 <HAL_GPIO_Init+0x350>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	43db      	mvns	r3, r3
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	4013      	ands	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4313      	orrs	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002936:	4a32      	ldr	r2, [pc, #200]	@ (8002a00 <HAL_GPIO_Init+0x350>)
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800293c:	4b30      	ldr	r3, [pc, #192]	@ (8002a00 <HAL_GPIO_Init+0x350>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	43db      	mvns	r3, r3
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4013      	ands	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d003      	beq.n	8002960 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	4313      	orrs	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002960:	4a27      	ldr	r2, [pc, #156]	@ (8002a00 <HAL_GPIO_Init+0x350>)
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002966:	4b26      	ldr	r3, [pc, #152]	@ (8002a00 <HAL_GPIO_Init+0x350>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	43db      	mvns	r3, r3
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4013      	ands	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800298a:	4a1d      	ldr	r2, [pc, #116]	@ (8002a00 <HAL_GPIO_Init+0x350>)
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002990:	4b1b      	ldr	r3, [pc, #108]	@ (8002a00 <HAL_GPIO_Init+0x350>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	43db      	mvns	r3, r3
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4013      	ands	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029b4:	4a12      	ldr	r2, [pc, #72]	@ (8002a00 <HAL_GPIO_Init+0x350>)
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	3301      	adds	r3, #1
 80029be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f47f ae78 	bne.w	80026c0 <HAL_GPIO_Init+0x10>
  }
}
 80029d0:	bf00      	nop
 80029d2:	bf00      	nop
 80029d4:	371c      	adds	r7, #28
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40010000 	.word	0x40010000
 80029e8:	48000400 	.word	0x48000400
 80029ec:	48000800 	.word	0x48000800
 80029f0:	48000c00 	.word	0x48000c00
 80029f4:	48001000 	.word	0x48001000
 80029f8:	48001400 	.word	0x48001400
 80029fc:	48001800 	.word	0x48001800
 8002a00:	40010400 	.word	0x40010400

08002a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	807b      	strh	r3, [r7, #2]
 8002a10:	4613      	mov	r3, r2
 8002a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a14:	787b      	ldrb	r3, [r7, #1]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a1a:	887a      	ldrh	r2, [r7, #2]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a20:	e002      	b.n	8002a28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a22:	887a      	ldrh	r2, [r7, #2]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a46:	887a      	ldrh	r2, [r7, #2]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	041a      	lsls	r2, r3, #16
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	43d9      	mvns	r1, r3
 8002a52:	887b      	ldrh	r3, [r7, #2]
 8002a54:	400b      	ands	r3, r1
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	619a      	str	r2, [r3, #24]
}
 8002a5c:	bf00      	nop
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e08d      	b.n	8002b96 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d106      	bne.n	8002a94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7fd fe86 	bl	80007a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2224      	movs	r2, #36	@ 0x24
 8002a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0201 	bic.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ab8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ac8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d107      	bne.n	8002ae2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	e006      	b.n	8002af0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002aee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d108      	bne.n	8002b0a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b06:	605a      	str	r2, [r3, #4]
 8002b08:	e007      	b.n	8002b1a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691a      	ldr	r2, [r3, #16]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69d9      	ldr	r1, [r3, #28]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a1a      	ldr	r2, [r3, #32]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2220      	movs	r2, #32
 8002b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b088      	sub	sp, #32
 8002ba4:	af02      	add	r7, sp, #8
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	4608      	mov	r0, r1
 8002baa:	4611      	mov	r1, r2
 8002bac:	461a      	mov	r2, r3
 8002bae:	4603      	mov	r3, r0
 8002bb0:	817b      	strh	r3, [r7, #10]
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	813b      	strh	r3, [r7, #8]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b20      	cmp	r3, #32
 8002bc4:	f040 80f9 	bne.w	8002dba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <HAL_I2C_Mem_Write+0x34>
 8002bce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d105      	bne.n	8002be0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bda:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0ed      	b.n	8002dbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <HAL_I2C_Mem_Write+0x4e>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e0e6      	b.n	8002dbc <HAL_I2C_Mem_Write+0x21c>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bf6:	f7ff f9f7 	bl	8001fe8 <HAL_GetTick>
 8002bfa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	2319      	movs	r3, #25
 8002c02:	2201      	movs	r2, #1
 8002c04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 fac3 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0d1      	b.n	8002dbc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2221      	movs	r2, #33	@ 0x21
 8002c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2240      	movs	r2, #64	@ 0x40
 8002c24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6a3a      	ldr	r2, [r7, #32]
 8002c32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c40:	88f8      	ldrh	r0, [r7, #6]
 8002c42:	893a      	ldrh	r2, [r7, #8]
 8002c44:	8979      	ldrh	r1, [r7, #10]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	9301      	str	r3, [sp, #4]
 8002c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	4603      	mov	r3, r0
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 f9d3 	bl	8002ffc <I2C_RequestMemoryWrite>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0a9      	b.n	8002dbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2bff      	cmp	r3, #255	@ 0xff
 8002c70:	d90e      	bls.n	8002c90 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	22ff      	movs	r2, #255	@ 0xff
 8002c76:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	8979      	ldrh	r1, [r7, #10]
 8002c80:	2300      	movs	r3, #0
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 fc47 	bl	800351c <I2C_TransferConfig>
 8002c8e:	e00f      	b.n	8002cb0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	8979      	ldrh	r1, [r7, #10]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 fc36 	bl	800351c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 fac6 	bl	8003246 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e07b      	b.n	8002dbc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc8:	781a      	ldrb	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d034      	beq.n	8002d68 <HAL_I2C_Mem_Write+0x1c8>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d130      	bne.n	8002d68 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	2180      	movs	r1, #128	@ 0x80
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 fa3f 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e04d      	b.n	8002dbc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	2bff      	cmp	r3, #255	@ 0xff
 8002d28:	d90e      	bls.n	8002d48 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	22ff      	movs	r2, #255	@ 0xff
 8002d2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	8979      	ldrh	r1, [r7, #10]
 8002d38:	2300      	movs	r3, #0
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 fbeb 	bl	800351c <I2C_TransferConfig>
 8002d46:	e00f      	b.n	8002d68 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	8979      	ldrh	r1, [r7, #10]
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 fbda 	bl	800351c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d19e      	bne.n	8002cb0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 faac 	bl	80032d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e01a      	b.n	8002dbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6859      	ldr	r1, [r3, #4]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc4 <HAL_I2C_Mem_Write+0x224>)
 8002d9a:	400b      	ands	r3, r1
 8002d9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2220      	movs	r2, #32
 8002da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	e000      	b.n	8002dbc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002dba:	2302      	movs	r3, #2
  }
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	fe00e800 	.word	0xfe00e800

08002dc8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	4608      	mov	r0, r1
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	817b      	strh	r3, [r7, #10]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	813b      	strh	r3, [r7, #8]
 8002dde:	4613      	mov	r3, r2
 8002de0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b20      	cmp	r3, #32
 8002dec:	f040 80fd 	bne.w	8002fea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <HAL_I2C_Mem_Read+0x34>
 8002df6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d105      	bne.n	8002e08 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e02:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e0f1      	b.n	8002fec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <HAL_I2C_Mem_Read+0x4e>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e0ea      	b.n	8002fec <HAL_I2C_Mem_Read+0x224>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e1e:	f7ff f8e3 	bl	8001fe8 <HAL_GetTick>
 8002e22:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	2319      	movs	r3, #25
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f000 f9af 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0d5      	b.n	8002fec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2222      	movs	r2, #34	@ 0x22
 8002e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2240      	movs	r2, #64	@ 0x40
 8002e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a3a      	ldr	r2, [r7, #32]
 8002e5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e68:	88f8      	ldrh	r0, [r7, #6]
 8002e6a:	893a      	ldrh	r2, [r7, #8]
 8002e6c:	8979      	ldrh	r1, [r7, #10]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	9301      	str	r3, [sp, #4]
 8002e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	4603      	mov	r3, r0
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 f913 	bl	80030a4 <I2C_RequestMemoryRead>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d005      	beq.n	8002e90 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0ad      	b.n	8002fec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	2bff      	cmp	r3, #255	@ 0xff
 8002e98:	d90e      	bls.n	8002eb8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	8979      	ldrh	r1, [r7, #10]
 8002ea8:	4b52      	ldr	r3, [pc, #328]	@ (8002ff4 <HAL_I2C_Mem_Read+0x22c>)
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 fb33 	bl	800351c <I2C_TransferConfig>
 8002eb6:	e00f      	b.n	8002ed8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	8979      	ldrh	r1, [r7, #10]
 8002eca:	4b4a      	ldr	r3, [pc, #296]	@ (8002ff4 <HAL_I2C_Mem_Read+0x22c>)
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 fb22 	bl	800351c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2104      	movs	r1, #4
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f956 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e07c      	b.n	8002fec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d034      	beq.n	8002f98 <HAL_I2C_Mem_Read+0x1d0>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d130      	bne.n	8002f98 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2180      	movs	r1, #128	@ 0x80
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 f927 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e04d      	b.n	8002fec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2bff      	cmp	r3, #255	@ 0xff
 8002f58:	d90e      	bls.n	8002f78 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	8979      	ldrh	r1, [r7, #10]
 8002f68:	2300      	movs	r3, #0
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 fad3 	bl	800351c <I2C_TransferConfig>
 8002f76:	e00f      	b.n	8002f98 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	8979      	ldrh	r1, [r7, #10]
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 fac2 	bl	800351c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d19a      	bne.n	8002ed8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 f994 	bl	80032d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e01a      	b.n	8002fec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6859      	ldr	r1, [r3, #4]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff8 <HAL_I2C_Mem_Read+0x230>)
 8002fca:	400b      	ands	r3, r1
 8002fcc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	e000      	b.n	8002fec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002fea:	2302      	movs	r3, #2
  }
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	80002400 	.word	0x80002400
 8002ff8:	fe00e800 	.word	0xfe00e800

08002ffc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af02      	add	r7, sp, #8
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	4608      	mov	r0, r1
 8003006:	4611      	mov	r1, r2
 8003008:	461a      	mov	r2, r3
 800300a:	4603      	mov	r3, r0
 800300c:	817b      	strh	r3, [r7, #10]
 800300e:	460b      	mov	r3, r1
 8003010:	813b      	strh	r3, [r7, #8]
 8003012:	4613      	mov	r3, r2
 8003014:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003016:	88fb      	ldrh	r3, [r7, #6]
 8003018:	b2da      	uxtb	r2, r3
 800301a:	8979      	ldrh	r1, [r7, #10]
 800301c:	4b20      	ldr	r3, [pc, #128]	@ (80030a0 <I2C_RequestMemoryWrite+0xa4>)
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 fa79 	bl	800351c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	69b9      	ldr	r1, [r7, #24]
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 f909 	bl	8003246 <I2C_WaitOnTXISFlagUntilTimeout>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e02c      	b.n	8003098 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800303e:	88fb      	ldrh	r3, [r7, #6]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d105      	bne.n	8003050 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003044:	893b      	ldrh	r3, [r7, #8]
 8003046:	b2da      	uxtb	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	629a      	str	r2, [r3, #40]	@ 0x28
 800304e:	e015      	b.n	800307c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003050:	893b      	ldrh	r3, [r7, #8]
 8003052:	0a1b      	lsrs	r3, r3, #8
 8003054:	b29b      	uxth	r3, r3
 8003056:	b2da      	uxtb	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800305e:	69fa      	ldr	r2, [r7, #28]
 8003060:	69b9      	ldr	r1, [r7, #24]
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 f8ef 	bl	8003246 <I2C_WaitOnTXISFlagUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e012      	b.n	8003098 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003072:	893b      	ldrh	r3, [r7, #8]
 8003074:	b2da      	uxtb	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	2200      	movs	r2, #0
 8003084:	2180      	movs	r1, #128	@ 0x80
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 f884 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	80002000 	.word	0x80002000

080030a4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	4608      	mov	r0, r1
 80030ae:	4611      	mov	r1, r2
 80030b0:	461a      	mov	r2, r3
 80030b2:	4603      	mov	r3, r0
 80030b4:	817b      	strh	r3, [r7, #10]
 80030b6:	460b      	mov	r3, r1
 80030b8:	813b      	strh	r3, [r7, #8]
 80030ba:	4613      	mov	r3, r2
 80030bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80030be:	88fb      	ldrh	r3, [r7, #6]
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	8979      	ldrh	r1, [r7, #10]
 80030c4:	4b20      	ldr	r3, [pc, #128]	@ (8003148 <I2C_RequestMemoryRead+0xa4>)
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	2300      	movs	r3, #0
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 fa26 	bl	800351c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030d0:	69fa      	ldr	r2, [r7, #28]
 80030d2:	69b9      	ldr	r1, [r7, #24]
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 f8b6 	bl	8003246 <I2C_WaitOnTXISFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e02c      	b.n	800313e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d105      	bne.n	80030f6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030ea:	893b      	ldrh	r3, [r7, #8]
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80030f4:	e015      	b.n	8003122 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80030f6:	893b      	ldrh	r3, [r7, #8]
 80030f8:	0a1b      	lsrs	r3, r3, #8
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003104:	69fa      	ldr	r2, [r7, #28]
 8003106:	69b9      	ldr	r1, [r7, #24]
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 f89c 	bl	8003246 <I2C_WaitOnTXISFlagUntilTimeout>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e012      	b.n	800313e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003118:	893b      	ldrh	r3, [r7, #8]
 800311a:	b2da      	uxtb	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	2200      	movs	r2, #0
 800312a:	2140      	movs	r1, #64	@ 0x40
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 f831 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	80002000 	.word	0x80002000

0800314c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b02      	cmp	r3, #2
 8003160:	d103      	bne.n	800316a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2200      	movs	r2, #0
 8003168:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b01      	cmp	r3, #1
 8003176:	d007      	beq.n	8003188 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	699a      	ldr	r2, [r3, #24]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	619a      	str	r2, [r3, #24]
  }
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	603b      	str	r3, [r7, #0]
 80031a0:	4613      	mov	r3, r2
 80031a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031a4:	e03b      	b.n	800321e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	6839      	ldr	r1, [r7, #0]
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 f8d6 	bl	800335c <I2C_IsErrorOccurred>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e041      	b.n	800323e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031c0:	d02d      	beq.n	800321e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c2:	f7fe ff11 	bl	8001fe8 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d302      	bcc.n	80031d8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d122      	bne.n	800321e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699a      	ldr	r2, [r3, #24]
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	4013      	ands	r3, r2
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	bf0c      	ite	eq
 80031e8:	2301      	moveq	r3, #1
 80031ea:	2300      	movne	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	461a      	mov	r2, r3
 80031f0:	79fb      	ldrb	r3, [r7, #7]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d113      	bne.n	800321e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fa:	f043 0220 	orr.w	r2, r3, #32
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2220      	movs	r2, #32
 8003206:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e00f      	b.n	800323e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	699a      	ldr	r2, [r3, #24]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	4013      	ands	r3, r2
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	429a      	cmp	r2, r3
 800322c:	bf0c      	ite	eq
 800322e:	2301      	moveq	r3, #1
 8003230:	2300      	movne	r3, #0
 8003232:	b2db      	uxtb	r3, r3
 8003234:	461a      	mov	r2, r3
 8003236:	79fb      	ldrb	r3, [r7, #7]
 8003238:	429a      	cmp	r2, r3
 800323a:	d0b4      	beq.n	80031a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	60f8      	str	r0, [r7, #12]
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003252:	e033      	b.n	80032bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 f87f 	bl	800335c <I2C_IsErrorOccurred>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e031      	b.n	80032cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800326e:	d025      	beq.n	80032bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003270:	f7fe feba 	bl	8001fe8 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	429a      	cmp	r2, r3
 800327e:	d302      	bcc.n	8003286 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d11a      	bne.n	80032bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b02      	cmp	r3, #2
 8003292:	d013      	beq.n	80032bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003298:	f043 0220 	orr.w	r2, r3, #32
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2220      	movs	r2, #32
 80032a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e007      	b.n	80032cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d1c4      	bne.n	8003254 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032e0:	e02f      	b.n	8003342 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68b9      	ldr	r1, [r7, #8]
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 f838 	bl	800335c <I2C_IsErrorOccurred>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e02d      	b.n	8003352 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f6:	f7fe fe77 	bl	8001fe8 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	429a      	cmp	r2, r3
 8003304:	d302      	bcc.n	800330c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d11a      	bne.n	8003342 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	f003 0320 	and.w	r3, r3, #32
 8003316:	2b20      	cmp	r3, #32
 8003318:	d013      	beq.n	8003342 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331e:	f043 0220 	orr.w	r2, r3, #32
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e007      	b.n	8003352 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	f003 0320 	and.w	r3, r3, #32
 800334c:	2b20      	cmp	r3, #32
 800334e:	d1c8      	bne.n	80032e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
	...

0800335c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b08a      	sub	sp, #40	@ 0x28
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003368:	2300      	movs	r3, #0
 800336a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003376:	2300      	movs	r3, #0
 8003378:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	f003 0310 	and.w	r3, r3, #16
 8003384:	2b00      	cmp	r3, #0
 8003386:	d068      	beq.n	800345a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2210      	movs	r2, #16
 800338e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003390:	e049      	b.n	8003426 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003398:	d045      	beq.n	8003426 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800339a:	f7fe fe25 	bl	8001fe8 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d302      	bcc.n	80033b0 <I2C_IsErrorOccurred+0x54>
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d13a      	bne.n	8003426 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80033c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033d2:	d121      	bne.n	8003418 <I2C_IsErrorOccurred+0xbc>
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033da:	d01d      	beq.n	8003418 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80033dc:	7cfb      	ldrb	r3, [r7, #19]
 80033de:	2b20      	cmp	r3, #32
 80033e0:	d01a      	beq.n	8003418 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033f0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80033f2:	f7fe fdf9 	bl	8001fe8 <HAL_GetTick>
 80033f6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033f8:	e00e      	b.n	8003418 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80033fa:	f7fe fdf5 	bl	8001fe8 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b19      	cmp	r3, #25
 8003406:	d907      	bls.n	8003418 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	f043 0320 	orr.w	r3, r3, #32
 800340e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003416:	e006      	b.n	8003426 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	2b20      	cmp	r3, #32
 8003424:	d1e9      	bne.n	80033fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b20      	cmp	r3, #32
 8003432:	d003      	beq.n	800343c <I2C_IsErrorOccurred+0xe0>
 8003434:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0aa      	beq.n	8003392 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800343c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003440:	2b00      	cmp	r3, #0
 8003442:	d103      	bne.n	800344c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2220      	movs	r2, #32
 800344a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	f043 0304 	orr.w	r3, r3, #4
 8003452:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00b      	beq.n	8003484 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800347c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00b      	beq.n	80034a6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	f043 0308 	orr.w	r3, r3, #8
 8003494:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800349e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00b      	beq.n	80034c8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	f043 0302 	orr.w	r3, r3, #2
 80034b6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80034c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d01c      	beq.n	800350a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f7ff fe3b 	bl	800314c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6859      	ldr	r1, [r3, #4]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003518 <I2C_IsErrorOccurred+0x1bc>)
 80034e2:	400b      	ands	r3, r1
 80034e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	431a      	orrs	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800350a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800350e:	4618      	mov	r0, r3
 8003510:	3728      	adds	r7, #40	@ 0x28
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	fe00e800 	.word	0xfe00e800

0800351c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800351c:	b480      	push	{r7}
 800351e:	b087      	sub	sp, #28
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	607b      	str	r3, [r7, #4]
 8003526:	460b      	mov	r3, r1
 8003528:	817b      	strh	r3, [r7, #10]
 800352a:	4613      	mov	r3, r2
 800352c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800352e:	897b      	ldrh	r3, [r7, #10]
 8003530:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003534:	7a7b      	ldrb	r3, [r7, #9]
 8003536:	041b      	lsls	r3, r3, #16
 8003538:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800353c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	4313      	orrs	r3, r2
 8003546:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800354a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	0d5b      	lsrs	r3, r3, #21
 8003556:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800355a:	4b08      	ldr	r3, [pc, #32]	@ (800357c <I2C_TransferConfig+0x60>)
 800355c:	430b      	orrs	r3, r1
 800355e:	43db      	mvns	r3, r3
 8003560:	ea02 0103 	and.w	r1, r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	430a      	orrs	r2, r1
 800356c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800356e:	bf00      	nop
 8003570:	371c      	adds	r7, #28
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	03ff63ff 	.word	0x03ff63ff

08003580 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b20      	cmp	r3, #32
 8003594:	d138      	bne.n	8003608 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e032      	b.n	800360a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2224      	movs	r2, #36	@ 0x24
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0201 	bic.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6819      	ldr	r1, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0201 	orr.w	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003604:	2300      	movs	r3, #0
 8003606:	e000      	b.n	800360a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003608:	2302      	movs	r3, #2
  }
}
 800360a:	4618      	mov	r0, r3
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003616:	b480      	push	{r7}
 8003618:	b085      	sub	sp, #20
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b20      	cmp	r3, #32
 800362a:	d139      	bne.n	80036a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003632:	2b01      	cmp	r3, #1
 8003634:	d101      	bne.n	800363a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003636:	2302      	movs	r3, #2
 8003638:	e033      	b.n	80036a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2224      	movs	r2, #36	@ 0x24
 8003646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0201 	bic.w	r2, r2, #1
 8003658:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003668:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	021b      	lsls	r3, r3, #8
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	4313      	orrs	r3, r2
 8003672:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0201 	orr.w	r2, r2, #1
 800368a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	e000      	b.n	80036a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036a0:	2302      	movs	r3, #2
  }
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
	...

080036b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80036b4:	4b04      	ldr	r3, [pc, #16]	@ (80036c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80036bc:	4618      	mov	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	40007000 	.word	0x40007000

080036cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036da:	d130      	bne.n	800373e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80036dc:	4b23      	ldr	r3, [pc, #140]	@ (800376c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80036e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036e8:	d038      	beq.n	800375c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036ea:	4b20      	ldr	r3, [pc, #128]	@ (800376c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80036f2:	4a1e      	ldr	r2, [pc, #120]	@ (800376c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003770 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2232      	movs	r2, #50	@ 0x32
 8003700:	fb02 f303 	mul.w	r3, r2, r3
 8003704:	4a1b      	ldr	r2, [pc, #108]	@ (8003774 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003706:	fba2 2303 	umull	r2, r3, r2, r3
 800370a:	0c9b      	lsrs	r3, r3, #18
 800370c:	3301      	adds	r3, #1
 800370e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003710:	e002      	b.n	8003718 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	3b01      	subs	r3, #1
 8003716:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003718:	4b14      	ldr	r3, [pc, #80]	@ (800376c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003720:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003724:	d102      	bne.n	800372c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1f2      	bne.n	8003712 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800372c:	4b0f      	ldr	r3, [pc, #60]	@ (800376c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003734:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003738:	d110      	bne.n	800375c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e00f      	b.n	800375e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800373e:	4b0b      	ldr	r3, [pc, #44]	@ (800376c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800374a:	d007      	beq.n	800375c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800374c:	4b07      	ldr	r3, [pc, #28]	@ (800376c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003754:	4a05      	ldr	r2, [pc, #20]	@ (800376c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003756:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800375a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	40007000 	.word	0x40007000
 8003770:	20000000 	.word	0x20000000
 8003774:	431bde83 	.word	0x431bde83

08003778 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b088      	sub	sp, #32
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e3ca      	b.n	8003f20 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800378a:	4b97      	ldr	r3, [pc, #604]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 030c 	and.w	r3, r3, #12
 8003792:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003794:	4b94      	ldr	r3, [pc, #592]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f003 0303 	and.w	r3, r3, #3
 800379c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0310 	and.w	r3, r3, #16
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 80e4 	beq.w	8003974 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d007      	beq.n	80037c2 <HAL_RCC_OscConfig+0x4a>
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	2b0c      	cmp	r3, #12
 80037b6:	f040 808b 	bne.w	80038d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	f040 8087 	bne.w	80038d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037c2:	4b89      	ldr	r3, [pc, #548]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d005      	beq.n	80037da <HAL_RCC_OscConfig+0x62>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e3a2      	b.n	8003f20 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1a      	ldr	r2, [r3, #32]
 80037de:	4b82      	ldr	r3, [pc, #520]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d004      	beq.n	80037f4 <HAL_RCC_OscConfig+0x7c>
 80037ea:	4b7f      	ldr	r3, [pc, #508]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037f2:	e005      	b.n	8003800 <HAL_RCC_OscConfig+0x88>
 80037f4:	4b7c      	ldr	r3, [pc, #496]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 80037f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037fa:	091b      	lsrs	r3, r3, #4
 80037fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003800:	4293      	cmp	r3, r2
 8003802:	d223      	bcs.n	800384c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	4618      	mov	r0, r3
 800380a:	f000 fd87 	bl	800431c <RCC_SetFlashLatencyFromMSIRange>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e383      	b.n	8003f20 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003818:	4b73      	ldr	r3, [pc, #460]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a72      	ldr	r2, [pc, #456]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 800381e:	f043 0308 	orr.w	r3, r3, #8
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	4b70      	ldr	r3, [pc, #448]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	496d      	ldr	r1, [pc, #436]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003832:	4313      	orrs	r3, r2
 8003834:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003836:	4b6c      	ldr	r3, [pc, #432]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	021b      	lsls	r3, r3, #8
 8003844:	4968      	ldr	r1, [pc, #416]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003846:	4313      	orrs	r3, r2
 8003848:	604b      	str	r3, [r1, #4]
 800384a:	e025      	b.n	8003898 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800384c:	4b66      	ldr	r3, [pc, #408]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a65      	ldr	r2, [pc, #404]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003852:	f043 0308 	orr.w	r3, r3, #8
 8003856:	6013      	str	r3, [r2, #0]
 8003858:	4b63      	ldr	r3, [pc, #396]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	4960      	ldr	r1, [pc, #384]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003866:	4313      	orrs	r3, r2
 8003868:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800386a:	4b5f      	ldr	r3, [pc, #380]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	021b      	lsls	r3, r3, #8
 8003878:	495b      	ldr	r1, [pc, #364]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 800387a:	4313      	orrs	r3, r2
 800387c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d109      	bne.n	8003898 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	4618      	mov	r0, r3
 800388a:	f000 fd47 	bl	800431c <RCC_SetFlashLatencyFromMSIRange>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e343      	b.n	8003f20 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003898:	f000 fc4a 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 800389c:	4602      	mov	r2, r0
 800389e:	4b52      	ldr	r3, [pc, #328]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	091b      	lsrs	r3, r3, #4
 80038a4:	f003 030f 	and.w	r3, r3, #15
 80038a8:	4950      	ldr	r1, [pc, #320]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 80038aa:	5ccb      	ldrb	r3, [r1, r3]
 80038ac:	f003 031f 	and.w	r3, r3, #31
 80038b0:	fa22 f303 	lsr.w	r3, r2, r3
 80038b4:	4a4e      	ldr	r2, [pc, #312]	@ (80039f0 <HAL_RCC_OscConfig+0x278>)
 80038b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038b8:	4b4e      	ldr	r3, [pc, #312]	@ (80039f4 <HAL_RCC_OscConfig+0x27c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f7fd fc57 	bl	8001170 <HAL_InitTick>
 80038c2:	4603      	mov	r3, r0
 80038c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d052      	beq.n	8003972 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
 80038ce:	e327      	b.n	8003f20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d032      	beq.n	800393e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038d8:	4b43      	ldr	r3, [pc, #268]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a42      	ldr	r2, [pc, #264]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 80038de:	f043 0301 	orr.w	r3, r3, #1
 80038e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038e4:	f7fe fb80 	bl	8001fe8 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038ec:	f7fe fb7c 	bl	8001fe8 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e310      	b.n	8003f20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038fe:	4b3a      	ldr	r3, [pc, #232]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0f0      	beq.n	80038ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800390a:	4b37      	ldr	r3, [pc, #220]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a36      	ldr	r2, [pc, #216]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003910:	f043 0308 	orr.w	r3, r3, #8
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	4b34      	ldr	r3, [pc, #208]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	4931      	ldr	r1, [pc, #196]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003924:	4313      	orrs	r3, r2
 8003926:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003928:	4b2f      	ldr	r3, [pc, #188]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	021b      	lsls	r3, r3, #8
 8003936:	492c      	ldr	r1, [pc, #176]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003938:	4313      	orrs	r3, r2
 800393a:	604b      	str	r3, [r1, #4]
 800393c:	e01a      	b.n	8003974 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800393e:	4b2a      	ldr	r3, [pc, #168]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a29      	ldr	r2, [pc, #164]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003944:	f023 0301 	bic.w	r3, r3, #1
 8003948:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800394a:	f7fe fb4d 	bl	8001fe8 <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003950:	e008      	b.n	8003964 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003952:	f7fe fb49 	bl	8001fe8 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e2dd      	b.n	8003f20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003964:	4b20      	ldr	r3, [pc, #128]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1f0      	bne.n	8003952 <HAL_RCC_OscConfig+0x1da>
 8003970:	e000      	b.n	8003974 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003972:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d074      	beq.n	8003a6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	2b08      	cmp	r3, #8
 8003984:	d005      	beq.n	8003992 <HAL_RCC_OscConfig+0x21a>
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	2b0c      	cmp	r3, #12
 800398a:	d10e      	bne.n	80039aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	2b03      	cmp	r3, #3
 8003990:	d10b      	bne.n	80039aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003992:	4b15      	ldr	r3, [pc, #84]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d064      	beq.n	8003a68 <HAL_RCC_OscConfig+0x2f0>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d160      	bne.n	8003a68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e2ba      	b.n	8003f20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039b2:	d106      	bne.n	80039c2 <HAL_RCC_OscConfig+0x24a>
 80039b4:	4b0c      	ldr	r3, [pc, #48]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a0b      	ldr	r2, [pc, #44]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 80039ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039be:	6013      	str	r3, [r2, #0]
 80039c0:	e026      	b.n	8003a10 <HAL_RCC_OscConfig+0x298>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039ca:	d115      	bne.n	80039f8 <HAL_RCC_OscConfig+0x280>
 80039cc:	4b06      	ldr	r3, [pc, #24]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a05      	ldr	r2, [pc, #20]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 80039d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039d6:	6013      	str	r3, [r2, #0]
 80039d8:	4b03      	ldr	r3, [pc, #12]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a02      	ldr	r2, [pc, #8]	@ (80039e8 <HAL_RCC_OscConfig+0x270>)
 80039de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	e014      	b.n	8003a10 <HAL_RCC_OscConfig+0x298>
 80039e6:	bf00      	nop
 80039e8:	40021000 	.word	0x40021000
 80039ec:	0800c8dc 	.word	0x0800c8dc
 80039f0:	20000000 	.word	0x20000000
 80039f4:	2000000c 	.word	0x2000000c
 80039f8:	4ba0      	ldr	r3, [pc, #640]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a9f      	ldr	r2, [pc, #636]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 80039fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a02:	6013      	str	r3, [r2, #0]
 8003a04:	4b9d      	ldr	r3, [pc, #628]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a9c      	ldr	r2, [pc, #624]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003a0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d013      	beq.n	8003a40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a18:	f7fe fae6 	bl	8001fe8 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a20:	f7fe fae2 	bl	8001fe8 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b64      	cmp	r3, #100	@ 0x64
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e276      	b.n	8003f20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a32:	4b92      	ldr	r3, [pc, #584]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0f0      	beq.n	8003a20 <HAL_RCC_OscConfig+0x2a8>
 8003a3e:	e014      	b.n	8003a6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a40:	f7fe fad2 	bl	8001fe8 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a48:	f7fe face 	bl	8001fe8 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b64      	cmp	r3, #100	@ 0x64
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e262      	b.n	8003f20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a5a:	4b88      	ldr	r3, [pc, #544]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f0      	bne.n	8003a48 <HAL_RCC_OscConfig+0x2d0>
 8003a66:	e000      	b.n	8003a6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d060      	beq.n	8003b38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d005      	beq.n	8003a88 <HAL_RCC_OscConfig+0x310>
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	2b0c      	cmp	r3, #12
 8003a80:	d119      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d116      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a88:	4b7c      	ldr	r3, [pc, #496]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x328>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e23f      	b.n	8003f20 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa0:	4b76      	ldr	r3, [pc, #472]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	061b      	lsls	r3, r3, #24
 8003aae:	4973      	ldr	r1, [pc, #460]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ab4:	e040      	b.n	8003b38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d023      	beq.n	8003b06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003abe:	4b6f      	ldr	r3, [pc, #444]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a6e      	ldr	r2, [pc, #440]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aca:	f7fe fa8d 	bl	8001fe8 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad2:	f7fe fa89 	bl	8001fe8 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e21d      	b.n	8003f20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ae4:	4b65      	ldr	r3, [pc, #404]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f0      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af0:	4b62      	ldr	r3, [pc, #392]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	061b      	lsls	r3, r3, #24
 8003afe:	495f      	ldr	r1, [pc, #380]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	604b      	str	r3, [r1, #4]
 8003b04:	e018      	b.n	8003b38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b06:	4b5d      	ldr	r3, [pc, #372]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a5c      	ldr	r2, [pc, #368]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003b0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b12:	f7fe fa69 	bl	8001fe8 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b1a:	f7fe fa65 	bl	8001fe8 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e1f9      	b.n	8003f20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b2c:	4b53      	ldr	r3, [pc, #332]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1f0      	bne.n	8003b1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0308 	and.w	r3, r3, #8
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d03c      	beq.n	8003bbe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d01c      	beq.n	8003b86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b4c:	4b4b      	ldr	r3, [pc, #300]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b52:	4a4a      	ldr	r2, [pc, #296]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003b54:	f043 0301 	orr.w	r3, r3, #1
 8003b58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5c:	f7fe fa44 	bl	8001fe8 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b64:	f7fe fa40 	bl	8001fe8 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e1d4      	b.n	8003f20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b76:	4b41      	ldr	r3, [pc, #260]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0ef      	beq.n	8003b64 <HAL_RCC_OscConfig+0x3ec>
 8003b84:	e01b      	b.n	8003bbe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b86:	4b3d      	ldr	r3, [pc, #244]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b8c:	4a3b      	ldr	r2, [pc, #236]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003b8e:	f023 0301 	bic.w	r3, r3, #1
 8003b92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b96:	f7fe fa27 	bl	8001fe8 <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b9e:	f7fe fa23 	bl	8001fe8 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e1b7      	b.n	8003f20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bb0:	4b32      	ldr	r3, [pc, #200]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1ef      	bne.n	8003b9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 80a6 	beq.w	8003d18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003bd0:	4b2a      	ldr	r3, [pc, #168]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10d      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bdc:	4b27      	ldr	r3, [pc, #156]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be0:	4a26      	ldr	r2, [pc, #152]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003be2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003be6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003be8:	4b24      	ldr	r3, [pc, #144]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bf8:	4b21      	ldr	r3, [pc, #132]	@ (8003c80 <HAL_RCC_OscConfig+0x508>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d118      	bne.n	8003c36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c04:	4b1e      	ldr	r3, [pc, #120]	@ (8003c80 <HAL_RCC_OscConfig+0x508>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a1d      	ldr	r2, [pc, #116]	@ (8003c80 <HAL_RCC_OscConfig+0x508>)
 8003c0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c10:	f7fe f9ea 	bl	8001fe8 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c18:	f7fe f9e6 	bl	8001fe8 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e17a      	b.n	8003f20 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c2a:	4b15      	ldr	r3, [pc, #84]	@ (8003c80 <HAL_RCC_OscConfig+0x508>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d108      	bne.n	8003c50 <HAL_RCC_OscConfig+0x4d8>
 8003c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c44:	4a0d      	ldr	r2, [pc, #52]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003c46:	f043 0301 	orr.w	r3, r3, #1
 8003c4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c4e:	e029      	b.n	8003ca4 <HAL_RCC_OscConfig+0x52c>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b05      	cmp	r3, #5
 8003c56:	d115      	bne.n	8003c84 <HAL_RCC_OscConfig+0x50c>
 8003c58:	4b08      	ldr	r3, [pc, #32]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5e:	4a07      	ldr	r2, [pc, #28]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003c60:	f043 0304 	orr.w	r3, r3, #4
 8003c64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c68:	4b04      	ldr	r3, [pc, #16]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c6e:	4a03      	ldr	r2, [pc, #12]	@ (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c78:	e014      	b.n	8003ca4 <HAL_RCC_OscConfig+0x52c>
 8003c7a:	bf00      	nop
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	40007000 	.word	0x40007000
 8003c84:	4b9c      	ldr	r3, [pc, #624]	@ (8003ef8 <HAL_RCC_OscConfig+0x780>)
 8003c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c8a:	4a9b      	ldr	r2, [pc, #620]	@ (8003ef8 <HAL_RCC_OscConfig+0x780>)
 8003c8c:	f023 0301 	bic.w	r3, r3, #1
 8003c90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c94:	4b98      	ldr	r3, [pc, #608]	@ (8003ef8 <HAL_RCC_OscConfig+0x780>)
 8003c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c9a:	4a97      	ldr	r2, [pc, #604]	@ (8003ef8 <HAL_RCC_OscConfig+0x780>)
 8003c9c:	f023 0304 	bic.w	r3, r3, #4
 8003ca0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d016      	beq.n	8003cda <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cac:	f7fe f99c 	bl	8001fe8 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cb2:	e00a      	b.n	8003cca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb4:	f7fe f998 	bl	8001fe8 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e12a      	b.n	8003f20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cca:	4b8b      	ldr	r3, [pc, #556]	@ (8003ef8 <HAL_RCC_OscConfig+0x780>)
 8003ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0ed      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x53c>
 8003cd8:	e015      	b.n	8003d06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cda:	f7fe f985 	bl	8001fe8 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ce0:	e00a      	b.n	8003cf8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce2:	f7fe f981 	bl	8001fe8 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e113      	b.n	8003f20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cf8:	4b7f      	ldr	r3, [pc, #508]	@ (8003ef8 <HAL_RCC_OscConfig+0x780>)
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1ed      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d06:	7ffb      	ldrb	r3, [r7, #31]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d105      	bne.n	8003d18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d0c:	4b7a      	ldr	r3, [pc, #488]	@ (8003ef8 <HAL_RCC_OscConfig+0x780>)
 8003d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d10:	4a79      	ldr	r2, [pc, #484]	@ (8003ef8 <HAL_RCC_OscConfig+0x780>)
 8003d12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d16:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 80fe 	beq.w	8003f1e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	f040 80d0 	bne.w	8003ecc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d2c:	4b72      	ldr	r3, [pc, #456]	@ (8003ef8 <HAL_RCC_OscConfig+0x780>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f003 0203 	and.w	r2, r3, #3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d130      	bne.n	8003da2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d127      	bne.n	8003da2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d11f      	bne.n	8003da2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003d6c:	2a07      	cmp	r2, #7
 8003d6e:	bf14      	ite	ne
 8003d70:	2201      	movne	r2, #1
 8003d72:	2200      	moveq	r2, #0
 8003d74:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d113      	bne.n	8003da2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d84:	085b      	lsrs	r3, r3, #1
 8003d86:	3b01      	subs	r3, #1
 8003d88:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d109      	bne.n	8003da2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d98:	085b      	lsrs	r3, r3, #1
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d06e      	beq.n	8003e80 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	2b0c      	cmp	r3, #12
 8003da6:	d069      	beq.n	8003e7c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003da8:	4b53      	ldr	r3, [pc, #332]	@ (8003ef8 <HAL_RCC_OscConfig+0x780>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d105      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003db4:	4b50      	ldr	r3, [pc, #320]	@ (8003ef8 <HAL_RCC_OscConfig+0x780>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e0ad      	b.n	8003f20 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003dc4:	4b4c      	ldr	r3, [pc, #304]	@ (8003ef8 <HAL_RCC_OscConfig+0x780>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a4b      	ldr	r2, [pc, #300]	@ (8003ef8 <HAL_RCC_OscConfig+0x780>)
 8003dca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003dd0:	f7fe f90a 	bl	8001fe8 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd8:	f7fe f906 	bl	8001fe8 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e09a      	b.n	8003f20 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dea:	4b43      	ldr	r3, [pc, #268]	@ (8003ef8 <HAL_RCC_OscConfig+0x780>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f0      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003df6:	4b40      	ldr	r3, [pc, #256]	@ (8003ef8 <HAL_RCC_OscConfig+0x780>)
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	4b40      	ldr	r3, [pc, #256]	@ (8003efc <HAL_RCC_OscConfig+0x784>)
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003e06:	3a01      	subs	r2, #1
 8003e08:	0112      	lsls	r2, r2, #4
 8003e0a:	4311      	orrs	r1, r2
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003e10:	0212      	lsls	r2, r2, #8
 8003e12:	4311      	orrs	r1, r2
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e18:	0852      	lsrs	r2, r2, #1
 8003e1a:	3a01      	subs	r2, #1
 8003e1c:	0552      	lsls	r2, r2, #21
 8003e1e:	4311      	orrs	r1, r2
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003e24:	0852      	lsrs	r2, r2, #1
 8003e26:	3a01      	subs	r2, #1
 8003e28:	0652      	lsls	r2, r2, #25
 8003e2a:	4311      	orrs	r1, r2
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e30:	0912      	lsrs	r2, r2, #4
 8003e32:	0452      	lsls	r2, r2, #17
 8003e34:	430a      	orrs	r2, r1
 8003e36:	4930      	ldr	r1, [pc, #192]	@ (8003ef8 <HAL_RCC_OscConfig+0x780>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e3c:	4b2e      	ldr	r3, [pc, #184]	@ (8003ef8 <HAL_RCC_OscConfig+0x780>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a2d      	ldr	r2, [pc, #180]	@ (8003ef8 <HAL_RCC_OscConfig+0x780>)
 8003e42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e48:	4b2b      	ldr	r3, [pc, #172]	@ (8003ef8 <HAL_RCC_OscConfig+0x780>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4a2a      	ldr	r2, [pc, #168]	@ (8003ef8 <HAL_RCC_OscConfig+0x780>)
 8003e4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e54:	f7fe f8c8 	bl	8001fe8 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e5c:	f7fe f8c4 	bl	8001fe8 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e058      	b.n	8003f20 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e6e:	4b22      	ldr	r3, [pc, #136]	@ (8003ef8 <HAL_RCC_OscConfig+0x780>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f0      	beq.n	8003e5c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e7a:	e050      	b.n	8003f1e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e04f      	b.n	8003f20 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e80:	4b1d      	ldr	r3, [pc, #116]	@ (8003ef8 <HAL_RCC_OscConfig+0x780>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d148      	bne.n	8003f1e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ef8 <HAL_RCC_OscConfig+0x780>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a19      	ldr	r2, [pc, #100]	@ (8003ef8 <HAL_RCC_OscConfig+0x780>)
 8003e92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e98:	4b17      	ldr	r3, [pc, #92]	@ (8003ef8 <HAL_RCC_OscConfig+0x780>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	4a16      	ldr	r2, [pc, #88]	@ (8003ef8 <HAL_RCC_OscConfig+0x780>)
 8003e9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ea2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ea4:	f7fe f8a0 	bl	8001fe8 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eac:	f7fe f89c 	bl	8001fe8 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e030      	b.n	8003f20 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef8 <HAL_RCC_OscConfig+0x780>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0f0      	beq.n	8003eac <HAL_RCC_OscConfig+0x734>
 8003eca:	e028      	b.n	8003f1e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	2b0c      	cmp	r3, #12
 8003ed0:	d023      	beq.n	8003f1a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed2:	4b09      	ldr	r3, [pc, #36]	@ (8003ef8 <HAL_RCC_OscConfig+0x780>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a08      	ldr	r2, [pc, #32]	@ (8003ef8 <HAL_RCC_OscConfig+0x780>)
 8003ed8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ede:	f7fe f883 	bl	8001fe8 <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ee4:	e00c      	b.n	8003f00 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee6:	f7fe f87f 	bl	8001fe8 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d905      	bls.n	8003f00 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e013      	b.n	8003f20 <HAL_RCC_OscConfig+0x7a8>
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f00:	4b09      	ldr	r3, [pc, #36]	@ (8003f28 <HAL_RCC_OscConfig+0x7b0>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1ec      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003f0c:	4b06      	ldr	r3, [pc, #24]	@ (8003f28 <HAL_RCC_OscConfig+0x7b0>)
 8003f0e:	68da      	ldr	r2, [r3, #12]
 8003f10:	4905      	ldr	r1, [pc, #20]	@ (8003f28 <HAL_RCC_OscConfig+0x7b0>)
 8003f12:	4b06      	ldr	r3, [pc, #24]	@ (8003f2c <HAL_RCC_OscConfig+0x7b4>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	60cb      	str	r3, [r1, #12]
 8003f18:	e001      	b.n	8003f1e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3720      	adds	r7, #32
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	feeefffc 	.word	0xfeeefffc

08003f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e0e7      	b.n	8004114 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f44:	4b75      	ldr	r3, [pc, #468]	@ (800411c <HAL_RCC_ClockConfig+0x1ec>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d910      	bls.n	8003f74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f52:	4b72      	ldr	r3, [pc, #456]	@ (800411c <HAL_RCC_ClockConfig+0x1ec>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f023 0207 	bic.w	r2, r3, #7
 8003f5a:	4970      	ldr	r1, [pc, #448]	@ (800411c <HAL_RCC_ClockConfig+0x1ec>)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f62:	4b6e      	ldr	r3, [pc, #440]	@ (800411c <HAL_RCC_ClockConfig+0x1ec>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e0cf      	b.n	8004114 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d010      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	4b66      	ldr	r3, [pc, #408]	@ (8004120 <HAL_RCC_ClockConfig+0x1f0>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d908      	bls.n	8003fa2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f90:	4b63      	ldr	r3, [pc, #396]	@ (8004120 <HAL_RCC_ClockConfig+0x1f0>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	4960      	ldr	r1, [pc, #384]	@ (8004120 <HAL_RCC_ClockConfig+0x1f0>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d04c      	beq.n	8004048 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d107      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fb6:	4b5a      	ldr	r3, [pc, #360]	@ (8004120 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d121      	bne.n	8004006 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e0a6      	b.n	8004114 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d107      	bne.n	8003fde <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fce:	4b54      	ldr	r3, [pc, #336]	@ (8004120 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d115      	bne.n	8004006 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e09a      	b.n	8004114 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d107      	bne.n	8003ff6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fe6:	4b4e      	ldr	r3, [pc, #312]	@ (8004120 <HAL_RCC_ClockConfig+0x1f0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d109      	bne.n	8004006 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e08e      	b.n	8004114 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ff6:	4b4a      	ldr	r3, [pc, #296]	@ (8004120 <HAL_RCC_ClockConfig+0x1f0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e086      	b.n	8004114 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004006:	4b46      	ldr	r3, [pc, #280]	@ (8004120 <HAL_RCC_ClockConfig+0x1f0>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f023 0203 	bic.w	r2, r3, #3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	4943      	ldr	r1, [pc, #268]	@ (8004120 <HAL_RCC_ClockConfig+0x1f0>)
 8004014:	4313      	orrs	r3, r2
 8004016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004018:	f7fd ffe6 	bl	8001fe8 <HAL_GetTick>
 800401c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800401e:	e00a      	b.n	8004036 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004020:	f7fd ffe2 	bl	8001fe8 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800402e:	4293      	cmp	r3, r2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e06e      	b.n	8004114 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004036:	4b3a      	ldr	r3, [pc, #232]	@ (8004120 <HAL_RCC_ClockConfig+0x1f0>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 020c 	and.w	r2, r3, #12
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	429a      	cmp	r2, r3
 8004046:	d1eb      	bne.n	8004020 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d010      	beq.n	8004076 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	4b31      	ldr	r3, [pc, #196]	@ (8004120 <HAL_RCC_ClockConfig+0x1f0>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004060:	429a      	cmp	r2, r3
 8004062:	d208      	bcs.n	8004076 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004064:	4b2e      	ldr	r3, [pc, #184]	@ (8004120 <HAL_RCC_ClockConfig+0x1f0>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	492b      	ldr	r1, [pc, #172]	@ (8004120 <HAL_RCC_ClockConfig+0x1f0>)
 8004072:	4313      	orrs	r3, r2
 8004074:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004076:	4b29      	ldr	r3, [pc, #164]	@ (800411c <HAL_RCC_ClockConfig+0x1ec>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	429a      	cmp	r2, r3
 8004082:	d210      	bcs.n	80040a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004084:	4b25      	ldr	r3, [pc, #148]	@ (800411c <HAL_RCC_ClockConfig+0x1ec>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f023 0207 	bic.w	r2, r3, #7
 800408c:	4923      	ldr	r1, [pc, #140]	@ (800411c <HAL_RCC_ClockConfig+0x1ec>)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	4313      	orrs	r3, r2
 8004092:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004094:	4b21      	ldr	r3, [pc, #132]	@ (800411c <HAL_RCC_ClockConfig+0x1ec>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d001      	beq.n	80040a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e036      	b.n	8004114 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0304 	and.w	r3, r3, #4
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d008      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004120 <HAL_RCC_ClockConfig+0x1f0>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	4918      	ldr	r1, [pc, #96]	@ (8004120 <HAL_RCC_ClockConfig+0x1f0>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0308 	and.w	r3, r3, #8
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d009      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040d0:	4b13      	ldr	r3, [pc, #76]	@ (8004120 <HAL_RCC_ClockConfig+0x1f0>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	4910      	ldr	r1, [pc, #64]	@ (8004120 <HAL_RCC_ClockConfig+0x1f0>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040e4:	f000 f824 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 80040e8:	4602      	mov	r2, r0
 80040ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004120 <HAL_RCC_ClockConfig+0x1f0>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	091b      	lsrs	r3, r3, #4
 80040f0:	f003 030f 	and.w	r3, r3, #15
 80040f4:	490b      	ldr	r1, [pc, #44]	@ (8004124 <HAL_RCC_ClockConfig+0x1f4>)
 80040f6:	5ccb      	ldrb	r3, [r1, r3]
 80040f8:	f003 031f 	and.w	r3, r3, #31
 80040fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004100:	4a09      	ldr	r2, [pc, #36]	@ (8004128 <HAL_RCC_ClockConfig+0x1f8>)
 8004102:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004104:	4b09      	ldr	r3, [pc, #36]	@ (800412c <HAL_RCC_ClockConfig+0x1fc>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4618      	mov	r0, r3
 800410a:	f7fd f831 	bl	8001170 <HAL_InitTick>
 800410e:	4603      	mov	r3, r0
 8004110:	72fb      	strb	r3, [r7, #11]

  return status;
 8004112:	7afb      	ldrb	r3, [r7, #11]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40022000 	.word	0x40022000
 8004120:	40021000 	.word	0x40021000
 8004124:	0800c8dc 	.word	0x0800c8dc
 8004128:	20000000 	.word	0x20000000
 800412c:	2000000c 	.word	0x2000000c

08004130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004130:	b480      	push	{r7}
 8004132:	b089      	sub	sp, #36	@ 0x24
 8004134:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	61fb      	str	r3, [r7, #28]
 800413a:	2300      	movs	r3, #0
 800413c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800413e:	4b3e      	ldr	r3, [pc, #248]	@ (8004238 <HAL_RCC_GetSysClockFreq+0x108>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 030c 	and.w	r3, r3, #12
 8004146:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004148:	4b3b      	ldr	r3, [pc, #236]	@ (8004238 <HAL_RCC_GetSysClockFreq+0x108>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f003 0303 	and.w	r3, r3, #3
 8004150:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d005      	beq.n	8004164 <HAL_RCC_GetSysClockFreq+0x34>
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	2b0c      	cmp	r3, #12
 800415c:	d121      	bne.n	80041a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d11e      	bne.n	80041a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004164:	4b34      	ldr	r3, [pc, #208]	@ (8004238 <HAL_RCC_GetSysClockFreq+0x108>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0308 	and.w	r3, r3, #8
 800416c:	2b00      	cmp	r3, #0
 800416e:	d107      	bne.n	8004180 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004170:	4b31      	ldr	r3, [pc, #196]	@ (8004238 <HAL_RCC_GetSysClockFreq+0x108>)
 8004172:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004176:	0a1b      	lsrs	r3, r3, #8
 8004178:	f003 030f 	and.w	r3, r3, #15
 800417c:	61fb      	str	r3, [r7, #28]
 800417e:	e005      	b.n	800418c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004180:	4b2d      	ldr	r3, [pc, #180]	@ (8004238 <HAL_RCC_GetSysClockFreq+0x108>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	091b      	lsrs	r3, r3, #4
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800418c:	4a2b      	ldr	r2, [pc, #172]	@ (800423c <HAL_RCC_GetSysClockFreq+0x10c>)
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004194:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10d      	bne.n	80041b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041a0:	e00a      	b.n	80041b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	d102      	bne.n	80041ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041a8:	4b25      	ldr	r3, [pc, #148]	@ (8004240 <HAL_RCC_GetSysClockFreq+0x110>)
 80041aa:	61bb      	str	r3, [r7, #24]
 80041ac:	e004      	b.n	80041b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d101      	bne.n	80041b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041b4:	4b23      	ldr	r3, [pc, #140]	@ (8004244 <HAL_RCC_GetSysClockFreq+0x114>)
 80041b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	2b0c      	cmp	r3, #12
 80041bc:	d134      	bne.n	8004228 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041be:	4b1e      	ldr	r3, [pc, #120]	@ (8004238 <HAL_RCC_GetSysClockFreq+0x108>)
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d003      	beq.n	80041d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2b03      	cmp	r3, #3
 80041d2:	d003      	beq.n	80041dc <HAL_RCC_GetSysClockFreq+0xac>
 80041d4:	e005      	b.n	80041e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80041d6:	4b1a      	ldr	r3, [pc, #104]	@ (8004240 <HAL_RCC_GetSysClockFreq+0x110>)
 80041d8:	617b      	str	r3, [r7, #20]
      break;
 80041da:	e005      	b.n	80041e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80041dc:	4b19      	ldr	r3, [pc, #100]	@ (8004244 <HAL_RCC_GetSysClockFreq+0x114>)
 80041de:	617b      	str	r3, [r7, #20]
      break;
 80041e0:	e002      	b.n	80041e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	617b      	str	r3, [r7, #20]
      break;
 80041e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041e8:	4b13      	ldr	r3, [pc, #76]	@ (8004238 <HAL_RCC_GetSysClockFreq+0x108>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	091b      	lsrs	r3, r3, #4
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	3301      	adds	r3, #1
 80041f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80041f6:	4b10      	ldr	r3, [pc, #64]	@ (8004238 <HAL_RCC_GetSysClockFreq+0x108>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	0a1b      	lsrs	r3, r3, #8
 80041fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	fb03 f202 	mul.w	r2, r3, r2
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	fbb2 f3f3 	udiv	r3, r2, r3
 800420c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800420e:	4b0a      	ldr	r3, [pc, #40]	@ (8004238 <HAL_RCC_GetSysClockFreq+0x108>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	0e5b      	lsrs	r3, r3, #25
 8004214:	f003 0303 	and.w	r3, r3, #3
 8004218:	3301      	adds	r3, #1
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	fbb2 f3f3 	udiv	r3, r2, r3
 8004226:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004228:	69bb      	ldr	r3, [r7, #24]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3724      	adds	r7, #36	@ 0x24
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	40021000 	.word	0x40021000
 800423c:	0800c8f4 	.word	0x0800c8f4
 8004240:	00f42400 	.word	0x00f42400
 8004244:	007a1200 	.word	0x007a1200

08004248 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800424c:	4b03      	ldr	r3, [pc, #12]	@ (800425c <HAL_RCC_GetHCLKFreq+0x14>)
 800424e:	681b      	ldr	r3, [r3, #0]
}
 8004250:	4618      	mov	r0, r3
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	20000000 	.word	0x20000000

08004260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004264:	f7ff fff0 	bl	8004248 <HAL_RCC_GetHCLKFreq>
 8004268:	4602      	mov	r2, r0
 800426a:	4b06      	ldr	r3, [pc, #24]	@ (8004284 <HAL_RCC_GetPCLK1Freq+0x24>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	0a1b      	lsrs	r3, r3, #8
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	4904      	ldr	r1, [pc, #16]	@ (8004288 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004276:	5ccb      	ldrb	r3, [r1, r3]
 8004278:	f003 031f 	and.w	r3, r3, #31
 800427c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004280:	4618      	mov	r0, r3
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40021000 	.word	0x40021000
 8004288:	0800c8ec 	.word	0x0800c8ec

0800428c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004290:	f7ff ffda 	bl	8004248 <HAL_RCC_GetHCLKFreq>
 8004294:	4602      	mov	r2, r0
 8004296:	4b06      	ldr	r3, [pc, #24]	@ (80042b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	0adb      	lsrs	r3, r3, #11
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	4904      	ldr	r1, [pc, #16]	@ (80042b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042a2:	5ccb      	ldrb	r3, [r1, r3]
 80042a4:	f003 031f 	and.w	r3, r3, #31
 80042a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40021000 	.word	0x40021000
 80042b4:	0800c8ec 	.word	0x0800c8ec

080042b8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	220f      	movs	r2, #15
 80042c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80042c8:	4b12      	ldr	r3, [pc, #72]	@ (8004314 <HAL_RCC_GetClockConfig+0x5c>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 0203 	and.w	r2, r3, #3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80042d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004314 <HAL_RCC_GetClockConfig+0x5c>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80042e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004314 <HAL_RCC_GetClockConfig+0x5c>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80042ec:	4b09      	ldr	r3, [pc, #36]	@ (8004314 <HAL_RCC_GetClockConfig+0x5c>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	08db      	lsrs	r3, r3, #3
 80042f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80042fa:	4b07      	ldr	r3, [pc, #28]	@ (8004318 <HAL_RCC_GetClockConfig+0x60>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0207 	and.w	r2, r3, #7
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	601a      	str	r2, [r3, #0]
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40021000 	.word	0x40021000
 8004318:	40022000 	.word	0x40022000

0800431c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004324:	2300      	movs	r3, #0
 8004326:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004328:	4b2a      	ldr	r3, [pc, #168]	@ (80043d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800432a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800432c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004334:	f7ff f9bc 	bl	80036b0 <HAL_PWREx_GetVoltageRange>
 8004338:	6178      	str	r0, [r7, #20]
 800433a:	e014      	b.n	8004366 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800433c:	4b25      	ldr	r3, [pc, #148]	@ (80043d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800433e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004340:	4a24      	ldr	r2, [pc, #144]	@ (80043d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004342:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004346:	6593      	str	r3, [r2, #88]	@ 0x58
 8004348:	4b22      	ldr	r3, [pc, #136]	@ (80043d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800434a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800434c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004354:	f7ff f9ac 	bl	80036b0 <HAL_PWREx_GetVoltageRange>
 8004358:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800435a:	4b1e      	ldr	r3, [pc, #120]	@ (80043d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800435c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800435e:	4a1d      	ldr	r2, [pc, #116]	@ (80043d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004360:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004364:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800436c:	d10b      	bne.n	8004386 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b80      	cmp	r3, #128	@ 0x80
 8004372:	d919      	bls.n	80043a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2ba0      	cmp	r3, #160	@ 0xa0
 8004378:	d902      	bls.n	8004380 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800437a:	2302      	movs	r3, #2
 800437c:	613b      	str	r3, [r7, #16]
 800437e:	e013      	b.n	80043a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004380:	2301      	movs	r3, #1
 8004382:	613b      	str	r3, [r7, #16]
 8004384:	e010      	b.n	80043a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b80      	cmp	r3, #128	@ 0x80
 800438a:	d902      	bls.n	8004392 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800438c:	2303      	movs	r3, #3
 800438e:	613b      	str	r3, [r7, #16]
 8004390:	e00a      	b.n	80043a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b80      	cmp	r3, #128	@ 0x80
 8004396:	d102      	bne.n	800439e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004398:	2302      	movs	r3, #2
 800439a:	613b      	str	r3, [r7, #16]
 800439c:	e004      	b.n	80043a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b70      	cmp	r3, #112	@ 0x70
 80043a2:	d101      	bne.n	80043a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043a4:	2301      	movs	r3, #1
 80043a6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80043a8:	4b0b      	ldr	r3, [pc, #44]	@ (80043d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f023 0207 	bic.w	r2, r3, #7
 80043b0:	4909      	ldr	r1, [pc, #36]	@ (80043d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80043b8:	4b07      	ldr	r3, [pc, #28]	@ (80043d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d001      	beq.n	80043ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e000      	b.n	80043cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40021000 	.word	0x40021000
 80043d8:	40022000 	.word	0x40022000

080043dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043e4:	2300      	movs	r3, #0
 80043e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043e8:	2300      	movs	r3, #0
 80043ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d041      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043fc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004400:	d02a      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004402:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004406:	d824      	bhi.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004408:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800440c:	d008      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800440e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004412:	d81e      	bhi.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004418:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800441c:	d010      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800441e:	e018      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004420:	4b86      	ldr	r3, [pc, #536]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	4a85      	ldr	r2, [pc, #532]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004426:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800442a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800442c:	e015      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	3304      	adds	r3, #4
 8004432:	2100      	movs	r1, #0
 8004434:	4618      	mov	r0, r3
 8004436:	f001 f829 	bl	800548c <RCCEx_PLLSAI1_Config>
 800443a:	4603      	mov	r3, r0
 800443c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800443e:	e00c      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3320      	adds	r3, #32
 8004444:	2100      	movs	r1, #0
 8004446:	4618      	mov	r0, r3
 8004448:	f001 f914 	bl	8005674 <RCCEx_PLLSAI2_Config>
 800444c:	4603      	mov	r3, r0
 800444e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004450:	e003      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	74fb      	strb	r3, [r7, #19]
      break;
 8004456:	e000      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004458:	bf00      	nop
    }

    if(ret == HAL_OK)
 800445a:	7cfb      	ldrb	r3, [r7, #19]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10b      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004460:	4b76      	ldr	r3, [pc, #472]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004466:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800446e:	4973      	ldr	r1, [pc, #460]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004470:	4313      	orrs	r3, r2
 8004472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004476:	e001      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	7cfb      	ldrb	r3, [r7, #19]
 800447a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d041      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800448c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004490:	d02a      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004492:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004496:	d824      	bhi.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004498:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800449c:	d008      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800449e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80044a2:	d81e      	bhi.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00a      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80044a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044ac:	d010      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80044ae:	e018      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044b0:	4b62      	ldr	r3, [pc, #392]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	4a61      	ldr	r2, [pc, #388]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044bc:	e015      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	3304      	adds	r3, #4
 80044c2:	2100      	movs	r1, #0
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 ffe1 	bl	800548c <RCCEx_PLLSAI1_Config>
 80044ca:	4603      	mov	r3, r0
 80044cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044ce:	e00c      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	3320      	adds	r3, #32
 80044d4:	2100      	movs	r1, #0
 80044d6:	4618      	mov	r0, r3
 80044d8:	f001 f8cc 	bl	8005674 <RCCEx_PLLSAI2_Config>
 80044dc:	4603      	mov	r3, r0
 80044de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044e0:	e003      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	74fb      	strb	r3, [r7, #19]
      break;
 80044e6:	e000      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80044e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ea:	7cfb      	ldrb	r3, [r7, #19]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10b      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044f0:	4b52      	ldr	r3, [pc, #328]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044fe:	494f      	ldr	r1, [pc, #316]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004500:	4313      	orrs	r3, r2
 8004502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004506:	e001      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004508:	7cfb      	ldrb	r3, [r7, #19]
 800450a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 80a0 	beq.w	800465a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800451a:	2300      	movs	r3, #0
 800451c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800451e:	4b47      	ldr	r3, [pc, #284]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800452a:	2301      	movs	r3, #1
 800452c:	e000      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800452e:	2300      	movs	r3, #0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00d      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004534:	4b41      	ldr	r3, [pc, #260]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004538:	4a40      	ldr	r2, [pc, #256]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800453a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800453e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004540:	4b3e      	ldr	r3, [pc, #248]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004544:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004548:	60bb      	str	r3, [r7, #8]
 800454a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800454c:	2301      	movs	r3, #1
 800454e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004550:	4b3b      	ldr	r3, [pc, #236]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a3a      	ldr	r2, [pc, #232]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004556:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800455a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800455c:	f7fd fd44 	bl	8001fe8 <HAL_GetTick>
 8004560:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004562:	e009      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004564:	f7fd fd40 	bl	8001fe8 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d902      	bls.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	74fb      	strb	r3, [r7, #19]
        break;
 8004576:	e005      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004578:	4b31      	ldr	r3, [pc, #196]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0ef      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004584:	7cfb      	ldrb	r3, [r7, #19]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d15c      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800458a:	4b2c      	ldr	r3, [pc, #176]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800458c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004590:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004594:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d01f      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d019      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045a8:	4b24      	ldr	r3, [pc, #144]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045b4:	4b21      	ldr	r3, [pc, #132]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ba:	4a20      	ldr	r2, [pc, #128]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045c4:	4b1d      	ldr	r3, [pc, #116]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ca:	4a1c      	ldr	r2, [pc, #112]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045d4:	4a19      	ldr	r2, [pc, #100]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d016      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e6:	f7fd fcff 	bl	8001fe8 <HAL_GetTick>
 80045ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ec:	e00b      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ee:	f7fd fcfb 	bl	8001fe8 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d902      	bls.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	74fb      	strb	r3, [r7, #19]
            break;
 8004604:	e006      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004606:	4b0d      	ldr	r3, [pc, #52]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d0ec      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004614:	7cfb      	ldrb	r3, [r7, #19]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10c      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800461a:	4b08      	ldr	r3, [pc, #32]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800461c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004620:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800462a:	4904      	ldr	r1, [pc, #16]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004632:	e009      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004634:	7cfb      	ldrb	r3, [r7, #19]
 8004636:	74bb      	strb	r3, [r7, #18]
 8004638:	e006      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800463a:	bf00      	nop
 800463c:	40021000 	.word	0x40021000
 8004640:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004644:	7cfb      	ldrb	r3, [r7, #19]
 8004646:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004648:	7c7b      	ldrb	r3, [r7, #17]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d105      	bne.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800464e:	4b9e      	ldr	r3, [pc, #632]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004652:	4a9d      	ldr	r2, [pc, #628]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004654:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004658:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004666:	4b98      	ldr	r3, [pc, #608]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800466c:	f023 0203 	bic.w	r2, r3, #3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004674:	4994      	ldr	r1, [pc, #592]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004676:	4313      	orrs	r3, r2
 8004678:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00a      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004688:	4b8f      	ldr	r3, [pc, #572]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800468a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800468e:	f023 020c 	bic.w	r2, r3, #12
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004696:	498c      	ldr	r1, [pc, #560]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004698:	4313      	orrs	r3, r2
 800469a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0304 	and.w	r3, r3, #4
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046aa:	4b87      	ldr	r3, [pc, #540]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b8:	4983      	ldr	r1, [pc, #524]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0308 	and.w	r3, r3, #8
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00a      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046cc:	4b7e      	ldr	r3, [pc, #504]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046da:	497b      	ldr	r1, [pc, #492]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0310 	and.w	r3, r3, #16
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046ee:	4b76      	ldr	r3, [pc, #472]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046fc:	4972      	ldr	r1, [pc, #456]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0320 	and.w	r3, r3, #32
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00a      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004710:	4b6d      	ldr	r3, [pc, #436]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004716:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800471e:	496a      	ldr	r1, [pc, #424]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004720:	4313      	orrs	r3, r2
 8004722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004732:	4b65      	ldr	r3, [pc, #404]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004738:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004740:	4961      	ldr	r1, [pc, #388]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004742:	4313      	orrs	r3, r2
 8004744:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00a      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004754:	4b5c      	ldr	r3, [pc, #368]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800475a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004762:	4959      	ldr	r1, [pc, #356]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004776:	4b54      	ldr	r3, [pc, #336]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800477c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004784:	4950      	ldr	r1, [pc, #320]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004786:	4313      	orrs	r3, r2
 8004788:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00a      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004798:	4b4b      	ldr	r3, [pc, #300]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800479e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047a6:	4948      	ldr	r1, [pc, #288]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047ba:	4b43      	ldr	r3, [pc, #268]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047c8:	493f      	ldr	r1, [pc, #252]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d028      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047dc:	4b3a      	ldr	r3, [pc, #232]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047ea:	4937      	ldr	r1, [pc, #220]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047fa:	d106      	bne.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047fc:	4b32      	ldr	r3, [pc, #200]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	4a31      	ldr	r2, [pc, #196]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004802:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004806:	60d3      	str	r3, [r2, #12]
 8004808:	e011      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800480e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004812:	d10c      	bne.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3304      	adds	r3, #4
 8004818:	2101      	movs	r1, #1
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fe36 	bl	800548c <RCCEx_PLLSAI1_Config>
 8004820:	4603      	mov	r3, r0
 8004822:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004824:	7cfb      	ldrb	r3, [r7, #19]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800482a:	7cfb      	ldrb	r3, [r7, #19]
 800482c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d028      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800483a:	4b23      	ldr	r3, [pc, #140]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800483c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004840:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004848:	491f      	ldr	r1, [pc, #124]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004854:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004858:	d106      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800485a:	4b1b      	ldr	r3, [pc, #108]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	4a1a      	ldr	r2, [pc, #104]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004860:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004864:	60d3      	str	r3, [r2, #12]
 8004866:	e011      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800486c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004870:	d10c      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	3304      	adds	r3, #4
 8004876:	2101      	movs	r1, #1
 8004878:	4618      	mov	r0, r3
 800487a:	f000 fe07 	bl	800548c <RCCEx_PLLSAI1_Config>
 800487e:	4603      	mov	r3, r0
 8004880:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004882:	7cfb      	ldrb	r3, [r7, #19]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004888:	7cfb      	ldrb	r3, [r7, #19]
 800488a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d02b      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004898:	4b0b      	ldr	r3, [pc, #44]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048a6:	4908      	ldr	r1, [pc, #32]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048b6:	d109      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048b8:	4b03      	ldr	r3, [pc, #12]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	4a02      	ldr	r2, [pc, #8]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048c2:	60d3      	str	r3, [r2, #12]
 80048c4:	e014      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80048c6:	bf00      	nop
 80048c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048d4:	d10c      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	3304      	adds	r3, #4
 80048da:	2101      	movs	r1, #1
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 fdd5 	bl	800548c <RCCEx_PLLSAI1_Config>
 80048e2:	4603      	mov	r3, r0
 80048e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048e6:	7cfb      	ldrb	r3, [r7, #19]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80048ec:	7cfb      	ldrb	r3, [r7, #19]
 80048ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d02f      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048fc:	4b2b      	ldr	r3, [pc, #172]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004902:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800490a:	4928      	ldr	r1, [pc, #160]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800490c:	4313      	orrs	r3, r2
 800490e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004916:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800491a:	d10d      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3304      	adds	r3, #4
 8004920:	2102      	movs	r1, #2
 8004922:	4618      	mov	r0, r3
 8004924:	f000 fdb2 	bl	800548c <RCCEx_PLLSAI1_Config>
 8004928:	4603      	mov	r3, r0
 800492a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800492c:	7cfb      	ldrb	r3, [r7, #19]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d014      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004932:	7cfb      	ldrb	r3, [r7, #19]
 8004934:	74bb      	strb	r3, [r7, #18]
 8004936:	e011      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800493c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004940:	d10c      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3320      	adds	r3, #32
 8004946:	2102      	movs	r1, #2
 8004948:	4618      	mov	r0, r3
 800494a:	f000 fe93 	bl	8005674 <RCCEx_PLLSAI2_Config>
 800494e:	4603      	mov	r3, r0
 8004950:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004952:	7cfb      	ldrb	r3, [r7, #19]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004958:	7cfb      	ldrb	r3, [r7, #19]
 800495a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00a      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004968:	4b10      	ldr	r3, [pc, #64]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800496a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800496e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004976:	490d      	ldr	r1, [pc, #52]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004978:	4313      	orrs	r3, r2
 800497a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00b      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800498a:	4b08      	ldr	r3, [pc, #32]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800498c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004990:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800499a:	4904      	ldr	r1, [pc, #16]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80049a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	40021000 	.word	0x40021000

080049b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b088      	sub	sp, #32
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80049b8:	2300      	movs	r3, #0
 80049ba:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049c2:	d13e      	bne.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80049c4:	4bb2      	ldr	r3, [pc, #712]	@ (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80049c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049ce:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049d6:	d028      	beq.n	8004a2a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049de:	f200 8542 	bhi.w	8005466 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049e8:	d005      	beq.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049f0:	d00e      	beq.n	8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80049f2:	f000 bd38 	b.w	8005466 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80049f6:	4ba6      	ldr	r3, [pc, #664]	@ (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80049f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	f040 8532 	bne.w	800546a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8004a06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a0a:	61fb      	str	r3, [r7, #28]
      break;
 8004a0c:	f000 bd2d 	b.w	800546a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004a10:	4b9f      	ldr	r3, [pc, #636]	@ (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	f040 8527 	bne.w	800546e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8004a20:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004a24:	61fb      	str	r3, [r7, #28]
      break;
 8004a26:	f000 bd22 	b.w	800546e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004a2a:	4b99      	ldr	r3, [pc, #612]	@ (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a36:	f040 851c 	bne.w	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8004a3a:	4b96      	ldr	r3, [pc, #600]	@ (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8004a3c:	61fb      	str	r3, [r7, #28]
      break;
 8004a3e:	f000 bd18 	b.w	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a42:	4b93      	ldr	r3, [pc, #588]	@ (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	2b03      	cmp	r3, #3
 8004a50:	d036      	beq.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2b03      	cmp	r3, #3
 8004a56:	d840      	bhi.n	8004ada <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d003      	beq.n	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d020      	beq.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004a64:	e039      	b.n	8004ada <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004a66:	4b8a      	ldr	r3, [pc, #552]	@ (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d116      	bne.n	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004a72:	4b87      	ldr	r3, [pc, #540]	@ (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0308 	and.w	r3, r3, #8
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d005      	beq.n	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8004a7e:	4b84      	ldr	r3, [pc, #528]	@ (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	091b      	lsrs	r3, r3, #4
 8004a84:	f003 030f 	and.w	r3, r3, #15
 8004a88:	e005      	b.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8004a8a:	4b81      	ldr	r3, [pc, #516]	@ (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004a8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a90:	0a1b      	lsrs	r3, r3, #8
 8004a92:	f003 030f 	and.w	r3, r3, #15
 8004a96:	4a80      	ldr	r2, [pc, #512]	@ (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8004a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a9c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004a9e:	e01f      	b.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	61bb      	str	r3, [r7, #24]
      break;
 8004aa4:	e01c      	b.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004aa6:	4b7a      	ldr	r3, [pc, #488]	@ (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ab2:	d102      	bne.n	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8004ab4:	4b79      	ldr	r3, [pc, #484]	@ (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004ab6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004ab8:	e012      	b.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004aba:	2300      	movs	r3, #0
 8004abc:	61bb      	str	r3, [r7, #24]
      break;
 8004abe:	e00f      	b.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004ac0:	4b73      	ldr	r3, [pc, #460]	@ (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004acc:	d102      	bne.n	8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8004ace:	4b74      	ldr	r3, [pc, #464]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004ad0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004ad2:	e005      	b.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	61bb      	str	r3, [r7, #24]
      break;
 8004ad8:	e002      	b.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	61bb      	str	r3, [r7, #24]
      break;
 8004ade:	bf00      	nop
    }

    switch(PeriphClk)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004ae6:	f000 80dd 	beq.w	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004af0:	f200 84c1 	bhi.w	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004afa:	f000 80d3 	beq.w	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b04:	f200 84b7 	bhi.w	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b0e:	f000 835f 	beq.w	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b18:	f200 84ad 	bhi.w	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b22:	f000 847e 	beq.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b2c:	f200 84a3 	bhi.w	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b36:	f000 82cd 	beq.w	80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b40:	f200 8499 	bhi.w	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b4a:	f000 80ab 	beq.w	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b54:	f200 848f 	bhi.w	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b5e:	f000 8090 	beq.w	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b68:	f200 8485 	bhi.w	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b72:	d07f      	beq.n	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b7a:	f200 847c 	bhi.w	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b84:	f000 8403 	beq.w	800538e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b8e:	f200 8472 	bhi.w	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b98:	f000 83af 	beq.w	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ba2:	f200 8468 	bhi.w	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bac:	f000 8379 	beq.w	80052a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bb6:	f200 845e 	bhi.w	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b80      	cmp	r3, #128	@ 0x80
 8004bbe:	f000 8344 	beq.w	800524a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2b80      	cmp	r3, #128	@ 0x80
 8004bc6:	f200 8456 	bhi.w	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2b20      	cmp	r3, #32
 8004bce:	d84b      	bhi.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 844f 	beq.w	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	2b1f      	cmp	r3, #31
 8004bde:	f200 844a 	bhi.w	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004be2:	a201      	add	r2, pc, #4	@ (adr r2, 8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8004be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be8:	08004dd1 	.word	0x08004dd1
 8004bec:	08004e3f 	.word	0x08004e3f
 8004bf0:	08005477 	.word	0x08005477
 8004bf4:	08004ed3 	.word	0x08004ed3
 8004bf8:	08005477 	.word	0x08005477
 8004bfc:	08005477 	.word	0x08005477
 8004c00:	08005477 	.word	0x08005477
 8004c04:	08004f59 	.word	0x08004f59
 8004c08:	08005477 	.word	0x08005477
 8004c0c:	08005477 	.word	0x08005477
 8004c10:	08005477 	.word	0x08005477
 8004c14:	08005477 	.word	0x08005477
 8004c18:	08005477 	.word	0x08005477
 8004c1c:	08005477 	.word	0x08005477
 8004c20:	08005477 	.word	0x08005477
 8004c24:	08004fd1 	.word	0x08004fd1
 8004c28:	08005477 	.word	0x08005477
 8004c2c:	08005477 	.word	0x08005477
 8004c30:	08005477 	.word	0x08005477
 8004c34:	08005477 	.word	0x08005477
 8004c38:	08005477 	.word	0x08005477
 8004c3c:	08005477 	.word	0x08005477
 8004c40:	08005477 	.word	0x08005477
 8004c44:	08005477 	.word	0x08005477
 8004c48:	08005477 	.word	0x08005477
 8004c4c:	08005477 	.word	0x08005477
 8004c50:	08005477 	.word	0x08005477
 8004c54:	08005477 	.word	0x08005477
 8004c58:	08005477 	.word	0x08005477
 8004c5c:	08005477 	.word	0x08005477
 8004c60:	08005477 	.word	0x08005477
 8004c64:	08005053 	.word	0x08005053
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b40      	cmp	r3, #64	@ 0x40
 8004c6c:	f000 82c1 	beq.w	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004c70:	f000 bc01 	b.w	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004c74:	69b9      	ldr	r1, [r7, #24]
 8004c76:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004c7a:	f000 fdd9 	bl	8005830 <RCCEx_GetSAIxPeriphCLKFreq>
 8004c7e:	61f8      	str	r0, [r7, #28]
      break;
 8004c80:	e3fa      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8004c82:	69b9      	ldr	r1, [r7, #24]
 8004c84:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004c88:	f000 fdd2 	bl	8005830 <RCCEx_GetSAIxPeriphCLKFreq>
 8004c8c:	61f8      	str	r0, [r7, #28]
      break;
 8004c8e:	e3f3      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004c90:	40021000 	.word	0x40021000
 8004c94:	0003d090 	.word	0x0003d090
 8004c98:	0800c8f4 	.word	0x0800c8f4
 8004c9c:	00f42400 	.word	0x00f42400
 8004ca0:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004ca4:	4ba9      	ldr	r3, [pc, #676]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004caa:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004cae:	613b      	str	r3, [r7, #16]
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004cb6:	d00c      	beq.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004cbe:	d87f      	bhi.n	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004cc6:	d04e      	beq.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cce:	d01d      	beq.n	8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8004cd0:	e076      	b.n	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004cd2:	4b9e      	ldr	r3, [pc, #632]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d172      	bne.n	8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004cde:	4b9b      	ldr	r3, [pc, #620]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0308 	and.w	r3, r3, #8
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d005      	beq.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8004cea:	4b98      	ldr	r3, [pc, #608]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	091b      	lsrs	r3, r3, #4
 8004cf0:	f003 030f 	and.w	r3, r3, #15
 8004cf4:	e005      	b.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8004cf6:	4b95      	ldr	r3, [pc, #596]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cfc:	0a1b      	lsrs	r3, r3, #8
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	4a93      	ldr	r2, [pc, #588]	@ (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8004d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d08:	61fb      	str	r3, [r7, #28]
          break;
 8004d0a:	e05b      	b.n	8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004d0c:	4b8f      	ldr	r3, [pc, #572]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d18:	d156      	bne.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004d1a:	4b8c      	ldr	r3, [pc, #560]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d26:	d14f      	bne.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004d28:	4b88      	ldr	r3, [pc, #544]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	0a1b      	lsrs	r3, r3, #8
 8004d2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d32:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	fb03 f202 	mul.w	r2, r3, r2
 8004d3c:	4b83      	ldr	r3, [pc, #524]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	091b      	lsrs	r3, r3, #4
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	3301      	adds	r3, #1
 8004d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004d4e:	4b7f      	ldr	r3, [pc, #508]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	0d5b      	lsrs	r3, r3, #21
 8004d54:	f003 0303 	and.w	r3, r3, #3
 8004d58:	3301      	adds	r3, #1
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d62:	61fb      	str	r3, [r7, #28]
          break;
 8004d64:	e030      	b.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004d66:	4b79      	ldr	r3, [pc, #484]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d72:	d12b      	bne.n	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004d74:	4b75      	ldr	r3, [pc, #468]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d80:	d124      	bne.n	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004d82:	4b72      	ldr	r3, [pc, #456]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	0a1b      	lsrs	r3, r3, #8
 8004d88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d8c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	fb03 f202 	mul.w	r2, r3, r2
 8004d96:	4b6d      	ldr	r3, [pc, #436]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	091b      	lsrs	r3, r3, #4
 8004d9c:	f003 0307 	and.w	r3, r3, #7
 8004da0:	3301      	adds	r3, #1
 8004da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004da8:	4b68      	ldr	r3, [pc, #416]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	0d5b      	lsrs	r3, r3, #21
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	3301      	adds	r3, #1
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dbc:	61fb      	str	r3, [r7, #28]
          break;
 8004dbe:	e005      	b.n	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8004dc0:	bf00      	nop
 8004dc2:	e359      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004dc4:	bf00      	nop
 8004dc6:	e357      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004dc8:	bf00      	nop
 8004dca:	e355      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004dcc:	bf00      	nop
        break;
 8004dce:	e353      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004dd0:	4b5e      	ldr	r3, [pc, #376]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	613b      	str	r3, [r7, #16]
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	2b03      	cmp	r3, #3
 8004de0:	d827      	bhi.n	8004e32 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8004de2:	a201      	add	r2, pc, #4	@ (adr r2, 8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8004de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de8:	08004df9 	.word	0x08004df9
 8004dec:	08004e01 	.word	0x08004e01
 8004df0:	08004e09 	.word	0x08004e09
 8004df4:	08004e1d 	.word	0x08004e1d
          frequency = HAL_RCC_GetPCLK2Freq();
 8004df8:	f7ff fa48 	bl	800428c <HAL_RCC_GetPCLK2Freq>
 8004dfc:	61f8      	str	r0, [r7, #28]
          break;
 8004dfe:	e01d      	b.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004e00:	f7ff f996 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 8004e04:	61f8      	str	r0, [r7, #28]
          break;
 8004e06:	e019      	b.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e08:	4b50      	ldr	r3, [pc, #320]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e14:	d10f      	bne.n	8004e36 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8004e16:	4b4f      	ldr	r3, [pc, #316]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004e18:	61fb      	str	r3, [r7, #28]
          break;
 8004e1a:	e00c      	b.n	8004e36 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004e1c:	4b4b      	ldr	r3, [pc, #300]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d107      	bne.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8004e2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e2e:	61fb      	str	r3, [r7, #28]
          break;
 8004e30:	e003      	b.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8004e32:	bf00      	nop
 8004e34:	e320      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004e36:	bf00      	nop
 8004e38:	e31e      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004e3a:	bf00      	nop
        break;
 8004e3c:	e31c      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004e3e:	4b43      	ldr	r3, [pc, #268]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e44:	f003 030c 	and.w	r3, r3, #12
 8004e48:	613b      	str	r3, [r7, #16]
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	2b0c      	cmp	r3, #12
 8004e4e:	d83a      	bhi.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8004e50:	a201      	add	r2, pc, #4	@ (adr r2, 8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8004e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e56:	bf00      	nop
 8004e58:	08004e8d 	.word	0x08004e8d
 8004e5c:	08004ec7 	.word	0x08004ec7
 8004e60:	08004ec7 	.word	0x08004ec7
 8004e64:	08004ec7 	.word	0x08004ec7
 8004e68:	08004e95 	.word	0x08004e95
 8004e6c:	08004ec7 	.word	0x08004ec7
 8004e70:	08004ec7 	.word	0x08004ec7
 8004e74:	08004ec7 	.word	0x08004ec7
 8004e78:	08004e9d 	.word	0x08004e9d
 8004e7c:	08004ec7 	.word	0x08004ec7
 8004e80:	08004ec7 	.word	0x08004ec7
 8004e84:	08004ec7 	.word	0x08004ec7
 8004e88:	08004eb1 	.word	0x08004eb1
          frequency = HAL_RCC_GetPCLK1Freq();
 8004e8c:	f7ff f9e8 	bl	8004260 <HAL_RCC_GetPCLK1Freq>
 8004e90:	61f8      	str	r0, [r7, #28]
          break;
 8004e92:	e01d      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8004e94:	f7ff f94c 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 8004e98:	61f8      	str	r0, [r7, #28]
          break;
 8004e9a:	e019      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e9c:	4b2b      	ldr	r3, [pc, #172]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ea4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ea8:	d10f      	bne.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8004eaa:	4b2a      	ldr	r3, [pc, #168]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004eac:	61fb      	str	r3, [r7, #28]
          break;
 8004eae:	e00c      	b.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004eb0:	4b26      	ldr	r3, [pc, #152]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d107      	bne.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8004ebe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ec2:	61fb      	str	r3, [r7, #28]
          break;
 8004ec4:	e003      	b.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8004ec6:	bf00      	nop
 8004ec8:	e2d6      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004eca:	bf00      	nop
 8004ecc:	e2d4      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004ece:	bf00      	nop
        break;
 8004ed0:	e2d2      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ed8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004edc:	613b      	str	r3, [r7, #16]
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	2b30      	cmp	r3, #48	@ 0x30
 8004ee2:	d021      	beq.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	2b30      	cmp	r3, #48	@ 0x30
 8004ee8:	d829      	bhi.n	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	2b20      	cmp	r3, #32
 8004eee:	d011      	beq.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	2b20      	cmp	r3, #32
 8004ef4:	d823      	bhi.n	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	2b10      	cmp	r3, #16
 8004f00:	d004      	beq.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8004f02:	e01c      	b.n	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004f04:	f7ff f9ac 	bl	8004260 <HAL_RCC_GetPCLK1Freq>
 8004f08:	61f8      	str	r0, [r7, #28]
          break;
 8004f0a:	e01d      	b.n	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8004f0c:	f7ff f910 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 8004f10:	61f8      	str	r0, [r7, #28]
          break;
 8004f12:	e019      	b.n	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f14:	4b0d      	ldr	r3, [pc, #52]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f20:	d10f      	bne.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8004f22:	4b0c      	ldr	r3, [pc, #48]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004f24:	61fb      	str	r3, [r7, #28]
          break;
 8004f26:	e00c      	b.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004f28:	4b08      	ldr	r3, [pc, #32]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d107      	bne.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8004f36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f3a:	61fb      	str	r3, [r7, #28]
          break;
 8004f3c:	e003      	b.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8004f3e:	bf00      	nop
 8004f40:	e29a      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004f42:	bf00      	nop
 8004f44:	e298      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004f46:	bf00      	nop
        break;
 8004f48:	e296      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004f4a:	bf00      	nop
 8004f4c:	40021000 	.word	0x40021000
 8004f50:	0800c8f4 	.word	0x0800c8f4
 8004f54:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004f58:	4b9b      	ldr	r3, [pc, #620]	@ (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f5e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004f62:	613b      	str	r3, [r7, #16]
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f68:	d021      	beq.n	8004fae <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f6e:	d829      	bhi.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	2b80      	cmp	r3, #128	@ 0x80
 8004f74:	d011      	beq.n	8004f9a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	2b80      	cmp	r3, #128	@ 0x80
 8004f7a:	d823      	bhi.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	2b40      	cmp	r3, #64	@ 0x40
 8004f86:	d004      	beq.n	8004f92 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8004f88:	e01c      	b.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004f8a:	f7ff f969 	bl	8004260 <HAL_RCC_GetPCLK1Freq>
 8004f8e:	61f8      	str	r0, [r7, #28]
          break;
 8004f90:	e01d      	b.n	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8004f92:	f7ff f8cd 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 8004f96:	61f8      	str	r0, [r7, #28]
          break;
 8004f98:	e019      	b.n	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f9a:	4b8b      	ldr	r3, [pc, #556]	@ (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fa6:	d10f      	bne.n	8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8004fa8:	4b88      	ldr	r3, [pc, #544]	@ (80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004faa:	61fb      	str	r3, [r7, #28]
          break;
 8004fac:	e00c      	b.n	8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004fae:	4b86      	ldr	r3, [pc, #536]	@ (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d107      	bne.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8004fbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fc0:	61fb      	str	r3, [r7, #28]
          break;
 8004fc2:	e003      	b.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8004fc4:	bf00      	nop
 8004fc6:	e257      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004fc8:	bf00      	nop
 8004fca:	e255      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004fcc:	bf00      	nop
        break;
 8004fce:	e253      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004fd0:	4b7d      	ldr	r3, [pc, #500]	@ (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fda:	613b      	str	r3, [r7, #16]
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fe2:	d025      	beq.n	8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fea:	d82c      	bhi.n	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ff2:	d013      	beq.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ffa:	d824      	bhi.n	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d004      	beq.n	800500c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005008:	d004      	beq.n	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 800500a:	e01c      	b.n	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 800500c:	f7ff f928 	bl	8004260 <HAL_RCC_GetPCLK1Freq>
 8005010:	61f8      	str	r0, [r7, #28]
          break;
 8005012:	e01d      	b.n	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005014:	f7ff f88c 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 8005018:	61f8      	str	r0, [r7, #28]
          break;
 800501a:	e019      	b.n	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800501c:	4b6a      	ldr	r3, [pc, #424]	@ (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005024:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005028:	d10f      	bne.n	800504a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 800502a:	4b68      	ldr	r3, [pc, #416]	@ (80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800502c:	61fb      	str	r3, [r7, #28]
          break;
 800502e:	e00c      	b.n	800504a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005030:	4b65      	ldr	r3, [pc, #404]	@ (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b02      	cmp	r3, #2
 800503c:	d107      	bne.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 800503e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005042:	61fb      	str	r3, [r7, #28]
          break;
 8005044:	e003      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8005046:	bf00      	nop
 8005048:	e216      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800504a:	bf00      	nop
 800504c:	e214      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800504e:	bf00      	nop
        break;
 8005050:	e212      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005052:	4b5d      	ldr	r3, [pc, #372]	@ (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005058:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800505c:	613b      	str	r3, [r7, #16]
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005064:	d025      	beq.n	80050b2 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800506c:	d82c      	bhi.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005074:	d013      	beq.n	800509e <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800507c:	d824      	bhi.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d004      	beq.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800508a:	d004      	beq.n	8005096 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 800508c:	e01c      	b.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 800508e:	f7ff f8e7 	bl	8004260 <HAL_RCC_GetPCLK1Freq>
 8005092:	61f8      	str	r0, [r7, #28]
          break;
 8005094:	e01d      	b.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8005096:	f7ff f84b 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 800509a:	61f8      	str	r0, [r7, #28]
          break;
 800509c:	e019      	b.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800509e:	4b4a      	ldr	r3, [pc, #296]	@ (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050aa:	d10f      	bne.n	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 80050ac:	4b47      	ldr	r3, [pc, #284]	@ (80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80050ae:	61fb      	str	r3, [r7, #28]
          break;
 80050b0:	e00c      	b.n	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80050b2:	4b45      	ldr	r3, [pc, #276]	@ (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80050b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d107      	bne.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 80050c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050c4:	61fb      	str	r3, [r7, #28]
          break;
 80050c6:	e003      	b.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 80050c8:	bf00      	nop
 80050ca:	e1d5      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80050cc:	bf00      	nop
 80050ce:	e1d3      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80050d0:	bf00      	nop
        break;
 80050d2:	e1d1      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80050d4:	4b3c      	ldr	r3, [pc, #240]	@ (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80050d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80050de:	613b      	str	r3, [r7, #16]
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80050e6:	d00c      	beq.n	8005102 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80050ee:	d864      	bhi.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050f6:	d008      	beq.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050fe:	d030      	beq.n	8005162 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8005100:	e05b      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005102:	f7ff f815 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 8005106:	61f8      	str	r0, [r7, #28]
          break;
 8005108:	e05c      	b.n	80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800510a:	4b2f      	ldr	r3, [pc, #188]	@ (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005112:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005116:	d152      	bne.n	80051be <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8005118:	4b2b      	ldr	r3, [pc, #172]	@ (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d04c      	beq.n	80051be <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005124:	4b28      	ldr	r3, [pc, #160]	@ (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	0a1b      	lsrs	r3, r3, #8
 800512a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800512e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	fb03 f202 	mul.w	r2, r3, r2
 8005138:	4b23      	ldr	r3, [pc, #140]	@ (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	091b      	lsrs	r3, r3, #4
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	3301      	adds	r3, #1
 8005144:	fbb2 f3f3 	udiv	r3, r2, r3
 8005148:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800514a:	4b1f      	ldr	r3, [pc, #124]	@ (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	0e5b      	lsrs	r3, r3, #25
 8005150:	f003 0303 	and.w	r3, r3, #3
 8005154:	3301      	adds	r3, #1
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	fbb2 f3f3 	udiv	r3, r2, r3
 800515e:	61fb      	str	r3, [r7, #28]
          break;
 8005160:	e02d      	b.n	80051be <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8005162:	4b19      	ldr	r3, [pc, #100]	@ (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800516a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800516e:	d128      	bne.n	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8005170:	4b15      	ldr	r3, [pc, #84]	@ (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d022      	beq.n	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800517c:	4b12      	ldr	r3, [pc, #72]	@ (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	0a1b      	lsrs	r3, r3, #8
 8005182:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005186:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	fb03 f202 	mul.w	r2, r3, r2
 8005190:	4b0d      	ldr	r3, [pc, #52]	@ (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	091b      	lsrs	r3, r3, #4
 8005196:	f003 0307 	and.w	r3, r3, #7
 800519a:	3301      	adds	r3, #1
 800519c:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80051a2:	4b09      	ldr	r3, [pc, #36]	@ (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	0e5b      	lsrs	r3, r3, #25
 80051a8:	f003 0303 	and.w	r3, r3, #3
 80051ac:	3301      	adds	r3, #1
 80051ae:	005b      	lsls	r3, r3, #1
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b6:	61fb      	str	r3, [r7, #28]
          break;
 80051b8:	e003      	b.n	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 80051ba:	bf00      	nop
 80051bc:	e15c      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80051be:	bf00      	nop
 80051c0:	e15a      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80051c2:	bf00      	nop
        break;
 80051c4:	e158      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80051c6:	bf00      	nop
 80051c8:	40021000 	.word	0x40021000
 80051cc:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80051d0:	4b9d      	ldr	r3, [pc, #628]	@ (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80051d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051da:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d103      	bne.n	80051ea <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 80051e2:	f7ff f853 	bl	800428c <HAL_RCC_GetPCLK2Freq>
 80051e6:	61f8      	str	r0, [r7, #28]
        break;
 80051e8:	e146      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 80051ea:	f7fe ffa1 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 80051ee:	61f8      	str	r0, [r7, #28]
        break;
 80051f0:	e142      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80051f2:	4b95      	ldr	r3, [pc, #596]	@ (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80051f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80051fc:	613b      	str	r3, [r7, #16]
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005204:	d013      	beq.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800520c:	d819      	bhi.n	8005242 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d004      	beq.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800521a:	d004      	beq.n	8005226 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 800521c:	e011      	b.n	8005242 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 800521e:	f7ff f81f 	bl	8004260 <HAL_RCC_GetPCLK1Freq>
 8005222:	61f8      	str	r0, [r7, #28]
          break;
 8005224:	e010      	b.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8005226:	f7fe ff83 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 800522a:	61f8      	str	r0, [r7, #28]
          break;
 800522c:	e00c      	b.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800522e:	4b86      	ldr	r3, [pc, #536]	@ (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005236:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800523a:	d104      	bne.n	8005246 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 800523c:	4b83      	ldr	r3, [pc, #524]	@ (800544c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800523e:	61fb      	str	r3, [r7, #28]
          break;
 8005240:	e001      	b.n	8005246 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8005242:	bf00      	nop
 8005244:	e118      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005246:	bf00      	nop
        break;
 8005248:	e116      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800524a:	4b7f      	ldr	r3, [pc, #508]	@ (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800524c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005250:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005254:	613b      	str	r3, [r7, #16]
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800525c:	d013      	beq.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005264:	d819      	bhi.n	800529a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d004      	beq.n	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005272:	d004      	beq.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8005274:	e011      	b.n	800529a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005276:	f7fe fff3 	bl	8004260 <HAL_RCC_GetPCLK1Freq>
 800527a:	61f8      	str	r0, [r7, #28]
          break;
 800527c:	e010      	b.n	80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800527e:	f7fe ff57 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 8005282:	61f8      	str	r0, [r7, #28]
          break;
 8005284:	e00c      	b.n	80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005286:	4b70      	ldr	r3, [pc, #448]	@ (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800528e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005292:	d104      	bne.n	800529e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8005294:	4b6d      	ldr	r3, [pc, #436]	@ (800544c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005296:	61fb      	str	r3, [r7, #28]
          break;
 8005298:	e001      	b.n	800529e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 800529a:	bf00      	nop
 800529c:	e0ec      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800529e:	bf00      	nop
        break;
 80052a0:	e0ea      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80052a2:	4b69      	ldr	r3, [pc, #420]	@ (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80052a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80052ac:	613b      	str	r3, [r7, #16]
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052b4:	d013      	beq.n	80052de <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052bc:	d819      	bhi.n	80052f2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d004      	beq.n	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052ca:	d004      	beq.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 80052cc:	e011      	b.n	80052f2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 80052ce:	f7fe ffc7 	bl	8004260 <HAL_RCC_GetPCLK1Freq>
 80052d2:	61f8      	str	r0, [r7, #28]
          break;
 80052d4:	e010      	b.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 80052d6:	f7fe ff2b 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 80052da:	61f8      	str	r0, [r7, #28]
          break;
 80052dc:	e00c      	b.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80052de:	4b5a      	ldr	r3, [pc, #360]	@ (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052ea:	d104      	bne.n	80052f6 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 80052ec:	4b57      	ldr	r3, [pc, #348]	@ (800544c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80052ee:	61fb      	str	r3, [r7, #28]
          break;
 80052f0:	e001      	b.n	80052f6 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 80052f2:	bf00      	nop
 80052f4:	e0c0      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80052f6:	bf00      	nop
        break;
 80052f8:	e0be      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80052fa:	4b53      	ldr	r3, [pc, #332]	@ (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80052fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005300:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005304:	613b      	str	r3, [r7, #16]
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800530c:	d02c      	beq.n	8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005314:	d833      	bhi.n	800537e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800531c:	d01a      	beq.n	8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005324:	d82b      	bhi.n	800537e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d004      	beq.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005332:	d004      	beq.n	800533e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8005334:	e023      	b.n	800537e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005336:	f7fe ff93 	bl	8004260 <HAL_RCC_GetPCLK1Freq>
 800533a:	61f8      	str	r0, [r7, #28]
          break;
 800533c:	e026      	b.n	800538c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800533e:	4b42      	ldr	r3, [pc, #264]	@ (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005340:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b02      	cmp	r3, #2
 800534a:	d11a      	bne.n	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 800534c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005350:	61fb      	str	r3, [r7, #28]
          break;
 8005352:	e016      	b.n	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005354:	4b3c      	ldr	r3, [pc, #240]	@ (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800535c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005360:	d111      	bne.n	8005386 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8005362:	4b3a      	ldr	r3, [pc, #232]	@ (800544c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005364:	61fb      	str	r3, [r7, #28]
          break;
 8005366:	e00e      	b.n	8005386 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005368:	4b37      	ldr	r3, [pc, #220]	@ (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800536a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b02      	cmp	r3, #2
 8005374:	d109      	bne.n	800538a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8005376:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800537a:	61fb      	str	r3, [r7, #28]
          break;
 800537c:	e005      	b.n	800538a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 800537e:	bf00      	nop
 8005380:	e07a      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005382:	bf00      	nop
 8005384:	e078      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005386:	bf00      	nop
 8005388:	e076      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800538a:	bf00      	nop
        break;
 800538c:	e074      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800538e:	4b2e      	ldr	r3, [pc, #184]	@ (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005394:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005398:	613b      	str	r3, [r7, #16]
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80053a0:	d02c      	beq.n	80053fc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80053a8:	d833      	bhi.n	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053b0:	d01a      	beq.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053b8:	d82b      	bhi.n	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d004      	beq.n	80053ca <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053c6:	d004      	beq.n	80053d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 80053c8:	e023      	b.n	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 80053ca:	f7fe ff49 	bl	8004260 <HAL_RCC_GetPCLK1Freq>
 80053ce:	61f8      	str	r0, [r7, #28]
          break;
 80053d0:	e026      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80053d2:	4b1d      	ldr	r3, [pc, #116]	@ (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80053d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d11a      	bne.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 80053e0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80053e4:	61fb      	str	r3, [r7, #28]
          break;
 80053e6:	e016      	b.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80053e8:	4b17      	ldr	r3, [pc, #92]	@ (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053f4:	d111      	bne.n	800541a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 80053f6:	4b15      	ldr	r3, [pc, #84]	@ (800544c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80053f8:	61fb      	str	r3, [r7, #28]
          break;
 80053fa:	e00e      	b.n	800541a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80053fc:	4b12      	ldr	r3, [pc, #72]	@ (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80053fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b02      	cmp	r3, #2
 8005408:	d109      	bne.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 800540a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800540e:	61fb      	str	r3, [r7, #28]
          break;
 8005410:	e005      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8005412:	bf00      	nop
 8005414:	e030      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005416:	bf00      	nop
 8005418:	e02e      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800541a:	bf00      	nop
 800541c:	e02c      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800541e:	bf00      	nop
        break;
 8005420:	e02a      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8005422:	4b09      	ldr	r3, [pc, #36]	@ (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005428:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800542c:	613b      	str	r3, [r7, #16]
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d004      	beq.n	800543e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800543a:	d009      	beq.n	8005450 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 800543c:	e012      	b.n	8005464 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800543e:	f7fe ff0f 	bl	8004260 <HAL_RCC_GetPCLK1Freq>
 8005442:	61f8      	str	r0, [r7, #28]
          break;
 8005444:	e00e      	b.n	8005464 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8005446:	bf00      	nop
 8005448:	40021000 	.word	0x40021000
 800544c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005450:	4b0c      	ldr	r3, [pc, #48]	@ (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005458:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800545c:	d101      	bne.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 800545e:	4b0a      	ldr	r3, [pc, #40]	@ (8005488 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005460:	61fb      	str	r3, [r7, #28]
          break;
 8005462:	bf00      	nop
        break;
 8005464:	e008      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8005466:	bf00      	nop
 8005468:	e006      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800546a:	bf00      	nop
 800546c:	e004      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800546e:	bf00      	nop
 8005470:	e002      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8005472:	bf00      	nop
 8005474:	e000      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8005476:	bf00      	nop
    }
  }

  return(frequency);
 8005478:	69fb      	ldr	r3, [r7, #28]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3720      	adds	r7, #32
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	40021000 	.word	0x40021000
 8005488:	00f42400 	.word	0x00f42400

0800548c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800549a:	4b75      	ldr	r3, [pc, #468]	@ (8005670 <RCCEx_PLLSAI1_Config+0x1e4>)
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d018      	beq.n	80054d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80054a6:	4b72      	ldr	r3, [pc, #456]	@ (8005670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f003 0203 	and.w	r2, r3, #3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d10d      	bne.n	80054d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
       ||
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d009      	beq.n	80054d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80054be:	4b6c      	ldr	r3, [pc, #432]	@ (8005670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	091b      	lsrs	r3, r3, #4
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	1c5a      	adds	r2, r3, #1
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
       ||
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d047      	beq.n	8005562 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	73fb      	strb	r3, [r7, #15]
 80054d6:	e044      	b.n	8005562 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b03      	cmp	r3, #3
 80054de:	d018      	beq.n	8005512 <RCCEx_PLLSAI1_Config+0x86>
 80054e0:	2b03      	cmp	r3, #3
 80054e2:	d825      	bhi.n	8005530 <RCCEx_PLLSAI1_Config+0xa4>
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d002      	beq.n	80054ee <RCCEx_PLLSAI1_Config+0x62>
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d009      	beq.n	8005500 <RCCEx_PLLSAI1_Config+0x74>
 80054ec:	e020      	b.n	8005530 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054ee:	4b60      	ldr	r3, [pc, #384]	@ (8005670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d11d      	bne.n	8005536 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054fe:	e01a      	b.n	8005536 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005500:	4b5b      	ldr	r3, [pc, #364]	@ (8005670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005508:	2b00      	cmp	r3, #0
 800550a:	d116      	bne.n	800553a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005510:	e013      	b.n	800553a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005512:	4b57      	ldr	r3, [pc, #348]	@ (8005670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10f      	bne.n	800553e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800551e:	4b54      	ldr	r3, [pc, #336]	@ (8005670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d109      	bne.n	800553e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800552e:	e006      	b.n	800553e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	73fb      	strb	r3, [r7, #15]
      break;
 8005534:	e004      	b.n	8005540 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005536:	bf00      	nop
 8005538:	e002      	b.n	8005540 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800553a:	bf00      	nop
 800553c:	e000      	b.n	8005540 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800553e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005540:	7bfb      	ldrb	r3, [r7, #15]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10d      	bne.n	8005562 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005546:	4b4a      	ldr	r3, [pc, #296]	@ (8005670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6819      	ldr	r1, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	3b01      	subs	r3, #1
 8005558:	011b      	lsls	r3, r3, #4
 800555a:	430b      	orrs	r3, r1
 800555c:	4944      	ldr	r1, [pc, #272]	@ (8005670 <RCCEx_PLLSAI1_Config+0x1e4>)
 800555e:	4313      	orrs	r3, r2
 8005560:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005562:	7bfb      	ldrb	r3, [r7, #15]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d17d      	bne.n	8005664 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005568:	4b41      	ldr	r3, [pc, #260]	@ (8005670 <RCCEx_PLLSAI1_Config+0x1e4>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a40      	ldr	r2, [pc, #256]	@ (8005670 <RCCEx_PLLSAI1_Config+0x1e4>)
 800556e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005572:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005574:	f7fc fd38 	bl	8001fe8 <HAL_GetTick>
 8005578:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800557a:	e009      	b.n	8005590 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800557c:	f7fc fd34 	bl	8001fe8 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d902      	bls.n	8005590 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	73fb      	strb	r3, [r7, #15]
        break;
 800558e:	e005      	b.n	800559c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005590:	4b37      	ldr	r3, [pc, #220]	@ (8005670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1ef      	bne.n	800557c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d160      	bne.n	8005664 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d111      	bne.n	80055cc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055a8:	4b31      	ldr	r3, [pc, #196]	@ (8005670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80055b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6892      	ldr	r2, [r2, #8]
 80055b8:	0211      	lsls	r1, r2, #8
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	68d2      	ldr	r2, [r2, #12]
 80055be:	0912      	lsrs	r2, r2, #4
 80055c0:	0452      	lsls	r2, r2, #17
 80055c2:	430a      	orrs	r2, r1
 80055c4:	492a      	ldr	r1, [pc, #168]	@ (8005670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	610b      	str	r3, [r1, #16]
 80055ca:	e027      	b.n	800561c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d112      	bne.n	80055f8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055d2:	4b27      	ldr	r3, [pc, #156]	@ (8005670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80055da:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6892      	ldr	r2, [r2, #8]
 80055e2:	0211      	lsls	r1, r2, #8
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6912      	ldr	r2, [r2, #16]
 80055e8:	0852      	lsrs	r2, r2, #1
 80055ea:	3a01      	subs	r2, #1
 80055ec:	0552      	lsls	r2, r2, #21
 80055ee:	430a      	orrs	r2, r1
 80055f0:	491f      	ldr	r1, [pc, #124]	@ (8005670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	610b      	str	r3, [r1, #16]
 80055f6:	e011      	b.n	800561c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005600:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	6892      	ldr	r2, [r2, #8]
 8005608:	0211      	lsls	r1, r2, #8
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	6952      	ldr	r2, [r2, #20]
 800560e:	0852      	lsrs	r2, r2, #1
 8005610:	3a01      	subs	r2, #1
 8005612:	0652      	lsls	r2, r2, #25
 8005614:	430a      	orrs	r2, r1
 8005616:	4916      	ldr	r1, [pc, #88]	@ (8005670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005618:	4313      	orrs	r3, r2
 800561a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800561c:	4b14      	ldr	r3, [pc, #80]	@ (8005670 <RCCEx_PLLSAI1_Config+0x1e4>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a13      	ldr	r2, [pc, #76]	@ (8005670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005622:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005626:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005628:	f7fc fcde 	bl	8001fe8 <HAL_GetTick>
 800562c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800562e:	e009      	b.n	8005644 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005630:	f7fc fcda 	bl	8001fe8 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d902      	bls.n	8005644 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	73fb      	strb	r3, [r7, #15]
          break;
 8005642:	e005      	b.n	8005650 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005644:	4b0a      	ldr	r3, [pc, #40]	@ (8005670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d0ef      	beq.n	8005630 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005650:	7bfb      	ldrb	r3, [r7, #15]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d106      	bne.n	8005664 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005656:	4b06      	ldr	r3, [pc, #24]	@ (8005670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005658:	691a      	ldr	r2, [r3, #16]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	4904      	ldr	r1, [pc, #16]	@ (8005670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005660:	4313      	orrs	r3, r2
 8005662:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005664:	7bfb      	ldrb	r3, [r7, #15]
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	40021000 	.word	0x40021000

08005674 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005682:	4b6a      	ldr	r3, [pc, #424]	@ (800582c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d018      	beq.n	80056c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800568e:	4b67      	ldr	r3, [pc, #412]	@ (800582c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f003 0203 	and.w	r2, r3, #3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	429a      	cmp	r2, r3
 800569c:	d10d      	bne.n	80056ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
       ||
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d009      	beq.n	80056ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80056a6:	4b61      	ldr	r3, [pc, #388]	@ (800582c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	091b      	lsrs	r3, r3, #4
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	1c5a      	adds	r2, r3, #1
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
       ||
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d047      	beq.n	800574a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	73fb      	strb	r3, [r7, #15]
 80056be:	e044      	b.n	800574a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b03      	cmp	r3, #3
 80056c6:	d018      	beq.n	80056fa <RCCEx_PLLSAI2_Config+0x86>
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	d825      	bhi.n	8005718 <RCCEx_PLLSAI2_Config+0xa4>
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d002      	beq.n	80056d6 <RCCEx_PLLSAI2_Config+0x62>
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d009      	beq.n	80056e8 <RCCEx_PLLSAI2_Config+0x74>
 80056d4:	e020      	b.n	8005718 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056d6:	4b55      	ldr	r3, [pc, #340]	@ (800582c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d11d      	bne.n	800571e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056e6:	e01a      	b.n	800571e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056e8:	4b50      	ldr	r3, [pc, #320]	@ (800582c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d116      	bne.n	8005722 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056f8:	e013      	b.n	8005722 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056fa:	4b4c      	ldr	r3, [pc, #304]	@ (800582c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10f      	bne.n	8005726 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005706:	4b49      	ldr	r3, [pc, #292]	@ (800582c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d109      	bne.n	8005726 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005716:	e006      	b.n	8005726 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	73fb      	strb	r3, [r7, #15]
      break;
 800571c:	e004      	b.n	8005728 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800571e:	bf00      	nop
 8005720:	e002      	b.n	8005728 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005722:	bf00      	nop
 8005724:	e000      	b.n	8005728 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005726:	bf00      	nop
    }

    if(status == HAL_OK)
 8005728:	7bfb      	ldrb	r3, [r7, #15]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10d      	bne.n	800574a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800572e:	4b3f      	ldr	r3, [pc, #252]	@ (800582c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6819      	ldr	r1, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	3b01      	subs	r3, #1
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	430b      	orrs	r3, r1
 8005744:	4939      	ldr	r1, [pc, #228]	@ (800582c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005746:	4313      	orrs	r3, r2
 8005748:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800574a:	7bfb      	ldrb	r3, [r7, #15]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d167      	bne.n	8005820 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005750:	4b36      	ldr	r3, [pc, #216]	@ (800582c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a35      	ldr	r2, [pc, #212]	@ (800582c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005756:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800575a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800575c:	f7fc fc44 	bl	8001fe8 <HAL_GetTick>
 8005760:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005762:	e009      	b.n	8005778 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005764:	f7fc fc40 	bl	8001fe8 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b02      	cmp	r3, #2
 8005770:	d902      	bls.n	8005778 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	73fb      	strb	r3, [r7, #15]
        break;
 8005776:	e005      	b.n	8005784 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005778:	4b2c      	ldr	r3, [pc, #176]	@ (800582c <RCCEx_PLLSAI2_Config+0x1b8>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1ef      	bne.n	8005764 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005784:	7bfb      	ldrb	r3, [r7, #15]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d14a      	bne.n	8005820 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d111      	bne.n	80057b4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005790:	4b26      	ldr	r3, [pc, #152]	@ (800582c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005798:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	6892      	ldr	r2, [r2, #8]
 80057a0:	0211      	lsls	r1, r2, #8
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	68d2      	ldr	r2, [r2, #12]
 80057a6:	0912      	lsrs	r2, r2, #4
 80057a8:	0452      	lsls	r2, r2, #17
 80057aa:	430a      	orrs	r2, r1
 80057ac:	491f      	ldr	r1, [pc, #124]	@ (800582c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	614b      	str	r3, [r1, #20]
 80057b2:	e011      	b.n	80057d8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057b4:	4b1d      	ldr	r3, [pc, #116]	@ (800582c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80057bc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	6892      	ldr	r2, [r2, #8]
 80057c4:	0211      	lsls	r1, r2, #8
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	6912      	ldr	r2, [r2, #16]
 80057ca:	0852      	lsrs	r2, r2, #1
 80057cc:	3a01      	subs	r2, #1
 80057ce:	0652      	lsls	r2, r2, #25
 80057d0:	430a      	orrs	r2, r1
 80057d2:	4916      	ldr	r1, [pc, #88]	@ (800582c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80057d8:	4b14      	ldr	r3, [pc, #80]	@ (800582c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a13      	ldr	r2, [pc, #76]	@ (800582c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e4:	f7fc fc00 	bl	8001fe8 <HAL_GetTick>
 80057e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057ea:	e009      	b.n	8005800 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057ec:	f7fc fbfc 	bl	8001fe8 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d902      	bls.n	8005800 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	73fb      	strb	r3, [r7, #15]
          break;
 80057fe:	e005      	b.n	800580c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005800:	4b0a      	ldr	r3, [pc, #40]	@ (800582c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d0ef      	beq.n	80057ec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800580c:	7bfb      	ldrb	r3, [r7, #15]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d106      	bne.n	8005820 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005812:	4b06      	ldr	r3, [pc, #24]	@ (800582c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005814:	695a      	ldr	r2, [r3, #20]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	4904      	ldr	r1, [pc, #16]	@ (800582c <RCCEx_PLLSAI2_Config+0x1b8>)
 800581c:	4313      	orrs	r3, r2
 800581e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005820:	7bfb      	ldrb	r3, [r7, #15]
}
 8005822:	4618      	mov	r0, r3
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	40021000 	.word	0x40021000

08005830 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005830:	b480      	push	{r7}
 8005832:	b089      	sub	sp, #36	@ 0x24
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800583a:	2300      	movs	r3, #0
 800583c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800583e:	2300      	movs	r3, #0
 8005840:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8005842:	2300      	movs	r3, #0
 8005844:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800584c:	d10c      	bne.n	8005868 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800584e:	4b6e      	ldr	r3, [pc, #440]	@ (8005a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005854:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005858:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005860:	d112      	bne.n	8005888 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005862:	4b6a      	ldr	r3, [pc, #424]	@ (8005a0c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8005864:	61fb      	str	r3, [r7, #28]
 8005866:	e00f      	b.n	8005888 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800586e:	d10b      	bne.n	8005888 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005870:	4b65      	ldr	r3, [pc, #404]	@ (8005a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005876:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800587a:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005882:	d101      	bne.n	8005888 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8005884:	4b61      	ldr	r3, [pc, #388]	@ (8005a0c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8005886:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	2b00      	cmp	r3, #0
 800588c:	f040 80b4 	bne.w	80059f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800589a:	d003      	beq.n	80058a4 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058a2:	d135      	bne.n	8005910 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80058a4:	4b58      	ldr	r3, [pc, #352]	@ (8005a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058b0:	f040 80a1 	bne.w	80059f6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 80058b4:	4b54      	ldr	r3, [pc, #336]	@ (8005a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 809a 	beq.w	80059f6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80058c2:	4b51      	ldr	r3, [pc, #324]	@ (8005a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	091b      	lsrs	r3, r3, #4
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	3301      	adds	r3, #1
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80058d6:	4b4c      	ldr	r3, [pc, #304]	@ (8005a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	0a1b      	lsrs	r3, r3, #8
 80058dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058e0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10a      	bne.n	80058fe <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80058e8:	4b47      	ldr	r3, [pc, #284]	@ (8005a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d002      	beq.n	80058fa <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 80058f4:	2311      	movs	r3, #17
 80058f6:	617b      	str	r3, [r7, #20]
 80058f8:	e001      	b.n	80058fe <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 80058fa:	2307      	movs	r3, #7
 80058fc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	fb03 f202 	mul.w	r2, r3, r2
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	fbb2 f3f3 	udiv	r3, r2, r3
 800590c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800590e:	e072      	b.n	80059f6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d133      	bne.n	800597e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8005916:	4b3c      	ldr	r3, [pc, #240]	@ (8005a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800591e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005922:	d169      	bne.n	80059f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005924:	4b38      	ldr	r3, [pc, #224]	@ (8005a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d063      	beq.n	80059f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005930:	4b35      	ldr	r3, [pc, #212]	@ (8005a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	091b      	lsrs	r3, r3, #4
 8005936:	f003 0307 	and.w	r3, r3, #7
 800593a:	3301      	adds	r3, #1
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005942:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005944:	4b30      	ldr	r3, [pc, #192]	@ (8005a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	0a1b      	lsrs	r3, r3, #8
 800594a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800594e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10a      	bne.n	800596c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8005956:	4b2c      	ldr	r3, [pc, #176]	@ (8005a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8005962:	2311      	movs	r3, #17
 8005964:	617b      	str	r3, [r7, #20]
 8005966:	e001      	b.n	800596c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8005968:	2307      	movs	r3, #7
 800596a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	fb03 f202 	mul.w	r2, r3, r2
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	fbb2 f3f3 	udiv	r3, r2, r3
 800597a:	61fb      	str	r3, [r7, #28]
 800597c:	e03c      	b.n	80059f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005984:	d003      	beq.n	800598e <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800598c:	d134      	bne.n	80059f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800598e:	4b1e      	ldr	r3, [pc, #120]	@ (8005a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005996:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800599a:	d12d      	bne.n	80059f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800599c:	4b1a      	ldr	r3, [pc, #104]	@ (8005a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d027      	beq.n	80059f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80059a8:	4b17      	ldr	r3, [pc, #92]	@ (8005a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	091b      	lsrs	r3, r3, #4
 80059ae:	f003 0307 	and.w	r3, r3, #7
 80059b2:	3301      	adds	r3, #1
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ba:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80059bc:	4b12      	ldr	r3, [pc, #72]	@ (8005a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	0a1b      	lsrs	r3, r3, #8
 80059c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059c6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10a      	bne.n	80059e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80059ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 80059da:	2311      	movs	r3, #17
 80059dc:	617b      	str	r3, [r7, #20]
 80059de:	e001      	b.n	80059e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 80059e0:	2307      	movs	r3, #7
 80059e2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	fb03 f202 	mul.w	r2, r3, r2
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f2:	61fb      	str	r3, [r7, #28]
 80059f4:	e000      	b.n	80059f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80059f6:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80059f8:	69fb      	ldr	r3, [r7, #28]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3724      	adds	r7, #36	@ 0x24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	40021000 	.word	0x40021000
 8005a0c:	001fff68 	.word	0x001fff68

08005a10 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
 8005a1c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d904      	bls.n	8005a2e <HAL_SAI_InitProtocol+0x1e>
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	3b03      	subs	r3, #3
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d812      	bhi.n	8005a52 <HAL_SAI_InitProtocol+0x42>
 8005a2c:	e008      	b.n	8005a40 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	68b9      	ldr	r1, [r7, #8]
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 fcff 	bl	8006438 <SAI_InitI2S>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a3e:	e00b      	b.n	8005a58 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	68b9      	ldr	r1, [r7, #8]
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f000 fda8 	bl	800659c <SAI_InitPCM>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a50:	e002      	b.n	8005a58 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	75fb      	strb	r3, [r7, #23]
      break;
 8005a56:	bf00      	nop
  }

  if (status == HAL_OK)
 8005a58:	7dfb      	ldrb	r3, [r7, #23]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d104      	bne.n	8005a68 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 f808 	bl	8005a74 <HAL_SAI_Init>
 8005a64:	4603      	mov	r3, r0
 8005a66:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3718      	adds	r7, #24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
	...

08005a74 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b088      	sub	sp, #32
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e155      	b.n	8005d32 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7fb f9b4 	bl	8000e08 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 fe35 	bl	8006710 <SAI_Disable>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e140      	b.n	8005d32 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d00c      	beq.n	8005ada <HAL_SAI_Init+0x66>
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d80d      	bhi.n	8005ae0 <HAL_SAI_Init+0x6c>
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d002      	beq.n	8005ace <HAL_SAI_Init+0x5a>
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d003      	beq.n	8005ad4 <HAL_SAI_Init+0x60>
 8005acc:	e008      	b.n	8005ae0 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	61fb      	str	r3, [r7, #28]
      break;
 8005ad2:	e008      	b.n	8005ae6 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005ad4:	2310      	movs	r3, #16
 8005ad6:	61fb      	str	r3, [r7, #28]
      break;
 8005ad8:	e005      	b.n	8005ae6 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005ada:	2320      	movs	r3, #32
 8005adc:	61fb      	str	r3, [r7, #28]
      break;
 8005ade:	e002      	b.n	8005ae6 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	61fb      	str	r3, [r7, #28]
      break;
 8005ae4:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	2b03      	cmp	r3, #3
 8005aec:	d81d      	bhi.n	8005b2a <HAL_SAI_Init+0xb6>
 8005aee:	a201      	add	r2, pc, #4	@ (adr r2, 8005af4 <HAL_SAI_Init+0x80>)
 8005af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af4:	08005b05 	.word	0x08005b05
 8005af8:	08005b0b 	.word	0x08005b0b
 8005afc:	08005b13 	.word	0x08005b13
 8005b00:	08005b1b 	.word	0x08005b1b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8005b04:	2300      	movs	r3, #0
 8005b06:	617b      	str	r3, [r7, #20]
      break;
 8005b08:	e012      	b.n	8005b30 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005b0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b0e:	617b      	str	r3, [r7, #20]
      break;
 8005b10:	e00e      	b.n	8005b30 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005b12:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005b16:	617b      	str	r3, [r7, #20]
      break;
 8005b18:	e00a      	b.n	8005b30 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005b1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005b1e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	f043 0301 	orr.w	r3, r3, #1
 8005b26:	61fb      	str	r3, [r7, #28]
      break;
 8005b28:	e002      	b.n	8005b30 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	617b      	str	r3, [r7, #20]
      break;
 8005b2e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a81      	ldr	r2, [pc, #516]	@ (8005d3c <HAL_SAI_Init+0x2c8>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d004      	beq.n	8005b44 <HAL_SAI_Init+0xd0>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a80      	ldr	r2, [pc, #512]	@ (8005d40 <HAL_SAI_Init+0x2cc>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d103      	bne.n	8005b4c <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8005b44:	4a7f      	ldr	r2, [pc, #508]	@ (8005d44 <HAL_SAI_Init+0x2d0>)
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	6013      	str	r3, [r2, #0]
 8005b4a:	e002      	b.n	8005b52 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005b4c:	4a7e      	ldr	r2, [pc, #504]	@ (8005d48 <HAL_SAI_Init+0x2d4>)
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d041      	beq.n	8005bde <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a77      	ldr	r2, [pc, #476]	@ (8005d3c <HAL_SAI_Init+0x2c8>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d004      	beq.n	8005b6e <HAL_SAI_Init+0xfa>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a75      	ldr	r2, [pc, #468]	@ (8005d40 <HAL_SAI_Init+0x2cc>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d105      	bne.n	8005b7a <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005b6e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005b72:	f7fe ff1d 	bl	80049b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005b76:	6138      	str	r0, [r7, #16]
 8005b78:	e004      	b.n	8005b84 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005b7a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005b7e:	f7fe ff17 	bl	80049b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005b82:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	4613      	mov	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	005b      	lsls	r3, r3, #1
 8005b8e:	461a      	mov	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	025b      	lsls	r3, r3, #9
 8005b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9a:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	4a6b      	ldr	r2, [pc, #428]	@ (8005d4c <HAL_SAI_Init+0x2d8>)
 8005ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba4:	08da      	lsrs	r2, r3, #3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8005baa:	68f9      	ldr	r1, [r7, #12]
 8005bac:	4b67      	ldr	r3, [pc, #412]	@ (8005d4c <HAL_SAI_Init+0x2d8>)
 8005bae:	fba3 2301 	umull	r2, r3, r3, r1
 8005bb2:	08da      	lsrs	r2, r3, #3
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	1aca      	subs	r2, r1, r3
 8005bbe:	2a08      	cmp	r2, #8
 8005bc0:	d904      	bls.n	8005bcc <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	1c5a      	adds	r2, r3, #1
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd0:	2b04      	cmp	r3, #4
 8005bd2:	d104      	bne.n	8005bde <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	085a      	lsrs	r2, r3, #1
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <HAL_SAI_Init+0x17a>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d109      	bne.n	8005c02 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d101      	bne.n	8005bfa <HAL_SAI_Init+0x186>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	e001      	b.n	8005bfe <HAL_SAI_Init+0x18a>
 8005bfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005bfe:	61bb      	str	r3, [r7, #24]
 8005c00:	e008      	b.n	8005c14 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d102      	bne.n	8005c10 <HAL_SAI_Init+0x19c>
 8005c0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005c0e:	e000      	b.n	8005c12 <HAL_SAI_Init+0x19e>
 8005c10:	2300      	movs	r3, #0
 8005c12:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6819      	ldr	r1, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	4b4c      	ldr	r3, [pc, #304]	@ (8005d50 <HAL_SAI_Init+0x2dc>)
 8005c20:	400b      	ands	r3, r1
 8005c22:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6819      	ldr	r1, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c32:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005c38:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c3e:	431a      	orrs	r2, r3
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 8005c4c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005c58:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	051b      	lsls	r3, r3, #20
 8005c60:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6812      	ldr	r2, [r2, #0]
 8005c74:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005c78:	f023 030f 	bic.w	r3, r3, #15
 8005c7c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6859      	ldr	r1, [r3, #4]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	699a      	ldr	r2, [r3, #24]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c92:	431a      	orrs	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6899      	ldr	r1, [r3, #8]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	4b2b      	ldr	r3, [pc, #172]	@ (8005d54 <HAL_SAI_Init+0x2e0>)
 8005ca8:	400b      	ands	r3, r1
 8005caa:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6899      	ldr	r1, [r3, #8]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb6:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005cbc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8005cc2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8005cc8:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005cd2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68d9      	ldr	r1, [r3, #12]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8005cea:	400b      	ands	r3, r1
 8005cec:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68d9      	ldr	r1, [r3, #12]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cfc:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d02:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005d04:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	021b      	lsls	r3, r3, #8
 8005d0e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3720      	adds	r7, #32
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	40015404 	.word	0x40015404
 8005d40:	40015424 	.word	0x40015424
 8005d44:	40015400 	.word	0x40015400
 8005d48:	40015800 	.word	0x40015800
 8005d4c:	cccccccd 	.word	0xcccccccd
 8005d50:	ff05c010 	.word	0xff05c010
 8005d54:	fff88000 	.word	0xfff88000

08005d58 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d60:	2300      	movs	r3, #0
 8005d62:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d101      	bne.n	8005d72 <HAL_SAI_Abort+0x1a>
 8005d6e:	2302      	movs	r3, #2
 8005d70:	e053      	b.n	8005e1a <HAL_SAI_Abort+0xc2>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 fcc8 	bl	8006710 <SAI_Disable>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d98:	d125      	bne.n	8005de6 <HAL_SAI_Abort+0x8e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005da8:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b12      	cmp	r3, #18
 8005db4:	d108      	bne.n	8005dc8 <HAL_SAI_Abort+0x70>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d004      	beq.n	8005dc8 <HAL_SAI_Abort+0x70>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7fc fb16 	bl	80023f4 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b22      	cmp	r3, #34	@ 0x22
 8005dd2:	d108      	bne.n	8005de6 <HAL_SAI_Abort+0x8e>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d004      	beq.n	8005de6 <HAL_SAI_Abort+0x8e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fc fb07 	bl	80023f4 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2200      	movs	r2, #0
 8005dec:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005df6:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0208 	orr.w	r2, r2, #8
 8005e06:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
	...

08005e24 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8005e32:	f7fc f8d9 	bl	8001fe8 <HAL_GetTick>
 8005e36:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d002      	beq.n	8005e44 <HAL_SAI_Transmit_DMA+0x20>
 8005e3e:	88fb      	ldrh	r3, [r7, #6]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e093      	b.n	8005f70 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	f040 808c 	bne.w	8005f6e <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d101      	bne.n	8005e64 <HAL_SAI_Transmit_DMA+0x40>
 8005e60:	2302      	movs	r3, #2
 8005e62:	e085      	b.n	8005f70 <HAL_SAI_Transmit_DMA+0x14c>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	88fa      	ldrh	r2, [r7, #6]
 8005e76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	88fa      	ldrh	r2, [r7, #6]
 8005e7e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2212      	movs	r2, #18
 8005e8e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e96:	4a38      	ldr	r2, [pc, #224]	@ (8005f78 <HAL_SAI_Transmit_DMA+0x154>)
 8005e98:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e9e:	4a37      	ldr	r2, [pc, #220]	@ (8005f7c <HAL_SAI_Transmit_DMA+0x158>)
 8005ea0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ea6:	4a36      	ldr	r2, [pc, #216]	@ (8005f80 <HAL_SAI_Transmit_DMA+0x15c>)
 8005ea8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005eae:	2200      	movs	r2, #0
 8005eb0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005eba:	4619      	mov	r1, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	331c      	adds	r3, #28
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005eca:	f7fc fa33 	bl	8002334 <HAL_DMA_Start_IT>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d005      	beq.n	8005ee0 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e047      	b.n	8005f70 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 fbdc 	bl	80066a0 <SAI_InterruptFlag>
 8005ee8:	4601      	mov	r1, r0
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	691a      	ldr	r2, [r3, #16]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005f06:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005f08:	e015      	b.n	8005f36 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8005f0a:	f7fc f86d 	bl	8001fe8 <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f18:	d90d      	bls.n	8005f36 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f20:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e01c      	b.n	8005f70 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d0e2      	beq.n	8005f0a <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d107      	bne.n	8005f62 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005f60:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	e000      	b.n	8005f70 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 8005f6e:	2302      	movs	r3, #2
  }
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3718      	adds	r7, #24
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	080067e3 	.word	0x080067e3
 8005f7c:	08006785 	.word	0x08006785
 8005f80:	08006879 	.word	0x08006879

08005f84 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d002      	beq.n	8005f9e <HAL_SAI_Receive_DMA+0x1a>
 8005f98:	88fb      	ldrh	r3, [r7, #6]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e074      	b.n	800608c <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d16d      	bne.n	800608a <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d101      	bne.n	8005fbc <HAL_SAI_Receive_DMA+0x38>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	e067      	b.n	800608c <HAL_SAI_Receive_DMA+0x108>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	88fa      	ldrh	r2, [r7, #6]
 8005fce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	88fa      	ldrh	r2, [r7, #6]
 8005fd6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2222      	movs	r2, #34	@ 0x22
 8005fe6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fee:	4a29      	ldr	r2, [pc, #164]	@ (8006094 <HAL_SAI_Receive_DMA+0x110>)
 8005ff0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ff6:	4a28      	ldr	r2, [pc, #160]	@ (8006098 <HAL_SAI_Receive_DMA+0x114>)
 8005ff8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ffe:	4a27      	ldr	r2, [pc, #156]	@ (800609c <HAL_SAI_Receive_DMA+0x118>)
 8006000:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006006:	2200      	movs	r2, #0
 8006008:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	331c      	adds	r3, #28
 8006014:	4619      	mov	r1, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800601a:	461a      	mov	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006022:	f7fc f987 	bl	8002334 <HAL_DMA_Start_IT>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d005      	beq.n	8006038 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e029      	b.n	800608c <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006038:	2100      	movs	r1, #0
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f000 fb30 	bl	80066a0 <SAI_InterruptFlag>
 8006040:	4601      	mov	r1, r0
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	691a      	ldr	r2, [r3, #16]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	430a      	orrs	r2, r1
 800604e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800605e:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d107      	bne.n	800607e <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800607c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006086:	2300      	movs	r3, #0
 8006088:	e000      	b.n	800608c <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800608a:	2302      	movs	r3, #2
  }
}
 800608c:	4618      	mov	r0, r3
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	0800685d 	.word	0x0800685d
 8006098:	080067ff 	.word	0x080067ff
 800609c:	08006879 	.word	0x08006879

080060a0 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 8192 	beq.w	80063da <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f003 0308 	and.w	r3, r3, #8
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d009      	beq.n	80060ec <HAL_SAI_IRQHandler+0x4c>
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	f003 0308 	and.w	r3, r3, #8
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d004      	beq.n	80060ec <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	4798      	blx	r3
 80060ea:	e176      	b.n	80063da <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d01e      	beq.n	8006134 <HAL_SAI_IRQHandler+0x94>
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d019      	beq.n	8006134 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2201      	movs	r2, #1
 8006106:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b22      	cmp	r3, #34	@ 0x22
 8006112:	d101      	bne.n	8006118 <HAL_SAI_IRQHandler+0x78>
 8006114:	2301      	movs	r3, #1
 8006116:	e000      	b.n	800611a <HAL_SAI_IRQHandler+0x7a>
 8006118:	2302      	movs	r3, #2
 800611a:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	431a      	orrs	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7fa fcaf 	bl	8000a90 <HAL_SAI_ErrorCallback>
 8006132:	e152      	b.n	80063da <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d011      	beq.n	8006162 <HAL_SAI_IRQHandler+0xc2>
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00c      	beq.n	8006162 <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2202      	movs	r2, #2
 800614e:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 8140 	beq.w	80063da <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800615e:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 8006160:	e13b      	b.n	80063da <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f003 0320 	and.w	r3, r3, #32
 8006168:	2b00      	cmp	r3, #0
 800616a:	d055      	beq.n	8006218 <HAL_SAI_IRQHandler+0x178>
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	f003 0320 	and.w	r3, r3, #32
 8006172:	2b00      	cmp	r3, #0
 8006174:	d050      	beq.n	8006218 <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2220      	movs	r2, #32
 800617c:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006184:	f043 0204 	orr.w	r2, r3, #4
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d038      	beq.n	800620a <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800619c:	2b00      	cmp	r3, #0
 800619e:	d016      	beq.n	80061ce <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061a4:	4a8f      	ldr	r2, [pc, #572]	@ (80063e4 <HAL_SAI_IRQHandler+0x344>)
 80061a6:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7fc f95f 	bl	8002470 <HAL_DMA_Abort_IT>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00a      	beq.n	80061ce <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061be:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f7fa fc61 	bl	8000a90 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f000 80fc 	beq.w	80063d0 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061dc:	4a81      	ldr	r2, [pc, #516]	@ (80063e4 <HAL_SAI_IRQHandler+0x344>)
 80061de:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7fc f943 	bl	8002470 <HAL_DMA_Abort_IT>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f000 80ef 	beq.w	80063d0 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061f8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7fa fc44 	bl	8000a90 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006208:	e0e2      	b.n	80063d0 <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7ff fda4 	bl	8005d58 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7fa fc3d 	bl	8000a90 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006216:	e0db      	b.n	80063d0 <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800621e:	2b00      	cmp	r3, #0
 8006220:	d055      	beq.n	80062ce <HAL_SAI_IRQHandler+0x22e>
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006228:	2b00      	cmp	r3, #0
 800622a:	d050      	beq.n	80062ce <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2240      	movs	r2, #64	@ 0x40
 8006232:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800623a:	f043 0208 	orr.w	r2, r3, #8
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d038      	beq.n	80062c0 <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006252:	2b00      	cmp	r3, #0
 8006254:	d016      	beq.n	8006284 <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800625a:	4a62      	ldr	r2, [pc, #392]	@ (80063e4 <HAL_SAI_IRQHandler+0x344>)
 800625c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006262:	4618      	mov	r0, r3
 8006264:	f7fc f904 	bl	8002470 <HAL_DMA_Abort_IT>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00a      	beq.n	8006284 <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006274:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7fa fc06 	bl	8000a90 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 80a3 	beq.w	80063d4 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006292:	4a54      	ldr	r2, [pc, #336]	@ (80063e4 <HAL_SAI_IRQHandler+0x344>)
 8006294:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800629a:	4618      	mov	r0, r3
 800629c:	f7fc f8e8 	bl	8002470 <HAL_DMA_Abort_IT>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 8096 	beq.w	80063d4 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062ae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f7fa fbe9 	bl	8000a90 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80062be:	e089      	b.n	80063d4 <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7ff fd49 	bl	8005d58 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7fa fbe2 	bl	8000a90 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80062cc:	e082      	b.n	80063d4 <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d061      	beq.n	800639c <HAL_SAI_IRQHandler+0x2fc>
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	f003 0304 	and.w	r3, r3, #4
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d05c      	beq.n	800639c <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2204      	movs	r2, #4
 80062e8:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062f0:	f043 0220 	orr.w	r2, r3, #32
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d036      	beq.n	8006372 <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006308:	2b00      	cmp	r3, #0
 800630a:	d016      	beq.n	800633a <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006310:	4a34      	ldr	r2, [pc, #208]	@ (80063e4 <HAL_SAI_IRQHandler+0x344>)
 8006312:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006318:	4618      	mov	r0, r3
 800631a:	f7fc f8a9 	bl	8002470 <HAL_DMA_Abort_IT>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00a      	beq.n	800633a <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800632a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f7fa fbab 	bl	8000a90 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800633e:	2b00      	cmp	r3, #0
 8006340:	d04a      	beq.n	80063d8 <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006346:	4a27      	ldr	r2, [pc, #156]	@ (80063e4 <HAL_SAI_IRQHandler+0x344>)
 8006348:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800634e:	4618      	mov	r0, r3
 8006350:	f7fc f88e 	bl	8002470 <HAL_DMA_Abort_IT>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d03e      	beq.n	80063d8 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006360:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7fa fb90 	bl	8000a90 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006370:	e032      	b.n	80063d8 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2200      	movs	r2, #0
 8006378:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006382:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f7fa fb7b 	bl	8000a90 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800639a:	e01d      	b.n	80063d8 <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f003 0310 	and.w	r3, r3, #16
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d019      	beq.n	80063da <HAL_SAI_IRQHandler+0x33a>
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	f003 0310 	and.w	r3, r3, #16
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d014      	beq.n	80063da <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2210      	movs	r2, #16
 80063b6:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063be:	f043 0210 	orr.w	r2, r3, #16
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7fa fb61 	bl	8000a90 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 80063ce:	e004      	b.n	80063da <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80063d0:	bf00      	nop
 80063d2:	e002      	b.n	80063da <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80063d4:	bf00      	nop
 80063d6:	e000      	b.n	80063da <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80063d8:	bf00      	nop
}
 80063da:	bf00      	nop
 80063dc:	3718      	adds	r7, #24
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	080068cb 	.word	0x080068cb

080063e8 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006438:	b480      	push	{r7}
 800643a:	b087      	sub	sp, #28
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
 8006444:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006446:	2300      	movs	r3, #0
 8006448:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <SAI_InitI2S+0x2e>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	2b02      	cmp	r3, #2
 8006464:	d103      	bne.n	800646e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800646c:	e002      	b.n	8006474 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2201      	movs	r2, #1
 8006472:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800647a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006482:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e077      	b.n	800658e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d107      	bne.n	80064b4 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80064b0:	651a      	str	r2, [r3, #80]	@ 0x50
 80064b2:	e006      	b.n	80064c2 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80064ba:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2b03      	cmp	r3, #3
 80064c6:	d84f      	bhi.n	8006568 <SAI_InitI2S+0x130>
 80064c8:	a201      	add	r2, pc, #4	@ (adr r2, 80064d0 <SAI_InitI2S+0x98>)
 80064ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ce:	bf00      	nop
 80064d0:	080064e1 	.word	0x080064e1
 80064d4:	08006503 	.word	0x08006503
 80064d8:	08006525 	.word	0x08006525
 80064dc:	08006547 	.word	0x08006547
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2280      	movs	r2, #128	@ 0x80
 80064e4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	085b      	lsrs	r3, r3, #1
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	085b      	lsrs	r3, r3, #1
 80064f4:	011a      	lsls	r2, r3, #4
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2240      	movs	r2, #64	@ 0x40
 80064fe:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8006500:	e035      	b.n	800656e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2280      	movs	r2, #128	@ 0x80
 8006506:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	085b      	lsrs	r3, r3, #1
 800650c:	019a      	lsls	r2, r3, #6
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	085b      	lsrs	r3, r3, #1
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2280      	movs	r2, #128	@ 0x80
 8006520:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8006522:	e024      	b.n	800656e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	22c0      	movs	r2, #192	@ 0xc0
 8006528:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	085b      	lsrs	r3, r3, #1
 800652e:	019a      	lsls	r2, r3, #6
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	085b      	lsrs	r3, r3, #1
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2280      	movs	r2, #128	@ 0x80
 8006542:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8006544:	e013      	b.n	800656e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	22e0      	movs	r2, #224	@ 0xe0
 800654a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	085b      	lsrs	r3, r3, #1
 8006550:	019a      	lsls	r2, r3, #6
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	085b      	lsrs	r3, r3, #1
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2280      	movs	r2, #128	@ 0x80
 8006564:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8006566:	e002      	b.n	800656e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	75fb      	strb	r3, [r7, #23]
      break;
 800656c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	2b02      	cmp	r3, #2
 8006572:	d10b      	bne.n	800658c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d102      	bne.n	8006580 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2210      	movs	r2, #16
 800657e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b02      	cmp	r3, #2
 8006584:	d102      	bne.n	800658c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2208      	movs	r2, #8
 800658a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 800658c:	7dfb      	ldrb	r3, [r7, #23]
}
 800658e:	4618      	mov	r0, r3
 8006590:	371c      	adds	r7, #28
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop

0800659c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <SAI_InitPCM+0x2e>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d103      	bne.n	80065d2 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2201      	movs	r2, #1
 80065ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80065d0:	e002      	b.n	80065d8 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80065e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80065ec:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	683a      	ldr	r2, [r7, #0]
 80065f8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006600:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2b04      	cmp	r3, #4
 8006606:	d103      	bne.n	8006610 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2201      	movs	r2, #1
 800660c:	645a      	str	r2, [r3, #68]	@ 0x44
 800660e:	e002      	b.n	8006616 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	220d      	movs	r2, #13
 8006614:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b03      	cmp	r3, #3
 800661a:	d837      	bhi.n	800668c <SAI_InitPCM+0xf0>
 800661c:	a201      	add	r2, pc, #4	@ (adr r2, 8006624 <SAI_InitPCM+0x88>)
 800661e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006622:	bf00      	nop
 8006624:	08006635 	.word	0x08006635
 8006628:	0800664b 	.word	0x0800664b
 800662c:	08006661 	.word	0x08006661
 8006630:	08006677 	.word	0x08006677
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2280      	movs	r2, #128	@ 0x80
 8006638:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	011a      	lsls	r2, r3, #4
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2240      	movs	r2, #64	@ 0x40
 8006646:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8006648:	e023      	b.n	8006692 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2280      	movs	r2, #128	@ 0x80
 800664e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2280      	movs	r2, #128	@ 0x80
 800665c:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800665e:	e018      	b.n	8006692 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	22c0      	movs	r2, #192	@ 0xc0
 8006664:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2280      	movs	r2, #128	@ 0x80
 8006672:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8006674:	e00d      	b.n	8006692 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	22e0      	movs	r2, #224	@ 0xe0
 800667a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2280      	movs	r2, #128	@ 0x80
 8006688:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800668a:	e002      	b.n	8006692 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	75fb      	strb	r3, [r7, #23]
      break;
 8006690:	bf00      	nop
  }

  return status;
 8006692:	7dfb      	ldrb	r3, [r7, #23]
}
 8006694:	4618      	mov	r0, r3
 8006696:	371c      	adds	r7, #28
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	460b      	mov	r3, r1
 80066aa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80066b0:	78fb      	ldrb	r3, [r7, #3]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d103      	bne.n	80066be <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f043 0308 	orr.w	r3, r3, #8
 80066bc:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c2:	2b08      	cmp	r3, #8
 80066c4:	d10b      	bne.n	80066de <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80066ca:	2b03      	cmp	r3, #3
 80066cc:	d003      	beq.n	80066d6 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d103      	bne.n	80066de <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f043 0310 	orr.w	r3, r3, #16
 80066dc:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	2b03      	cmp	r3, #3
 80066e4:	d003      	beq.n	80066ee <SAI_InterruptFlag+0x4e>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d104      	bne.n	80066f8 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80066f4:	60fb      	str	r3, [r7, #12]
 80066f6:	e003      	b.n	8006700 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f043 0304 	orr.w	r3, r3, #4
 80066fe:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8006700:	68fb      	ldr	r3, [r7, #12]
}
 8006702:	4618      	mov	r0, r3
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
	...

08006710 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006718:	4b18      	ldr	r3, [pc, #96]	@ (800677c <SAI_Disable+0x6c>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a18      	ldr	r2, [pc, #96]	@ (8006780 <SAI_Disable+0x70>)
 800671e:	fba2 2303 	umull	r2, r3, r2, r3
 8006722:	0b1b      	lsrs	r3, r3, #12
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006728:	2300      	movs	r3, #0
 800672a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800673a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10a      	bne.n	8006758 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006748:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	72fb      	strb	r3, [r7, #11]
      break;
 8006756:	e009      	b.n	800676c <SAI_Disable+0x5c>
    }
    count--;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	3b01      	subs	r3, #1
 800675c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1e7      	bne.n	800673c <SAI_Disable+0x2c>

  return status;
 800676c:	7afb      	ldrb	r3, [r7, #11]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3714      	adds	r7, #20
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	20000000 	.word	0x20000000
 8006780:	95cbec1b 	.word	0x95cbec1b

08006784 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006790:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	2b20      	cmp	r3, #32
 8006798:	d01c      	beq.n	80067d4 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80067b0:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80067b2:	2100      	movs	r1, #0
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f7ff ff73 	bl	80066a0 <SAI_InterruptFlag>
 80067ba:	4603      	mov	r3, r0
 80067bc:	43d9      	mvns	r1, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	691a      	ldr	r2, [r3, #16]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	400a      	ands	r2, r1
 80067ca:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f7ff fe07 	bl	80063e8 <HAL_SAI_TxCpltCallback>
#endif
}
 80067da:	bf00      	nop
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b084      	sub	sp, #16
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ee:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f7ff fe03 	bl	80063fc <HAL_SAI_TxHalfCpltCallback>
#endif
}
 80067f6:	bf00      	nop
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b084      	sub	sp, #16
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680a:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	2b20      	cmp	r3, #32
 8006812:	d01c      	beq.n	800684e <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006822:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800682c:	2100      	movs	r1, #0
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f7ff ff36 	bl	80066a0 <SAI_InterruptFlag>
 8006834:	4603      	mov	r3, r0
 8006836:	43d9      	mvns	r1, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	691a      	ldr	r2, [r3, #16]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	400a      	ands	r2, r1
 8006844:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f7ff fdde 	bl	8006410 <HAL_SAI_RxCpltCallback>
#endif
}
 8006854:	bf00      	nop
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006868:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f7ff fdda 	bl	8006424 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8006870:	bf00      	nop
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006884:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800688c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80068a4:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f7ff ff32 	bl	8006710 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f7fa f8e7 	bl	8000a90 <HAL_SAI_ErrorCallback>
#endif
}
 80068c2:	bf00      	nop
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b084      	sub	sp, #16
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80068e6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2200      	movs	r2, #0
 80068ee:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80068f8:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006900:	2b20      	cmp	r3, #32
 8006902:	d00a      	beq.n	800691a <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f7ff ff03 	bl	8006710 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f042 0208 	orr.w	r2, r2, #8
 8006918:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f7fa f8b0 	bl	8000a90 <HAL_SAI_ErrorCallback>
#endif
}
 8006930:	bf00      	nop
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e095      	b.n	8006a76 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694e:	2b00      	cmp	r3, #0
 8006950:	d108      	bne.n	8006964 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800695a:	d009      	beq.n	8006970 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	61da      	str	r2, [r3, #28]
 8006962:	e005      	b.n	8006970 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b00      	cmp	r3, #0
 8006980:	d106      	bne.n	8006990 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7fa fb5e 	bl	800104c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2202      	movs	r2, #2
 8006994:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80069b0:	d902      	bls.n	80069b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80069b2:	2300      	movs	r3, #0
 80069b4:	60fb      	str	r3, [r7, #12]
 80069b6:	e002      	b.n	80069be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80069b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80069bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80069c6:	d007      	beq.n	80069d8 <HAL_SPI_Init+0xa0>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80069d0:	d002      	beq.n	80069d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80069e8:	431a      	orrs	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	431a      	orrs	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	f003 0301 	and.w	r3, r3, #1
 80069fc:	431a      	orrs	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a06:	431a      	orrs	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	69db      	ldr	r3, [r3, #28]
 8006a0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a10:	431a      	orrs	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a1a:	ea42 0103 	orr.w	r1, r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a22:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	0c1b      	lsrs	r3, r3, #16
 8006a34:	f003 0204 	and.w	r2, r3, #4
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3c:	f003 0310 	and.w	r3, r3, #16
 8006a40:	431a      	orrs	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a46:	f003 0308 	and.w	r3, r3, #8
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006a54:	ea42 0103 	orr.w	r1, r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b088      	sub	sp, #32
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	60f8      	str	r0, [r7, #12]
 8006a86:	60b9      	str	r1, [r7, #8]
 8006a88:	603b      	str	r3, [r7, #0]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a8e:	f7fb faab 	bl	8001fe8 <HAL_GetTick>
 8006a92:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006a94:	88fb      	ldrh	r3, [r7, #6]
 8006a96:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d001      	beq.n	8006aa8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	e15c      	b.n	8006d62 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d002      	beq.n	8006ab4 <HAL_SPI_Transmit+0x36>
 8006aae:	88fb      	ldrh	r3, [r7, #6]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d101      	bne.n	8006ab8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e154      	b.n	8006d62 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d101      	bne.n	8006ac6 <HAL_SPI_Transmit+0x48>
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	e14d      	b.n	8006d62 <HAL_SPI_Transmit+0x2e4>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2203      	movs	r2, #3
 8006ad2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	88fa      	ldrh	r2, [r7, #6]
 8006ae6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	88fa      	ldrh	r2, [r7, #6]
 8006aec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b18:	d10f      	bne.n	8006b3a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b44:	2b40      	cmp	r3, #64	@ 0x40
 8006b46:	d007      	beq.n	8006b58 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b60:	d952      	bls.n	8006c08 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d002      	beq.n	8006b70 <HAL_SPI_Transmit+0xf2>
 8006b6a:	8b7b      	ldrh	r3, [r7, #26]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d145      	bne.n	8006bfc <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b74:	881a      	ldrh	r2, [r3, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b80:	1c9a      	adds	r2, r3, #2
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006b94:	e032      	b.n	8006bfc <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d112      	bne.n	8006bca <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba8:	881a      	ldrh	r2, [r3, #0]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bb4:	1c9a      	adds	r2, r3, #2
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006bc8:	e018      	b.n	8006bfc <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bca:	f7fb fa0d 	bl	8001fe8 <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d803      	bhi.n	8006be2 <HAL_SPI_Transmit+0x164>
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006be0:	d102      	bne.n	8006be8 <HAL_SPI_Transmit+0x16a>
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d109      	bne.n	8006bfc <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e0b2      	b.n	8006d62 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1c7      	bne.n	8006b96 <HAL_SPI_Transmit+0x118>
 8006c06:	e083      	b.n	8006d10 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d002      	beq.n	8006c16 <HAL_SPI_Transmit+0x198>
 8006c10:	8b7b      	ldrh	r3, [r7, #26]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d177      	bne.n	8006d06 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d912      	bls.n	8006c46 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c24:	881a      	ldrh	r2, [r3, #0]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c30:	1c9a      	adds	r2, r3, #2
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	3b02      	subs	r3, #2
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006c44:	e05f      	b.n	8006d06 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	330c      	adds	r3, #12
 8006c50:	7812      	ldrb	r2, [r2, #0]
 8006c52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c58:	1c5a      	adds	r2, r3, #1
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	3b01      	subs	r3, #1
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006c6c:	e04b      	b.n	8006d06 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f003 0302 	and.w	r3, r3, #2
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d12b      	bne.n	8006cd4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d912      	bls.n	8006cac <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c8a:	881a      	ldrh	r2, [r3, #0]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c96:	1c9a      	adds	r2, r3, #2
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	3b02      	subs	r3, #2
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006caa:	e02c      	b.n	8006d06 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	330c      	adds	r3, #12
 8006cb6:	7812      	ldrb	r2, [r2, #0]
 8006cb8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cbe:	1c5a      	adds	r2, r3, #1
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006cd2:	e018      	b.n	8006d06 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cd4:	f7fb f988 	bl	8001fe8 <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	683a      	ldr	r2, [r7, #0]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d803      	bhi.n	8006cec <HAL_SPI_Transmit+0x26e>
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006cea:	d102      	bne.n	8006cf2 <HAL_SPI_Transmit+0x274>
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d109      	bne.n	8006d06 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e02d      	b.n	8006d62 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d1ae      	bne.n	8006c6e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d10:	69fa      	ldr	r2, [r7, #28]
 8006d12:	6839      	ldr	r1, [r7, #0]
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 fa5b 	bl	80071d0 <SPI_EndRxTxTransaction>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d002      	beq.n	8006d26 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2220      	movs	r2, #32
 8006d24:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10a      	bne.n	8006d44 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d2e:	2300      	movs	r3, #0
 8006d30:	617b      	str	r3, [r7, #20]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	617b      	str	r3, [r7, #20]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	617b      	str	r3, [r7, #20]
 8006d42:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d001      	beq.n	8006d60 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e000      	b.n	8006d62 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8006d60:	2300      	movs	r3, #0
  }
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3720      	adds	r7, #32
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
	...

08006d6c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b088      	sub	sp, #32
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d10e      	bne.n	8006dac <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d009      	beq.n	8006dac <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d004      	beq.n	8006dac <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	4798      	blx	r3
    return;
 8006daa:	e0ce      	b.n	8006f4a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d009      	beq.n	8006dca <HAL_SPI_IRQHandler+0x5e>
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d004      	beq.n	8006dca <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	4798      	blx	r3
    return;
 8006dc8:	e0bf      	b.n	8006f4a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	f003 0320 	and.w	r3, r3, #32
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d10a      	bne.n	8006dea <HAL_SPI_IRQHandler+0x7e>
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d105      	bne.n	8006dea <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f000 80b0 	beq.w	8006f4a <HAL_SPI_IRQHandler+0x1de>
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	f003 0320 	and.w	r3, r3, #32
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f000 80aa 	beq.w	8006f4a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d023      	beq.n	8006e48 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b03      	cmp	r3, #3
 8006e0a:	d011      	beq.n	8006e30 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e10:	f043 0204 	orr.w	r2, r3, #4
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e18:	2300      	movs	r3, #0
 8006e1a:	617b      	str	r3, [r7, #20]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	617b      	str	r3, [r7, #20]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	617b      	str	r3, [r7, #20]
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	e00b      	b.n	8006e48 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e30:	2300      	movs	r3, #0
 8006e32:	613b      	str	r3, [r7, #16]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	613b      	str	r3, [r7, #16]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	613b      	str	r3, [r7, #16]
 8006e44:	693b      	ldr	r3, [r7, #16]
        return;
 8006e46:	e080      	b.n	8006f4a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	f003 0320 	and.w	r3, r3, #32
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d014      	beq.n	8006e7c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e56:	f043 0201 	orr.w	r2, r3, #1
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60fb      	str	r3, [r7, #12]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	60fb      	str	r3, [r7, #12]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e78:	601a      	str	r2, [r3, #0]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00c      	beq.n	8006ea0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e8a:	f043 0208 	orr.w	r2, r3, #8
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006e92:	2300      	movs	r3, #0
 8006e94:	60bb      	str	r3, [r7, #8]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	60bb      	str	r3, [r7, #8]
 8006e9e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d04f      	beq.n	8006f48 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	685a      	ldr	r2, [r3, #4]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006eb6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d104      	bne.n	8006ed4 <HAL_SPI_IRQHandler+0x168>
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	f003 0301 	and.w	r3, r3, #1
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d034      	beq.n	8006f3e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	685a      	ldr	r2, [r3, #4]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f022 0203 	bic.w	r2, r2, #3
 8006ee2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d011      	beq.n	8006f10 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ef0:	4a17      	ldr	r2, [pc, #92]	@ (8006f50 <HAL_SPI_IRQHandler+0x1e4>)
 8006ef2:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7fb fab9 	bl	8002470 <HAL_DMA_Abort_IT>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d005      	beq.n	8006f10 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f08:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d016      	beq.n	8006f46 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f1c:	4a0c      	ldr	r2, [pc, #48]	@ (8006f50 <HAL_SPI_IRQHandler+0x1e4>)
 8006f1e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f24:	4618      	mov	r0, r3
 8006f26:	f7fb faa3 	bl	8002470 <HAL_DMA_Abort_IT>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00a      	beq.n	8006f46 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f34:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8006f3c:	e003      	b.n	8006f46 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 f808 	bl	8006f54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006f44:	e000      	b.n	8006f48 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006f46:	bf00      	nop
    return;
 8006f48:	bf00      	nop
  }
}
 8006f4a:	3720      	adds	r7, #32
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	08006f69 	.word	0x08006f69

08006f54 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f74:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f7ff ffe5 	bl	8006f54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f8a:	bf00      	nop
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
	...

08006f94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b088      	sub	sp, #32
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	603b      	str	r3, [r7, #0]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006fa4:	f7fb f820 	bl	8001fe8 <HAL_GetTick>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fac:	1a9b      	subs	r3, r3, r2
 8006fae:	683a      	ldr	r2, [r7, #0]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006fb4:	f7fb f818 	bl	8001fe8 <HAL_GetTick>
 8006fb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006fba:	4b39      	ldr	r3, [pc, #228]	@ (80070a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	015b      	lsls	r3, r3, #5
 8006fc0:	0d1b      	lsrs	r3, r3, #20
 8006fc2:	69fa      	ldr	r2, [r7, #28]
 8006fc4:	fb02 f303 	mul.w	r3, r2, r3
 8006fc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fca:	e054      	b.n	8007076 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fd2:	d050      	beq.n	8007076 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006fd4:	f7fb f808 	bl	8001fe8 <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	69fa      	ldr	r2, [r7, #28]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d902      	bls.n	8006fea <SPI_WaitFlagStateUntilTimeout+0x56>
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d13d      	bne.n	8007066 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006ff8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007002:	d111      	bne.n	8007028 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800700c:	d004      	beq.n	8007018 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007016:	d107      	bne.n	8007028 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007026:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800702c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007030:	d10f      	bne.n	8007052 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007040:	601a      	str	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007050:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e017      	b.n	8007096 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d101      	bne.n	8007070 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800706c:	2300      	movs	r3, #0
 800706e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	3b01      	subs	r3, #1
 8007074:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	689a      	ldr	r2, [r3, #8]
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	4013      	ands	r3, r2
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	429a      	cmp	r2, r3
 8007084:	bf0c      	ite	eq
 8007086:	2301      	moveq	r3, #1
 8007088:	2300      	movne	r3, #0
 800708a:	b2db      	uxtb	r3, r3
 800708c:	461a      	mov	r2, r3
 800708e:	79fb      	ldrb	r3, [r7, #7]
 8007090:	429a      	cmp	r2, r3
 8007092:	d19b      	bne.n	8006fcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3720      	adds	r7, #32
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	20000000 	.word	0x20000000

080070a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b08a      	sub	sp, #40	@ 0x28
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
 80070b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80070b2:	2300      	movs	r3, #0
 80070b4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80070b6:	f7fa ff97 	bl	8001fe8 <HAL_GetTick>
 80070ba:	4602      	mov	r2, r0
 80070bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070be:	1a9b      	subs	r3, r3, r2
 80070c0:	683a      	ldr	r2, [r7, #0]
 80070c2:	4413      	add	r3, r2
 80070c4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80070c6:	f7fa ff8f 	bl	8001fe8 <HAL_GetTick>
 80070ca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	330c      	adds	r3, #12
 80070d2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80070d4:	4b3d      	ldr	r3, [pc, #244]	@ (80071cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	4613      	mov	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	00da      	lsls	r2, r3, #3
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	0d1b      	lsrs	r3, r3, #20
 80070e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070e6:	fb02 f303 	mul.w	r3, r2, r3
 80070ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80070ec:	e060      	b.n	80071b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80070f4:	d107      	bne.n	8007106 <SPI_WaitFifoStateUntilTimeout+0x62>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d104      	bne.n	8007106 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	b2db      	uxtb	r3, r3
 8007102:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007104:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800710c:	d050      	beq.n	80071b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800710e:	f7fa ff6b 	bl	8001fe8 <HAL_GetTick>
 8007112:	4602      	mov	r2, r0
 8007114:	6a3b      	ldr	r3, [r7, #32]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800711a:	429a      	cmp	r2, r3
 800711c:	d902      	bls.n	8007124 <SPI_WaitFifoStateUntilTimeout+0x80>
 800711e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007120:	2b00      	cmp	r3, #0
 8007122:	d13d      	bne.n	80071a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	685a      	ldr	r2, [r3, #4]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007132:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800713c:	d111      	bne.n	8007162 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007146:	d004      	beq.n	8007152 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007150:	d107      	bne.n	8007162 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007160:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007166:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800716a:	d10f      	bne.n	800718c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800717a:	601a      	str	r2, [r3, #0]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800718a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e010      	b.n	80071c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d101      	bne.n	80071aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80071a6:	2300      	movs	r3, #0
 80071a8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	3b01      	subs	r3, #1
 80071ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	689a      	ldr	r2, [r3, #8]
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	4013      	ands	r3, r2
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d196      	bne.n	80070ee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3728      	adds	r7, #40	@ 0x28
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	20000000 	.word	0x20000000

080071d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af02      	add	r7, sp, #8
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f7ff ff5b 	bl	80070a4 <SPI_WaitFifoStateUntilTimeout>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d007      	beq.n	8007204 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071f8:	f043 0220 	orr.w	r2, r3, #32
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007200:	2303      	movs	r3, #3
 8007202:	e027      	b.n	8007254 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	2200      	movs	r2, #0
 800720c:	2180      	movs	r1, #128	@ 0x80
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f7ff fec0 	bl	8006f94 <SPI_WaitFlagStateUntilTimeout>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d007      	beq.n	800722a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800721e:	f043 0220 	orr.w	r2, r3, #32
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e014      	b.n	8007254 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	9300      	str	r3, [sp, #0]
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2200      	movs	r2, #0
 8007232:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f7ff ff34 	bl	80070a4 <SPI_WaitFifoStateUntilTimeout>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d007      	beq.n	8007252 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007246:	f043 0220 	orr.w	r2, r3, #32
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e000      	b.n	8007254 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e049      	b.n	8007302 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	d106      	bne.n	8007288 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f841 	bl	800730a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2202      	movs	r2, #2
 800728c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	3304      	adds	r3, #4
 8007298:	4619      	mov	r1, r3
 800729a:	4610      	mov	r0, r2
 800729c:	f000 f9e0 	bl	8007660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800730a:	b480      	push	{r7}
 800730c:	b083      	sub	sp, #12
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007312:	bf00      	nop
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
	...

08007320 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800732e:	b2db      	uxtb	r3, r3
 8007330:	2b01      	cmp	r3, #1
 8007332:	d001      	beq.n	8007338 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e04f      	b.n	80073d8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2202      	movs	r2, #2
 800733c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68da      	ldr	r2, [r3, #12]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f042 0201 	orr.w	r2, r2, #1
 800734e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a23      	ldr	r2, [pc, #140]	@ (80073e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d01d      	beq.n	8007396 <HAL_TIM_Base_Start_IT+0x76>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007362:	d018      	beq.n	8007396 <HAL_TIM_Base_Start_IT+0x76>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a1f      	ldr	r2, [pc, #124]	@ (80073e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d013      	beq.n	8007396 <HAL_TIM_Base_Start_IT+0x76>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a1e      	ldr	r2, [pc, #120]	@ (80073ec <HAL_TIM_Base_Start_IT+0xcc>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d00e      	beq.n	8007396 <HAL_TIM_Base_Start_IT+0x76>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a1c      	ldr	r2, [pc, #112]	@ (80073f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d009      	beq.n	8007396 <HAL_TIM_Base_Start_IT+0x76>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a1b      	ldr	r2, [pc, #108]	@ (80073f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d004      	beq.n	8007396 <HAL_TIM_Base_Start_IT+0x76>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a19      	ldr	r2, [pc, #100]	@ (80073f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d115      	bne.n	80073c2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	689a      	ldr	r2, [r3, #8]
 800739c:	4b17      	ldr	r3, [pc, #92]	@ (80073fc <HAL_TIM_Base_Start_IT+0xdc>)
 800739e:	4013      	ands	r3, r2
 80073a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2b06      	cmp	r3, #6
 80073a6:	d015      	beq.n	80073d4 <HAL_TIM_Base_Start_IT+0xb4>
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073ae:	d011      	beq.n	80073d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f042 0201 	orr.w	r2, r2, #1
 80073be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073c0:	e008      	b.n	80073d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f042 0201 	orr.w	r2, r2, #1
 80073d0:	601a      	str	r2, [r3, #0]
 80073d2:	e000      	b.n	80073d6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3714      	adds	r7, #20
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr
 80073e4:	40012c00 	.word	0x40012c00
 80073e8:	40000400 	.word	0x40000400
 80073ec:	40000800 	.word	0x40000800
 80073f0:	40000c00 	.word	0x40000c00
 80073f4:	40013400 	.word	0x40013400
 80073f8:	40014000 	.word	0x40014000
 80073fc:	00010007 	.word	0x00010007

08007400 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f003 0302 	and.w	r3, r3, #2
 800741e:	2b00      	cmp	r3, #0
 8007420:	d020      	beq.n	8007464 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f003 0302 	and.w	r3, r3, #2
 8007428:	2b00      	cmp	r3, #0
 800742a:	d01b      	beq.n	8007464 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f06f 0202 	mvn.w	r2, #2
 8007434:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2201      	movs	r2, #1
 800743a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	f003 0303 	and.w	r3, r3, #3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d003      	beq.n	8007452 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f8e9 	bl	8007622 <HAL_TIM_IC_CaptureCallback>
 8007450:	e005      	b.n	800745e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f8db 	bl	800760e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 f8ec 	bl	8007636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	f003 0304 	and.w	r3, r3, #4
 800746a:	2b00      	cmp	r3, #0
 800746c:	d020      	beq.n	80074b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f003 0304 	and.w	r3, r3, #4
 8007474:	2b00      	cmp	r3, #0
 8007476:	d01b      	beq.n	80074b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f06f 0204 	mvn.w	r2, #4
 8007480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2202      	movs	r2, #2
 8007486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007492:	2b00      	cmp	r3, #0
 8007494:	d003      	beq.n	800749e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f8c3 	bl	8007622 <HAL_TIM_IC_CaptureCallback>
 800749c:	e005      	b.n	80074aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f8b5 	bl	800760e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f8c6 	bl	8007636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	f003 0308 	and.w	r3, r3, #8
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d020      	beq.n	80074fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f003 0308 	and.w	r3, r3, #8
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d01b      	beq.n	80074fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f06f 0208 	mvn.w	r2, #8
 80074cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2204      	movs	r2, #4
 80074d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	69db      	ldr	r3, [r3, #28]
 80074da:	f003 0303 	and.w	r3, r3, #3
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d003      	beq.n	80074ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f89d 	bl	8007622 <HAL_TIM_IC_CaptureCallback>
 80074e8:	e005      	b.n	80074f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f88f 	bl	800760e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f8a0 	bl	8007636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	f003 0310 	and.w	r3, r3, #16
 8007502:	2b00      	cmp	r3, #0
 8007504:	d020      	beq.n	8007548 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f003 0310 	and.w	r3, r3, #16
 800750c:	2b00      	cmp	r3, #0
 800750e:	d01b      	beq.n	8007548 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f06f 0210 	mvn.w	r2, #16
 8007518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2208      	movs	r2, #8
 800751e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	69db      	ldr	r3, [r3, #28]
 8007526:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800752a:	2b00      	cmp	r3, #0
 800752c:	d003      	beq.n	8007536 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f877 	bl	8007622 <HAL_TIM_IC_CaptureCallback>
 8007534:	e005      	b.n	8007542 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f869 	bl	800760e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f87a 	bl	8007636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	f003 0301 	and.w	r3, r3, #1
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00c      	beq.n	800756c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f003 0301 	and.w	r3, r3, #1
 8007558:	2b00      	cmp	r3, #0
 800755a:	d007      	beq.n	800756c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f06f 0201 	mvn.w	r2, #1
 8007564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7f9 fbd6 	bl	8000d18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007572:	2b00      	cmp	r3, #0
 8007574:	d104      	bne.n	8007580 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00c      	beq.n	800759a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007586:	2b00      	cmp	r3, #0
 8007588:	d007      	beq.n	800759a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 f913 	bl	80077c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00c      	beq.n	80075be <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d007      	beq.n	80075be <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80075b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 f90b 	bl	80077d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00c      	beq.n	80075e2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d007      	beq.n	80075e2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80075da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f834 	bl	800764a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	f003 0320 	and.w	r3, r3, #32
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00c      	beq.n	8007606 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f003 0320 	and.w	r3, r3, #32
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d007      	beq.n	8007606 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f06f 0220 	mvn.w	r2, #32
 80075fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 f8d3 	bl	80077ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007606:	bf00      	nop
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800760e:	b480      	push	{r7}
 8007610:	b083      	sub	sp, #12
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007616:	bf00      	nop
 8007618:	370c      	adds	r7, #12
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr

08007622 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007622:	b480      	push	{r7}
 8007624:	b083      	sub	sp, #12
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800762a:	bf00      	nop
 800762c:	370c      	adds	r7, #12
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr

08007636 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007636:	b480      	push	{r7}
 8007638:	b083      	sub	sp, #12
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800763e:	bf00      	nop
 8007640:	370c      	adds	r7, #12
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800764a:	b480      	push	{r7}
 800764c:	b083      	sub	sp, #12
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007652:	bf00      	nop
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
	...

08007660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a46      	ldr	r2, [pc, #280]	@ (800778c <TIM_Base_SetConfig+0x12c>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d013      	beq.n	80076a0 <TIM_Base_SetConfig+0x40>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800767e:	d00f      	beq.n	80076a0 <TIM_Base_SetConfig+0x40>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a43      	ldr	r2, [pc, #268]	@ (8007790 <TIM_Base_SetConfig+0x130>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d00b      	beq.n	80076a0 <TIM_Base_SetConfig+0x40>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a42      	ldr	r2, [pc, #264]	@ (8007794 <TIM_Base_SetConfig+0x134>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d007      	beq.n	80076a0 <TIM_Base_SetConfig+0x40>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a41      	ldr	r2, [pc, #260]	@ (8007798 <TIM_Base_SetConfig+0x138>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d003      	beq.n	80076a0 <TIM_Base_SetConfig+0x40>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a40      	ldr	r2, [pc, #256]	@ (800779c <TIM_Base_SetConfig+0x13c>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d108      	bne.n	80076b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a35      	ldr	r2, [pc, #212]	@ (800778c <TIM_Base_SetConfig+0x12c>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d01f      	beq.n	80076fa <TIM_Base_SetConfig+0x9a>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076c0:	d01b      	beq.n	80076fa <TIM_Base_SetConfig+0x9a>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a32      	ldr	r2, [pc, #200]	@ (8007790 <TIM_Base_SetConfig+0x130>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d017      	beq.n	80076fa <TIM_Base_SetConfig+0x9a>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a31      	ldr	r2, [pc, #196]	@ (8007794 <TIM_Base_SetConfig+0x134>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d013      	beq.n	80076fa <TIM_Base_SetConfig+0x9a>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a30      	ldr	r2, [pc, #192]	@ (8007798 <TIM_Base_SetConfig+0x138>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d00f      	beq.n	80076fa <TIM_Base_SetConfig+0x9a>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a2f      	ldr	r2, [pc, #188]	@ (800779c <TIM_Base_SetConfig+0x13c>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d00b      	beq.n	80076fa <TIM_Base_SetConfig+0x9a>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a2e      	ldr	r2, [pc, #184]	@ (80077a0 <TIM_Base_SetConfig+0x140>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d007      	beq.n	80076fa <TIM_Base_SetConfig+0x9a>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a2d      	ldr	r2, [pc, #180]	@ (80077a4 <TIM_Base_SetConfig+0x144>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d003      	beq.n	80076fa <TIM_Base_SetConfig+0x9a>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a2c      	ldr	r2, [pc, #176]	@ (80077a8 <TIM_Base_SetConfig+0x148>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d108      	bne.n	800770c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	4313      	orrs	r3, r2
 800770a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	4313      	orrs	r3, r2
 8007718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	689a      	ldr	r2, [r3, #8]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a16      	ldr	r2, [pc, #88]	@ (800778c <TIM_Base_SetConfig+0x12c>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d00f      	beq.n	8007758 <TIM_Base_SetConfig+0xf8>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a18      	ldr	r2, [pc, #96]	@ (800779c <TIM_Base_SetConfig+0x13c>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d00b      	beq.n	8007758 <TIM_Base_SetConfig+0xf8>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a17      	ldr	r2, [pc, #92]	@ (80077a0 <TIM_Base_SetConfig+0x140>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d007      	beq.n	8007758 <TIM_Base_SetConfig+0xf8>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a16      	ldr	r2, [pc, #88]	@ (80077a4 <TIM_Base_SetConfig+0x144>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d003      	beq.n	8007758 <TIM_Base_SetConfig+0xf8>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a15      	ldr	r2, [pc, #84]	@ (80077a8 <TIM_Base_SetConfig+0x148>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d103      	bne.n	8007760 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	691a      	ldr	r2, [r3, #16]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	2b01      	cmp	r3, #1
 8007770:	d105      	bne.n	800777e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	f023 0201 	bic.w	r2, r3, #1
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	611a      	str	r2, [r3, #16]
  }
}
 800777e:	bf00      	nop
 8007780:	3714      	adds	r7, #20
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	40012c00 	.word	0x40012c00
 8007790:	40000400 	.word	0x40000400
 8007794:	40000800 	.word	0x40000800
 8007798:	40000c00 	.word	0x40000c00
 800779c:	40013400 	.word	0x40013400
 80077a0:	40014000 	.word	0x40014000
 80077a4:	40014400 	.word	0x40014400
 80077a8:	40014800 	.word	0x40014800

080077ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077dc:	bf00      	nop
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d101      	bne.n	80077fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e040      	b.n	800787c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d106      	bne.n	8007810 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f7f9 fe6c 	bl	80014e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2224      	movs	r2, #36	@ 0x24
 8007814:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f022 0201 	bic.w	r2, r2, #1
 8007824:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800782a:	2b00      	cmp	r3, #0
 800782c:	d002      	beq.n	8007834 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fedc 	bl	80085ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fc21 	bl	800807c <UART_SetConfig>
 800783a:	4603      	mov	r3, r0
 800783c:	2b01      	cmp	r3, #1
 800783e:	d101      	bne.n	8007844 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e01b      	b.n	800787c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007852:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	689a      	ldr	r2, [r3, #8]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007862:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f042 0201 	orr.w	r2, r2, #1
 8007872:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 ff5b 	bl	8008730 <UART_CheckIdleState>
 800787a:	4603      	mov	r3, r0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3708      	adds	r7, #8
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b08a      	sub	sp, #40	@ 0x28
 8007888:	af02      	add	r7, sp, #8
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	603b      	str	r3, [r7, #0]
 8007890:	4613      	mov	r3, r2
 8007892:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007898:	2b20      	cmp	r3, #32
 800789a:	d177      	bne.n	800798c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d002      	beq.n	80078a8 <HAL_UART_Transmit+0x24>
 80078a2:	88fb      	ldrh	r3, [r7, #6]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d101      	bne.n	80078ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e070      	b.n	800798e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2221      	movs	r2, #33	@ 0x21
 80078b8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078ba:	f7fa fb95 	bl	8001fe8 <HAL_GetTick>
 80078be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	88fa      	ldrh	r2, [r7, #6]
 80078c4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	88fa      	ldrh	r2, [r7, #6]
 80078cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078d8:	d108      	bne.n	80078ec <HAL_UART_Transmit+0x68>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d104      	bne.n	80078ec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80078e2:	2300      	movs	r3, #0
 80078e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	61bb      	str	r3, [r7, #24]
 80078ea:	e003      	b.n	80078f4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078f0:	2300      	movs	r3, #0
 80078f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80078f4:	e02f      	b.n	8007956 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	2200      	movs	r2, #0
 80078fe:	2180      	movs	r1, #128	@ 0x80
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f000 ffbd 	bl	8008880 <UART_WaitOnFlagUntilTimeout>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d004      	beq.n	8007916 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2220      	movs	r2, #32
 8007910:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e03b      	b.n	800798e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10b      	bne.n	8007934 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	881a      	ldrh	r2, [r3, #0]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007928:	b292      	uxth	r2, r2
 800792a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	3302      	adds	r3, #2
 8007930:	61bb      	str	r3, [r7, #24]
 8007932:	e007      	b.n	8007944 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	781a      	ldrb	r2, [r3, #0]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	3301      	adds	r3, #1
 8007942:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800794a:	b29b      	uxth	r3, r3
 800794c:	3b01      	subs	r3, #1
 800794e:	b29a      	uxth	r2, r3
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800795c:	b29b      	uxth	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1c9      	bne.n	80078f6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	9300      	str	r3, [sp, #0]
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	2200      	movs	r2, #0
 800796a:	2140      	movs	r1, #64	@ 0x40
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f000 ff87 	bl	8008880 <UART_WaitOnFlagUntilTimeout>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d004      	beq.n	8007982 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2220      	movs	r2, #32
 800797c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800797e:	2303      	movs	r3, #3
 8007980:	e005      	b.n	800798e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2220      	movs	r2, #32
 8007986:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007988:	2300      	movs	r3, #0
 800798a:	e000      	b.n	800798e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800798c:	2302      	movs	r3, #2
  }
}
 800798e:	4618      	mov	r0, r3
 8007990:	3720      	adds	r7, #32
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
	...

08007998 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b08a      	sub	sp, #40	@ 0x28
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	4613      	mov	r3, r2
 80079a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079ac:	2b20      	cmp	r3, #32
 80079ae:	d137      	bne.n	8007a20 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d002      	beq.n	80079bc <HAL_UART_Receive_IT+0x24>
 80079b6:	88fb      	ldrh	r3, [r7, #6]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d101      	bne.n	80079c0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e030      	b.n	8007a22 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a18      	ldr	r2, [pc, #96]	@ (8007a2c <HAL_UART_Receive_IT+0x94>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d01f      	beq.n	8007a10 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d018      	beq.n	8007a10 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	e853 3f00 	ldrex	r3, [r3]
 80079ea:	613b      	str	r3, [r7, #16]
   return(result);
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80079f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	461a      	mov	r2, r3
 80079fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079fc:	623b      	str	r3, [r7, #32]
 80079fe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a00:	69f9      	ldr	r1, [r7, #28]
 8007a02:	6a3a      	ldr	r2, [r7, #32]
 8007a04:	e841 2300 	strex	r3, r2, [r1]
 8007a08:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d1e6      	bne.n	80079de <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007a10:	88fb      	ldrh	r3, [r7, #6]
 8007a12:	461a      	mov	r2, r3
 8007a14:	68b9      	ldr	r1, [r7, #8]
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f000 ffa0 	bl	800895c <UART_Start_Receive_IT>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	e000      	b.n	8007a22 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007a20:	2302      	movs	r3, #2
  }
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3728      	adds	r7, #40	@ 0x28
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	40008000 	.word	0x40008000

08007a30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b0ba      	sub	sp, #232	@ 0xe8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	69db      	ldr	r3, [r3, #28]
 8007a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007a56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007a5a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007a5e:	4013      	ands	r3, r2
 8007a60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007a64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d115      	bne.n	8007a98 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a70:	f003 0320 	and.w	r3, r3, #32
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00f      	beq.n	8007a98 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a7c:	f003 0320 	and.w	r3, r3, #32
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d009      	beq.n	8007a98 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f000 82ca 	beq.w	8008022 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	4798      	blx	r3
      }
      return;
 8007a96:	e2c4      	b.n	8008022 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007a98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f000 8117 	beq.w	8007cd0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007aa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d106      	bne.n	8007abc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007aae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007ab2:	4b85      	ldr	r3, [pc, #532]	@ (8007cc8 <HAL_UART_IRQHandler+0x298>)
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	f000 810a 	beq.w	8007cd0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ac0:	f003 0301 	and.w	r3, r3, #1
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d011      	beq.n	8007aec <HAL_UART_IRQHandler+0xbc>
 8007ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00b      	beq.n	8007aec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ae2:	f043 0201 	orr.w	r2, r3, #1
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007af0:	f003 0302 	and.w	r3, r3, #2
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d011      	beq.n	8007b1c <HAL_UART_IRQHandler+0xec>
 8007af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007afc:	f003 0301 	and.w	r3, r3, #1
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00b      	beq.n	8007b1c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2202      	movs	r2, #2
 8007b0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b12:	f043 0204 	orr.w	r2, r3, #4
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b20:	f003 0304 	and.w	r3, r3, #4
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d011      	beq.n	8007b4c <HAL_UART_IRQHandler+0x11c>
 8007b28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b2c:	f003 0301 	and.w	r3, r3, #1
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00b      	beq.n	8007b4c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2204      	movs	r2, #4
 8007b3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b42:	f043 0202 	orr.w	r2, r3, #2
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b50:	f003 0308 	and.w	r3, r3, #8
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d017      	beq.n	8007b88 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b5c:	f003 0320 	and.w	r3, r3, #32
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d105      	bne.n	8007b70 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b68:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00b      	beq.n	8007b88 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2208      	movs	r2, #8
 8007b76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b7e:	f043 0208 	orr.w	r2, r3, #8
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d012      	beq.n	8007bba <HAL_UART_IRQHandler+0x18a>
 8007b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b98:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00c      	beq.n	8007bba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ba8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bb0:	f043 0220 	orr.w	r2, r3, #32
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f000 8230 	beq.w	8008026 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bca:	f003 0320 	and.w	r3, r3, #32
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00d      	beq.n	8007bee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007bd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bd6:	f003 0320 	and.w	r3, r3, #32
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d007      	beq.n	8007bee <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d003      	beq.n	8007bee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bf4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c02:	2b40      	cmp	r3, #64	@ 0x40
 8007c04:	d005      	beq.n	8007c12 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007c06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c0a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d04f      	beq.n	8007cb2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 ff68 	bl	8008ae8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c22:	2b40      	cmp	r3, #64	@ 0x40
 8007c24:	d141      	bne.n	8007caa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	3308      	adds	r3, #8
 8007c2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007c34:	e853 3f00 	ldrex	r3, [r3]
 8007c38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007c3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007c40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	3308      	adds	r3, #8
 8007c4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007c52:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007c56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007c5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007c62:	e841 2300 	strex	r3, r2, [r1]
 8007c66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007c6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1d9      	bne.n	8007c26 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d013      	beq.n	8007ca2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c7e:	4a13      	ldr	r2, [pc, #76]	@ (8007ccc <HAL_UART_IRQHandler+0x29c>)
 8007c80:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7fa fbf2 	bl	8002470 <HAL_DMA_Abort_IT>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d017      	beq.n	8007cc2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ca0:	e00f      	b.n	8007cc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f9d4 	bl	8008050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ca8:	e00b      	b.n	8007cc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 f9d0 	bl	8008050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cb0:	e007      	b.n	8007cc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f9cc 	bl	8008050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007cc0:	e1b1      	b.n	8008026 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cc2:	bf00      	nop
    return;
 8007cc4:	e1af      	b.n	8008026 <HAL_UART_IRQHandler+0x5f6>
 8007cc6:	bf00      	nop
 8007cc8:	04000120 	.word	0x04000120
 8007ccc:	08008bb1 	.word	0x08008bb1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	f040 816a 	bne.w	8007fae <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cde:	f003 0310 	and.w	r3, r3, #16
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f000 8163 	beq.w	8007fae <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cec:	f003 0310 	and.w	r3, r3, #16
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f000 815c 	beq.w	8007fae <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2210      	movs	r2, #16
 8007cfc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d08:	2b40      	cmp	r3, #64	@ 0x40
 8007d0a:	f040 80d4 	bne.w	8007eb6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d1a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f000 80ad 	beq.w	8007e7e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007d2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	f080 80a5 	bcs.w	8007e7e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d3a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 0320 	and.w	r3, r3, #32
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f040 8086 	bne.w	8007e5c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007d5c:	e853 3f00 	ldrex	r3, [r3]
 8007d60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007d64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	461a      	mov	r2, r3
 8007d76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007d7e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d82:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007d86:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007d8a:	e841 2300 	strex	r3, r2, [r1]
 8007d8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007d92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1da      	bne.n	8007d50 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	3308      	adds	r3, #8
 8007da0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007da4:	e853 3f00 	ldrex	r3, [r3]
 8007da8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007daa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007dac:	f023 0301 	bic.w	r3, r3, #1
 8007db0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	3308      	adds	r3, #8
 8007dba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007dbe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007dc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007dc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007dca:	e841 2300 	strex	r3, r2, [r1]
 8007dce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007dd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d1e1      	bne.n	8007d9a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	3308      	adds	r3, #8
 8007ddc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007de0:	e853 3f00 	ldrex	r3, [r3]
 8007de4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007de6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007de8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	3308      	adds	r3, #8
 8007df6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007dfa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007dfc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007e00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007e02:	e841 2300 	strex	r3, r2, [r1]
 8007e06:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007e08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1e3      	bne.n	8007dd6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2220      	movs	r2, #32
 8007e12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e24:	e853 3f00 	ldrex	r3, [r3]
 8007e28:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007e2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e2c:	f023 0310 	bic.w	r3, r3, #16
 8007e30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	461a      	mov	r2, r3
 8007e3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e40:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007e44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e46:	e841 2300 	strex	r3, r2, [r1]
 8007e4a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007e4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1e4      	bne.n	8007e1c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fa facc 	bl	80023f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	4619      	mov	r1, r3
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f8f4 	bl	8008064 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007e7c:	e0d5      	b.n	800802a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007e84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	f040 80ce 	bne.w	800802a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 0320 	and.w	r3, r3, #32
 8007e9a:	2b20      	cmp	r3, #32
 8007e9c:	f040 80c5 	bne.w	800802a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007eac:	4619      	mov	r1, r3
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f8d8 	bl	8008064 <HAL_UARTEx_RxEventCallback>
      return;
 8007eb4:	e0b9      	b.n	800802a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	1ad3      	subs	r3, r2, r3
 8007ec6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f000 80ab 	beq.w	800802e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8007ed8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f000 80a6 	beq.w	800802e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eea:	e853 3f00 	ldrex	r3, [r3]
 8007eee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ef2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ef6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	461a      	mov	r2, r3
 8007f00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007f04:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f06:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f0c:	e841 2300 	strex	r3, r2, [r1]
 8007f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1e4      	bne.n	8007ee2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	3308      	adds	r3, #8
 8007f1e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f22:	e853 3f00 	ldrex	r3, [r3]
 8007f26:	623b      	str	r3, [r7, #32]
   return(result);
 8007f28:	6a3b      	ldr	r3, [r7, #32]
 8007f2a:	f023 0301 	bic.w	r3, r3, #1
 8007f2e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	3308      	adds	r3, #8
 8007f38:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007f3c:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f44:	e841 2300 	strex	r3, r2, [r1]
 8007f48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1e3      	bne.n	8007f18 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2220      	movs	r2, #32
 8007f54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	e853 3f00 	ldrex	r3, [r3]
 8007f70:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f023 0310 	bic.w	r3, r3, #16
 8007f78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	461a      	mov	r2, r3
 8007f82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007f86:	61fb      	str	r3, [r7, #28]
 8007f88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8a:	69b9      	ldr	r1, [r7, #24]
 8007f8c:	69fa      	ldr	r2, [r7, #28]
 8007f8e:	e841 2300 	strex	r3, r2, [r1]
 8007f92:	617b      	str	r3, [r7, #20]
   return(result);
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1e4      	bne.n	8007f64 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2202      	movs	r2, #2
 8007f9e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007fa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f85c 	bl	8008064 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007fac:	e03f      	b.n	800802e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00e      	beq.n	8007fd8 <HAL_UART_IRQHandler+0x5a8>
 8007fba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d008      	beq.n	8007fd8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007fce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 ffe9 	bl	8008fa8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007fd6:	e02d      	b.n	8008034 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00e      	beq.n	8008002 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d008      	beq.n	8008002 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d01c      	beq.n	8008032 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	4798      	blx	r3
    }
    return;
 8008000:	e017      	b.n	8008032 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800800a:	2b00      	cmp	r3, #0
 800800c:	d012      	beq.n	8008034 <HAL_UART_IRQHandler+0x604>
 800800e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00c      	beq.n	8008034 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fdde 	bl	8008bdc <UART_EndTransmit_IT>
    return;
 8008020:	e008      	b.n	8008034 <HAL_UART_IRQHandler+0x604>
      return;
 8008022:	bf00      	nop
 8008024:	e006      	b.n	8008034 <HAL_UART_IRQHandler+0x604>
    return;
 8008026:	bf00      	nop
 8008028:	e004      	b.n	8008034 <HAL_UART_IRQHandler+0x604>
      return;
 800802a:	bf00      	nop
 800802c:	e002      	b.n	8008034 <HAL_UART_IRQHandler+0x604>
      return;
 800802e:	bf00      	nop
 8008030:	e000      	b.n	8008034 <HAL_UART_IRQHandler+0x604>
    return;
 8008032:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008034:	37e8      	adds	r7, #232	@ 0xe8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop

0800803c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008044:	bf00      	nop
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800807c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008080:	b08a      	sub	sp, #40	@ 0x28
 8008082:	af00      	add	r7, sp, #0
 8008084:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008086:	2300      	movs	r3, #0
 8008088:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	689a      	ldr	r2, [r3, #8]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	431a      	orrs	r2, r3
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	695b      	ldr	r3, [r3, #20]
 800809a:	431a      	orrs	r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	69db      	ldr	r3, [r3, #28]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	4ba4      	ldr	r3, [pc, #656]	@ (800833c <UART_SetConfig+0x2c0>)
 80080ac:	4013      	ands	r3, r2
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	6812      	ldr	r2, [r2, #0]
 80080b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80080b4:	430b      	orrs	r3, r1
 80080b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	68da      	ldr	r2, [r3, #12]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	430a      	orrs	r2, r1
 80080cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	699b      	ldr	r3, [r3, #24]
 80080d2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a99      	ldr	r2, [pc, #612]	@ (8008340 <UART_SetConfig+0x2c4>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d004      	beq.n	80080e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6a1b      	ldr	r3, [r3, #32]
 80080e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080e4:	4313      	orrs	r3, r2
 80080e6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080f8:	430a      	orrs	r2, r1
 80080fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a90      	ldr	r2, [pc, #576]	@ (8008344 <UART_SetConfig+0x2c8>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d126      	bne.n	8008154 <UART_SetConfig+0xd8>
 8008106:	4b90      	ldr	r3, [pc, #576]	@ (8008348 <UART_SetConfig+0x2cc>)
 8008108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800810c:	f003 0303 	and.w	r3, r3, #3
 8008110:	2b03      	cmp	r3, #3
 8008112:	d81b      	bhi.n	800814c <UART_SetConfig+0xd0>
 8008114:	a201      	add	r2, pc, #4	@ (adr r2, 800811c <UART_SetConfig+0xa0>)
 8008116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800811a:	bf00      	nop
 800811c:	0800812d 	.word	0x0800812d
 8008120:	0800813d 	.word	0x0800813d
 8008124:	08008135 	.word	0x08008135
 8008128:	08008145 	.word	0x08008145
 800812c:	2301      	movs	r3, #1
 800812e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008132:	e116      	b.n	8008362 <UART_SetConfig+0x2e6>
 8008134:	2302      	movs	r3, #2
 8008136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800813a:	e112      	b.n	8008362 <UART_SetConfig+0x2e6>
 800813c:	2304      	movs	r3, #4
 800813e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008142:	e10e      	b.n	8008362 <UART_SetConfig+0x2e6>
 8008144:	2308      	movs	r3, #8
 8008146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800814a:	e10a      	b.n	8008362 <UART_SetConfig+0x2e6>
 800814c:	2310      	movs	r3, #16
 800814e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008152:	e106      	b.n	8008362 <UART_SetConfig+0x2e6>
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a7c      	ldr	r2, [pc, #496]	@ (800834c <UART_SetConfig+0x2d0>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d138      	bne.n	80081d0 <UART_SetConfig+0x154>
 800815e:	4b7a      	ldr	r3, [pc, #488]	@ (8008348 <UART_SetConfig+0x2cc>)
 8008160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008164:	f003 030c 	and.w	r3, r3, #12
 8008168:	2b0c      	cmp	r3, #12
 800816a:	d82d      	bhi.n	80081c8 <UART_SetConfig+0x14c>
 800816c:	a201      	add	r2, pc, #4	@ (adr r2, 8008174 <UART_SetConfig+0xf8>)
 800816e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008172:	bf00      	nop
 8008174:	080081a9 	.word	0x080081a9
 8008178:	080081c9 	.word	0x080081c9
 800817c:	080081c9 	.word	0x080081c9
 8008180:	080081c9 	.word	0x080081c9
 8008184:	080081b9 	.word	0x080081b9
 8008188:	080081c9 	.word	0x080081c9
 800818c:	080081c9 	.word	0x080081c9
 8008190:	080081c9 	.word	0x080081c9
 8008194:	080081b1 	.word	0x080081b1
 8008198:	080081c9 	.word	0x080081c9
 800819c:	080081c9 	.word	0x080081c9
 80081a0:	080081c9 	.word	0x080081c9
 80081a4:	080081c1 	.word	0x080081c1
 80081a8:	2300      	movs	r3, #0
 80081aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80081ae:	e0d8      	b.n	8008362 <UART_SetConfig+0x2e6>
 80081b0:	2302      	movs	r3, #2
 80081b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80081b6:	e0d4      	b.n	8008362 <UART_SetConfig+0x2e6>
 80081b8:	2304      	movs	r3, #4
 80081ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80081be:	e0d0      	b.n	8008362 <UART_SetConfig+0x2e6>
 80081c0:	2308      	movs	r3, #8
 80081c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80081c6:	e0cc      	b.n	8008362 <UART_SetConfig+0x2e6>
 80081c8:	2310      	movs	r3, #16
 80081ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80081ce:	e0c8      	b.n	8008362 <UART_SetConfig+0x2e6>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a5e      	ldr	r2, [pc, #376]	@ (8008350 <UART_SetConfig+0x2d4>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d125      	bne.n	8008226 <UART_SetConfig+0x1aa>
 80081da:	4b5b      	ldr	r3, [pc, #364]	@ (8008348 <UART_SetConfig+0x2cc>)
 80081dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081e0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80081e4:	2b30      	cmp	r3, #48	@ 0x30
 80081e6:	d016      	beq.n	8008216 <UART_SetConfig+0x19a>
 80081e8:	2b30      	cmp	r3, #48	@ 0x30
 80081ea:	d818      	bhi.n	800821e <UART_SetConfig+0x1a2>
 80081ec:	2b20      	cmp	r3, #32
 80081ee:	d00a      	beq.n	8008206 <UART_SetConfig+0x18a>
 80081f0:	2b20      	cmp	r3, #32
 80081f2:	d814      	bhi.n	800821e <UART_SetConfig+0x1a2>
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d002      	beq.n	80081fe <UART_SetConfig+0x182>
 80081f8:	2b10      	cmp	r3, #16
 80081fa:	d008      	beq.n	800820e <UART_SetConfig+0x192>
 80081fc:	e00f      	b.n	800821e <UART_SetConfig+0x1a2>
 80081fe:	2300      	movs	r3, #0
 8008200:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008204:	e0ad      	b.n	8008362 <UART_SetConfig+0x2e6>
 8008206:	2302      	movs	r3, #2
 8008208:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800820c:	e0a9      	b.n	8008362 <UART_SetConfig+0x2e6>
 800820e:	2304      	movs	r3, #4
 8008210:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008214:	e0a5      	b.n	8008362 <UART_SetConfig+0x2e6>
 8008216:	2308      	movs	r3, #8
 8008218:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800821c:	e0a1      	b.n	8008362 <UART_SetConfig+0x2e6>
 800821e:	2310      	movs	r3, #16
 8008220:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008224:	e09d      	b.n	8008362 <UART_SetConfig+0x2e6>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a4a      	ldr	r2, [pc, #296]	@ (8008354 <UART_SetConfig+0x2d8>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d125      	bne.n	800827c <UART_SetConfig+0x200>
 8008230:	4b45      	ldr	r3, [pc, #276]	@ (8008348 <UART_SetConfig+0x2cc>)
 8008232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008236:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800823a:	2bc0      	cmp	r3, #192	@ 0xc0
 800823c:	d016      	beq.n	800826c <UART_SetConfig+0x1f0>
 800823e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008240:	d818      	bhi.n	8008274 <UART_SetConfig+0x1f8>
 8008242:	2b80      	cmp	r3, #128	@ 0x80
 8008244:	d00a      	beq.n	800825c <UART_SetConfig+0x1e0>
 8008246:	2b80      	cmp	r3, #128	@ 0x80
 8008248:	d814      	bhi.n	8008274 <UART_SetConfig+0x1f8>
 800824a:	2b00      	cmp	r3, #0
 800824c:	d002      	beq.n	8008254 <UART_SetConfig+0x1d8>
 800824e:	2b40      	cmp	r3, #64	@ 0x40
 8008250:	d008      	beq.n	8008264 <UART_SetConfig+0x1e8>
 8008252:	e00f      	b.n	8008274 <UART_SetConfig+0x1f8>
 8008254:	2300      	movs	r3, #0
 8008256:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800825a:	e082      	b.n	8008362 <UART_SetConfig+0x2e6>
 800825c:	2302      	movs	r3, #2
 800825e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008262:	e07e      	b.n	8008362 <UART_SetConfig+0x2e6>
 8008264:	2304      	movs	r3, #4
 8008266:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800826a:	e07a      	b.n	8008362 <UART_SetConfig+0x2e6>
 800826c:	2308      	movs	r3, #8
 800826e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008272:	e076      	b.n	8008362 <UART_SetConfig+0x2e6>
 8008274:	2310      	movs	r3, #16
 8008276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800827a:	e072      	b.n	8008362 <UART_SetConfig+0x2e6>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a35      	ldr	r2, [pc, #212]	@ (8008358 <UART_SetConfig+0x2dc>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d12a      	bne.n	80082dc <UART_SetConfig+0x260>
 8008286:	4b30      	ldr	r3, [pc, #192]	@ (8008348 <UART_SetConfig+0x2cc>)
 8008288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800828c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008290:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008294:	d01a      	beq.n	80082cc <UART_SetConfig+0x250>
 8008296:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800829a:	d81b      	bhi.n	80082d4 <UART_SetConfig+0x258>
 800829c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082a0:	d00c      	beq.n	80082bc <UART_SetConfig+0x240>
 80082a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082a6:	d815      	bhi.n	80082d4 <UART_SetConfig+0x258>
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d003      	beq.n	80082b4 <UART_SetConfig+0x238>
 80082ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082b0:	d008      	beq.n	80082c4 <UART_SetConfig+0x248>
 80082b2:	e00f      	b.n	80082d4 <UART_SetConfig+0x258>
 80082b4:	2300      	movs	r3, #0
 80082b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082ba:	e052      	b.n	8008362 <UART_SetConfig+0x2e6>
 80082bc:	2302      	movs	r3, #2
 80082be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082c2:	e04e      	b.n	8008362 <UART_SetConfig+0x2e6>
 80082c4:	2304      	movs	r3, #4
 80082c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082ca:	e04a      	b.n	8008362 <UART_SetConfig+0x2e6>
 80082cc:	2308      	movs	r3, #8
 80082ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082d2:	e046      	b.n	8008362 <UART_SetConfig+0x2e6>
 80082d4:	2310      	movs	r3, #16
 80082d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082da:	e042      	b.n	8008362 <UART_SetConfig+0x2e6>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a17      	ldr	r2, [pc, #92]	@ (8008340 <UART_SetConfig+0x2c4>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d13a      	bne.n	800835c <UART_SetConfig+0x2e0>
 80082e6:	4b18      	ldr	r3, [pc, #96]	@ (8008348 <UART_SetConfig+0x2cc>)
 80082e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80082f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80082f4:	d01a      	beq.n	800832c <UART_SetConfig+0x2b0>
 80082f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80082fa:	d81b      	bhi.n	8008334 <UART_SetConfig+0x2b8>
 80082fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008300:	d00c      	beq.n	800831c <UART_SetConfig+0x2a0>
 8008302:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008306:	d815      	bhi.n	8008334 <UART_SetConfig+0x2b8>
 8008308:	2b00      	cmp	r3, #0
 800830a:	d003      	beq.n	8008314 <UART_SetConfig+0x298>
 800830c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008310:	d008      	beq.n	8008324 <UART_SetConfig+0x2a8>
 8008312:	e00f      	b.n	8008334 <UART_SetConfig+0x2b8>
 8008314:	2300      	movs	r3, #0
 8008316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800831a:	e022      	b.n	8008362 <UART_SetConfig+0x2e6>
 800831c:	2302      	movs	r3, #2
 800831e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008322:	e01e      	b.n	8008362 <UART_SetConfig+0x2e6>
 8008324:	2304      	movs	r3, #4
 8008326:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800832a:	e01a      	b.n	8008362 <UART_SetConfig+0x2e6>
 800832c:	2308      	movs	r3, #8
 800832e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008332:	e016      	b.n	8008362 <UART_SetConfig+0x2e6>
 8008334:	2310      	movs	r3, #16
 8008336:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800833a:	e012      	b.n	8008362 <UART_SetConfig+0x2e6>
 800833c:	efff69f3 	.word	0xefff69f3
 8008340:	40008000 	.word	0x40008000
 8008344:	40013800 	.word	0x40013800
 8008348:	40021000 	.word	0x40021000
 800834c:	40004400 	.word	0x40004400
 8008350:	40004800 	.word	0x40004800
 8008354:	40004c00 	.word	0x40004c00
 8008358:	40005000 	.word	0x40005000
 800835c:	2310      	movs	r3, #16
 800835e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a9f      	ldr	r2, [pc, #636]	@ (80085e4 <UART_SetConfig+0x568>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d17a      	bne.n	8008462 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800836c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008370:	2b08      	cmp	r3, #8
 8008372:	d824      	bhi.n	80083be <UART_SetConfig+0x342>
 8008374:	a201      	add	r2, pc, #4	@ (adr r2, 800837c <UART_SetConfig+0x300>)
 8008376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837a:	bf00      	nop
 800837c:	080083a1 	.word	0x080083a1
 8008380:	080083bf 	.word	0x080083bf
 8008384:	080083a9 	.word	0x080083a9
 8008388:	080083bf 	.word	0x080083bf
 800838c:	080083af 	.word	0x080083af
 8008390:	080083bf 	.word	0x080083bf
 8008394:	080083bf 	.word	0x080083bf
 8008398:	080083bf 	.word	0x080083bf
 800839c:	080083b7 	.word	0x080083b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083a0:	f7fb ff5e 	bl	8004260 <HAL_RCC_GetPCLK1Freq>
 80083a4:	61f8      	str	r0, [r7, #28]
        break;
 80083a6:	e010      	b.n	80083ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083a8:	4b8f      	ldr	r3, [pc, #572]	@ (80085e8 <UART_SetConfig+0x56c>)
 80083aa:	61fb      	str	r3, [r7, #28]
        break;
 80083ac:	e00d      	b.n	80083ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083ae:	f7fb febf 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 80083b2:	61f8      	str	r0, [r7, #28]
        break;
 80083b4:	e009      	b.n	80083ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083ba:	61fb      	str	r3, [r7, #28]
        break;
 80083bc:	e005      	b.n	80083ca <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80083be:	2300      	movs	r3, #0
 80083c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80083c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f000 80fb 	beq.w	80085c8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	685a      	ldr	r2, [r3, #4]
 80083d6:	4613      	mov	r3, r2
 80083d8:	005b      	lsls	r3, r3, #1
 80083da:	4413      	add	r3, r2
 80083dc:	69fa      	ldr	r2, [r7, #28]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d305      	bcc.n	80083ee <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80083e8:	69fa      	ldr	r2, [r7, #28]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d903      	bls.n	80083f6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80083f4:	e0e8      	b.n	80085c8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	2200      	movs	r2, #0
 80083fa:	461c      	mov	r4, r3
 80083fc:	4615      	mov	r5, r2
 80083fe:	f04f 0200 	mov.w	r2, #0
 8008402:	f04f 0300 	mov.w	r3, #0
 8008406:	022b      	lsls	r3, r5, #8
 8008408:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800840c:	0222      	lsls	r2, r4, #8
 800840e:	68f9      	ldr	r1, [r7, #12]
 8008410:	6849      	ldr	r1, [r1, #4]
 8008412:	0849      	lsrs	r1, r1, #1
 8008414:	2000      	movs	r0, #0
 8008416:	4688      	mov	r8, r1
 8008418:	4681      	mov	r9, r0
 800841a:	eb12 0a08 	adds.w	sl, r2, r8
 800841e:	eb43 0b09 	adc.w	fp, r3, r9
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	603b      	str	r3, [r7, #0]
 800842a:	607a      	str	r2, [r7, #4]
 800842c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008430:	4650      	mov	r0, sl
 8008432:	4659      	mov	r1, fp
 8008434:	f7f7 ff1c 	bl	8000270 <__aeabi_uldivmod>
 8008438:	4602      	mov	r2, r0
 800843a:	460b      	mov	r3, r1
 800843c:	4613      	mov	r3, r2
 800843e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008446:	d308      	bcc.n	800845a <UART_SetConfig+0x3de>
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800844e:	d204      	bcs.n	800845a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	69ba      	ldr	r2, [r7, #24]
 8008456:	60da      	str	r2, [r3, #12]
 8008458:	e0b6      	b.n	80085c8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008460:	e0b2      	b.n	80085c8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	69db      	ldr	r3, [r3, #28]
 8008466:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800846a:	d15e      	bne.n	800852a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800846c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008470:	2b08      	cmp	r3, #8
 8008472:	d828      	bhi.n	80084c6 <UART_SetConfig+0x44a>
 8008474:	a201      	add	r2, pc, #4	@ (adr r2, 800847c <UART_SetConfig+0x400>)
 8008476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847a:	bf00      	nop
 800847c:	080084a1 	.word	0x080084a1
 8008480:	080084a9 	.word	0x080084a9
 8008484:	080084b1 	.word	0x080084b1
 8008488:	080084c7 	.word	0x080084c7
 800848c:	080084b7 	.word	0x080084b7
 8008490:	080084c7 	.word	0x080084c7
 8008494:	080084c7 	.word	0x080084c7
 8008498:	080084c7 	.word	0x080084c7
 800849c:	080084bf 	.word	0x080084bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084a0:	f7fb fede 	bl	8004260 <HAL_RCC_GetPCLK1Freq>
 80084a4:	61f8      	str	r0, [r7, #28]
        break;
 80084a6:	e014      	b.n	80084d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084a8:	f7fb fef0 	bl	800428c <HAL_RCC_GetPCLK2Freq>
 80084ac:	61f8      	str	r0, [r7, #28]
        break;
 80084ae:	e010      	b.n	80084d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084b0:	4b4d      	ldr	r3, [pc, #308]	@ (80085e8 <UART_SetConfig+0x56c>)
 80084b2:	61fb      	str	r3, [r7, #28]
        break;
 80084b4:	e00d      	b.n	80084d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084b6:	f7fb fe3b 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 80084ba:	61f8      	str	r0, [r7, #28]
        break;
 80084bc:	e009      	b.n	80084d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084c2:	61fb      	str	r3, [r7, #28]
        break;
 80084c4:	e005      	b.n	80084d2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80084c6:	2300      	movs	r3, #0
 80084c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80084d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d077      	beq.n	80085c8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	005a      	lsls	r2, r3, #1
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	085b      	lsrs	r3, r3, #1
 80084e2:	441a      	add	r2, r3
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80084ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	2b0f      	cmp	r3, #15
 80084f2:	d916      	bls.n	8008522 <UART_SetConfig+0x4a6>
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084fa:	d212      	bcs.n	8008522 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	b29b      	uxth	r3, r3
 8008500:	f023 030f 	bic.w	r3, r3, #15
 8008504:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	085b      	lsrs	r3, r3, #1
 800850a:	b29b      	uxth	r3, r3
 800850c:	f003 0307 	and.w	r3, r3, #7
 8008510:	b29a      	uxth	r2, r3
 8008512:	8afb      	ldrh	r3, [r7, #22]
 8008514:	4313      	orrs	r3, r2
 8008516:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	8afa      	ldrh	r2, [r7, #22]
 800851e:	60da      	str	r2, [r3, #12]
 8008520:	e052      	b.n	80085c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008528:	e04e      	b.n	80085c8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800852a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800852e:	2b08      	cmp	r3, #8
 8008530:	d827      	bhi.n	8008582 <UART_SetConfig+0x506>
 8008532:	a201      	add	r2, pc, #4	@ (adr r2, 8008538 <UART_SetConfig+0x4bc>)
 8008534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008538:	0800855d 	.word	0x0800855d
 800853c:	08008565 	.word	0x08008565
 8008540:	0800856d 	.word	0x0800856d
 8008544:	08008583 	.word	0x08008583
 8008548:	08008573 	.word	0x08008573
 800854c:	08008583 	.word	0x08008583
 8008550:	08008583 	.word	0x08008583
 8008554:	08008583 	.word	0x08008583
 8008558:	0800857b 	.word	0x0800857b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800855c:	f7fb fe80 	bl	8004260 <HAL_RCC_GetPCLK1Freq>
 8008560:	61f8      	str	r0, [r7, #28]
        break;
 8008562:	e014      	b.n	800858e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008564:	f7fb fe92 	bl	800428c <HAL_RCC_GetPCLK2Freq>
 8008568:	61f8      	str	r0, [r7, #28]
        break;
 800856a:	e010      	b.n	800858e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800856c:	4b1e      	ldr	r3, [pc, #120]	@ (80085e8 <UART_SetConfig+0x56c>)
 800856e:	61fb      	str	r3, [r7, #28]
        break;
 8008570:	e00d      	b.n	800858e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008572:	f7fb fddd 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 8008576:	61f8      	str	r0, [r7, #28]
        break;
 8008578:	e009      	b.n	800858e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800857a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800857e:	61fb      	str	r3, [r7, #28]
        break;
 8008580:	e005      	b.n	800858e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008582:	2300      	movs	r3, #0
 8008584:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800858c:	bf00      	nop
    }

    if (pclk != 0U)
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d019      	beq.n	80085c8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	085a      	lsrs	r2, r3, #1
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	441a      	add	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	2b0f      	cmp	r3, #15
 80085ac:	d909      	bls.n	80085c2 <UART_SetConfig+0x546>
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085b4:	d205      	bcs.n	80085c2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	b29a      	uxth	r2, r3
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	60da      	str	r2, [r3, #12]
 80085c0:	e002      	b.n	80085c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2200      	movs	r2, #0
 80085cc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80085d4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3728      	adds	r7, #40	@ 0x28
 80085dc:	46bd      	mov	sp, r7
 80085de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085e2:	bf00      	nop
 80085e4:	40008000 	.word	0x40008000
 80085e8:	00f42400 	.word	0x00f42400

080085ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085f8:	f003 0308 	and.w	r3, r3, #8
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00a      	beq.n	8008616 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	430a      	orrs	r2, r1
 8008614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800861a:	f003 0301 	and.w	r3, r3, #1
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00a      	beq.n	8008638 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	430a      	orrs	r2, r1
 8008636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800863c:	f003 0302 	and.w	r3, r3, #2
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00a      	beq.n	800865a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	430a      	orrs	r2, r1
 8008658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800865e:	f003 0304 	and.w	r3, r3, #4
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00a      	beq.n	800867c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	430a      	orrs	r2, r1
 800867a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008680:	f003 0310 	and.w	r3, r3, #16
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00a      	beq.n	800869e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	430a      	orrs	r2, r1
 800869c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086a2:	f003 0320 	and.w	r3, r3, #32
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00a      	beq.n	80086c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	430a      	orrs	r2, r1
 80086be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d01a      	beq.n	8008702 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	430a      	orrs	r2, r1
 80086e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086ea:	d10a      	bne.n	8008702 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	430a      	orrs	r2, r1
 8008700:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00a      	beq.n	8008724 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	430a      	orrs	r2, r1
 8008722:	605a      	str	r2, [r3, #4]
  }
}
 8008724:	bf00      	nop
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b098      	sub	sp, #96	@ 0x60
 8008734:	af02      	add	r7, sp, #8
 8008736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008740:	f7f9 fc52 	bl	8001fe8 <HAL_GetTick>
 8008744:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f003 0308 	and.w	r3, r3, #8
 8008750:	2b08      	cmp	r3, #8
 8008752:	d12e      	bne.n	80087b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008754:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008758:	9300      	str	r3, [sp, #0]
 800875a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800875c:	2200      	movs	r2, #0
 800875e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f88c 	bl	8008880 <UART_WaitOnFlagUntilTimeout>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d021      	beq.n	80087b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008776:	e853 3f00 	ldrex	r3, [r3]
 800877a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800877c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800877e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008782:	653b      	str	r3, [r7, #80]	@ 0x50
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	461a      	mov	r2, r3
 800878a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800878c:	647b      	str	r3, [r7, #68]	@ 0x44
 800878e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008790:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008792:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008794:	e841 2300 	strex	r3, r2, [r1]
 8008798:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800879a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1e6      	bne.n	800876e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2220      	movs	r2, #32
 80087a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087ae:	2303      	movs	r3, #3
 80087b0:	e062      	b.n	8008878 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 0304 	and.w	r3, r3, #4
 80087bc:	2b04      	cmp	r3, #4
 80087be:	d149      	bne.n	8008854 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80087c4:	9300      	str	r3, [sp, #0]
 80087c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087c8:	2200      	movs	r2, #0
 80087ca:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 f856 	bl	8008880 <UART_WaitOnFlagUntilTimeout>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d03c      	beq.n	8008854 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e2:	e853 3f00 	ldrex	r3, [r3]
 80087e6:	623b      	str	r3, [r7, #32]
   return(result);
 80087e8:	6a3b      	ldr	r3, [r7, #32]
 80087ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	461a      	mov	r2, r3
 80087f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80087fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008800:	e841 2300 	strex	r3, r2, [r1]
 8008804:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1e6      	bne.n	80087da <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	3308      	adds	r3, #8
 8008812:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	e853 3f00 	ldrex	r3, [r3]
 800881a:	60fb      	str	r3, [r7, #12]
   return(result);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f023 0301 	bic.w	r3, r3, #1
 8008822:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	3308      	adds	r3, #8
 800882a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800882c:	61fa      	str	r2, [r7, #28]
 800882e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008830:	69b9      	ldr	r1, [r7, #24]
 8008832:	69fa      	ldr	r2, [r7, #28]
 8008834:	e841 2300 	strex	r3, r2, [r1]
 8008838:	617b      	str	r3, [r7, #20]
   return(result);
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1e5      	bne.n	800880c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2220      	movs	r2, #32
 8008844:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008850:	2303      	movs	r3, #3
 8008852:	e011      	b.n	8008878 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2220      	movs	r2, #32
 8008858:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2220      	movs	r2, #32
 800885e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3758      	adds	r7, #88	@ 0x58
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	603b      	str	r3, [r7, #0]
 800888c:	4613      	mov	r3, r2
 800888e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008890:	e04f      	b.n	8008932 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008898:	d04b      	beq.n	8008932 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800889a:	f7f9 fba5 	bl	8001fe8 <HAL_GetTick>
 800889e:	4602      	mov	r2, r0
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	1ad3      	subs	r3, r2, r3
 80088a4:	69ba      	ldr	r2, [r7, #24]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d302      	bcc.n	80088b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d101      	bne.n	80088b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80088b0:	2303      	movs	r3, #3
 80088b2:	e04e      	b.n	8008952 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f003 0304 	and.w	r3, r3, #4
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d037      	beq.n	8008932 <UART_WaitOnFlagUntilTimeout+0xb2>
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	2b80      	cmp	r3, #128	@ 0x80
 80088c6:	d034      	beq.n	8008932 <UART_WaitOnFlagUntilTimeout+0xb2>
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	2b40      	cmp	r3, #64	@ 0x40
 80088cc:	d031      	beq.n	8008932 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	69db      	ldr	r3, [r3, #28]
 80088d4:	f003 0308 	and.w	r3, r3, #8
 80088d8:	2b08      	cmp	r3, #8
 80088da:	d110      	bne.n	80088fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2208      	movs	r2, #8
 80088e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f000 f8ff 	bl	8008ae8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2208      	movs	r2, #8
 80088ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e029      	b.n	8008952 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	69db      	ldr	r3, [r3, #28]
 8008904:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008908:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800890c:	d111      	bne.n	8008932 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008916:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f000 f8e5 	bl	8008ae8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2220      	movs	r2, #32
 8008922:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800892e:	2303      	movs	r3, #3
 8008930:	e00f      	b.n	8008952 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	69da      	ldr	r2, [r3, #28]
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	4013      	ands	r3, r2
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	429a      	cmp	r2, r3
 8008940:	bf0c      	ite	eq
 8008942:	2301      	moveq	r3, #1
 8008944:	2300      	movne	r3, #0
 8008946:	b2db      	uxtb	r3, r3
 8008948:	461a      	mov	r2, r3
 800894a:	79fb      	ldrb	r3, [r7, #7]
 800894c:	429a      	cmp	r2, r3
 800894e:	d0a0      	beq.n	8008892 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
	...

0800895c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800895c:	b480      	push	{r7}
 800895e:	b097      	sub	sp, #92	@ 0x5c
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	4613      	mov	r3, r2
 8008968:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	88fa      	ldrh	r2, [r7, #6]
 8008974:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	88fa      	ldrh	r2, [r7, #6]
 800897c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800898e:	d10e      	bne.n	80089ae <UART_Start_Receive_IT+0x52>
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d105      	bne.n	80089a4 <UART_Start_Receive_IT+0x48>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800899e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80089a2:	e02d      	b.n	8008a00 <UART_Start_Receive_IT+0xa4>
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	22ff      	movs	r2, #255	@ 0xff
 80089a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80089ac:	e028      	b.n	8008a00 <UART_Start_Receive_IT+0xa4>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d10d      	bne.n	80089d2 <UART_Start_Receive_IT+0x76>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d104      	bne.n	80089c8 <UART_Start_Receive_IT+0x6c>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	22ff      	movs	r2, #255	@ 0xff
 80089c2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80089c6:	e01b      	b.n	8008a00 <UART_Start_Receive_IT+0xa4>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	227f      	movs	r2, #127	@ 0x7f
 80089cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80089d0:	e016      	b.n	8008a00 <UART_Start_Receive_IT+0xa4>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089da:	d10d      	bne.n	80089f8 <UART_Start_Receive_IT+0x9c>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d104      	bne.n	80089ee <UART_Start_Receive_IT+0x92>
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	227f      	movs	r2, #127	@ 0x7f
 80089e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80089ec:	e008      	b.n	8008a00 <UART_Start_Receive_IT+0xa4>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	223f      	movs	r2, #63	@ 0x3f
 80089f2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80089f6:	e003      	b.n	8008a00 <UART_Start_Receive_IT+0xa4>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2222      	movs	r2, #34	@ 0x22
 8008a0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	3308      	adds	r3, #8
 8008a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a1a:	e853 3f00 	ldrex	r3, [r3]
 8008a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a22:	f043 0301 	orr.w	r3, r3, #1
 8008a26:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	3308      	adds	r3, #8
 8008a2e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008a30:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008a32:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a34:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a38:	e841 2300 	strex	r3, r2, [r1]
 8008a3c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008a3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1e5      	bne.n	8008a10 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a4c:	d107      	bne.n	8008a5e <UART_Start_Receive_IT+0x102>
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d103      	bne.n	8008a5e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	4a21      	ldr	r2, [pc, #132]	@ (8008ae0 <UART_Start_Receive_IT+0x184>)
 8008a5a:	669a      	str	r2, [r3, #104]	@ 0x68
 8008a5c:	e002      	b.n	8008a64 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	4a20      	ldr	r2, [pc, #128]	@ (8008ae4 <UART_Start_Receive_IT+0x188>)
 8008a62:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d019      	beq.n	8008aa0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a74:	e853 3f00 	ldrex	r3, [r3]
 8008a78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a7c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008a80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	461a      	mov	r2, r3
 8008a88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a8c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008a90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a92:	e841 2300 	strex	r3, r2, [r1]
 8008a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d1e6      	bne.n	8008a6c <UART_Start_Receive_IT+0x110>
 8008a9e:	e018      	b.n	8008ad2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	e853 3f00 	ldrex	r3, [r3]
 8008aac:	613b      	str	r3, [r7, #16]
   return(result);
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	f043 0320 	orr.w	r3, r3, #32
 8008ab4:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	461a      	mov	r2, r3
 8008abc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008abe:	623b      	str	r3, [r7, #32]
 8008ac0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac2:	69f9      	ldr	r1, [r7, #28]
 8008ac4:	6a3a      	ldr	r2, [r7, #32]
 8008ac6:	e841 2300 	strex	r3, r2, [r1]
 8008aca:	61bb      	str	r3, [r7, #24]
   return(result);
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1e6      	bne.n	8008aa0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	375c      	adds	r7, #92	@ 0x5c
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr
 8008ae0:	08008ded 	.word	0x08008ded
 8008ae4:	08008c31 	.word	0x08008c31

08008ae8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b095      	sub	sp, #84	@ 0x54
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008af8:	e853 3f00 	ldrex	r3, [r3]
 8008afc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b10:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b16:	e841 2300 	strex	r3, r2, [r1]
 8008b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1e6      	bne.n	8008af0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	3308      	adds	r3, #8
 8008b28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2a:	6a3b      	ldr	r3, [r7, #32]
 8008b2c:	e853 3f00 	ldrex	r3, [r3]
 8008b30:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	f023 0301 	bic.w	r3, r3, #1
 8008b38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	3308      	adds	r3, #8
 8008b40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b4a:	e841 2300 	strex	r3, r2, [r1]
 8008b4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d1e5      	bne.n	8008b22 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d118      	bne.n	8008b90 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	e853 3f00 	ldrex	r3, [r3]
 8008b6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	f023 0310 	bic.w	r3, r3, #16
 8008b72:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	461a      	mov	r2, r3
 8008b7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b7c:	61bb      	str	r3, [r7, #24]
 8008b7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b80:	6979      	ldr	r1, [r7, #20]
 8008b82:	69ba      	ldr	r2, [r7, #24]
 8008b84:	e841 2300 	strex	r3, r2, [r1]
 8008b88:	613b      	str	r3, [r7, #16]
   return(result);
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d1e6      	bne.n	8008b5e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2220      	movs	r2, #32
 8008b94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008ba4:	bf00      	nop
 8008ba6:	3754      	adds	r7, #84	@ 0x54
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	f7ff fa3e 	bl	8008050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bd4:	bf00      	nop
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b088      	sub	sp, #32
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	e853 3f00 	ldrex	r3, [r3]
 8008bf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bf8:	61fb      	str	r3, [r7, #28]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	61bb      	str	r3, [r7, #24]
 8008c04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c06:	6979      	ldr	r1, [r7, #20]
 8008c08:	69ba      	ldr	r2, [r7, #24]
 8008c0a:	e841 2300 	strex	r3, r2, [r1]
 8008c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1e6      	bne.n	8008be4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2220      	movs	r2, #32
 8008c1a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f7ff fa0a 	bl	800803c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c28:	bf00      	nop
 8008c2a:	3720      	adds	r7, #32
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b09c      	sub	sp, #112	@ 0x70
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008c3e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c48:	2b22      	cmp	r3, #34	@ 0x22
 8008c4a:	f040 80be 	bne.w	8008dca <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008c54:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c58:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008c5c:	b2d9      	uxtb	r1, r3
 8008c5e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008c62:	b2da      	uxtb	r2, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c68:	400a      	ands	r2, r1
 8008c6a:	b2d2      	uxtb	r2, r2
 8008c6c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c72:	1c5a      	adds	r2, r3, #1
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	3b01      	subs	r3, #1
 8008c82:	b29a      	uxth	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f040 80a3 	bne.w	8008dde <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ca0:	e853 3f00 	ldrex	r3, [r3]
 8008ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008ca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ca8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008cac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008cb6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008cb8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008cbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008cbe:	e841 2300 	strex	r3, r2, [r1]
 8008cc2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008cc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1e6      	bne.n	8008c98 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	3308      	adds	r3, #8
 8008cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd4:	e853 3f00 	ldrex	r3, [r3]
 8008cd8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cdc:	f023 0301 	bic.w	r3, r3, #1
 8008ce0:	667b      	str	r3, [r7, #100]	@ 0x64
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	3308      	adds	r3, #8
 8008ce8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008cea:	647a      	str	r2, [r7, #68]	@ 0x44
 8008cec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008cf0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008cf2:	e841 2300 	strex	r3, r2, [r1]
 8008cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1e5      	bne.n	8008cca <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2220      	movs	r2, #32
 8008d02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a34      	ldr	r2, [pc, #208]	@ (8008de8 <UART_RxISR_8BIT+0x1b8>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d01f      	beq.n	8008d5c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d018      	beq.n	8008d5c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d32:	e853 3f00 	ldrex	r3, [r3]
 8008d36:	623b      	str	r3, [r7, #32]
   return(result);
 8008d38:	6a3b      	ldr	r3, [r7, #32]
 8008d3a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d3e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	461a      	mov	r2, r3
 8008d46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d48:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d50:	e841 2300 	strex	r3, r2, [r1]
 8008d54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d1e6      	bne.n	8008d2a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d12e      	bne.n	8008dc2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	e853 3f00 	ldrex	r3, [r3]
 8008d76:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f023 0310 	bic.w	r3, r3, #16
 8008d7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	461a      	mov	r2, r3
 8008d86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d88:	61fb      	str	r3, [r7, #28]
 8008d8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8c:	69b9      	ldr	r1, [r7, #24]
 8008d8e:	69fa      	ldr	r2, [r7, #28]
 8008d90:	e841 2300 	strex	r3, r2, [r1]
 8008d94:	617b      	str	r3, [r7, #20]
   return(result);
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d1e6      	bne.n	8008d6a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	69db      	ldr	r3, [r3, #28]
 8008da2:	f003 0310 	and.w	r3, r3, #16
 8008da6:	2b10      	cmp	r3, #16
 8008da8:	d103      	bne.n	8008db2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2210      	movs	r2, #16
 8008db0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008db8:	4619      	mov	r1, r3
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7ff f952 	bl	8008064 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008dc0:	e00d      	b.n	8008dde <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f7f7 fd92 	bl	80008ec <HAL_UART_RxCpltCallback>
}
 8008dc8:	e009      	b.n	8008dde <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	8b1b      	ldrh	r3, [r3, #24]
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f042 0208 	orr.w	r2, r2, #8
 8008dda:	b292      	uxth	r2, r2
 8008ddc:	831a      	strh	r2, [r3, #24]
}
 8008dde:	bf00      	nop
 8008de0:	3770      	adds	r7, #112	@ 0x70
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	40008000 	.word	0x40008000

08008dec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b09c      	sub	sp, #112	@ 0x70
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008dfa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e04:	2b22      	cmp	r3, #34	@ 0x22
 8008e06:	f040 80be 	bne.w	8008f86 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008e10:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e18:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008e1a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008e1e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008e22:	4013      	ands	r3, r2
 8008e24:	b29a      	uxth	r2, r3
 8008e26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e28:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e2e:	1c9a      	adds	r2, r3, #2
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	b29a      	uxth	r2, r3
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f040 80a3 	bne.w	8008f9a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e5c:	e853 3f00 	ldrex	r3, [r3]
 8008e60:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008e62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e68:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	461a      	mov	r2, r3
 8008e70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e72:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e74:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e76:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008e78:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008e7a:	e841 2300 	strex	r3, r2, [r1]
 8008e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008e80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1e6      	bne.n	8008e54 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	3308      	adds	r3, #8
 8008e8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e90:	e853 3f00 	ldrex	r3, [r3]
 8008e94:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e98:	f023 0301 	bic.w	r3, r3, #1
 8008e9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	3308      	adds	r3, #8
 8008ea4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008ea6:	643a      	str	r2, [r7, #64]	@ 0x40
 8008ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eaa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008eac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008eae:	e841 2300 	strex	r3, r2, [r1]
 8008eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1e5      	bne.n	8008e86 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2220      	movs	r2, #32
 8008ebe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a34      	ldr	r2, [pc, #208]	@ (8008fa4 <UART_RxISR_16BIT+0x1b8>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d01f      	beq.n	8008f18 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d018      	beq.n	8008f18 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eec:	6a3b      	ldr	r3, [r7, #32]
 8008eee:	e853 3f00 	ldrex	r3, [r3]
 8008ef2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008efa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	461a      	mov	r2, r3
 8008f02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f06:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f0c:	e841 2300 	strex	r3, r2, [r1]
 8008f10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1e6      	bne.n	8008ee6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d12e      	bne.n	8008f7e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	e853 3f00 	ldrex	r3, [r3]
 8008f32:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	f023 0310 	bic.w	r3, r3, #16
 8008f3a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	461a      	mov	r2, r3
 8008f42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f44:	61bb      	str	r3, [r7, #24]
 8008f46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f48:	6979      	ldr	r1, [r7, #20]
 8008f4a:	69ba      	ldr	r2, [r7, #24]
 8008f4c:	e841 2300 	strex	r3, r2, [r1]
 8008f50:	613b      	str	r3, [r7, #16]
   return(result);
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d1e6      	bne.n	8008f26 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	69db      	ldr	r3, [r3, #28]
 8008f5e:	f003 0310 	and.w	r3, r3, #16
 8008f62:	2b10      	cmp	r3, #16
 8008f64:	d103      	bne.n	8008f6e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2210      	movs	r2, #16
 8008f6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008f74:	4619      	mov	r1, r3
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f7ff f874 	bl	8008064 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f7c:	e00d      	b.n	8008f9a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f7f7 fcb4 	bl	80008ec <HAL_UART_RxCpltCallback>
}
 8008f84:	e009      	b.n	8008f9a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	8b1b      	ldrh	r3, [r3, #24]
 8008f8c:	b29a      	uxth	r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f042 0208 	orr.w	r2, r2, #8
 8008f96:	b292      	uxth	r2, r2
 8008f98:	831a      	strh	r2, [r3, #24]
}
 8008f9a:	bf00      	nop
 8008f9c:	3770      	adds	r7, #112	@ 0x70
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	40008000 	.word	0x40008000

08008fa8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008fb0:	bf00      	nop
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b085      	sub	sp, #20
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008fce:	2b84      	cmp	r3, #132	@ 0x84
 8008fd0:	d005      	beq.n	8008fde <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008fd2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	4413      	add	r3, r2
 8008fda:	3303      	adds	r3, #3
 8008fdc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008fde:	68fb      	ldr	r3, [r7, #12]
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3714      	adds	r7, #20
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr

08008fec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008ff0:	f000 fde2 	bl	8009bb8 <vTaskStartScheduler>
  
  return osOK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008ffa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ffc:	b089      	sub	sp, #36	@ 0x24
 8008ffe:	af04      	add	r7, sp, #16
 8009000:	6078      	str	r0, [r7, #4]
 8009002:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	695b      	ldr	r3, [r3, #20]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d020      	beq.n	800904e <osThreadCreate+0x54>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	699b      	ldr	r3, [r3, #24]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d01c      	beq.n	800904e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	685c      	ldr	r4, [r3, #4]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	691e      	ldr	r6, [r3, #16]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009026:	4618      	mov	r0, r3
 8009028:	f7ff ffc8 	bl	8008fbc <makeFreeRtosPriority>
 800902c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	695b      	ldr	r3, [r3, #20]
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009036:	9202      	str	r2, [sp, #8]
 8009038:	9301      	str	r3, [sp, #4]
 800903a:	9100      	str	r1, [sp, #0]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	4632      	mov	r2, r6
 8009040:	4629      	mov	r1, r5
 8009042:	4620      	mov	r0, r4
 8009044:	f000 fbd2 	bl	80097ec <xTaskCreateStatic>
 8009048:	4603      	mov	r3, r0
 800904a:	60fb      	str	r3, [r7, #12]
 800904c:	e01c      	b.n	8009088 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	685c      	ldr	r4, [r3, #4]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800905a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009062:	4618      	mov	r0, r3
 8009064:	f7ff ffaa 	bl	8008fbc <makeFreeRtosPriority>
 8009068:	4602      	mov	r2, r0
 800906a:	f107 030c 	add.w	r3, r7, #12
 800906e:	9301      	str	r3, [sp, #4]
 8009070:	9200      	str	r2, [sp, #0]
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	4632      	mov	r2, r6
 8009076:	4629      	mov	r1, r5
 8009078:	4620      	mov	r0, r4
 800907a:	f000 fc17 	bl	80098ac <xTaskCreate>
 800907e:	4603      	mov	r3, r0
 8009080:	2b01      	cmp	r3, #1
 8009082:	d001      	beq.n	8009088 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009084:	2300      	movs	r3, #0
 8009086:	e000      	b.n	800908a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009088:	68fb      	ldr	r3, [r7, #12]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3714      	adds	r7, #20
 800908e:	46bd      	mov	sp, r7
 8009090:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009092 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b084      	sub	sp, #16
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d001      	beq.n	80090a8 <osDelay+0x16>
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	e000      	b.n	80090aa <osDelay+0x18>
 80090a8:	2301      	movs	r3, #1
 80090aa:	4618      	mov	r0, r3
 80090ac:	f000 fd4e 	bl	8009b4c <vTaskDelay>
  
  return osOK;
 80090b0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80090ba:	b480      	push	{r7}
 80090bc:	b083      	sub	sp, #12
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f103 0208 	add.w	r2, r3, #8
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80090d2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f103 0208 	add.w	r2, r3, #8
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f103 0208 	add.w	r2, r3, #8
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80090ee:	bf00      	nop
 80090f0:	370c      	adds	r7, #12
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr

080090fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80090fa:	b480      	push	{r7}
 80090fc:	b083      	sub	sp, #12
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009108:	bf00      	nop
 800910a:	370c      	adds	r7, #12
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	68fa      	ldr	r2, [r7, #12]
 8009128:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	689a      	ldr	r2, [r3, #8]
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	683a      	ldr	r2, [r7, #0]
 8009138:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	683a      	ldr	r2, [r7, #0]
 800913e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	1c5a      	adds	r2, r3, #1
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	601a      	str	r2, [r3, #0]
}
 8009150:	bf00      	nop
 8009152:	3714      	adds	r7, #20
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800915c:	b480      	push	{r7}
 800915e:	b085      	sub	sp, #20
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009172:	d103      	bne.n	800917c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	691b      	ldr	r3, [r3, #16]
 8009178:	60fb      	str	r3, [r7, #12]
 800917a:	e00c      	b.n	8009196 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	3308      	adds	r3, #8
 8009180:	60fb      	str	r3, [r7, #12]
 8009182:	e002      	b.n	800918a <vListInsert+0x2e>
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	60fb      	str	r3, [r7, #12]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	429a      	cmp	r2, r3
 8009194:	d2f6      	bcs.n	8009184 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	685a      	ldr	r2, [r3, #4]
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	683a      	ldr	r2, [r7, #0]
 80091a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	68fa      	ldr	r2, [r7, #12]
 80091aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	683a      	ldr	r2, [r7, #0]
 80091b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	1c5a      	adds	r2, r3, #1
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	601a      	str	r2, [r3, #0]
}
 80091c2:	bf00      	nop
 80091c4:	3714      	adds	r7, #20
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr

080091ce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80091ce:	b480      	push	{r7}
 80091d0:	b085      	sub	sp, #20
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	691b      	ldr	r3, [r3, #16]
 80091da:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	6892      	ldr	r2, [r2, #8]
 80091e4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	6852      	ldr	r2, [r2, #4]
 80091ee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d103      	bne.n	8009202 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	689a      	ldr	r2, [r3, #8]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	1e5a      	subs	r2, r3, #1
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
}
 8009216:	4618      	mov	r0, r3
 8009218:	3714      	adds	r7, #20
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr
	...

08009224 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d10b      	bne.n	8009250 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800923c:	f383 8811 	msr	BASEPRI, r3
 8009240:	f3bf 8f6f 	isb	sy
 8009244:	f3bf 8f4f 	dsb	sy
 8009248:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800924a:	bf00      	nop
 800924c:	bf00      	nop
 800924e:	e7fd      	b.n	800924c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009250:	f001 fba2 	bl	800a998 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800925c:	68f9      	ldr	r1, [r7, #12]
 800925e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009260:	fb01 f303 	mul.w	r3, r1, r3
 8009264:	441a      	add	r2, r3
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009280:	3b01      	subs	r3, #1
 8009282:	68f9      	ldr	r1, [r7, #12]
 8009284:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009286:	fb01 f303 	mul.w	r3, r1, r3
 800928a:	441a      	add	r2, r3
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	22ff      	movs	r2, #255	@ 0xff
 8009294:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	22ff      	movs	r2, #255	@ 0xff
 800929c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d114      	bne.n	80092d0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	691b      	ldr	r3, [r3, #16]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d01a      	beq.n	80092e4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	3310      	adds	r3, #16
 80092b2:	4618      	mov	r0, r3
 80092b4:	f000 feda 	bl	800a06c <xTaskRemoveFromEventList>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d012      	beq.n	80092e4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80092be:	4b0d      	ldr	r3, [pc, #52]	@ (80092f4 <xQueueGenericReset+0xd0>)
 80092c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092c4:	601a      	str	r2, [r3, #0]
 80092c6:	f3bf 8f4f 	dsb	sy
 80092ca:	f3bf 8f6f 	isb	sy
 80092ce:	e009      	b.n	80092e4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	3310      	adds	r3, #16
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7ff fef0 	bl	80090ba <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	3324      	adds	r3, #36	@ 0x24
 80092de:	4618      	mov	r0, r3
 80092e0:	f7ff feeb 	bl	80090ba <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80092e4:	f001 fb8a 	bl	800a9fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80092e8:	2301      	movs	r3, #1
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	e000ed04 	.word	0xe000ed04

080092f8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b08a      	sub	sp, #40	@ 0x28
 80092fc:	af02      	add	r7, sp, #8
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	4613      	mov	r3, r2
 8009304:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d10b      	bne.n	8009324 <xQueueGenericCreate+0x2c>
	__asm volatile
 800930c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009310:	f383 8811 	msr	BASEPRI, r3
 8009314:	f3bf 8f6f 	isb	sy
 8009318:	f3bf 8f4f 	dsb	sy
 800931c:	613b      	str	r3, [r7, #16]
}
 800931e:	bf00      	nop
 8009320:	bf00      	nop
 8009322:	e7fd      	b.n	8009320 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	68ba      	ldr	r2, [r7, #8]
 8009328:	fb02 f303 	mul.w	r3, r2, r3
 800932c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	3348      	adds	r3, #72	@ 0x48
 8009332:	4618      	mov	r0, r3
 8009334:	f001 fc52 	bl	800abdc <pvPortMalloc>
 8009338:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d011      	beq.n	8009364 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	3348      	adds	r3, #72	@ 0x48
 8009348:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	2200      	movs	r2, #0
 800934e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009352:	79fa      	ldrb	r2, [r7, #7]
 8009354:	69bb      	ldr	r3, [r7, #24]
 8009356:	9300      	str	r3, [sp, #0]
 8009358:	4613      	mov	r3, r2
 800935a:	697a      	ldr	r2, [r7, #20]
 800935c:	68b9      	ldr	r1, [r7, #8]
 800935e:	68f8      	ldr	r0, [r7, #12]
 8009360:	f000 f805 	bl	800936e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009364:	69bb      	ldr	r3, [r7, #24]
	}
 8009366:	4618      	mov	r0, r3
 8009368:	3720      	adds	r7, #32
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b084      	sub	sp, #16
 8009372:	af00      	add	r7, sp, #0
 8009374:	60f8      	str	r0, [r7, #12]
 8009376:	60b9      	str	r1, [r7, #8]
 8009378:	607a      	str	r2, [r7, #4]
 800937a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d103      	bne.n	800938a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	69ba      	ldr	r2, [r7, #24]
 8009386:	601a      	str	r2, [r3, #0]
 8009388:	e002      	b.n	8009390 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800938a:	69bb      	ldr	r3, [r7, #24]
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	68fa      	ldr	r2, [r7, #12]
 8009394:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	68ba      	ldr	r2, [r7, #8]
 800939a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800939c:	2101      	movs	r1, #1
 800939e:	69b8      	ldr	r0, [r7, #24]
 80093a0:	f7ff ff40 	bl	8009224 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80093a4:	bf00      	nop
 80093a6:	3710      	adds	r7, #16
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b08e      	sub	sp, #56	@ 0x38
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80093ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10b      	bne.n	80093d8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80093c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093c4:	f383 8811 	msr	BASEPRI, r3
 80093c8:	f3bf 8f6f 	isb	sy
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	623b      	str	r3, [r7, #32]
}
 80093d2:	bf00      	nop
 80093d4:	bf00      	nop
 80093d6:	e7fd      	b.n	80093d4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80093d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d00b      	beq.n	80093f8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80093e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e4:	f383 8811 	msr	BASEPRI, r3
 80093e8:	f3bf 8f6f 	isb	sy
 80093ec:	f3bf 8f4f 	dsb	sy
 80093f0:	61fb      	str	r3, [r7, #28]
}
 80093f2:	bf00      	nop
 80093f4:	bf00      	nop
 80093f6:	e7fd      	b.n	80093f4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80093f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d103      	bne.n	8009408 <xQueueGiveFromISR+0x5c>
 8009400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d101      	bne.n	800940c <xQueueGiveFromISR+0x60>
 8009408:	2301      	movs	r3, #1
 800940a:	e000      	b.n	800940e <xQueueGiveFromISR+0x62>
 800940c:	2300      	movs	r3, #0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d10b      	bne.n	800942a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8009412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009416:	f383 8811 	msr	BASEPRI, r3
 800941a:	f3bf 8f6f 	isb	sy
 800941e:	f3bf 8f4f 	dsb	sy
 8009422:	61bb      	str	r3, [r7, #24]
}
 8009424:	bf00      	nop
 8009426:	bf00      	nop
 8009428:	e7fd      	b.n	8009426 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800942a:	f001 fb95 	bl	800ab58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800942e:	f3ef 8211 	mrs	r2, BASEPRI
 8009432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009436:	f383 8811 	msr	BASEPRI, r3
 800943a:	f3bf 8f6f 	isb	sy
 800943e:	f3bf 8f4f 	dsb	sy
 8009442:	617a      	str	r2, [r7, #20]
 8009444:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009446:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009448:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800944a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800944c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800944e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009454:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009456:	429a      	cmp	r2, r3
 8009458:	d22b      	bcs.n	80094b2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800945a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800945c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009460:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009466:	1c5a      	adds	r2, r3, #1
 8009468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800946a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800946c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009470:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009474:	d112      	bne.n	800949c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800947a:	2b00      	cmp	r3, #0
 800947c:	d016      	beq.n	80094ac <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800947e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009480:	3324      	adds	r3, #36	@ 0x24
 8009482:	4618      	mov	r0, r3
 8009484:	f000 fdf2 	bl	800a06c <xTaskRemoveFromEventList>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00e      	beq.n	80094ac <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d00b      	beq.n	80094ac <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	2201      	movs	r2, #1
 8009498:	601a      	str	r2, [r3, #0]
 800949a:	e007      	b.n	80094ac <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800949c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80094a0:	3301      	adds	r3, #1
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	b25a      	sxtb	r2, r3
 80094a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80094ac:	2301      	movs	r3, #1
 80094ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80094b0:	e001      	b.n	80094b6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80094b2:	2300      	movs	r3, #0
 80094b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80094b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094b8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80094c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80094c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3738      	adds	r7, #56	@ 0x38
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b08e      	sub	sp, #56	@ 0x38
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80094d6:	2300      	movs	r3, #0
 80094d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80094de:	2300      	movs	r3, #0
 80094e0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80094e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d10b      	bne.n	8009500 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80094e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ec:	f383 8811 	msr	BASEPRI, r3
 80094f0:	f3bf 8f6f 	isb	sy
 80094f4:	f3bf 8f4f 	dsb	sy
 80094f8:	623b      	str	r3, [r7, #32]
}
 80094fa:	bf00      	nop
 80094fc:	bf00      	nop
 80094fe:	e7fd      	b.n	80094fc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009504:	2b00      	cmp	r3, #0
 8009506:	d00b      	beq.n	8009520 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8009508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800950c:	f383 8811 	msr	BASEPRI, r3
 8009510:	f3bf 8f6f 	isb	sy
 8009514:	f3bf 8f4f 	dsb	sy
 8009518:	61fb      	str	r3, [r7, #28]
}
 800951a:	bf00      	nop
 800951c:	bf00      	nop
 800951e:	e7fd      	b.n	800951c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009520:	f000 ff6a 	bl	800a3f8 <xTaskGetSchedulerState>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d102      	bne.n	8009530 <xQueueSemaphoreTake+0x64>
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d101      	bne.n	8009534 <xQueueSemaphoreTake+0x68>
 8009530:	2301      	movs	r3, #1
 8009532:	e000      	b.n	8009536 <xQueueSemaphoreTake+0x6a>
 8009534:	2300      	movs	r3, #0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d10b      	bne.n	8009552 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800953a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800953e:	f383 8811 	msr	BASEPRI, r3
 8009542:	f3bf 8f6f 	isb	sy
 8009546:	f3bf 8f4f 	dsb	sy
 800954a:	61bb      	str	r3, [r7, #24]
}
 800954c:	bf00      	nop
 800954e:	bf00      	nop
 8009550:	e7fd      	b.n	800954e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009552:	f001 fa21 	bl	800a998 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800955a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800955c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800955e:	2b00      	cmp	r3, #0
 8009560:	d024      	beq.n	80095ac <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009564:	1e5a      	subs	r2, r3, #1
 8009566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009568:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800956a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d104      	bne.n	800957c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009572:	f001 f865 	bl	800a640 <pvTaskIncrementMutexHeldCount>
 8009576:	4602      	mov	r2, r0
 8009578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800957a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800957c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800957e:	691b      	ldr	r3, [r3, #16]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d00f      	beq.n	80095a4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009586:	3310      	adds	r3, #16
 8009588:	4618      	mov	r0, r3
 800958a:	f000 fd6f 	bl	800a06c <xTaskRemoveFromEventList>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d007      	beq.n	80095a4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009594:	4b54      	ldr	r3, [pc, #336]	@ (80096e8 <xQueueSemaphoreTake+0x21c>)
 8009596:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800959a:	601a      	str	r2, [r3, #0]
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80095a4:	f001 fa2a 	bl	800a9fc <vPortExitCritical>
				return pdPASS;
 80095a8:	2301      	movs	r3, #1
 80095aa:	e098      	b.n	80096de <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d112      	bne.n	80095d8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80095b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d00b      	beq.n	80095d0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80095b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095bc:	f383 8811 	msr	BASEPRI, r3
 80095c0:	f3bf 8f6f 	isb	sy
 80095c4:	f3bf 8f4f 	dsb	sy
 80095c8:	617b      	str	r3, [r7, #20]
}
 80095ca:	bf00      	nop
 80095cc:	bf00      	nop
 80095ce:	e7fd      	b.n	80095cc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80095d0:	f001 fa14 	bl	800a9fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80095d4:	2300      	movs	r3, #0
 80095d6:	e082      	b.n	80096de <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80095d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d106      	bne.n	80095ec <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095de:	f107 030c 	add.w	r3, r7, #12
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 fda6 	bl	800a134 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095e8:	2301      	movs	r3, #1
 80095ea:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095ec:	f001 fa06 	bl	800a9fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095f0:	f000 fb4c 	bl	8009c8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095f4:	f001 f9d0 	bl	800a998 <vPortEnterCritical>
 80095f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80095fe:	b25b      	sxtb	r3, r3
 8009600:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009604:	d103      	bne.n	800960e <xQueueSemaphoreTake+0x142>
 8009606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009608:	2200      	movs	r2, #0
 800960a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800960e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009610:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009614:	b25b      	sxtb	r3, r3
 8009616:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800961a:	d103      	bne.n	8009624 <xQueueSemaphoreTake+0x158>
 800961c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800961e:	2200      	movs	r2, #0
 8009620:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009624:	f001 f9ea 	bl	800a9fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009628:	463a      	mov	r2, r7
 800962a:	f107 030c 	add.w	r3, r7, #12
 800962e:	4611      	mov	r1, r2
 8009630:	4618      	mov	r0, r3
 8009632:	f000 fd95 	bl	800a160 <xTaskCheckForTimeOut>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d132      	bne.n	80096a2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800963c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800963e:	f000 f8bf 	bl	80097c0 <prvIsQueueEmpty>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d026      	beq.n	8009696 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d109      	bne.n	8009664 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009650:	f001 f9a2 	bl	800a998 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	4618      	mov	r0, r3
 800965a:	f000 feeb 	bl	800a434 <xTaskPriorityInherit>
 800965e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009660:	f001 f9cc 	bl	800a9fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009666:	3324      	adds	r3, #36	@ 0x24
 8009668:	683a      	ldr	r2, [r7, #0]
 800966a:	4611      	mov	r1, r2
 800966c:	4618      	mov	r0, r3
 800966e:	f000 fcd7 	bl	800a020 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009672:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009674:	f000 f852 	bl	800971c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009678:	f000 fb16 	bl	8009ca8 <xTaskResumeAll>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	f47f af67 	bne.w	8009552 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009684:	4b18      	ldr	r3, [pc, #96]	@ (80096e8 <xQueueSemaphoreTake+0x21c>)
 8009686:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800968a:	601a      	str	r2, [r3, #0]
 800968c:	f3bf 8f4f 	dsb	sy
 8009690:	f3bf 8f6f 	isb	sy
 8009694:	e75d      	b.n	8009552 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009696:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009698:	f000 f840 	bl	800971c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800969c:	f000 fb04 	bl	8009ca8 <xTaskResumeAll>
 80096a0:	e757      	b.n	8009552 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80096a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80096a4:	f000 f83a 	bl	800971c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096a8:	f000 fafe 	bl	8009ca8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80096ae:	f000 f887 	bl	80097c0 <prvIsQueueEmpty>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f43f af4c 	beq.w	8009552 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80096ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d00d      	beq.n	80096dc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80096c0:	f001 f96a 	bl	800a998 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80096c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80096c6:	f000 f811 	bl	80096ec <prvGetDisinheritPriorityAfterTimeout>
 80096ca:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80096cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80096d2:	4618      	mov	r0, r3
 80096d4:	f000 ff24 	bl	800a520 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80096d8:	f001 f990 	bl	800a9fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80096dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3738      	adds	r7, #56	@ 0x38
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	e000ed04 	.word	0xe000ed04

080096ec <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80096ec:	b480      	push	{r7}
 80096ee:	b085      	sub	sp, #20
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d006      	beq.n	800970a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f1c3 0307 	rsb	r3, r3, #7
 8009706:	60fb      	str	r3, [r7, #12]
 8009708:	e001      	b.n	800970e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800970a:	2300      	movs	r3, #0
 800970c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800970e:	68fb      	ldr	r3, [r7, #12]
	}
 8009710:	4618      	mov	r0, r3
 8009712:	3714      	adds	r7, #20
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009724:	f001 f938 	bl	800a998 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800972e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009730:	e011      	b.n	8009756 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009736:	2b00      	cmp	r3, #0
 8009738:	d012      	beq.n	8009760 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	3324      	adds	r3, #36	@ 0x24
 800973e:	4618      	mov	r0, r3
 8009740:	f000 fc94 	bl	800a06c <xTaskRemoveFromEventList>
 8009744:	4603      	mov	r3, r0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d001      	beq.n	800974e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800974a:	f000 fd6d 	bl	800a228 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800974e:	7bfb      	ldrb	r3, [r7, #15]
 8009750:	3b01      	subs	r3, #1
 8009752:	b2db      	uxtb	r3, r3
 8009754:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800975a:	2b00      	cmp	r3, #0
 800975c:	dce9      	bgt.n	8009732 <prvUnlockQueue+0x16>
 800975e:	e000      	b.n	8009762 <prvUnlockQueue+0x46>
					break;
 8009760:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	22ff      	movs	r2, #255	@ 0xff
 8009766:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800976a:	f001 f947 	bl	800a9fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800976e:	f001 f913 	bl	800a998 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009778:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800977a:	e011      	b.n	80097a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d012      	beq.n	80097aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	3310      	adds	r3, #16
 8009788:	4618      	mov	r0, r3
 800978a:	f000 fc6f 	bl	800a06c <xTaskRemoveFromEventList>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d001      	beq.n	8009798 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009794:	f000 fd48 	bl	800a228 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009798:	7bbb      	ldrb	r3, [r7, #14]
 800979a:	3b01      	subs	r3, #1
 800979c:	b2db      	uxtb	r3, r3
 800979e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80097a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	dce9      	bgt.n	800977c <prvUnlockQueue+0x60>
 80097a8:	e000      	b.n	80097ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80097aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	22ff      	movs	r2, #255	@ 0xff
 80097b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80097b4:	f001 f922 	bl	800a9fc <vPortExitCritical>
}
 80097b8:	bf00      	nop
 80097ba:	3710      	adds	r7, #16
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80097c8:	f001 f8e6 	bl	800a998 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d102      	bne.n	80097da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80097d4:	2301      	movs	r3, #1
 80097d6:	60fb      	str	r3, [r7, #12]
 80097d8:	e001      	b.n	80097de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80097da:	2300      	movs	r3, #0
 80097dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80097de:	f001 f90d 	bl	800a9fc <vPortExitCritical>

	return xReturn;
 80097e2:	68fb      	ldr	r3, [r7, #12]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3710      	adds	r7, #16
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b08e      	sub	sp, #56	@ 0x38
 80097f0:	af04      	add	r7, sp, #16
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	607a      	str	r2, [r7, #4]
 80097f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80097fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d10b      	bne.n	8009818 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009804:	f383 8811 	msr	BASEPRI, r3
 8009808:	f3bf 8f6f 	isb	sy
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	623b      	str	r3, [r7, #32]
}
 8009812:	bf00      	nop
 8009814:	bf00      	nop
 8009816:	e7fd      	b.n	8009814 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800981a:	2b00      	cmp	r3, #0
 800981c:	d10b      	bne.n	8009836 <xTaskCreateStatic+0x4a>
	__asm volatile
 800981e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009822:	f383 8811 	msr	BASEPRI, r3
 8009826:	f3bf 8f6f 	isb	sy
 800982a:	f3bf 8f4f 	dsb	sy
 800982e:	61fb      	str	r3, [r7, #28]
}
 8009830:	bf00      	nop
 8009832:	bf00      	nop
 8009834:	e7fd      	b.n	8009832 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009836:	23a0      	movs	r3, #160	@ 0xa0
 8009838:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	2ba0      	cmp	r3, #160	@ 0xa0
 800983e:	d00b      	beq.n	8009858 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009844:	f383 8811 	msr	BASEPRI, r3
 8009848:	f3bf 8f6f 	isb	sy
 800984c:	f3bf 8f4f 	dsb	sy
 8009850:	61bb      	str	r3, [r7, #24]
}
 8009852:	bf00      	nop
 8009854:	bf00      	nop
 8009856:	e7fd      	b.n	8009854 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009858:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800985a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800985c:	2b00      	cmp	r3, #0
 800985e:	d01e      	beq.n	800989e <xTaskCreateStatic+0xb2>
 8009860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009862:	2b00      	cmp	r3, #0
 8009864:	d01b      	beq.n	800989e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009868:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800986a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800986c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800986e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009872:	2202      	movs	r2, #2
 8009874:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009878:	2300      	movs	r3, #0
 800987a:	9303      	str	r3, [sp, #12]
 800987c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800987e:	9302      	str	r3, [sp, #8]
 8009880:	f107 0314 	add.w	r3, r7, #20
 8009884:	9301      	str	r3, [sp, #4]
 8009886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009888:	9300      	str	r3, [sp, #0]
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	68b9      	ldr	r1, [r7, #8]
 8009890:	68f8      	ldr	r0, [r7, #12]
 8009892:	f000 f851 	bl	8009938 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009896:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009898:	f000 f8ee 	bl	8009a78 <prvAddNewTaskToReadyList>
 800989c:	e001      	b.n	80098a2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800989e:	2300      	movs	r3, #0
 80098a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80098a2:	697b      	ldr	r3, [r7, #20]
	}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3728      	adds	r7, #40	@ 0x28
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b08c      	sub	sp, #48	@ 0x30
 80098b0:	af04      	add	r7, sp, #16
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	603b      	str	r3, [r7, #0]
 80098b8:	4613      	mov	r3, r2
 80098ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80098bc:	88fb      	ldrh	r3, [r7, #6]
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	4618      	mov	r0, r3
 80098c2:	f001 f98b 	bl	800abdc <pvPortMalloc>
 80098c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00e      	beq.n	80098ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80098ce:	20a0      	movs	r0, #160	@ 0xa0
 80098d0:	f001 f984 	bl	800abdc <pvPortMalloc>
 80098d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80098d6:	69fb      	ldr	r3, [r7, #28]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d003      	beq.n	80098e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80098dc:	69fb      	ldr	r3, [r7, #28]
 80098de:	697a      	ldr	r2, [r7, #20]
 80098e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80098e2:	e005      	b.n	80098f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80098e4:	6978      	ldr	r0, [r7, #20]
 80098e6:	f001 fa47 	bl	800ad78 <vPortFree>
 80098ea:	e001      	b.n	80098f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80098ec:	2300      	movs	r3, #0
 80098ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80098f0:	69fb      	ldr	r3, [r7, #28]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d017      	beq.n	8009926 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80098f6:	69fb      	ldr	r3, [r7, #28]
 80098f8:	2200      	movs	r2, #0
 80098fa:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80098fe:	88fa      	ldrh	r2, [r7, #6]
 8009900:	2300      	movs	r3, #0
 8009902:	9303      	str	r3, [sp, #12]
 8009904:	69fb      	ldr	r3, [r7, #28]
 8009906:	9302      	str	r3, [sp, #8]
 8009908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800990a:	9301      	str	r3, [sp, #4]
 800990c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800990e:	9300      	str	r3, [sp, #0]
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	68b9      	ldr	r1, [r7, #8]
 8009914:	68f8      	ldr	r0, [r7, #12]
 8009916:	f000 f80f 	bl	8009938 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800991a:	69f8      	ldr	r0, [r7, #28]
 800991c:	f000 f8ac 	bl	8009a78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009920:	2301      	movs	r3, #1
 8009922:	61bb      	str	r3, [r7, #24]
 8009924:	e002      	b.n	800992c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009926:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800992a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800992c:	69bb      	ldr	r3, [r7, #24]
	}
 800992e:	4618      	mov	r0, r3
 8009930:	3720      	adds	r7, #32
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
	...

08009938 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b088      	sub	sp, #32
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	607a      	str	r2, [r7, #4]
 8009944:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009948:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009950:	3b01      	subs	r3, #1
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	4413      	add	r3, r2
 8009956:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009958:	69bb      	ldr	r3, [r7, #24]
 800995a:	f023 0307 	bic.w	r3, r3, #7
 800995e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009960:	69bb      	ldr	r3, [r7, #24]
 8009962:	f003 0307 	and.w	r3, r3, #7
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00b      	beq.n	8009982 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800996a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800996e:	f383 8811 	msr	BASEPRI, r3
 8009972:	f3bf 8f6f 	isb	sy
 8009976:	f3bf 8f4f 	dsb	sy
 800997a:	617b      	str	r3, [r7, #20]
}
 800997c:	bf00      	nop
 800997e:	bf00      	nop
 8009980:	e7fd      	b.n	800997e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d01f      	beq.n	80099c8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009988:	2300      	movs	r3, #0
 800998a:	61fb      	str	r3, [r7, #28]
 800998c:	e012      	b.n	80099b4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800998e:	68ba      	ldr	r2, [r7, #8]
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	4413      	add	r3, r2
 8009994:	7819      	ldrb	r1, [r3, #0]
 8009996:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009998:	69fb      	ldr	r3, [r7, #28]
 800999a:	4413      	add	r3, r2
 800999c:	3334      	adds	r3, #52	@ 0x34
 800999e:	460a      	mov	r2, r1
 80099a0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80099a2:	68ba      	ldr	r2, [r7, #8]
 80099a4:	69fb      	ldr	r3, [r7, #28]
 80099a6:	4413      	add	r3, r2
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d006      	beq.n	80099bc <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80099ae:	69fb      	ldr	r3, [r7, #28]
 80099b0:	3301      	adds	r3, #1
 80099b2:	61fb      	str	r3, [r7, #28]
 80099b4:	69fb      	ldr	r3, [r7, #28]
 80099b6:	2b0f      	cmp	r3, #15
 80099b8:	d9e9      	bls.n	800998e <prvInitialiseNewTask+0x56>
 80099ba:	e000      	b.n	80099be <prvInitialiseNewTask+0x86>
			{
				break;
 80099bc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80099be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c0:	2200      	movs	r2, #0
 80099c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80099c6:	e003      	b.n	80099d0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80099c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ca:	2200      	movs	r2, #0
 80099cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80099d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d2:	2b06      	cmp	r3, #6
 80099d4:	d901      	bls.n	80099da <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80099d6:	2306      	movs	r3, #6
 80099d8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80099da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099de:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80099e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099e4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80099e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e8:	2200      	movs	r2, #0
 80099ea:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80099ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ee:	3304      	adds	r3, #4
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7ff fb82 	bl	80090fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80099f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f8:	3318      	adds	r3, #24
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7ff fb7d 	bl	80090fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a04:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a08:	f1c3 0207 	rsb	r2, r3, #7
 8009a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a0e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a14:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a20:	2200      	movs	r2, #0
 8009a22:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a28:	334c      	adds	r3, #76	@ 0x4c
 8009a2a:	224c      	movs	r2, #76	@ 0x4c
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f001 fd88 	bl	800b544 <memset>
 8009a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a36:	4a0d      	ldr	r2, [pc, #52]	@ (8009a6c <prvInitialiseNewTask+0x134>)
 8009a38:	651a      	str	r2, [r3, #80]	@ 0x50
 8009a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a3c:	4a0c      	ldr	r2, [pc, #48]	@ (8009a70 <prvInitialiseNewTask+0x138>)
 8009a3e:	655a      	str	r2, [r3, #84]	@ 0x54
 8009a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a42:	4a0c      	ldr	r2, [pc, #48]	@ (8009a74 <prvInitialiseNewTask+0x13c>)
 8009a44:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009a46:	683a      	ldr	r2, [r7, #0]
 8009a48:	68f9      	ldr	r1, [r7, #12]
 8009a4a:	69b8      	ldr	r0, [r7, #24]
 8009a4c:	f000 fe72 	bl	800a734 <pxPortInitialiseStack>
 8009a50:	4602      	mov	r2, r0
 8009a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a54:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d002      	beq.n	8009a62 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a62:	bf00      	nop
 8009a64:	3720      	adds	r7, #32
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	20005f4c 	.word	0x20005f4c
 8009a70:	20005fb4 	.word	0x20005fb4
 8009a74:	2000601c 	.word	0x2000601c

08009a78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a80:	f000 ff8a 	bl	800a998 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a84:	4b2a      	ldr	r3, [pc, #168]	@ (8009b30 <prvAddNewTaskToReadyList+0xb8>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	3301      	adds	r3, #1
 8009a8a:	4a29      	ldr	r2, [pc, #164]	@ (8009b30 <prvAddNewTaskToReadyList+0xb8>)
 8009a8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a8e:	4b29      	ldr	r3, [pc, #164]	@ (8009b34 <prvAddNewTaskToReadyList+0xbc>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d109      	bne.n	8009aaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a96:	4a27      	ldr	r2, [pc, #156]	@ (8009b34 <prvAddNewTaskToReadyList+0xbc>)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a9c:	4b24      	ldr	r3, [pc, #144]	@ (8009b30 <prvAddNewTaskToReadyList+0xb8>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d110      	bne.n	8009ac6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009aa4:	f000 fbe4 	bl	800a270 <prvInitialiseTaskLists>
 8009aa8:	e00d      	b.n	8009ac6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009aaa:	4b23      	ldr	r3, [pc, #140]	@ (8009b38 <prvAddNewTaskToReadyList+0xc0>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d109      	bne.n	8009ac6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009ab2:	4b20      	ldr	r3, [pc, #128]	@ (8009b34 <prvAddNewTaskToReadyList+0xbc>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d802      	bhi.n	8009ac6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009ac0:	4a1c      	ldr	r2, [pc, #112]	@ (8009b34 <prvAddNewTaskToReadyList+0xbc>)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009ac6:	4b1d      	ldr	r3, [pc, #116]	@ (8009b3c <prvAddNewTaskToReadyList+0xc4>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	3301      	adds	r3, #1
 8009acc:	4a1b      	ldr	r2, [pc, #108]	@ (8009b3c <prvAddNewTaskToReadyList+0xc4>)
 8009ace:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	409a      	lsls	r2, r3
 8009ad8:	4b19      	ldr	r3, [pc, #100]	@ (8009b40 <prvAddNewTaskToReadyList+0xc8>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4313      	orrs	r3, r2
 8009ade:	4a18      	ldr	r2, [pc, #96]	@ (8009b40 <prvAddNewTaskToReadyList+0xc8>)
 8009ae0:	6013      	str	r3, [r2, #0]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	4413      	add	r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	4a15      	ldr	r2, [pc, #84]	@ (8009b44 <prvAddNewTaskToReadyList+0xcc>)
 8009af0:	441a      	add	r2, r3
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	3304      	adds	r3, #4
 8009af6:	4619      	mov	r1, r3
 8009af8:	4610      	mov	r0, r2
 8009afa:	f7ff fb0b 	bl	8009114 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009afe:	f000 ff7d 	bl	800a9fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009b02:	4b0d      	ldr	r3, [pc, #52]	@ (8009b38 <prvAddNewTaskToReadyList+0xc0>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00e      	beq.n	8009b28 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8009b34 <prvAddNewTaskToReadyList+0xbc>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d207      	bcs.n	8009b28 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009b18:	4b0b      	ldr	r3, [pc, #44]	@ (8009b48 <prvAddNewTaskToReadyList+0xd0>)
 8009b1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b1e:	601a      	str	r2, [r3, #0]
 8009b20:	f3bf 8f4f 	dsb	sy
 8009b24:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b28:	bf00      	nop
 8009b2a:	3708      	adds	r7, #8
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	200010d8 	.word	0x200010d8
 8009b34:	20000fd8 	.word	0x20000fd8
 8009b38:	200010e4 	.word	0x200010e4
 8009b3c:	200010f4 	.word	0x200010f4
 8009b40:	200010e0 	.word	0x200010e0
 8009b44:	20000fdc 	.word	0x20000fdc
 8009b48:	e000ed04 	.word	0xe000ed04

08009b4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009b54:	2300      	movs	r3, #0
 8009b56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d018      	beq.n	8009b90 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009b5e:	4b14      	ldr	r3, [pc, #80]	@ (8009bb0 <vTaskDelay+0x64>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00b      	beq.n	8009b7e <vTaskDelay+0x32>
	__asm volatile
 8009b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b6a:	f383 8811 	msr	BASEPRI, r3
 8009b6e:	f3bf 8f6f 	isb	sy
 8009b72:	f3bf 8f4f 	dsb	sy
 8009b76:	60bb      	str	r3, [r7, #8]
}
 8009b78:	bf00      	nop
 8009b7a:	bf00      	nop
 8009b7c:	e7fd      	b.n	8009b7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009b7e:	f000 f885 	bl	8009c8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b82:	2100      	movs	r1, #0
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fd6f 	bl	800a668 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b8a:	f000 f88d 	bl	8009ca8 <xTaskResumeAll>
 8009b8e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d107      	bne.n	8009ba6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009b96:	4b07      	ldr	r3, [pc, #28]	@ (8009bb4 <vTaskDelay+0x68>)
 8009b98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b9c:	601a      	str	r2, [r3, #0]
 8009b9e:	f3bf 8f4f 	dsb	sy
 8009ba2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ba6:	bf00      	nop
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	20001100 	.word	0x20001100
 8009bb4:	e000ed04 	.word	0xe000ed04

08009bb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b08a      	sub	sp, #40	@ 0x28
 8009bbc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009bc6:	463a      	mov	r2, r7
 8009bc8:	1d39      	adds	r1, r7, #4
 8009bca:	f107 0308 	add.w	r3, r7, #8
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7f6 fcec 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009bd4:	6839      	ldr	r1, [r7, #0]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	68ba      	ldr	r2, [r7, #8]
 8009bda:	9202      	str	r2, [sp, #8]
 8009bdc:	9301      	str	r3, [sp, #4]
 8009bde:	2300      	movs	r3, #0
 8009be0:	9300      	str	r3, [sp, #0]
 8009be2:	2300      	movs	r3, #0
 8009be4:	460a      	mov	r2, r1
 8009be6:	4921      	ldr	r1, [pc, #132]	@ (8009c6c <vTaskStartScheduler+0xb4>)
 8009be8:	4821      	ldr	r0, [pc, #132]	@ (8009c70 <vTaskStartScheduler+0xb8>)
 8009bea:	f7ff fdff 	bl	80097ec <xTaskCreateStatic>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	4a20      	ldr	r2, [pc, #128]	@ (8009c74 <vTaskStartScheduler+0xbc>)
 8009bf2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009bf4:	4b1f      	ldr	r3, [pc, #124]	@ (8009c74 <vTaskStartScheduler+0xbc>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d002      	beq.n	8009c02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	617b      	str	r3, [r7, #20]
 8009c00:	e001      	b.n	8009c06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009c02:	2300      	movs	r3, #0
 8009c04:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d11b      	bne.n	8009c44 <vTaskStartScheduler+0x8c>
	__asm volatile
 8009c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c10:	f383 8811 	msr	BASEPRI, r3
 8009c14:	f3bf 8f6f 	isb	sy
 8009c18:	f3bf 8f4f 	dsb	sy
 8009c1c:	613b      	str	r3, [r7, #16]
}
 8009c1e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009c20:	4b15      	ldr	r3, [pc, #84]	@ (8009c78 <vTaskStartScheduler+0xc0>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	334c      	adds	r3, #76	@ 0x4c
 8009c26:	4a15      	ldr	r2, [pc, #84]	@ (8009c7c <vTaskStartScheduler+0xc4>)
 8009c28:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009c2a:	4b15      	ldr	r3, [pc, #84]	@ (8009c80 <vTaskStartScheduler+0xc8>)
 8009c2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009c30:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009c32:	4b14      	ldr	r3, [pc, #80]	@ (8009c84 <vTaskStartScheduler+0xcc>)
 8009c34:	2201      	movs	r2, #1
 8009c36:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009c38:	4b13      	ldr	r3, [pc, #76]	@ (8009c88 <vTaskStartScheduler+0xd0>)
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009c3e:	f000 fe07 	bl	800a850 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009c42:	e00f      	b.n	8009c64 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c4a:	d10b      	bne.n	8009c64 <vTaskStartScheduler+0xac>
	__asm volatile
 8009c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c50:	f383 8811 	msr	BASEPRI, r3
 8009c54:	f3bf 8f6f 	isb	sy
 8009c58:	f3bf 8f4f 	dsb	sy
 8009c5c:	60fb      	str	r3, [r7, #12]
}
 8009c5e:	bf00      	nop
 8009c60:	bf00      	nop
 8009c62:	e7fd      	b.n	8009c60 <vTaskStartScheduler+0xa8>
}
 8009c64:	bf00      	nop
 8009c66:	3718      	adds	r7, #24
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	0800c8d4 	.word	0x0800c8d4
 8009c70:	0800a241 	.word	0x0800a241
 8009c74:	200010fc 	.word	0x200010fc
 8009c78:	20000fd8 	.word	0x20000fd8
 8009c7c:	20000024 	.word	0x20000024
 8009c80:	200010f8 	.word	0x200010f8
 8009c84:	200010e4 	.word	0x200010e4
 8009c88:	200010dc 	.word	0x200010dc

08009c8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009c90:	4b04      	ldr	r3, [pc, #16]	@ (8009ca4 <vTaskSuspendAll+0x18>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	3301      	adds	r3, #1
 8009c96:	4a03      	ldr	r2, [pc, #12]	@ (8009ca4 <vTaskSuspendAll+0x18>)
 8009c98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009c9a:	bf00      	nop
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr
 8009ca4:	20001100 	.word	0x20001100

08009ca8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009cb6:	4b42      	ldr	r3, [pc, #264]	@ (8009dc0 <xTaskResumeAll+0x118>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d10b      	bne.n	8009cd6 <xTaskResumeAll+0x2e>
	__asm volatile
 8009cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc2:	f383 8811 	msr	BASEPRI, r3
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	603b      	str	r3, [r7, #0]
}
 8009cd0:	bf00      	nop
 8009cd2:	bf00      	nop
 8009cd4:	e7fd      	b.n	8009cd2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009cd6:	f000 fe5f 	bl	800a998 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009cda:	4b39      	ldr	r3, [pc, #228]	@ (8009dc0 <xTaskResumeAll+0x118>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	4a37      	ldr	r2, [pc, #220]	@ (8009dc0 <xTaskResumeAll+0x118>)
 8009ce2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ce4:	4b36      	ldr	r3, [pc, #216]	@ (8009dc0 <xTaskResumeAll+0x118>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d161      	bne.n	8009db0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009cec:	4b35      	ldr	r3, [pc, #212]	@ (8009dc4 <xTaskResumeAll+0x11c>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d05d      	beq.n	8009db0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cf4:	e02e      	b.n	8009d54 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cf6:	4b34      	ldr	r3, [pc, #208]	@ (8009dc8 <xTaskResumeAll+0x120>)
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	3318      	adds	r3, #24
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7ff fa63 	bl	80091ce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	3304      	adds	r3, #4
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f7ff fa5e 	bl	80091ce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d16:	2201      	movs	r2, #1
 8009d18:	409a      	lsls	r2, r3
 8009d1a:	4b2c      	ldr	r3, [pc, #176]	@ (8009dcc <xTaskResumeAll+0x124>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	4a2a      	ldr	r2, [pc, #168]	@ (8009dcc <xTaskResumeAll+0x124>)
 8009d22:	6013      	str	r3, [r2, #0]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d28:	4613      	mov	r3, r2
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	4413      	add	r3, r2
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	4a27      	ldr	r2, [pc, #156]	@ (8009dd0 <xTaskResumeAll+0x128>)
 8009d32:	441a      	add	r2, r3
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	3304      	adds	r3, #4
 8009d38:	4619      	mov	r1, r3
 8009d3a:	4610      	mov	r0, r2
 8009d3c:	f7ff f9ea 	bl	8009114 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d44:	4b23      	ldr	r3, [pc, #140]	@ (8009dd4 <xTaskResumeAll+0x12c>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d302      	bcc.n	8009d54 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009d4e:	4b22      	ldr	r3, [pc, #136]	@ (8009dd8 <xTaskResumeAll+0x130>)
 8009d50:	2201      	movs	r2, #1
 8009d52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d54:	4b1c      	ldr	r3, [pc, #112]	@ (8009dc8 <xTaskResumeAll+0x120>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d1cc      	bne.n	8009cf6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d001      	beq.n	8009d66 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d62:	f000 fb29 	bl	800a3b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009d66:	4b1d      	ldr	r3, [pc, #116]	@ (8009ddc <xTaskResumeAll+0x134>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d010      	beq.n	8009d94 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d72:	f000 f837 	bl	8009de4 <xTaskIncrementTick>
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d002      	beq.n	8009d82 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009d7c:	4b16      	ldr	r3, [pc, #88]	@ (8009dd8 <xTaskResumeAll+0x130>)
 8009d7e:	2201      	movs	r2, #1
 8009d80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	3b01      	subs	r3, #1
 8009d86:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d1f1      	bne.n	8009d72 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009d8e:	4b13      	ldr	r3, [pc, #76]	@ (8009ddc <xTaskResumeAll+0x134>)
 8009d90:	2200      	movs	r2, #0
 8009d92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d94:	4b10      	ldr	r3, [pc, #64]	@ (8009dd8 <xTaskResumeAll+0x130>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d009      	beq.n	8009db0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009da0:	4b0f      	ldr	r3, [pc, #60]	@ (8009de0 <xTaskResumeAll+0x138>)
 8009da2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009da6:	601a      	str	r2, [r3, #0]
 8009da8:	f3bf 8f4f 	dsb	sy
 8009dac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009db0:	f000 fe24 	bl	800a9fc <vPortExitCritical>

	return xAlreadyYielded;
 8009db4:	68bb      	ldr	r3, [r7, #8]
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	20001100 	.word	0x20001100
 8009dc4:	200010d8 	.word	0x200010d8
 8009dc8:	20001098 	.word	0x20001098
 8009dcc:	200010e0 	.word	0x200010e0
 8009dd0:	20000fdc 	.word	0x20000fdc
 8009dd4:	20000fd8 	.word	0x20000fd8
 8009dd8:	200010ec 	.word	0x200010ec
 8009ddc:	200010e8 	.word	0x200010e8
 8009de0:	e000ed04 	.word	0xe000ed04

08009de4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b086      	sub	sp, #24
 8009de8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009dea:	2300      	movs	r3, #0
 8009dec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dee:	4b4f      	ldr	r3, [pc, #316]	@ (8009f2c <xTaskIncrementTick+0x148>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f040 808f 	bne.w	8009f16 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009df8:	4b4d      	ldr	r3, [pc, #308]	@ (8009f30 <xTaskIncrementTick+0x14c>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009e00:	4a4b      	ldr	r2, [pc, #300]	@ (8009f30 <xTaskIncrementTick+0x14c>)
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d121      	bne.n	8009e50 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009e0c:	4b49      	ldr	r3, [pc, #292]	@ (8009f34 <xTaskIncrementTick+0x150>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00b      	beq.n	8009e2e <xTaskIncrementTick+0x4a>
	__asm volatile
 8009e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e1a:	f383 8811 	msr	BASEPRI, r3
 8009e1e:	f3bf 8f6f 	isb	sy
 8009e22:	f3bf 8f4f 	dsb	sy
 8009e26:	603b      	str	r3, [r7, #0]
}
 8009e28:	bf00      	nop
 8009e2a:	bf00      	nop
 8009e2c:	e7fd      	b.n	8009e2a <xTaskIncrementTick+0x46>
 8009e2e:	4b41      	ldr	r3, [pc, #260]	@ (8009f34 <xTaskIncrementTick+0x150>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	60fb      	str	r3, [r7, #12]
 8009e34:	4b40      	ldr	r3, [pc, #256]	@ (8009f38 <xTaskIncrementTick+0x154>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a3e      	ldr	r2, [pc, #248]	@ (8009f34 <xTaskIncrementTick+0x150>)
 8009e3a:	6013      	str	r3, [r2, #0]
 8009e3c:	4a3e      	ldr	r2, [pc, #248]	@ (8009f38 <xTaskIncrementTick+0x154>)
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6013      	str	r3, [r2, #0]
 8009e42:	4b3e      	ldr	r3, [pc, #248]	@ (8009f3c <xTaskIncrementTick+0x158>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	3301      	adds	r3, #1
 8009e48:	4a3c      	ldr	r2, [pc, #240]	@ (8009f3c <xTaskIncrementTick+0x158>)
 8009e4a:	6013      	str	r3, [r2, #0]
 8009e4c:	f000 fab4 	bl	800a3b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e50:	4b3b      	ldr	r3, [pc, #236]	@ (8009f40 <xTaskIncrementTick+0x15c>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	693a      	ldr	r2, [r7, #16]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d348      	bcc.n	8009eec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e5a:	4b36      	ldr	r3, [pc, #216]	@ (8009f34 <xTaskIncrementTick+0x150>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d104      	bne.n	8009e6e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e64:	4b36      	ldr	r3, [pc, #216]	@ (8009f40 <xTaskIncrementTick+0x15c>)
 8009e66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009e6a:	601a      	str	r2, [r3, #0]
					break;
 8009e6c:	e03e      	b.n	8009eec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e6e:	4b31      	ldr	r3, [pc, #196]	@ (8009f34 <xTaskIncrementTick+0x150>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e7e:	693a      	ldr	r2, [r7, #16]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d203      	bcs.n	8009e8e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e86:	4a2e      	ldr	r2, [pc, #184]	@ (8009f40 <xTaskIncrementTick+0x15c>)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009e8c:	e02e      	b.n	8009eec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	3304      	adds	r3, #4
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7ff f99b 	bl	80091ce <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d004      	beq.n	8009eaa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	3318      	adds	r3, #24
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7ff f992 	bl	80091ce <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eae:	2201      	movs	r2, #1
 8009eb0:	409a      	lsls	r2, r3
 8009eb2:	4b24      	ldr	r3, [pc, #144]	@ (8009f44 <xTaskIncrementTick+0x160>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	4a22      	ldr	r2, [pc, #136]	@ (8009f44 <xTaskIncrementTick+0x160>)
 8009eba:	6013      	str	r3, [r2, #0]
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ec0:	4613      	mov	r3, r2
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	4413      	add	r3, r2
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4a1f      	ldr	r2, [pc, #124]	@ (8009f48 <xTaskIncrementTick+0x164>)
 8009eca:	441a      	add	r2, r3
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	3304      	adds	r3, #4
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	4610      	mov	r0, r2
 8009ed4:	f7ff f91e 	bl	8009114 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009edc:	4b1b      	ldr	r3, [pc, #108]	@ (8009f4c <xTaskIncrementTick+0x168>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d3b9      	bcc.n	8009e5a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009eea:	e7b6      	b.n	8009e5a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009eec:	4b17      	ldr	r3, [pc, #92]	@ (8009f4c <xTaskIncrementTick+0x168>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ef2:	4915      	ldr	r1, [pc, #84]	@ (8009f48 <xTaskIncrementTick+0x164>)
 8009ef4:	4613      	mov	r3, r2
 8009ef6:	009b      	lsls	r3, r3, #2
 8009ef8:	4413      	add	r3, r2
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	440b      	add	r3, r1
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d901      	bls.n	8009f08 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009f04:	2301      	movs	r3, #1
 8009f06:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009f08:	4b11      	ldr	r3, [pc, #68]	@ (8009f50 <xTaskIncrementTick+0x16c>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d007      	beq.n	8009f20 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009f10:	2301      	movs	r3, #1
 8009f12:	617b      	str	r3, [r7, #20]
 8009f14:	e004      	b.n	8009f20 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009f16:	4b0f      	ldr	r3, [pc, #60]	@ (8009f54 <xTaskIncrementTick+0x170>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8009f54 <xTaskIncrementTick+0x170>)
 8009f1e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009f20:	697b      	ldr	r3, [r7, #20]
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3718      	adds	r7, #24
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	20001100 	.word	0x20001100
 8009f30:	200010dc 	.word	0x200010dc
 8009f34:	20001090 	.word	0x20001090
 8009f38:	20001094 	.word	0x20001094
 8009f3c:	200010f0 	.word	0x200010f0
 8009f40:	200010f8 	.word	0x200010f8
 8009f44:	200010e0 	.word	0x200010e0
 8009f48:	20000fdc 	.word	0x20000fdc
 8009f4c:	20000fd8 	.word	0x20000fd8
 8009f50:	200010ec 	.word	0x200010ec
 8009f54:	200010e8 	.word	0x200010e8

08009f58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b087      	sub	sp, #28
 8009f5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f5e:	4b2a      	ldr	r3, [pc, #168]	@ (800a008 <vTaskSwitchContext+0xb0>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d003      	beq.n	8009f6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f66:	4b29      	ldr	r3, [pc, #164]	@ (800a00c <vTaskSwitchContext+0xb4>)
 8009f68:	2201      	movs	r2, #1
 8009f6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f6c:	e045      	b.n	8009ffa <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8009f6e:	4b27      	ldr	r3, [pc, #156]	@ (800a00c <vTaskSwitchContext+0xb4>)
 8009f70:	2200      	movs	r2, #0
 8009f72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f74:	4b26      	ldr	r3, [pc, #152]	@ (800a010 <vTaskSwitchContext+0xb8>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	fab3 f383 	clz	r3, r3
 8009f80:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009f82:	7afb      	ldrb	r3, [r7, #11]
 8009f84:	f1c3 031f 	rsb	r3, r3, #31
 8009f88:	617b      	str	r3, [r7, #20]
 8009f8a:	4922      	ldr	r1, [pc, #136]	@ (800a014 <vTaskSwitchContext+0xbc>)
 8009f8c:	697a      	ldr	r2, [r7, #20]
 8009f8e:	4613      	mov	r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4413      	add	r3, r2
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	440b      	add	r3, r1
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d10b      	bne.n	8009fb6 <vTaskSwitchContext+0x5e>
	__asm volatile
 8009f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fa2:	f383 8811 	msr	BASEPRI, r3
 8009fa6:	f3bf 8f6f 	isb	sy
 8009faa:	f3bf 8f4f 	dsb	sy
 8009fae:	607b      	str	r3, [r7, #4]
}
 8009fb0:	bf00      	nop
 8009fb2:	bf00      	nop
 8009fb4:	e7fd      	b.n	8009fb2 <vTaskSwitchContext+0x5a>
 8009fb6:	697a      	ldr	r2, [r7, #20]
 8009fb8:	4613      	mov	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	4413      	add	r3, r2
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	4a14      	ldr	r2, [pc, #80]	@ (800a014 <vTaskSwitchContext+0xbc>)
 8009fc2:	4413      	add	r3, r2
 8009fc4:	613b      	str	r3, [r7, #16]
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	685a      	ldr	r2, [r3, #4]
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	605a      	str	r2, [r3, #4]
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	685a      	ldr	r2, [r3, #4]
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	3308      	adds	r3, #8
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d104      	bne.n	8009fe6 <vTaskSwitchContext+0x8e>
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	685a      	ldr	r2, [r3, #4]
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	605a      	str	r2, [r3, #4]
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	4a0a      	ldr	r2, [pc, #40]	@ (800a018 <vTaskSwitchContext+0xc0>)
 8009fee:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ff0:	4b09      	ldr	r3, [pc, #36]	@ (800a018 <vTaskSwitchContext+0xc0>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	334c      	adds	r3, #76	@ 0x4c
 8009ff6:	4a09      	ldr	r2, [pc, #36]	@ (800a01c <vTaskSwitchContext+0xc4>)
 8009ff8:	6013      	str	r3, [r2, #0]
}
 8009ffa:	bf00      	nop
 8009ffc:	371c      	adds	r7, #28
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr
 800a006:	bf00      	nop
 800a008:	20001100 	.word	0x20001100
 800a00c:	200010ec 	.word	0x200010ec
 800a010:	200010e0 	.word	0x200010e0
 800a014:	20000fdc 	.word	0x20000fdc
 800a018:	20000fd8 	.word	0x20000fd8
 800a01c:	20000024 	.word	0x20000024

0800a020 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d10b      	bne.n	800a048 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a034:	f383 8811 	msr	BASEPRI, r3
 800a038:	f3bf 8f6f 	isb	sy
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	60fb      	str	r3, [r7, #12]
}
 800a042:	bf00      	nop
 800a044:	bf00      	nop
 800a046:	e7fd      	b.n	800a044 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a048:	4b07      	ldr	r3, [pc, #28]	@ (800a068 <vTaskPlaceOnEventList+0x48>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	3318      	adds	r3, #24
 800a04e:	4619      	mov	r1, r3
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f7ff f883 	bl	800915c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a056:	2101      	movs	r1, #1
 800a058:	6838      	ldr	r0, [r7, #0]
 800a05a:	f000 fb05 	bl	800a668 <prvAddCurrentTaskToDelayedList>
}
 800a05e:	bf00      	nop
 800a060:	3710      	adds	r7, #16
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	20000fd8 	.word	0x20000fd8

0800a06c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b086      	sub	sp, #24
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d10b      	bne.n	800a09a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a086:	f383 8811 	msr	BASEPRI, r3
 800a08a:	f3bf 8f6f 	isb	sy
 800a08e:	f3bf 8f4f 	dsb	sy
 800a092:	60fb      	str	r3, [r7, #12]
}
 800a094:	bf00      	nop
 800a096:	bf00      	nop
 800a098:	e7fd      	b.n	800a096 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	3318      	adds	r3, #24
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7ff f895 	bl	80091ce <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0a4:	4b1d      	ldr	r3, [pc, #116]	@ (800a11c <xTaskRemoveFromEventList+0xb0>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d11c      	bne.n	800a0e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	3304      	adds	r3, #4
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7ff f88c 	bl	80091ce <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	409a      	lsls	r2, r3
 800a0be:	4b18      	ldr	r3, [pc, #96]	@ (800a120 <xTaskRemoveFromEventList+0xb4>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	4a16      	ldr	r2, [pc, #88]	@ (800a120 <xTaskRemoveFromEventList+0xb4>)
 800a0c6:	6013      	str	r3, [r2, #0]
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0cc:	4613      	mov	r3, r2
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	4413      	add	r3, r2
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	4a13      	ldr	r2, [pc, #76]	@ (800a124 <xTaskRemoveFromEventList+0xb8>)
 800a0d6:	441a      	add	r2, r3
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	3304      	adds	r3, #4
 800a0dc:	4619      	mov	r1, r3
 800a0de:	4610      	mov	r0, r2
 800a0e0:	f7ff f818 	bl	8009114 <vListInsertEnd>
 800a0e4:	e005      	b.n	800a0f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	3318      	adds	r3, #24
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	480e      	ldr	r0, [pc, #56]	@ (800a128 <xTaskRemoveFromEventList+0xbc>)
 800a0ee:	f7ff f811 	bl	8009114 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0f6:	4b0d      	ldr	r3, [pc, #52]	@ (800a12c <xTaskRemoveFromEventList+0xc0>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d905      	bls.n	800a10c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a100:	2301      	movs	r3, #1
 800a102:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a104:	4b0a      	ldr	r3, [pc, #40]	@ (800a130 <xTaskRemoveFromEventList+0xc4>)
 800a106:	2201      	movs	r2, #1
 800a108:	601a      	str	r2, [r3, #0]
 800a10a:	e001      	b.n	800a110 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a10c:	2300      	movs	r3, #0
 800a10e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a110:	697b      	ldr	r3, [r7, #20]
}
 800a112:	4618      	mov	r0, r3
 800a114:	3718      	adds	r7, #24
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	20001100 	.word	0x20001100
 800a120:	200010e0 	.word	0x200010e0
 800a124:	20000fdc 	.word	0x20000fdc
 800a128:	20001098 	.word	0x20001098
 800a12c:	20000fd8 	.word	0x20000fd8
 800a130:	200010ec 	.word	0x200010ec

0800a134 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a13c:	4b06      	ldr	r3, [pc, #24]	@ (800a158 <vTaskInternalSetTimeOutState+0x24>)
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a144:	4b05      	ldr	r3, [pc, #20]	@ (800a15c <vTaskInternalSetTimeOutState+0x28>)
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	605a      	str	r2, [r3, #4]
}
 800a14c:	bf00      	nop
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr
 800a158:	200010f0 	.word	0x200010f0
 800a15c:	200010dc 	.word	0x200010dc

0800a160 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b088      	sub	sp, #32
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d10b      	bne.n	800a188 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a174:	f383 8811 	msr	BASEPRI, r3
 800a178:	f3bf 8f6f 	isb	sy
 800a17c:	f3bf 8f4f 	dsb	sy
 800a180:	613b      	str	r3, [r7, #16]
}
 800a182:	bf00      	nop
 800a184:	bf00      	nop
 800a186:	e7fd      	b.n	800a184 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d10b      	bne.n	800a1a6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a192:	f383 8811 	msr	BASEPRI, r3
 800a196:	f3bf 8f6f 	isb	sy
 800a19a:	f3bf 8f4f 	dsb	sy
 800a19e:	60fb      	str	r3, [r7, #12]
}
 800a1a0:	bf00      	nop
 800a1a2:	bf00      	nop
 800a1a4:	e7fd      	b.n	800a1a2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a1a6:	f000 fbf7 	bl	800a998 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a1aa:	4b1d      	ldr	r3, [pc, #116]	@ (800a220 <xTaskCheckForTimeOut+0xc0>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	69ba      	ldr	r2, [r7, #24]
 800a1b6:	1ad3      	subs	r3, r2, r3
 800a1b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a1c2:	d102      	bne.n	800a1ca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	61fb      	str	r3, [r7, #28]
 800a1c8:	e023      	b.n	800a212 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681a      	ldr	r2, [r3, #0]
 800a1ce:	4b15      	ldr	r3, [pc, #84]	@ (800a224 <xTaskCheckForTimeOut+0xc4>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d007      	beq.n	800a1e6 <xTaskCheckForTimeOut+0x86>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	69ba      	ldr	r2, [r7, #24]
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d302      	bcc.n	800a1e6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	61fb      	str	r3, [r7, #28]
 800a1e4:	e015      	b.n	800a212 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	697a      	ldr	r2, [r7, #20]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d20b      	bcs.n	800a208 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	1ad2      	subs	r2, r2, r3
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f7ff ff99 	bl	800a134 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a202:	2300      	movs	r3, #0
 800a204:	61fb      	str	r3, [r7, #28]
 800a206:	e004      	b.n	800a212 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	2200      	movs	r2, #0
 800a20c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a20e:	2301      	movs	r3, #1
 800a210:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a212:	f000 fbf3 	bl	800a9fc <vPortExitCritical>

	return xReturn;
 800a216:	69fb      	ldr	r3, [r7, #28]
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3720      	adds	r7, #32
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	200010dc 	.word	0x200010dc
 800a224:	200010f0 	.word	0x200010f0

0800a228 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a228:	b480      	push	{r7}
 800a22a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a22c:	4b03      	ldr	r3, [pc, #12]	@ (800a23c <vTaskMissedYield+0x14>)
 800a22e:	2201      	movs	r2, #1
 800a230:	601a      	str	r2, [r3, #0]
}
 800a232:	bf00      	nop
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr
 800a23c:	200010ec 	.word	0x200010ec

0800a240 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a248:	f000 f852 	bl	800a2f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a24c:	4b06      	ldr	r3, [pc, #24]	@ (800a268 <prvIdleTask+0x28>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2b01      	cmp	r3, #1
 800a252:	d9f9      	bls.n	800a248 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a254:	4b05      	ldr	r3, [pc, #20]	@ (800a26c <prvIdleTask+0x2c>)
 800a256:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a25a:	601a      	str	r2, [r3, #0]
 800a25c:	f3bf 8f4f 	dsb	sy
 800a260:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a264:	e7f0      	b.n	800a248 <prvIdleTask+0x8>
 800a266:	bf00      	nop
 800a268:	20000fdc 	.word	0x20000fdc
 800a26c:	e000ed04 	.word	0xe000ed04

0800a270 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a276:	2300      	movs	r3, #0
 800a278:	607b      	str	r3, [r7, #4]
 800a27a:	e00c      	b.n	800a296 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	4613      	mov	r3, r2
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	4413      	add	r3, r2
 800a284:	009b      	lsls	r3, r3, #2
 800a286:	4a12      	ldr	r2, [pc, #72]	@ (800a2d0 <prvInitialiseTaskLists+0x60>)
 800a288:	4413      	add	r3, r2
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7fe ff15 	bl	80090ba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	3301      	adds	r3, #1
 800a294:	607b      	str	r3, [r7, #4]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2b06      	cmp	r3, #6
 800a29a:	d9ef      	bls.n	800a27c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a29c:	480d      	ldr	r0, [pc, #52]	@ (800a2d4 <prvInitialiseTaskLists+0x64>)
 800a29e:	f7fe ff0c 	bl	80090ba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a2a2:	480d      	ldr	r0, [pc, #52]	@ (800a2d8 <prvInitialiseTaskLists+0x68>)
 800a2a4:	f7fe ff09 	bl	80090ba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a2a8:	480c      	ldr	r0, [pc, #48]	@ (800a2dc <prvInitialiseTaskLists+0x6c>)
 800a2aa:	f7fe ff06 	bl	80090ba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a2ae:	480c      	ldr	r0, [pc, #48]	@ (800a2e0 <prvInitialiseTaskLists+0x70>)
 800a2b0:	f7fe ff03 	bl	80090ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a2b4:	480b      	ldr	r0, [pc, #44]	@ (800a2e4 <prvInitialiseTaskLists+0x74>)
 800a2b6:	f7fe ff00 	bl	80090ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a2ba:	4b0b      	ldr	r3, [pc, #44]	@ (800a2e8 <prvInitialiseTaskLists+0x78>)
 800a2bc:	4a05      	ldr	r2, [pc, #20]	@ (800a2d4 <prvInitialiseTaskLists+0x64>)
 800a2be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a2c0:	4b0a      	ldr	r3, [pc, #40]	@ (800a2ec <prvInitialiseTaskLists+0x7c>)
 800a2c2:	4a05      	ldr	r2, [pc, #20]	@ (800a2d8 <prvInitialiseTaskLists+0x68>)
 800a2c4:	601a      	str	r2, [r3, #0]
}
 800a2c6:	bf00      	nop
 800a2c8:	3708      	adds	r7, #8
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	20000fdc 	.word	0x20000fdc
 800a2d4:	20001068 	.word	0x20001068
 800a2d8:	2000107c 	.word	0x2000107c
 800a2dc:	20001098 	.word	0x20001098
 800a2e0:	200010ac 	.word	0x200010ac
 800a2e4:	200010c4 	.word	0x200010c4
 800a2e8:	20001090 	.word	0x20001090
 800a2ec:	20001094 	.word	0x20001094

0800a2f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2f6:	e019      	b.n	800a32c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a2f8:	f000 fb4e 	bl	800a998 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2fc:	4b10      	ldr	r3, [pc, #64]	@ (800a340 <prvCheckTasksWaitingTermination+0x50>)
 800a2fe:	68db      	ldr	r3, [r3, #12]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	3304      	adds	r3, #4
 800a308:	4618      	mov	r0, r3
 800a30a:	f7fe ff60 	bl	80091ce <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a30e:	4b0d      	ldr	r3, [pc, #52]	@ (800a344 <prvCheckTasksWaitingTermination+0x54>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	3b01      	subs	r3, #1
 800a314:	4a0b      	ldr	r2, [pc, #44]	@ (800a344 <prvCheckTasksWaitingTermination+0x54>)
 800a316:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a318:	4b0b      	ldr	r3, [pc, #44]	@ (800a348 <prvCheckTasksWaitingTermination+0x58>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	3b01      	subs	r3, #1
 800a31e:	4a0a      	ldr	r2, [pc, #40]	@ (800a348 <prvCheckTasksWaitingTermination+0x58>)
 800a320:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a322:	f000 fb6b 	bl	800a9fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 f810 	bl	800a34c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a32c:	4b06      	ldr	r3, [pc, #24]	@ (800a348 <prvCheckTasksWaitingTermination+0x58>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d1e1      	bne.n	800a2f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a334:	bf00      	nop
 800a336:	bf00      	nop
 800a338:	3708      	adds	r7, #8
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	200010ac 	.word	0x200010ac
 800a344:	200010d8 	.word	0x200010d8
 800a348:	200010c0 	.word	0x200010c0

0800a34c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	334c      	adds	r3, #76	@ 0x4c
 800a358:	4618      	mov	r0, r3
 800a35a:	f001 f90b 	bl	800b574 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800a364:	2b00      	cmp	r3, #0
 800a366:	d108      	bne.n	800a37a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a36c:	4618      	mov	r0, r3
 800a36e:	f000 fd03 	bl	800ad78 <vPortFree>
				vPortFree( pxTCB );
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 fd00 	bl	800ad78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a378:	e019      	b.n	800a3ae <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800a380:	2b01      	cmp	r3, #1
 800a382:	d103      	bne.n	800a38c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 fcf7 	bl	800ad78 <vPortFree>
	}
 800a38a:	e010      	b.n	800a3ae <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800a392:	2b02      	cmp	r3, #2
 800a394:	d00b      	beq.n	800a3ae <prvDeleteTCB+0x62>
	__asm volatile
 800a396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a39a:	f383 8811 	msr	BASEPRI, r3
 800a39e:	f3bf 8f6f 	isb	sy
 800a3a2:	f3bf 8f4f 	dsb	sy
 800a3a6:	60fb      	str	r3, [r7, #12]
}
 800a3a8:	bf00      	nop
 800a3aa:	bf00      	nop
 800a3ac:	e7fd      	b.n	800a3aa <prvDeleteTCB+0x5e>
	}
 800a3ae:	bf00      	nop
 800a3b0:	3710      	adds	r7, #16
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
	...

0800a3b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3be:	4b0c      	ldr	r3, [pc, #48]	@ (800a3f0 <prvResetNextTaskUnblockTime+0x38>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d104      	bne.n	800a3d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a3c8:	4b0a      	ldr	r3, [pc, #40]	@ (800a3f4 <prvResetNextTaskUnblockTime+0x3c>)
 800a3ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a3ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a3d0:	e008      	b.n	800a3e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3d2:	4b07      	ldr	r3, [pc, #28]	@ (800a3f0 <prvResetNextTaskUnblockTime+0x38>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	68db      	ldr	r3, [r3, #12]
 800a3da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	4a04      	ldr	r2, [pc, #16]	@ (800a3f4 <prvResetNextTaskUnblockTime+0x3c>)
 800a3e2:	6013      	str	r3, [r2, #0]
}
 800a3e4:	bf00      	nop
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr
 800a3f0:	20001090 	.word	0x20001090
 800a3f4:	200010f8 	.word	0x200010f8

0800a3f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a3fe:	4b0b      	ldr	r3, [pc, #44]	@ (800a42c <xTaskGetSchedulerState+0x34>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d102      	bne.n	800a40c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a406:	2301      	movs	r3, #1
 800a408:	607b      	str	r3, [r7, #4]
 800a40a:	e008      	b.n	800a41e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a40c:	4b08      	ldr	r3, [pc, #32]	@ (800a430 <xTaskGetSchedulerState+0x38>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d102      	bne.n	800a41a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a414:	2302      	movs	r3, #2
 800a416:	607b      	str	r3, [r7, #4]
 800a418:	e001      	b.n	800a41e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a41a:	2300      	movs	r3, #0
 800a41c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a41e:	687b      	ldr	r3, [r7, #4]
	}
 800a420:	4618      	mov	r0, r3
 800a422:	370c      	adds	r7, #12
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr
 800a42c:	200010e4 	.word	0x200010e4
 800a430:	20001100 	.word	0x20001100

0800a434 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a440:	2300      	movs	r3, #0
 800a442:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d05e      	beq.n	800a508 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a44e:	4b31      	ldr	r3, [pc, #196]	@ (800a514 <xTaskPriorityInherit+0xe0>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a454:	429a      	cmp	r2, r3
 800a456:	d24e      	bcs.n	800a4f6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	699b      	ldr	r3, [r3, #24]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	db06      	blt.n	800a46e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a460:	4b2c      	ldr	r3, [pc, #176]	@ (800a514 <xTaskPriorityInherit+0xe0>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a466:	f1c3 0207 	rsb	r2, r3, #7
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	6959      	ldr	r1, [r3, #20]
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a476:	4613      	mov	r3, r2
 800a478:	009b      	lsls	r3, r3, #2
 800a47a:	4413      	add	r3, r2
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	4a26      	ldr	r2, [pc, #152]	@ (800a518 <xTaskPriorityInherit+0xe4>)
 800a480:	4413      	add	r3, r2
 800a482:	4299      	cmp	r1, r3
 800a484:	d12f      	bne.n	800a4e6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	3304      	adds	r3, #4
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7fe fe9f 	bl	80091ce <uxListRemove>
 800a490:	4603      	mov	r3, r0
 800a492:	2b00      	cmp	r3, #0
 800a494:	d10a      	bne.n	800a4ac <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a49a:	2201      	movs	r2, #1
 800a49c:	fa02 f303 	lsl.w	r3, r2, r3
 800a4a0:	43da      	mvns	r2, r3
 800a4a2:	4b1e      	ldr	r3, [pc, #120]	@ (800a51c <xTaskPriorityInherit+0xe8>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4013      	ands	r3, r2
 800a4a8:	4a1c      	ldr	r2, [pc, #112]	@ (800a51c <xTaskPriorityInherit+0xe8>)
 800a4aa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a4ac:	4b19      	ldr	r3, [pc, #100]	@ (800a514 <xTaskPriorityInherit+0xe0>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	409a      	lsls	r2, r3
 800a4be:	4b17      	ldr	r3, [pc, #92]	@ (800a51c <xTaskPriorityInherit+0xe8>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	4a15      	ldr	r2, [pc, #84]	@ (800a51c <xTaskPriorityInherit+0xe8>)
 800a4c6:	6013      	str	r3, [r2, #0]
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4cc:	4613      	mov	r3, r2
 800a4ce:	009b      	lsls	r3, r3, #2
 800a4d0:	4413      	add	r3, r2
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	4a10      	ldr	r2, [pc, #64]	@ (800a518 <xTaskPriorityInherit+0xe4>)
 800a4d6:	441a      	add	r2, r3
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	3304      	adds	r3, #4
 800a4dc:	4619      	mov	r1, r3
 800a4de:	4610      	mov	r0, r2
 800a4e0:	f7fe fe18 	bl	8009114 <vListInsertEnd>
 800a4e4:	e004      	b.n	800a4f0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a4e6:	4b0b      	ldr	r3, [pc, #44]	@ (800a514 <xTaskPriorityInherit+0xe0>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	60fb      	str	r3, [r7, #12]
 800a4f4:	e008      	b.n	800a508 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4fa:	4b06      	ldr	r3, [pc, #24]	@ (800a514 <xTaskPriorityInherit+0xe0>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a500:	429a      	cmp	r2, r3
 800a502:	d201      	bcs.n	800a508 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a504:	2301      	movs	r3, #1
 800a506:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a508:	68fb      	ldr	r3, [r7, #12]
	}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	20000fd8 	.word	0x20000fd8
 800a518:	20000fdc 	.word	0x20000fdc
 800a51c:	200010e0 	.word	0x200010e0

0800a520 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a520:	b580      	push	{r7, lr}
 800a522:	b088      	sub	sp, #32
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a52e:	2301      	movs	r3, #1
 800a530:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d079      	beq.n	800a62c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a538:	69bb      	ldr	r3, [r7, #24]
 800a53a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d10b      	bne.n	800a558 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a544:	f383 8811 	msr	BASEPRI, r3
 800a548:	f3bf 8f6f 	isb	sy
 800a54c:	f3bf 8f4f 	dsb	sy
 800a550:	60fb      	str	r3, [r7, #12]
}
 800a552:	bf00      	nop
 800a554:	bf00      	nop
 800a556:	e7fd      	b.n	800a554 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a558:	69bb      	ldr	r3, [r7, #24]
 800a55a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a55c:	683a      	ldr	r2, [r7, #0]
 800a55e:	429a      	cmp	r2, r3
 800a560:	d902      	bls.n	800a568 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	61fb      	str	r3, [r7, #28]
 800a566:	e002      	b.n	800a56e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a56c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a56e:	69bb      	ldr	r3, [r7, #24]
 800a570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a572:	69fa      	ldr	r2, [r7, #28]
 800a574:	429a      	cmp	r2, r3
 800a576:	d059      	beq.n	800a62c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a57c:	697a      	ldr	r2, [r7, #20]
 800a57e:	429a      	cmp	r2, r3
 800a580:	d154      	bne.n	800a62c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a582:	4b2c      	ldr	r3, [pc, #176]	@ (800a634 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	69ba      	ldr	r2, [r7, #24]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d10b      	bne.n	800a5a4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a58c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a590:	f383 8811 	msr	BASEPRI, r3
 800a594:	f3bf 8f6f 	isb	sy
 800a598:	f3bf 8f4f 	dsb	sy
 800a59c:	60bb      	str	r3, [r7, #8]
}
 800a59e:	bf00      	nop
 800a5a0:	bf00      	nop
 800a5a2:	e7fd      	b.n	800a5a0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a5a4:	69bb      	ldr	r3, [r7, #24]
 800a5a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5a8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	69fa      	ldr	r2, [r7, #28]
 800a5ae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a5b0:	69bb      	ldr	r3, [r7, #24]
 800a5b2:	699b      	ldr	r3, [r3, #24]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	db04      	blt.n	800a5c2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5b8:	69fb      	ldr	r3, [r7, #28]
 800a5ba:	f1c3 0207 	rsb	r2, r3, #7
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a5c2:	69bb      	ldr	r3, [r7, #24]
 800a5c4:	6959      	ldr	r1, [r3, #20]
 800a5c6:	693a      	ldr	r2, [r7, #16]
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	4413      	add	r3, r2
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	4a19      	ldr	r2, [pc, #100]	@ (800a638 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a5d2:	4413      	add	r3, r2
 800a5d4:	4299      	cmp	r1, r3
 800a5d6:	d129      	bne.n	800a62c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5d8:	69bb      	ldr	r3, [r7, #24]
 800a5da:	3304      	adds	r3, #4
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7fe fdf6 	bl	80091ce <uxListRemove>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d10a      	bne.n	800a5fe <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a5f2:	43da      	mvns	r2, r3
 800a5f4:	4b11      	ldr	r3, [pc, #68]	@ (800a63c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4013      	ands	r3, r2
 800a5fa:	4a10      	ldr	r2, [pc, #64]	@ (800a63c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a5fc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a5fe:	69bb      	ldr	r3, [r7, #24]
 800a600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a602:	2201      	movs	r2, #1
 800a604:	409a      	lsls	r2, r3
 800a606:	4b0d      	ldr	r3, [pc, #52]	@ (800a63c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	4a0b      	ldr	r2, [pc, #44]	@ (800a63c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a60e:	6013      	str	r3, [r2, #0]
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a614:	4613      	mov	r3, r2
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	4413      	add	r3, r2
 800a61a:	009b      	lsls	r3, r3, #2
 800a61c:	4a06      	ldr	r2, [pc, #24]	@ (800a638 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a61e:	441a      	add	r2, r3
 800a620:	69bb      	ldr	r3, [r7, #24]
 800a622:	3304      	adds	r3, #4
 800a624:	4619      	mov	r1, r3
 800a626:	4610      	mov	r0, r2
 800a628:	f7fe fd74 	bl	8009114 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a62c:	bf00      	nop
 800a62e:	3720      	adds	r7, #32
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}
 800a634:	20000fd8 	.word	0x20000fd8
 800a638:	20000fdc 	.word	0x20000fdc
 800a63c:	200010e0 	.word	0x200010e0

0800a640 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a640:	b480      	push	{r7}
 800a642:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a644:	4b07      	ldr	r3, [pc, #28]	@ (800a664 <pvTaskIncrementMutexHeldCount+0x24>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d004      	beq.n	800a656 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a64c:	4b05      	ldr	r3, [pc, #20]	@ (800a664 <pvTaskIncrementMutexHeldCount+0x24>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a652:	3201      	adds	r2, #1
 800a654:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800a656:	4b03      	ldr	r3, [pc, #12]	@ (800a664 <pvTaskIncrementMutexHeldCount+0x24>)
 800a658:	681b      	ldr	r3, [r3, #0]
	}
 800a65a:	4618      	mov	r0, r3
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr
 800a664:	20000fd8 	.word	0x20000fd8

0800a668 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b084      	sub	sp, #16
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a672:	4b29      	ldr	r3, [pc, #164]	@ (800a718 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a678:	4b28      	ldr	r3, [pc, #160]	@ (800a71c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	3304      	adds	r3, #4
 800a67e:	4618      	mov	r0, r3
 800a680:	f7fe fda5 	bl	80091ce <uxListRemove>
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	d10b      	bne.n	800a6a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a68a:	4b24      	ldr	r3, [pc, #144]	@ (800a71c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a690:	2201      	movs	r2, #1
 800a692:	fa02 f303 	lsl.w	r3, r2, r3
 800a696:	43da      	mvns	r2, r3
 800a698:	4b21      	ldr	r3, [pc, #132]	@ (800a720 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4013      	ands	r3, r2
 800a69e:	4a20      	ldr	r2, [pc, #128]	@ (800a720 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a6a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a6a8:	d10a      	bne.n	800a6c0 <prvAddCurrentTaskToDelayedList+0x58>
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d007      	beq.n	800a6c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6b0:	4b1a      	ldr	r3, [pc, #104]	@ (800a71c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	3304      	adds	r3, #4
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	481a      	ldr	r0, [pc, #104]	@ (800a724 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a6ba:	f7fe fd2b 	bl	8009114 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a6be:	e026      	b.n	800a70e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a6c0:	68fa      	ldr	r2, [r7, #12]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a6c8:	4b14      	ldr	r3, [pc, #80]	@ (800a71c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a6d0:	68ba      	ldr	r2, [r7, #8]
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d209      	bcs.n	800a6ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6d8:	4b13      	ldr	r3, [pc, #76]	@ (800a728 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	4b0f      	ldr	r3, [pc, #60]	@ (800a71c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	3304      	adds	r3, #4
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	4610      	mov	r0, r2
 800a6e6:	f7fe fd39 	bl	800915c <vListInsert>
}
 800a6ea:	e010      	b.n	800a70e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6ec:	4b0f      	ldr	r3, [pc, #60]	@ (800a72c <prvAddCurrentTaskToDelayedList+0xc4>)
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	4b0a      	ldr	r3, [pc, #40]	@ (800a71c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	3304      	adds	r3, #4
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	4610      	mov	r0, r2
 800a6fa:	f7fe fd2f 	bl	800915c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a6fe:	4b0c      	ldr	r3, [pc, #48]	@ (800a730 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	68ba      	ldr	r2, [r7, #8]
 800a704:	429a      	cmp	r2, r3
 800a706:	d202      	bcs.n	800a70e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a708:	4a09      	ldr	r2, [pc, #36]	@ (800a730 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	6013      	str	r3, [r2, #0]
}
 800a70e:	bf00      	nop
 800a710:	3710      	adds	r7, #16
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	200010dc 	.word	0x200010dc
 800a71c:	20000fd8 	.word	0x20000fd8
 800a720:	200010e0 	.word	0x200010e0
 800a724:	200010c4 	.word	0x200010c4
 800a728:	20001094 	.word	0x20001094
 800a72c:	20001090 	.word	0x20001090
 800a730:	200010f8 	.word	0x200010f8

0800a734 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a734:	b480      	push	{r7}
 800a736:	b085      	sub	sp, #20
 800a738:	af00      	add	r7, sp, #0
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	60b9      	str	r1, [r7, #8]
 800a73e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	3b04      	subs	r3, #4
 800a744:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a74c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	3b04      	subs	r3, #4
 800a752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	f023 0201 	bic.w	r2, r3, #1
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	3b04      	subs	r3, #4
 800a762:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a764:	4a0c      	ldr	r2, [pc, #48]	@ (800a798 <pxPortInitialiseStack+0x64>)
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	3b14      	subs	r3, #20
 800a76e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	3b04      	subs	r3, #4
 800a77a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f06f 0202 	mvn.w	r2, #2
 800a782:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	3b20      	subs	r3, #32
 800a788:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a78a:	68fb      	ldr	r3, [r7, #12]
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3714      	adds	r7, #20
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr
 800a798:	0800a79d 	.word	0x0800a79d

0800a79c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a79c:	b480      	push	{r7}
 800a79e:	b085      	sub	sp, #20
 800a7a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a7a6:	4b13      	ldr	r3, [pc, #76]	@ (800a7f4 <prvTaskExitError+0x58>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a7ae:	d00b      	beq.n	800a7c8 <prvTaskExitError+0x2c>
	__asm volatile
 800a7b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7b4:	f383 8811 	msr	BASEPRI, r3
 800a7b8:	f3bf 8f6f 	isb	sy
 800a7bc:	f3bf 8f4f 	dsb	sy
 800a7c0:	60fb      	str	r3, [r7, #12]
}
 800a7c2:	bf00      	nop
 800a7c4:	bf00      	nop
 800a7c6:	e7fd      	b.n	800a7c4 <prvTaskExitError+0x28>
	__asm volatile
 800a7c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7cc:	f383 8811 	msr	BASEPRI, r3
 800a7d0:	f3bf 8f6f 	isb	sy
 800a7d4:	f3bf 8f4f 	dsb	sy
 800a7d8:	60bb      	str	r3, [r7, #8]
}
 800a7da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a7dc:	bf00      	nop
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d0fc      	beq.n	800a7de <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a7e4:	bf00      	nop
 800a7e6:	bf00      	nop
 800a7e8:	3714      	adds	r7, #20
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr
 800a7f2:	bf00      	nop
 800a7f4:	20000014 	.word	0x20000014
	...

0800a800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a800:	4b07      	ldr	r3, [pc, #28]	@ (800a820 <pxCurrentTCBConst2>)
 800a802:	6819      	ldr	r1, [r3, #0]
 800a804:	6808      	ldr	r0, [r1, #0]
 800a806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a80a:	f380 8809 	msr	PSP, r0
 800a80e:	f3bf 8f6f 	isb	sy
 800a812:	f04f 0000 	mov.w	r0, #0
 800a816:	f380 8811 	msr	BASEPRI, r0
 800a81a:	4770      	bx	lr
 800a81c:	f3af 8000 	nop.w

0800a820 <pxCurrentTCBConst2>:
 800a820:	20000fd8 	.word	0x20000fd8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a824:	bf00      	nop
 800a826:	bf00      	nop

0800a828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a828:	4808      	ldr	r0, [pc, #32]	@ (800a84c <prvPortStartFirstTask+0x24>)
 800a82a:	6800      	ldr	r0, [r0, #0]
 800a82c:	6800      	ldr	r0, [r0, #0]
 800a82e:	f380 8808 	msr	MSP, r0
 800a832:	f04f 0000 	mov.w	r0, #0
 800a836:	f380 8814 	msr	CONTROL, r0
 800a83a:	b662      	cpsie	i
 800a83c:	b661      	cpsie	f
 800a83e:	f3bf 8f4f 	dsb	sy
 800a842:	f3bf 8f6f 	isb	sy
 800a846:	df00      	svc	0
 800a848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a84a:	bf00      	nop
 800a84c:	e000ed08 	.word	0xe000ed08

0800a850 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b086      	sub	sp, #24
 800a854:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a856:	4b47      	ldr	r3, [pc, #284]	@ (800a974 <xPortStartScheduler+0x124>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a47      	ldr	r2, [pc, #284]	@ (800a978 <xPortStartScheduler+0x128>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d10b      	bne.n	800a878 <xPortStartScheduler+0x28>
	__asm volatile
 800a860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a864:	f383 8811 	msr	BASEPRI, r3
 800a868:	f3bf 8f6f 	isb	sy
 800a86c:	f3bf 8f4f 	dsb	sy
 800a870:	613b      	str	r3, [r7, #16]
}
 800a872:	bf00      	nop
 800a874:	bf00      	nop
 800a876:	e7fd      	b.n	800a874 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a878:	4b3e      	ldr	r3, [pc, #248]	@ (800a974 <xPortStartScheduler+0x124>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a3f      	ldr	r2, [pc, #252]	@ (800a97c <xPortStartScheduler+0x12c>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d10b      	bne.n	800a89a <xPortStartScheduler+0x4a>
	__asm volatile
 800a882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a886:	f383 8811 	msr	BASEPRI, r3
 800a88a:	f3bf 8f6f 	isb	sy
 800a88e:	f3bf 8f4f 	dsb	sy
 800a892:	60fb      	str	r3, [r7, #12]
}
 800a894:	bf00      	nop
 800a896:	bf00      	nop
 800a898:	e7fd      	b.n	800a896 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a89a:	4b39      	ldr	r3, [pc, #228]	@ (800a980 <xPortStartScheduler+0x130>)
 800a89c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	22ff      	movs	r2, #255	@ 0xff
 800a8aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a8b4:	78fb      	ldrb	r3, [r7, #3]
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a8bc:	b2da      	uxtb	r2, r3
 800a8be:	4b31      	ldr	r3, [pc, #196]	@ (800a984 <xPortStartScheduler+0x134>)
 800a8c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a8c2:	4b31      	ldr	r3, [pc, #196]	@ (800a988 <xPortStartScheduler+0x138>)
 800a8c4:	2207      	movs	r2, #7
 800a8c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8c8:	e009      	b.n	800a8de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a8ca:	4b2f      	ldr	r3, [pc, #188]	@ (800a988 <xPortStartScheduler+0x138>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	3b01      	subs	r3, #1
 800a8d0:	4a2d      	ldr	r2, [pc, #180]	@ (800a988 <xPortStartScheduler+0x138>)
 800a8d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a8d4:	78fb      	ldrb	r3, [r7, #3]
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	005b      	lsls	r3, r3, #1
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8de:	78fb      	ldrb	r3, [r7, #3]
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8e6:	2b80      	cmp	r3, #128	@ 0x80
 800a8e8:	d0ef      	beq.n	800a8ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a8ea:	4b27      	ldr	r3, [pc, #156]	@ (800a988 <xPortStartScheduler+0x138>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f1c3 0307 	rsb	r3, r3, #7
 800a8f2:	2b04      	cmp	r3, #4
 800a8f4:	d00b      	beq.n	800a90e <xPortStartScheduler+0xbe>
	__asm volatile
 800a8f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8fa:	f383 8811 	msr	BASEPRI, r3
 800a8fe:	f3bf 8f6f 	isb	sy
 800a902:	f3bf 8f4f 	dsb	sy
 800a906:	60bb      	str	r3, [r7, #8]
}
 800a908:	bf00      	nop
 800a90a:	bf00      	nop
 800a90c:	e7fd      	b.n	800a90a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a90e:	4b1e      	ldr	r3, [pc, #120]	@ (800a988 <xPortStartScheduler+0x138>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	021b      	lsls	r3, r3, #8
 800a914:	4a1c      	ldr	r2, [pc, #112]	@ (800a988 <xPortStartScheduler+0x138>)
 800a916:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a918:	4b1b      	ldr	r3, [pc, #108]	@ (800a988 <xPortStartScheduler+0x138>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a920:	4a19      	ldr	r2, [pc, #100]	@ (800a988 <xPortStartScheduler+0x138>)
 800a922:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	b2da      	uxtb	r2, r3
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a92c:	4b17      	ldr	r3, [pc, #92]	@ (800a98c <xPortStartScheduler+0x13c>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a16      	ldr	r2, [pc, #88]	@ (800a98c <xPortStartScheduler+0x13c>)
 800a932:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a936:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a938:	4b14      	ldr	r3, [pc, #80]	@ (800a98c <xPortStartScheduler+0x13c>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a13      	ldr	r2, [pc, #76]	@ (800a98c <xPortStartScheduler+0x13c>)
 800a93e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a942:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a944:	f000 f8da 	bl	800aafc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a948:	4b11      	ldr	r3, [pc, #68]	@ (800a990 <xPortStartScheduler+0x140>)
 800a94a:	2200      	movs	r2, #0
 800a94c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a94e:	f000 f8f9 	bl	800ab44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a952:	4b10      	ldr	r3, [pc, #64]	@ (800a994 <xPortStartScheduler+0x144>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4a0f      	ldr	r2, [pc, #60]	@ (800a994 <xPortStartScheduler+0x144>)
 800a958:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a95c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a95e:	f7ff ff63 	bl	800a828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a962:	f7ff faf9 	bl	8009f58 <vTaskSwitchContext>
	prvTaskExitError();
 800a966:	f7ff ff19 	bl	800a79c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a96a:	2300      	movs	r3, #0
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3718      	adds	r7, #24
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	e000ed00 	.word	0xe000ed00
 800a978:	410fc271 	.word	0x410fc271
 800a97c:	410fc270 	.word	0x410fc270
 800a980:	e000e400 	.word	0xe000e400
 800a984:	20001104 	.word	0x20001104
 800a988:	20001108 	.word	0x20001108
 800a98c:	e000ed20 	.word	0xe000ed20
 800a990:	20000014 	.word	0x20000014
 800a994:	e000ef34 	.word	0xe000ef34

0800a998 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
	__asm volatile
 800a99e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9a2:	f383 8811 	msr	BASEPRI, r3
 800a9a6:	f3bf 8f6f 	isb	sy
 800a9aa:	f3bf 8f4f 	dsb	sy
 800a9ae:	607b      	str	r3, [r7, #4]
}
 800a9b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a9b2:	4b10      	ldr	r3, [pc, #64]	@ (800a9f4 <vPortEnterCritical+0x5c>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	4a0e      	ldr	r2, [pc, #56]	@ (800a9f4 <vPortEnterCritical+0x5c>)
 800a9ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a9bc:	4b0d      	ldr	r3, [pc, #52]	@ (800a9f4 <vPortEnterCritical+0x5c>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d110      	bne.n	800a9e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a9c4:	4b0c      	ldr	r3, [pc, #48]	@ (800a9f8 <vPortEnterCritical+0x60>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d00b      	beq.n	800a9e6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a9ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9d2:	f383 8811 	msr	BASEPRI, r3
 800a9d6:	f3bf 8f6f 	isb	sy
 800a9da:	f3bf 8f4f 	dsb	sy
 800a9de:	603b      	str	r3, [r7, #0]
}
 800a9e0:	bf00      	nop
 800a9e2:	bf00      	nop
 800a9e4:	e7fd      	b.n	800a9e2 <vPortEnterCritical+0x4a>
	}
}
 800a9e6:	bf00      	nop
 800a9e8:	370c      	adds	r7, #12
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr
 800a9f2:	bf00      	nop
 800a9f4:	20000014 	.word	0x20000014
 800a9f8:	e000ed04 	.word	0xe000ed04

0800a9fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b083      	sub	sp, #12
 800aa00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aa02:	4b12      	ldr	r3, [pc, #72]	@ (800aa4c <vPortExitCritical+0x50>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d10b      	bne.n	800aa22 <vPortExitCritical+0x26>
	__asm volatile
 800aa0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa0e:	f383 8811 	msr	BASEPRI, r3
 800aa12:	f3bf 8f6f 	isb	sy
 800aa16:	f3bf 8f4f 	dsb	sy
 800aa1a:	607b      	str	r3, [r7, #4]
}
 800aa1c:	bf00      	nop
 800aa1e:	bf00      	nop
 800aa20:	e7fd      	b.n	800aa1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aa22:	4b0a      	ldr	r3, [pc, #40]	@ (800aa4c <vPortExitCritical+0x50>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	3b01      	subs	r3, #1
 800aa28:	4a08      	ldr	r2, [pc, #32]	@ (800aa4c <vPortExitCritical+0x50>)
 800aa2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aa2c:	4b07      	ldr	r3, [pc, #28]	@ (800aa4c <vPortExitCritical+0x50>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d105      	bne.n	800aa40 <vPortExitCritical+0x44>
 800aa34:	2300      	movs	r3, #0
 800aa36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	f383 8811 	msr	BASEPRI, r3
}
 800aa3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aa40:	bf00      	nop
 800aa42:	370c      	adds	r7, #12
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr
 800aa4c:	20000014 	.word	0x20000014

0800aa50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa50:	f3ef 8009 	mrs	r0, PSP
 800aa54:	f3bf 8f6f 	isb	sy
 800aa58:	4b15      	ldr	r3, [pc, #84]	@ (800aab0 <pxCurrentTCBConst>)
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	f01e 0f10 	tst.w	lr, #16
 800aa60:	bf08      	it	eq
 800aa62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aa66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa6a:	6010      	str	r0, [r2, #0]
 800aa6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aa70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800aa74:	f380 8811 	msr	BASEPRI, r0
 800aa78:	f3bf 8f4f 	dsb	sy
 800aa7c:	f3bf 8f6f 	isb	sy
 800aa80:	f7ff fa6a 	bl	8009f58 <vTaskSwitchContext>
 800aa84:	f04f 0000 	mov.w	r0, #0
 800aa88:	f380 8811 	msr	BASEPRI, r0
 800aa8c:	bc09      	pop	{r0, r3}
 800aa8e:	6819      	ldr	r1, [r3, #0]
 800aa90:	6808      	ldr	r0, [r1, #0]
 800aa92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa96:	f01e 0f10 	tst.w	lr, #16
 800aa9a:	bf08      	it	eq
 800aa9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aaa0:	f380 8809 	msr	PSP, r0
 800aaa4:	f3bf 8f6f 	isb	sy
 800aaa8:	4770      	bx	lr
 800aaaa:	bf00      	nop
 800aaac:	f3af 8000 	nop.w

0800aab0 <pxCurrentTCBConst>:
 800aab0:	20000fd8 	.word	0x20000fd8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aab4:	bf00      	nop
 800aab6:	bf00      	nop

0800aab8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
	__asm volatile
 800aabe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aac2:	f383 8811 	msr	BASEPRI, r3
 800aac6:	f3bf 8f6f 	isb	sy
 800aaca:	f3bf 8f4f 	dsb	sy
 800aace:	607b      	str	r3, [r7, #4]
}
 800aad0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aad2:	f7ff f987 	bl	8009de4 <xTaskIncrementTick>
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d003      	beq.n	800aae4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aadc:	4b06      	ldr	r3, [pc, #24]	@ (800aaf8 <SysTick_Handler+0x40>)
 800aade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aae2:	601a      	str	r2, [r3, #0]
 800aae4:	2300      	movs	r3, #0
 800aae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	f383 8811 	msr	BASEPRI, r3
}
 800aaee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aaf0:	bf00      	nop
 800aaf2:	3708      	adds	r7, #8
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}
 800aaf8:	e000ed04 	.word	0xe000ed04

0800aafc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aafc:	b480      	push	{r7}
 800aafe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ab00:	4b0b      	ldr	r3, [pc, #44]	@ (800ab30 <vPortSetupTimerInterrupt+0x34>)
 800ab02:	2200      	movs	r2, #0
 800ab04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ab06:	4b0b      	ldr	r3, [pc, #44]	@ (800ab34 <vPortSetupTimerInterrupt+0x38>)
 800ab08:	2200      	movs	r2, #0
 800ab0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ab0c:	4b0a      	ldr	r3, [pc, #40]	@ (800ab38 <vPortSetupTimerInterrupt+0x3c>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a0a      	ldr	r2, [pc, #40]	@ (800ab3c <vPortSetupTimerInterrupt+0x40>)
 800ab12:	fba2 2303 	umull	r2, r3, r2, r3
 800ab16:	099b      	lsrs	r3, r3, #6
 800ab18:	4a09      	ldr	r2, [pc, #36]	@ (800ab40 <vPortSetupTimerInterrupt+0x44>)
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ab1e:	4b04      	ldr	r3, [pc, #16]	@ (800ab30 <vPortSetupTimerInterrupt+0x34>)
 800ab20:	2207      	movs	r2, #7
 800ab22:	601a      	str	r2, [r3, #0]
}
 800ab24:	bf00      	nop
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr
 800ab2e:	bf00      	nop
 800ab30:	e000e010 	.word	0xe000e010
 800ab34:	e000e018 	.word	0xe000e018
 800ab38:	20000000 	.word	0x20000000
 800ab3c:	10624dd3 	.word	0x10624dd3
 800ab40:	e000e014 	.word	0xe000e014

0800ab44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ab44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ab54 <vPortEnableVFP+0x10>
 800ab48:	6801      	ldr	r1, [r0, #0]
 800ab4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ab4e:	6001      	str	r1, [r0, #0]
 800ab50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ab52:	bf00      	nop
 800ab54:	e000ed88 	.word	0xe000ed88

0800ab58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab5e:	f3ef 8305 	mrs	r3, IPSR
 800ab62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2b0f      	cmp	r3, #15
 800ab68:	d915      	bls.n	800ab96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab6a:	4a18      	ldr	r2, [pc, #96]	@ (800abcc <vPortValidateInterruptPriority+0x74>)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	4413      	add	r3, r2
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab74:	4b16      	ldr	r3, [pc, #88]	@ (800abd0 <vPortValidateInterruptPriority+0x78>)
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	7afa      	ldrb	r2, [r7, #11]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d20b      	bcs.n	800ab96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ab7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab82:	f383 8811 	msr	BASEPRI, r3
 800ab86:	f3bf 8f6f 	isb	sy
 800ab8a:	f3bf 8f4f 	dsb	sy
 800ab8e:	607b      	str	r3, [r7, #4]
}
 800ab90:	bf00      	nop
 800ab92:	bf00      	nop
 800ab94:	e7fd      	b.n	800ab92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab96:	4b0f      	ldr	r3, [pc, #60]	@ (800abd4 <vPortValidateInterruptPriority+0x7c>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ab9e:	4b0e      	ldr	r3, [pc, #56]	@ (800abd8 <vPortValidateInterruptPriority+0x80>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d90b      	bls.n	800abbe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800aba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abaa:	f383 8811 	msr	BASEPRI, r3
 800abae:	f3bf 8f6f 	isb	sy
 800abb2:	f3bf 8f4f 	dsb	sy
 800abb6:	603b      	str	r3, [r7, #0]
}
 800abb8:	bf00      	nop
 800abba:	bf00      	nop
 800abbc:	e7fd      	b.n	800abba <vPortValidateInterruptPriority+0x62>
	}
 800abbe:	bf00      	nop
 800abc0:	3714      	adds	r7, #20
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop
 800abcc:	e000e3f0 	.word	0xe000e3f0
 800abd0:	20001104 	.word	0x20001104
 800abd4:	e000ed0c 	.word	0xe000ed0c
 800abd8:	20001108 	.word	0x20001108

0800abdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b08a      	sub	sp, #40	@ 0x28
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800abe4:	2300      	movs	r3, #0
 800abe6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800abe8:	f7ff f850 	bl	8009c8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800abec:	4b5c      	ldr	r3, [pc, #368]	@ (800ad60 <pvPortMalloc+0x184>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d101      	bne.n	800abf8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800abf4:	f000 f924 	bl	800ae40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800abf8:	4b5a      	ldr	r3, [pc, #360]	@ (800ad64 <pvPortMalloc+0x188>)
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	4013      	ands	r3, r2
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	f040 8095 	bne.w	800ad30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d01e      	beq.n	800ac4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ac0c:	2208      	movs	r2, #8
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	4413      	add	r3, r2
 800ac12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f003 0307 	and.w	r3, r3, #7
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d015      	beq.n	800ac4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f023 0307 	bic.w	r3, r3, #7
 800ac24:	3308      	adds	r3, #8
 800ac26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f003 0307 	and.w	r3, r3, #7
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d00b      	beq.n	800ac4a <pvPortMalloc+0x6e>
	__asm volatile
 800ac32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac36:	f383 8811 	msr	BASEPRI, r3
 800ac3a:	f3bf 8f6f 	isb	sy
 800ac3e:	f3bf 8f4f 	dsb	sy
 800ac42:	617b      	str	r3, [r7, #20]
}
 800ac44:	bf00      	nop
 800ac46:	bf00      	nop
 800ac48:	e7fd      	b.n	800ac46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d06f      	beq.n	800ad30 <pvPortMalloc+0x154>
 800ac50:	4b45      	ldr	r3, [pc, #276]	@ (800ad68 <pvPortMalloc+0x18c>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d86a      	bhi.n	800ad30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ac5a:	4b44      	ldr	r3, [pc, #272]	@ (800ad6c <pvPortMalloc+0x190>)
 800ac5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ac5e:	4b43      	ldr	r3, [pc, #268]	@ (800ad6c <pvPortMalloc+0x190>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac64:	e004      	b.n	800ac70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ac66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d903      	bls.n	800ac82 <pvPortMalloc+0xa6>
 800ac7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d1f1      	bne.n	800ac66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ac82:	4b37      	ldr	r3, [pc, #220]	@ (800ad60 <pvPortMalloc+0x184>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d051      	beq.n	800ad30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac8c:	6a3b      	ldr	r3, [r7, #32]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	2208      	movs	r2, #8
 800ac92:	4413      	add	r3, r2
 800ac94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	6a3b      	ldr	r3, [r7, #32]
 800ac9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca0:	685a      	ldr	r2, [r3, #4]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	1ad2      	subs	r2, r2, r3
 800aca6:	2308      	movs	r3, #8
 800aca8:	005b      	lsls	r3, r3, #1
 800acaa:	429a      	cmp	r2, r3
 800acac:	d920      	bls.n	800acf0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800acae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	4413      	add	r3, r2
 800acb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	f003 0307 	and.w	r3, r3, #7
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d00b      	beq.n	800acd8 <pvPortMalloc+0xfc>
	__asm volatile
 800acc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acc4:	f383 8811 	msr	BASEPRI, r3
 800acc8:	f3bf 8f6f 	isb	sy
 800accc:	f3bf 8f4f 	dsb	sy
 800acd0:	613b      	str	r3, [r7, #16]
}
 800acd2:	bf00      	nop
 800acd4:	bf00      	nop
 800acd6:	e7fd      	b.n	800acd4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800acd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acda:	685a      	ldr	r2, [r3, #4]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	1ad2      	subs	r2, r2, r3
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ace4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace6:	687a      	ldr	r2, [r7, #4]
 800ace8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800acea:	69b8      	ldr	r0, [r7, #24]
 800acec:	f000 f90a 	bl	800af04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800acf0:	4b1d      	ldr	r3, [pc, #116]	@ (800ad68 <pvPortMalloc+0x18c>)
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	4a1b      	ldr	r2, [pc, #108]	@ (800ad68 <pvPortMalloc+0x18c>)
 800acfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800acfe:	4b1a      	ldr	r3, [pc, #104]	@ (800ad68 <pvPortMalloc+0x18c>)
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	4b1b      	ldr	r3, [pc, #108]	@ (800ad70 <pvPortMalloc+0x194>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d203      	bcs.n	800ad12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ad0a:	4b17      	ldr	r3, [pc, #92]	@ (800ad68 <pvPortMalloc+0x18c>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4a18      	ldr	r2, [pc, #96]	@ (800ad70 <pvPortMalloc+0x194>)
 800ad10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ad12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad14:	685a      	ldr	r2, [r3, #4]
 800ad16:	4b13      	ldr	r3, [pc, #76]	@ (800ad64 <pvPortMalloc+0x188>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	431a      	orrs	r2, r3
 800ad1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ad20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad22:	2200      	movs	r2, #0
 800ad24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ad26:	4b13      	ldr	r3, [pc, #76]	@ (800ad74 <pvPortMalloc+0x198>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	4a11      	ldr	r2, [pc, #68]	@ (800ad74 <pvPortMalloc+0x198>)
 800ad2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ad30:	f7fe ffba 	bl	8009ca8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad34:	69fb      	ldr	r3, [r7, #28]
 800ad36:	f003 0307 	and.w	r3, r3, #7
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00b      	beq.n	800ad56 <pvPortMalloc+0x17a>
	__asm volatile
 800ad3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad42:	f383 8811 	msr	BASEPRI, r3
 800ad46:	f3bf 8f6f 	isb	sy
 800ad4a:	f3bf 8f4f 	dsb	sy
 800ad4e:	60fb      	str	r3, [r7, #12]
}
 800ad50:	bf00      	nop
 800ad52:	bf00      	nop
 800ad54:	e7fd      	b.n	800ad52 <pvPortMalloc+0x176>
	return pvReturn;
 800ad56:	69fb      	ldr	r3, [r7, #28]
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3728      	adds	r7, #40	@ 0x28
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	20005f34 	.word	0x20005f34
 800ad64:	20005f48 	.word	0x20005f48
 800ad68:	20005f38 	.word	0x20005f38
 800ad6c:	20005f2c 	.word	0x20005f2c
 800ad70:	20005f3c 	.word	0x20005f3c
 800ad74:	20005f40 	.word	0x20005f40

0800ad78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b086      	sub	sp, #24
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d04f      	beq.n	800ae2a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ad8a:	2308      	movs	r3, #8
 800ad8c:	425b      	negs	r3, r3
 800ad8e:	697a      	ldr	r2, [r7, #20]
 800ad90:	4413      	add	r3, r2
 800ad92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	685a      	ldr	r2, [r3, #4]
 800ad9c:	4b25      	ldr	r3, [pc, #148]	@ (800ae34 <vPortFree+0xbc>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4013      	ands	r3, r2
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d10b      	bne.n	800adbe <vPortFree+0x46>
	__asm volatile
 800ada6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adaa:	f383 8811 	msr	BASEPRI, r3
 800adae:	f3bf 8f6f 	isb	sy
 800adb2:	f3bf 8f4f 	dsb	sy
 800adb6:	60fb      	str	r3, [r7, #12]
}
 800adb8:	bf00      	nop
 800adba:	bf00      	nop
 800adbc:	e7fd      	b.n	800adba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d00b      	beq.n	800adde <vPortFree+0x66>
	__asm volatile
 800adc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adca:	f383 8811 	msr	BASEPRI, r3
 800adce:	f3bf 8f6f 	isb	sy
 800add2:	f3bf 8f4f 	dsb	sy
 800add6:	60bb      	str	r3, [r7, #8]
}
 800add8:	bf00      	nop
 800adda:	bf00      	nop
 800addc:	e7fd      	b.n	800adda <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	685a      	ldr	r2, [r3, #4]
 800ade2:	4b14      	ldr	r3, [pc, #80]	@ (800ae34 <vPortFree+0xbc>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4013      	ands	r3, r2
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d01e      	beq.n	800ae2a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d11a      	bne.n	800ae2a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	685a      	ldr	r2, [r3, #4]
 800adf8:	4b0e      	ldr	r3, [pc, #56]	@ (800ae34 <vPortFree+0xbc>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	43db      	mvns	r3, r3
 800adfe:	401a      	ands	r2, r3
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ae04:	f7fe ff42 	bl	8009c8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	685a      	ldr	r2, [r3, #4]
 800ae0c:	4b0a      	ldr	r3, [pc, #40]	@ (800ae38 <vPortFree+0xc0>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4413      	add	r3, r2
 800ae12:	4a09      	ldr	r2, [pc, #36]	@ (800ae38 <vPortFree+0xc0>)
 800ae14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ae16:	6938      	ldr	r0, [r7, #16]
 800ae18:	f000 f874 	bl	800af04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ae1c:	4b07      	ldr	r3, [pc, #28]	@ (800ae3c <vPortFree+0xc4>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	3301      	adds	r3, #1
 800ae22:	4a06      	ldr	r2, [pc, #24]	@ (800ae3c <vPortFree+0xc4>)
 800ae24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ae26:	f7fe ff3f 	bl	8009ca8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ae2a:	bf00      	nop
 800ae2c:	3718      	adds	r7, #24
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	20005f48 	.word	0x20005f48
 800ae38:	20005f38 	.word	0x20005f38
 800ae3c:	20005f44 	.word	0x20005f44

0800ae40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ae40:	b480      	push	{r7}
 800ae42:	b085      	sub	sp, #20
 800ae44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ae46:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800ae4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ae4c:	4b27      	ldr	r3, [pc, #156]	@ (800aeec <prvHeapInit+0xac>)
 800ae4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f003 0307 	and.w	r3, r3, #7
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d00c      	beq.n	800ae74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	3307      	adds	r3, #7
 800ae5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f023 0307 	bic.w	r3, r3, #7
 800ae66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae68:	68ba      	ldr	r2, [r7, #8]
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	1ad3      	subs	r3, r2, r3
 800ae6e:	4a1f      	ldr	r2, [pc, #124]	@ (800aeec <prvHeapInit+0xac>)
 800ae70:	4413      	add	r3, r2
 800ae72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae78:	4a1d      	ldr	r2, [pc, #116]	@ (800aef0 <prvHeapInit+0xb0>)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae7e:	4b1c      	ldr	r3, [pc, #112]	@ (800aef0 <prvHeapInit+0xb0>)
 800ae80:	2200      	movs	r2, #0
 800ae82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	68ba      	ldr	r2, [r7, #8]
 800ae88:	4413      	add	r3, r2
 800ae8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ae8c:	2208      	movs	r2, #8
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	1a9b      	subs	r3, r3, r2
 800ae92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f023 0307 	bic.w	r3, r3, #7
 800ae9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	4a15      	ldr	r2, [pc, #84]	@ (800aef4 <prvHeapInit+0xb4>)
 800aea0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aea2:	4b14      	ldr	r3, [pc, #80]	@ (800aef4 <prvHeapInit+0xb4>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2200      	movs	r2, #0
 800aea8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aeaa:	4b12      	ldr	r3, [pc, #72]	@ (800aef4 <prvHeapInit+0xb4>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	68fa      	ldr	r2, [r7, #12]
 800aeba:	1ad2      	subs	r2, r2, r3
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aec0:	4b0c      	ldr	r3, [pc, #48]	@ (800aef4 <prvHeapInit+0xb4>)
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	4a0a      	ldr	r2, [pc, #40]	@ (800aef8 <prvHeapInit+0xb8>)
 800aece:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	4a09      	ldr	r2, [pc, #36]	@ (800aefc <prvHeapInit+0xbc>)
 800aed6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aed8:	4b09      	ldr	r3, [pc, #36]	@ (800af00 <prvHeapInit+0xc0>)
 800aeda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800aede:	601a      	str	r2, [r3, #0]
}
 800aee0:	bf00      	nop
 800aee2:	3714      	adds	r7, #20
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr
 800aeec:	2000110c 	.word	0x2000110c
 800aef0:	20005f2c 	.word	0x20005f2c
 800aef4:	20005f34 	.word	0x20005f34
 800aef8:	20005f3c 	.word	0x20005f3c
 800aefc:	20005f38 	.word	0x20005f38
 800af00:	20005f48 	.word	0x20005f48

0800af04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800af04:	b480      	push	{r7}
 800af06:	b085      	sub	sp, #20
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800af0c:	4b28      	ldr	r3, [pc, #160]	@ (800afb0 <prvInsertBlockIntoFreeList+0xac>)
 800af0e:	60fb      	str	r3, [r7, #12]
 800af10:	e002      	b.n	800af18 <prvInsertBlockIntoFreeList+0x14>
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	60fb      	str	r3, [r7, #12]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	429a      	cmp	r2, r3
 800af20:	d8f7      	bhi.n	800af12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	68ba      	ldr	r2, [r7, #8]
 800af2c:	4413      	add	r3, r2
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	429a      	cmp	r2, r3
 800af32:	d108      	bne.n	800af46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	685a      	ldr	r2, [r3, #4]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	441a      	add	r2, r3
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	68ba      	ldr	r2, [r7, #8]
 800af50:	441a      	add	r2, r3
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	429a      	cmp	r2, r3
 800af58:	d118      	bne.n	800af8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681a      	ldr	r2, [r3, #0]
 800af5e:	4b15      	ldr	r3, [pc, #84]	@ (800afb4 <prvInsertBlockIntoFreeList+0xb0>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	429a      	cmp	r2, r3
 800af64:	d00d      	beq.n	800af82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	685a      	ldr	r2, [r3, #4]
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	441a      	add	r2, r3
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	601a      	str	r2, [r3, #0]
 800af80:	e008      	b.n	800af94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af82:	4b0c      	ldr	r3, [pc, #48]	@ (800afb4 <prvInsertBlockIntoFreeList+0xb0>)
 800af84:	681a      	ldr	r2, [r3, #0]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	601a      	str	r2, [r3, #0]
 800af8a:	e003      	b.n	800af94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681a      	ldr	r2, [r3, #0]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800af94:	68fa      	ldr	r2, [r7, #12]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	429a      	cmp	r2, r3
 800af9a:	d002      	beq.n	800afa2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afa2:	bf00      	nop
 800afa4:	3714      	adds	r7, #20
 800afa6:	46bd      	mov	sp, r7
 800afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afac:	4770      	bx	lr
 800afae:	bf00      	nop
 800afb0:	20005f2c 	.word	0x20005f2c
 800afb4:	20005f34 	.word	0x20005f34

0800afb8 <atoi>:
 800afb8:	220a      	movs	r2, #10
 800afba:	2100      	movs	r1, #0
 800afbc:	f000 b87a 	b.w	800b0b4 <strtol>

0800afc0 <_strtol_l.constprop.0>:
 800afc0:	2b24      	cmp	r3, #36	@ 0x24
 800afc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afc6:	4686      	mov	lr, r0
 800afc8:	4690      	mov	r8, r2
 800afca:	d801      	bhi.n	800afd0 <_strtol_l.constprop.0+0x10>
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d106      	bne.n	800afde <_strtol_l.constprop.0+0x1e>
 800afd0:	f000 fb5c 	bl	800b68c <__errno>
 800afd4:	2316      	movs	r3, #22
 800afd6:	6003      	str	r3, [r0, #0]
 800afd8:	2000      	movs	r0, #0
 800afda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afde:	4834      	ldr	r0, [pc, #208]	@ (800b0b0 <_strtol_l.constprop.0+0xf0>)
 800afe0:	460d      	mov	r5, r1
 800afe2:	462a      	mov	r2, r5
 800afe4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afe8:	5d06      	ldrb	r6, [r0, r4]
 800afea:	f016 0608 	ands.w	r6, r6, #8
 800afee:	d1f8      	bne.n	800afe2 <_strtol_l.constprop.0+0x22>
 800aff0:	2c2d      	cmp	r4, #45	@ 0x2d
 800aff2:	d12d      	bne.n	800b050 <_strtol_l.constprop.0+0x90>
 800aff4:	782c      	ldrb	r4, [r5, #0]
 800aff6:	2601      	movs	r6, #1
 800aff8:	1c95      	adds	r5, r2, #2
 800affa:	f033 0210 	bics.w	r2, r3, #16
 800affe:	d109      	bne.n	800b014 <_strtol_l.constprop.0+0x54>
 800b000:	2c30      	cmp	r4, #48	@ 0x30
 800b002:	d12a      	bne.n	800b05a <_strtol_l.constprop.0+0x9a>
 800b004:	782a      	ldrb	r2, [r5, #0]
 800b006:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b00a:	2a58      	cmp	r2, #88	@ 0x58
 800b00c:	d125      	bne.n	800b05a <_strtol_l.constprop.0+0x9a>
 800b00e:	786c      	ldrb	r4, [r5, #1]
 800b010:	2310      	movs	r3, #16
 800b012:	3502      	adds	r5, #2
 800b014:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b018:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800b01c:	2200      	movs	r2, #0
 800b01e:	fbbc f9f3 	udiv	r9, ip, r3
 800b022:	4610      	mov	r0, r2
 800b024:	fb03 ca19 	mls	sl, r3, r9, ip
 800b028:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b02c:	2f09      	cmp	r7, #9
 800b02e:	d81b      	bhi.n	800b068 <_strtol_l.constprop.0+0xa8>
 800b030:	463c      	mov	r4, r7
 800b032:	42a3      	cmp	r3, r4
 800b034:	dd27      	ble.n	800b086 <_strtol_l.constprop.0+0xc6>
 800b036:	1c57      	adds	r7, r2, #1
 800b038:	d007      	beq.n	800b04a <_strtol_l.constprop.0+0x8a>
 800b03a:	4581      	cmp	r9, r0
 800b03c:	d320      	bcc.n	800b080 <_strtol_l.constprop.0+0xc0>
 800b03e:	d101      	bne.n	800b044 <_strtol_l.constprop.0+0x84>
 800b040:	45a2      	cmp	sl, r4
 800b042:	db1d      	blt.n	800b080 <_strtol_l.constprop.0+0xc0>
 800b044:	fb00 4003 	mla	r0, r0, r3, r4
 800b048:	2201      	movs	r2, #1
 800b04a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b04e:	e7eb      	b.n	800b028 <_strtol_l.constprop.0+0x68>
 800b050:	2c2b      	cmp	r4, #43	@ 0x2b
 800b052:	bf04      	itt	eq
 800b054:	782c      	ldrbeq	r4, [r5, #0]
 800b056:	1c95      	addeq	r5, r2, #2
 800b058:	e7cf      	b.n	800affa <_strtol_l.constprop.0+0x3a>
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d1da      	bne.n	800b014 <_strtol_l.constprop.0+0x54>
 800b05e:	2c30      	cmp	r4, #48	@ 0x30
 800b060:	bf0c      	ite	eq
 800b062:	2308      	moveq	r3, #8
 800b064:	230a      	movne	r3, #10
 800b066:	e7d5      	b.n	800b014 <_strtol_l.constprop.0+0x54>
 800b068:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b06c:	2f19      	cmp	r7, #25
 800b06e:	d801      	bhi.n	800b074 <_strtol_l.constprop.0+0xb4>
 800b070:	3c37      	subs	r4, #55	@ 0x37
 800b072:	e7de      	b.n	800b032 <_strtol_l.constprop.0+0x72>
 800b074:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b078:	2f19      	cmp	r7, #25
 800b07a:	d804      	bhi.n	800b086 <_strtol_l.constprop.0+0xc6>
 800b07c:	3c57      	subs	r4, #87	@ 0x57
 800b07e:	e7d8      	b.n	800b032 <_strtol_l.constprop.0+0x72>
 800b080:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b084:	e7e1      	b.n	800b04a <_strtol_l.constprop.0+0x8a>
 800b086:	1c53      	adds	r3, r2, #1
 800b088:	d108      	bne.n	800b09c <_strtol_l.constprop.0+0xdc>
 800b08a:	2322      	movs	r3, #34	@ 0x22
 800b08c:	f8ce 3000 	str.w	r3, [lr]
 800b090:	4660      	mov	r0, ip
 800b092:	f1b8 0f00 	cmp.w	r8, #0
 800b096:	d0a0      	beq.n	800afda <_strtol_l.constprop.0+0x1a>
 800b098:	1e69      	subs	r1, r5, #1
 800b09a:	e006      	b.n	800b0aa <_strtol_l.constprop.0+0xea>
 800b09c:	b106      	cbz	r6, 800b0a0 <_strtol_l.constprop.0+0xe0>
 800b09e:	4240      	negs	r0, r0
 800b0a0:	f1b8 0f00 	cmp.w	r8, #0
 800b0a4:	d099      	beq.n	800afda <_strtol_l.constprop.0+0x1a>
 800b0a6:	2a00      	cmp	r2, #0
 800b0a8:	d1f6      	bne.n	800b098 <_strtol_l.constprop.0+0xd8>
 800b0aa:	f8c8 1000 	str.w	r1, [r8]
 800b0ae:	e794      	b.n	800afda <_strtol_l.constprop.0+0x1a>
 800b0b0:	0800c925 	.word	0x0800c925

0800b0b4 <strtol>:
 800b0b4:	4613      	mov	r3, r2
 800b0b6:	460a      	mov	r2, r1
 800b0b8:	4601      	mov	r1, r0
 800b0ba:	4802      	ldr	r0, [pc, #8]	@ (800b0c4 <strtol+0x10>)
 800b0bc:	6800      	ldr	r0, [r0, #0]
 800b0be:	f7ff bf7f 	b.w	800afc0 <_strtol_l.constprop.0>
 800b0c2:	bf00      	nop
 800b0c4:	20000024 	.word	0x20000024

0800b0c8 <std>:
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	b510      	push	{r4, lr}
 800b0cc:	4604      	mov	r4, r0
 800b0ce:	e9c0 3300 	strd	r3, r3, [r0]
 800b0d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b0d6:	6083      	str	r3, [r0, #8]
 800b0d8:	8181      	strh	r1, [r0, #12]
 800b0da:	6643      	str	r3, [r0, #100]	@ 0x64
 800b0dc:	81c2      	strh	r2, [r0, #14]
 800b0de:	6183      	str	r3, [r0, #24]
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	2208      	movs	r2, #8
 800b0e4:	305c      	adds	r0, #92	@ 0x5c
 800b0e6:	f000 fa2d 	bl	800b544 <memset>
 800b0ea:	4b0d      	ldr	r3, [pc, #52]	@ (800b120 <std+0x58>)
 800b0ec:	6263      	str	r3, [r4, #36]	@ 0x24
 800b0ee:	4b0d      	ldr	r3, [pc, #52]	@ (800b124 <std+0x5c>)
 800b0f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b0f2:	4b0d      	ldr	r3, [pc, #52]	@ (800b128 <std+0x60>)
 800b0f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b0f6:	4b0d      	ldr	r3, [pc, #52]	@ (800b12c <std+0x64>)
 800b0f8:	6323      	str	r3, [r4, #48]	@ 0x30
 800b0fa:	4b0d      	ldr	r3, [pc, #52]	@ (800b130 <std+0x68>)
 800b0fc:	6224      	str	r4, [r4, #32]
 800b0fe:	429c      	cmp	r4, r3
 800b100:	d006      	beq.n	800b110 <std+0x48>
 800b102:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b106:	4294      	cmp	r4, r2
 800b108:	d002      	beq.n	800b110 <std+0x48>
 800b10a:	33d0      	adds	r3, #208	@ 0xd0
 800b10c:	429c      	cmp	r4, r3
 800b10e:	d105      	bne.n	800b11c <std+0x54>
 800b110:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b118:	f000 bae2 	b.w	800b6e0 <__retarget_lock_init_recursive>
 800b11c:	bd10      	pop	{r4, pc}
 800b11e:	bf00      	nop
 800b120:	0800b395 	.word	0x0800b395
 800b124:	0800b3b7 	.word	0x0800b3b7
 800b128:	0800b3ef 	.word	0x0800b3ef
 800b12c:	0800b413 	.word	0x0800b413
 800b130:	20005f4c 	.word	0x20005f4c

0800b134 <stdio_exit_handler>:
 800b134:	4a02      	ldr	r2, [pc, #8]	@ (800b140 <stdio_exit_handler+0xc>)
 800b136:	4903      	ldr	r1, [pc, #12]	@ (800b144 <stdio_exit_handler+0x10>)
 800b138:	4803      	ldr	r0, [pc, #12]	@ (800b148 <stdio_exit_handler+0x14>)
 800b13a:	f000 b869 	b.w	800b210 <_fwalk_sglue>
 800b13e:	bf00      	nop
 800b140:	20000018 	.word	0x20000018
 800b144:	0800c24d 	.word	0x0800c24d
 800b148:	20000028 	.word	0x20000028

0800b14c <cleanup_stdio>:
 800b14c:	6841      	ldr	r1, [r0, #4]
 800b14e:	4b0c      	ldr	r3, [pc, #48]	@ (800b180 <cleanup_stdio+0x34>)
 800b150:	4299      	cmp	r1, r3
 800b152:	b510      	push	{r4, lr}
 800b154:	4604      	mov	r4, r0
 800b156:	d001      	beq.n	800b15c <cleanup_stdio+0x10>
 800b158:	f001 f878 	bl	800c24c <_fflush_r>
 800b15c:	68a1      	ldr	r1, [r4, #8]
 800b15e:	4b09      	ldr	r3, [pc, #36]	@ (800b184 <cleanup_stdio+0x38>)
 800b160:	4299      	cmp	r1, r3
 800b162:	d002      	beq.n	800b16a <cleanup_stdio+0x1e>
 800b164:	4620      	mov	r0, r4
 800b166:	f001 f871 	bl	800c24c <_fflush_r>
 800b16a:	68e1      	ldr	r1, [r4, #12]
 800b16c:	4b06      	ldr	r3, [pc, #24]	@ (800b188 <cleanup_stdio+0x3c>)
 800b16e:	4299      	cmp	r1, r3
 800b170:	d004      	beq.n	800b17c <cleanup_stdio+0x30>
 800b172:	4620      	mov	r0, r4
 800b174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b178:	f001 b868 	b.w	800c24c <_fflush_r>
 800b17c:	bd10      	pop	{r4, pc}
 800b17e:	bf00      	nop
 800b180:	20005f4c 	.word	0x20005f4c
 800b184:	20005fb4 	.word	0x20005fb4
 800b188:	2000601c 	.word	0x2000601c

0800b18c <global_stdio_init.part.0>:
 800b18c:	b510      	push	{r4, lr}
 800b18e:	4b0b      	ldr	r3, [pc, #44]	@ (800b1bc <global_stdio_init.part.0+0x30>)
 800b190:	4c0b      	ldr	r4, [pc, #44]	@ (800b1c0 <global_stdio_init.part.0+0x34>)
 800b192:	4a0c      	ldr	r2, [pc, #48]	@ (800b1c4 <global_stdio_init.part.0+0x38>)
 800b194:	601a      	str	r2, [r3, #0]
 800b196:	4620      	mov	r0, r4
 800b198:	2200      	movs	r2, #0
 800b19a:	2104      	movs	r1, #4
 800b19c:	f7ff ff94 	bl	800b0c8 <std>
 800b1a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	2109      	movs	r1, #9
 800b1a8:	f7ff ff8e 	bl	800b0c8 <std>
 800b1ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b1b0:	2202      	movs	r2, #2
 800b1b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1b6:	2112      	movs	r1, #18
 800b1b8:	f7ff bf86 	b.w	800b0c8 <std>
 800b1bc:	20006084 	.word	0x20006084
 800b1c0:	20005f4c 	.word	0x20005f4c
 800b1c4:	0800b135 	.word	0x0800b135

0800b1c8 <__sfp_lock_acquire>:
 800b1c8:	4801      	ldr	r0, [pc, #4]	@ (800b1d0 <__sfp_lock_acquire+0x8>)
 800b1ca:	f000 ba8a 	b.w	800b6e2 <__retarget_lock_acquire_recursive>
 800b1ce:	bf00      	nop
 800b1d0:	2000608d 	.word	0x2000608d

0800b1d4 <__sfp_lock_release>:
 800b1d4:	4801      	ldr	r0, [pc, #4]	@ (800b1dc <__sfp_lock_release+0x8>)
 800b1d6:	f000 ba85 	b.w	800b6e4 <__retarget_lock_release_recursive>
 800b1da:	bf00      	nop
 800b1dc:	2000608d 	.word	0x2000608d

0800b1e0 <__sinit>:
 800b1e0:	b510      	push	{r4, lr}
 800b1e2:	4604      	mov	r4, r0
 800b1e4:	f7ff fff0 	bl	800b1c8 <__sfp_lock_acquire>
 800b1e8:	6a23      	ldr	r3, [r4, #32]
 800b1ea:	b11b      	cbz	r3, 800b1f4 <__sinit+0x14>
 800b1ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1f0:	f7ff bff0 	b.w	800b1d4 <__sfp_lock_release>
 800b1f4:	4b04      	ldr	r3, [pc, #16]	@ (800b208 <__sinit+0x28>)
 800b1f6:	6223      	str	r3, [r4, #32]
 800b1f8:	4b04      	ldr	r3, [pc, #16]	@ (800b20c <__sinit+0x2c>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d1f5      	bne.n	800b1ec <__sinit+0xc>
 800b200:	f7ff ffc4 	bl	800b18c <global_stdio_init.part.0>
 800b204:	e7f2      	b.n	800b1ec <__sinit+0xc>
 800b206:	bf00      	nop
 800b208:	0800b14d 	.word	0x0800b14d
 800b20c:	20006084 	.word	0x20006084

0800b210 <_fwalk_sglue>:
 800b210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b214:	4607      	mov	r7, r0
 800b216:	4688      	mov	r8, r1
 800b218:	4614      	mov	r4, r2
 800b21a:	2600      	movs	r6, #0
 800b21c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b220:	f1b9 0901 	subs.w	r9, r9, #1
 800b224:	d505      	bpl.n	800b232 <_fwalk_sglue+0x22>
 800b226:	6824      	ldr	r4, [r4, #0]
 800b228:	2c00      	cmp	r4, #0
 800b22a:	d1f7      	bne.n	800b21c <_fwalk_sglue+0xc>
 800b22c:	4630      	mov	r0, r6
 800b22e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b232:	89ab      	ldrh	r3, [r5, #12]
 800b234:	2b01      	cmp	r3, #1
 800b236:	d907      	bls.n	800b248 <_fwalk_sglue+0x38>
 800b238:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b23c:	3301      	adds	r3, #1
 800b23e:	d003      	beq.n	800b248 <_fwalk_sglue+0x38>
 800b240:	4629      	mov	r1, r5
 800b242:	4638      	mov	r0, r7
 800b244:	47c0      	blx	r8
 800b246:	4306      	orrs	r6, r0
 800b248:	3568      	adds	r5, #104	@ 0x68
 800b24a:	e7e9      	b.n	800b220 <_fwalk_sglue+0x10>

0800b24c <iprintf>:
 800b24c:	b40f      	push	{r0, r1, r2, r3}
 800b24e:	b507      	push	{r0, r1, r2, lr}
 800b250:	4906      	ldr	r1, [pc, #24]	@ (800b26c <iprintf+0x20>)
 800b252:	ab04      	add	r3, sp, #16
 800b254:	6808      	ldr	r0, [r1, #0]
 800b256:	f853 2b04 	ldr.w	r2, [r3], #4
 800b25a:	6881      	ldr	r1, [r0, #8]
 800b25c:	9301      	str	r3, [sp, #4]
 800b25e:	f000 fccb 	bl	800bbf8 <_vfiprintf_r>
 800b262:	b003      	add	sp, #12
 800b264:	f85d eb04 	ldr.w	lr, [sp], #4
 800b268:	b004      	add	sp, #16
 800b26a:	4770      	bx	lr
 800b26c:	20000024 	.word	0x20000024

0800b270 <_puts_r>:
 800b270:	6a03      	ldr	r3, [r0, #32]
 800b272:	b570      	push	{r4, r5, r6, lr}
 800b274:	6884      	ldr	r4, [r0, #8]
 800b276:	4605      	mov	r5, r0
 800b278:	460e      	mov	r6, r1
 800b27a:	b90b      	cbnz	r3, 800b280 <_puts_r+0x10>
 800b27c:	f7ff ffb0 	bl	800b1e0 <__sinit>
 800b280:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b282:	07db      	lsls	r3, r3, #31
 800b284:	d405      	bmi.n	800b292 <_puts_r+0x22>
 800b286:	89a3      	ldrh	r3, [r4, #12]
 800b288:	0598      	lsls	r0, r3, #22
 800b28a:	d402      	bmi.n	800b292 <_puts_r+0x22>
 800b28c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b28e:	f000 fa28 	bl	800b6e2 <__retarget_lock_acquire_recursive>
 800b292:	89a3      	ldrh	r3, [r4, #12]
 800b294:	0719      	lsls	r1, r3, #28
 800b296:	d502      	bpl.n	800b29e <_puts_r+0x2e>
 800b298:	6923      	ldr	r3, [r4, #16]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d135      	bne.n	800b30a <_puts_r+0x9a>
 800b29e:	4621      	mov	r1, r4
 800b2a0:	4628      	mov	r0, r5
 800b2a2:	f000 f8f9 	bl	800b498 <__swsetup_r>
 800b2a6:	b380      	cbz	r0, 800b30a <_puts_r+0x9a>
 800b2a8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b2ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b2ae:	07da      	lsls	r2, r3, #31
 800b2b0:	d405      	bmi.n	800b2be <_puts_r+0x4e>
 800b2b2:	89a3      	ldrh	r3, [r4, #12]
 800b2b4:	059b      	lsls	r3, r3, #22
 800b2b6:	d402      	bmi.n	800b2be <_puts_r+0x4e>
 800b2b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2ba:	f000 fa13 	bl	800b6e4 <__retarget_lock_release_recursive>
 800b2be:	4628      	mov	r0, r5
 800b2c0:	bd70      	pop	{r4, r5, r6, pc}
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	da04      	bge.n	800b2d0 <_puts_r+0x60>
 800b2c6:	69a2      	ldr	r2, [r4, #24]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	dc17      	bgt.n	800b2fc <_puts_r+0x8c>
 800b2cc:	290a      	cmp	r1, #10
 800b2ce:	d015      	beq.n	800b2fc <_puts_r+0x8c>
 800b2d0:	6823      	ldr	r3, [r4, #0]
 800b2d2:	1c5a      	adds	r2, r3, #1
 800b2d4:	6022      	str	r2, [r4, #0]
 800b2d6:	7019      	strb	r1, [r3, #0]
 800b2d8:	68a3      	ldr	r3, [r4, #8]
 800b2da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b2de:	3b01      	subs	r3, #1
 800b2e0:	60a3      	str	r3, [r4, #8]
 800b2e2:	2900      	cmp	r1, #0
 800b2e4:	d1ed      	bne.n	800b2c2 <_puts_r+0x52>
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	da11      	bge.n	800b30e <_puts_r+0x9e>
 800b2ea:	4622      	mov	r2, r4
 800b2ec:	210a      	movs	r1, #10
 800b2ee:	4628      	mov	r0, r5
 800b2f0:	f000 f893 	bl	800b41a <__swbuf_r>
 800b2f4:	3001      	adds	r0, #1
 800b2f6:	d0d7      	beq.n	800b2a8 <_puts_r+0x38>
 800b2f8:	250a      	movs	r5, #10
 800b2fa:	e7d7      	b.n	800b2ac <_puts_r+0x3c>
 800b2fc:	4622      	mov	r2, r4
 800b2fe:	4628      	mov	r0, r5
 800b300:	f000 f88b 	bl	800b41a <__swbuf_r>
 800b304:	3001      	adds	r0, #1
 800b306:	d1e7      	bne.n	800b2d8 <_puts_r+0x68>
 800b308:	e7ce      	b.n	800b2a8 <_puts_r+0x38>
 800b30a:	3e01      	subs	r6, #1
 800b30c:	e7e4      	b.n	800b2d8 <_puts_r+0x68>
 800b30e:	6823      	ldr	r3, [r4, #0]
 800b310:	1c5a      	adds	r2, r3, #1
 800b312:	6022      	str	r2, [r4, #0]
 800b314:	220a      	movs	r2, #10
 800b316:	701a      	strb	r2, [r3, #0]
 800b318:	e7ee      	b.n	800b2f8 <_puts_r+0x88>
	...

0800b31c <puts>:
 800b31c:	4b02      	ldr	r3, [pc, #8]	@ (800b328 <puts+0xc>)
 800b31e:	4601      	mov	r1, r0
 800b320:	6818      	ldr	r0, [r3, #0]
 800b322:	f7ff bfa5 	b.w	800b270 <_puts_r>
 800b326:	bf00      	nop
 800b328:	20000024 	.word	0x20000024

0800b32c <sniprintf>:
 800b32c:	b40c      	push	{r2, r3}
 800b32e:	b530      	push	{r4, r5, lr}
 800b330:	4b17      	ldr	r3, [pc, #92]	@ (800b390 <sniprintf+0x64>)
 800b332:	1e0c      	subs	r4, r1, #0
 800b334:	681d      	ldr	r5, [r3, #0]
 800b336:	b09d      	sub	sp, #116	@ 0x74
 800b338:	da08      	bge.n	800b34c <sniprintf+0x20>
 800b33a:	238b      	movs	r3, #139	@ 0x8b
 800b33c:	602b      	str	r3, [r5, #0]
 800b33e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b342:	b01d      	add	sp, #116	@ 0x74
 800b344:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b348:	b002      	add	sp, #8
 800b34a:	4770      	bx	lr
 800b34c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b350:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b354:	bf14      	ite	ne
 800b356:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800b35a:	4623      	moveq	r3, r4
 800b35c:	9304      	str	r3, [sp, #16]
 800b35e:	9307      	str	r3, [sp, #28]
 800b360:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b364:	9002      	str	r0, [sp, #8]
 800b366:	9006      	str	r0, [sp, #24]
 800b368:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b36c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b36e:	ab21      	add	r3, sp, #132	@ 0x84
 800b370:	a902      	add	r1, sp, #8
 800b372:	4628      	mov	r0, r5
 800b374:	9301      	str	r3, [sp, #4]
 800b376:	f000 fb19 	bl	800b9ac <_svfiprintf_r>
 800b37a:	1c43      	adds	r3, r0, #1
 800b37c:	bfbc      	itt	lt
 800b37e:	238b      	movlt	r3, #139	@ 0x8b
 800b380:	602b      	strlt	r3, [r5, #0]
 800b382:	2c00      	cmp	r4, #0
 800b384:	d0dd      	beq.n	800b342 <sniprintf+0x16>
 800b386:	9b02      	ldr	r3, [sp, #8]
 800b388:	2200      	movs	r2, #0
 800b38a:	701a      	strb	r2, [r3, #0]
 800b38c:	e7d9      	b.n	800b342 <sniprintf+0x16>
 800b38e:	bf00      	nop
 800b390:	20000024 	.word	0x20000024

0800b394 <__sread>:
 800b394:	b510      	push	{r4, lr}
 800b396:	460c      	mov	r4, r1
 800b398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b39c:	f000 f952 	bl	800b644 <_read_r>
 800b3a0:	2800      	cmp	r0, #0
 800b3a2:	bfab      	itete	ge
 800b3a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b3a6:	89a3      	ldrhlt	r3, [r4, #12]
 800b3a8:	181b      	addge	r3, r3, r0
 800b3aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b3ae:	bfac      	ite	ge
 800b3b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b3b2:	81a3      	strhlt	r3, [r4, #12]
 800b3b4:	bd10      	pop	{r4, pc}

0800b3b6 <__swrite>:
 800b3b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ba:	461f      	mov	r7, r3
 800b3bc:	898b      	ldrh	r3, [r1, #12]
 800b3be:	05db      	lsls	r3, r3, #23
 800b3c0:	4605      	mov	r5, r0
 800b3c2:	460c      	mov	r4, r1
 800b3c4:	4616      	mov	r6, r2
 800b3c6:	d505      	bpl.n	800b3d4 <__swrite+0x1e>
 800b3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3cc:	2302      	movs	r3, #2
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f000 f926 	bl	800b620 <_lseek_r>
 800b3d4:	89a3      	ldrh	r3, [r4, #12]
 800b3d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b3de:	81a3      	strh	r3, [r4, #12]
 800b3e0:	4632      	mov	r2, r6
 800b3e2:	463b      	mov	r3, r7
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ea:	f000 b93d 	b.w	800b668 <_write_r>

0800b3ee <__sseek>:
 800b3ee:	b510      	push	{r4, lr}
 800b3f0:	460c      	mov	r4, r1
 800b3f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3f6:	f000 f913 	bl	800b620 <_lseek_r>
 800b3fa:	1c43      	adds	r3, r0, #1
 800b3fc:	89a3      	ldrh	r3, [r4, #12]
 800b3fe:	bf15      	itete	ne
 800b400:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b402:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b406:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b40a:	81a3      	strheq	r3, [r4, #12]
 800b40c:	bf18      	it	ne
 800b40e:	81a3      	strhne	r3, [r4, #12]
 800b410:	bd10      	pop	{r4, pc}

0800b412 <__sclose>:
 800b412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b416:	f000 b89d 	b.w	800b554 <_close_r>

0800b41a <__swbuf_r>:
 800b41a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b41c:	460e      	mov	r6, r1
 800b41e:	4614      	mov	r4, r2
 800b420:	4605      	mov	r5, r0
 800b422:	b118      	cbz	r0, 800b42c <__swbuf_r+0x12>
 800b424:	6a03      	ldr	r3, [r0, #32]
 800b426:	b90b      	cbnz	r3, 800b42c <__swbuf_r+0x12>
 800b428:	f7ff feda 	bl	800b1e0 <__sinit>
 800b42c:	69a3      	ldr	r3, [r4, #24]
 800b42e:	60a3      	str	r3, [r4, #8]
 800b430:	89a3      	ldrh	r3, [r4, #12]
 800b432:	071a      	lsls	r2, r3, #28
 800b434:	d501      	bpl.n	800b43a <__swbuf_r+0x20>
 800b436:	6923      	ldr	r3, [r4, #16]
 800b438:	b943      	cbnz	r3, 800b44c <__swbuf_r+0x32>
 800b43a:	4621      	mov	r1, r4
 800b43c:	4628      	mov	r0, r5
 800b43e:	f000 f82b 	bl	800b498 <__swsetup_r>
 800b442:	b118      	cbz	r0, 800b44c <__swbuf_r+0x32>
 800b444:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b448:	4638      	mov	r0, r7
 800b44a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b44c:	6823      	ldr	r3, [r4, #0]
 800b44e:	6922      	ldr	r2, [r4, #16]
 800b450:	1a98      	subs	r0, r3, r2
 800b452:	6963      	ldr	r3, [r4, #20]
 800b454:	b2f6      	uxtb	r6, r6
 800b456:	4283      	cmp	r3, r0
 800b458:	4637      	mov	r7, r6
 800b45a:	dc05      	bgt.n	800b468 <__swbuf_r+0x4e>
 800b45c:	4621      	mov	r1, r4
 800b45e:	4628      	mov	r0, r5
 800b460:	f000 fef4 	bl	800c24c <_fflush_r>
 800b464:	2800      	cmp	r0, #0
 800b466:	d1ed      	bne.n	800b444 <__swbuf_r+0x2a>
 800b468:	68a3      	ldr	r3, [r4, #8]
 800b46a:	3b01      	subs	r3, #1
 800b46c:	60a3      	str	r3, [r4, #8]
 800b46e:	6823      	ldr	r3, [r4, #0]
 800b470:	1c5a      	adds	r2, r3, #1
 800b472:	6022      	str	r2, [r4, #0]
 800b474:	701e      	strb	r6, [r3, #0]
 800b476:	6962      	ldr	r2, [r4, #20]
 800b478:	1c43      	adds	r3, r0, #1
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d004      	beq.n	800b488 <__swbuf_r+0x6e>
 800b47e:	89a3      	ldrh	r3, [r4, #12]
 800b480:	07db      	lsls	r3, r3, #31
 800b482:	d5e1      	bpl.n	800b448 <__swbuf_r+0x2e>
 800b484:	2e0a      	cmp	r6, #10
 800b486:	d1df      	bne.n	800b448 <__swbuf_r+0x2e>
 800b488:	4621      	mov	r1, r4
 800b48a:	4628      	mov	r0, r5
 800b48c:	f000 fede 	bl	800c24c <_fflush_r>
 800b490:	2800      	cmp	r0, #0
 800b492:	d0d9      	beq.n	800b448 <__swbuf_r+0x2e>
 800b494:	e7d6      	b.n	800b444 <__swbuf_r+0x2a>
	...

0800b498 <__swsetup_r>:
 800b498:	b538      	push	{r3, r4, r5, lr}
 800b49a:	4b29      	ldr	r3, [pc, #164]	@ (800b540 <__swsetup_r+0xa8>)
 800b49c:	4605      	mov	r5, r0
 800b49e:	6818      	ldr	r0, [r3, #0]
 800b4a0:	460c      	mov	r4, r1
 800b4a2:	b118      	cbz	r0, 800b4ac <__swsetup_r+0x14>
 800b4a4:	6a03      	ldr	r3, [r0, #32]
 800b4a6:	b90b      	cbnz	r3, 800b4ac <__swsetup_r+0x14>
 800b4a8:	f7ff fe9a 	bl	800b1e0 <__sinit>
 800b4ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4b0:	0719      	lsls	r1, r3, #28
 800b4b2:	d422      	bmi.n	800b4fa <__swsetup_r+0x62>
 800b4b4:	06da      	lsls	r2, r3, #27
 800b4b6:	d407      	bmi.n	800b4c8 <__swsetup_r+0x30>
 800b4b8:	2209      	movs	r2, #9
 800b4ba:	602a      	str	r2, [r5, #0]
 800b4bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4c0:	81a3      	strh	r3, [r4, #12]
 800b4c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b4c6:	e033      	b.n	800b530 <__swsetup_r+0x98>
 800b4c8:	0758      	lsls	r0, r3, #29
 800b4ca:	d512      	bpl.n	800b4f2 <__swsetup_r+0x5a>
 800b4cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b4ce:	b141      	cbz	r1, 800b4e2 <__swsetup_r+0x4a>
 800b4d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b4d4:	4299      	cmp	r1, r3
 800b4d6:	d002      	beq.n	800b4de <__swsetup_r+0x46>
 800b4d8:	4628      	mov	r0, r5
 800b4da:	f000 f913 	bl	800b704 <_free_r>
 800b4de:	2300      	movs	r3, #0
 800b4e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b4e2:	89a3      	ldrh	r3, [r4, #12]
 800b4e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b4e8:	81a3      	strh	r3, [r4, #12]
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	6063      	str	r3, [r4, #4]
 800b4ee:	6923      	ldr	r3, [r4, #16]
 800b4f0:	6023      	str	r3, [r4, #0]
 800b4f2:	89a3      	ldrh	r3, [r4, #12]
 800b4f4:	f043 0308 	orr.w	r3, r3, #8
 800b4f8:	81a3      	strh	r3, [r4, #12]
 800b4fa:	6923      	ldr	r3, [r4, #16]
 800b4fc:	b94b      	cbnz	r3, 800b512 <__swsetup_r+0x7a>
 800b4fe:	89a3      	ldrh	r3, [r4, #12]
 800b500:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b504:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b508:	d003      	beq.n	800b512 <__swsetup_r+0x7a>
 800b50a:	4621      	mov	r1, r4
 800b50c:	4628      	mov	r0, r5
 800b50e:	f000 feeb 	bl	800c2e8 <__smakebuf_r>
 800b512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b516:	f013 0201 	ands.w	r2, r3, #1
 800b51a:	d00a      	beq.n	800b532 <__swsetup_r+0x9a>
 800b51c:	2200      	movs	r2, #0
 800b51e:	60a2      	str	r2, [r4, #8]
 800b520:	6962      	ldr	r2, [r4, #20]
 800b522:	4252      	negs	r2, r2
 800b524:	61a2      	str	r2, [r4, #24]
 800b526:	6922      	ldr	r2, [r4, #16]
 800b528:	b942      	cbnz	r2, 800b53c <__swsetup_r+0xa4>
 800b52a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b52e:	d1c5      	bne.n	800b4bc <__swsetup_r+0x24>
 800b530:	bd38      	pop	{r3, r4, r5, pc}
 800b532:	0799      	lsls	r1, r3, #30
 800b534:	bf58      	it	pl
 800b536:	6962      	ldrpl	r2, [r4, #20]
 800b538:	60a2      	str	r2, [r4, #8]
 800b53a:	e7f4      	b.n	800b526 <__swsetup_r+0x8e>
 800b53c:	2000      	movs	r0, #0
 800b53e:	e7f7      	b.n	800b530 <__swsetup_r+0x98>
 800b540:	20000024 	.word	0x20000024

0800b544 <memset>:
 800b544:	4402      	add	r2, r0
 800b546:	4603      	mov	r3, r0
 800b548:	4293      	cmp	r3, r2
 800b54a:	d100      	bne.n	800b54e <memset+0xa>
 800b54c:	4770      	bx	lr
 800b54e:	f803 1b01 	strb.w	r1, [r3], #1
 800b552:	e7f9      	b.n	800b548 <memset+0x4>

0800b554 <_close_r>:
 800b554:	b538      	push	{r3, r4, r5, lr}
 800b556:	4d06      	ldr	r5, [pc, #24]	@ (800b570 <_close_r+0x1c>)
 800b558:	2300      	movs	r3, #0
 800b55a:	4604      	mov	r4, r0
 800b55c:	4608      	mov	r0, r1
 800b55e:	602b      	str	r3, [r5, #0]
 800b560:	f7f5 ff15 	bl	800138e <_close>
 800b564:	1c43      	adds	r3, r0, #1
 800b566:	d102      	bne.n	800b56e <_close_r+0x1a>
 800b568:	682b      	ldr	r3, [r5, #0]
 800b56a:	b103      	cbz	r3, 800b56e <_close_r+0x1a>
 800b56c:	6023      	str	r3, [r4, #0]
 800b56e:	bd38      	pop	{r3, r4, r5, pc}
 800b570:	20006088 	.word	0x20006088

0800b574 <_reclaim_reent>:
 800b574:	4b29      	ldr	r3, [pc, #164]	@ (800b61c <_reclaim_reent+0xa8>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	4283      	cmp	r3, r0
 800b57a:	b570      	push	{r4, r5, r6, lr}
 800b57c:	4604      	mov	r4, r0
 800b57e:	d04b      	beq.n	800b618 <_reclaim_reent+0xa4>
 800b580:	69c3      	ldr	r3, [r0, #28]
 800b582:	b1ab      	cbz	r3, 800b5b0 <_reclaim_reent+0x3c>
 800b584:	68db      	ldr	r3, [r3, #12]
 800b586:	b16b      	cbz	r3, 800b5a4 <_reclaim_reent+0x30>
 800b588:	2500      	movs	r5, #0
 800b58a:	69e3      	ldr	r3, [r4, #28]
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	5959      	ldr	r1, [r3, r5]
 800b590:	2900      	cmp	r1, #0
 800b592:	d13b      	bne.n	800b60c <_reclaim_reent+0x98>
 800b594:	3504      	adds	r5, #4
 800b596:	2d80      	cmp	r5, #128	@ 0x80
 800b598:	d1f7      	bne.n	800b58a <_reclaim_reent+0x16>
 800b59a:	69e3      	ldr	r3, [r4, #28]
 800b59c:	4620      	mov	r0, r4
 800b59e:	68d9      	ldr	r1, [r3, #12]
 800b5a0:	f000 f8b0 	bl	800b704 <_free_r>
 800b5a4:	69e3      	ldr	r3, [r4, #28]
 800b5a6:	6819      	ldr	r1, [r3, #0]
 800b5a8:	b111      	cbz	r1, 800b5b0 <_reclaim_reent+0x3c>
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	f000 f8aa 	bl	800b704 <_free_r>
 800b5b0:	6961      	ldr	r1, [r4, #20]
 800b5b2:	b111      	cbz	r1, 800b5ba <_reclaim_reent+0x46>
 800b5b4:	4620      	mov	r0, r4
 800b5b6:	f000 f8a5 	bl	800b704 <_free_r>
 800b5ba:	69e1      	ldr	r1, [r4, #28]
 800b5bc:	b111      	cbz	r1, 800b5c4 <_reclaim_reent+0x50>
 800b5be:	4620      	mov	r0, r4
 800b5c0:	f000 f8a0 	bl	800b704 <_free_r>
 800b5c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b5c6:	b111      	cbz	r1, 800b5ce <_reclaim_reent+0x5a>
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	f000 f89b 	bl	800b704 <_free_r>
 800b5ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b5d0:	b111      	cbz	r1, 800b5d8 <_reclaim_reent+0x64>
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	f000 f896 	bl	800b704 <_free_r>
 800b5d8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b5da:	b111      	cbz	r1, 800b5e2 <_reclaim_reent+0x6e>
 800b5dc:	4620      	mov	r0, r4
 800b5de:	f000 f891 	bl	800b704 <_free_r>
 800b5e2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b5e4:	b111      	cbz	r1, 800b5ec <_reclaim_reent+0x78>
 800b5e6:	4620      	mov	r0, r4
 800b5e8:	f000 f88c 	bl	800b704 <_free_r>
 800b5ec:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b5ee:	b111      	cbz	r1, 800b5f6 <_reclaim_reent+0x82>
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	f000 f887 	bl	800b704 <_free_r>
 800b5f6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b5f8:	b111      	cbz	r1, 800b600 <_reclaim_reent+0x8c>
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	f000 f882 	bl	800b704 <_free_r>
 800b600:	6a23      	ldr	r3, [r4, #32]
 800b602:	b14b      	cbz	r3, 800b618 <_reclaim_reent+0xa4>
 800b604:	4620      	mov	r0, r4
 800b606:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b60a:	4718      	bx	r3
 800b60c:	680e      	ldr	r6, [r1, #0]
 800b60e:	4620      	mov	r0, r4
 800b610:	f000 f878 	bl	800b704 <_free_r>
 800b614:	4631      	mov	r1, r6
 800b616:	e7bb      	b.n	800b590 <_reclaim_reent+0x1c>
 800b618:	bd70      	pop	{r4, r5, r6, pc}
 800b61a:	bf00      	nop
 800b61c:	20000024 	.word	0x20000024

0800b620 <_lseek_r>:
 800b620:	b538      	push	{r3, r4, r5, lr}
 800b622:	4d07      	ldr	r5, [pc, #28]	@ (800b640 <_lseek_r+0x20>)
 800b624:	4604      	mov	r4, r0
 800b626:	4608      	mov	r0, r1
 800b628:	4611      	mov	r1, r2
 800b62a:	2200      	movs	r2, #0
 800b62c:	602a      	str	r2, [r5, #0]
 800b62e:	461a      	mov	r2, r3
 800b630:	f7f5 fed4 	bl	80013dc <_lseek>
 800b634:	1c43      	adds	r3, r0, #1
 800b636:	d102      	bne.n	800b63e <_lseek_r+0x1e>
 800b638:	682b      	ldr	r3, [r5, #0]
 800b63a:	b103      	cbz	r3, 800b63e <_lseek_r+0x1e>
 800b63c:	6023      	str	r3, [r4, #0]
 800b63e:	bd38      	pop	{r3, r4, r5, pc}
 800b640:	20006088 	.word	0x20006088

0800b644 <_read_r>:
 800b644:	b538      	push	{r3, r4, r5, lr}
 800b646:	4d07      	ldr	r5, [pc, #28]	@ (800b664 <_read_r+0x20>)
 800b648:	4604      	mov	r4, r0
 800b64a:	4608      	mov	r0, r1
 800b64c:	4611      	mov	r1, r2
 800b64e:	2200      	movs	r2, #0
 800b650:	602a      	str	r2, [r5, #0]
 800b652:	461a      	mov	r2, r3
 800b654:	f7f5 fe62 	bl	800131c <_read>
 800b658:	1c43      	adds	r3, r0, #1
 800b65a:	d102      	bne.n	800b662 <_read_r+0x1e>
 800b65c:	682b      	ldr	r3, [r5, #0]
 800b65e:	b103      	cbz	r3, 800b662 <_read_r+0x1e>
 800b660:	6023      	str	r3, [r4, #0]
 800b662:	bd38      	pop	{r3, r4, r5, pc}
 800b664:	20006088 	.word	0x20006088

0800b668 <_write_r>:
 800b668:	b538      	push	{r3, r4, r5, lr}
 800b66a:	4d07      	ldr	r5, [pc, #28]	@ (800b688 <_write_r+0x20>)
 800b66c:	4604      	mov	r4, r0
 800b66e:	4608      	mov	r0, r1
 800b670:	4611      	mov	r1, r2
 800b672:	2200      	movs	r2, #0
 800b674:	602a      	str	r2, [r5, #0]
 800b676:	461a      	mov	r2, r3
 800b678:	f7f5 fe6d 	bl	8001356 <_write>
 800b67c:	1c43      	adds	r3, r0, #1
 800b67e:	d102      	bne.n	800b686 <_write_r+0x1e>
 800b680:	682b      	ldr	r3, [r5, #0]
 800b682:	b103      	cbz	r3, 800b686 <_write_r+0x1e>
 800b684:	6023      	str	r3, [r4, #0]
 800b686:	bd38      	pop	{r3, r4, r5, pc}
 800b688:	20006088 	.word	0x20006088

0800b68c <__errno>:
 800b68c:	4b01      	ldr	r3, [pc, #4]	@ (800b694 <__errno+0x8>)
 800b68e:	6818      	ldr	r0, [r3, #0]
 800b690:	4770      	bx	lr
 800b692:	bf00      	nop
 800b694:	20000024 	.word	0x20000024

0800b698 <__libc_init_array>:
 800b698:	b570      	push	{r4, r5, r6, lr}
 800b69a:	4d0d      	ldr	r5, [pc, #52]	@ (800b6d0 <__libc_init_array+0x38>)
 800b69c:	4c0d      	ldr	r4, [pc, #52]	@ (800b6d4 <__libc_init_array+0x3c>)
 800b69e:	1b64      	subs	r4, r4, r5
 800b6a0:	10a4      	asrs	r4, r4, #2
 800b6a2:	2600      	movs	r6, #0
 800b6a4:	42a6      	cmp	r6, r4
 800b6a6:	d109      	bne.n	800b6bc <__libc_init_array+0x24>
 800b6a8:	4d0b      	ldr	r5, [pc, #44]	@ (800b6d8 <__libc_init_array+0x40>)
 800b6aa:	4c0c      	ldr	r4, [pc, #48]	@ (800b6dc <__libc_init_array+0x44>)
 800b6ac:	f000 feda 	bl	800c464 <_init>
 800b6b0:	1b64      	subs	r4, r4, r5
 800b6b2:	10a4      	asrs	r4, r4, #2
 800b6b4:	2600      	movs	r6, #0
 800b6b6:	42a6      	cmp	r6, r4
 800b6b8:	d105      	bne.n	800b6c6 <__libc_init_array+0x2e>
 800b6ba:	bd70      	pop	{r4, r5, r6, pc}
 800b6bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6c0:	4798      	blx	r3
 800b6c2:	3601      	adds	r6, #1
 800b6c4:	e7ee      	b.n	800b6a4 <__libc_init_array+0xc>
 800b6c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6ca:	4798      	blx	r3
 800b6cc:	3601      	adds	r6, #1
 800b6ce:	e7f2      	b.n	800b6b6 <__libc_init_array+0x1e>
 800b6d0:	0800ca60 	.word	0x0800ca60
 800b6d4:	0800ca60 	.word	0x0800ca60
 800b6d8:	0800ca60 	.word	0x0800ca60
 800b6dc:	0800ca64 	.word	0x0800ca64

0800b6e0 <__retarget_lock_init_recursive>:
 800b6e0:	4770      	bx	lr

0800b6e2 <__retarget_lock_acquire_recursive>:
 800b6e2:	4770      	bx	lr

0800b6e4 <__retarget_lock_release_recursive>:
 800b6e4:	4770      	bx	lr

0800b6e6 <memcpy>:
 800b6e6:	440a      	add	r2, r1
 800b6e8:	4291      	cmp	r1, r2
 800b6ea:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b6ee:	d100      	bne.n	800b6f2 <memcpy+0xc>
 800b6f0:	4770      	bx	lr
 800b6f2:	b510      	push	{r4, lr}
 800b6f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6fc:	4291      	cmp	r1, r2
 800b6fe:	d1f9      	bne.n	800b6f4 <memcpy+0xe>
 800b700:	bd10      	pop	{r4, pc}
	...

0800b704 <_free_r>:
 800b704:	b538      	push	{r3, r4, r5, lr}
 800b706:	4605      	mov	r5, r0
 800b708:	2900      	cmp	r1, #0
 800b70a:	d041      	beq.n	800b790 <_free_r+0x8c>
 800b70c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b710:	1f0c      	subs	r4, r1, #4
 800b712:	2b00      	cmp	r3, #0
 800b714:	bfb8      	it	lt
 800b716:	18e4      	addlt	r4, r4, r3
 800b718:	f000 f8e0 	bl	800b8dc <__malloc_lock>
 800b71c:	4a1d      	ldr	r2, [pc, #116]	@ (800b794 <_free_r+0x90>)
 800b71e:	6813      	ldr	r3, [r2, #0]
 800b720:	b933      	cbnz	r3, 800b730 <_free_r+0x2c>
 800b722:	6063      	str	r3, [r4, #4]
 800b724:	6014      	str	r4, [r2, #0]
 800b726:	4628      	mov	r0, r5
 800b728:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b72c:	f000 b8dc 	b.w	800b8e8 <__malloc_unlock>
 800b730:	42a3      	cmp	r3, r4
 800b732:	d908      	bls.n	800b746 <_free_r+0x42>
 800b734:	6820      	ldr	r0, [r4, #0]
 800b736:	1821      	adds	r1, r4, r0
 800b738:	428b      	cmp	r3, r1
 800b73a:	bf01      	itttt	eq
 800b73c:	6819      	ldreq	r1, [r3, #0]
 800b73e:	685b      	ldreq	r3, [r3, #4]
 800b740:	1809      	addeq	r1, r1, r0
 800b742:	6021      	streq	r1, [r4, #0]
 800b744:	e7ed      	b.n	800b722 <_free_r+0x1e>
 800b746:	461a      	mov	r2, r3
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	b10b      	cbz	r3, 800b750 <_free_r+0x4c>
 800b74c:	42a3      	cmp	r3, r4
 800b74e:	d9fa      	bls.n	800b746 <_free_r+0x42>
 800b750:	6811      	ldr	r1, [r2, #0]
 800b752:	1850      	adds	r0, r2, r1
 800b754:	42a0      	cmp	r0, r4
 800b756:	d10b      	bne.n	800b770 <_free_r+0x6c>
 800b758:	6820      	ldr	r0, [r4, #0]
 800b75a:	4401      	add	r1, r0
 800b75c:	1850      	adds	r0, r2, r1
 800b75e:	4283      	cmp	r3, r0
 800b760:	6011      	str	r1, [r2, #0]
 800b762:	d1e0      	bne.n	800b726 <_free_r+0x22>
 800b764:	6818      	ldr	r0, [r3, #0]
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	6053      	str	r3, [r2, #4]
 800b76a:	4408      	add	r0, r1
 800b76c:	6010      	str	r0, [r2, #0]
 800b76e:	e7da      	b.n	800b726 <_free_r+0x22>
 800b770:	d902      	bls.n	800b778 <_free_r+0x74>
 800b772:	230c      	movs	r3, #12
 800b774:	602b      	str	r3, [r5, #0]
 800b776:	e7d6      	b.n	800b726 <_free_r+0x22>
 800b778:	6820      	ldr	r0, [r4, #0]
 800b77a:	1821      	adds	r1, r4, r0
 800b77c:	428b      	cmp	r3, r1
 800b77e:	bf04      	itt	eq
 800b780:	6819      	ldreq	r1, [r3, #0]
 800b782:	685b      	ldreq	r3, [r3, #4]
 800b784:	6063      	str	r3, [r4, #4]
 800b786:	bf04      	itt	eq
 800b788:	1809      	addeq	r1, r1, r0
 800b78a:	6021      	streq	r1, [r4, #0]
 800b78c:	6054      	str	r4, [r2, #4]
 800b78e:	e7ca      	b.n	800b726 <_free_r+0x22>
 800b790:	bd38      	pop	{r3, r4, r5, pc}
 800b792:	bf00      	nop
 800b794:	20006094 	.word	0x20006094

0800b798 <sbrk_aligned>:
 800b798:	b570      	push	{r4, r5, r6, lr}
 800b79a:	4e0f      	ldr	r6, [pc, #60]	@ (800b7d8 <sbrk_aligned+0x40>)
 800b79c:	460c      	mov	r4, r1
 800b79e:	6831      	ldr	r1, [r6, #0]
 800b7a0:	4605      	mov	r5, r0
 800b7a2:	b911      	cbnz	r1, 800b7aa <sbrk_aligned+0x12>
 800b7a4:	f000 fe18 	bl	800c3d8 <_sbrk_r>
 800b7a8:	6030      	str	r0, [r6, #0]
 800b7aa:	4621      	mov	r1, r4
 800b7ac:	4628      	mov	r0, r5
 800b7ae:	f000 fe13 	bl	800c3d8 <_sbrk_r>
 800b7b2:	1c43      	adds	r3, r0, #1
 800b7b4:	d103      	bne.n	800b7be <sbrk_aligned+0x26>
 800b7b6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	bd70      	pop	{r4, r5, r6, pc}
 800b7be:	1cc4      	adds	r4, r0, #3
 800b7c0:	f024 0403 	bic.w	r4, r4, #3
 800b7c4:	42a0      	cmp	r0, r4
 800b7c6:	d0f8      	beq.n	800b7ba <sbrk_aligned+0x22>
 800b7c8:	1a21      	subs	r1, r4, r0
 800b7ca:	4628      	mov	r0, r5
 800b7cc:	f000 fe04 	bl	800c3d8 <_sbrk_r>
 800b7d0:	3001      	adds	r0, #1
 800b7d2:	d1f2      	bne.n	800b7ba <sbrk_aligned+0x22>
 800b7d4:	e7ef      	b.n	800b7b6 <sbrk_aligned+0x1e>
 800b7d6:	bf00      	nop
 800b7d8:	20006090 	.word	0x20006090

0800b7dc <_malloc_r>:
 800b7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7e0:	1ccd      	adds	r5, r1, #3
 800b7e2:	f025 0503 	bic.w	r5, r5, #3
 800b7e6:	3508      	adds	r5, #8
 800b7e8:	2d0c      	cmp	r5, #12
 800b7ea:	bf38      	it	cc
 800b7ec:	250c      	movcc	r5, #12
 800b7ee:	2d00      	cmp	r5, #0
 800b7f0:	4606      	mov	r6, r0
 800b7f2:	db01      	blt.n	800b7f8 <_malloc_r+0x1c>
 800b7f4:	42a9      	cmp	r1, r5
 800b7f6:	d904      	bls.n	800b802 <_malloc_r+0x26>
 800b7f8:	230c      	movs	r3, #12
 800b7fa:	6033      	str	r3, [r6, #0]
 800b7fc:	2000      	movs	r0, #0
 800b7fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b802:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b8d8 <_malloc_r+0xfc>
 800b806:	f000 f869 	bl	800b8dc <__malloc_lock>
 800b80a:	f8d8 3000 	ldr.w	r3, [r8]
 800b80e:	461c      	mov	r4, r3
 800b810:	bb44      	cbnz	r4, 800b864 <_malloc_r+0x88>
 800b812:	4629      	mov	r1, r5
 800b814:	4630      	mov	r0, r6
 800b816:	f7ff ffbf 	bl	800b798 <sbrk_aligned>
 800b81a:	1c43      	adds	r3, r0, #1
 800b81c:	4604      	mov	r4, r0
 800b81e:	d158      	bne.n	800b8d2 <_malloc_r+0xf6>
 800b820:	f8d8 4000 	ldr.w	r4, [r8]
 800b824:	4627      	mov	r7, r4
 800b826:	2f00      	cmp	r7, #0
 800b828:	d143      	bne.n	800b8b2 <_malloc_r+0xd6>
 800b82a:	2c00      	cmp	r4, #0
 800b82c:	d04b      	beq.n	800b8c6 <_malloc_r+0xea>
 800b82e:	6823      	ldr	r3, [r4, #0]
 800b830:	4639      	mov	r1, r7
 800b832:	4630      	mov	r0, r6
 800b834:	eb04 0903 	add.w	r9, r4, r3
 800b838:	f000 fdce 	bl	800c3d8 <_sbrk_r>
 800b83c:	4581      	cmp	r9, r0
 800b83e:	d142      	bne.n	800b8c6 <_malloc_r+0xea>
 800b840:	6821      	ldr	r1, [r4, #0]
 800b842:	1a6d      	subs	r5, r5, r1
 800b844:	4629      	mov	r1, r5
 800b846:	4630      	mov	r0, r6
 800b848:	f7ff ffa6 	bl	800b798 <sbrk_aligned>
 800b84c:	3001      	adds	r0, #1
 800b84e:	d03a      	beq.n	800b8c6 <_malloc_r+0xea>
 800b850:	6823      	ldr	r3, [r4, #0]
 800b852:	442b      	add	r3, r5
 800b854:	6023      	str	r3, [r4, #0]
 800b856:	f8d8 3000 	ldr.w	r3, [r8]
 800b85a:	685a      	ldr	r2, [r3, #4]
 800b85c:	bb62      	cbnz	r2, 800b8b8 <_malloc_r+0xdc>
 800b85e:	f8c8 7000 	str.w	r7, [r8]
 800b862:	e00f      	b.n	800b884 <_malloc_r+0xa8>
 800b864:	6822      	ldr	r2, [r4, #0]
 800b866:	1b52      	subs	r2, r2, r5
 800b868:	d420      	bmi.n	800b8ac <_malloc_r+0xd0>
 800b86a:	2a0b      	cmp	r2, #11
 800b86c:	d917      	bls.n	800b89e <_malloc_r+0xc2>
 800b86e:	1961      	adds	r1, r4, r5
 800b870:	42a3      	cmp	r3, r4
 800b872:	6025      	str	r5, [r4, #0]
 800b874:	bf18      	it	ne
 800b876:	6059      	strne	r1, [r3, #4]
 800b878:	6863      	ldr	r3, [r4, #4]
 800b87a:	bf08      	it	eq
 800b87c:	f8c8 1000 	streq.w	r1, [r8]
 800b880:	5162      	str	r2, [r4, r5]
 800b882:	604b      	str	r3, [r1, #4]
 800b884:	4630      	mov	r0, r6
 800b886:	f000 f82f 	bl	800b8e8 <__malloc_unlock>
 800b88a:	f104 000b 	add.w	r0, r4, #11
 800b88e:	1d23      	adds	r3, r4, #4
 800b890:	f020 0007 	bic.w	r0, r0, #7
 800b894:	1ac2      	subs	r2, r0, r3
 800b896:	bf1c      	itt	ne
 800b898:	1a1b      	subne	r3, r3, r0
 800b89a:	50a3      	strne	r3, [r4, r2]
 800b89c:	e7af      	b.n	800b7fe <_malloc_r+0x22>
 800b89e:	6862      	ldr	r2, [r4, #4]
 800b8a0:	42a3      	cmp	r3, r4
 800b8a2:	bf0c      	ite	eq
 800b8a4:	f8c8 2000 	streq.w	r2, [r8]
 800b8a8:	605a      	strne	r2, [r3, #4]
 800b8aa:	e7eb      	b.n	800b884 <_malloc_r+0xa8>
 800b8ac:	4623      	mov	r3, r4
 800b8ae:	6864      	ldr	r4, [r4, #4]
 800b8b0:	e7ae      	b.n	800b810 <_malloc_r+0x34>
 800b8b2:	463c      	mov	r4, r7
 800b8b4:	687f      	ldr	r7, [r7, #4]
 800b8b6:	e7b6      	b.n	800b826 <_malloc_r+0x4a>
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	42a3      	cmp	r3, r4
 800b8be:	d1fb      	bne.n	800b8b8 <_malloc_r+0xdc>
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	6053      	str	r3, [r2, #4]
 800b8c4:	e7de      	b.n	800b884 <_malloc_r+0xa8>
 800b8c6:	230c      	movs	r3, #12
 800b8c8:	6033      	str	r3, [r6, #0]
 800b8ca:	4630      	mov	r0, r6
 800b8cc:	f000 f80c 	bl	800b8e8 <__malloc_unlock>
 800b8d0:	e794      	b.n	800b7fc <_malloc_r+0x20>
 800b8d2:	6005      	str	r5, [r0, #0]
 800b8d4:	e7d6      	b.n	800b884 <_malloc_r+0xa8>
 800b8d6:	bf00      	nop
 800b8d8:	20006094 	.word	0x20006094

0800b8dc <__malloc_lock>:
 800b8dc:	4801      	ldr	r0, [pc, #4]	@ (800b8e4 <__malloc_lock+0x8>)
 800b8de:	f7ff bf00 	b.w	800b6e2 <__retarget_lock_acquire_recursive>
 800b8e2:	bf00      	nop
 800b8e4:	2000608c 	.word	0x2000608c

0800b8e8 <__malloc_unlock>:
 800b8e8:	4801      	ldr	r0, [pc, #4]	@ (800b8f0 <__malloc_unlock+0x8>)
 800b8ea:	f7ff befb 	b.w	800b6e4 <__retarget_lock_release_recursive>
 800b8ee:	bf00      	nop
 800b8f0:	2000608c 	.word	0x2000608c

0800b8f4 <__ssputs_r>:
 800b8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8f8:	688e      	ldr	r6, [r1, #8]
 800b8fa:	461f      	mov	r7, r3
 800b8fc:	42be      	cmp	r6, r7
 800b8fe:	680b      	ldr	r3, [r1, #0]
 800b900:	4682      	mov	sl, r0
 800b902:	460c      	mov	r4, r1
 800b904:	4690      	mov	r8, r2
 800b906:	d82d      	bhi.n	800b964 <__ssputs_r+0x70>
 800b908:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b90c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b910:	d026      	beq.n	800b960 <__ssputs_r+0x6c>
 800b912:	6965      	ldr	r5, [r4, #20]
 800b914:	6909      	ldr	r1, [r1, #16]
 800b916:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b91a:	eba3 0901 	sub.w	r9, r3, r1
 800b91e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b922:	1c7b      	adds	r3, r7, #1
 800b924:	444b      	add	r3, r9
 800b926:	106d      	asrs	r5, r5, #1
 800b928:	429d      	cmp	r5, r3
 800b92a:	bf38      	it	cc
 800b92c:	461d      	movcc	r5, r3
 800b92e:	0553      	lsls	r3, r2, #21
 800b930:	d527      	bpl.n	800b982 <__ssputs_r+0x8e>
 800b932:	4629      	mov	r1, r5
 800b934:	f7ff ff52 	bl	800b7dc <_malloc_r>
 800b938:	4606      	mov	r6, r0
 800b93a:	b360      	cbz	r0, 800b996 <__ssputs_r+0xa2>
 800b93c:	6921      	ldr	r1, [r4, #16]
 800b93e:	464a      	mov	r2, r9
 800b940:	f7ff fed1 	bl	800b6e6 <memcpy>
 800b944:	89a3      	ldrh	r3, [r4, #12]
 800b946:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b94a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b94e:	81a3      	strh	r3, [r4, #12]
 800b950:	6126      	str	r6, [r4, #16]
 800b952:	6165      	str	r5, [r4, #20]
 800b954:	444e      	add	r6, r9
 800b956:	eba5 0509 	sub.w	r5, r5, r9
 800b95a:	6026      	str	r6, [r4, #0]
 800b95c:	60a5      	str	r5, [r4, #8]
 800b95e:	463e      	mov	r6, r7
 800b960:	42be      	cmp	r6, r7
 800b962:	d900      	bls.n	800b966 <__ssputs_r+0x72>
 800b964:	463e      	mov	r6, r7
 800b966:	6820      	ldr	r0, [r4, #0]
 800b968:	4632      	mov	r2, r6
 800b96a:	4641      	mov	r1, r8
 800b96c:	f000 fcf8 	bl	800c360 <memmove>
 800b970:	68a3      	ldr	r3, [r4, #8]
 800b972:	1b9b      	subs	r3, r3, r6
 800b974:	60a3      	str	r3, [r4, #8]
 800b976:	6823      	ldr	r3, [r4, #0]
 800b978:	4433      	add	r3, r6
 800b97a:	6023      	str	r3, [r4, #0]
 800b97c:	2000      	movs	r0, #0
 800b97e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b982:	462a      	mov	r2, r5
 800b984:	f000 fd38 	bl	800c3f8 <_realloc_r>
 800b988:	4606      	mov	r6, r0
 800b98a:	2800      	cmp	r0, #0
 800b98c:	d1e0      	bne.n	800b950 <__ssputs_r+0x5c>
 800b98e:	6921      	ldr	r1, [r4, #16]
 800b990:	4650      	mov	r0, sl
 800b992:	f7ff feb7 	bl	800b704 <_free_r>
 800b996:	230c      	movs	r3, #12
 800b998:	f8ca 3000 	str.w	r3, [sl]
 800b99c:	89a3      	ldrh	r3, [r4, #12]
 800b99e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9a2:	81a3      	strh	r3, [r4, #12]
 800b9a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b9a8:	e7e9      	b.n	800b97e <__ssputs_r+0x8a>
	...

0800b9ac <_svfiprintf_r>:
 800b9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9b0:	4698      	mov	r8, r3
 800b9b2:	898b      	ldrh	r3, [r1, #12]
 800b9b4:	061b      	lsls	r3, r3, #24
 800b9b6:	b09d      	sub	sp, #116	@ 0x74
 800b9b8:	4607      	mov	r7, r0
 800b9ba:	460d      	mov	r5, r1
 800b9bc:	4614      	mov	r4, r2
 800b9be:	d510      	bpl.n	800b9e2 <_svfiprintf_r+0x36>
 800b9c0:	690b      	ldr	r3, [r1, #16]
 800b9c2:	b973      	cbnz	r3, 800b9e2 <_svfiprintf_r+0x36>
 800b9c4:	2140      	movs	r1, #64	@ 0x40
 800b9c6:	f7ff ff09 	bl	800b7dc <_malloc_r>
 800b9ca:	6028      	str	r0, [r5, #0]
 800b9cc:	6128      	str	r0, [r5, #16]
 800b9ce:	b930      	cbnz	r0, 800b9de <_svfiprintf_r+0x32>
 800b9d0:	230c      	movs	r3, #12
 800b9d2:	603b      	str	r3, [r7, #0]
 800b9d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b9d8:	b01d      	add	sp, #116	@ 0x74
 800b9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9de:	2340      	movs	r3, #64	@ 0x40
 800b9e0:	616b      	str	r3, [r5, #20]
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9e6:	2320      	movs	r3, #32
 800b9e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b9ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9f0:	2330      	movs	r3, #48	@ 0x30
 800b9f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bb90 <_svfiprintf_r+0x1e4>
 800b9f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b9fa:	f04f 0901 	mov.w	r9, #1
 800b9fe:	4623      	mov	r3, r4
 800ba00:	469a      	mov	sl, r3
 800ba02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba06:	b10a      	cbz	r2, 800ba0c <_svfiprintf_r+0x60>
 800ba08:	2a25      	cmp	r2, #37	@ 0x25
 800ba0a:	d1f9      	bne.n	800ba00 <_svfiprintf_r+0x54>
 800ba0c:	ebba 0b04 	subs.w	fp, sl, r4
 800ba10:	d00b      	beq.n	800ba2a <_svfiprintf_r+0x7e>
 800ba12:	465b      	mov	r3, fp
 800ba14:	4622      	mov	r2, r4
 800ba16:	4629      	mov	r1, r5
 800ba18:	4638      	mov	r0, r7
 800ba1a:	f7ff ff6b 	bl	800b8f4 <__ssputs_r>
 800ba1e:	3001      	adds	r0, #1
 800ba20:	f000 80a7 	beq.w	800bb72 <_svfiprintf_r+0x1c6>
 800ba24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba26:	445a      	add	r2, fp
 800ba28:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba2a:	f89a 3000 	ldrb.w	r3, [sl]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	f000 809f 	beq.w	800bb72 <_svfiprintf_r+0x1c6>
 800ba34:	2300      	movs	r3, #0
 800ba36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ba3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba3e:	f10a 0a01 	add.w	sl, sl, #1
 800ba42:	9304      	str	r3, [sp, #16]
 800ba44:	9307      	str	r3, [sp, #28]
 800ba46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ba4a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ba4c:	4654      	mov	r4, sl
 800ba4e:	2205      	movs	r2, #5
 800ba50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba54:	484e      	ldr	r0, [pc, #312]	@ (800bb90 <_svfiprintf_r+0x1e4>)
 800ba56:	f7f4 fbbb 	bl	80001d0 <memchr>
 800ba5a:	9a04      	ldr	r2, [sp, #16]
 800ba5c:	b9d8      	cbnz	r0, 800ba96 <_svfiprintf_r+0xea>
 800ba5e:	06d0      	lsls	r0, r2, #27
 800ba60:	bf44      	itt	mi
 800ba62:	2320      	movmi	r3, #32
 800ba64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba68:	0711      	lsls	r1, r2, #28
 800ba6a:	bf44      	itt	mi
 800ba6c:	232b      	movmi	r3, #43	@ 0x2b
 800ba6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba72:	f89a 3000 	ldrb.w	r3, [sl]
 800ba76:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba78:	d015      	beq.n	800baa6 <_svfiprintf_r+0xfa>
 800ba7a:	9a07      	ldr	r2, [sp, #28]
 800ba7c:	4654      	mov	r4, sl
 800ba7e:	2000      	movs	r0, #0
 800ba80:	f04f 0c0a 	mov.w	ip, #10
 800ba84:	4621      	mov	r1, r4
 800ba86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba8a:	3b30      	subs	r3, #48	@ 0x30
 800ba8c:	2b09      	cmp	r3, #9
 800ba8e:	d94b      	bls.n	800bb28 <_svfiprintf_r+0x17c>
 800ba90:	b1b0      	cbz	r0, 800bac0 <_svfiprintf_r+0x114>
 800ba92:	9207      	str	r2, [sp, #28]
 800ba94:	e014      	b.n	800bac0 <_svfiprintf_r+0x114>
 800ba96:	eba0 0308 	sub.w	r3, r0, r8
 800ba9a:	fa09 f303 	lsl.w	r3, r9, r3
 800ba9e:	4313      	orrs	r3, r2
 800baa0:	9304      	str	r3, [sp, #16]
 800baa2:	46a2      	mov	sl, r4
 800baa4:	e7d2      	b.n	800ba4c <_svfiprintf_r+0xa0>
 800baa6:	9b03      	ldr	r3, [sp, #12]
 800baa8:	1d19      	adds	r1, r3, #4
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	9103      	str	r1, [sp, #12]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	bfbb      	ittet	lt
 800bab2:	425b      	neglt	r3, r3
 800bab4:	f042 0202 	orrlt.w	r2, r2, #2
 800bab8:	9307      	strge	r3, [sp, #28]
 800baba:	9307      	strlt	r3, [sp, #28]
 800babc:	bfb8      	it	lt
 800babe:	9204      	strlt	r2, [sp, #16]
 800bac0:	7823      	ldrb	r3, [r4, #0]
 800bac2:	2b2e      	cmp	r3, #46	@ 0x2e
 800bac4:	d10a      	bne.n	800badc <_svfiprintf_r+0x130>
 800bac6:	7863      	ldrb	r3, [r4, #1]
 800bac8:	2b2a      	cmp	r3, #42	@ 0x2a
 800baca:	d132      	bne.n	800bb32 <_svfiprintf_r+0x186>
 800bacc:	9b03      	ldr	r3, [sp, #12]
 800bace:	1d1a      	adds	r2, r3, #4
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	9203      	str	r2, [sp, #12]
 800bad4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bad8:	3402      	adds	r4, #2
 800bada:	9305      	str	r3, [sp, #20]
 800badc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bba0 <_svfiprintf_r+0x1f4>
 800bae0:	7821      	ldrb	r1, [r4, #0]
 800bae2:	2203      	movs	r2, #3
 800bae4:	4650      	mov	r0, sl
 800bae6:	f7f4 fb73 	bl	80001d0 <memchr>
 800baea:	b138      	cbz	r0, 800bafc <_svfiprintf_r+0x150>
 800baec:	9b04      	ldr	r3, [sp, #16]
 800baee:	eba0 000a 	sub.w	r0, r0, sl
 800baf2:	2240      	movs	r2, #64	@ 0x40
 800baf4:	4082      	lsls	r2, r0
 800baf6:	4313      	orrs	r3, r2
 800baf8:	3401      	adds	r4, #1
 800bafa:	9304      	str	r3, [sp, #16]
 800bafc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb00:	4824      	ldr	r0, [pc, #144]	@ (800bb94 <_svfiprintf_r+0x1e8>)
 800bb02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bb06:	2206      	movs	r2, #6
 800bb08:	f7f4 fb62 	bl	80001d0 <memchr>
 800bb0c:	2800      	cmp	r0, #0
 800bb0e:	d036      	beq.n	800bb7e <_svfiprintf_r+0x1d2>
 800bb10:	4b21      	ldr	r3, [pc, #132]	@ (800bb98 <_svfiprintf_r+0x1ec>)
 800bb12:	bb1b      	cbnz	r3, 800bb5c <_svfiprintf_r+0x1b0>
 800bb14:	9b03      	ldr	r3, [sp, #12]
 800bb16:	3307      	adds	r3, #7
 800bb18:	f023 0307 	bic.w	r3, r3, #7
 800bb1c:	3308      	adds	r3, #8
 800bb1e:	9303      	str	r3, [sp, #12]
 800bb20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb22:	4433      	add	r3, r6
 800bb24:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb26:	e76a      	b.n	800b9fe <_svfiprintf_r+0x52>
 800bb28:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb2c:	460c      	mov	r4, r1
 800bb2e:	2001      	movs	r0, #1
 800bb30:	e7a8      	b.n	800ba84 <_svfiprintf_r+0xd8>
 800bb32:	2300      	movs	r3, #0
 800bb34:	3401      	adds	r4, #1
 800bb36:	9305      	str	r3, [sp, #20]
 800bb38:	4619      	mov	r1, r3
 800bb3a:	f04f 0c0a 	mov.w	ip, #10
 800bb3e:	4620      	mov	r0, r4
 800bb40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb44:	3a30      	subs	r2, #48	@ 0x30
 800bb46:	2a09      	cmp	r2, #9
 800bb48:	d903      	bls.n	800bb52 <_svfiprintf_r+0x1a6>
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d0c6      	beq.n	800badc <_svfiprintf_r+0x130>
 800bb4e:	9105      	str	r1, [sp, #20]
 800bb50:	e7c4      	b.n	800badc <_svfiprintf_r+0x130>
 800bb52:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb56:	4604      	mov	r4, r0
 800bb58:	2301      	movs	r3, #1
 800bb5a:	e7f0      	b.n	800bb3e <_svfiprintf_r+0x192>
 800bb5c:	ab03      	add	r3, sp, #12
 800bb5e:	9300      	str	r3, [sp, #0]
 800bb60:	462a      	mov	r2, r5
 800bb62:	4b0e      	ldr	r3, [pc, #56]	@ (800bb9c <_svfiprintf_r+0x1f0>)
 800bb64:	a904      	add	r1, sp, #16
 800bb66:	4638      	mov	r0, r7
 800bb68:	f3af 8000 	nop.w
 800bb6c:	1c42      	adds	r2, r0, #1
 800bb6e:	4606      	mov	r6, r0
 800bb70:	d1d6      	bne.n	800bb20 <_svfiprintf_r+0x174>
 800bb72:	89ab      	ldrh	r3, [r5, #12]
 800bb74:	065b      	lsls	r3, r3, #25
 800bb76:	f53f af2d 	bmi.w	800b9d4 <_svfiprintf_r+0x28>
 800bb7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb7c:	e72c      	b.n	800b9d8 <_svfiprintf_r+0x2c>
 800bb7e:	ab03      	add	r3, sp, #12
 800bb80:	9300      	str	r3, [sp, #0]
 800bb82:	462a      	mov	r2, r5
 800bb84:	4b05      	ldr	r3, [pc, #20]	@ (800bb9c <_svfiprintf_r+0x1f0>)
 800bb86:	a904      	add	r1, sp, #16
 800bb88:	4638      	mov	r0, r7
 800bb8a:	f000 f9bb 	bl	800bf04 <_printf_i>
 800bb8e:	e7ed      	b.n	800bb6c <_svfiprintf_r+0x1c0>
 800bb90:	0800ca25 	.word	0x0800ca25
 800bb94:	0800ca2f 	.word	0x0800ca2f
 800bb98:	00000000 	.word	0x00000000
 800bb9c:	0800b8f5 	.word	0x0800b8f5
 800bba0:	0800ca2b 	.word	0x0800ca2b

0800bba4 <__sfputc_r>:
 800bba4:	6893      	ldr	r3, [r2, #8]
 800bba6:	3b01      	subs	r3, #1
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	b410      	push	{r4}
 800bbac:	6093      	str	r3, [r2, #8]
 800bbae:	da08      	bge.n	800bbc2 <__sfputc_r+0x1e>
 800bbb0:	6994      	ldr	r4, [r2, #24]
 800bbb2:	42a3      	cmp	r3, r4
 800bbb4:	db01      	blt.n	800bbba <__sfputc_r+0x16>
 800bbb6:	290a      	cmp	r1, #10
 800bbb8:	d103      	bne.n	800bbc2 <__sfputc_r+0x1e>
 800bbba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbbe:	f7ff bc2c 	b.w	800b41a <__swbuf_r>
 800bbc2:	6813      	ldr	r3, [r2, #0]
 800bbc4:	1c58      	adds	r0, r3, #1
 800bbc6:	6010      	str	r0, [r2, #0]
 800bbc8:	7019      	strb	r1, [r3, #0]
 800bbca:	4608      	mov	r0, r1
 800bbcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbd0:	4770      	bx	lr

0800bbd2 <__sfputs_r>:
 800bbd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbd4:	4606      	mov	r6, r0
 800bbd6:	460f      	mov	r7, r1
 800bbd8:	4614      	mov	r4, r2
 800bbda:	18d5      	adds	r5, r2, r3
 800bbdc:	42ac      	cmp	r4, r5
 800bbde:	d101      	bne.n	800bbe4 <__sfputs_r+0x12>
 800bbe0:	2000      	movs	r0, #0
 800bbe2:	e007      	b.n	800bbf4 <__sfputs_r+0x22>
 800bbe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbe8:	463a      	mov	r2, r7
 800bbea:	4630      	mov	r0, r6
 800bbec:	f7ff ffda 	bl	800bba4 <__sfputc_r>
 800bbf0:	1c43      	adds	r3, r0, #1
 800bbf2:	d1f3      	bne.n	800bbdc <__sfputs_r+0xa>
 800bbf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bbf8 <_vfiprintf_r>:
 800bbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbfc:	460d      	mov	r5, r1
 800bbfe:	b09d      	sub	sp, #116	@ 0x74
 800bc00:	4614      	mov	r4, r2
 800bc02:	4698      	mov	r8, r3
 800bc04:	4606      	mov	r6, r0
 800bc06:	b118      	cbz	r0, 800bc10 <_vfiprintf_r+0x18>
 800bc08:	6a03      	ldr	r3, [r0, #32]
 800bc0a:	b90b      	cbnz	r3, 800bc10 <_vfiprintf_r+0x18>
 800bc0c:	f7ff fae8 	bl	800b1e0 <__sinit>
 800bc10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc12:	07d9      	lsls	r1, r3, #31
 800bc14:	d405      	bmi.n	800bc22 <_vfiprintf_r+0x2a>
 800bc16:	89ab      	ldrh	r3, [r5, #12]
 800bc18:	059a      	lsls	r2, r3, #22
 800bc1a:	d402      	bmi.n	800bc22 <_vfiprintf_r+0x2a>
 800bc1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc1e:	f7ff fd60 	bl	800b6e2 <__retarget_lock_acquire_recursive>
 800bc22:	89ab      	ldrh	r3, [r5, #12]
 800bc24:	071b      	lsls	r3, r3, #28
 800bc26:	d501      	bpl.n	800bc2c <_vfiprintf_r+0x34>
 800bc28:	692b      	ldr	r3, [r5, #16]
 800bc2a:	b99b      	cbnz	r3, 800bc54 <_vfiprintf_r+0x5c>
 800bc2c:	4629      	mov	r1, r5
 800bc2e:	4630      	mov	r0, r6
 800bc30:	f7ff fc32 	bl	800b498 <__swsetup_r>
 800bc34:	b170      	cbz	r0, 800bc54 <_vfiprintf_r+0x5c>
 800bc36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc38:	07dc      	lsls	r4, r3, #31
 800bc3a:	d504      	bpl.n	800bc46 <_vfiprintf_r+0x4e>
 800bc3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bc40:	b01d      	add	sp, #116	@ 0x74
 800bc42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc46:	89ab      	ldrh	r3, [r5, #12]
 800bc48:	0598      	lsls	r0, r3, #22
 800bc4a:	d4f7      	bmi.n	800bc3c <_vfiprintf_r+0x44>
 800bc4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc4e:	f7ff fd49 	bl	800b6e4 <__retarget_lock_release_recursive>
 800bc52:	e7f3      	b.n	800bc3c <_vfiprintf_r+0x44>
 800bc54:	2300      	movs	r3, #0
 800bc56:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc58:	2320      	movs	r3, #32
 800bc5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc5e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc62:	2330      	movs	r3, #48	@ 0x30
 800bc64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800be14 <_vfiprintf_r+0x21c>
 800bc68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc6c:	f04f 0901 	mov.w	r9, #1
 800bc70:	4623      	mov	r3, r4
 800bc72:	469a      	mov	sl, r3
 800bc74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc78:	b10a      	cbz	r2, 800bc7e <_vfiprintf_r+0x86>
 800bc7a:	2a25      	cmp	r2, #37	@ 0x25
 800bc7c:	d1f9      	bne.n	800bc72 <_vfiprintf_r+0x7a>
 800bc7e:	ebba 0b04 	subs.w	fp, sl, r4
 800bc82:	d00b      	beq.n	800bc9c <_vfiprintf_r+0xa4>
 800bc84:	465b      	mov	r3, fp
 800bc86:	4622      	mov	r2, r4
 800bc88:	4629      	mov	r1, r5
 800bc8a:	4630      	mov	r0, r6
 800bc8c:	f7ff ffa1 	bl	800bbd2 <__sfputs_r>
 800bc90:	3001      	adds	r0, #1
 800bc92:	f000 80a7 	beq.w	800bde4 <_vfiprintf_r+0x1ec>
 800bc96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc98:	445a      	add	r2, fp
 800bc9a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc9c:	f89a 3000 	ldrb.w	r3, [sl]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	f000 809f 	beq.w	800bde4 <_vfiprintf_r+0x1ec>
 800bca6:	2300      	movs	r3, #0
 800bca8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bcac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcb0:	f10a 0a01 	add.w	sl, sl, #1
 800bcb4:	9304      	str	r3, [sp, #16]
 800bcb6:	9307      	str	r3, [sp, #28]
 800bcb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bcbc:	931a      	str	r3, [sp, #104]	@ 0x68
 800bcbe:	4654      	mov	r4, sl
 800bcc0:	2205      	movs	r2, #5
 800bcc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcc6:	4853      	ldr	r0, [pc, #332]	@ (800be14 <_vfiprintf_r+0x21c>)
 800bcc8:	f7f4 fa82 	bl	80001d0 <memchr>
 800bccc:	9a04      	ldr	r2, [sp, #16]
 800bcce:	b9d8      	cbnz	r0, 800bd08 <_vfiprintf_r+0x110>
 800bcd0:	06d1      	lsls	r1, r2, #27
 800bcd2:	bf44      	itt	mi
 800bcd4:	2320      	movmi	r3, #32
 800bcd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcda:	0713      	lsls	r3, r2, #28
 800bcdc:	bf44      	itt	mi
 800bcde:	232b      	movmi	r3, #43	@ 0x2b
 800bce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bce4:	f89a 3000 	ldrb.w	r3, [sl]
 800bce8:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcea:	d015      	beq.n	800bd18 <_vfiprintf_r+0x120>
 800bcec:	9a07      	ldr	r2, [sp, #28]
 800bcee:	4654      	mov	r4, sl
 800bcf0:	2000      	movs	r0, #0
 800bcf2:	f04f 0c0a 	mov.w	ip, #10
 800bcf6:	4621      	mov	r1, r4
 800bcf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcfc:	3b30      	subs	r3, #48	@ 0x30
 800bcfe:	2b09      	cmp	r3, #9
 800bd00:	d94b      	bls.n	800bd9a <_vfiprintf_r+0x1a2>
 800bd02:	b1b0      	cbz	r0, 800bd32 <_vfiprintf_r+0x13a>
 800bd04:	9207      	str	r2, [sp, #28]
 800bd06:	e014      	b.n	800bd32 <_vfiprintf_r+0x13a>
 800bd08:	eba0 0308 	sub.w	r3, r0, r8
 800bd0c:	fa09 f303 	lsl.w	r3, r9, r3
 800bd10:	4313      	orrs	r3, r2
 800bd12:	9304      	str	r3, [sp, #16]
 800bd14:	46a2      	mov	sl, r4
 800bd16:	e7d2      	b.n	800bcbe <_vfiprintf_r+0xc6>
 800bd18:	9b03      	ldr	r3, [sp, #12]
 800bd1a:	1d19      	adds	r1, r3, #4
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	9103      	str	r1, [sp, #12]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	bfbb      	ittet	lt
 800bd24:	425b      	neglt	r3, r3
 800bd26:	f042 0202 	orrlt.w	r2, r2, #2
 800bd2a:	9307      	strge	r3, [sp, #28]
 800bd2c:	9307      	strlt	r3, [sp, #28]
 800bd2e:	bfb8      	it	lt
 800bd30:	9204      	strlt	r2, [sp, #16]
 800bd32:	7823      	ldrb	r3, [r4, #0]
 800bd34:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd36:	d10a      	bne.n	800bd4e <_vfiprintf_r+0x156>
 800bd38:	7863      	ldrb	r3, [r4, #1]
 800bd3a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd3c:	d132      	bne.n	800bda4 <_vfiprintf_r+0x1ac>
 800bd3e:	9b03      	ldr	r3, [sp, #12]
 800bd40:	1d1a      	adds	r2, r3, #4
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	9203      	str	r2, [sp, #12]
 800bd46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd4a:	3402      	adds	r4, #2
 800bd4c:	9305      	str	r3, [sp, #20]
 800bd4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800be24 <_vfiprintf_r+0x22c>
 800bd52:	7821      	ldrb	r1, [r4, #0]
 800bd54:	2203      	movs	r2, #3
 800bd56:	4650      	mov	r0, sl
 800bd58:	f7f4 fa3a 	bl	80001d0 <memchr>
 800bd5c:	b138      	cbz	r0, 800bd6e <_vfiprintf_r+0x176>
 800bd5e:	9b04      	ldr	r3, [sp, #16]
 800bd60:	eba0 000a 	sub.w	r0, r0, sl
 800bd64:	2240      	movs	r2, #64	@ 0x40
 800bd66:	4082      	lsls	r2, r0
 800bd68:	4313      	orrs	r3, r2
 800bd6a:	3401      	adds	r4, #1
 800bd6c:	9304      	str	r3, [sp, #16]
 800bd6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd72:	4829      	ldr	r0, [pc, #164]	@ (800be18 <_vfiprintf_r+0x220>)
 800bd74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd78:	2206      	movs	r2, #6
 800bd7a:	f7f4 fa29 	bl	80001d0 <memchr>
 800bd7e:	2800      	cmp	r0, #0
 800bd80:	d03f      	beq.n	800be02 <_vfiprintf_r+0x20a>
 800bd82:	4b26      	ldr	r3, [pc, #152]	@ (800be1c <_vfiprintf_r+0x224>)
 800bd84:	bb1b      	cbnz	r3, 800bdce <_vfiprintf_r+0x1d6>
 800bd86:	9b03      	ldr	r3, [sp, #12]
 800bd88:	3307      	adds	r3, #7
 800bd8a:	f023 0307 	bic.w	r3, r3, #7
 800bd8e:	3308      	adds	r3, #8
 800bd90:	9303      	str	r3, [sp, #12]
 800bd92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd94:	443b      	add	r3, r7
 800bd96:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd98:	e76a      	b.n	800bc70 <_vfiprintf_r+0x78>
 800bd9a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd9e:	460c      	mov	r4, r1
 800bda0:	2001      	movs	r0, #1
 800bda2:	e7a8      	b.n	800bcf6 <_vfiprintf_r+0xfe>
 800bda4:	2300      	movs	r3, #0
 800bda6:	3401      	adds	r4, #1
 800bda8:	9305      	str	r3, [sp, #20]
 800bdaa:	4619      	mov	r1, r3
 800bdac:	f04f 0c0a 	mov.w	ip, #10
 800bdb0:	4620      	mov	r0, r4
 800bdb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdb6:	3a30      	subs	r2, #48	@ 0x30
 800bdb8:	2a09      	cmp	r2, #9
 800bdba:	d903      	bls.n	800bdc4 <_vfiprintf_r+0x1cc>
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d0c6      	beq.n	800bd4e <_vfiprintf_r+0x156>
 800bdc0:	9105      	str	r1, [sp, #20]
 800bdc2:	e7c4      	b.n	800bd4e <_vfiprintf_r+0x156>
 800bdc4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdc8:	4604      	mov	r4, r0
 800bdca:	2301      	movs	r3, #1
 800bdcc:	e7f0      	b.n	800bdb0 <_vfiprintf_r+0x1b8>
 800bdce:	ab03      	add	r3, sp, #12
 800bdd0:	9300      	str	r3, [sp, #0]
 800bdd2:	462a      	mov	r2, r5
 800bdd4:	4b12      	ldr	r3, [pc, #72]	@ (800be20 <_vfiprintf_r+0x228>)
 800bdd6:	a904      	add	r1, sp, #16
 800bdd8:	4630      	mov	r0, r6
 800bdda:	f3af 8000 	nop.w
 800bdde:	4607      	mov	r7, r0
 800bde0:	1c78      	adds	r0, r7, #1
 800bde2:	d1d6      	bne.n	800bd92 <_vfiprintf_r+0x19a>
 800bde4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bde6:	07d9      	lsls	r1, r3, #31
 800bde8:	d405      	bmi.n	800bdf6 <_vfiprintf_r+0x1fe>
 800bdea:	89ab      	ldrh	r3, [r5, #12]
 800bdec:	059a      	lsls	r2, r3, #22
 800bdee:	d402      	bmi.n	800bdf6 <_vfiprintf_r+0x1fe>
 800bdf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bdf2:	f7ff fc77 	bl	800b6e4 <__retarget_lock_release_recursive>
 800bdf6:	89ab      	ldrh	r3, [r5, #12]
 800bdf8:	065b      	lsls	r3, r3, #25
 800bdfa:	f53f af1f 	bmi.w	800bc3c <_vfiprintf_r+0x44>
 800bdfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be00:	e71e      	b.n	800bc40 <_vfiprintf_r+0x48>
 800be02:	ab03      	add	r3, sp, #12
 800be04:	9300      	str	r3, [sp, #0]
 800be06:	462a      	mov	r2, r5
 800be08:	4b05      	ldr	r3, [pc, #20]	@ (800be20 <_vfiprintf_r+0x228>)
 800be0a:	a904      	add	r1, sp, #16
 800be0c:	4630      	mov	r0, r6
 800be0e:	f000 f879 	bl	800bf04 <_printf_i>
 800be12:	e7e4      	b.n	800bdde <_vfiprintf_r+0x1e6>
 800be14:	0800ca25 	.word	0x0800ca25
 800be18:	0800ca2f 	.word	0x0800ca2f
 800be1c:	00000000 	.word	0x00000000
 800be20:	0800bbd3 	.word	0x0800bbd3
 800be24:	0800ca2b 	.word	0x0800ca2b

0800be28 <_printf_common>:
 800be28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be2c:	4616      	mov	r6, r2
 800be2e:	4698      	mov	r8, r3
 800be30:	688a      	ldr	r2, [r1, #8]
 800be32:	690b      	ldr	r3, [r1, #16]
 800be34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800be38:	4293      	cmp	r3, r2
 800be3a:	bfb8      	it	lt
 800be3c:	4613      	movlt	r3, r2
 800be3e:	6033      	str	r3, [r6, #0]
 800be40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800be44:	4607      	mov	r7, r0
 800be46:	460c      	mov	r4, r1
 800be48:	b10a      	cbz	r2, 800be4e <_printf_common+0x26>
 800be4a:	3301      	adds	r3, #1
 800be4c:	6033      	str	r3, [r6, #0]
 800be4e:	6823      	ldr	r3, [r4, #0]
 800be50:	0699      	lsls	r1, r3, #26
 800be52:	bf42      	ittt	mi
 800be54:	6833      	ldrmi	r3, [r6, #0]
 800be56:	3302      	addmi	r3, #2
 800be58:	6033      	strmi	r3, [r6, #0]
 800be5a:	6825      	ldr	r5, [r4, #0]
 800be5c:	f015 0506 	ands.w	r5, r5, #6
 800be60:	d106      	bne.n	800be70 <_printf_common+0x48>
 800be62:	f104 0a19 	add.w	sl, r4, #25
 800be66:	68e3      	ldr	r3, [r4, #12]
 800be68:	6832      	ldr	r2, [r6, #0]
 800be6a:	1a9b      	subs	r3, r3, r2
 800be6c:	42ab      	cmp	r3, r5
 800be6e:	dc26      	bgt.n	800bebe <_printf_common+0x96>
 800be70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800be74:	6822      	ldr	r2, [r4, #0]
 800be76:	3b00      	subs	r3, #0
 800be78:	bf18      	it	ne
 800be7a:	2301      	movne	r3, #1
 800be7c:	0692      	lsls	r2, r2, #26
 800be7e:	d42b      	bmi.n	800bed8 <_printf_common+0xb0>
 800be80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800be84:	4641      	mov	r1, r8
 800be86:	4638      	mov	r0, r7
 800be88:	47c8      	blx	r9
 800be8a:	3001      	adds	r0, #1
 800be8c:	d01e      	beq.n	800becc <_printf_common+0xa4>
 800be8e:	6823      	ldr	r3, [r4, #0]
 800be90:	6922      	ldr	r2, [r4, #16]
 800be92:	f003 0306 	and.w	r3, r3, #6
 800be96:	2b04      	cmp	r3, #4
 800be98:	bf02      	ittt	eq
 800be9a:	68e5      	ldreq	r5, [r4, #12]
 800be9c:	6833      	ldreq	r3, [r6, #0]
 800be9e:	1aed      	subeq	r5, r5, r3
 800bea0:	68a3      	ldr	r3, [r4, #8]
 800bea2:	bf0c      	ite	eq
 800bea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bea8:	2500      	movne	r5, #0
 800beaa:	4293      	cmp	r3, r2
 800beac:	bfc4      	itt	gt
 800beae:	1a9b      	subgt	r3, r3, r2
 800beb0:	18ed      	addgt	r5, r5, r3
 800beb2:	2600      	movs	r6, #0
 800beb4:	341a      	adds	r4, #26
 800beb6:	42b5      	cmp	r5, r6
 800beb8:	d11a      	bne.n	800bef0 <_printf_common+0xc8>
 800beba:	2000      	movs	r0, #0
 800bebc:	e008      	b.n	800bed0 <_printf_common+0xa8>
 800bebe:	2301      	movs	r3, #1
 800bec0:	4652      	mov	r2, sl
 800bec2:	4641      	mov	r1, r8
 800bec4:	4638      	mov	r0, r7
 800bec6:	47c8      	blx	r9
 800bec8:	3001      	adds	r0, #1
 800beca:	d103      	bne.n	800bed4 <_printf_common+0xac>
 800becc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bed4:	3501      	adds	r5, #1
 800bed6:	e7c6      	b.n	800be66 <_printf_common+0x3e>
 800bed8:	18e1      	adds	r1, r4, r3
 800beda:	1c5a      	adds	r2, r3, #1
 800bedc:	2030      	movs	r0, #48	@ 0x30
 800bede:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bee2:	4422      	add	r2, r4
 800bee4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bee8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800beec:	3302      	adds	r3, #2
 800beee:	e7c7      	b.n	800be80 <_printf_common+0x58>
 800bef0:	2301      	movs	r3, #1
 800bef2:	4622      	mov	r2, r4
 800bef4:	4641      	mov	r1, r8
 800bef6:	4638      	mov	r0, r7
 800bef8:	47c8      	blx	r9
 800befa:	3001      	adds	r0, #1
 800befc:	d0e6      	beq.n	800becc <_printf_common+0xa4>
 800befe:	3601      	adds	r6, #1
 800bf00:	e7d9      	b.n	800beb6 <_printf_common+0x8e>
	...

0800bf04 <_printf_i>:
 800bf04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf08:	7e0f      	ldrb	r7, [r1, #24]
 800bf0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bf0c:	2f78      	cmp	r7, #120	@ 0x78
 800bf0e:	4691      	mov	r9, r2
 800bf10:	4680      	mov	r8, r0
 800bf12:	460c      	mov	r4, r1
 800bf14:	469a      	mov	sl, r3
 800bf16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bf1a:	d807      	bhi.n	800bf2c <_printf_i+0x28>
 800bf1c:	2f62      	cmp	r7, #98	@ 0x62
 800bf1e:	d80a      	bhi.n	800bf36 <_printf_i+0x32>
 800bf20:	2f00      	cmp	r7, #0
 800bf22:	f000 80d2 	beq.w	800c0ca <_printf_i+0x1c6>
 800bf26:	2f58      	cmp	r7, #88	@ 0x58
 800bf28:	f000 80b9 	beq.w	800c09e <_printf_i+0x19a>
 800bf2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bf34:	e03a      	b.n	800bfac <_printf_i+0xa8>
 800bf36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bf3a:	2b15      	cmp	r3, #21
 800bf3c:	d8f6      	bhi.n	800bf2c <_printf_i+0x28>
 800bf3e:	a101      	add	r1, pc, #4	@ (adr r1, 800bf44 <_printf_i+0x40>)
 800bf40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf44:	0800bf9d 	.word	0x0800bf9d
 800bf48:	0800bfb1 	.word	0x0800bfb1
 800bf4c:	0800bf2d 	.word	0x0800bf2d
 800bf50:	0800bf2d 	.word	0x0800bf2d
 800bf54:	0800bf2d 	.word	0x0800bf2d
 800bf58:	0800bf2d 	.word	0x0800bf2d
 800bf5c:	0800bfb1 	.word	0x0800bfb1
 800bf60:	0800bf2d 	.word	0x0800bf2d
 800bf64:	0800bf2d 	.word	0x0800bf2d
 800bf68:	0800bf2d 	.word	0x0800bf2d
 800bf6c:	0800bf2d 	.word	0x0800bf2d
 800bf70:	0800c0b1 	.word	0x0800c0b1
 800bf74:	0800bfdb 	.word	0x0800bfdb
 800bf78:	0800c06b 	.word	0x0800c06b
 800bf7c:	0800bf2d 	.word	0x0800bf2d
 800bf80:	0800bf2d 	.word	0x0800bf2d
 800bf84:	0800c0d3 	.word	0x0800c0d3
 800bf88:	0800bf2d 	.word	0x0800bf2d
 800bf8c:	0800bfdb 	.word	0x0800bfdb
 800bf90:	0800bf2d 	.word	0x0800bf2d
 800bf94:	0800bf2d 	.word	0x0800bf2d
 800bf98:	0800c073 	.word	0x0800c073
 800bf9c:	6833      	ldr	r3, [r6, #0]
 800bf9e:	1d1a      	adds	r2, r3, #4
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	6032      	str	r2, [r6, #0]
 800bfa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bfa8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bfac:	2301      	movs	r3, #1
 800bfae:	e09d      	b.n	800c0ec <_printf_i+0x1e8>
 800bfb0:	6833      	ldr	r3, [r6, #0]
 800bfb2:	6820      	ldr	r0, [r4, #0]
 800bfb4:	1d19      	adds	r1, r3, #4
 800bfb6:	6031      	str	r1, [r6, #0]
 800bfb8:	0606      	lsls	r6, r0, #24
 800bfba:	d501      	bpl.n	800bfc0 <_printf_i+0xbc>
 800bfbc:	681d      	ldr	r5, [r3, #0]
 800bfbe:	e003      	b.n	800bfc8 <_printf_i+0xc4>
 800bfc0:	0645      	lsls	r5, r0, #25
 800bfc2:	d5fb      	bpl.n	800bfbc <_printf_i+0xb8>
 800bfc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bfc8:	2d00      	cmp	r5, #0
 800bfca:	da03      	bge.n	800bfd4 <_printf_i+0xd0>
 800bfcc:	232d      	movs	r3, #45	@ 0x2d
 800bfce:	426d      	negs	r5, r5
 800bfd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bfd4:	4859      	ldr	r0, [pc, #356]	@ (800c13c <_printf_i+0x238>)
 800bfd6:	230a      	movs	r3, #10
 800bfd8:	e011      	b.n	800bffe <_printf_i+0xfa>
 800bfda:	6821      	ldr	r1, [r4, #0]
 800bfdc:	6833      	ldr	r3, [r6, #0]
 800bfde:	0608      	lsls	r0, r1, #24
 800bfe0:	f853 5b04 	ldr.w	r5, [r3], #4
 800bfe4:	d402      	bmi.n	800bfec <_printf_i+0xe8>
 800bfe6:	0649      	lsls	r1, r1, #25
 800bfe8:	bf48      	it	mi
 800bfea:	b2ad      	uxthmi	r5, r5
 800bfec:	2f6f      	cmp	r7, #111	@ 0x6f
 800bfee:	4853      	ldr	r0, [pc, #332]	@ (800c13c <_printf_i+0x238>)
 800bff0:	6033      	str	r3, [r6, #0]
 800bff2:	bf14      	ite	ne
 800bff4:	230a      	movne	r3, #10
 800bff6:	2308      	moveq	r3, #8
 800bff8:	2100      	movs	r1, #0
 800bffa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bffe:	6866      	ldr	r6, [r4, #4]
 800c000:	60a6      	str	r6, [r4, #8]
 800c002:	2e00      	cmp	r6, #0
 800c004:	bfa2      	ittt	ge
 800c006:	6821      	ldrge	r1, [r4, #0]
 800c008:	f021 0104 	bicge.w	r1, r1, #4
 800c00c:	6021      	strge	r1, [r4, #0]
 800c00e:	b90d      	cbnz	r5, 800c014 <_printf_i+0x110>
 800c010:	2e00      	cmp	r6, #0
 800c012:	d04b      	beq.n	800c0ac <_printf_i+0x1a8>
 800c014:	4616      	mov	r6, r2
 800c016:	fbb5 f1f3 	udiv	r1, r5, r3
 800c01a:	fb03 5711 	mls	r7, r3, r1, r5
 800c01e:	5dc7      	ldrb	r7, [r0, r7]
 800c020:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c024:	462f      	mov	r7, r5
 800c026:	42bb      	cmp	r3, r7
 800c028:	460d      	mov	r5, r1
 800c02a:	d9f4      	bls.n	800c016 <_printf_i+0x112>
 800c02c:	2b08      	cmp	r3, #8
 800c02e:	d10b      	bne.n	800c048 <_printf_i+0x144>
 800c030:	6823      	ldr	r3, [r4, #0]
 800c032:	07df      	lsls	r7, r3, #31
 800c034:	d508      	bpl.n	800c048 <_printf_i+0x144>
 800c036:	6923      	ldr	r3, [r4, #16]
 800c038:	6861      	ldr	r1, [r4, #4]
 800c03a:	4299      	cmp	r1, r3
 800c03c:	bfde      	ittt	le
 800c03e:	2330      	movle	r3, #48	@ 0x30
 800c040:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c044:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c048:	1b92      	subs	r2, r2, r6
 800c04a:	6122      	str	r2, [r4, #16]
 800c04c:	f8cd a000 	str.w	sl, [sp]
 800c050:	464b      	mov	r3, r9
 800c052:	aa03      	add	r2, sp, #12
 800c054:	4621      	mov	r1, r4
 800c056:	4640      	mov	r0, r8
 800c058:	f7ff fee6 	bl	800be28 <_printf_common>
 800c05c:	3001      	adds	r0, #1
 800c05e:	d14a      	bne.n	800c0f6 <_printf_i+0x1f2>
 800c060:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c064:	b004      	add	sp, #16
 800c066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c06a:	6823      	ldr	r3, [r4, #0]
 800c06c:	f043 0320 	orr.w	r3, r3, #32
 800c070:	6023      	str	r3, [r4, #0]
 800c072:	4833      	ldr	r0, [pc, #204]	@ (800c140 <_printf_i+0x23c>)
 800c074:	2778      	movs	r7, #120	@ 0x78
 800c076:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c07a:	6823      	ldr	r3, [r4, #0]
 800c07c:	6831      	ldr	r1, [r6, #0]
 800c07e:	061f      	lsls	r7, r3, #24
 800c080:	f851 5b04 	ldr.w	r5, [r1], #4
 800c084:	d402      	bmi.n	800c08c <_printf_i+0x188>
 800c086:	065f      	lsls	r7, r3, #25
 800c088:	bf48      	it	mi
 800c08a:	b2ad      	uxthmi	r5, r5
 800c08c:	6031      	str	r1, [r6, #0]
 800c08e:	07d9      	lsls	r1, r3, #31
 800c090:	bf44      	itt	mi
 800c092:	f043 0320 	orrmi.w	r3, r3, #32
 800c096:	6023      	strmi	r3, [r4, #0]
 800c098:	b11d      	cbz	r5, 800c0a2 <_printf_i+0x19e>
 800c09a:	2310      	movs	r3, #16
 800c09c:	e7ac      	b.n	800bff8 <_printf_i+0xf4>
 800c09e:	4827      	ldr	r0, [pc, #156]	@ (800c13c <_printf_i+0x238>)
 800c0a0:	e7e9      	b.n	800c076 <_printf_i+0x172>
 800c0a2:	6823      	ldr	r3, [r4, #0]
 800c0a4:	f023 0320 	bic.w	r3, r3, #32
 800c0a8:	6023      	str	r3, [r4, #0]
 800c0aa:	e7f6      	b.n	800c09a <_printf_i+0x196>
 800c0ac:	4616      	mov	r6, r2
 800c0ae:	e7bd      	b.n	800c02c <_printf_i+0x128>
 800c0b0:	6833      	ldr	r3, [r6, #0]
 800c0b2:	6825      	ldr	r5, [r4, #0]
 800c0b4:	6961      	ldr	r1, [r4, #20]
 800c0b6:	1d18      	adds	r0, r3, #4
 800c0b8:	6030      	str	r0, [r6, #0]
 800c0ba:	062e      	lsls	r6, r5, #24
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	d501      	bpl.n	800c0c4 <_printf_i+0x1c0>
 800c0c0:	6019      	str	r1, [r3, #0]
 800c0c2:	e002      	b.n	800c0ca <_printf_i+0x1c6>
 800c0c4:	0668      	lsls	r0, r5, #25
 800c0c6:	d5fb      	bpl.n	800c0c0 <_printf_i+0x1bc>
 800c0c8:	8019      	strh	r1, [r3, #0]
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	6123      	str	r3, [r4, #16]
 800c0ce:	4616      	mov	r6, r2
 800c0d0:	e7bc      	b.n	800c04c <_printf_i+0x148>
 800c0d2:	6833      	ldr	r3, [r6, #0]
 800c0d4:	1d1a      	adds	r2, r3, #4
 800c0d6:	6032      	str	r2, [r6, #0]
 800c0d8:	681e      	ldr	r6, [r3, #0]
 800c0da:	6862      	ldr	r2, [r4, #4]
 800c0dc:	2100      	movs	r1, #0
 800c0de:	4630      	mov	r0, r6
 800c0e0:	f7f4 f876 	bl	80001d0 <memchr>
 800c0e4:	b108      	cbz	r0, 800c0ea <_printf_i+0x1e6>
 800c0e6:	1b80      	subs	r0, r0, r6
 800c0e8:	6060      	str	r0, [r4, #4]
 800c0ea:	6863      	ldr	r3, [r4, #4]
 800c0ec:	6123      	str	r3, [r4, #16]
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0f4:	e7aa      	b.n	800c04c <_printf_i+0x148>
 800c0f6:	6923      	ldr	r3, [r4, #16]
 800c0f8:	4632      	mov	r2, r6
 800c0fa:	4649      	mov	r1, r9
 800c0fc:	4640      	mov	r0, r8
 800c0fe:	47d0      	blx	sl
 800c100:	3001      	adds	r0, #1
 800c102:	d0ad      	beq.n	800c060 <_printf_i+0x15c>
 800c104:	6823      	ldr	r3, [r4, #0]
 800c106:	079b      	lsls	r3, r3, #30
 800c108:	d413      	bmi.n	800c132 <_printf_i+0x22e>
 800c10a:	68e0      	ldr	r0, [r4, #12]
 800c10c:	9b03      	ldr	r3, [sp, #12]
 800c10e:	4298      	cmp	r0, r3
 800c110:	bfb8      	it	lt
 800c112:	4618      	movlt	r0, r3
 800c114:	e7a6      	b.n	800c064 <_printf_i+0x160>
 800c116:	2301      	movs	r3, #1
 800c118:	4632      	mov	r2, r6
 800c11a:	4649      	mov	r1, r9
 800c11c:	4640      	mov	r0, r8
 800c11e:	47d0      	blx	sl
 800c120:	3001      	adds	r0, #1
 800c122:	d09d      	beq.n	800c060 <_printf_i+0x15c>
 800c124:	3501      	adds	r5, #1
 800c126:	68e3      	ldr	r3, [r4, #12]
 800c128:	9903      	ldr	r1, [sp, #12]
 800c12a:	1a5b      	subs	r3, r3, r1
 800c12c:	42ab      	cmp	r3, r5
 800c12e:	dcf2      	bgt.n	800c116 <_printf_i+0x212>
 800c130:	e7eb      	b.n	800c10a <_printf_i+0x206>
 800c132:	2500      	movs	r5, #0
 800c134:	f104 0619 	add.w	r6, r4, #25
 800c138:	e7f5      	b.n	800c126 <_printf_i+0x222>
 800c13a:	bf00      	nop
 800c13c:	0800ca36 	.word	0x0800ca36
 800c140:	0800ca47 	.word	0x0800ca47

0800c144 <__sflush_r>:
 800c144:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c14c:	0716      	lsls	r6, r2, #28
 800c14e:	4605      	mov	r5, r0
 800c150:	460c      	mov	r4, r1
 800c152:	d454      	bmi.n	800c1fe <__sflush_r+0xba>
 800c154:	684b      	ldr	r3, [r1, #4]
 800c156:	2b00      	cmp	r3, #0
 800c158:	dc02      	bgt.n	800c160 <__sflush_r+0x1c>
 800c15a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	dd48      	ble.n	800c1f2 <__sflush_r+0xae>
 800c160:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c162:	2e00      	cmp	r6, #0
 800c164:	d045      	beq.n	800c1f2 <__sflush_r+0xae>
 800c166:	2300      	movs	r3, #0
 800c168:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c16c:	682f      	ldr	r7, [r5, #0]
 800c16e:	6a21      	ldr	r1, [r4, #32]
 800c170:	602b      	str	r3, [r5, #0]
 800c172:	d030      	beq.n	800c1d6 <__sflush_r+0x92>
 800c174:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c176:	89a3      	ldrh	r3, [r4, #12]
 800c178:	0759      	lsls	r1, r3, #29
 800c17a:	d505      	bpl.n	800c188 <__sflush_r+0x44>
 800c17c:	6863      	ldr	r3, [r4, #4]
 800c17e:	1ad2      	subs	r2, r2, r3
 800c180:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c182:	b10b      	cbz	r3, 800c188 <__sflush_r+0x44>
 800c184:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c186:	1ad2      	subs	r2, r2, r3
 800c188:	2300      	movs	r3, #0
 800c18a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c18c:	6a21      	ldr	r1, [r4, #32]
 800c18e:	4628      	mov	r0, r5
 800c190:	47b0      	blx	r6
 800c192:	1c43      	adds	r3, r0, #1
 800c194:	89a3      	ldrh	r3, [r4, #12]
 800c196:	d106      	bne.n	800c1a6 <__sflush_r+0x62>
 800c198:	6829      	ldr	r1, [r5, #0]
 800c19a:	291d      	cmp	r1, #29
 800c19c:	d82b      	bhi.n	800c1f6 <__sflush_r+0xb2>
 800c19e:	4a2a      	ldr	r2, [pc, #168]	@ (800c248 <__sflush_r+0x104>)
 800c1a0:	410a      	asrs	r2, r1
 800c1a2:	07d6      	lsls	r6, r2, #31
 800c1a4:	d427      	bmi.n	800c1f6 <__sflush_r+0xb2>
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	6062      	str	r2, [r4, #4]
 800c1aa:	04d9      	lsls	r1, r3, #19
 800c1ac:	6922      	ldr	r2, [r4, #16]
 800c1ae:	6022      	str	r2, [r4, #0]
 800c1b0:	d504      	bpl.n	800c1bc <__sflush_r+0x78>
 800c1b2:	1c42      	adds	r2, r0, #1
 800c1b4:	d101      	bne.n	800c1ba <__sflush_r+0x76>
 800c1b6:	682b      	ldr	r3, [r5, #0]
 800c1b8:	b903      	cbnz	r3, 800c1bc <__sflush_r+0x78>
 800c1ba:	6560      	str	r0, [r4, #84]	@ 0x54
 800c1bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c1be:	602f      	str	r7, [r5, #0]
 800c1c0:	b1b9      	cbz	r1, 800c1f2 <__sflush_r+0xae>
 800c1c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c1c6:	4299      	cmp	r1, r3
 800c1c8:	d002      	beq.n	800c1d0 <__sflush_r+0x8c>
 800c1ca:	4628      	mov	r0, r5
 800c1cc:	f7ff fa9a 	bl	800b704 <_free_r>
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	6363      	str	r3, [r4, #52]	@ 0x34
 800c1d4:	e00d      	b.n	800c1f2 <__sflush_r+0xae>
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	4628      	mov	r0, r5
 800c1da:	47b0      	blx	r6
 800c1dc:	4602      	mov	r2, r0
 800c1de:	1c50      	adds	r0, r2, #1
 800c1e0:	d1c9      	bne.n	800c176 <__sflush_r+0x32>
 800c1e2:	682b      	ldr	r3, [r5, #0]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d0c6      	beq.n	800c176 <__sflush_r+0x32>
 800c1e8:	2b1d      	cmp	r3, #29
 800c1ea:	d001      	beq.n	800c1f0 <__sflush_r+0xac>
 800c1ec:	2b16      	cmp	r3, #22
 800c1ee:	d11e      	bne.n	800c22e <__sflush_r+0xea>
 800c1f0:	602f      	str	r7, [r5, #0]
 800c1f2:	2000      	movs	r0, #0
 800c1f4:	e022      	b.n	800c23c <__sflush_r+0xf8>
 800c1f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1fa:	b21b      	sxth	r3, r3
 800c1fc:	e01b      	b.n	800c236 <__sflush_r+0xf2>
 800c1fe:	690f      	ldr	r7, [r1, #16]
 800c200:	2f00      	cmp	r7, #0
 800c202:	d0f6      	beq.n	800c1f2 <__sflush_r+0xae>
 800c204:	0793      	lsls	r3, r2, #30
 800c206:	680e      	ldr	r6, [r1, #0]
 800c208:	bf08      	it	eq
 800c20a:	694b      	ldreq	r3, [r1, #20]
 800c20c:	600f      	str	r7, [r1, #0]
 800c20e:	bf18      	it	ne
 800c210:	2300      	movne	r3, #0
 800c212:	eba6 0807 	sub.w	r8, r6, r7
 800c216:	608b      	str	r3, [r1, #8]
 800c218:	f1b8 0f00 	cmp.w	r8, #0
 800c21c:	dde9      	ble.n	800c1f2 <__sflush_r+0xae>
 800c21e:	6a21      	ldr	r1, [r4, #32]
 800c220:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c222:	4643      	mov	r3, r8
 800c224:	463a      	mov	r2, r7
 800c226:	4628      	mov	r0, r5
 800c228:	47b0      	blx	r6
 800c22a:	2800      	cmp	r0, #0
 800c22c:	dc08      	bgt.n	800c240 <__sflush_r+0xfc>
 800c22e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c236:	81a3      	strh	r3, [r4, #12]
 800c238:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c23c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c240:	4407      	add	r7, r0
 800c242:	eba8 0800 	sub.w	r8, r8, r0
 800c246:	e7e7      	b.n	800c218 <__sflush_r+0xd4>
 800c248:	dfbffffe 	.word	0xdfbffffe

0800c24c <_fflush_r>:
 800c24c:	b538      	push	{r3, r4, r5, lr}
 800c24e:	690b      	ldr	r3, [r1, #16]
 800c250:	4605      	mov	r5, r0
 800c252:	460c      	mov	r4, r1
 800c254:	b913      	cbnz	r3, 800c25c <_fflush_r+0x10>
 800c256:	2500      	movs	r5, #0
 800c258:	4628      	mov	r0, r5
 800c25a:	bd38      	pop	{r3, r4, r5, pc}
 800c25c:	b118      	cbz	r0, 800c266 <_fflush_r+0x1a>
 800c25e:	6a03      	ldr	r3, [r0, #32]
 800c260:	b90b      	cbnz	r3, 800c266 <_fflush_r+0x1a>
 800c262:	f7fe ffbd 	bl	800b1e0 <__sinit>
 800c266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d0f3      	beq.n	800c256 <_fflush_r+0xa>
 800c26e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c270:	07d0      	lsls	r0, r2, #31
 800c272:	d404      	bmi.n	800c27e <_fflush_r+0x32>
 800c274:	0599      	lsls	r1, r3, #22
 800c276:	d402      	bmi.n	800c27e <_fflush_r+0x32>
 800c278:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c27a:	f7ff fa32 	bl	800b6e2 <__retarget_lock_acquire_recursive>
 800c27e:	4628      	mov	r0, r5
 800c280:	4621      	mov	r1, r4
 800c282:	f7ff ff5f 	bl	800c144 <__sflush_r>
 800c286:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c288:	07da      	lsls	r2, r3, #31
 800c28a:	4605      	mov	r5, r0
 800c28c:	d4e4      	bmi.n	800c258 <_fflush_r+0xc>
 800c28e:	89a3      	ldrh	r3, [r4, #12]
 800c290:	059b      	lsls	r3, r3, #22
 800c292:	d4e1      	bmi.n	800c258 <_fflush_r+0xc>
 800c294:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c296:	f7ff fa25 	bl	800b6e4 <__retarget_lock_release_recursive>
 800c29a:	e7dd      	b.n	800c258 <_fflush_r+0xc>

0800c29c <__swhatbuf_r>:
 800c29c:	b570      	push	{r4, r5, r6, lr}
 800c29e:	460c      	mov	r4, r1
 800c2a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2a4:	2900      	cmp	r1, #0
 800c2a6:	b096      	sub	sp, #88	@ 0x58
 800c2a8:	4615      	mov	r5, r2
 800c2aa:	461e      	mov	r6, r3
 800c2ac:	da0d      	bge.n	800c2ca <__swhatbuf_r+0x2e>
 800c2ae:	89a3      	ldrh	r3, [r4, #12]
 800c2b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c2b4:	f04f 0100 	mov.w	r1, #0
 800c2b8:	bf14      	ite	ne
 800c2ba:	2340      	movne	r3, #64	@ 0x40
 800c2bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c2c0:	2000      	movs	r0, #0
 800c2c2:	6031      	str	r1, [r6, #0]
 800c2c4:	602b      	str	r3, [r5, #0]
 800c2c6:	b016      	add	sp, #88	@ 0x58
 800c2c8:	bd70      	pop	{r4, r5, r6, pc}
 800c2ca:	466a      	mov	r2, sp
 800c2cc:	f000 f862 	bl	800c394 <_fstat_r>
 800c2d0:	2800      	cmp	r0, #0
 800c2d2:	dbec      	blt.n	800c2ae <__swhatbuf_r+0x12>
 800c2d4:	9901      	ldr	r1, [sp, #4]
 800c2d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c2da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c2de:	4259      	negs	r1, r3
 800c2e0:	4159      	adcs	r1, r3
 800c2e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c2e6:	e7eb      	b.n	800c2c0 <__swhatbuf_r+0x24>

0800c2e8 <__smakebuf_r>:
 800c2e8:	898b      	ldrh	r3, [r1, #12]
 800c2ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2ec:	079d      	lsls	r5, r3, #30
 800c2ee:	4606      	mov	r6, r0
 800c2f0:	460c      	mov	r4, r1
 800c2f2:	d507      	bpl.n	800c304 <__smakebuf_r+0x1c>
 800c2f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c2f8:	6023      	str	r3, [r4, #0]
 800c2fa:	6123      	str	r3, [r4, #16]
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	6163      	str	r3, [r4, #20]
 800c300:	b003      	add	sp, #12
 800c302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c304:	ab01      	add	r3, sp, #4
 800c306:	466a      	mov	r2, sp
 800c308:	f7ff ffc8 	bl	800c29c <__swhatbuf_r>
 800c30c:	9f00      	ldr	r7, [sp, #0]
 800c30e:	4605      	mov	r5, r0
 800c310:	4639      	mov	r1, r7
 800c312:	4630      	mov	r0, r6
 800c314:	f7ff fa62 	bl	800b7dc <_malloc_r>
 800c318:	b948      	cbnz	r0, 800c32e <__smakebuf_r+0x46>
 800c31a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c31e:	059a      	lsls	r2, r3, #22
 800c320:	d4ee      	bmi.n	800c300 <__smakebuf_r+0x18>
 800c322:	f023 0303 	bic.w	r3, r3, #3
 800c326:	f043 0302 	orr.w	r3, r3, #2
 800c32a:	81a3      	strh	r3, [r4, #12]
 800c32c:	e7e2      	b.n	800c2f4 <__smakebuf_r+0xc>
 800c32e:	89a3      	ldrh	r3, [r4, #12]
 800c330:	6020      	str	r0, [r4, #0]
 800c332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c336:	81a3      	strh	r3, [r4, #12]
 800c338:	9b01      	ldr	r3, [sp, #4]
 800c33a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c33e:	b15b      	cbz	r3, 800c358 <__smakebuf_r+0x70>
 800c340:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c344:	4630      	mov	r0, r6
 800c346:	f000 f837 	bl	800c3b8 <_isatty_r>
 800c34a:	b128      	cbz	r0, 800c358 <__smakebuf_r+0x70>
 800c34c:	89a3      	ldrh	r3, [r4, #12]
 800c34e:	f023 0303 	bic.w	r3, r3, #3
 800c352:	f043 0301 	orr.w	r3, r3, #1
 800c356:	81a3      	strh	r3, [r4, #12]
 800c358:	89a3      	ldrh	r3, [r4, #12]
 800c35a:	431d      	orrs	r5, r3
 800c35c:	81a5      	strh	r5, [r4, #12]
 800c35e:	e7cf      	b.n	800c300 <__smakebuf_r+0x18>

0800c360 <memmove>:
 800c360:	4288      	cmp	r0, r1
 800c362:	b510      	push	{r4, lr}
 800c364:	eb01 0402 	add.w	r4, r1, r2
 800c368:	d902      	bls.n	800c370 <memmove+0x10>
 800c36a:	4284      	cmp	r4, r0
 800c36c:	4623      	mov	r3, r4
 800c36e:	d807      	bhi.n	800c380 <memmove+0x20>
 800c370:	1e43      	subs	r3, r0, #1
 800c372:	42a1      	cmp	r1, r4
 800c374:	d008      	beq.n	800c388 <memmove+0x28>
 800c376:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c37a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c37e:	e7f8      	b.n	800c372 <memmove+0x12>
 800c380:	4402      	add	r2, r0
 800c382:	4601      	mov	r1, r0
 800c384:	428a      	cmp	r2, r1
 800c386:	d100      	bne.n	800c38a <memmove+0x2a>
 800c388:	bd10      	pop	{r4, pc}
 800c38a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c38e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c392:	e7f7      	b.n	800c384 <memmove+0x24>

0800c394 <_fstat_r>:
 800c394:	b538      	push	{r3, r4, r5, lr}
 800c396:	4d07      	ldr	r5, [pc, #28]	@ (800c3b4 <_fstat_r+0x20>)
 800c398:	2300      	movs	r3, #0
 800c39a:	4604      	mov	r4, r0
 800c39c:	4608      	mov	r0, r1
 800c39e:	4611      	mov	r1, r2
 800c3a0:	602b      	str	r3, [r5, #0]
 800c3a2:	f7f5 f800 	bl	80013a6 <_fstat>
 800c3a6:	1c43      	adds	r3, r0, #1
 800c3a8:	d102      	bne.n	800c3b0 <_fstat_r+0x1c>
 800c3aa:	682b      	ldr	r3, [r5, #0]
 800c3ac:	b103      	cbz	r3, 800c3b0 <_fstat_r+0x1c>
 800c3ae:	6023      	str	r3, [r4, #0]
 800c3b0:	bd38      	pop	{r3, r4, r5, pc}
 800c3b2:	bf00      	nop
 800c3b4:	20006088 	.word	0x20006088

0800c3b8 <_isatty_r>:
 800c3b8:	b538      	push	{r3, r4, r5, lr}
 800c3ba:	4d06      	ldr	r5, [pc, #24]	@ (800c3d4 <_isatty_r+0x1c>)
 800c3bc:	2300      	movs	r3, #0
 800c3be:	4604      	mov	r4, r0
 800c3c0:	4608      	mov	r0, r1
 800c3c2:	602b      	str	r3, [r5, #0]
 800c3c4:	f7f4 ffff 	bl	80013c6 <_isatty>
 800c3c8:	1c43      	adds	r3, r0, #1
 800c3ca:	d102      	bne.n	800c3d2 <_isatty_r+0x1a>
 800c3cc:	682b      	ldr	r3, [r5, #0]
 800c3ce:	b103      	cbz	r3, 800c3d2 <_isatty_r+0x1a>
 800c3d0:	6023      	str	r3, [r4, #0]
 800c3d2:	bd38      	pop	{r3, r4, r5, pc}
 800c3d4:	20006088 	.word	0x20006088

0800c3d8 <_sbrk_r>:
 800c3d8:	b538      	push	{r3, r4, r5, lr}
 800c3da:	4d06      	ldr	r5, [pc, #24]	@ (800c3f4 <_sbrk_r+0x1c>)
 800c3dc:	2300      	movs	r3, #0
 800c3de:	4604      	mov	r4, r0
 800c3e0:	4608      	mov	r0, r1
 800c3e2:	602b      	str	r3, [r5, #0]
 800c3e4:	f7f5 f808 	bl	80013f8 <_sbrk>
 800c3e8:	1c43      	adds	r3, r0, #1
 800c3ea:	d102      	bne.n	800c3f2 <_sbrk_r+0x1a>
 800c3ec:	682b      	ldr	r3, [r5, #0]
 800c3ee:	b103      	cbz	r3, 800c3f2 <_sbrk_r+0x1a>
 800c3f0:	6023      	str	r3, [r4, #0]
 800c3f2:	bd38      	pop	{r3, r4, r5, pc}
 800c3f4:	20006088 	.word	0x20006088

0800c3f8 <_realloc_r>:
 800c3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3fc:	4680      	mov	r8, r0
 800c3fe:	4615      	mov	r5, r2
 800c400:	460c      	mov	r4, r1
 800c402:	b921      	cbnz	r1, 800c40e <_realloc_r+0x16>
 800c404:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c408:	4611      	mov	r1, r2
 800c40a:	f7ff b9e7 	b.w	800b7dc <_malloc_r>
 800c40e:	b92a      	cbnz	r2, 800c41c <_realloc_r+0x24>
 800c410:	f7ff f978 	bl	800b704 <_free_r>
 800c414:	2400      	movs	r4, #0
 800c416:	4620      	mov	r0, r4
 800c418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c41c:	f000 f81a 	bl	800c454 <_malloc_usable_size_r>
 800c420:	4285      	cmp	r5, r0
 800c422:	4606      	mov	r6, r0
 800c424:	d802      	bhi.n	800c42c <_realloc_r+0x34>
 800c426:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c42a:	d8f4      	bhi.n	800c416 <_realloc_r+0x1e>
 800c42c:	4629      	mov	r1, r5
 800c42e:	4640      	mov	r0, r8
 800c430:	f7ff f9d4 	bl	800b7dc <_malloc_r>
 800c434:	4607      	mov	r7, r0
 800c436:	2800      	cmp	r0, #0
 800c438:	d0ec      	beq.n	800c414 <_realloc_r+0x1c>
 800c43a:	42b5      	cmp	r5, r6
 800c43c:	462a      	mov	r2, r5
 800c43e:	4621      	mov	r1, r4
 800c440:	bf28      	it	cs
 800c442:	4632      	movcs	r2, r6
 800c444:	f7ff f94f 	bl	800b6e6 <memcpy>
 800c448:	4621      	mov	r1, r4
 800c44a:	4640      	mov	r0, r8
 800c44c:	f7ff f95a 	bl	800b704 <_free_r>
 800c450:	463c      	mov	r4, r7
 800c452:	e7e0      	b.n	800c416 <_realloc_r+0x1e>

0800c454 <_malloc_usable_size_r>:
 800c454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c458:	1f18      	subs	r0, r3, #4
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	bfbc      	itt	lt
 800c45e:	580b      	ldrlt	r3, [r1, r0]
 800c460:	18c0      	addlt	r0, r0, r3
 800c462:	4770      	bx	lr

0800c464 <_init>:
 800c464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c466:	bf00      	nop
 800c468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c46a:	bc08      	pop	{r3}
 800c46c:	469e      	mov	lr, r3
 800c46e:	4770      	bx	lr

0800c470 <_fini>:
 800c470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c472:	bf00      	nop
 800c474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c476:	bc08      	pop	{r3}
 800c478:	469e      	mov	lr, r3
 800c47a:	4770      	bx	lr
