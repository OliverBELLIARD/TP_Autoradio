
TP_Autoradio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b73c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  0800b8cc  0800b8cc  0000c8cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd24  0800bd24  0000d074  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd24  0800bd24  0000cd24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd2c  0800bd2c  0000d074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd2c  0800bd2c  0000cd2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bd30  0800bd30  0000cd30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800bd34  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005a1c  20000074  0800bda8  0000d074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005a90  0800bda8  0000da90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023e8b  00000000  00000000  0000d0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052b3  00000000  00000000  00030f2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e48  00000000  00000000  000361e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000177f  00000000  00000000  00038030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ccbe  00000000  00000000  000397af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025f22  00000000  00000000  0006646d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001058a2  00000000  00000000  0008c38f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00191c31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008764  00000000  00000000  00191c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0019a3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b8b4 	.word	0x0800b8b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800b8b4 	.word	0x0800b8b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000566:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <MX_DMA_Init+0x48>)
 8000568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800056a:	4a0f      	ldr	r2, [pc, #60]	@ (80005a8 <MX_DMA_Init+0x48>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6493      	str	r3, [r2, #72]	@ 0x48
 8000572:	4b0d      	ldr	r3, [pc, #52]	@ (80005a8 <MX_DMA_Init+0x48>)
 8000574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2105      	movs	r1, #5
 8000582:	2010      	movs	r0, #16
 8000584:	f001 fc4c 	bl	8001e20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000588:	2010      	movs	r0, #16
 800058a:	f001 fc65 	bl	8001e58 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2105      	movs	r1, #5
 8000592:	2011      	movs	r0, #17
 8000594:	f001 fc44 	bl	8001e20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000598:	2011      	movs	r0, #17
 800059a:	f001 fc5d 	bl	8001e58 <HAL_NVIC_EnableIRQ>

}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40021000 	.word	0x40021000

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000094 	.word	0x20000094
 80005dc:	20000134 	.word	0x20000134

080005e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <MX_FREERTOS_Init+0x30>)
 80005e8:	1d3c      	adds	r4, r7, #4
 80005ea:	461d      	mov	r5, r3
 80005ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f007 ff24 	bl	800844a <osThreadCreate>
 8000602:	4603      	mov	r3, r0
 8000604:	4a03      	ldr	r2, [pc, #12]	@ (8000614 <MX_FREERTOS_Init+0x34>)
 8000606:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000608:	bf00      	nop
 800060a:	3720      	adds	r7, #32
 800060c:	46bd      	mov	sp, r7
 800060e:	bdb0      	pop	{r4, r5, r7, pc}
 8000610:	0800b8d8 	.word	0x0800b8d8
 8000614:	20000090 	.word	0x20000090

08000618 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000620:	2001      	movs	r0, #1
 8000622:	f007 ff5e 	bl	80084e2 <osDelay>
 8000626:	e7fb      	b.n	8000620 <StartDefaultTask+0x8>

08000628 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	@ 0x28
 800062c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063e:	4b35      	ldr	r3, [pc, #212]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	4a34      	ldr	r2, [pc, #208]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000644:	f043 0304 	orr.w	r3, r3, #4
 8000648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800064a:	4b32      	ldr	r3, [pc, #200]	@ (8000714 <MX_GPIO_Init+0xec>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	f003 0304 	and.w	r3, r3, #4
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000656:	4b2f      	ldr	r3, [pc, #188]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	4a2e      	ldr	r2, [pc, #184]	@ (8000714 <MX_GPIO_Init+0xec>)
 800065c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000662:	4b2c      	ldr	r3, [pc, #176]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b29      	ldr	r3, [pc, #164]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000672:	4a28      	ldr	r2, [pc, #160]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067a:	4b26      	ldr	r3, [pc, #152]	@ (8000714 <MX_GPIO_Init+0xec>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000686:	4b23      	ldr	r3, [pc, #140]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068a:	4a22      	ldr	r2, [pc, #136]	@ (8000714 <MX_GPIO_Init+0xec>)
 800068c:	f043 0302 	orr.w	r3, r3, #2
 8000690:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000692:	4b20      	ldr	r3, [pc, #128]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000696:	f003 0302 	and.w	r3, r3, #2
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VU_nRESET_Pin|LD2_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2121      	movs	r1, #33	@ 0x21
 80006a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a6:	f001 ff75 	bl	8002594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2180      	movs	r1, #128	@ 0x80
 80006ae:	481a      	ldr	r0, [pc, #104]	@ (8000718 <MX_GPIO_Init+0xf0>)
 80006b0:	f001 ff70 	bl	8002594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006ba:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4619      	mov	r1, r3
 80006ca:	4814      	ldr	r0, [pc, #80]	@ (800071c <MX_GPIO_Init+0xf4>)
 80006cc:	f001 fdb8 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pins : VU_nRESET_Pin LD2_Pin */
  GPIO_InitStruct.Pin = VU_nRESET_Pin|LD2_Pin;
 80006d0:	2321      	movs	r3, #33	@ 0x21
 80006d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	4619      	mov	r1, r3
 80006e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ea:	f001 fda9 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pin : VU_nCS_Pin */
  GPIO_InitStruct.Pin = VU_nCS_Pin;
 80006ee:	2380      	movs	r3, #128	@ 0x80
 80006f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2300      	movs	r3, #0
 80006fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VU_nCS_GPIO_Port, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	4804      	ldr	r0, [pc, #16]	@ (8000718 <MX_GPIO_Init+0xf0>)
 8000706:	f001 fd9b 	bl	8002240 <HAL_GPIO_Init>

}
 800070a:	bf00      	nop
 800070c:	3728      	adds	r7, #40	@ 0x28
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000
 8000718:	48000400 	.word	0x48000400
 800071c:	48000800 	.word	0x48000800

08000720 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000724:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	@ (8000798 <MX_I2C2_Init+0x78>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 800072a:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <MX_I2C2_Init+0x74>)
 800072c:	4a1b      	ldr	r2, [pc, #108]	@ (800079c <MX_I2C2_Init+0x7c>)
 800072e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000738:	2201      	movs	r2, #1
 800073a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <MX_I2C2_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000742:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <MX_I2C2_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074e:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800075a:	480e      	ldr	r0, [pc, #56]	@ (8000794 <MX_I2C2_Init+0x74>)
 800075c:	f001 ff4c 	bl	80025f8 <HAL_I2C_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000766:	f000 fa5b 	bl	8000c20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800076a:	2100      	movs	r1, #0
 800076c:	4809      	ldr	r0, [pc, #36]	@ (8000794 <MX_I2C2_Init+0x74>)
 800076e:	f002 fb67 	bl	8002e40 <HAL_I2CEx_ConfigAnalogFilter>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000778:	f000 fa52 	bl	8000c20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800077c:	2100      	movs	r1, #0
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000780:	f002 fba9 	bl	8002ed6 <HAL_I2CEx_ConfigDigitalFilter>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800078a:	f000 fa49 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000334 	.word	0x20000334
 8000798:	40005800 	.word	0x40005800
 800079c:	10d19ce4 	.word	0x10d19ce4

080007a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b0ac      	sub	sp, #176	@ 0xb0
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	2288      	movs	r2, #136	@ 0x88
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f00a f8e7 	bl	800a994 <memset>
  if(i2cHandle->Instance==I2C2)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a21      	ldr	r2, [pc, #132]	@ (8000850 <HAL_I2C_MspInit+0xb0>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d13b      	bne.n	8000848 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80007d0:	2380      	movs	r3, #128	@ 0x80
 80007d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4618      	mov	r0, r3
 80007de:	f003 fa5d 	bl	8003c9c <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80007e8:	f000 fa1a 	bl	8000c20 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ec:	4b19      	ldr	r3, [pc, #100]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 80007ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f0:	4a18      	ldr	r2, [pc, #96]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 80007f2:	f043 0302 	orr.w	r3, r3, #2
 80007f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f8:	4b16      	ldr	r3, [pc, #88]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 80007fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fc:	f003 0302 	and.w	r3, r3, #2
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000804:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000808:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800080c:	2312      	movs	r3, #18
 800080e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800081e:	2304      	movs	r3, #4
 8000820:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000828:	4619      	mov	r1, r3
 800082a:	480b      	ldr	r0, [pc, #44]	@ (8000858 <HAL_I2C_MspInit+0xb8>)
 800082c:	f001 fd08 	bl	8002240 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000830:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 8000832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000834:	4a07      	ldr	r2, [pc, #28]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 8000836:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800083a:	6593      	str	r3, [r2, #88]	@ 0x58
 800083c:	4b05      	ldr	r3, [pc, #20]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 800083e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000840:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000848:	bf00      	nop
 800084a:	37b0      	adds	r7, #176	@ 0xb0
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40005800 	.word	0x40005800
 8000854:	40021000 	.word	0x40021000
 8000858:	48000400 	.word	0x48000400

0800085c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000860:	f3bf 8f4f 	dsb	sy
}
 8000864:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <__NVIC_SystemReset+0x24>)
 8000868:	68db      	ldr	r3, [r3, #12]
 800086a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800086e:	4904      	ldr	r1, [pc, #16]	@ (8000880 <__NVIC_SystemReset+0x24>)
 8000870:	4b04      	ldr	r3, [pc, #16]	@ (8000884 <__NVIC_SystemReset+0x28>)
 8000872:	4313      	orrs	r3, r2
 8000874:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000876:	f3bf 8f4f 	dsb	sy
}
 800087a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <__NVIC_SystemReset+0x20>
 8000880:	e000ed00 	.word	0xe000ed00
 8000884:	05fa0004 	.word	0x05fa0004

08000888 <__io_putchar>:
 * @brief Transmit a character over UART.
 * @param ch: Character to transmit.
 * @retval int: The transmitted character.
 */
int __io_putchar(int ch)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000890:	1d39      	adds	r1, r7, #4
 8000892:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000896:	2201      	movs	r2, #1
 8000898:	4803      	ldr	r0, [pc, #12]	@ (80008a8 <__io_putchar+0x20>)
 800089a:	f006 fa1b 	bl	8006cd4 <HAL_UART_Transmit>

	return ch;
 800089e:	687b      	ldr	r3, [r7, #4]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200005e4 	.word	0x200005e4

080008ac <Error_Handler_xTaskCreate>:
/**
 * @brief  Gestion d'erreurs de création de tâche.
 * @param	BaseType_t	Retour de xTaskCreate.
 */
void Error_Handler_xTaskCreate(BaseType_t r)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	/* Vérification si la tâche a été créée avec succès */
	if (pdPASS == r) {
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d010      	beq.n	80008dc <Error_Handler_xTaskCreate+0x30>
		/* Si la tâche est créée avec succès, démarrer le scheduler */
#if (LOGS)
		printf("Tâche crée avec succès\r\n");
#endif
	} else if (errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY == r) {
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80008c0:	d105      	bne.n	80008ce <Error_Handler_xTaskCreate+0x22>
		printf("Erreur: Mémoire insuffisante\r\n");
 80008c2:	4808      	ldr	r0, [pc, #32]	@ (80008e4 <Error_Handler_xTaskCreate+0x38>)
 80008c4:	f009 ff52 	bl	800a76c <puts>
		Error_Handler();
 80008c8:	f000 f9aa 	bl	8000c20 <Error_Handler>
		/* Cas improbable : code d'erreur non prévu pour xTaskCreate */
		printf("Erreur inconnue lors de la création de la tâche\r\n");
		Error_Handler();  	// Gestion d'erreur générique
		NVIC_SystemReset(); // Réinitialiser le microcontrôleur
	}
}
 80008cc:	e006      	b.n	80008dc <Error_Handler_xTaskCreate+0x30>
		printf("Erreur inconnue lors de la création de la tâche\r\n");
 80008ce:	4806      	ldr	r0, [pc, #24]	@ (80008e8 <Error_Handler_xTaskCreate+0x3c>)
 80008d0:	f009 ff4c 	bl	800a76c <puts>
		Error_Handler();  	// Gestion d'erreur générique
 80008d4:	f000 f9a4 	bl	8000c20 <Error_Handler>
		NVIC_SystemReset(); // Réinitialiser le microcontrôleur
 80008d8:	f7ff ffc0 	bl	800085c <__NVIC_SystemReset>
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	0800b8f4 	.word	0x0800b8f4
 80008e8:	0800b914 	.word	0x0800b914

080008ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a04      	ldr	r2, [pc, #16]	@ (800090c <HAL_UART_RxCpltCallback+0x20>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d101      	bne.n	8000902 <HAL_UART_RxCpltCallback+0x16>
	{
		shell_uart_receive_irq_cb();	// Function giving the semaphore!
 80008fe:	f000 ffb7 	bl	8001870 <shell_uart_receive_irq_cb>
	}
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40004400 	.word	0x40004400

08000910 <task_LED>:


void task_LED (void * pvParameters) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	int duree = (int) pvParameters;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	60fb      	str	r3, [r7, #12]
#if (LOGS)
	printf("Task %s created\r\n", pcTaskGetName(xTaskGetCurrentTaskHandle()));
#endif
	for (;;)
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800091c:	2120      	movs	r1, #32
 800091e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000922:	f001 fe4f 	bl	80025c4 <HAL_GPIO_TogglePin>
		vTaskDelay( duree / portTICK_PERIOD_MS );  // Délai de duree en ms
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	4618      	mov	r0, r3
 800092a:	f008 fb37 	bl	8008f9c <vTaskDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800092e:	bf00      	nop
 8000930:	e7f4      	b.n	800091c <task_LED+0xc>
	...

08000934 <task_shell>:
	}
}

void task_shell(void * unused)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
#if (LOGS)
	printf("Task %s created\r\n", pcTaskGetName(xTaskGetCurrentTaskHandle()));
#endif

	shell_init();	// Shell initialization
 800093c:	f001 f82a 	bl	8001994 <shell_init>

	// Creation of all commands
	shell_add('f', fonction, "Une fonction inutile");
 8000940:	4a0c      	ldr	r2, [pc, #48]	@ (8000974 <task_shell+0x40>)
 8000942:	490d      	ldr	r1, [pc, #52]	@ (8000978 <task_shell+0x44>)
 8000944:	2066      	movs	r0, #102	@ 0x66
 8000946:	f001 f85d 	bl	8001a04 <shell_add>
	shell_add('a', addition, "Effectue une somme");
 800094a:	4a0c      	ldr	r2, [pc, #48]	@ (800097c <task_shell+0x48>)
 800094c:	490c      	ldr	r1, [pc, #48]	@ (8000980 <task_shell+0x4c>)
 800094e:	2061      	movs	r0, #97	@ 0x61
 8000950:	f001 f858 	bl	8001a04 <shell_add>
	shell_add('c', calcul, "Opération entre 2 nombres");
 8000954:	4a0b      	ldr	r2, [pc, #44]	@ (8000984 <task_shell+0x50>)
 8000956:	490c      	ldr	r1, [pc, #48]	@ (8000988 <task_shell+0x54>)
 8000958:	2063      	movs	r0, #99	@ 0x63
 800095a:	f001 f853 	bl	8001a04 <shell_add>
	shell_add('t', GPIOExpander_toggle_LED, "Change l'état d'une LED avec son id");
 800095e:	4a0b      	ldr	r2, [pc, #44]	@ (800098c <task_shell+0x58>)
 8000960:	490b      	ldr	r1, [pc, #44]	@ (8000990 <task_shell+0x5c>)
 8000962:	2074      	movs	r0, #116	@ 0x74
 8000964:	f001 f84e 	bl	8001a04 <shell_add>

	shell_run();	// boucle infinie
 8000968:	f001 f8f8 	bl	8001b5c <shell_run>
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	0800b948 	.word	0x0800b948
 8000978:	08001679 	.word	0x08001679
 800097c:	0800b960 	.word	0x0800b960
 8000980:	080017bd 	.word	0x080017bd
 8000984:	0800b974 	.word	0x0800b974
 8000988:	080016c1 	.word	0x080016c1
 800098c:	0800b990 	.word	0x0800b990
 8000990:	08001829 	.word	0x08001829

08000994 <task_GPIO_expander>:

		vTaskDelay( delay / portTICK_PERIOD_MS );  // Délai de duree en Dms
	}
}

void task_GPIO_expander (void * unused) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
#if (LOGS)
	printf("Task %s created\r\n", pcTaskGetName(xTaskGetCurrentTaskHandle()));
#endif

	// Initialize MCP23S17 GPIO expander
	MCP23S17_Init();
 800099c:	f000 fe10 	bl	80015c0 <MCP23S17_Init>
	// Simple test of the array of leds with an animation
	//test_chenillard(100);

	for (;;)
	{
		vTaskDelay(1);  // Délai de duree en ms
 80009a0:	2001      	movs	r0, #1
 80009a2:	f008 fafb 	bl	8008f9c <vTaskDelay>
 80009a6:	e7fb      	b.n	80009a0 <task_GPIO_expander+0xc>

080009a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	@ 0x28
 80009ac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ae:	f001 f93f 	bl	8001c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b2:	f000 f8a7 	bl	8000b04 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80009b6:	f000 f8f6 	bl	8000ba6 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ba:	f7ff fe35 	bl	8000628 <MX_GPIO_Init>
  MX_DMA_Init();
 80009be:	f7ff fdcf 	bl	8000560 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80009c2:	f000 fcd3 	bl	800136c <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80009c6:	f7ff feab 	bl	8000720 <MX_I2C2_Init>
  MX_SPI3_Init();
 80009ca:	f000 fa73 	bl	8000eb4 <MX_SPI3_Init>
  MX_SAI2_Init();
 80009ce:	f000 f92d 	bl	8000c2c <MX_SAI2_Init>
  /* USER CODE BEGIN 2 */
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 80009d2:	4b3d      	ldr	r3, [pc, #244]	@ (8000ac8 <main+0x120>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ac8 <main+0x120>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80009e0:	601a      	str	r2, [r3, #0]

	uint8_t pData[16];
	printf("Before I2C\r\n");
 80009e2:	483a      	ldr	r0, [pc, #232]	@ (8000acc <main+0x124>)
 80009e4:	f009 fec2 	bl	800a76c <puts>
	for (int i = 0; i < 16; i++)
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	e00a      	b.n	8000a04 <main+0x5c>
			printf("0x%X\r\n", pData[i]);
 80009ee:	463a      	mov	r2, r7
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	4413      	add	r3, r2
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	4619      	mov	r1, r3
 80009f8:	4835      	ldr	r0, [pc, #212]	@ (8000ad0 <main+0x128>)
 80009fa:	f009 fe4f 	bl	800a69c <iprintf>
	for (int i = 0; i < 16; i++)
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	3301      	adds	r3, #1
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	2b0f      	cmp	r3, #15
 8000a08:	ddf1      	ble.n	80009ee <main+0x46>
	HAL_I2C_Mem_Read(&hi2c2, SGTL5000_CODEC, SGTL5000_CHIP_ID, 1, pData, 16, HAL_MAX_DELAY);
 8000a0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a0e:	9302      	str	r3, [sp, #8]
 8000a10:	2310      	movs	r3, #16
 8000a12:	9301      	str	r3, [sp, #4]
 8000a14:	463b      	mov	r3, r7
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	2301      	movs	r3, #1
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2114      	movs	r1, #20
 8000a1e:	482d      	ldr	r0, [pc, #180]	@ (8000ad4 <main+0x12c>)
 8000a20:	f001 fe86 	bl	8002730 <HAL_I2C_Mem_Read>
	printf("After I2C\r\n");
 8000a24:	482c      	ldr	r0, [pc, #176]	@ (8000ad8 <main+0x130>)
 8000a26:	f009 fea1 	bl	800a76c <puts>
	for (int i = 0; i < 16; i++)
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	e00a      	b.n	8000a46 <main+0x9e>
		printf("0x%X\r\n", pData[i]);
 8000a30:	463a      	mov	r2, r7
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	4413      	add	r3, r2
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4825      	ldr	r0, [pc, #148]	@ (8000ad0 <main+0x128>)
 8000a3c:	f009 fe2e 	bl	800a69c <iprintf>
	for (int i = 0; i < 16; i++)
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	3301      	adds	r3, #1
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	2b0f      	cmp	r3, #15
 8000a4a:	ddf1      	ble.n	8000a30 <main+0x88>
	//HAL_SAI_Receive_DMA();
	//HAL_SAI_Transmit_DMA();

	// Test printf
	printf("******* TP Autoradio *******\r\n");
 8000a4c:	4823      	ldr	r0, [pc, #140]	@ (8000adc <main+0x134>)
 8000a4e:	f009 fe8d 	bl	800a76c <puts>

	// Create the task, storing the handle.
	Error_Handler_xTaskCreate(
 8000a52:	4b23      	ldr	r3, [pc, #140]	@ (8000ae0 <main+0x138>)
 8000a54:	9301      	str	r3, [sp, #4]
 8000a56:	2302      	movs	r3, #2
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000a5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a62:	4920      	ldr	r1, [pc, #128]	@ (8000ae4 <main+0x13c>)
 8000a64:	4820      	ldr	r0, [pc, #128]	@ (8000ae8 <main+0x140>)
 8000a66:	f008 f949 	bl	8008cfc <xTaskCreate>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff1d 	bl	80008ac <Error_Handler_xTaskCreate>
					(void *) 500, // 500 ms
					TASK_MCP23S17_PRIORITY, // Priority at which the task is created.
					&h_task_GPIOExpander)); // Used to pass out the created task's handle.

	// Turn on LED2 (Green)
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a72:	2120      	movs	r1, #32
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a78:	f001 fda4 	bl	80025c4 <HAL_GPIO_TogglePin>

	// Create the task, storing the handle.
	Error_Handler_xTaskCreate(
 8000a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000aec <main+0x144>)
 8000a7e:	9301      	str	r3, [sp, #4]
 8000a80:	2301      	movs	r3, #1
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	23c8      	movs	r3, #200	@ 0xc8
 8000a86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a8a:	4919      	ldr	r1, [pc, #100]	@ (8000af0 <main+0x148>)
 8000a8c:	4819      	ldr	r0, [pc, #100]	@ (8000af4 <main+0x14c>)
 8000a8e:	f008 f935 	bl	8008cfc <xTaskCreate>
 8000a92:	4603      	mov	r3, r0
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff09 	bl	80008ac <Error_Handler_xTaskCreate>
					STACK_DEPTH, // Stack size in words, not bytes.
					(void *) DELAY_LED_TOGGLE, // Parameter passed into the task.
					1,// Priority at which the task is created.
					&h_task_LED)); // Used to pass out the created task's handle.
	// Shell task
	Error_Handler_xTaskCreate(
 8000a9a:	4b17      	ldr	r3, [pc, #92]	@ (8000af8 <main+0x150>)
 8000a9c:	9301      	str	r3, [sp, #4]
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000aa8:	4914      	ldr	r1, [pc, #80]	@ (8000afc <main+0x154>)
 8000aaa:	4815      	ldr	r0, [pc, #84]	@ (8000b00 <main+0x158>)
 8000aac:	f008 f926 	bl	8008cfc <xTaskCreate>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fefa 	bl	80008ac <Error_Handler_xTaskCreate>
					NULL,
					TASK_SHELL_PRIORITY,
					&h_task_shell));

	// OS Start
	vTaskStartScheduler();
 8000ab8:	f008 faa6 	bl	8009008 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000abc:	f7ff fd90 	bl	80005e0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ac0:	f007 fcbc 	bl	800843c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <main+0x11c>
 8000ac8:	20000394 	.word	0x20000394
 8000acc:	0800b9b8 	.word	0x0800b9b8
 8000ad0:	0800b9c4 	.word	0x0800b9c4
 8000ad4:	20000334 	.word	0x20000334
 8000ad8:	0800b9cc 	.word	0x0800b9cc
 8000adc:	0800b9d8 	.word	0x0800b9d8
 8000ae0:	20000390 	.word	0x20000390
 8000ae4:	0800b9f8 	.word	0x0800b9f8
 8000ae8:	08000995 	.word	0x08000995
 8000aec:	20000388 	.word	0x20000388
 8000af0:	0800ba08 	.word	0x0800ba08
 8000af4:	08000911 	.word	0x08000911
 8000af8:	2000038c 	.word	0x2000038c
 8000afc:	0800ba10 	.word	0x0800ba10
 8000b00:	08000935 	.word	0x08000935

08000b04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b096      	sub	sp, #88	@ 0x58
 8000b08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	2244      	movs	r2, #68	@ 0x44
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f009 ff3e 	bl	800a994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b18:	463b      	mov	r3, r7
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
 8000b24:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b26:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b2a:	f002 fa2f 	bl	8002f8c <HAL_PWREx_ControlVoltageScaling>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b34:	f000 f874 	bl	8000c20 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b40:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b42:	2310      	movs	r3, #16
 8000b44:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b46:	2302      	movs	r3, #2
 8000b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b52:	230a      	movs	r3, #10
 8000b54:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b56:	2307      	movs	r3, #7
 8000b58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4618      	mov	r0, r3
 8000b68:	f002 fa66 	bl	8003038 <HAL_RCC_OscConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b72:	f000 f855 	bl	8000c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b76:	230f      	movs	r3, #15
 8000b78:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	2104      	movs	r1, #4
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f002 fe2e 	bl	80037f0 <HAL_RCC_ClockConfig>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b9a:	f000 f841 	bl	8000c20 <Error_Handler>
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	3758      	adds	r7, #88	@ 0x58
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b0a2      	sub	sp, #136	@ 0x88
 8000baa:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bac:	463b      	mov	r3, r7
 8000bae:	2288      	movs	r2, #136	@ 0x88
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f009 feee 	bl	800a994 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000bb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bbc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	66bb      	str	r3, [r7, #104]	@ 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 8000bca:	230d      	movs	r3, #13
 8000bcc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8000bce:	2311      	movs	r3, #17
 8000bd0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000bda:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bde:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be0:	463b      	mov	r3, r7
 8000be2:	4618      	mov	r0, r3
 8000be4:	f003 f85a 	bl	8003c9c <HAL_RCCEx_PeriphCLKConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <PeriphCommonClock_Config+0x4c>
  {
    Error_Handler();
 8000bee:	f000 f817 	bl	8000c20 <Error_Handler>
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	3788      	adds	r7, #136	@ 0x88
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a04      	ldr	r2, [pc, #16]	@ (8000c1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d101      	bne.n	8000c12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c0e:	f001 f82f 	bl	8001c70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40001000 	.word	0x40001000

08000c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c24:	b672      	cpsid	i
}
 8000c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <Error_Handler+0x8>

08000c2c <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8000c30:	4b2a      	ldr	r3, [pc, #168]	@ (8000cdc <MX_SAI2_Init+0xb0>)
 8000c32:	4a2b      	ldr	r2, [pc, #172]	@ (8000ce0 <MX_SAI2_Init+0xb4>)
 8000c34:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000c36:	4b29      	ldr	r3, [pc, #164]	@ (8000cdc <MX_SAI2_Init+0xb0>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000c3c:	4b27      	ldr	r3, [pc, #156]	@ (8000cdc <MX_SAI2_Init+0xb0>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c42:	4b26      	ldr	r3, [pc, #152]	@ (8000cdc <MX_SAI2_Init+0xb0>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000c48:	4b24      	ldr	r3, [pc, #144]	@ (8000cdc <MX_SAI2_Init+0xb0>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000c4e:	4b23      	ldr	r3, [pc, #140]	@ (8000cdc <MX_SAI2_Init+0xb0>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000c54:	4b21      	ldr	r3, [pc, #132]	@ (8000cdc <MX_SAI2_Init+0xb0>)
 8000c56:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000c5a:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cdc <MX_SAI2_Init+0xb0>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000c62:	4b1e      	ldr	r3, [pc, #120]	@ (8000cdc <MX_SAI2_Init+0xb0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000c68:	4b1c      	ldr	r3, [pc, #112]	@ (8000cdc <MX_SAI2_Init+0xb0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cdc <MX_SAI2_Init+0xb0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000c74:	2302      	movs	r3, #2
 8000c76:	2200      	movs	r2, #0
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4818      	ldr	r0, [pc, #96]	@ (8000cdc <MX_SAI2_Init+0xb0>)
 8000c7c:	f004 fb28 	bl	80052d0 <HAL_SAI_InitProtocol>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
 8000c86:	f7ff ffcb 	bl	8000c20 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000c8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ce4 <MX_SAI2_Init+0xb8>)
 8000c8c:	4a16      	ldr	r2, [pc, #88]	@ (8000ce8 <MX_SAI2_Init+0xbc>)
 8000c8e:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000c90:	4b14      	ldr	r3, [pc, #80]	@ (8000ce4 <MX_SAI2_Init+0xb8>)
 8000c92:	2203      	movs	r2, #3
 8000c94:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000c96:	4b13      	ldr	r3, [pc, #76]	@ (8000ce4 <MX_SAI2_Init+0xb8>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <MX_SAI2_Init+0xb8>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000ca2:	4b10      	ldr	r3, [pc, #64]	@ (8000ce4 <MX_SAI2_Init+0xb8>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <MX_SAI2_Init+0xb8>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000cae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce4 <MX_SAI2_Init+0xb8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <MX_SAI2_Init+0xb8>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000cba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce4 <MX_SAI2_Init+0xb8>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4807      	ldr	r0, [pc, #28]	@ (8000ce4 <MX_SAI2_Init+0xb8>)
 8000cc8:	f004 fb02 	bl	80052d0 <HAL_SAI_InitProtocol>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 8000cd2:	f7ff ffa5 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000394 	.word	0x20000394
 8000ce0:	40015804 	.word	0x40015804
 8000ce4:	20000418 	.word	0x20000418
 8000ce8:	40015824 	.word	0x40015824

08000cec <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	@ 0x28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a64      	ldr	r2, [pc, #400]	@ (8000e8c <HAL_SAI_MspInit+0x1a0>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d15e      	bne.n	8000dbc <HAL_SAI_MspInit+0xd0>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8000cfe:	4b64      	ldr	r3, [pc, #400]	@ (8000e90 <HAL_SAI_MspInit+0x1a4>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d113      	bne.n	8000d2e <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000d06:	4b63      	ldr	r3, [pc, #396]	@ (8000e94 <HAL_SAI_MspInit+0x1a8>)
 8000d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d0a:	4a62      	ldr	r2, [pc, #392]	@ (8000e94 <HAL_SAI_MspInit+0x1a8>)
 8000d0c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d10:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d12:	4b60      	ldr	r3, [pc, #384]	@ (8000e94 <HAL_SAI_MspInit+0x1a8>)
 8000d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2105      	movs	r1, #5
 8000d22:	204b      	movs	r0, #75	@ 0x4b
 8000d24:	f001 f87c 	bl	8001e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000d28:	204b      	movs	r0, #75	@ 0x4b
 8000d2a:	f001 f895 	bl	8001e58 <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 8000d2e:	4b58      	ldr	r3, [pc, #352]	@ (8000e90 <HAL_SAI_MspInit+0x1a4>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	3301      	adds	r3, #1
 8000d34:	4a56      	ldr	r2, [pc, #344]	@ (8000e90 <HAL_SAI_MspInit+0x1a4>)
 8000d36:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d38:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000d4a:	230d      	movs	r3, #13
 8000d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4619      	mov	r1, r3
 8000d54:	4850      	ldr	r0, [pc, #320]	@ (8000e98 <HAL_SAI_MspInit+0x1ac>)
 8000d56:	f001 fa73 	bl	8002240 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000d5a:	4b50      	ldr	r3, [pc, #320]	@ (8000e9c <HAL_SAI_MspInit+0x1b0>)
 8000d5c:	4a50      	ldr	r2, [pc, #320]	@ (8000ea0 <HAL_SAI_MspInit+0x1b4>)
 8000d5e:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000d60:	4b4e      	ldr	r3, [pc, #312]	@ (8000e9c <HAL_SAI_MspInit+0x1b0>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d66:	4b4d      	ldr	r3, [pc, #308]	@ (8000e9c <HAL_SAI_MspInit+0x1b0>)
 8000d68:	2210      	movs	r2, #16
 8000d6a:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d6c:	4b4b      	ldr	r3, [pc, #300]	@ (8000e9c <HAL_SAI_MspInit+0x1b0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000d72:	4b4a      	ldr	r3, [pc, #296]	@ (8000e9c <HAL_SAI_MspInit+0x1b0>)
 8000d74:	2280      	movs	r2, #128	@ 0x80
 8000d76:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d78:	4b48      	ldr	r3, [pc, #288]	@ (8000e9c <HAL_SAI_MspInit+0x1b0>)
 8000d7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d7e:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d80:	4b46      	ldr	r3, [pc, #280]	@ (8000e9c <HAL_SAI_MspInit+0x1b0>)
 8000d82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d86:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000d88:	4b44      	ldr	r3, [pc, #272]	@ (8000e9c <HAL_SAI_MspInit+0x1b0>)
 8000d8a:	2220      	movs	r2, #32
 8000d8c:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8000d8e:	4b43      	ldr	r3, [pc, #268]	@ (8000e9c <HAL_SAI_MspInit+0x1b0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000d94:	4841      	ldr	r0, [pc, #260]	@ (8000e9c <HAL_SAI_MspInit+0x1b0>)
 8000d96:	f001 f86d 	bl	8001e74 <HAL_DMA_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8000da0:	f7ff ff3e 	bl	8000c20 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a3d      	ldr	r2, [pc, #244]	@ (8000e9c <HAL_SAI_MspInit+0x1b0>)
 8000da8:	671a      	str	r2, [r3, #112]	@ 0x70
 8000daa:	4a3c      	ldr	r2, [pc, #240]	@ (8000e9c <HAL_SAI_MspInit+0x1b0>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a3a      	ldr	r2, [pc, #232]	@ (8000e9c <HAL_SAI_MspInit+0x1b0>)
 8000db4:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000db6:	4a39      	ldr	r2, [pc, #228]	@ (8000e9c <HAL_SAI_MspInit+0x1b0>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a38      	ldr	r2, [pc, #224]	@ (8000ea4 <HAL_SAI_MspInit+0x1b8>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d15e      	bne.n	8000e84 <HAL_SAI_MspInit+0x198>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8000dc6:	4b32      	ldr	r3, [pc, #200]	@ (8000e90 <HAL_SAI_MspInit+0x1a4>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d113      	bne.n	8000df6 <HAL_SAI_MspInit+0x10a>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000dce:	4b31      	ldr	r3, [pc, #196]	@ (8000e94 <HAL_SAI_MspInit+0x1a8>)
 8000dd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dd2:	4a30      	ldr	r2, [pc, #192]	@ (8000e94 <HAL_SAI_MspInit+0x1a8>)
 8000dd4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000dd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dda:	4b2e      	ldr	r3, [pc, #184]	@ (8000e94 <HAL_SAI_MspInit+0x1a8>)
 8000ddc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2105      	movs	r1, #5
 8000dea:	204b      	movs	r0, #75	@ 0x4b
 8000dec:	f001 f818 	bl	8001e20 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000df0:	204b      	movs	r0, #75	@ 0x4b
 8000df2:	f001 f831 	bl	8001e58 <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8000df6:	4b26      	ldr	r3, [pc, #152]	@ (8000e90 <HAL_SAI_MspInit+0x1a4>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	4a24      	ldr	r2, [pc, #144]	@ (8000e90 <HAL_SAI_MspInit+0x1a4>)
 8000dfe:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000e12:	230d      	movs	r3, #13
 8000e14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4822      	ldr	r0, [pc, #136]	@ (8000ea8 <HAL_SAI_MspInit+0x1bc>)
 8000e1e:	f001 fa0f 	bl	8002240 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 8000e22:	4b22      	ldr	r3, [pc, #136]	@ (8000eac <HAL_SAI_MspInit+0x1c0>)
 8000e24:	4a22      	ldr	r2, [pc, #136]	@ (8000eb0 <HAL_SAI_MspInit+0x1c4>)
 8000e26:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 8000e28:	4b20      	ldr	r3, [pc, #128]	@ (8000eac <HAL_SAI_MspInit+0x1c0>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000eac <HAL_SAI_MspInit+0x1c0>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e34:	4b1d      	ldr	r3, [pc, #116]	@ (8000eac <HAL_SAI_MspInit+0x1c0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8000e3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000eac <HAL_SAI_MspInit+0x1c0>)
 8000e3c:	2280      	movs	r2, #128	@ 0x80
 8000e3e:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e40:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <HAL_SAI_MspInit+0x1c0>)
 8000e42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e46:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e48:	4b18      	ldr	r3, [pc, #96]	@ (8000eac <HAL_SAI_MspInit+0x1c0>)
 8000e4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e4e:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8000e50:	4b16      	ldr	r3, [pc, #88]	@ (8000eac <HAL_SAI_MspInit+0x1c0>)
 8000e52:	2220      	movs	r2, #32
 8000e54:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8000e56:	4b15      	ldr	r3, [pc, #84]	@ (8000eac <HAL_SAI_MspInit+0x1c0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8000e5c:	4813      	ldr	r0, [pc, #76]	@ (8000eac <HAL_SAI_MspInit+0x1c0>)
 8000e5e:	f001 f809 	bl	8001e74 <HAL_DMA_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 8000e68:	f7ff feda 	bl	8000c20 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000eac <HAL_SAI_MspInit+0x1c0>)
 8000e70:	671a      	str	r2, [r3, #112]	@ 0x70
 8000e72:	4a0e      	ldr	r2, [pc, #56]	@ (8000eac <HAL_SAI_MspInit+0x1c0>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a0c      	ldr	r2, [pc, #48]	@ (8000eac <HAL_SAI_MspInit+0x1c0>)
 8000e7c:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000e7e:	4a0b      	ldr	r2, [pc, #44]	@ (8000eac <HAL_SAI_MspInit+0x1c0>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 8000e84:	bf00      	nop
 8000e86:	3728      	adds	r7, #40	@ 0x28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40015804 	.word	0x40015804
 8000e90:	2000052c 	.word	0x2000052c
 8000e94:	40021000 	.word	0x40021000
 8000e98:	48000400 	.word	0x48000400
 8000e9c:	2000049c 	.word	0x2000049c
 8000ea0:	4002006c 	.word	0x4002006c
 8000ea4:	40015824 	.word	0x40015824
 8000ea8:	48000800 	.word	0x48000800
 8000eac:	200004e4 	.word	0x200004e4
 8000eb0:	40020080 	.word	0x40020080

08000eb4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f28 <MX_SPI3_Init+0x74>)
 8000eba:	4a1c      	ldr	r2, [pc, #112]	@ (8000f2c <MX_SPI3_Init+0x78>)
 8000ebc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8000f28 <MX_SPI3_Init+0x74>)
 8000ec0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ec4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ec6:	4b18      	ldr	r3, [pc, #96]	@ (8000f28 <MX_SPI3_Init+0x74>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ecc:	4b16      	ldr	r3, [pc, #88]	@ (8000f28 <MX_SPI3_Init+0x74>)
 8000ece:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000ed2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ed4:	4b14      	ldr	r3, [pc, #80]	@ (8000f28 <MX_SPI3_Init+0x74>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eda:	4b13      	ldr	r3, [pc, #76]	@ (8000f28 <MX_SPI3_Init+0x74>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <MX_SPI3_Init+0x74>)
 8000ee2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ee6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f28 <MX_SPI3_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	@ (8000f28 <MX_SPI3_Init+0x74>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <MX_SPI3_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000efa:	4b0b      	ldr	r3, [pc, #44]	@ (8000f28 <MX_SPI3_Init+0x74>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000f00:	4b09      	ldr	r3, [pc, #36]	@ (8000f28 <MX_SPI3_Init+0x74>)
 8000f02:	2207      	movs	r2, #7
 8000f04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f06:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <MX_SPI3_Init+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <MX_SPI3_Init+0x74>)
 8000f0e:	2208      	movs	r2, #8
 8000f10:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f12:	4805      	ldr	r0, [pc, #20]	@ (8000f28 <MX_SPI3_Init+0x74>)
 8000f14:	f004 ff39 	bl	8005d8a <HAL_SPI_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000f1e:	f7ff fe7f 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000530 	.word	0x20000530
 8000f2c:	40003c00 	.word	0x40003c00

08000f30 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	@ 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a29      	ldr	r2, [pc, #164]	@ (8000ff4 <HAL_SPI_MspInit+0xc4>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d14c      	bne.n	8000fec <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f52:	4b29      	ldr	r3, [pc, #164]	@ (8000ff8 <HAL_SPI_MspInit+0xc8>)
 8000f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f56:	4a28      	ldr	r2, [pc, #160]	@ (8000ff8 <HAL_SPI_MspInit+0xc8>)
 8000f58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f5e:	4b26      	ldr	r3, [pc, #152]	@ (8000ff8 <HAL_SPI_MspInit+0xc8>)
 8000f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6a:	4b23      	ldr	r3, [pc, #140]	@ (8000ff8 <HAL_SPI_MspInit+0xc8>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6e:	4a22      	ldr	r2, [pc, #136]	@ (8000ff8 <HAL_SPI_MspInit+0xc8>)
 8000f70:	f043 0304 	orr.w	r3, r3, #4
 8000f74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f76:	4b20      	ldr	r3, [pc, #128]	@ (8000ff8 <HAL_SPI_MspInit+0xc8>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7a:	f003 0304 	and.w	r3, r3, #4
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f82:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff8 <HAL_SPI_MspInit+0xc8>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f86:	4a1c      	ldr	r2, [pc, #112]	@ (8000ff8 <HAL_SPI_MspInit+0xc8>)
 8000f88:	f043 0302 	orr.w	r3, r3, #2
 8000f8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff8 <HAL_SPI_MspInit+0xc8>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = VU_SCK_Pin|VU_MISO_Pin;
 8000f9a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fac:	2306      	movs	r3, #6
 8000fae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4811      	ldr	r0, [pc, #68]	@ (8000ffc <HAL_SPI_MspInit+0xcc>)
 8000fb8:	f001 f942 	bl	8002240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VU_MOSI_Pin;
 8000fbc:	2320      	movs	r3, #32
 8000fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fcc:	2306      	movs	r3, #6
 8000fce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(VU_MOSI_GPIO_Port, &GPIO_InitStruct);
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	480a      	ldr	r0, [pc, #40]	@ (8001000 <HAL_SPI_MspInit+0xd0>)
 8000fd8:	f001 f932 	bl	8002240 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2105      	movs	r1, #5
 8000fe0:	2033      	movs	r0, #51	@ 0x33
 8000fe2:	f000 ff1d 	bl	8001e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000fe6:	2033      	movs	r0, #51	@ 0x33
 8000fe8:	f000 ff36 	bl	8001e58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000fec:	bf00      	nop
 8000fee:	3728      	adds	r7, #40	@ 0x28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40003c00 	.word	0x40003c00
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	48000800 	.word	0x48000800
 8001000:	48000400 	.word	0x48000400

08001004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100a:	4b11      	ldr	r3, [pc, #68]	@ (8001050 <HAL_MspInit+0x4c>)
 800100c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800100e:	4a10      	ldr	r2, [pc, #64]	@ (8001050 <HAL_MspInit+0x4c>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6613      	str	r3, [r2, #96]	@ 0x60
 8001016:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <HAL_MspInit+0x4c>)
 8001018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001022:	4b0b      	ldr	r3, [pc, #44]	@ (8001050 <HAL_MspInit+0x4c>)
 8001024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001026:	4a0a      	ldr	r2, [pc, #40]	@ (8001050 <HAL_MspInit+0x4c>)
 8001028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800102c:	6593      	str	r3, [r2, #88]	@ 0x58
 800102e:	4b08      	ldr	r3, [pc, #32]	@ (8001050 <HAL_MspInit+0x4c>)
 8001030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001036:	603b      	str	r3, [r7, #0]
 8001038:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	210f      	movs	r1, #15
 800103e:	f06f 0001 	mvn.w	r0, #1
 8001042:	f000 feed 	bl	8001e20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000

08001054 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08e      	sub	sp, #56	@ 0x38
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 800105c:	2300      	movs	r3, #0
 800105e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001062:	4b34      	ldr	r3, [pc, #208]	@ (8001134 <HAL_InitTick+0xe0>)
 8001064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001066:	4a33      	ldr	r2, [pc, #204]	@ (8001134 <HAL_InitTick+0xe0>)
 8001068:	f043 0310 	orr.w	r3, r3, #16
 800106c:	6593      	str	r3, [r2, #88]	@ 0x58
 800106e:	4b31      	ldr	r3, [pc, #196]	@ (8001134 <HAL_InitTick+0xe0>)
 8001070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001072:	f003 0310 	and.w	r3, r3, #16
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800107a:	f107 0210 	add.w	r2, r7, #16
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f002 fd77 	bl	8003b78 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800108a:	6a3b      	ldr	r3, [r7, #32]
 800108c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800108e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001090:	2b00      	cmp	r3, #0
 8001092:	d103      	bne.n	800109c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001094:	f002 fd44 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 8001098:	6378      	str	r0, [r7, #52]	@ 0x34
 800109a:	e004      	b.n	80010a6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800109c:	f002 fd40 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 80010a0:	4603      	mov	r3, r0
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010a8:	4a23      	ldr	r2, [pc, #140]	@ (8001138 <HAL_InitTick+0xe4>)
 80010aa:	fba2 2303 	umull	r2, r3, r2, r3
 80010ae:	0c9b      	lsrs	r3, r3, #18
 80010b0:	3b01      	subs	r3, #1
 80010b2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80010b4:	4b21      	ldr	r3, [pc, #132]	@ (800113c <HAL_InitTick+0xe8>)
 80010b6:	4a22      	ldr	r2, [pc, #136]	@ (8001140 <HAL_InitTick+0xec>)
 80010b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80010ba:	4b20      	ldr	r3, [pc, #128]	@ (800113c <HAL_InitTick+0xe8>)
 80010bc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010c0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010c2:	4a1e      	ldr	r2, [pc, #120]	@ (800113c <HAL_InitTick+0xe8>)
 80010c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010c6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010c8:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <HAL_InitTick+0xe8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ce:	4b1b      	ldr	r3, [pc, #108]	@ (800113c <HAL_InitTick+0xe8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d4:	4b19      	ldr	r3, [pc, #100]	@ (800113c <HAL_InitTick+0xe8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80010da:	4818      	ldr	r0, [pc, #96]	@ (800113c <HAL_InitTick+0xe8>)
 80010dc:	f005 fae6 	bl	80066ac <HAL_TIM_Base_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80010e6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d11b      	bne.n	8001126 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80010ee:	4813      	ldr	r0, [pc, #76]	@ (800113c <HAL_InitTick+0xe8>)
 80010f0:	f005 fb3e 	bl	8006770 <HAL_TIM_Base_Start_IT>
 80010f4:	4603      	mov	r3, r0
 80010f6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80010fa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d111      	bne.n	8001126 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001102:	2036      	movs	r0, #54	@ 0x36
 8001104:	f000 fea8 	bl	8001e58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b0f      	cmp	r3, #15
 800110c:	d808      	bhi.n	8001120 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800110e:	2200      	movs	r2, #0
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	2036      	movs	r0, #54	@ 0x36
 8001114:	f000 fe84 	bl	8001e20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001118:	4a0a      	ldr	r2, [pc, #40]	@ (8001144 <HAL_InitTick+0xf0>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	e002      	b.n	8001126 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001126:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800112a:	4618      	mov	r0, r3
 800112c:	3738      	adds	r7, #56	@ 0x38
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000
 8001138:	431bde83 	.word	0x431bde83
 800113c:	20000594 	.word	0x20000594
 8001140:	40001000 	.word	0x40001000
 8001144:	2000000c 	.word	0x2000000c

08001148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <NMI_Handler+0x4>

08001150 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <HardFault_Handler+0x4>

08001158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <MemManage_Handler+0x4>

08001160 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <BusFault_Handler+0x4>

08001168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <UsageFault_Handler+0x4>

08001170 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8001184:	4802      	ldr	r0, [pc, #8]	@ (8001190 <DMA1_Channel6_IRQHandler+0x10>)
 8001186:	f000 ffac 	bl	80020e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	2000049c 	.word	0x2000049c

08001194 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8001198:	4802      	ldr	r0, [pc, #8]	@ (80011a4 <DMA1_Channel7_IRQHandler+0x10>)
 800119a:	f000 ffa2 	bl	80020e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200004e4 	.word	0x200004e4

080011a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011ac:	4802      	ldr	r0, [pc, #8]	@ (80011b8 <USART2_IRQHandler+0x10>)
 80011ae:	f005 fe67 	bl	8006e80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200005e4 	.word	0x200005e4

080011bc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80011c0:	4802      	ldr	r0, [pc, #8]	@ (80011cc <SPI3_IRQHandler+0x10>)
 80011c2:	f004 fffb 	bl	80061bc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000530 	.word	0x20000530

080011d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011d4:	4802      	ldr	r0, [pc, #8]	@ (80011e0 <TIM6_DAC_IRQHandler+0x10>)
 80011d6:	f005 fb3b 	bl	8006850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000594 	.word	0x20000594

080011e4 <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 80011e8:	4803      	ldr	r0, [pc, #12]	@ (80011f8 <SAI2_IRQHandler+0x14>)
 80011ea:	f004 fa7b 	bl	80056e4 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 80011ee:	4803      	ldr	r0, [pc, #12]	@ (80011fc <SAI2_IRQHandler+0x18>)
 80011f0:	f004 fa78 	bl	80056e4 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000394 	.word	0x20000394
 80011fc:	20000418 	.word	0x20000418

08001200 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	e00a      	b.n	8001228 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001212:	f3af 8000 	nop.w
 8001216:	4601      	mov	r1, r0
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	60ba      	str	r2, [r7, #8]
 800121e:	b2ca      	uxtb	r2, r1
 8001220:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	3301      	adds	r3, #1
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	429a      	cmp	r2, r3
 800122e:	dbf0      	blt.n	8001212 <_read+0x12>
  }

  return len;
 8001230:	687b      	ldr	r3, [r7, #4]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	60f8      	str	r0, [r7, #12]
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	e009      	b.n	8001260 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	60ba      	str	r2, [r7, #8]
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fb17 	bl	8000888 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	3301      	adds	r3, #1
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	697a      	ldr	r2, [r7, #20]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	429a      	cmp	r2, r3
 8001266:	dbf1      	blt.n	800124c <_write+0x12>
  }
  return len;
 8001268:	687b      	ldr	r3, [r7, #4]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <_close>:

int _close(int file)
{
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800127a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800129a:	605a      	str	r2, [r3, #4]
  return 0;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <_isatty>:

int _isatty(int file)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012b2:	2301      	movs	r3, #1
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e4:	4a14      	ldr	r2, [pc, #80]	@ (8001338 <_sbrk+0x5c>)
 80012e6:	4b15      	ldr	r3, [pc, #84]	@ (800133c <_sbrk+0x60>)
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f0:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <_sbrk+0x64>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d102      	bne.n	80012fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f8:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <_sbrk+0x64>)
 80012fa:	4a12      	ldr	r2, [pc, #72]	@ (8001344 <_sbrk+0x68>)
 80012fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012fe:	4b10      	ldr	r3, [pc, #64]	@ (8001340 <_sbrk+0x64>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	429a      	cmp	r2, r3
 800130a:	d207      	bcs.n	800131c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800130c:	f009 fbe6 	bl	800aadc <__errno>
 8001310:	4603      	mov	r3, r0
 8001312:	220c      	movs	r2, #12
 8001314:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001316:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800131a:	e009      	b.n	8001330 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800131c:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001322:	4b07      	ldr	r3, [pc, #28]	@ (8001340 <_sbrk+0x64>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	4a05      	ldr	r2, [pc, #20]	@ (8001340 <_sbrk+0x64>)
 800132c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800132e:	68fb      	ldr	r3, [r7, #12]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20018000 	.word	0x20018000
 800133c:	00000400 	.word	0x00000400
 8001340:	200005e0 	.word	0x200005e0
 8001344:	20005a90 	.word	0x20005a90

08001348 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800134c:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <SystemInit+0x20>)
 800134e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001352:	4a05      	ldr	r2, [pc, #20]	@ (8001368 <SystemInit+0x20>)
 8001354:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001358:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001370:	4b14      	ldr	r3, [pc, #80]	@ (80013c4 <MX_USART2_UART_Init+0x58>)
 8001372:	4a15      	ldr	r2, [pc, #84]	@ (80013c8 <MX_USART2_UART_Init+0x5c>)
 8001374:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001376:	4b13      	ldr	r3, [pc, #76]	@ (80013c4 <MX_USART2_UART_Init+0x58>)
 8001378:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800137c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800137e:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <MX_USART2_UART_Init+0x58>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001384:	4b0f      	ldr	r3, [pc, #60]	@ (80013c4 <MX_USART2_UART_Init+0x58>)
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800138a:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <MX_USART2_UART_Init+0x58>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001390:	4b0c      	ldr	r3, [pc, #48]	@ (80013c4 <MX_USART2_UART_Init+0x58>)
 8001392:	220c      	movs	r2, #12
 8001394:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001396:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <MX_USART2_UART_Init+0x58>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800139c:	4b09      	ldr	r3, [pc, #36]	@ (80013c4 <MX_USART2_UART_Init+0x58>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013a2:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <MX_USART2_UART_Init+0x58>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013a8:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <MX_USART2_UART_Init+0x58>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ae:	4805      	ldr	r0, [pc, #20]	@ (80013c4 <MX_USART2_UART_Init+0x58>)
 80013b0:	f005 fc42 	bl	8006c38 <HAL_UART_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013ba:	f7ff fc31 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200005e4 	.word	0x200005e4
 80013c8:	40004400 	.word	0x40004400

080013cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b0ac      	sub	sp, #176	@ 0xb0
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	2288      	movs	r2, #136	@ 0x88
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f009 fad1 	bl	800a994 <memset>
  if(uartHandle->Instance==USART2)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a25      	ldr	r2, [pc, #148]	@ (800148c <HAL_UART_MspInit+0xc0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d143      	bne.n	8001484 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013fc:	2302      	movs	r3, #2
 80013fe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001400:	2300      	movs	r3, #0
 8001402:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4618      	mov	r0, r3
 800140a:	f002 fc47 	bl	8003c9c <HAL_RCCEx_PeriphCLKConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001414:	f7ff fc04 	bl	8000c20 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001418:	4b1d      	ldr	r3, [pc, #116]	@ (8001490 <HAL_UART_MspInit+0xc4>)
 800141a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141c:	4a1c      	ldr	r2, [pc, #112]	@ (8001490 <HAL_UART_MspInit+0xc4>)
 800141e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001422:	6593      	str	r3, [r2, #88]	@ 0x58
 8001424:	4b1a      	ldr	r3, [pc, #104]	@ (8001490 <HAL_UART_MspInit+0xc4>)
 8001426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	4b17      	ldr	r3, [pc, #92]	@ (8001490 <HAL_UART_MspInit+0xc4>)
 8001432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001434:	4a16      	ldr	r2, [pc, #88]	@ (8001490 <HAL_UART_MspInit+0xc4>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800143c:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <HAL_UART_MspInit+0xc4>)
 800143e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001448:	230c      	movs	r3, #12
 800144a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001460:	2307      	movs	r3, #7
 8001462:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800146a:	4619      	mov	r1, r3
 800146c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001470:	f000 fee6 	bl	8002240 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001474:	2200      	movs	r2, #0
 8001476:	2105      	movs	r1, #5
 8001478:	2026      	movs	r0, #38	@ 0x26
 800147a:	f000 fcd1 	bl	8001e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800147e:	2026      	movs	r0, #38	@ 0x26
 8001480:	f000 fcea 	bl	8001e58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001484:	bf00      	nop
 8001486:	37b0      	adds	r7, #176	@ 0xb0
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40004400 	.word	0x40004400
 8001490:	40021000 	.word	0x40021000

08001494 <Reset_Handler>:
 8001494:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014cc <LoopForever+0x2>
 8001498:	f7ff ff56 	bl	8001348 <SystemInit>
 800149c:	480c      	ldr	r0, [pc, #48]	@ (80014d0 <LoopForever+0x6>)
 800149e:	490d      	ldr	r1, [pc, #52]	@ (80014d4 <LoopForever+0xa>)
 80014a0:	4a0d      	ldr	r2, [pc, #52]	@ (80014d8 <LoopForever+0xe>)
 80014a2:	2300      	movs	r3, #0
 80014a4:	e002      	b.n	80014ac <LoopCopyDataInit>

080014a6 <CopyDataInit>:
 80014a6:	58d4      	ldr	r4, [r2, r3]
 80014a8:	50c4      	str	r4, [r0, r3]
 80014aa:	3304      	adds	r3, #4

080014ac <LoopCopyDataInit>:
 80014ac:	18c4      	adds	r4, r0, r3
 80014ae:	428c      	cmp	r4, r1
 80014b0:	d3f9      	bcc.n	80014a6 <CopyDataInit>
 80014b2:	4a0a      	ldr	r2, [pc, #40]	@ (80014dc <LoopForever+0x12>)
 80014b4:	4c0a      	ldr	r4, [pc, #40]	@ (80014e0 <LoopForever+0x16>)
 80014b6:	2300      	movs	r3, #0
 80014b8:	e001      	b.n	80014be <LoopFillZerobss>

080014ba <FillZerobss>:
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	3204      	adds	r2, #4

080014be <LoopFillZerobss>:
 80014be:	42a2      	cmp	r2, r4
 80014c0:	d3fb      	bcc.n	80014ba <FillZerobss>
 80014c2:	f009 fb11 	bl	800aae8 <__libc_init_array>
 80014c6:	f7ff fa6f 	bl	80009a8 <main>

080014ca <LoopForever>:
 80014ca:	e7fe      	b.n	80014ca <LoopForever>
 80014cc:	20018000 	.word	0x20018000
 80014d0:	20000000 	.word	0x20000000
 80014d4:	20000074 	.word	0x20000074
 80014d8:	0800bd34 	.word	0x0800bd34
 80014dc:	20000074 	.word	0x20000074
 80014e0:	20005a90 	.word	0x20005a90

080014e4 <ADC1_2_IRQHandler>:
 80014e4:	e7fe      	b.n	80014e4 <ADC1_2_IRQHandler>
	...

080014e8 <MCP23S17_WriteRegister>:
h_MCP23S17_t hMCP23S17;


// Function to write to a register of MCP23S17 with error handling
void MCP23S17_WriteRegister(uint8_t reg, uint8_t data)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	460a      	mov	r2, r1
 80014f2:	71fb      	strb	r3, [r7, #7]
 80014f4:	4613      	mov	r3, r2
 80014f6:	71bb      	strb	r3, [r7, #6]
	uint8_t control_byte = MCP23S17_CONTROL_BYTE(MCP23S17_CONTROL_ADDR, VU_WRITE); // Address = 0b000
 80014f8:	2340      	movs	r3, #64	@ 0x40
 80014fa:	73bb      	strb	r3, [r7, #14]

	uint8_t buffer[2] = {reg, data};
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	733b      	strb	r3, [r7, #12]
 8001500:	79bb      	ldrb	r3, [r7, #6]
 8001502:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status;

	// Assert chip select
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	2180      	movs	r1, #128	@ 0x80
 8001508:	4820      	ldr	r0, [pc, #128]	@ (800158c <MCP23S17_WriteRegister+0xa4>)
 800150a:	f001 f843 	bl	8002594 <HAL_GPIO_WritePin>

	// Transmit control byte
	status = HAL_SPI_Transmit(hMCP23S17.hspi, &control_byte, 1, HAL_MAX_DELAY);
 800150e:	4b20      	ldr	r3, [pc, #128]	@ (8001590 <MCP23S17_WriteRegister+0xa8>)
 8001510:	6818      	ldr	r0, [r3, #0]
 8001512:	f107 010e 	add.w	r1, r7, #14
 8001516:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800151a:	2201      	movs	r2, #1
 800151c:	f004 fcd8 	bl	8005ed0 <HAL_SPI_Transmit>
 8001520:	4603      	mov	r3, r0
 8001522:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00c      	beq.n	8001544 <MCP23S17_WriteRegister+0x5c>
		HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET); // Deassert chip select
 800152a:	2201      	movs	r2, #1
 800152c:	2180      	movs	r1, #128	@ 0x80
 800152e:	4817      	ldr	r0, [pc, #92]	@ (800158c <MCP23S17_WriteRegister+0xa4>)
 8001530:	f001 f830 	bl	8002594 <HAL_GPIO_WritePin>
		printf("Error: Failed to transmit control byte (HAL_SPI_Transmit returned %d)\r\n", status);
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	4619      	mov	r1, r3
 8001538:	4816      	ldr	r0, [pc, #88]	@ (8001594 <MCP23S17_WriteRegister+0xac>)
 800153a:	f009 f8af 	bl	800a69c <iprintf>
		Error_Handler(); // Handle the error
 800153e:	f7ff fb6f 	bl	8000c20 <Error_Handler>
		return; // Prevent further execution
 8001542:	e01f      	b.n	8001584 <MCP23S17_WriteRegister+0x9c>
#if (LOGS)
	printf("SPI3 control transmission status: %d\r\n", status);
#endif

	// Transmit register address and data
	status = HAL_SPI_Transmit(hMCP23S17.hspi, buffer, 2, HAL_MAX_DELAY);
 8001544:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <MCP23S17_WriteRegister+0xa8>)
 8001546:	6818      	ldr	r0, [r3, #0]
 8001548:	f107 010c 	add.w	r1, r7, #12
 800154c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001550:	2202      	movs	r2, #2
 8001552:	f004 fcbd 	bl	8005ed0 <HAL_SPI_Transmit>
 8001556:	4603      	mov	r3, r0
 8001558:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00c      	beq.n	800157a <MCP23S17_WriteRegister+0x92>
		HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET); // Deassert chip select
 8001560:	2201      	movs	r2, #1
 8001562:	2180      	movs	r1, #128	@ 0x80
 8001564:	4809      	ldr	r0, [pc, #36]	@ (800158c <MCP23S17_WriteRegister+0xa4>)
 8001566:	f001 f815 	bl	8002594 <HAL_GPIO_WritePin>
		printf("Error: Failed to transmit register data (HAL_SPI_Transmit returned %d)\r\n", status);
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	4619      	mov	r1, r3
 800156e:	480a      	ldr	r0, [pc, #40]	@ (8001598 <MCP23S17_WriteRegister+0xb0>)
 8001570:	f009 f894 	bl	800a69c <iprintf>
		Error_Handler(); // Handle the error
 8001574:	f7ff fb54 	bl	8000c20 <Error_Handler>
		return; // Prevent further execution
 8001578:	e004      	b.n	8001584 <MCP23S17_WriteRegister+0x9c>
#if (LOGS)
	printf("SPI3 data Ox%X transmission to register 0x%X status: %d\r\n", data, reg, status);
#endif

	// Deassert chip select
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 800157a:	2201      	movs	r2, #1
 800157c:	2180      	movs	r1, #128	@ 0x80
 800157e:	4803      	ldr	r0, [pc, #12]	@ (800158c <MCP23S17_WriteRegister+0xa4>)
 8001580:	f001 f808 	bl	8002594 <HAL_GPIO_WritePin>
}
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	48000400 	.word	0x48000400
 8001590:	2000066c 	.word	0x2000066c
 8001594:	0800ba18 	.word	0x0800ba18
 8001598:	0800ba60 	.word	0x0800ba60

0800159c <MCP23S17_Update_LEDs>:

void MCP23S17_Update_LEDs()
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
	MCP23S17_WriteRegister(MCP23S17_OLATA, hMCP23S17.GPA);
 80015a0:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <MCP23S17_Update_LEDs+0x20>)
 80015a2:	791b      	ldrb	r3, [r3, #4]
 80015a4:	4619      	mov	r1, r3
 80015a6:	2014      	movs	r0, #20
 80015a8:	f7ff ff9e 	bl	80014e8 <MCP23S17_WriteRegister>
	MCP23S17_WriteRegister(MCP23S17_OLATB, hMCP23S17.GPB);
 80015ac:	4b03      	ldr	r3, [pc, #12]	@ (80015bc <MCP23S17_Update_LEDs+0x20>)
 80015ae:	795b      	ldrb	r3, [r3, #5]
 80015b0:	4619      	mov	r1, r3
 80015b2:	2015      	movs	r0, #21
 80015b4:	f7ff ff98 	bl	80014e8 <MCP23S17_WriteRegister>
}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	2000066c 	.word	0x2000066c

080015c0 <MCP23S17_Init>:

void MCP23S17_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
	hMCP23S17.hspi = &hspi3;
 80015c4:	4b12      	ldr	r3, [pc, #72]	@ (8001610 <MCP23S17_Init+0x50>)
 80015c6:	4a13      	ldr	r2, [pc, #76]	@ (8001614 <MCP23S17_Init+0x54>)
 80015c8:	601a      	str	r2, [r3, #0]

	HAL_SPI_Init(hMCP23S17.hspi);
 80015ca:	4b11      	ldr	r3, [pc, #68]	@ (8001610 <MCP23S17_Init+0x50>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f004 fbdb 	bl	8005d8a <HAL_SPI_Init>

	// nRESET to base state
	HAL_GPIO_WritePin(VU_nRESET_GPIO_Port, VU_nRESET_Pin, GPIO_PIN_SET);
 80015d4:	2201      	movs	r2, #1
 80015d6:	2101      	movs	r1, #1
 80015d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015dc:	f000 ffda 	bl	8002594 <HAL_GPIO_WritePin>

	// nCS to reset state
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 80015e0:	2201      	movs	r2, #1
 80015e2:	2180      	movs	r1, #128	@ 0x80
 80015e4:	480c      	ldr	r0, [pc, #48]	@ (8001618 <MCP23S17_Init+0x58>)
 80015e6:	f000 ffd5 	bl	8002594 <HAL_GPIO_WritePin>

	// Set all GPIOA and GPIOB pins as outputs
	MCP23S17_WriteRegister(MCP23S17_IODIRA, MCP23S17_ALL_ON); // GPA as output
 80015ea:	2100      	movs	r1, #0
 80015ec:	2000      	movs	r0, #0
 80015ee:	f7ff ff7b 	bl	80014e8 <MCP23S17_WriteRegister>
	MCP23S17_WriteRegister(MCP23S17_IODIRB, MCP23S17_ALL_ON); // GPB as output
 80015f2:	2100      	movs	r1, #0
 80015f4:	2001      	movs	r0, #1
 80015f6:	f7ff ff77 	bl	80014e8 <MCP23S17_WriteRegister>

	hMCP23S17.GPA = 0xFF;	// All LEDs on GPIOA OFF
 80015fa:	4b05      	ldr	r3, [pc, #20]	@ (8001610 <MCP23S17_Init+0x50>)
 80015fc:	22ff      	movs	r2, #255	@ 0xff
 80015fe:	711a      	strb	r2, [r3, #4]
	hMCP23S17.GPB = 0xFF;	// All LEDs on GPIOB OFF
 8001600:	4b03      	ldr	r3, [pc, #12]	@ (8001610 <MCP23S17_Init+0x50>)
 8001602:	22ff      	movs	r2, #255	@ 0xff
 8001604:	715a      	strb	r2, [r3, #5]

	MCP23S17_Update_LEDs();
 8001606:	f7ff ffc9 	bl	800159c <MCP23S17_Update_LEDs>
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	2000066c 	.word	0x2000066c
 8001614:	20000530 	.word	0x20000530
 8001618:	48000400 	.word	0x48000400

0800161c <MCP23S17_Toggle_LED_id>:

	MCP23S17_Update_LEDs();
}

void MCP23S17_Toggle_LED_id(uint8_t led)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
	if (led > 7)
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	2b07      	cmp	r3, #7
 800162a:	d90f      	bls.n	800164c <MCP23S17_Toggle_LED_id+0x30>
	{
		hMCP23S17.GPB = (hMCP23S17.GPB & ~(1 << led%8)) | (~hMCP23S17.GPB & (1 << led%8));
 800162c:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <MCP23S17_Toggle_LED_id+0x58>)
 800162e:	795b      	ldrb	r3, [r3, #5]
 8001630:	b25a      	sxtb	r2, r3
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	2101      	movs	r1, #1
 800163a:	fa01 f303 	lsl.w	r3, r1, r3
 800163e:	b25b      	sxtb	r3, r3
 8001640:	4053      	eors	r3, r2
 8001642:	b25b      	sxtb	r3, r3
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4b0b      	ldr	r3, [pc, #44]	@ (8001674 <MCP23S17_Toggle_LED_id+0x58>)
 8001648:	715a      	strb	r2, [r3, #5]
 800164a:	e00c      	b.n	8001666 <MCP23S17_Toggle_LED_id+0x4a>
	}
	else
	{
		hMCP23S17.GPA = (hMCP23S17.GPA & ~(1 << led)) | (~hMCP23S17.GPA & (1 << led));
 800164c:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <MCP23S17_Toggle_LED_id+0x58>)
 800164e:	791b      	ldrb	r3, [r3, #4]
 8001650:	b25a      	sxtb	r2, r3
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	2101      	movs	r1, #1
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	b25b      	sxtb	r3, r3
 800165c:	4053      	eors	r3, r2
 800165e:	b25b      	sxtb	r3, r3
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4b04      	ldr	r3, [pc, #16]	@ (8001674 <MCP23S17_Toggle_LED_id+0x58>)
 8001664:	711a      	strb	r2, [r3, #4]
	}

	MCP23S17_Update_LEDs();
 8001666:	f7ff ff99 	bl	800159c <MCP23S17_Update_LEDs>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	2000066c 	.word	0x2000066c

08001678 <fonction>:
#include "functions.h"
#include "../drivers/driver_MCP23S17.h"


int fonction(int argc, char ** argv)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
	if (argc > 1)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b01      	cmp	r3, #1
 8001686:	dd14      	ble.n	80016b2 <fonction+0x3a>
	{
		for (int i = 0; i < argc; i++)
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	e00d      	b.n	80016aa <fonction+0x32>
		{
			printf("Paramètre [%d] = %s\r\n", i+1, argv[i]);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1c59      	adds	r1, r3, #1
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	4413      	add	r3, r2
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	461a      	mov	r2, r3
 800169e:	4807      	ldr	r0, [pc, #28]	@ (80016bc <fonction+0x44>)
 80016a0:	f008 fffc 	bl	800a69c <iprintf>
		for (int i = 0; i < argc; i++)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	3301      	adds	r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	dbed      	blt.n	800168e <fonction+0x16>
		}
	}

	return 0;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	0800baac 	.word	0x0800baac

080016c0 <calcul>:

int calcul(int argc, char ** argv)
{
 80016c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
	if (argc >= 4)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	dd68      	ble.n	80017a2 <calcul+0xe2>
	{
		switch(argv[2][0])
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	3308      	adds	r3, #8
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b78      	cmp	r3, #120	@ 0x78
 80016da:	d03f      	beq.n	800175c <calcul+0x9c>
 80016dc:	2b78      	cmp	r3, #120	@ 0x78
 80016de:	dc59      	bgt.n	8001794 <calcul+0xd4>
 80016e0:	2b2d      	cmp	r3, #45	@ 0x2d
 80016e2:	d020      	beq.n	8001726 <calcul+0x66>
 80016e4:	2b2d      	cmp	r3, #45	@ 0x2d
 80016e6:	dc55      	bgt.n	8001794 <calcul+0xd4>
 80016e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80016ea:	d037      	beq.n	800175c <calcul+0x9c>
 80016ec:	2b2b      	cmp	r3, #43	@ 0x2b
 80016ee:	d151      	bne.n	8001794 <calcul+0xd4>
		{
		case '+':
			printf("%s + %s = %d\r\n", argv[1], argv[3], atoi(argv[1])+atoi(argv[3]));
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	3304      	adds	r3, #4
 80016f4:	681c      	ldr	r4, [r3, #0]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	330c      	adds	r3, #12
 80016fa:	681d      	ldr	r5, [r3, #0]
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	3304      	adds	r3, #4
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f008 fe80 	bl	800a408 <atoi>
 8001708:	4606      	mov	r6, r0
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	330c      	adds	r3, #12
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f008 fe79 	bl	800a408 <atoi>
 8001716:	4603      	mov	r3, r0
 8001718:	4433      	add	r3, r6
 800171a:	462a      	mov	r2, r5
 800171c:	4621      	mov	r1, r4
 800171e:	4823      	ldr	r0, [pc, #140]	@ (80017ac <calcul+0xec>)
 8001720:	f008 ffbc 	bl	800a69c <iprintf>
			break;
 8001724:	e03d      	b.n	80017a2 <calcul+0xe2>
		case '-':
			printf("%s - %s = %d\r\n", argv[1], argv[3], atoi(argv[1])-atoi(argv[3]));
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	3304      	adds	r3, #4
 800172a:	681c      	ldr	r4, [r3, #0]
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	330c      	adds	r3, #12
 8001730:	681d      	ldr	r5, [r3, #0]
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	3304      	adds	r3, #4
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f008 fe65 	bl	800a408 <atoi>
 800173e:	4606      	mov	r6, r0
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	330c      	adds	r3, #12
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f008 fe5e 	bl	800a408 <atoi>
 800174c:	4603      	mov	r3, r0
 800174e:	1af3      	subs	r3, r6, r3
 8001750:	462a      	mov	r2, r5
 8001752:	4621      	mov	r1, r4
 8001754:	4816      	ldr	r0, [pc, #88]	@ (80017b0 <calcul+0xf0>)
 8001756:	f008 ffa1 	bl	800a69c <iprintf>
			break;
 800175a:	e022      	b.n	80017a2 <calcul+0xe2>
		case '*':
		case 'x':
			printf("%s * %s = %d\r\n", argv[1], argv[3], atoi(argv[1])*atoi(argv[3]));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	3304      	adds	r3, #4
 8001760:	681c      	ldr	r4, [r3, #0]
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	330c      	adds	r3, #12
 8001766:	681d      	ldr	r5, [r3, #0]
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	3304      	adds	r3, #4
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f008 fe4a 	bl	800a408 <atoi>
 8001774:	4606      	mov	r6, r0
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	330c      	adds	r3, #12
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f008 fe43 	bl	800a408 <atoi>
 8001782:	4603      	mov	r3, r0
 8001784:	fb06 f303 	mul.w	r3, r6, r3
 8001788:	462a      	mov	r2, r5
 800178a:	4621      	mov	r1, r4
 800178c:	4809      	ldr	r0, [pc, #36]	@ (80017b4 <calcul+0xf4>)
 800178e:	f008 ff85 	bl	800a69c <iprintf>
			break;
 8001792:	e006      	b.n	80017a2 <calcul+0xe2>
		default:
			printf("Opération '%s' non supporté!\r\n", argv[2]);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	3308      	adds	r3, #8
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4619      	mov	r1, r3
 800179c:	4806      	ldr	r0, [pc, #24]	@ (80017b8 <calcul+0xf8>)
 800179e:	f008 ff7d 	bl	800a69c <iprintf>
		}
	}

	return 0;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ac:	0800bac4 	.word	0x0800bac4
 80017b0:	0800bad4 	.word	0x0800bad4
 80017b4:	0800bae4 	.word	0x0800bae4
 80017b8:	0800baf4 	.word	0x0800baf4

080017bc <addition>:

int addition(int argc, char ** argv)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
	if (argc > 1)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	dd24      	ble.n	8001816 <addition+0x5a>
	{
		int somme = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]
		for (int i = 1; i < argc; i++)
 80017d0:	2301      	movs	r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	e017      	b.n	8001806 <addition+0x4a>
		{
			printf(" + %s", argv[i]);
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	4413      	add	r3, r2
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4619      	mov	r1, r3
 80017e2:	480f      	ldr	r0, [pc, #60]	@ (8001820 <addition+0x64>)
 80017e4:	f008 ff5a 	bl	800a69c <iprintf>
			somme = somme + atoi(argv[i]);
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f008 fe08 	bl	800a408 <atoi>
 80017f8:	4602      	mov	r2, r0
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4413      	add	r3, r2
 80017fe:	60fb      	str	r3, [r7, #12]
		for (int i = 1; i < argc; i++)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	3301      	adds	r3, #1
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	429a      	cmp	r2, r3
 800180c:	dbe3      	blt.n	80017d6 <addition+0x1a>
		}

		printf(" = %d\r\n", somme);
 800180e:	68f9      	ldr	r1, [r7, #12]
 8001810:	4804      	ldr	r0, [pc, #16]	@ (8001824 <addition+0x68>)
 8001812:	f008 ff43 	bl	800a69c <iprintf>
	}
	return 0;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	0800bb18 	.word	0x0800bb18
 8001824:	0800bb20 	.word	0x0800bb20

08001828 <GPIOExpander_toggle_LED>:

int GPIOExpander_toggle_LED(int argc, char ** argv)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
	if (argc > 1)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b01      	cmp	r3, #1
 8001836:	dd15      	ble.n	8001864 <GPIOExpander_toggle_LED+0x3c>
	{
		for (int i = 1; i < argc; i++)
 8001838:	2301      	movs	r3, #1
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	e00e      	b.n	800185c <GPIOExpander_toggle_LED+0x34>
		{
			MCP23S17_Toggle_LED_id(atoi(argv[i]));
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	4413      	add	r3, r2
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f008 fddd 	bl	800a408 <atoi>
 800184e:	4603      	mov	r3, r0
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fee3 	bl	800161c <MCP23S17_Toggle_LED_id>
		for (int i = 1; i < argc; i++)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	3301      	adds	r3, #1
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	dbec      	blt.n	800183e <GPIOExpander_toggle_LED+0x16>
		}
	}

	return 0;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <shell_uart_receive_irq_cb>:
static char print_buffer[BUFFER_SIZE];
static SemaphoreHandle_t sem_uart_read = NULL;


void shell_uart_receive_irq_cb(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]

	xSemaphoreGiveFromISR(sem_uart_read, &pxHigherPriorityTaskWoken);
 800187a:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <shell_uart_receive_irq_cb+0x38>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	1d3a      	adds	r2, r7, #4
 8001880:	4611      	mov	r1, r2
 8001882:	4618      	mov	r0, r3
 8001884:	f006 ffba 	bl	80087fc <xQueueGiveFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d007      	beq.n	800189e <shell_uart_receive_irq_cb+0x2e>
 800188e:	4b07      	ldr	r3, [pc, #28]	@ (80018ac <shell_uart_receive_irq_cb+0x3c>)
 8001890:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	f3bf 8f4f 	dsb	sy
 800189a:	f3bf 8f6f 	isb	sy
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200009a0 	.word	0x200009a0
 80018ac:	e000ed04 	.word	0xe000ed04

080018b0 <uart_read>:

static char uart_read() {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
	char c;

	HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t*)(&c), 1);
 80018b6:	1dfb      	adds	r3, r7, #7
 80018b8:	2201      	movs	r2, #1
 80018ba:	4619      	mov	r1, r3
 80018bc:	4807      	ldr	r0, [pc, #28]	@ (80018dc <uart_read+0x2c>)
 80018be:	f005 fa93 	bl	8006de8 <HAL_UART_Receive_IT>
	// il faut mettre la tâche shell dans l'état bloqué, jusqu'à l'interruption de réception de caractère
	// prendre un sémaphore vide par exemple
	xSemaphoreTake(sem_uart_read, portMAX_DELAY);
 80018c2:	4b07      	ldr	r3, [pc, #28]	@ (80018e0 <uart_read+0x30>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018ca:	4618      	mov	r0, r3
 80018cc:	f007 f826 	bl	800891c <xQueueSemaphoreTake>

	return c;
 80018d0:	79fb      	ldrb	r3, [r7, #7]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200005e4 	.word	0x200005e4
 80018e0:	200009a0 	.word	0x200009a0

080018e4 <uart_write>:

static int uart_write(char * s, uint16_t size) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
 80018f0:	887a      	ldrh	r2, [r7, #2]
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	4803      	ldr	r0, [pc, #12]	@ (8001908 <uart_write+0x24>)
 80018fa:	f005 f9eb 	bl	8006cd4 <HAL_UART_Transmit>
	return size;
 80018fe:	887b      	ldrh	r3, [r7, #2]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	200005e4 	.word	0x200005e4

0800190c <sh_help>:

static int sh_help(int argc, char ** argv) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af02      	add	r7, sp, #8
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	e022      	b.n	8001962 <sh_help+0x56>
		int size;
		size = snprintf (print_buffer, BUFFER_SIZE, "%c: %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 800191c:	4918      	ldr	r1, [pc, #96]	@ (8001980 <sh_help+0x74>)
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	4613      	mov	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4413      	add	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	4914      	ldr	r1, [pc, #80]	@ (8001980 <sh_help+0x74>)
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	4613      	mov	r3, r2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	4413      	add	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	440b      	add	r3, r1
 800193c:	3308      	adds	r3, #8
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	4603      	mov	r3, r0
 8001944:	4a0f      	ldr	r2, [pc, #60]	@ (8001984 <sh_help+0x78>)
 8001946:	2128      	movs	r1, #40	@ 0x28
 8001948:	480f      	ldr	r0, [pc, #60]	@ (8001988 <sh_help+0x7c>)
 800194a:	f008 ff17 	bl	800a77c <sniprintf>
 800194e:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	b29b      	uxth	r3, r3
 8001954:	4619      	mov	r1, r3
 8001956:	480c      	ldr	r0, [pc, #48]	@ (8001988 <sh_help+0x7c>)
 8001958:	f7ff ffc4 	bl	80018e4 <uart_write>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	3301      	adds	r3, #1
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b0a      	ldr	r3, [pc, #40]	@ (800198c <sh_help+0x80>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	429a      	cmp	r2, r3
 800196a:	dbd7      	blt.n	800191c <sh_help+0x10>
	}
	uart_write("\r\n", 2);
 800196c:	2102      	movs	r1, #2
 800196e:	4808      	ldr	r0, [pc, #32]	@ (8001990 <sh_help+0x84>)
 8001970:	f7ff ffb8 	bl	80018e4 <uart_write>

	return 0;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000678 	.word	0x20000678
 8001984:	0800bb28 	.word	0x0800bb28
 8001988:	20000978 	.word	0x20000978
 800198c:	20000674 	.word	0x20000674
 8001990:	0800bb34 	.word	0x0800bb34

08001994 <shell_init>:

void shell_init() {
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
	int size = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	607b      	str	r3, [r7, #4]

	size = snprintf (print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 800199e:	4a13      	ldr	r2, [pc, #76]	@ (80019ec <shell_init+0x58>)
 80019a0:	2128      	movs	r1, #40	@ 0x28
 80019a2:	4813      	ldr	r0, [pc, #76]	@ (80019f0 <shell_init+0x5c>)
 80019a4:	f008 feea 	bl	800a77c <sniprintf>
 80019a8:	6078      	str	r0, [r7, #4]
	uart_write(print_buffer, size);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	4619      	mov	r1, r3
 80019b0:	480f      	ldr	r0, [pc, #60]	@ (80019f0 <shell_init+0x5c>)
 80019b2:	f7ff ff97 	bl	80018e4 <uart_write>

	sem_uart_read = xSemaphoreCreateBinary();
 80019b6:	2203      	movs	r2, #3
 80019b8:	2100      	movs	r1, #0
 80019ba:	2001      	movs	r0, #1
 80019bc:	f006 fec4 	bl	8008748 <xQueueGenericCreate>
 80019c0:	4603      	mov	r3, r0
 80019c2:	4a0c      	ldr	r2, [pc, #48]	@ (80019f4 <shell_init+0x60>)
 80019c4:	6013      	str	r3, [r2, #0]
	if (sem_uart_read == NULL)
 80019c6:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <shell_init+0x60>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d104      	bne.n	80019d8 <shell_init+0x44>
	{
		printf("Error semaphore shell\r\n");
 80019ce:	480a      	ldr	r0, [pc, #40]	@ (80019f8 <shell_init+0x64>)
 80019d0:	f008 fecc 	bl	800a76c <puts>
		while(1);
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <shell_init+0x40>
	}

	shell_add('h', sh_help, "Help");
 80019d8:	4a08      	ldr	r2, [pc, #32]	@ (80019fc <shell_init+0x68>)
 80019da:	4909      	ldr	r1, [pc, #36]	@ (8001a00 <shell_init+0x6c>)
 80019dc:	2068      	movs	r0, #104	@ 0x68
 80019de:	f000 f811 	bl	8001a04 <shell_add>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	0800bb38 	.word	0x0800bb38
 80019f0:	20000978 	.word	0x20000978
 80019f4:	200009a0 	.word	0x200009a0
 80019f8:	0800bb60 	.word	0x0800bb60
 80019fc:	0800bb78 	.word	0x0800bb78
 8001a00:	0800190d 	.word	0x0800190d

08001a04 <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8001a12:	4b19      	ldr	r3, [pc, #100]	@ (8001a78 <shell_add+0x74>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a18:	dc26      	bgt.n	8001a68 <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 8001a1a:	4b17      	ldr	r3, [pc, #92]	@ (8001a78 <shell_add+0x74>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	4917      	ldr	r1, [pc, #92]	@ (8001a7c <shell_add+0x78>)
 8001a20:	4613      	mov	r3, r2
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	4413      	add	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	7bfa      	ldrb	r2, [r7, #15]
 8001a2c:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 8001a2e:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <shell_add+0x74>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	4912      	ldr	r1, [pc, #72]	@ (8001a7c <shell_add+0x78>)
 8001a34:	4613      	mov	r3, r2
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	4413      	add	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	3304      	adds	r3, #4
 8001a40:	68ba      	ldr	r2, [r7, #8]
 8001a42:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 8001a44:	4b0c      	ldr	r3, [pc, #48]	@ (8001a78 <shell_add+0x74>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	490c      	ldr	r1, [pc, #48]	@ (8001a7c <shell_add+0x78>)
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	3308      	adds	r3, #8
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 8001a5a:	4b07      	ldr	r3, [pc, #28]	@ (8001a78 <shell_add+0x74>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	4a05      	ldr	r2, [pc, #20]	@ (8001a78 <shell_add+0x74>)
 8001a62:	6013      	str	r3, [r2, #0]
		return 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	e001      	b.n	8001a6c <shell_add+0x68>
	}

	return -1;
 8001a68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	20000674 	.word	0x20000674
 8001a7c:	20000678 	.word	0x20000678

08001a80 <shell_exec>:

static int shell_exec(char * buf) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b090      	sub	sp, #64	@ 0x40
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	int i;

	char c = buf[0];
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001a90:	2300      	movs	r3, #0
 8001a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a94:	e040      	b.n	8001b18 <shell_exec+0x98>
		if (shell_func_list[i].c == c) {
 8001a96:	492d      	ldr	r1, [pc, #180]	@ (8001b4c <shell_exec+0xcc>)
 8001a98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d131      	bne.n	8001b12 <shell_exec+0x92>
			argc = 1;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001aba:	e013      	b.n	8001ae4 <shell_exec+0x64>
				if(*p == ' ') {
 8001abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b20      	cmp	r3, #32
 8001ac2:	d10c      	bne.n	8001ade <shell_exec+0x5e>
					*p = '\0';
 8001ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 8001aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001acc:	1c5a      	adds	r2, r3, #1
 8001ace:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001ad0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ad2:	3201      	adds	r2, #1
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	3340      	adds	r3, #64	@ 0x40
 8001ad8:	443b      	add	r3, r7
 8001ada:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8001ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d002      	beq.n	8001af2 <shell_exec+0x72>
 8001aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001aee:	2b07      	cmp	r3, #7
 8001af0:	dde4      	ble.n	8001abc <shell_exec+0x3c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 8001af2:	4916      	ldr	r1, [pc, #88]	@ (8001b4c <shell_exec+0xcc>)
 8001af4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001af6:	4613      	mov	r3, r2
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	4413      	add	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	440b      	add	r3, r1
 8001b00:	3304      	adds	r3, #4
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f107 020c 	add.w	r2, r7, #12
 8001b08:	4611      	mov	r1, r2
 8001b0a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001b0c:	4798      	blx	r3
 8001b0e:	4603      	mov	r3, r0
 8001b10:	e017      	b.n	8001b42 <shell_exec+0xc2>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001b12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b14:	3301      	adds	r3, #1
 8001b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b18:	4b0d      	ldr	r3, [pc, #52]	@ (8001b50 <shell_exec+0xd0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	dbb9      	blt.n	8001a96 <shell_exec+0x16>
		}
	}

	int size;
	size = snprintf (print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8001b22:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001b26:	4a0b      	ldr	r2, [pc, #44]	@ (8001b54 <shell_exec+0xd4>)
 8001b28:	2128      	movs	r1, #40	@ 0x28
 8001b2a:	480b      	ldr	r0, [pc, #44]	@ (8001b58 <shell_exec+0xd8>)
 8001b2c:	f008 fe26 	bl	800a77c <sniprintf>
 8001b30:	62f8      	str	r0, [r7, #44]	@ 0x2c
	uart_write(print_buffer, size);
 8001b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	4619      	mov	r1, r3
 8001b38:	4807      	ldr	r0, [pc, #28]	@ (8001b58 <shell_exec+0xd8>)
 8001b3a:	f7ff fed3 	bl	80018e4 <uart_write>
	return -1;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3740      	adds	r7, #64	@ 0x40
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000678 	.word	0x20000678
 8001b50:	20000674 	.word	0x20000674
 8001b54:	0800bb80 	.word	0x0800bb80
 8001b58:	20000978 	.word	0x20000978

08001b5c <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run() {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
	int reading = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60bb      	str	r3, [r7, #8]

	static char cmd_buffer[BUFFER_SIZE];

	while (1) {
		uart_write(prompt, 2);
 8001b6a:	2102      	movs	r1, #2
 8001b6c:	482a      	ldr	r0, [pc, #168]	@ (8001c18 <shell_run+0xbc>)
 8001b6e:	f7ff feb9 	bl	80018e4 <uart_write>
		reading = 1;
 8001b72:	2301      	movs	r3, #1
 8001b74:	60fb      	str	r3, [r7, #12]

		while(reading) {
 8001b76:	e047      	b.n	8001c08 <shell_run+0xac>
			char c = uart_read();
 8001b78:	f7ff fe9a 	bl	80018b0 <uart_read>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	70fb      	strb	r3, [r7, #3]
			int size;

			switch (c) {
 8001b80:	78fb      	ldrb	r3, [r7, #3]
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d025      	beq.n	8001bd2 <shell_run+0x76>
 8001b86:	2b0d      	cmp	r3, #13
 8001b88:	d12e      	bne.n	8001be8 <shell_run+0x8c>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (print_buffer, BUFFER_SIZE, "\r\n");
 8001b8a:	4a24      	ldr	r2, [pc, #144]	@ (8001c1c <shell_run+0xc0>)
 8001b8c:	2128      	movs	r1, #40	@ 0x28
 8001b8e:	4824      	ldr	r0, [pc, #144]	@ (8001c20 <shell_run+0xc4>)
 8001b90:	f008 fdf4 	bl	800a77c <sniprintf>
 8001b94:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4820      	ldr	r0, [pc, #128]	@ (8001c20 <shell_run+0xc4>)
 8001b9e:	f7ff fea1 	bl	80018e4 <uart_write>
				cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	60ba      	str	r2, [r7, #8]
 8001ba8:	4a1e      	ldr	r2, [pc, #120]	@ (8001c24 <shell_run+0xc8>)
 8001baa:	2100      	movs	r1, #0
 8001bac:	54d1      	strb	r1, [r2, r3]
				size = snprintf (print_buffer, BUFFER_SIZE, ":%s\r\n", cmd_buffer);
 8001bae:	4b1d      	ldr	r3, [pc, #116]	@ (8001c24 <shell_run+0xc8>)
 8001bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c28 <shell_run+0xcc>)
 8001bb2:	2128      	movs	r1, #40	@ 0x28
 8001bb4:	481a      	ldr	r0, [pc, #104]	@ (8001c20 <shell_run+0xc4>)
 8001bb6:	f008 fde1 	bl	800a77c <sniprintf>
 8001bba:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4817      	ldr	r0, [pc, #92]	@ (8001c20 <shell_run+0xc4>)
 8001bc4:	f7ff fe8e 	bl	80018e4 <uart_write>
				reading = 0;        //exit read loop
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
				pos = 0;            //reset buffer
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60bb      	str	r3, [r7, #8]
				break;
 8001bd0:	e01a      	b.n	8001c08 <shell_run+0xac>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	dd16      	ble.n	8001c06 <shell_run+0xaa>
					pos--;          //remove it in buffer
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	60bb      	str	r3, [r7, #8]

					uart_write(backspace, 3);	// delete the char on the terminal
 8001bde:	2103      	movs	r1, #3
 8001be0:	4812      	ldr	r0, [pc, #72]	@ (8001c2c <shell_run+0xd0>)
 8001be2:	f7ff fe7f 	bl	80018e4 <uart_write>
				}
				break;
 8001be6:	e00e      	b.n	8001c06 <shell_run+0xaa>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	2b27      	cmp	r3, #39	@ 0x27
 8001bec:	dc0c      	bgt.n	8001c08 <shell_run+0xac>
					uart_write(&c, 1);
 8001bee:	1cfb      	adds	r3, r7, #3
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fe76 	bl	80018e4 <uart_write>
					cmd_buffer[pos++] = c; //store
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	60ba      	str	r2, [r7, #8]
 8001bfe:	78f9      	ldrb	r1, [r7, #3]
 8001c00:	4a08      	ldr	r2, [pc, #32]	@ (8001c24 <shell_run+0xc8>)
 8001c02:	54d1      	strb	r1, [r2, r3]
 8001c04:	e000      	b.n	8001c08 <shell_run+0xac>
				break;
 8001c06:	bf00      	nop
		while(reading) {
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1b4      	bne.n	8001b78 <shell_run+0x1c>
				}
			}
		}
		shell_exec(cmd_buffer);
 8001c0e:	4805      	ldr	r0, [pc, #20]	@ (8001c24 <shell_run+0xc8>)
 8001c10:	f7ff ff36 	bl	8001a80 <shell_exec>
		uart_write(prompt, 2);
 8001c14:	e7a9      	b.n	8001b6a <shell_run+0xe>
 8001c16:	bf00      	nop
 8001c18:	20000008 	.word	0x20000008
 8001c1c:	0800bb34 	.word	0x0800bb34
 8001c20:	20000978 	.word	0x20000978
 8001c24:	200009a4 	.word	0x200009a4
 8001c28:	0800bb98 	.word	0x0800bb98
 8001c2c:	20000004 	.word	0x20000004

08001c30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c6c <HAL_Init+0x3c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a0b      	ldr	r2, [pc, #44]	@ (8001c6c <HAL_Init+0x3c>)
 8001c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c44:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c46:	2003      	movs	r0, #3
 8001c48:	f000 f8df 	bl	8001e0a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c4c:	200f      	movs	r0, #15
 8001c4e:	f7ff fa01 	bl	8001054 <HAL_InitTick>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d002      	beq.n	8001c5e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	71fb      	strb	r3, [r7, #7]
 8001c5c:	e001      	b.n	8001c62 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c5e:	f7ff f9d1 	bl	8001004 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c62:	79fb      	ldrb	r3, [r7, #7]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40022000 	.word	0x40022000

08001c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c74:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <HAL_IncTick+0x20>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <HAL_IncTick+0x24>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4413      	add	r3, r2
 8001c80:	4a04      	ldr	r2, [pc, #16]	@ (8001c94 <HAL_IncTick+0x24>)
 8001c82:	6013      	str	r3, [r2, #0]
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000010 	.word	0x20000010
 8001c94:	200009cc 	.word	0x200009cc

08001c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c9c:	4b03      	ldr	r3, [pc, #12]	@ (8001cac <HAL_GetTick+0x14>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	200009cc 	.word	0x200009cc

08001cb0 <__NVIC_SetPriorityGrouping>:
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ce2:	4a04      	ldr	r2, [pc, #16]	@ (8001cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	60d3      	str	r3, [r2, #12]
}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <__NVIC_GetPriorityGrouping>:
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cfc:	4b04      	ldr	r3, [pc, #16]	@ (8001d10 <__NVIC_GetPriorityGrouping+0x18>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	0a1b      	lsrs	r3, r3, #8
 8001d02:	f003 0307 	and.w	r3, r3, #7
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <__NVIC_EnableIRQ>:
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	db0b      	blt.n	8001d3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	f003 021f 	and.w	r2, r3, #31
 8001d2c:	4907      	ldr	r1, [pc, #28]	@ (8001d4c <__NVIC_EnableIRQ+0x38>)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	095b      	lsrs	r3, r3, #5
 8001d34:	2001      	movs	r0, #1
 8001d36:	fa00 f202 	lsl.w	r2, r0, r2
 8001d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000e100 	.word	0xe000e100

08001d50 <__NVIC_SetPriority>:
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	6039      	str	r1, [r7, #0]
 8001d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	db0a      	blt.n	8001d7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	490c      	ldr	r1, [pc, #48]	@ (8001d9c <__NVIC_SetPriority+0x4c>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	0112      	lsls	r2, r2, #4
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	440b      	add	r3, r1
 8001d74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001d78:	e00a      	b.n	8001d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	4908      	ldr	r1, [pc, #32]	@ (8001da0 <__NVIC_SetPriority+0x50>)
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	3b04      	subs	r3, #4
 8001d88:	0112      	lsls	r2, r2, #4
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	761a      	strb	r2, [r3, #24]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000e100 	.word	0xe000e100
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <NVIC_EncodePriority>:
{
 8001da4:	b480      	push	{r7}
 8001da6:	b089      	sub	sp, #36	@ 0x24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f1c3 0307 	rsb	r3, r3, #7
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	bf28      	it	cs
 8001dc2:	2304      	movcs	r3, #4
 8001dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	2b06      	cmp	r3, #6
 8001dcc:	d902      	bls.n	8001dd4 <NVIC_EncodePriority+0x30>
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3b03      	subs	r3, #3
 8001dd2:	e000      	b.n	8001dd6 <NVIC_EncodePriority+0x32>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43da      	mvns	r2, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	401a      	ands	r2, r3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	fa01 f303 	lsl.w	r3, r1, r3
 8001df6:	43d9      	mvns	r1, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dfc:	4313      	orrs	r3, r2
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3724      	adds	r7, #36	@ 0x24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff ff4c 	bl	8001cb0 <__NVIC_SetPriorityGrouping>
}
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e32:	f7ff ff61 	bl	8001cf8 <__NVIC_GetPriorityGrouping>
 8001e36:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	68b9      	ldr	r1, [r7, #8]
 8001e3c:	6978      	ldr	r0, [r7, #20]
 8001e3e:	f7ff ffb1 	bl	8001da4 <NVIC_EncodePriority>
 8001e42:	4602      	mov	r2, r0
 8001e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e48:	4611      	mov	r1, r2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff ff80 	bl	8001d50 <__NVIC_SetPriority>
}
 8001e50:	bf00      	nop
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff ff54 	bl	8001d14 <__NVIC_EnableIRQ>
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e098      	b.n	8001fb8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4b4d      	ldr	r3, [pc, #308]	@ (8001fc4 <HAL_DMA_Init+0x150>)
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d80f      	bhi.n	8001eb2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	4b4b      	ldr	r3, [pc, #300]	@ (8001fc8 <HAL_DMA_Init+0x154>)
 8001e9a:	4413      	add	r3, r2
 8001e9c:	4a4b      	ldr	r2, [pc, #300]	@ (8001fcc <HAL_DMA_Init+0x158>)
 8001e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea2:	091b      	lsrs	r3, r3, #4
 8001ea4:	009a      	lsls	r2, r3, #2
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a48      	ldr	r2, [pc, #288]	@ (8001fd0 <HAL_DMA_Init+0x15c>)
 8001eae:	641a      	str	r2, [r3, #64]	@ 0x40
 8001eb0:	e00e      	b.n	8001ed0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4b46      	ldr	r3, [pc, #280]	@ (8001fd4 <HAL_DMA_Init+0x160>)
 8001eba:	4413      	add	r3, r2
 8001ebc:	4a43      	ldr	r2, [pc, #268]	@ (8001fcc <HAL_DMA_Init+0x158>)
 8001ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec2:	091b      	lsrs	r3, r3, #4
 8001ec4:	009a      	lsls	r2, r3, #2
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a42      	ldr	r2, [pc, #264]	@ (8001fd8 <HAL_DMA_Init+0x164>)
 8001ece:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001ee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001eea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001ef4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f2a:	d039      	beq.n	8001fa0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f30:	4a27      	ldr	r2, [pc, #156]	@ (8001fd0 <HAL_DMA_Init+0x15c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d11a      	bne.n	8001f6c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001f36:	4b29      	ldr	r3, [pc, #164]	@ (8001fdc <HAL_DMA_Init+0x168>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3e:	f003 031c 	and.w	r3, r3, #28
 8001f42:	210f      	movs	r1, #15
 8001f44:	fa01 f303 	lsl.w	r3, r1, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	4924      	ldr	r1, [pc, #144]	@ (8001fdc <HAL_DMA_Init+0x168>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001f50:	4b22      	ldr	r3, [pc, #136]	@ (8001fdc <HAL_DMA_Init+0x168>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6859      	ldr	r1, [r3, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5c:	f003 031c 	and.w	r3, r3, #28
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	491d      	ldr	r1, [pc, #116]	@ (8001fdc <HAL_DMA_Init+0x168>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]
 8001f6a:	e019      	b.n	8001fa0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001f6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe0 <HAL_DMA_Init+0x16c>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f74:	f003 031c 	and.w	r3, r3, #28
 8001f78:	210f      	movs	r1, #15
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	4917      	ldr	r1, [pc, #92]	@ (8001fe0 <HAL_DMA_Init+0x16c>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001f86:	4b16      	ldr	r3, [pc, #88]	@ (8001fe0 <HAL_DMA_Init+0x16c>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6859      	ldr	r1, [r3, #4]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f92:	f003 031c 	and.w	r3, r3, #28
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	4911      	ldr	r1, [pc, #68]	@ (8001fe0 <HAL_DMA_Init+0x16c>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	40020407 	.word	0x40020407
 8001fc8:	bffdfff8 	.word	0xbffdfff8
 8001fcc:	cccccccd 	.word	0xcccccccd
 8001fd0:	40020000 	.word	0x40020000
 8001fd4:	bffdfbf8 	.word	0xbffdfbf8
 8001fd8:	40020400 	.word	0x40020400
 8001fdc:	400200a8 	.word	0x400200a8
 8001fe0:	400204a8 	.word	0x400204a8

08001fe4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d008      	beq.n	800200e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2204      	movs	r2, #4
 8002000:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e022      	b.n	8002054 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 020e 	bic.w	r2, r2, #14
 800201c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0201 	bic.w	r2, r2, #1
 800202c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002032:	f003 021c 	and.w	r2, r3, #28
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203a:	2101      	movs	r1, #1
 800203c:	fa01 f202 	lsl.w	r2, r1, r2
 8002040:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002052:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002054:	4618      	mov	r0, r3
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002068:	2300      	movs	r3, #0
 800206a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d005      	beq.n	8002084 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2204      	movs	r2, #4
 800207c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	73fb      	strb	r3, [r7, #15]
 8002082:	e029      	b.n	80020d8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 020e 	bic.w	r2, r2, #14
 8002092:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0201 	bic.w	r2, r2, #1
 80020a2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a8:	f003 021c 	and.w	r2, r3, #28
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b0:	2101      	movs	r1, #1
 80020b2:	fa01 f202 	lsl.w	r2, r1, r2
 80020b6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	4798      	blx	r3
    }
  }
  return status;
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fe:	f003 031c 	and.w	r3, r3, #28
 8002102:	2204      	movs	r2, #4
 8002104:	409a      	lsls	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	4013      	ands	r3, r2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d026      	beq.n	800215c <HAL_DMA_IRQHandler+0x7a>
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	d021      	beq.n	800215c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	2b00      	cmp	r3, #0
 8002124:	d107      	bne.n	8002136 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0204 	bic.w	r2, r2, #4
 8002134:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213a:	f003 021c 	and.w	r2, r3, #28
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	2104      	movs	r1, #4
 8002144:	fa01 f202 	lsl.w	r2, r1, r2
 8002148:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	2b00      	cmp	r3, #0
 8002150:	d071      	beq.n	8002236 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800215a:	e06c      	b.n	8002236 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002160:	f003 031c 	and.w	r3, r3, #28
 8002164:	2202      	movs	r2, #2
 8002166:	409a      	lsls	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4013      	ands	r3, r2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d02e      	beq.n	80021ce <HAL_DMA_IRQHandler+0xec>
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d029      	beq.n	80021ce <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10b      	bne.n	80021a0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 020a 	bic.w	r2, r2, #10
 8002196:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a4:	f003 021c 	and.w	r2, r3, #28
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ac:	2102      	movs	r1, #2
 80021ae:	fa01 f202 	lsl.w	r2, r1, r2
 80021b2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d038      	beq.n	8002236 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80021cc:	e033      	b.n	8002236 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d2:	f003 031c 	and.w	r3, r3, #28
 80021d6:	2208      	movs	r2, #8
 80021d8:	409a      	lsls	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4013      	ands	r3, r2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d02a      	beq.n	8002238 <HAL_DMA_IRQHandler+0x156>
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d025      	beq.n	8002238 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 020e 	bic.w	r2, r2, #14
 80021fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002200:	f003 021c 	and.w	r2, r3, #28
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002208:	2101      	movs	r1, #1
 800220a:	fa01 f202 	lsl.w	r2, r1, r2
 800220e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800222a:	2b00      	cmp	r3, #0
 800222c:	d004      	beq.n	8002238 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002236:	bf00      	nop
 8002238:	bf00      	nop
}
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002240:	b480      	push	{r7}
 8002242:	b087      	sub	sp, #28
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800224e:	e17f      	b.n	8002550 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	2101      	movs	r1, #1
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	fa01 f303 	lsl.w	r3, r1, r3
 800225c:	4013      	ands	r3, r2
 800225e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 8171 	beq.w	800254a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0303 	and.w	r3, r3, #3
 8002270:	2b01      	cmp	r3, #1
 8002272:	d005      	beq.n	8002280 <HAL_GPIO_Init+0x40>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d130      	bne.n	80022e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	2203      	movs	r2, #3
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4013      	ands	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022b6:	2201      	movs	r2, #1
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	4013      	ands	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	091b      	lsrs	r3, r3, #4
 80022cc:	f003 0201 	and.w	r2, r3, #1
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d118      	bne.n	8002320 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80022f4:	2201      	movs	r2, #1
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4013      	ands	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	08db      	lsrs	r3, r3, #3
 800230a:	f003 0201 	and.w	r2, r3, #1
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	2b03      	cmp	r3, #3
 800232a:	d017      	beq.n	800235c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	2203      	movs	r2, #3
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d123      	bne.n	80023b0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	08da      	lsrs	r2, r3, #3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3208      	adds	r2, #8
 8002370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002374:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	220f      	movs	r2, #15
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	08da      	lsrs	r2, r3, #3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3208      	adds	r2, #8
 80023aa:	6939      	ldr	r1, [r7, #16]
 80023ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	2203      	movs	r2, #3
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4013      	ands	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0203 	and.w	r2, r3, #3
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4313      	orrs	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 80ac 	beq.w	800254a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002570 <HAL_GPIO_Init+0x330>)
 80023f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023f6:	4a5e      	ldr	r2, [pc, #376]	@ (8002570 <HAL_GPIO_Init+0x330>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80023fe:	4b5c      	ldr	r3, [pc, #368]	@ (8002570 <HAL_GPIO_Init+0x330>)
 8002400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800240a:	4a5a      	ldr	r2, [pc, #360]	@ (8002574 <HAL_GPIO_Init+0x334>)
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	089b      	lsrs	r3, r3, #2
 8002410:	3302      	adds	r3, #2
 8002412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002416:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	220f      	movs	r2, #15
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4013      	ands	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002434:	d025      	beq.n	8002482 <HAL_GPIO_Init+0x242>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a4f      	ldr	r2, [pc, #316]	@ (8002578 <HAL_GPIO_Init+0x338>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d01f      	beq.n	800247e <HAL_GPIO_Init+0x23e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a4e      	ldr	r2, [pc, #312]	@ (800257c <HAL_GPIO_Init+0x33c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d019      	beq.n	800247a <HAL_GPIO_Init+0x23a>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a4d      	ldr	r2, [pc, #308]	@ (8002580 <HAL_GPIO_Init+0x340>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d013      	beq.n	8002476 <HAL_GPIO_Init+0x236>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a4c      	ldr	r2, [pc, #304]	@ (8002584 <HAL_GPIO_Init+0x344>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d00d      	beq.n	8002472 <HAL_GPIO_Init+0x232>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a4b      	ldr	r2, [pc, #300]	@ (8002588 <HAL_GPIO_Init+0x348>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d007      	beq.n	800246e <HAL_GPIO_Init+0x22e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a4a      	ldr	r2, [pc, #296]	@ (800258c <HAL_GPIO_Init+0x34c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d101      	bne.n	800246a <HAL_GPIO_Init+0x22a>
 8002466:	2306      	movs	r3, #6
 8002468:	e00c      	b.n	8002484 <HAL_GPIO_Init+0x244>
 800246a:	2307      	movs	r3, #7
 800246c:	e00a      	b.n	8002484 <HAL_GPIO_Init+0x244>
 800246e:	2305      	movs	r3, #5
 8002470:	e008      	b.n	8002484 <HAL_GPIO_Init+0x244>
 8002472:	2304      	movs	r3, #4
 8002474:	e006      	b.n	8002484 <HAL_GPIO_Init+0x244>
 8002476:	2303      	movs	r3, #3
 8002478:	e004      	b.n	8002484 <HAL_GPIO_Init+0x244>
 800247a:	2302      	movs	r3, #2
 800247c:	e002      	b.n	8002484 <HAL_GPIO_Init+0x244>
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <HAL_GPIO_Init+0x244>
 8002482:	2300      	movs	r3, #0
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	f002 0203 	and.w	r2, r2, #3
 800248a:	0092      	lsls	r2, r2, #2
 800248c:	4093      	lsls	r3, r2
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002494:	4937      	ldr	r1, [pc, #220]	@ (8002574 <HAL_GPIO_Init+0x334>)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	089b      	lsrs	r3, r3, #2
 800249a:	3302      	adds	r3, #2
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002590 <HAL_GPIO_Init+0x350>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4013      	ands	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024c6:	4a32      	ldr	r2, [pc, #200]	@ (8002590 <HAL_GPIO_Init+0x350>)
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024cc:	4b30      	ldr	r3, [pc, #192]	@ (8002590 <HAL_GPIO_Init+0x350>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	4013      	ands	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024f0:	4a27      	ldr	r2, [pc, #156]	@ (8002590 <HAL_GPIO_Init+0x350>)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024f6:	4b26      	ldr	r3, [pc, #152]	@ (8002590 <HAL_GPIO_Init+0x350>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	43db      	mvns	r3, r3
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4013      	ands	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800251a:	4a1d      	ldr	r2, [pc, #116]	@ (8002590 <HAL_GPIO_Init+0x350>)
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002520:	4b1b      	ldr	r3, [pc, #108]	@ (8002590 <HAL_GPIO_Init+0x350>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	43db      	mvns	r3, r3
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4013      	ands	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002544:	4a12      	ldr	r2, [pc, #72]	@ (8002590 <HAL_GPIO_Init+0x350>)
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	3301      	adds	r3, #1
 800254e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	fa22 f303 	lsr.w	r3, r2, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	f47f ae78 	bne.w	8002250 <HAL_GPIO_Init+0x10>
  }
}
 8002560:	bf00      	nop
 8002562:	bf00      	nop
 8002564:	371c      	adds	r7, #28
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40021000 	.word	0x40021000
 8002574:	40010000 	.word	0x40010000
 8002578:	48000400 	.word	0x48000400
 800257c:	48000800 	.word	0x48000800
 8002580:	48000c00 	.word	0x48000c00
 8002584:	48001000 	.word	0x48001000
 8002588:	48001400 	.word	0x48001400
 800258c:	48001800 	.word	0x48001800
 8002590:	40010400 	.word	0x40010400

08002594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	807b      	strh	r3, [r7, #2]
 80025a0:	4613      	mov	r3, r2
 80025a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025a4:	787b      	ldrb	r3, [r7, #1]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025aa:	887a      	ldrh	r2, [r7, #2]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025b0:	e002      	b.n	80025b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025b2:	887a      	ldrh	r2, [r7, #2]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025d6:	887a      	ldrh	r2, [r7, #2]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4013      	ands	r3, r2
 80025dc:	041a      	lsls	r2, r3, #16
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	43d9      	mvns	r1, r3
 80025e2:	887b      	ldrh	r3, [r7, #2]
 80025e4:	400b      	ands	r3, r1
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	619a      	str	r2, [r3, #24]
}
 80025ec:	bf00      	nop
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e08d      	b.n	8002726 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d106      	bne.n	8002624 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7fe f8be 	bl	80007a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2224      	movs	r2, #36	@ 0x24
 8002628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0201 	bic.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002648:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002658:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d107      	bne.n	8002672 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	e006      	b.n	8002680 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800267e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	2b02      	cmp	r3, #2
 8002686:	d108      	bne.n	800269a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	e007      	b.n	80026aa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68da      	ldr	r2, [r3, #12]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69d9      	ldr	r1, [r3, #28]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1a      	ldr	r2, [r3, #32]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0201 	orr.w	r2, r2, #1
 8002706:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2220      	movs	r2, #32
 8002712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b088      	sub	sp, #32
 8002734:	af02      	add	r7, sp, #8
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	4608      	mov	r0, r1
 800273a:	4611      	mov	r1, r2
 800273c:	461a      	mov	r2, r3
 800273e:	4603      	mov	r3, r0
 8002740:	817b      	strh	r3, [r7, #10]
 8002742:	460b      	mov	r3, r1
 8002744:	813b      	strh	r3, [r7, #8]
 8002746:	4613      	mov	r3, r2
 8002748:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b20      	cmp	r3, #32
 8002754:	f040 80fd 	bne.w	8002952 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <HAL_I2C_Mem_Read+0x34>
 800275e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002760:	2b00      	cmp	r3, #0
 8002762:	d105      	bne.n	8002770 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800276a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0f1      	b.n	8002954 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <HAL_I2C_Mem_Read+0x4e>
 800277a:	2302      	movs	r3, #2
 800277c:	e0ea      	b.n	8002954 <HAL_I2C_Mem_Read+0x224>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002786:	f7ff fa87 	bl	8001c98 <HAL_GetTick>
 800278a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	2319      	movs	r3, #25
 8002792:	2201      	movs	r2, #1
 8002794:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 f95b 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0d5      	b.n	8002954 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2222      	movs	r2, #34	@ 0x22
 80027ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2240      	movs	r2, #64	@ 0x40
 80027b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6a3a      	ldr	r2, [r7, #32]
 80027c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80027c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027d0:	88f8      	ldrh	r0, [r7, #6]
 80027d2:	893a      	ldrh	r2, [r7, #8]
 80027d4:	8979      	ldrh	r1, [r7, #10]
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	9301      	str	r3, [sp, #4]
 80027da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	4603      	mov	r3, r0
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 f8bf 	bl	8002964 <I2C_RequestMemoryRead>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0ad      	b.n	8002954 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	2bff      	cmp	r3, #255	@ 0xff
 8002800:	d90e      	bls.n	8002820 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2201      	movs	r2, #1
 8002806:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800280c:	b2da      	uxtb	r2, r3
 800280e:	8979      	ldrh	r1, [r7, #10]
 8002810:	4b52      	ldr	r3, [pc, #328]	@ (800295c <HAL_I2C_Mem_Read+0x22c>)
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 fadf 	bl	8002ddc <I2C_TransferConfig>
 800281e:	e00f      	b.n	8002840 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282e:	b2da      	uxtb	r2, r3
 8002830:	8979      	ldrh	r1, [r7, #10]
 8002832:	4b4a      	ldr	r3, [pc, #296]	@ (800295c <HAL_I2C_Mem_Read+0x22c>)
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 face 	bl	8002ddc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002846:	2200      	movs	r2, #0
 8002848:	2104      	movs	r1, #4
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 f902 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e07c      	b.n	8002954 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002876:	3b01      	subs	r3, #1
 8002878:	b29a      	uxth	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002882:	b29b      	uxth	r3, r3
 8002884:	3b01      	subs	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002890:	b29b      	uxth	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d034      	beq.n	8002900 <HAL_I2C_Mem_Read+0x1d0>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800289a:	2b00      	cmp	r3, #0
 800289c:	d130      	bne.n	8002900 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028a4:	2200      	movs	r2, #0
 80028a6:	2180      	movs	r1, #128	@ 0x80
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 f8d3 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e04d      	b.n	8002954 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2bff      	cmp	r3, #255	@ 0xff
 80028c0:	d90e      	bls.n	80028e0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2201      	movs	r2, #1
 80028c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	8979      	ldrh	r1, [r7, #10]
 80028d0:	2300      	movs	r3, #0
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 fa7f 	bl	8002ddc <I2C_TransferConfig>
 80028de:	e00f      	b.n	8002900 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	8979      	ldrh	r1, [r7, #10]
 80028f2:	2300      	movs	r3, #0
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 fa6e 	bl	8002ddc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002904:	b29b      	uxth	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d19a      	bne.n	8002840 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 f940 	bl	8002b94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e01a      	b.n	8002954 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2220      	movs	r2, #32
 8002924:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6859      	ldr	r1, [r3, #4]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	4b0b      	ldr	r3, [pc, #44]	@ (8002960 <HAL_I2C_Mem_Read+0x230>)
 8002932:	400b      	ands	r3, r1
 8002934:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2220      	movs	r2, #32
 800293a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	e000      	b.n	8002954 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002952:	2302      	movs	r3, #2
  }
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	80002400 	.word	0x80002400
 8002960:	fe00e800 	.word	0xfe00e800

08002964 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af02      	add	r7, sp, #8
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	4608      	mov	r0, r1
 800296e:	4611      	mov	r1, r2
 8002970:	461a      	mov	r2, r3
 8002972:	4603      	mov	r3, r0
 8002974:	817b      	strh	r3, [r7, #10]
 8002976:	460b      	mov	r3, r1
 8002978:	813b      	strh	r3, [r7, #8]
 800297a:	4613      	mov	r3, r2
 800297c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	b2da      	uxtb	r2, r3
 8002982:	8979      	ldrh	r1, [r7, #10]
 8002984:	4b20      	ldr	r3, [pc, #128]	@ (8002a08 <I2C_RequestMemoryRead+0xa4>)
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	2300      	movs	r3, #0
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 fa26 	bl	8002ddc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002990:	69fa      	ldr	r2, [r7, #28]
 8002992:	69b9      	ldr	r1, [r7, #24]
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 f8b6 	bl	8002b06 <I2C_WaitOnTXISFlagUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e02c      	b.n	80029fe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029a4:	88fb      	ldrh	r3, [r7, #6]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d105      	bne.n	80029b6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029aa:	893b      	ldrh	r3, [r7, #8]
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80029b4:	e015      	b.n	80029e2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029b6:	893b      	ldrh	r3, [r7, #8]
 80029b8:	0a1b      	lsrs	r3, r3, #8
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029c4:	69fa      	ldr	r2, [r7, #28]
 80029c6:	69b9      	ldr	r1, [r7, #24]
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 f89c 	bl	8002b06 <I2C_WaitOnTXISFlagUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e012      	b.n	80029fe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029d8:	893b      	ldrh	r3, [r7, #8]
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	2200      	movs	r2, #0
 80029ea:	2140      	movs	r1, #64	@ 0x40
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 f831 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e000      	b.n	80029fe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	80002000 	.word	0x80002000

08002a0c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d103      	bne.n	8002a2a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2200      	movs	r2, #0
 8002a28:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d007      	beq.n	8002a48 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699a      	ldr	r2, [r3, #24]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0201 	orr.w	r2, r2, #1
 8002a46:	619a      	str	r2, [r3, #24]
  }
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	603b      	str	r3, [r7, #0]
 8002a60:	4613      	mov	r3, r2
 8002a62:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a64:	e03b      	b.n	8002ade <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	6839      	ldr	r1, [r7, #0]
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 f8d6 	bl	8002c1c <I2C_IsErrorOccurred>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e041      	b.n	8002afe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a80:	d02d      	beq.n	8002ade <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a82:	f7ff f909 	bl	8001c98 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d302      	bcc.n	8002a98 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d122      	bne.n	8002ade <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699a      	ldr	r2, [r3, #24]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	bf0c      	ite	eq
 8002aa8:	2301      	moveq	r3, #1
 8002aaa:	2300      	movne	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	461a      	mov	r2, r3
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d113      	bne.n	8002ade <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aba:	f043 0220 	orr.w	r2, r3, #32
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e00f      	b.n	8002afe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	699a      	ldr	r2, [r3, #24]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	bf0c      	ite	eq
 8002aee:	2301      	moveq	r3, #1
 8002af0:	2300      	movne	r3, #0
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d0b4      	beq.n	8002a66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b12:	e033      	b.n	8002b7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	68b9      	ldr	r1, [r7, #8]
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 f87f 	bl	8002c1c <I2C_IsErrorOccurred>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e031      	b.n	8002b8c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b2e:	d025      	beq.n	8002b7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b30:	f7ff f8b2 	bl	8001c98 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d302      	bcc.n	8002b46 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d11a      	bne.n	8002b7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d013      	beq.n	8002b7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b58:	f043 0220 	orr.w	r2, r3, #32
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e007      	b.n	8002b8c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d1c4      	bne.n	8002b14 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ba0:	e02f      	b.n	8002c02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	68b9      	ldr	r1, [r7, #8]
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 f838 	bl	8002c1c <I2C_IsErrorOccurred>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e02d      	b.n	8002c12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb6:	f7ff f86f 	bl	8001c98 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d302      	bcc.n	8002bcc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d11a      	bne.n	8002c02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	f003 0320 	and.w	r3, r3, #32
 8002bd6:	2b20      	cmp	r3, #32
 8002bd8:	d013      	beq.n	8002c02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bde:	f043 0220 	orr.w	r2, r3, #32
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e007      	b.n	8002c12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	f003 0320 	and.w	r3, r3, #32
 8002c0c:	2b20      	cmp	r3, #32
 8002c0e:	d1c8      	bne.n	8002ba2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08a      	sub	sp, #40	@ 0x28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	f003 0310 	and.w	r3, r3, #16
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d068      	beq.n	8002d1a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2210      	movs	r2, #16
 8002c4e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c50:	e049      	b.n	8002ce6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c58:	d045      	beq.n	8002ce6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c5a:	f7ff f81d 	bl	8001c98 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d302      	bcc.n	8002c70 <I2C_IsErrorOccurred+0x54>
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d13a      	bne.n	8002ce6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c7a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c82:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c92:	d121      	bne.n	8002cd8 <I2C_IsErrorOccurred+0xbc>
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c9a:	d01d      	beq.n	8002cd8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002c9c:	7cfb      	ldrb	r3, [r7, #19]
 8002c9e:	2b20      	cmp	r3, #32
 8002ca0:	d01a      	beq.n	8002cd8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cb0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002cb2:	f7fe fff1 	bl	8001c98 <HAL_GetTick>
 8002cb6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cb8:	e00e      	b.n	8002cd8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002cba:	f7fe ffed 	bl	8001c98 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b19      	cmp	r3, #25
 8002cc6:	d907      	bls.n	8002cd8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	f043 0320 	orr.w	r3, r3, #32
 8002cce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002cd6:	e006      	b.n	8002ce6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	f003 0320 	and.w	r3, r3, #32
 8002ce2:	2b20      	cmp	r3, #32
 8002ce4:	d1e9      	bne.n	8002cba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	f003 0320 	and.w	r3, r3, #32
 8002cf0:	2b20      	cmp	r3, #32
 8002cf2:	d003      	beq.n	8002cfc <I2C_IsErrorOccurred+0xe0>
 8002cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0aa      	beq.n	8002c52 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d103      	bne.n	8002d0c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	f043 0304 	orr.w	r3, r3, #4
 8002d12:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00b      	beq.n	8002d44 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00b      	beq.n	8002d66 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	f043 0308 	orr.w	r3, r3, #8
 8002d54:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00b      	beq.n	8002d88 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	f043 0302 	orr.w	r3, r3, #2
 8002d76:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002d88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d01c      	beq.n	8002dca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f7ff fe3b 	bl	8002a0c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6859      	ldr	r1, [r3, #4]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd8 <I2C_IsErrorOccurred+0x1bc>)
 8002da2:	400b      	ands	r3, r1
 8002da4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	431a      	orrs	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2220      	movs	r2, #32
 8002db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002dca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3728      	adds	r7, #40	@ 0x28
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	fe00e800 	.word	0xfe00e800

08002ddc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b087      	sub	sp, #28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	607b      	str	r3, [r7, #4]
 8002de6:	460b      	mov	r3, r1
 8002de8:	817b      	strh	r3, [r7, #10]
 8002dea:	4613      	mov	r3, r2
 8002dec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dee:	897b      	ldrh	r3, [r7, #10]
 8002df0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002df4:	7a7b      	ldrb	r3, [r7, #9]
 8002df6:	041b      	lsls	r3, r3, #16
 8002df8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dfc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e0a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	0d5b      	lsrs	r3, r3, #21
 8002e16:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002e1a:	4b08      	ldr	r3, [pc, #32]	@ (8002e3c <I2C_TransferConfig+0x60>)
 8002e1c:	430b      	orrs	r3, r1
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	ea02 0103 	and.w	r1, r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e2e:	bf00      	nop
 8002e30:	371c      	adds	r7, #28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	03ff63ff 	.word	0x03ff63ff

08002e40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b20      	cmp	r3, #32
 8002e54:	d138      	bne.n	8002ec8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d101      	bne.n	8002e64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e60:	2302      	movs	r3, #2
 8002e62:	e032      	b.n	8002eca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2224      	movs	r2, #36	@ 0x24
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0201 	bic.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6819      	ldr	r1, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	e000      	b.n	8002eca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ec8:	2302      	movs	r3, #2
  }
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b085      	sub	sp, #20
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b20      	cmp	r3, #32
 8002eea:	d139      	bne.n	8002f60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d101      	bne.n	8002efa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e033      	b.n	8002f62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2224      	movs	r2, #36	@ 0x24
 8002f06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0201 	bic.w	r2, r2, #1
 8002f18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	021b      	lsls	r3, r3, #8
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	e000      	b.n	8002f62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f60:	2302      	movs	r3, #2
  }
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
	...

08002f70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f74:	4b04      	ldr	r3, [pc, #16]	@ (8002f88 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40007000 	.word	0x40007000

08002f8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f9a:	d130      	bne.n	8002ffe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f9c:	4b23      	ldr	r3, [pc, #140]	@ (800302c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fa8:	d038      	beq.n	800301c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002faa:	4b20      	ldr	r3, [pc, #128]	@ (800302c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fb2:	4a1e      	ldr	r2, [pc, #120]	@ (800302c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fb4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fb8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fba:	4b1d      	ldr	r3, [pc, #116]	@ (8003030 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2232      	movs	r2, #50	@ 0x32
 8002fc0:	fb02 f303 	mul.w	r3, r2, r3
 8002fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8003034 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fca:	0c9b      	lsrs	r3, r3, #18
 8002fcc:	3301      	adds	r3, #1
 8002fce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fd0:	e002      	b.n	8002fd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fd8:	4b14      	ldr	r3, [pc, #80]	@ (800302c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fe0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fe4:	d102      	bne.n	8002fec <HAL_PWREx_ControlVoltageScaling+0x60>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1f2      	bne.n	8002fd2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fec:	4b0f      	ldr	r3, [pc, #60]	@ (800302c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ff8:	d110      	bne.n	800301c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e00f      	b.n	800301e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800302c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003006:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800300a:	d007      	beq.n	800301c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800300c:	4b07      	ldr	r3, [pc, #28]	@ (800302c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003014:	4a05      	ldr	r2, [pc, #20]	@ (800302c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003016:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800301a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	40007000 	.word	0x40007000
 8003030:	20000000 	.word	0x20000000
 8003034:	431bde83 	.word	0x431bde83

08003038 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e3ca      	b.n	80037e0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800304a:	4b97      	ldr	r3, [pc, #604]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003054:	4b94      	ldr	r3, [pc, #592]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f003 0303 	and.w	r3, r3, #3
 800305c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0310 	and.w	r3, r3, #16
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 80e4 	beq.w	8003234 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d007      	beq.n	8003082 <HAL_RCC_OscConfig+0x4a>
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	2b0c      	cmp	r3, #12
 8003076:	f040 808b 	bne.w	8003190 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	2b01      	cmp	r3, #1
 800307e:	f040 8087 	bne.w	8003190 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003082:	4b89      	ldr	r3, [pc, #548]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d005      	beq.n	800309a <HAL_RCC_OscConfig+0x62>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e3a2      	b.n	80037e0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1a      	ldr	r2, [r3, #32]
 800309e:	4b82      	ldr	r3, [pc, #520]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d004      	beq.n	80030b4 <HAL_RCC_OscConfig+0x7c>
 80030aa:	4b7f      	ldr	r3, [pc, #508]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030b2:	e005      	b.n	80030c0 <HAL_RCC_OscConfig+0x88>
 80030b4:	4b7c      	ldr	r3, [pc, #496]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 80030b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030ba:	091b      	lsrs	r3, r3, #4
 80030bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d223      	bcs.n	800310c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 fd87 	bl	8003bdc <RCC_SetFlashLatencyFromMSIRange>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e383      	b.n	80037e0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030d8:	4b73      	ldr	r3, [pc, #460]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a72      	ldr	r2, [pc, #456]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 80030de:	f043 0308 	orr.w	r3, r3, #8
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	4b70      	ldr	r3, [pc, #448]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	496d      	ldr	r1, [pc, #436]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030f6:	4b6c      	ldr	r3, [pc, #432]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	021b      	lsls	r3, r3, #8
 8003104:	4968      	ldr	r1, [pc, #416]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 8003106:	4313      	orrs	r3, r2
 8003108:	604b      	str	r3, [r1, #4]
 800310a:	e025      	b.n	8003158 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800310c:	4b66      	ldr	r3, [pc, #408]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a65      	ldr	r2, [pc, #404]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 8003112:	f043 0308 	orr.w	r3, r3, #8
 8003116:	6013      	str	r3, [r2, #0]
 8003118:	4b63      	ldr	r3, [pc, #396]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	4960      	ldr	r1, [pc, #384]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 8003126:	4313      	orrs	r3, r2
 8003128:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800312a:	4b5f      	ldr	r3, [pc, #380]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	021b      	lsls	r3, r3, #8
 8003138:	495b      	ldr	r1, [pc, #364]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 800313a:	4313      	orrs	r3, r2
 800313c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d109      	bne.n	8003158 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	4618      	mov	r0, r3
 800314a:	f000 fd47 	bl	8003bdc <RCC_SetFlashLatencyFromMSIRange>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e343      	b.n	80037e0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003158:	f000 fc4a 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 800315c:	4602      	mov	r2, r0
 800315e:	4b52      	ldr	r3, [pc, #328]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	091b      	lsrs	r3, r3, #4
 8003164:	f003 030f 	and.w	r3, r3, #15
 8003168:	4950      	ldr	r1, [pc, #320]	@ (80032ac <HAL_RCC_OscConfig+0x274>)
 800316a:	5ccb      	ldrb	r3, [r1, r3]
 800316c:	f003 031f 	and.w	r3, r3, #31
 8003170:	fa22 f303 	lsr.w	r3, r2, r3
 8003174:	4a4e      	ldr	r2, [pc, #312]	@ (80032b0 <HAL_RCC_OscConfig+0x278>)
 8003176:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003178:	4b4e      	ldr	r3, [pc, #312]	@ (80032b4 <HAL_RCC_OscConfig+0x27c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f7fd ff69 	bl	8001054 <HAL_InitTick>
 8003182:	4603      	mov	r3, r0
 8003184:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003186:	7bfb      	ldrb	r3, [r7, #15]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d052      	beq.n	8003232 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	e327      	b.n	80037e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d032      	beq.n	80031fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003198:	4b43      	ldr	r3, [pc, #268]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a42      	ldr	r2, [pc, #264]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031a4:	f7fe fd78 	bl	8001c98 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031ac:	f7fe fd74 	bl	8001c98 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e310      	b.n	80037e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031be:	4b3a      	ldr	r3, [pc, #232]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f0      	beq.n	80031ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031ca:	4b37      	ldr	r3, [pc, #220]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a36      	ldr	r2, [pc, #216]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 80031d0:	f043 0308 	orr.w	r3, r3, #8
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	4b34      	ldr	r3, [pc, #208]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	4931      	ldr	r1, [pc, #196]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031e8:	4b2f      	ldr	r3, [pc, #188]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	021b      	lsls	r3, r3, #8
 80031f6:	492c      	ldr	r1, [pc, #176]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	604b      	str	r3, [r1, #4]
 80031fc:	e01a      	b.n	8003234 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031fe:	4b2a      	ldr	r3, [pc, #168]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a29      	ldr	r2, [pc, #164]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 8003204:	f023 0301 	bic.w	r3, r3, #1
 8003208:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800320a:	f7fe fd45 	bl	8001c98 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003212:	f7fe fd41 	bl	8001c98 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e2dd      	b.n	80037e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003224:	4b20      	ldr	r3, [pc, #128]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f0      	bne.n	8003212 <HAL_RCC_OscConfig+0x1da>
 8003230:	e000      	b.n	8003234 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003232:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	d074      	beq.n	800332a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	2b08      	cmp	r3, #8
 8003244:	d005      	beq.n	8003252 <HAL_RCC_OscConfig+0x21a>
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	2b0c      	cmp	r3, #12
 800324a:	d10e      	bne.n	800326a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	2b03      	cmp	r3, #3
 8003250:	d10b      	bne.n	800326a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003252:	4b15      	ldr	r3, [pc, #84]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d064      	beq.n	8003328 <HAL_RCC_OscConfig+0x2f0>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d160      	bne.n	8003328 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e2ba      	b.n	80037e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003272:	d106      	bne.n	8003282 <HAL_RCC_OscConfig+0x24a>
 8003274:	4b0c      	ldr	r3, [pc, #48]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a0b      	ldr	r2, [pc, #44]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 800327a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800327e:	6013      	str	r3, [r2, #0]
 8003280:	e026      	b.n	80032d0 <HAL_RCC_OscConfig+0x298>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800328a:	d115      	bne.n	80032b8 <HAL_RCC_OscConfig+0x280>
 800328c:	4b06      	ldr	r3, [pc, #24]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a05      	ldr	r2, [pc, #20]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 8003292:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003296:	6013      	str	r3, [r2, #0]
 8003298:	4b03      	ldr	r3, [pc, #12]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a02      	ldr	r2, [pc, #8]	@ (80032a8 <HAL_RCC_OscConfig+0x270>)
 800329e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	e014      	b.n	80032d0 <HAL_RCC_OscConfig+0x298>
 80032a6:	bf00      	nop
 80032a8:	40021000 	.word	0x40021000
 80032ac:	0800bba8 	.word	0x0800bba8
 80032b0:	20000000 	.word	0x20000000
 80032b4:	2000000c 	.word	0x2000000c
 80032b8:	4ba0      	ldr	r3, [pc, #640]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a9f      	ldr	r2, [pc, #636]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 80032be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032c2:	6013      	str	r3, [r2, #0]
 80032c4:	4b9d      	ldr	r3, [pc, #628]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a9c      	ldr	r2, [pc, #624]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 80032ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d013      	beq.n	8003300 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d8:	f7fe fcde 	bl	8001c98 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e0:	f7fe fcda 	bl	8001c98 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b64      	cmp	r3, #100	@ 0x64
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e276      	b.n	80037e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032f2:	4b92      	ldr	r3, [pc, #584]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0f0      	beq.n	80032e0 <HAL_RCC_OscConfig+0x2a8>
 80032fe:	e014      	b.n	800332a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003300:	f7fe fcca 	bl	8001c98 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003308:	f7fe fcc6 	bl	8001c98 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b64      	cmp	r3, #100	@ 0x64
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e262      	b.n	80037e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800331a:	4b88      	ldr	r3, [pc, #544]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1f0      	bne.n	8003308 <HAL_RCC_OscConfig+0x2d0>
 8003326:	e000      	b.n	800332a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d060      	beq.n	80033f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	2b04      	cmp	r3, #4
 800333a:	d005      	beq.n	8003348 <HAL_RCC_OscConfig+0x310>
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	2b0c      	cmp	r3, #12
 8003340:	d119      	bne.n	8003376 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	2b02      	cmp	r3, #2
 8003346:	d116      	bne.n	8003376 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003348:	4b7c      	ldr	r3, [pc, #496]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003350:	2b00      	cmp	r3, #0
 8003352:	d005      	beq.n	8003360 <HAL_RCC_OscConfig+0x328>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e23f      	b.n	80037e0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003360:	4b76      	ldr	r3, [pc, #472]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	061b      	lsls	r3, r3, #24
 800336e:	4973      	ldr	r1, [pc, #460]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 8003370:	4313      	orrs	r3, r2
 8003372:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003374:	e040      	b.n	80033f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d023      	beq.n	80033c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800337e:	4b6f      	ldr	r3, [pc, #444]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a6e      	ldr	r2, [pc, #440]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 8003384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003388:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338a:	f7fe fc85 	bl	8001c98 <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003392:	f7fe fc81 	bl	8001c98 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e21d      	b.n	80037e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033a4:	4b65      	ldr	r3, [pc, #404]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0f0      	beq.n	8003392 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b0:	4b62      	ldr	r3, [pc, #392]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	061b      	lsls	r3, r3, #24
 80033be:	495f      	ldr	r1, [pc, #380]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	604b      	str	r3, [r1, #4]
 80033c4:	e018      	b.n	80033f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033c6:	4b5d      	ldr	r3, [pc, #372]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a5c      	ldr	r2, [pc, #368]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 80033cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d2:	f7fe fc61 	bl	8001c98 <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033d8:	e008      	b.n	80033ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033da:	f7fe fc5d 	bl	8001c98 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e1f9      	b.n	80037e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033ec:	4b53      	ldr	r3, [pc, #332]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1f0      	bne.n	80033da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b00      	cmp	r3, #0
 8003402:	d03c      	beq.n	800347e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d01c      	beq.n	8003446 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800340c:	4b4b      	ldr	r3, [pc, #300]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 800340e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003412:	4a4a      	ldr	r2, [pc, #296]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 8003414:	f043 0301 	orr.w	r3, r3, #1
 8003418:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341c:	f7fe fc3c 	bl	8001c98 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003424:	f7fe fc38 	bl	8001c98 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e1d4      	b.n	80037e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003436:	4b41      	ldr	r3, [pc, #260]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 8003438:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0ef      	beq.n	8003424 <HAL_RCC_OscConfig+0x3ec>
 8003444:	e01b      	b.n	800347e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003446:	4b3d      	ldr	r3, [pc, #244]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 8003448:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800344c:	4a3b      	ldr	r2, [pc, #236]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 800344e:	f023 0301 	bic.w	r3, r3, #1
 8003452:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003456:	f7fe fc1f 	bl	8001c98 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800345e:	f7fe fc1b 	bl	8001c98 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e1b7      	b.n	80037e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003470:	4b32      	ldr	r3, [pc, #200]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 8003472:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1ef      	bne.n	800345e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 80a6 	beq.w	80035d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800348c:	2300      	movs	r3, #0
 800348e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003490:	4b2a      	ldr	r3, [pc, #168]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 8003492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003494:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10d      	bne.n	80034b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800349c:	4b27      	ldr	r3, [pc, #156]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 800349e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a0:	4a26      	ldr	r2, [pc, #152]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 80034a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80034a8:	4b24      	ldr	r3, [pc, #144]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 80034aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034b0:	60bb      	str	r3, [r7, #8]
 80034b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034b4:	2301      	movs	r3, #1
 80034b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034b8:	4b21      	ldr	r3, [pc, #132]	@ (8003540 <HAL_RCC_OscConfig+0x508>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d118      	bne.n	80034f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003540 <HAL_RCC_OscConfig+0x508>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003540 <HAL_RCC_OscConfig+0x508>)
 80034ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034d0:	f7fe fbe2 	bl	8001c98 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d8:	f7fe fbde 	bl	8001c98 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e17a      	b.n	80037e0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ea:	4b15      	ldr	r3, [pc, #84]	@ (8003540 <HAL_RCC_OscConfig+0x508>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0f0      	beq.n	80034d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d108      	bne.n	8003510 <HAL_RCC_OscConfig+0x4d8>
 80034fe:	4b0f      	ldr	r3, [pc, #60]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 8003500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003504:	4a0d      	ldr	r2, [pc, #52]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800350e:	e029      	b.n	8003564 <HAL_RCC_OscConfig+0x52c>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	2b05      	cmp	r3, #5
 8003516:	d115      	bne.n	8003544 <HAL_RCC_OscConfig+0x50c>
 8003518:	4b08      	ldr	r3, [pc, #32]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 800351a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800351e:	4a07      	ldr	r2, [pc, #28]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 8003520:	f043 0304 	orr.w	r3, r3, #4
 8003524:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003528:	4b04      	ldr	r3, [pc, #16]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800352e:	4a03      	ldr	r2, [pc, #12]	@ (800353c <HAL_RCC_OscConfig+0x504>)
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003538:	e014      	b.n	8003564 <HAL_RCC_OscConfig+0x52c>
 800353a:	bf00      	nop
 800353c:	40021000 	.word	0x40021000
 8003540:	40007000 	.word	0x40007000
 8003544:	4b9c      	ldr	r3, [pc, #624]	@ (80037b8 <HAL_RCC_OscConfig+0x780>)
 8003546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800354a:	4a9b      	ldr	r2, [pc, #620]	@ (80037b8 <HAL_RCC_OscConfig+0x780>)
 800354c:	f023 0301 	bic.w	r3, r3, #1
 8003550:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003554:	4b98      	ldr	r3, [pc, #608]	@ (80037b8 <HAL_RCC_OscConfig+0x780>)
 8003556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800355a:	4a97      	ldr	r2, [pc, #604]	@ (80037b8 <HAL_RCC_OscConfig+0x780>)
 800355c:	f023 0304 	bic.w	r3, r3, #4
 8003560:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d016      	beq.n	800359a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356c:	f7fe fb94 	bl	8001c98 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003572:	e00a      	b.n	800358a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003574:	f7fe fb90 	bl	8001c98 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003582:	4293      	cmp	r3, r2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e12a      	b.n	80037e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800358a:	4b8b      	ldr	r3, [pc, #556]	@ (80037b8 <HAL_RCC_OscConfig+0x780>)
 800358c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0ed      	beq.n	8003574 <HAL_RCC_OscConfig+0x53c>
 8003598:	e015      	b.n	80035c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359a:	f7fe fb7d 	bl	8001c98 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035a0:	e00a      	b.n	80035b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a2:	f7fe fb79 	bl	8001c98 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e113      	b.n	80037e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035b8:	4b7f      	ldr	r3, [pc, #508]	@ (80037b8 <HAL_RCC_OscConfig+0x780>)
 80035ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1ed      	bne.n	80035a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035c6:	7ffb      	ldrb	r3, [r7, #31]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d105      	bne.n	80035d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035cc:	4b7a      	ldr	r3, [pc, #488]	@ (80037b8 <HAL_RCC_OscConfig+0x780>)
 80035ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d0:	4a79      	ldr	r2, [pc, #484]	@ (80037b8 <HAL_RCC_OscConfig+0x780>)
 80035d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035d6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 80fe 	beq.w	80037de <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	f040 80d0 	bne.w	800378c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035ec:	4b72      	ldr	r3, [pc, #456]	@ (80037b8 <HAL_RCC_OscConfig+0x780>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f003 0203 	and.w	r2, r3, #3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d130      	bne.n	8003662 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360a:	3b01      	subs	r3, #1
 800360c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800360e:	429a      	cmp	r2, r3
 8003610:	d127      	bne.n	8003662 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800361c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800361e:	429a      	cmp	r2, r3
 8003620:	d11f      	bne.n	8003662 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800362c:	2a07      	cmp	r2, #7
 800362e:	bf14      	ite	ne
 8003630:	2201      	movne	r2, #1
 8003632:	2200      	moveq	r2, #0
 8003634:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003636:	4293      	cmp	r3, r2
 8003638:	d113      	bne.n	8003662 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003644:	085b      	lsrs	r3, r3, #1
 8003646:	3b01      	subs	r3, #1
 8003648:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800364a:	429a      	cmp	r2, r3
 800364c:	d109      	bne.n	8003662 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003658:	085b      	lsrs	r3, r3, #1
 800365a:	3b01      	subs	r3, #1
 800365c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800365e:	429a      	cmp	r2, r3
 8003660:	d06e      	beq.n	8003740 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	2b0c      	cmp	r3, #12
 8003666:	d069      	beq.n	800373c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003668:	4b53      	ldr	r3, [pc, #332]	@ (80037b8 <HAL_RCC_OscConfig+0x780>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d105      	bne.n	8003680 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003674:	4b50      	ldr	r3, [pc, #320]	@ (80037b8 <HAL_RCC_OscConfig+0x780>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0ad      	b.n	80037e0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003684:	4b4c      	ldr	r3, [pc, #304]	@ (80037b8 <HAL_RCC_OscConfig+0x780>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a4b      	ldr	r2, [pc, #300]	@ (80037b8 <HAL_RCC_OscConfig+0x780>)
 800368a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800368e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003690:	f7fe fb02 	bl	8001c98 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003698:	f7fe fafe 	bl	8001c98 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e09a      	b.n	80037e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036aa:	4b43      	ldr	r3, [pc, #268]	@ (80037b8 <HAL_RCC_OscConfig+0x780>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036b6:	4b40      	ldr	r3, [pc, #256]	@ (80037b8 <HAL_RCC_OscConfig+0x780>)
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	4b40      	ldr	r3, [pc, #256]	@ (80037bc <HAL_RCC_OscConfig+0x784>)
 80036bc:	4013      	ands	r3, r2
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80036c6:	3a01      	subs	r2, #1
 80036c8:	0112      	lsls	r2, r2, #4
 80036ca:	4311      	orrs	r1, r2
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80036d0:	0212      	lsls	r2, r2, #8
 80036d2:	4311      	orrs	r1, r2
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80036d8:	0852      	lsrs	r2, r2, #1
 80036da:	3a01      	subs	r2, #1
 80036dc:	0552      	lsls	r2, r2, #21
 80036de:	4311      	orrs	r1, r2
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80036e4:	0852      	lsrs	r2, r2, #1
 80036e6:	3a01      	subs	r2, #1
 80036e8:	0652      	lsls	r2, r2, #25
 80036ea:	4311      	orrs	r1, r2
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80036f0:	0912      	lsrs	r2, r2, #4
 80036f2:	0452      	lsls	r2, r2, #17
 80036f4:	430a      	orrs	r2, r1
 80036f6:	4930      	ldr	r1, [pc, #192]	@ (80037b8 <HAL_RCC_OscConfig+0x780>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036fc:	4b2e      	ldr	r3, [pc, #184]	@ (80037b8 <HAL_RCC_OscConfig+0x780>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a2d      	ldr	r2, [pc, #180]	@ (80037b8 <HAL_RCC_OscConfig+0x780>)
 8003702:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003706:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003708:	4b2b      	ldr	r3, [pc, #172]	@ (80037b8 <HAL_RCC_OscConfig+0x780>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	4a2a      	ldr	r2, [pc, #168]	@ (80037b8 <HAL_RCC_OscConfig+0x780>)
 800370e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003712:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003714:	f7fe fac0 	bl	8001c98 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371c:	f7fe fabc 	bl	8001c98 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e058      	b.n	80037e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800372e:	4b22      	ldr	r3, [pc, #136]	@ (80037b8 <HAL_RCC_OscConfig+0x780>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0f0      	beq.n	800371c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800373a:	e050      	b.n	80037de <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e04f      	b.n	80037e0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003740:	4b1d      	ldr	r3, [pc, #116]	@ (80037b8 <HAL_RCC_OscConfig+0x780>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d148      	bne.n	80037de <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800374c:	4b1a      	ldr	r3, [pc, #104]	@ (80037b8 <HAL_RCC_OscConfig+0x780>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a19      	ldr	r2, [pc, #100]	@ (80037b8 <HAL_RCC_OscConfig+0x780>)
 8003752:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003756:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003758:	4b17      	ldr	r3, [pc, #92]	@ (80037b8 <HAL_RCC_OscConfig+0x780>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	4a16      	ldr	r2, [pc, #88]	@ (80037b8 <HAL_RCC_OscConfig+0x780>)
 800375e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003762:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003764:	f7fe fa98 	bl	8001c98 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800376c:	f7fe fa94 	bl	8001c98 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e030      	b.n	80037e0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377e:	4b0e      	ldr	r3, [pc, #56]	@ (80037b8 <HAL_RCC_OscConfig+0x780>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0f0      	beq.n	800376c <HAL_RCC_OscConfig+0x734>
 800378a:	e028      	b.n	80037de <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	2b0c      	cmp	r3, #12
 8003790:	d023      	beq.n	80037da <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003792:	4b09      	ldr	r3, [pc, #36]	@ (80037b8 <HAL_RCC_OscConfig+0x780>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a08      	ldr	r2, [pc, #32]	@ (80037b8 <HAL_RCC_OscConfig+0x780>)
 8003798:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800379c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379e:	f7fe fa7b 	bl	8001c98 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037a4:	e00c      	b.n	80037c0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a6:	f7fe fa77 	bl	8001c98 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d905      	bls.n	80037c0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e013      	b.n	80037e0 <HAL_RCC_OscConfig+0x7a8>
 80037b8:	40021000 	.word	0x40021000
 80037bc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037c0:	4b09      	ldr	r3, [pc, #36]	@ (80037e8 <HAL_RCC_OscConfig+0x7b0>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1ec      	bne.n	80037a6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037cc:	4b06      	ldr	r3, [pc, #24]	@ (80037e8 <HAL_RCC_OscConfig+0x7b0>)
 80037ce:	68da      	ldr	r2, [r3, #12]
 80037d0:	4905      	ldr	r1, [pc, #20]	@ (80037e8 <HAL_RCC_OscConfig+0x7b0>)
 80037d2:	4b06      	ldr	r3, [pc, #24]	@ (80037ec <HAL_RCC_OscConfig+0x7b4>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	60cb      	str	r3, [r1, #12]
 80037d8:	e001      	b.n	80037de <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3720      	adds	r7, #32
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40021000 	.word	0x40021000
 80037ec:	feeefffc 	.word	0xfeeefffc

080037f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e0e7      	b.n	80039d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003804:	4b75      	ldr	r3, [pc, #468]	@ (80039dc <HAL_RCC_ClockConfig+0x1ec>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d910      	bls.n	8003834 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003812:	4b72      	ldr	r3, [pc, #456]	@ (80039dc <HAL_RCC_ClockConfig+0x1ec>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 0207 	bic.w	r2, r3, #7
 800381a:	4970      	ldr	r1, [pc, #448]	@ (80039dc <HAL_RCC_ClockConfig+0x1ec>)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	4313      	orrs	r3, r2
 8003820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003822:	4b6e      	ldr	r3, [pc, #440]	@ (80039dc <HAL_RCC_ClockConfig+0x1ec>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0cf      	b.n	80039d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d010      	beq.n	8003862 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	4b66      	ldr	r3, [pc, #408]	@ (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800384c:	429a      	cmp	r2, r3
 800384e:	d908      	bls.n	8003862 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003850:	4b63      	ldr	r3, [pc, #396]	@ (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	4960      	ldr	r1, [pc, #384]	@ (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 800385e:	4313      	orrs	r3, r2
 8003860:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d04c      	beq.n	8003908 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b03      	cmp	r3, #3
 8003874:	d107      	bne.n	8003886 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003876:	4b5a      	ldr	r3, [pc, #360]	@ (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d121      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e0a6      	b.n	80039d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b02      	cmp	r3, #2
 800388c:	d107      	bne.n	800389e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800388e:	4b54      	ldr	r3, [pc, #336]	@ (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d115      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e09a      	b.n	80039d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d107      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038a6:	4b4e      	ldr	r3, [pc, #312]	@ (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d109      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e08e      	b.n	80039d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038b6:	4b4a      	ldr	r3, [pc, #296]	@ (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e086      	b.n	80039d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038c6:	4b46      	ldr	r3, [pc, #280]	@ (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f023 0203 	bic.w	r2, r3, #3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	4943      	ldr	r1, [pc, #268]	@ (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038d8:	f7fe f9de 	bl	8001c98 <HAL_GetTick>
 80038dc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038de:	e00a      	b.n	80038f6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e0:	f7fe f9da 	bl	8001c98 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e06e      	b.n	80039d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f6:	4b3a      	ldr	r3, [pc, #232]	@ (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 020c 	and.w	r2, r3, #12
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	429a      	cmp	r2, r3
 8003906:	d1eb      	bne.n	80038e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d010      	beq.n	8003936 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	4b31      	ldr	r3, [pc, #196]	@ (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003920:	429a      	cmp	r2, r3
 8003922:	d208      	bcs.n	8003936 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003924:	4b2e      	ldr	r3, [pc, #184]	@ (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	492b      	ldr	r1, [pc, #172]	@ (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003932:	4313      	orrs	r3, r2
 8003934:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003936:	4b29      	ldr	r3, [pc, #164]	@ (80039dc <HAL_RCC_ClockConfig+0x1ec>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d210      	bcs.n	8003966 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003944:	4b25      	ldr	r3, [pc, #148]	@ (80039dc <HAL_RCC_ClockConfig+0x1ec>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f023 0207 	bic.w	r2, r3, #7
 800394c:	4923      	ldr	r1, [pc, #140]	@ (80039dc <HAL_RCC_ClockConfig+0x1ec>)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	4313      	orrs	r3, r2
 8003952:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003954:	4b21      	ldr	r3, [pc, #132]	@ (80039dc <HAL_RCC_ClockConfig+0x1ec>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d001      	beq.n	8003966 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e036      	b.n	80039d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	2b00      	cmp	r3, #0
 8003970:	d008      	beq.n	8003984 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003972:	4b1b      	ldr	r3, [pc, #108]	@ (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	4918      	ldr	r1, [pc, #96]	@ (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003980:	4313      	orrs	r3, r2
 8003982:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0308 	and.w	r3, r3, #8
 800398c:	2b00      	cmp	r3, #0
 800398e:	d009      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003990:	4b13      	ldr	r3, [pc, #76]	@ (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	4910      	ldr	r1, [pc, #64]	@ (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039a4:	f000 f824 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 80039a8:	4602      	mov	r2, r0
 80039aa:	4b0d      	ldr	r3, [pc, #52]	@ (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	091b      	lsrs	r3, r3, #4
 80039b0:	f003 030f 	and.w	r3, r3, #15
 80039b4:	490b      	ldr	r1, [pc, #44]	@ (80039e4 <HAL_RCC_ClockConfig+0x1f4>)
 80039b6:	5ccb      	ldrb	r3, [r1, r3]
 80039b8:	f003 031f 	and.w	r3, r3, #31
 80039bc:	fa22 f303 	lsr.w	r3, r2, r3
 80039c0:	4a09      	ldr	r2, [pc, #36]	@ (80039e8 <HAL_RCC_ClockConfig+0x1f8>)
 80039c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039c4:	4b09      	ldr	r3, [pc, #36]	@ (80039ec <HAL_RCC_ClockConfig+0x1fc>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fd fb43 	bl	8001054 <HAL_InitTick>
 80039ce:	4603      	mov	r3, r0
 80039d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80039d2:	7afb      	ldrb	r3, [r7, #11]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40022000 	.word	0x40022000
 80039e0:	40021000 	.word	0x40021000
 80039e4:	0800bba8 	.word	0x0800bba8
 80039e8:	20000000 	.word	0x20000000
 80039ec:	2000000c 	.word	0x2000000c

080039f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b089      	sub	sp, #36	@ 0x24
 80039f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	61fb      	str	r3, [r7, #28]
 80039fa:	2300      	movs	r3, #0
 80039fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039fe:	4b3e      	ldr	r3, [pc, #248]	@ (8003af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 030c 	and.w	r3, r3, #12
 8003a06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a08:	4b3b      	ldr	r3, [pc, #236]	@ (8003af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f003 0303 	and.w	r3, r3, #3
 8003a10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d005      	beq.n	8003a24 <HAL_RCC_GetSysClockFreq+0x34>
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	2b0c      	cmp	r3, #12
 8003a1c:	d121      	bne.n	8003a62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d11e      	bne.n	8003a62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a24:	4b34      	ldr	r3, [pc, #208]	@ (8003af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0308 	and.w	r3, r3, #8
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d107      	bne.n	8003a40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a30:	4b31      	ldr	r3, [pc, #196]	@ (8003af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	f003 030f 	and.w	r3, r3, #15
 8003a3c:	61fb      	str	r3, [r7, #28]
 8003a3e:	e005      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a40:	4b2d      	ldr	r3, [pc, #180]	@ (8003af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	091b      	lsrs	r3, r3, #4
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a4c:	4a2b      	ldr	r2, [pc, #172]	@ (8003afc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10d      	bne.n	8003a78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a60:	e00a      	b.n	8003a78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d102      	bne.n	8003a6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a68:	4b25      	ldr	r3, [pc, #148]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a6a:	61bb      	str	r3, [r7, #24]
 8003a6c:	e004      	b.n	8003a78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d101      	bne.n	8003a78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a74:	4b23      	ldr	r3, [pc, #140]	@ (8003b04 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	2b0c      	cmp	r3, #12
 8003a7c:	d134      	bne.n	8003ae8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8003af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d003      	beq.n	8003a96 <HAL_RCC_GetSysClockFreq+0xa6>
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	2b03      	cmp	r3, #3
 8003a92:	d003      	beq.n	8003a9c <HAL_RCC_GetSysClockFreq+0xac>
 8003a94:	e005      	b.n	8003aa2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a96:	4b1a      	ldr	r3, [pc, #104]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a98:	617b      	str	r3, [r7, #20]
      break;
 8003a9a:	e005      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a9c:	4b19      	ldr	r3, [pc, #100]	@ (8003b04 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a9e:	617b      	str	r3, [r7, #20]
      break;
 8003aa0:	e002      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	617b      	str	r3, [r7, #20]
      break;
 8003aa6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003aa8:	4b13      	ldr	r3, [pc, #76]	@ (8003af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	091b      	lsrs	r3, r3, #4
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ab6:	4b10      	ldr	r3, [pc, #64]	@ (8003af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	0a1b      	lsrs	r3, r3, #8
 8003abc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	fb03 f202 	mul.w	r2, r3, r2
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003acc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ace:	4b0a      	ldr	r3, [pc, #40]	@ (8003af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	0e5b      	lsrs	r3, r3, #25
 8003ad4:	f003 0303 	and.w	r3, r3, #3
 8003ad8:	3301      	adds	r3, #1
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ae8:	69bb      	ldr	r3, [r7, #24]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3724      	adds	r7, #36	@ 0x24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40021000 	.word	0x40021000
 8003afc:	0800bbc0 	.word	0x0800bbc0
 8003b00:	00f42400 	.word	0x00f42400
 8003b04:	007a1200 	.word	0x007a1200

08003b08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b0c:	4b03      	ldr	r3, [pc, #12]	@ (8003b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	20000000 	.word	0x20000000

08003b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b24:	f7ff fff0 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	4b06      	ldr	r3, [pc, #24]	@ (8003b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	0a1b      	lsrs	r3, r3, #8
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	4904      	ldr	r1, [pc, #16]	@ (8003b48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b36:	5ccb      	ldrb	r3, [r1, r3]
 8003b38:	f003 031f 	and.w	r3, r3, #31
 8003b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40021000 	.word	0x40021000
 8003b48:	0800bbb8 	.word	0x0800bbb8

08003b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b50:	f7ff ffda 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 8003b54:	4602      	mov	r2, r0
 8003b56:	4b06      	ldr	r3, [pc, #24]	@ (8003b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	0adb      	lsrs	r3, r3, #11
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	4904      	ldr	r1, [pc, #16]	@ (8003b74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b62:	5ccb      	ldrb	r3, [r1, r3]
 8003b64:	f003 031f 	and.w	r3, r3, #31
 8003b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40021000 	.word	0x40021000
 8003b74:	0800bbb8 	.word	0x0800bbb8

08003b78 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	220f      	movs	r2, #15
 8003b86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003b88:	4b12      	ldr	r3, [pc, #72]	@ (8003bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 0203 	and.w	r2, r3, #3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003b94:	4b0f      	ldr	r3, [pc, #60]	@ (8003bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003bac:	4b09      	ldr	r3, [pc, #36]	@ (8003bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	08db      	lsrs	r3, r3, #3
 8003bb2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003bba:	4b07      	ldr	r3, [pc, #28]	@ (8003bd8 <HAL_RCC_GetClockConfig+0x60>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0207 	and.w	r2, r3, #7
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	601a      	str	r2, [r3, #0]
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	40022000 	.word	0x40022000

08003bdc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003be4:	2300      	movs	r3, #0
 8003be6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003be8:	4b2a      	ldr	r3, [pc, #168]	@ (8003c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bf4:	f7ff f9bc 	bl	8002f70 <HAL_PWREx_GetVoltageRange>
 8003bf8:	6178      	str	r0, [r7, #20]
 8003bfa:	e014      	b.n	8003c26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bfc:	4b25      	ldr	r3, [pc, #148]	@ (8003c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c00:	4a24      	ldr	r2, [pc, #144]	@ (8003c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c06:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c08:	4b22      	ldr	r3, [pc, #136]	@ (8003c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c14:	f7ff f9ac 	bl	8002f70 <HAL_PWREx_GetVoltageRange>
 8003c18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c1e:	4a1d      	ldr	r2, [pc, #116]	@ (8003c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c24:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c2c:	d10b      	bne.n	8003c46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b80      	cmp	r3, #128	@ 0x80
 8003c32:	d919      	bls.n	8003c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2ba0      	cmp	r3, #160	@ 0xa0
 8003c38:	d902      	bls.n	8003c40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	613b      	str	r3, [r7, #16]
 8003c3e:	e013      	b.n	8003c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c40:	2301      	movs	r3, #1
 8003c42:	613b      	str	r3, [r7, #16]
 8003c44:	e010      	b.n	8003c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b80      	cmp	r3, #128	@ 0x80
 8003c4a:	d902      	bls.n	8003c52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	613b      	str	r3, [r7, #16]
 8003c50:	e00a      	b.n	8003c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b80      	cmp	r3, #128	@ 0x80
 8003c56:	d102      	bne.n	8003c5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c58:	2302      	movs	r3, #2
 8003c5a:	613b      	str	r3, [r7, #16]
 8003c5c:	e004      	b.n	8003c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b70      	cmp	r3, #112	@ 0x70
 8003c62:	d101      	bne.n	8003c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c64:	2301      	movs	r3, #1
 8003c66:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c68:	4b0b      	ldr	r3, [pc, #44]	@ (8003c98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f023 0207 	bic.w	r2, r3, #7
 8003c70:	4909      	ldr	r1, [pc, #36]	@ (8003c98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c78:	4b07      	ldr	r3, [pc, #28]	@ (8003c98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d001      	beq.n	8003c8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3718      	adds	r7, #24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40021000 	.word	0x40021000
 8003c98:	40022000 	.word	0x40022000

08003c9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ca8:	2300      	movs	r3, #0
 8003caa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d041      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cbc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003cc0:	d02a      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003cc2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003cc6:	d824      	bhi.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003cc8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ccc:	d008      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003cce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003cd2:	d81e      	bhi.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003cd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cdc:	d010      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003cde:	e018      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ce0:	4b86      	ldr	r3, [pc, #536]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	4a85      	ldr	r2, [pc, #532]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cec:	e015      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f001 f829 	bl	8004d4c <RCCEx_PLLSAI1_Config>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cfe:	e00c      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3320      	adds	r3, #32
 8003d04:	2100      	movs	r1, #0
 8003d06:	4618      	mov	r0, r3
 8003d08:	f001 f914 	bl	8004f34 <RCCEx_PLLSAI2_Config>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d10:	e003      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	74fb      	strb	r3, [r7, #19]
      break;
 8003d16:	e000      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003d18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d1a:	7cfb      	ldrb	r3, [r7, #19]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10b      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d20:	4b76      	ldr	r3, [pc, #472]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d26:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d2e:	4973      	ldr	r1, [pc, #460]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003d36:	e001      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d38:	7cfb      	ldrb	r3, [r7, #19]
 8003d3a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d041      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d4c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d50:	d02a      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003d52:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d56:	d824      	bhi.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d5c:	d008      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d62:	d81e      	bhi.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00a      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003d68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d6c:	d010      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d6e:	e018      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d70:	4b62      	ldr	r3, [pc, #392]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	4a61      	ldr	r2, [pc, #388]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d7a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d7c:	e015      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	3304      	adds	r3, #4
 8003d82:	2100      	movs	r1, #0
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 ffe1 	bl	8004d4c <RCCEx_PLLSAI1_Config>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d8e:	e00c      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3320      	adds	r3, #32
 8003d94:	2100      	movs	r1, #0
 8003d96:	4618      	mov	r0, r3
 8003d98:	f001 f8cc 	bl	8004f34 <RCCEx_PLLSAI2_Config>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003da0:	e003      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	74fb      	strb	r3, [r7, #19]
      break;
 8003da6:	e000      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003da8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003daa:	7cfb      	ldrb	r3, [r7, #19]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10b      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003db0:	4b52      	ldr	r3, [pc, #328]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003dbe:	494f      	ldr	r1, [pc, #316]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003dc6:	e001      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc8:	7cfb      	ldrb	r3, [r7, #19]
 8003dca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 80a0 	beq.w	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003dde:	4b47      	ldr	r3, [pc, #284]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003dea:	2301      	movs	r3, #1
 8003dec:	e000      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003dee:	2300      	movs	r3, #0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00d      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df4:	4b41      	ldr	r3, [pc, #260]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df8:	4a40      	ldr	r2, [pc, #256]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e00:	4b3e      	ldr	r3, [pc, #248]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e08:	60bb      	str	r3, [r7, #8]
 8003e0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e10:	4b3b      	ldr	r3, [pc, #236]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a3a      	ldr	r2, [pc, #232]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e1c:	f7fd ff3c 	bl	8001c98 <HAL_GetTick>
 8003e20:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e22:	e009      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e24:	f7fd ff38 	bl	8001c98 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d902      	bls.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	74fb      	strb	r3, [r7, #19]
        break;
 8003e36:	e005      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e38:	4b31      	ldr	r3, [pc, #196]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0ef      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003e44:	7cfb      	ldrb	r3, [r7, #19]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d15c      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e4a:	4b2c      	ldr	r3, [pc, #176]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e54:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d01f      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d019      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e68:	4b24      	ldr	r3, [pc, #144]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e74:	4b21      	ldr	r3, [pc, #132]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e7a:	4a20      	ldr	r2, [pc, #128]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e84:	4b1d      	ldr	r3, [pc, #116]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e94:	4a19      	ldr	r2, [pc, #100]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d016      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea6:	f7fd fef7 	bl	8001c98 <HAL_GetTick>
 8003eaa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eac:	e00b      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eae:	f7fd fef3 	bl	8001c98 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d902      	bls.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	74fb      	strb	r3, [r7, #19]
            break;
 8003ec4:	e006      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0ec      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003ed4:	7cfb      	ldrb	r3, [r7, #19]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10c      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eda:	4b08      	ldr	r3, [pc, #32]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eea:	4904      	ldr	r1, [pc, #16]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003ef2:	e009      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ef4:	7cfb      	ldrb	r3, [r7, #19]
 8003ef6:	74bb      	strb	r3, [r7, #18]
 8003ef8:	e006      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003efa:	bf00      	nop
 8003efc:	40021000 	.word	0x40021000
 8003f00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f04:	7cfb      	ldrb	r3, [r7, #19]
 8003f06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f08:	7c7b      	ldrb	r3, [r7, #17]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d105      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f0e:	4b9e      	ldr	r3, [pc, #632]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f12:	4a9d      	ldr	r2, [pc, #628]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f18:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f26:	4b98      	ldr	r3, [pc, #608]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f2c:	f023 0203 	bic.w	r2, r3, #3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f34:	4994      	ldr	r1, [pc, #592]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f48:	4b8f      	ldr	r3, [pc, #572]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4e:	f023 020c 	bic.w	r2, r3, #12
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f56:	498c      	ldr	r1, [pc, #560]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f6a:	4b87      	ldr	r3, [pc, #540]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f70:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f78:	4983      	ldr	r1, [pc, #524]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0308 	and.w	r3, r3, #8
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00a      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f8c:	4b7e      	ldr	r3, [pc, #504]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f92:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9a:	497b      	ldr	r1, [pc, #492]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0310 	and.w	r3, r3, #16
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fae:	4b76      	ldr	r3, [pc, #472]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fbc:	4972      	ldr	r1, [pc, #456]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0320 	and.w	r3, r3, #32
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fd0:	4b6d      	ldr	r3, [pc, #436]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fde:	496a      	ldr	r1, [pc, #424]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ff2:	4b65      	ldr	r3, [pc, #404]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004000:	4961      	ldr	r1, [pc, #388]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004014:	4b5c      	ldr	r3, [pc, #368]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004022:	4959      	ldr	r1, [pc, #356]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004036:	4b54      	ldr	r3, [pc, #336]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800403c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004044:	4950      	ldr	r1, [pc, #320]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004046:	4313      	orrs	r3, r2
 8004048:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00a      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004058:	4b4b      	ldr	r3, [pc, #300]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800405e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004066:	4948      	ldr	r1, [pc, #288]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004068:	4313      	orrs	r3, r2
 800406a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800407a:	4b43      	ldr	r3, [pc, #268]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004080:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004088:	493f      	ldr	r1, [pc, #252]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d028      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800409c:	4b3a      	ldr	r3, [pc, #232]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800409e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040aa:	4937      	ldr	r1, [pc, #220]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040ba:	d106      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040bc:	4b32      	ldr	r3, [pc, #200]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	4a31      	ldr	r2, [pc, #196]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040c6:	60d3      	str	r3, [r2, #12]
 80040c8:	e011      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040d2:	d10c      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3304      	adds	r3, #4
 80040d8:	2101      	movs	r1, #1
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fe36 	bl	8004d4c <RCCEx_PLLSAI1_Config>
 80040e0:	4603      	mov	r3, r0
 80040e2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80040e4:	7cfb      	ldrb	r3, [r7, #19]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80040ea:	7cfb      	ldrb	r3, [r7, #19]
 80040ec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d028      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040fa:	4b23      	ldr	r3, [pc, #140]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004100:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004108:	491f      	ldr	r1, [pc, #124]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004114:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004118:	d106      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800411a:	4b1b      	ldr	r3, [pc, #108]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	4a1a      	ldr	r2, [pc, #104]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004120:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004124:	60d3      	str	r3, [r2, #12]
 8004126:	e011      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800412c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004130:	d10c      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	3304      	adds	r3, #4
 8004136:	2101      	movs	r1, #1
 8004138:	4618      	mov	r0, r3
 800413a:	f000 fe07 	bl	8004d4c <RCCEx_PLLSAI1_Config>
 800413e:	4603      	mov	r3, r0
 8004140:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004142:	7cfb      	ldrb	r3, [r7, #19]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004148:	7cfb      	ldrb	r3, [r7, #19]
 800414a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d02b      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004158:	4b0b      	ldr	r3, [pc, #44]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800415e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004166:	4908      	ldr	r1, [pc, #32]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004172:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004176:	d109      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004178:	4b03      	ldr	r3, [pc, #12]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4a02      	ldr	r2, [pc, #8]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004182:	60d3      	str	r3, [r2, #12]
 8004184:	e014      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004186:	bf00      	nop
 8004188:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004190:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004194:	d10c      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	3304      	adds	r3, #4
 800419a:	2101      	movs	r1, #1
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fdd5 	bl	8004d4c <RCCEx_PLLSAI1_Config>
 80041a2:	4603      	mov	r3, r0
 80041a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041a6:	7cfb      	ldrb	r3, [r7, #19]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80041ac:	7cfb      	ldrb	r3, [r7, #19]
 80041ae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d02f      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041bc:	4b2b      	ldr	r3, [pc, #172]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041ca:	4928      	ldr	r1, [pc, #160]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041da:	d10d      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3304      	adds	r3, #4
 80041e0:	2102      	movs	r1, #2
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 fdb2 	bl	8004d4c <RCCEx_PLLSAI1_Config>
 80041e8:	4603      	mov	r3, r0
 80041ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041ec:	7cfb      	ldrb	r3, [r7, #19]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d014      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041f2:	7cfb      	ldrb	r3, [r7, #19]
 80041f4:	74bb      	strb	r3, [r7, #18]
 80041f6:	e011      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004200:	d10c      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3320      	adds	r3, #32
 8004206:	2102      	movs	r1, #2
 8004208:	4618      	mov	r0, r3
 800420a:	f000 fe93 	bl	8004f34 <RCCEx_PLLSAI2_Config>
 800420e:	4603      	mov	r3, r0
 8004210:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004212:	7cfb      	ldrb	r3, [r7, #19]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004218:	7cfb      	ldrb	r3, [r7, #19]
 800421a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004228:	4b10      	ldr	r3, [pc, #64]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800422a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800422e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004236:	490d      	ldr	r1, [pc, #52]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00b      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800424a:	4b08      	ldr	r3, [pc, #32]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800424c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004250:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800425a:	4904      	ldr	r1, [pc, #16]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800425c:	4313      	orrs	r3, r2
 800425e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004262:	7cbb      	ldrb	r3, [r7, #18]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40021000 	.word	0x40021000

08004270 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b088      	sub	sp, #32
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004282:	d13e      	bne.n	8004302 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004284:	4bb2      	ldr	r3, [pc, #712]	@ (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800428a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800428e:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004296:	d028      	beq.n	80042ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800429e:	f200 8542 	bhi.w	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042a8:	d005      	beq.n	80042b6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042b0:	d00e      	beq.n	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80042b2:	f000 bd38 	b.w	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80042b6:	4ba6      	ldr	r3, [pc, #664]	@ (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80042b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	f040 8532 	bne.w	8004d2a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 80042c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042ca:	61fb      	str	r3, [r7, #28]
      break;
 80042cc:	f000 bd2d 	b.w	8004d2a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80042d0:	4b9f      	ldr	r3, [pc, #636]	@ (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80042d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b02      	cmp	r3, #2
 80042dc:	f040 8527 	bne.w	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 80042e0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80042e4:	61fb      	str	r3, [r7, #28]
      break;
 80042e6:	f000 bd22 	b.w	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80042ea:	4b99      	ldr	r3, [pc, #612]	@ (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042f6:	f040 851c 	bne.w	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 80042fa:	4b96      	ldr	r3, [pc, #600]	@ (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80042fc:	61fb      	str	r3, [r7, #28]
      break;
 80042fe:	f000 bd18 	b.w	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004302:	4b93      	ldr	r3, [pc, #588]	@ (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f003 0303 	and.w	r3, r3, #3
 800430a:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	2b03      	cmp	r3, #3
 8004310:	d036      	beq.n	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	2b03      	cmp	r3, #3
 8004316:	d840      	bhi.n	800439a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d003      	beq.n	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2b02      	cmp	r3, #2
 8004322:	d020      	beq.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004324:	e039      	b.n	800439a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004326:	4b8a      	ldr	r3, [pc, #552]	@ (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b02      	cmp	r3, #2
 8004330:	d116      	bne.n	8004360 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004332:	4b87      	ldr	r3, [pc, #540]	@ (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	d005      	beq.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800433e:	4b84      	ldr	r3, [pc, #528]	@ (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	091b      	lsrs	r3, r3, #4
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	e005      	b.n	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800434a:	4b81      	ldr	r3, [pc, #516]	@ (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800434c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004350:	0a1b      	lsrs	r3, r3, #8
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	4a80      	ldr	r2, [pc, #512]	@ (8004558 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8004358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800435c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800435e:	e01f      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	61bb      	str	r3, [r7, #24]
      break;
 8004364:	e01c      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004366:	4b7a      	ldr	r3, [pc, #488]	@ (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800436e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004372:	d102      	bne.n	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8004374:	4b79      	ldr	r3, [pc, #484]	@ (800455c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004376:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004378:	e012      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	61bb      	str	r3, [r7, #24]
      break;
 800437e:	e00f      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004380:	4b73      	ldr	r3, [pc, #460]	@ (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004388:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800438c:	d102      	bne.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800438e:	4b74      	ldr	r3, [pc, #464]	@ (8004560 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004390:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004392:	e005      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	61bb      	str	r3, [r7, #24]
      break;
 8004398:	e002      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800439a:	2300      	movs	r3, #0
 800439c:	61bb      	str	r3, [r7, #24]
      break;
 800439e:	bf00      	nop
    }

    switch(PeriphClk)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80043a6:	f000 80dd 	beq.w	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80043b0:	f200 84c1 	bhi.w	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80043ba:	f000 80d3 	beq.w	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80043c4:	f200 84b7 	bhi.w	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043ce:	f000 835f 	beq.w	8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043d8:	f200 84ad 	bhi.w	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043e2:	f000 847e 	beq.w	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043ec:	f200 84a3 	bhi.w	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043f6:	f000 82cd 	beq.w	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004400:	f200 8499 	bhi.w	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800440a:	f000 80ab 	beq.w	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004414:	f200 848f 	bhi.w	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800441e:	f000 8090 	beq.w	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004428:	f200 8485 	bhi.w	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004432:	d07f      	beq.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800443a:	f200 847c 	bhi.w	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004444:	f000 8403 	beq.w	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800444e:	f200 8472 	bhi.w	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004458:	f000 83af 	beq.w	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004462:	f200 8468 	bhi.w	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800446c:	f000 8379 	beq.w	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004476:	f200 845e 	bhi.w	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b80      	cmp	r3, #128	@ 0x80
 800447e:	f000 8344 	beq.w	8004b0a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b80      	cmp	r3, #128	@ 0x80
 8004486:	f200 8456 	bhi.w	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b20      	cmp	r3, #32
 800448e:	d84b      	bhi.n	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 844f 	beq.w	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3b01      	subs	r3, #1
 800449c:	2b1f      	cmp	r3, #31
 800449e:	f200 844a 	bhi.w	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80044a2:	a201      	add	r2, pc, #4	@ (adr r2, 80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 80044a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a8:	08004691 	.word	0x08004691
 80044ac:	080046ff 	.word	0x080046ff
 80044b0:	08004d37 	.word	0x08004d37
 80044b4:	08004793 	.word	0x08004793
 80044b8:	08004d37 	.word	0x08004d37
 80044bc:	08004d37 	.word	0x08004d37
 80044c0:	08004d37 	.word	0x08004d37
 80044c4:	08004819 	.word	0x08004819
 80044c8:	08004d37 	.word	0x08004d37
 80044cc:	08004d37 	.word	0x08004d37
 80044d0:	08004d37 	.word	0x08004d37
 80044d4:	08004d37 	.word	0x08004d37
 80044d8:	08004d37 	.word	0x08004d37
 80044dc:	08004d37 	.word	0x08004d37
 80044e0:	08004d37 	.word	0x08004d37
 80044e4:	08004891 	.word	0x08004891
 80044e8:	08004d37 	.word	0x08004d37
 80044ec:	08004d37 	.word	0x08004d37
 80044f0:	08004d37 	.word	0x08004d37
 80044f4:	08004d37 	.word	0x08004d37
 80044f8:	08004d37 	.word	0x08004d37
 80044fc:	08004d37 	.word	0x08004d37
 8004500:	08004d37 	.word	0x08004d37
 8004504:	08004d37 	.word	0x08004d37
 8004508:	08004d37 	.word	0x08004d37
 800450c:	08004d37 	.word	0x08004d37
 8004510:	08004d37 	.word	0x08004d37
 8004514:	08004d37 	.word	0x08004d37
 8004518:	08004d37 	.word	0x08004d37
 800451c:	08004d37 	.word	0x08004d37
 8004520:	08004d37 	.word	0x08004d37
 8004524:	08004913 	.word	0x08004913
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b40      	cmp	r3, #64	@ 0x40
 800452c:	f000 82c1 	beq.w	8004ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004530:	f000 bc01 	b.w	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004534:	69b9      	ldr	r1, [r7, #24]
 8004536:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800453a:	f000 fdd9 	bl	80050f0 <RCCEx_GetSAIxPeriphCLKFreq>
 800453e:	61f8      	str	r0, [r7, #28]
      break;
 8004540:	e3fa      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8004542:	69b9      	ldr	r1, [r7, #24]
 8004544:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004548:	f000 fdd2 	bl	80050f0 <RCCEx_GetSAIxPeriphCLKFreq>
 800454c:	61f8      	str	r0, [r7, #28]
      break;
 800454e:	e3f3      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004550:	40021000 	.word	0x40021000
 8004554:	0003d090 	.word	0x0003d090
 8004558:	0800bbc0 	.word	0x0800bbc0
 800455c:	00f42400 	.word	0x00f42400
 8004560:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004564:	4ba9      	ldr	r3, [pc, #676]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800456a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800456e:	613b      	str	r3, [r7, #16]
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004576:	d00c      	beq.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800457e:	d87f      	bhi.n	8004680 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004586:	d04e      	beq.n	8004626 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800458e:	d01d      	beq.n	80045cc <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8004590:	e076      	b.n	8004680 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004592:	4b9e      	ldr	r3, [pc, #632]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b02      	cmp	r3, #2
 800459c:	d172      	bne.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800459e:	4b9b      	ldr	r3, [pc, #620]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0308 	and.w	r3, r3, #8
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d005      	beq.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 80045aa:	4b98      	ldr	r3, [pc, #608]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	091b      	lsrs	r3, r3, #4
 80045b0:	f003 030f 	and.w	r3, r3, #15
 80045b4:	e005      	b.n	80045c2 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 80045b6:	4b95      	ldr	r3, [pc, #596]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80045b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045bc:	0a1b      	lsrs	r3, r3, #8
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	4a93      	ldr	r2, [pc, #588]	@ (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80045c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045c8:	61fb      	str	r3, [r7, #28]
          break;
 80045ca:	e05b      	b.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80045cc:	4b8f      	ldr	r3, [pc, #572]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045d8:	d156      	bne.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80045da:	4b8c      	ldr	r3, [pc, #560]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045e6:	d14f      	bne.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80045e8:	4b88      	ldr	r3, [pc, #544]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	0a1b      	lsrs	r3, r3, #8
 80045ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045f2:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	fb03 f202 	mul.w	r2, r3, r2
 80045fc:	4b83      	ldr	r3, [pc, #524]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	091b      	lsrs	r3, r3, #4
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	3301      	adds	r3, #1
 8004608:	fbb2 f3f3 	udiv	r3, r2, r3
 800460c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800460e:	4b7f      	ldr	r3, [pc, #508]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	0d5b      	lsrs	r3, r3, #21
 8004614:	f003 0303 	and.w	r3, r3, #3
 8004618:	3301      	adds	r3, #1
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004622:	61fb      	str	r3, [r7, #28]
          break;
 8004624:	e030      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004626:	4b79      	ldr	r3, [pc, #484]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800462e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004632:	d12b      	bne.n	800468c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004634:	4b75      	ldr	r3, [pc, #468]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800463c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004640:	d124      	bne.n	800468c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004642:	4b72      	ldr	r3, [pc, #456]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	0a1b      	lsrs	r3, r3, #8
 8004648:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800464c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	fb03 f202 	mul.w	r2, r3, r2
 8004656:	4b6d      	ldr	r3, [pc, #436]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	091b      	lsrs	r3, r3, #4
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	3301      	adds	r3, #1
 8004662:	fbb2 f3f3 	udiv	r3, r2, r3
 8004666:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004668:	4b68      	ldr	r3, [pc, #416]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	0d5b      	lsrs	r3, r3, #21
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	3301      	adds	r3, #1
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	fbb2 f3f3 	udiv	r3, r2, r3
 800467c:	61fb      	str	r3, [r7, #28]
          break;
 800467e:	e005      	b.n	800468c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8004680:	bf00      	nop
 8004682:	e359      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004684:	bf00      	nop
 8004686:	e357      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004688:	bf00      	nop
 800468a:	e355      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800468c:	bf00      	nop
        break;
 800468e:	e353      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004690:	4b5e      	ldr	r3, [pc, #376]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004696:	f003 0303 	and.w	r3, r3, #3
 800469a:	613b      	str	r3, [r7, #16]
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	2b03      	cmp	r3, #3
 80046a0:	d827      	bhi.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 80046a2:	a201      	add	r2, pc, #4	@ (adr r2, 80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80046a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a8:	080046b9 	.word	0x080046b9
 80046ac:	080046c1 	.word	0x080046c1
 80046b0:	080046c9 	.word	0x080046c9
 80046b4:	080046dd 	.word	0x080046dd
          frequency = HAL_RCC_GetPCLK2Freq();
 80046b8:	f7ff fa48 	bl	8003b4c <HAL_RCC_GetPCLK2Freq>
 80046bc:	61f8      	str	r0, [r7, #28]
          break;
 80046be:	e01d      	b.n	80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 80046c0:	f7ff f996 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 80046c4:	61f8      	str	r0, [r7, #28]
          break;
 80046c6:	e019      	b.n	80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80046c8:	4b50      	ldr	r3, [pc, #320]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046d4:	d10f      	bne.n	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 80046d6:	4b4f      	ldr	r3, [pc, #316]	@ (8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80046d8:	61fb      	str	r3, [r7, #28]
          break;
 80046da:	e00c      	b.n	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80046dc:	4b4b      	ldr	r3, [pc, #300]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80046de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d107      	bne.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 80046ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046ee:	61fb      	str	r3, [r7, #28]
          break;
 80046f0:	e003      	b.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 80046f2:	bf00      	nop
 80046f4:	e320      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80046f6:	bf00      	nop
 80046f8:	e31e      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80046fa:	bf00      	nop
        break;
 80046fc:	e31c      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80046fe:	4b43      	ldr	r3, [pc, #268]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004704:	f003 030c 	and.w	r3, r3, #12
 8004708:	613b      	str	r3, [r7, #16]
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	2b0c      	cmp	r3, #12
 800470e:	d83a      	bhi.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8004710:	a201      	add	r2, pc, #4	@ (adr r2, 8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8004712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004716:	bf00      	nop
 8004718:	0800474d 	.word	0x0800474d
 800471c:	08004787 	.word	0x08004787
 8004720:	08004787 	.word	0x08004787
 8004724:	08004787 	.word	0x08004787
 8004728:	08004755 	.word	0x08004755
 800472c:	08004787 	.word	0x08004787
 8004730:	08004787 	.word	0x08004787
 8004734:	08004787 	.word	0x08004787
 8004738:	0800475d 	.word	0x0800475d
 800473c:	08004787 	.word	0x08004787
 8004740:	08004787 	.word	0x08004787
 8004744:	08004787 	.word	0x08004787
 8004748:	08004771 	.word	0x08004771
          frequency = HAL_RCC_GetPCLK1Freq();
 800474c:	f7ff f9e8 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 8004750:	61f8      	str	r0, [r7, #28]
          break;
 8004752:	e01d      	b.n	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8004754:	f7ff f94c 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 8004758:	61f8      	str	r0, [r7, #28]
          break;
 800475a:	e019      	b.n	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800475c:	4b2b      	ldr	r3, [pc, #172]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004764:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004768:	d10f      	bne.n	800478a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 800476a:	4b2a      	ldr	r3, [pc, #168]	@ (8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800476c:	61fb      	str	r3, [r7, #28]
          break;
 800476e:	e00c      	b.n	800478a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004770:	4b26      	ldr	r3, [pc, #152]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b02      	cmp	r3, #2
 800477c:	d107      	bne.n	800478e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 800477e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004782:	61fb      	str	r3, [r7, #28]
          break;
 8004784:	e003      	b.n	800478e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8004786:	bf00      	nop
 8004788:	e2d6      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800478a:	bf00      	nop
 800478c:	e2d4      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800478e:	bf00      	nop
        break;
 8004790:	e2d2      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004792:	4b1e      	ldr	r3, [pc, #120]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004798:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800479c:	613b      	str	r3, [r7, #16]
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	2b30      	cmp	r3, #48	@ 0x30
 80047a2:	d021      	beq.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	2b30      	cmp	r3, #48	@ 0x30
 80047a8:	d829      	bhi.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	d011      	beq.n	80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	2b20      	cmp	r3, #32
 80047b4:	d823      	bhi.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	2b10      	cmp	r3, #16
 80047c0:	d004      	beq.n	80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 80047c2:	e01c      	b.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80047c4:	f7ff f9ac 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 80047c8:	61f8      	str	r0, [r7, #28]
          break;
 80047ca:	e01d      	b.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 80047cc:	f7ff f910 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 80047d0:	61f8      	str	r0, [r7, #28]
          break;
 80047d2:	e019      	b.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80047d4:	4b0d      	ldr	r3, [pc, #52]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047e0:	d10f      	bne.n	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 80047e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80047e4:	61fb      	str	r3, [r7, #28]
          break;
 80047e6:	e00c      	b.n	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80047e8:	4b08      	ldr	r3, [pc, #32]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80047ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d107      	bne.n	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 80047f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047fa:	61fb      	str	r3, [r7, #28]
          break;
 80047fc:	e003      	b.n	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 80047fe:	bf00      	nop
 8004800:	e29a      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004802:	bf00      	nop
 8004804:	e298      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004806:	bf00      	nop
        break;
 8004808:	e296      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800480a:	bf00      	nop
 800480c:	40021000 	.word	0x40021000
 8004810:	0800bbc0 	.word	0x0800bbc0
 8004814:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004818:	4b9b      	ldr	r3, [pc, #620]	@ (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800481a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800481e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004822:	613b      	str	r3, [r7, #16]
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	2bc0      	cmp	r3, #192	@ 0xc0
 8004828:	d021      	beq.n	800486e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	2bc0      	cmp	r3, #192	@ 0xc0
 800482e:	d829      	bhi.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	2b80      	cmp	r3, #128	@ 0x80
 8004834:	d011      	beq.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	2b80      	cmp	r3, #128	@ 0x80
 800483a:	d823      	bhi.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	2b40      	cmp	r3, #64	@ 0x40
 8004846:	d004      	beq.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8004848:	e01c      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 800484a:	f7ff f969 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 800484e:	61f8      	str	r0, [r7, #28]
          break;
 8004850:	e01d      	b.n	800488e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8004852:	f7ff f8cd 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 8004856:	61f8      	str	r0, [r7, #28]
          break;
 8004858:	e019      	b.n	800488e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800485a:	4b8b      	ldr	r3, [pc, #556]	@ (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004862:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004866:	d10f      	bne.n	8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8004868:	4b88      	ldr	r3, [pc, #544]	@ (8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800486a:	61fb      	str	r3, [r7, #28]
          break;
 800486c:	e00c      	b.n	8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800486e:	4b86      	ldr	r3, [pc, #536]	@ (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b02      	cmp	r3, #2
 800487a:	d107      	bne.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 800487c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004880:	61fb      	str	r3, [r7, #28]
          break;
 8004882:	e003      	b.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8004884:	bf00      	nop
 8004886:	e257      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004888:	bf00      	nop
 800488a:	e255      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800488c:	bf00      	nop
        break;
 800488e:	e253      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004890:	4b7d      	ldr	r3, [pc, #500]	@ (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004896:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800489a:	613b      	str	r3, [r7, #16]
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048a2:	d025      	beq.n	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048aa:	d82c      	bhi.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048b2:	d013      	beq.n	80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048ba:	d824      	bhi.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d004      	beq.n	80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048c8:	d004      	beq.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 80048ca:	e01c      	b.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 80048cc:	f7ff f928 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 80048d0:	61f8      	str	r0, [r7, #28]
          break;
 80048d2:	e01d      	b.n	8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 80048d4:	f7ff f88c 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 80048d8:	61f8      	str	r0, [r7, #28]
          break;
 80048da:	e019      	b.n	8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80048dc:	4b6a      	ldr	r3, [pc, #424]	@ (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048e8:	d10f      	bne.n	800490a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 80048ea:	4b68      	ldr	r3, [pc, #416]	@ (8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80048ec:	61fb      	str	r3, [r7, #28]
          break;
 80048ee:	e00c      	b.n	800490a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80048f0:	4b65      	ldr	r3, [pc, #404]	@ (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80048f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d107      	bne.n	800490e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 80048fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004902:	61fb      	str	r3, [r7, #28]
          break;
 8004904:	e003      	b.n	800490e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8004906:	bf00      	nop
 8004908:	e216      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800490a:	bf00      	nop
 800490c:	e214      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800490e:	bf00      	nop
        break;
 8004910:	e212      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004912:	4b5d      	ldr	r3, [pc, #372]	@ (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004918:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800491c:	613b      	str	r3, [r7, #16]
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004924:	d025      	beq.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800492c:	d82c      	bhi.n	8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004934:	d013      	beq.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800493c:	d824      	bhi.n	8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d004      	beq.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800494a:	d004      	beq.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 800494c:	e01c      	b.n	8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 800494e:	f7ff f8e7 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 8004952:	61f8      	str	r0, [r7, #28]
          break;
 8004954:	e01d      	b.n	8004992 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8004956:	f7ff f84b 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 800495a:	61f8      	str	r0, [r7, #28]
          break;
 800495c:	e019      	b.n	8004992 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800495e:	4b4a      	ldr	r3, [pc, #296]	@ (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004966:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800496a:	d10f      	bne.n	800498c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 800496c:	4b47      	ldr	r3, [pc, #284]	@ (8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800496e:	61fb      	str	r3, [r7, #28]
          break;
 8004970:	e00c      	b.n	800498c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004972:	4b45      	ldr	r3, [pc, #276]	@ (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004974:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b02      	cmp	r3, #2
 800497e:	d107      	bne.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8004980:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004984:	61fb      	str	r3, [r7, #28]
          break;
 8004986:	e003      	b.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8004988:	bf00      	nop
 800498a:	e1d5      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800498c:	bf00      	nop
 800498e:	e1d3      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004990:	bf00      	nop
        break;
 8004992:	e1d1      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004994:	4b3c      	ldr	r3, [pc, #240]	@ (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800499a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800499e:	613b      	str	r3, [r7, #16]
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80049a6:	d00c      	beq.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80049ae:	d864      	bhi.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049b6:	d008      	beq.n	80049ca <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049be:	d030      	beq.n	8004a22 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 80049c0:	e05b      	b.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 80049c2:	f7ff f815 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 80049c6:	61f8      	str	r0, [r7, #28]
          break;
 80049c8:	e05c      	b.n	8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80049ca:	4b2f      	ldr	r3, [pc, #188]	@ (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049d6:	d152      	bne.n	8004a7e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 80049d8:	4b2b      	ldr	r3, [pc, #172]	@ (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d04c      	beq.n	8004a7e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80049e4:	4b28      	ldr	r3, [pc, #160]	@ (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	0a1b      	lsrs	r3, r3, #8
 80049ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049ee:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	fb03 f202 	mul.w	r2, r3, r2
 80049f8:	4b23      	ldr	r3, [pc, #140]	@ (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	091b      	lsrs	r3, r3, #4
 80049fe:	f003 0307 	and.w	r3, r3, #7
 8004a02:	3301      	adds	r3, #1
 8004a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a08:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	0e5b      	lsrs	r3, r3, #25
 8004a10:	f003 0303 	and.w	r3, r3, #3
 8004a14:	3301      	adds	r3, #1
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1e:	61fb      	str	r3, [r7, #28]
          break;
 8004a20:	e02d      	b.n	8004a7e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8004a22:	4b19      	ldr	r3, [pc, #100]	@ (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a2e:	d128      	bne.n	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8004a30:	4b15      	ldr	r3, [pc, #84]	@ (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d022      	beq.n	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004a3c:	4b12      	ldr	r3, [pc, #72]	@ (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	0a1b      	lsrs	r3, r3, #8
 8004a42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a46:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	fb03 f202 	mul.w	r2, r3, r2
 8004a50:	4b0d      	ldr	r3, [pc, #52]	@ (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	091b      	lsrs	r3, r3, #4
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a60:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8004a62:	4b09      	ldr	r3, [pc, #36]	@ (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	0e5b      	lsrs	r3, r3, #25
 8004a68:	f003 0303 	and.w	r3, r3, #3
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a76:	61fb      	str	r3, [r7, #28]
          break;
 8004a78:	e003      	b.n	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8004a7a:	bf00      	nop
 8004a7c:	e15c      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004a7e:	bf00      	nop
 8004a80:	e15a      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004a82:	bf00      	nop
        break;
 8004a84:	e158      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004a86:	bf00      	nop
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004a90:	4b9d      	ldr	r3, [pc, #628]	@ (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a9a:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d103      	bne.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004aa2:	f7ff f853 	bl	8003b4c <HAL_RCC_GetPCLK2Freq>
 8004aa6:	61f8      	str	r0, [r7, #28]
        break;
 8004aa8:	e146      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8004aaa:	f7fe ffa1 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 8004aae:	61f8      	str	r0, [r7, #28]
        break;
 8004ab0:	e142      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004ab2:	4b95      	ldr	r3, [pc, #596]	@ (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004abc:	613b      	str	r3, [r7, #16]
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ac4:	d013      	beq.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004acc:	d819      	bhi.n	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d004      	beq.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ada:	d004      	beq.n	8004ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8004adc:	e011      	b.n	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004ade:	f7ff f81f 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 8004ae2:	61f8      	str	r0, [r7, #28]
          break;
 8004ae4:	e010      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8004ae6:	f7fe ff83 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 8004aea:	61f8      	str	r0, [r7, #28]
          break;
 8004aec:	e00c      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004aee:	4b86      	ldr	r3, [pc, #536]	@ (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004af6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004afa:	d104      	bne.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8004afc:	4b83      	ldr	r3, [pc, #524]	@ (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004afe:	61fb      	str	r3, [r7, #28]
          break;
 8004b00:	e001      	b.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8004b02:	bf00      	nop
 8004b04:	e118      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004b06:	bf00      	nop
        break;
 8004b08:	e116      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004b0a:	4b7f      	ldr	r3, [pc, #508]	@ (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b10:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004b14:	613b      	str	r3, [r7, #16]
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b1c:	d013      	beq.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b24:	d819      	bhi.n	8004b5a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d004      	beq.n	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b32:	d004      	beq.n	8004b3e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8004b34:	e011      	b.n	8004b5a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b36:	f7fe fff3 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 8004b3a:	61f8      	str	r0, [r7, #28]
          break;
 8004b3c:	e010      	b.n	8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b3e:	f7fe ff57 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 8004b42:	61f8      	str	r0, [r7, #28]
          break;
 8004b44:	e00c      	b.n	8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b46:	4b70      	ldr	r3, [pc, #448]	@ (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b52:	d104      	bne.n	8004b5e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8004b54:	4b6d      	ldr	r3, [pc, #436]	@ (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004b56:	61fb      	str	r3, [r7, #28]
          break;
 8004b58:	e001      	b.n	8004b5e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8004b5a:	bf00      	nop
 8004b5c:	e0ec      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004b5e:	bf00      	nop
        break;
 8004b60:	e0ea      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004b62:	4b69      	ldr	r3, [pc, #420]	@ (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b6c:	613b      	str	r3, [r7, #16]
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b74:	d013      	beq.n	8004b9e <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b7c:	d819      	bhi.n	8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d004      	beq.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b8a:	d004      	beq.n	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8004b8c:	e011      	b.n	8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b8e:	f7fe ffc7 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 8004b92:	61f8      	str	r0, [r7, #28]
          break;
 8004b94:	e010      	b.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b96:	f7fe ff2b 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 8004b9a:	61f8      	str	r0, [r7, #28]
          break;
 8004b9c:	e00c      	b.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b9e:	4b5a      	ldr	r3, [pc, #360]	@ (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ba6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004baa:	d104      	bne.n	8004bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8004bac:	4b57      	ldr	r3, [pc, #348]	@ (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004bae:	61fb      	str	r3, [r7, #28]
          break;
 8004bb0:	e001      	b.n	8004bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8004bb2:	bf00      	nop
 8004bb4:	e0c0      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004bb6:	bf00      	nop
        break;
 8004bb8:	e0be      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004bba:	4b53      	ldr	r3, [pc, #332]	@ (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004bc4:	613b      	str	r3, [r7, #16]
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004bcc:	d02c      	beq.n	8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004bd4:	d833      	bhi.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004bdc:	d01a      	beq.n	8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004be4:	d82b      	bhi.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d004      	beq.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004bf2:	d004      	beq.n	8004bfe <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8004bf4:	e023      	b.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004bf6:	f7fe ff93 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 8004bfa:	61f8      	str	r0, [r7, #28]
          break;
 8004bfc:	e026      	b.n	8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004bfe:	4b42      	ldr	r3, [pc, #264]	@ (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d11a      	bne.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8004c0c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004c10:	61fb      	str	r3, [r7, #28]
          break;
 8004c12:	e016      	b.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c14:	4b3c      	ldr	r3, [pc, #240]	@ (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c20:	d111      	bne.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8004c22:	4b3a      	ldr	r3, [pc, #232]	@ (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004c24:	61fb      	str	r3, [r7, #28]
          break;
 8004c26:	e00e      	b.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004c28:	4b37      	ldr	r3, [pc, #220]	@ (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d109      	bne.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8004c36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c3a:	61fb      	str	r3, [r7, #28]
          break;
 8004c3c:	e005      	b.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8004c3e:	bf00      	nop
 8004c40:	e07a      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004c42:	bf00      	nop
 8004c44:	e078      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004c46:	bf00      	nop
 8004c48:	e076      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004c4a:	bf00      	nop
        break;
 8004c4c:	e074      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004c4e:	4b2e      	ldr	r3, [pc, #184]	@ (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c54:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004c58:	613b      	str	r3, [r7, #16]
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c60:	d02c      	beq.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c68:	d833      	bhi.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c70:	d01a      	beq.n	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c78:	d82b      	bhi.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d004      	beq.n	8004c8a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c86:	d004      	beq.n	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8004c88:	e023      	b.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c8a:	f7fe ff49 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 8004c8e:	61f8      	str	r0, [r7, #28]
          break;
 8004c90:	e026      	b.n	8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004c92:	4b1d      	ldr	r3, [pc, #116]	@ (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d11a      	bne.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8004ca0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004ca4:	61fb      	str	r3, [r7, #28]
          break;
 8004ca6:	e016      	b.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ca8:	4b17      	ldr	r3, [pc, #92]	@ (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cb4:	d111      	bne.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8004cb6:	4b15      	ldr	r3, [pc, #84]	@ (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004cb8:	61fb      	str	r3, [r7, #28]
          break;
 8004cba:	e00e      	b.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004cbc:	4b12      	ldr	r3, [pc, #72]	@ (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d109      	bne.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8004cca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cce:	61fb      	str	r3, [r7, #28]
          break;
 8004cd0:	e005      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8004cd2:	bf00      	nop
 8004cd4:	e030      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004cd6:	bf00      	nop
 8004cd8:	e02e      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004cda:	bf00      	nop
 8004cdc:	e02c      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004cde:	bf00      	nop
        break;
 8004ce0:	e02a      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8004ce2:	4b09      	ldr	r3, [pc, #36]	@ (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004cec:	613b      	str	r3, [r7, #16]
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d004      	beq.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cfa:	d009      	beq.n	8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8004cfc:	e012      	b.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004cfe:	f7fe ff0f 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 8004d02:	61f8      	str	r0, [r7, #28]
          break;
 8004d04:	e00e      	b.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8004d06:	bf00      	nop
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d10:	4b0c      	ldr	r3, [pc, #48]	@ (8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d1c:	d101      	bne.n	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8004d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004d20:	61fb      	str	r3, [r7, #28]
          break;
 8004d22:	bf00      	nop
        break;
 8004d24:	e008      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004d26:	bf00      	nop
 8004d28:	e006      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004d2a:	bf00      	nop
 8004d2c:	e004      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004d2e:	bf00      	nop
 8004d30:	e002      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004d32:	bf00      	nop
 8004d34:	e000      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004d36:	bf00      	nop
    }
  }

  return(frequency);
 8004d38:	69fb      	ldr	r3, [r7, #28]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3720      	adds	r7, #32
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	40021000 	.word	0x40021000
 8004d48:	00f42400 	.word	0x00f42400

08004d4c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d56:	2300      	movs	r3, #0
 8004d58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d5a:	4b75      	ldr	r3, [pc, #468]	@ (8004f30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d018      	beq.n	8004d98 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d66:	4b72      	ldr	r3, [pc, #456]	@ (8004f30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f003 0203 	and.w	r2, r3, #3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d10d      	bne.n	8004d92 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
       ||
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d009      	beq.n	8004d92 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004d7e:	4b6c      	ldr	r3, [pc, #432]	@ (8004f30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	091b      	lsrs	r3, r3, #4
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	1c5a      	adds	r2, r3, #1
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
       ||
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d047      	beq.n	8004e22 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	73fb      	strb	r3, [r7, #15]
 8004d96:	e044      	b.n	8004e22 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b03      	cmp	r3, #3
 8004d9e:	d018      	beq.n	8004dd2 <RCCEx_PLLSAI1_Config+0x86>
 8004da0:	2b03      	cmp	r3, #3
 8004da2:	d825      	bhi.n	8004df0 <RCCEx_PLLSAI1_Config+0xa4>
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d002      	beq.n	8004dae <RCCEx_PLLSAI1_Config+0x62>
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d009      	beq.n	8004dc0 <RCCEx_PLLSAI1_Config+0x74>
 8004dac:	e020      	b.n	8004df0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004dae:	4b60      	ldr	r3, [pc, #384]	@ (8004f30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d11d      	bne.n	8004df6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dbe:	e01a      	b.n	8004df6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004dc0:	4b5b      	ldr	r3, [pc, #364]	@ (8004f30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d116      	bne.n	8004dfa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dd0:	e013      	b.n	8004dfa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004dd2:	4b57      	ldr	r3, [pc, #348]	@ (8004f30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10f      	bne.n	8004dfe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004dde:	4b54      	ldr	r3, [pc, #336]	@ (8004f30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d109      	bne.n	8004dfe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004dee:	e006      	b.n	8004dfe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	73fb      	strb	r3, [r7, #15]
      break;
 8004df4:	e004      	b.n	8004e00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004df6:	bf00      	nop
 8004df8:	e002      	b.n	8004e00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004dfa:	bf00      	nop
 8004dfc:	e000      	b.n	8004e00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004dfe:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e00:	7bfb      	ldrb	r3, [r7, #15]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10d      	bne.n	8004e22 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e06:	4b4a      	ldr	r3, [pc, #296]	@ (8004f30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6819      	ldr	r1, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	3b01      	subs	r3, #1
 8004e18:	011b      	lsls	r3, r3, #4
 8004e1a:	430b      	orrs	r3, r1
 8004e1c:	4944      	ldr	r1, [pc, #272]	@ (8004f30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d17d      	bne.n	8004f24 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e28:	4b41      	ldr	r3, [pc, #260]	@ (8004f30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a40      	ldr	r2, [pc, #256]	@ (8004f30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e34:	f7fc ff30 	bl	8001c98 <HAL_GetTick>
 8004e38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e3a:	e009      	b.n	8004e50 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e3c:	f7fc ff2c 	bl	8001c98 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d902      	bls.n	8004e50 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	73fb      	strb	r3, [r7, #15]
        break;
 8004e4e:	e005      	b.n	8004e5c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e50:	4b37      	ldr	r3, [pc, #220]	@ (8004f30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1ef      	bne.n	8004e3c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e5c:	7bfb      	ldrb	r3, [r7, #15]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d160      	bne.n	8004f24 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d111      	bne.n	8004e8c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e68:	4b31      	ldr	r3, [pc, #196]	@ (8004f30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004e70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6892      	ldr	r2, [r2, #8]
 8004e78:	0211      	lsls	r1, r2, #8
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	68d2      	ldr	r2, [r2, #12]
 8004e7e:	0912      	lsrs	r2, r2, #4
 8004e80:	0452      	lsls	r2, r2, #17
 8004e82:	430a      	orrs	r2, r1
 8004e84:	492a      	ldr	r1, [pc, #168]	@ (8004f30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	610b      	str	r3, [r1, #16]
 8004e8a:	e027      	b.n	8004edc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d112      	bne.n	8004eb8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e92:	4b27      	ldr	r3, [pc, #156]	@ (8004f30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004e9a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6892      	ldr	r2, [r2, #8]
 8004ea2:	0211      	lsls	r1, r2, #8
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6912      	ldr	r2, [r2, #16]
 8004ea8:	0852      	lsrs	r2, r2, #1
 8004eaa:	3a01      	subs	r2, #1
 8004eac:	0552      	lsls	r2, r2, #21
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	491f      	ldr	r1, [pc, #124]	@ (8004f30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	610b      	str	r3, [r1, #16]
 8004eb6:	e011      	b.n	8004edc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8004f30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004ec0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6892      	ldr	r2, [r2, #8]
 8004ec8:	0211      	lsls	r1, r2, #8
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6952      	ldr	r2, [r2, #20]
 8004ece:	0852      	lsrs	r2, r2, #1
 8004ed0:	3a01      	subs	r2, #1
 8004ed2:	0652      	lsls	r2, r2, #25
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	4916      	ldr	r1, [pc, #88]	@ (8004f30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004edc:	4b14      	ldr	r3, [pc, #80]	@ (8004f30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a13      	ldr	r2, [pc, #76]	@ (8004f30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ee2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ee6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee8:	f7fc fed6 	bl	8001c98 <HAL_GetTick>
 8004eec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004eee:	e009      	b.n	8004f04 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ef0:	f7fc fed2 	bl	8001c98 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d902      	bls.n	8004f04 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	73fb      	strb	r3, [r7, #15]
          break;
 8004f02:	e005      	b.n	8004f10 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f04:	4b0a      	ldr	r3, [pc, #40]	@ (8004f30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0ef      	beq.n	8004ef0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004f10:	7bfb      	ldrb	r3, [r7, #15]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d106      	bne.n	8004f24 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f16:	4b06      	ldr	r3, [pc, #24]	@ (8004f30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f18:	691a      	ldr	r2, [r3, #16]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	4904      	ldr	r1, [pc, #16]	@ (8004f30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	40021000 	.word	0x40021000

08004f34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f42:	4b6a      	ldr	r3, [pc, #424]	@ (80050ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f003 0303 	and.w	r3, r3, #3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d018      	beq.n	8004f80 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004f4e:	4b67      	ldr	r3, [pc, #412]	@ (80050ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	f003 0203 	and.w	r2, r3, #3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d10d      	bne.n	8004f7a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
       ||
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d009      	beq.n	8004f7a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004f66:	4b61      	ldr	r3, [pc, #388]	@ (80050ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	091b      	lsrs	r3, r3, #4
 8004f6c:	f003 0307 	and.w	r3, r3, #7
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
       ||
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d047      	beq.n	800500a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	73fb      	strb	r3, [r7, #15]
 8004f7e:	e044      	b.n	800500a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b03      	cmp	r3, #3
 8004f86:	d018      	beq.n	8004fba <RCCEx_PLLSAI2_Config+0x86>
 8004f88:	2b03      	cmp	r3, #3
 8004f8a:	d825      	bhi.n	8004fd8 <RCCEx_PLLSAI2_Config+0xa4>
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d002      	beq.n	8004f96 <RCCEx_PLLSAI2_Config+0x62>
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d009      	beq.n	8004fa8 <RCCEx_PLLSAI2_Config+0x74>
 8004f94:	e020      	b.n	8004fd8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f96:	4b55      	ldr	r3, [pc, #340]	@ (80050ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d11d      	bne.n	8004fde <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fa6:	e01a      	b.n	8004fde <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fa8:	4b50      	ldr	r3, [pc, #320]	@ (80050ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d116      	bne.n	8004fe2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fb8:	e013      	b.n	8004fe2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fba:	4b4c      	ldr	r3, [pc, #304]	@ (80050ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10f      	bne.n	8004fe6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fc6:	4b49      	ldr	r3, [pc, #292]	@ (80050ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d109      	bne.n	8004fe6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fd6:	e006      	b.n	8004fe6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	73fb      	strb	r3, [r7, #15]
      break;
 8004fdc:	e004      	b.n	8004fe8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004fde:	bf00      	nop
 8004fe0:	e002      	b.n	8004fe8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004fe2:	bf00      	nop
 8004fe4:	e000      	b.n	8004fe8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004fe6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10d      	bne.n	800500a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004fee:	4b3f      	ldr	r3, [pc, #252]	@ (80050ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6819      	ldr	r1, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	3b01      	subs	r3, #1
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	430b      	orrs	r3, r1
 8005004:	4939      	ldr	r1, [pc, #228]	@ (80050ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005006:	4313      	orrs	r3, r2
 8005008:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800500a:	7bfb      	ldrb	r3, [r7, #15]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d167      	bne.n	80050e0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005010:	4b36      	ldr	r3, [pc, #216]	@ (80050ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a35      	ldr	r2, [pc, #212]	@ (80050ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005016:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800501a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800501c:	f7fc fe3c 	bl	8001c98 <HAL_GetTick>
 8005020:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005022:	e009      	b.n	8005038 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005024:	f7fc fe38 	bl	8001c98 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d902      	bls.n	8005038 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	73fb      	strb	r3, [r7, #15]
        break;
 8005036:	e005      	b.n	8005044 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005038:	4b2c      	ldr	r3, [pc, #176]	@ (80050ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1ef      	bne.n	8005024 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005044:	7bfb      	ldrb	r3, [r7, #15]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d14a      	bne.n	80050e0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d111      	bne.n	8005074 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005050:	4b26      	ldr	r3, [pc, #152]	@ (80050ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005058:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	6892      	ldr	r2, [r2, #8]
 8005060:	0211      	lsls	r1, r2, #8
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	68d2      	ldr	r2, [r2, #12]
 8005066:	0912      	lsrs	r2, r2, #4
 8005068:	0452      	lsls	r2, r2, #17
 800506a:	430a      	orrs	r2, r1
 800506c:	491f      	ldr	r1, [pc, #124]	@ (80050ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800506e:	4313      	orrs	r3, r2
 8005070:	614b      	str	r3, [r1, #20]
 8005072:	e011      	b.n	8005098 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005074:	4b1d      	ldr	r3, [pc, #116]	@ (80050ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800507c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6892      	ldr	r2, [r2, #8]
 8005084:	0211      	lsls	r1, r2, #8
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	6912      	ldr	r2, [r2, #16]
 800508a:	0852      	lsrs	r2, r2, #1
 800508c:	3a01      	subs	r2, #1
 800508e:	0652      	lsls	r2, r2, #25
 8005090:	430a      	orrs	r2, r1
 8005092:	4916      	ldr	r1, [pc, #88]	@ (80050ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005094:	4313      	orrs	r3, r2
 8005096:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005098:	4b14      	ldr	r3, [pc, #80]	@ (80050ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a13      	ldr	r2, [pc, #76]	@ (80050ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800509e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a4:	f7fc fdf8 	bl	8001c98 <HAL_GetTick>
 80050a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050aa:	e009      	b.n	80050c0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050ac:	f7fc fdf4 	bl	8001c98 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d902      	bls.n	80050c0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	73fb      	strb	r3, [r7, #15]
          break;
 80050be:	e005      	b.n	80050cc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050c0:	4b0a      	ldr	r3, [pc, #40]	@ (80050ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0ef      	beq.n	80050ac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80050cc:	7bfb      	ldrb	r3, [r7, #15]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d106      	bne.n	80050e0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80050d2:	4b06      	ldr	r3, [pc, #24]	@ (80050ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80050d4:	695a      	ldr	r2, [r3, #20]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	4904      	ldr	r1, [pc, #16]	@ (80050ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80050e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	40021000 	.word	0x40021000

080050f0 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b089      	sub	sp, #36	@ 0x24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80050fe:	2300      	movs	r3, #0
 8005100:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8005102:	2300      	movs	r3, #0
 8005104:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800510c:	d10c      	bne.n	8005128 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800510e:	4b6e      	ldr	r3, [pc, #440]	@ (80052c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005114:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005118:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005120:	d112      	bne.n	8005148 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005122:	4b6a      	ldr	r3, [pc, #424]	@ (80052cc <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8005124:	61fb      	str	r3, [r7, #28]
 8005126:	e00f      	b.n	8005148 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800512e:	d10b      	bne.n	8005148 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005130:	4b65      	ldr	r3, [pc, #404]	@ (80052c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005136:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800513a:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005142:	d101      	bne.n	8005148 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8005144:	4b61      	ldr	r3, [pc, #388]	@ (80052cc <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8005146:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	2b00      	cmp	r3, #0
 800514c:	f040 80b4 	bne.w	80052b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800515a:	d003      	beq.n	8005164 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005162:	d135      	bne.n	80051d0 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005164:	4b58      	ldr	r3, [pc, #352]	@ (80052c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800516c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005170:	f040 80a1 	bne.w	80052b6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8005174:	4b54      	ldr	r3, [pc, #336]	@ (80052c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 809a 	beq.w	80052b6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005182:	4b51      	ldr	r3, [pc, #324]	@ (80052c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	091b      	lsrs	r3, r3, #4
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	3301      	adds	r3, #1
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	fbb2 f3f3 	udiv	r3, r2, r3
 8005194:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005196:	4b4c      	ldr	r3, [pc, #304]	@ (80052c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	0a1b      	lsrs	r3, r3, #8
 800519c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051a0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10a      	bne.n	80051be <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80051a8:	4b47      	ldr	r3, [pc, #284]	@ (80052c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d002      	beq.n	80051ba <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 80051b4:	2311      	movs	r3, #17
 80051b6:	617b      	str	r3, [r7, #20]
 80051b8:	e001      	b.n	80051be <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 80051ba:	2307      	movs	r3, #7
 80051bc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	fb03 f202 	mul.w	r2, r3, r2
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051cc:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80051ce:	e072      	b.n	80052b6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d133      	bne.n	800523e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80051d6:	4b3c      	ldr	r3, [pc, #240]	@ (80052c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051e2:	d169      	bne.n	80052b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80051e4:	4b38      	ldr	r3, [pc, #224]	@ (80052c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d063      	beq.n	80052b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80051f0:	4b35      	ldr	r3, [pc, #212]	@ (80052c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	091b      	lsrs	r3, r3, #4
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	3301      	adds	r3, #1
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005202:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005204:	4b30      	ldr	r3, [pc, #192]	@ (80052c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	0a1b      	lsrs	r3, r3, #8
 800520a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800520e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10a      	bne.n	800522c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8005216:	4b2c      	ldr	r3, [pc, #176]	@ (80052c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8005222:	2311      	movs	r3, #17
 8005224:	617b      	str	r3, [r7, #20]
 8005226:	e001      	b.n	800522c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8005228:	2307      	movs	r3, #7
 800522a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	fb03 f202 	mul.w	r2, r3, r2
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	fbb2 f3f3 	udiv	r3, r2, r3
 800523a:	61fb      	str	r3, [r7, #28]
 800523c:	e03c      	b.n	80052b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005244:	d003      	beq.n	800524e <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800524c:	d134      	bne.n	80052b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800524e:	4b1e      	ldr	r3, [pc, #120]	@ (80052c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005256:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800525a:	d12d      	bne.n	80052b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800525c:	4b1a      	ldr	r3, [pc, #104]	@ (80052c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d027      	beq.n	80052b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005268:	4b17      	ldr	r3, [pc, #92]	@ (80052c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	091b      	lsrs	r3, r3, #4
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	3301      	adds	r3, #1
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	fbb2 f3f3 	udiv	r3, r2, r3
 800527a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800527c:	4b12      	ldr	r3, [pc, #72]	@ (80052c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	0a1b      	lsrs	r3, r3, #8
 8005282:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005286:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10a      	bne.n	80052a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800528e:	4b0e      	ldr	r3, [pc, #56]	@ (80052c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d002      	beq.n	80052a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 800529a:	2311      	movs	r3, #17
 800529c:	617b      	str	r3, [r7, #20]
 800529e:	e001      	b.n	80052a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 80052a0:	2307      	movs	r3, #7
 80052a2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	fb03 f202 	mul.w	r2, r3, r2
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b2:	61fb      	str	r3, [r7, #28]
 80052b4:	e000      	b.n	80052b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80052b6:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80052b8:	69fb      	ldr	r3, [r7, #28]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3724      	adds	r7, #36	@ 0x24
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	40021000 	.word	0x40021000
 80052cc:	001fff68 	.word	0x001fff68

080052d0 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
 80052dc:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d904      	bls.n	80052ee <HAL_SAI_InitProtocol+0x1e>
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	3b03      	subs	r3, #3
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d812      	bhi.n	8005312 <HAL_SAI_InitProtocol+0x42>
 80052ec:	e008      	b.n	8005300 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	68b9      	ldr	r1, [r7, #8]
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f000 fba3 	bl	8005a40 <SAI_InitI2S>
 80052fa:	4603      	mov	r3, r0
 80052fc:	75fb      	strb	r3, [r7, #23]
      break;
 80052fe:	e00b      	b.n	8005318 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	68b9      	ldr	r1, [r7, #8]
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f000 fc4c 	bl	8005ba4 <SAI_InitPCM>
 800530c:	4603      	mov	r3, r0
 800530e:	75fb      	strb	r3, [r7, #23]
      break;
 8005310:	e002      	b.n	8005318 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	75fb      	strb	r3, [r7, #23]
      break;
 8005316:	bf00      	nop
  }

  if (status == HAL_OK)
 8005318:	7dfb      	ldrb	r3, [r7, #23]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d104      	bne.n	8005328 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 f808 	bl	8005334 <HAL_SAI_Init>
 8005324:	4603      	mov	r3, r0
 8005326:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005328:	7dfb      	ldrb	r3, [r7, #23]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3718      	adds	r7, #24
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b088      	sub	sp, #32
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e155      	b.n	80055f2 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d106      	bne.n	8005360 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7fb fcc6 	bl	8000cec <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 fca1 	bl	8005ca8 <SAI_Disable>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e140      	b.n	80055f2 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	2b02      	cmp	r3, #2
 800537e:	d00c      	beq.n	800539a <HAL_SAI_Init+0x66>
 8005380:	2b02      	cmp	r3, #2
 8005382:	d80d      	bhi.n	80053a0 <HAL_SAI_Init+0x6c>
 8005384:	2b00      	cmp	r3, #0
 8005386:	d002      	beq.n	800538e <HAL_SAI_Init+0x5a>
 8005388:	2b01      	cmp	r3, #1
 800538a:	d003      	beq.n	8005394 <HAL_SAI_Init+0x60>
 800538c:	e008      	b.n	80053a0 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800538e:	2300      	movs	r3, #0
 8005390:	61fb      	str	r3, [r7, #28]
      break;
 8005392:	e008      	b.n	80053a6 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005394:	2310      	movs	r3, #16
 8005396:	61fb      	str	r3, [r7, #28]
      break;
 8005398:	e005      	b.n	80053a6 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800539a:	2320      	movs	r3, #32
 800539c:	61fb      	str	r3, [r7, #28]
      break;
 800539e:	e002      	b.n	80053a6 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 80053a0:	2300      	movs	r3, #0
 80053a2:	61fb      	str	r3, [r7, #28]
      break;
 80053a4:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	2b03      	cmp	r3, #3
 80053ac:	d81d      	bhi.n	80053ea <HAL_SAI_Init+0xb6>
 80053ae:	a201      	add	r2, pc, #4	@ (adr r2, 80053b4 <HAL_SAI_Init+0x80>)
 80053b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b4:	080053c5 	.word	0x080053c5
 80053b8:	080053cb 	.word	0x080053cb
 80053bc:	080053d3 	.word	0x080053d3
 80053c0:	080053db 	.word	0x080053db
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80053c4:	2300      	movs	r3, #0
 80053c6:	617b      	str	r3, [r7, #20]
      break;
 80053c8:	e012      	b.n	80053f0 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80053ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053ce:	617b      	str	r3, [r7, #20]
      break;
 80053d0:	e00e      	b.n	80053f0 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80053d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80053d6:	617b      	str	r3, [r7, #20]
      break;
 80053d8:	e00a      	b.n	80053f0 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80053da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80053de:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	f043 0301 	orr.w	r3, r3, #1
 80053e6:	61fb      	str	r3, [r7, #28]
      break;
 80053e8:	e002      	b.n	80053f0 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 80053ea:	2300      	movs	r3, #0
 80053ec:	617b      	str	r3, [r7, #20]
      break;
 80053ee:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a81      	ldr	r2, [pc, #516]	@ (80055fc <HAL_SAI_Init+0x2c8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d004      	beq.n	8005404 <HAL_SAI_Init+0xd0>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a80      	ldr	r2, [pc, #512]	@ (8005600 <HAL_SAI_Init+0x2cc>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d103      	bne.n	800540c <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8005404:	4a7f      	ldr	r2, [pc, #508]	@ (8005604 <HAL_SAI_Init+0x2d0>)
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	e002      	b.n	8005412 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800540c:	4a7e      	ldr	r2, [pc, #504]	@ (8005608 <HAL_SAI_Init+0x2d4>)
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d041      	beq.n	800549e <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a77      	ldr	r2, [pc, #476]	@ (80055fc <HAL_SAI_Init+0x2c8>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d004      	beq.n	800542e <HAL_SAI_Init+0xfa>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a75      	ldr	r2, [pc, #468]	@ (8005600 <HAL_SAI_Init+0x2cc>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d105      	bne.n	800543a <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800542e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005432:	f7fe ff1d 	bl	8004270 <HAL_RCCEx_GetPeriphCLKFreq>
 8005436:	6138      	str	r0, [r7, #16]
 8005438:	e004      	b.n	8005444 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800543a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800543e:	f7fe ff17 	bl	8004270 <HAL_RCCEx_GetPeriphCLKFreq>
 8005442:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	4613      	mov	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	461a      	mov	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	69db      	ldr	r3, [r3, #28]
 8005454:	025b      	lsls	r3, r3, #9
 8005456:	fbb2 f3f3 	udiv	r3, r2, r3
 800545a:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4a6b      	ldr	r2, [pc, #428]	@ (800560c <HAL_SAI_Init+0x2d8>)
 8005460:	fba2 2303 	umull	r2, r3, r2, r3
 8005464:	08da      	lsrs	r2, r3, #3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800546a:	68f9      	ldr	r1, [r7, #12]
 800546c:	4b67      	ldr	r3, [pc, #412]	@ (800560c <HAL_SAI_Init+0x2d8>)
 800546e:	fba3 2301 	umull	r2, r3, r3, r1
 8005472:	08da      	lsrs	r2, r3, #3
 8005474:	4613      	mov	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	005b      	lsls	r3, r3, #1
 800547c:	1aca      	subs	r2, r1, r3
 800547e:	2a08      	cmp	r2, #8
 8005480:	d904      	bls.n	800548c <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	1c5a      	adds	r2, r3, #1
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005490:	2b04      	cmp	r3, #4
 8005492:	d104      	bne.n	800549e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	085a      	lsrs	r2, r3, #1
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_SAI_Init+0x17a>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d109      	bne.n	80054c2 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d101      	bne.n	80054ba <HAL_SAI_Init+0x186>
 80054b6:	2300      	movs	r3, #0
 80054b8:	e001      	b.n	80054be <HAL_SAI_Init+0x18a>
 80054ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80054be:	61bb      	str	r3, [r7, #24]
 80054c0:	e008      	b.n	80054d4 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d102      	bne.n	80054d0 <HAL_SAI_Init+0x19c>
 80054ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80054ce:	e000      	b.n	80054d2 <HAL_SAI_Init+0x19e>
 80054d0:	2300      	movs	r3, #0
 80054d2:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6819      	ldr	r1, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	4b4c      	ldr	r3, [pc, #304]	@ (8005610 <HAL_SAI_Init+0x2dc>)
 80054e0:	400b      	ands	r3, r1
 80054e2:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6819      	ldr	r1, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80054f8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054fe:	431a      	orrs	r2, r3
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 800550c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005518:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	051b      	lsls	r3, r3, #20
 8005520:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	6812      	ldr	r2, [r2, #0]
 8005534:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005538:	f023 030f 	bic.w	r3, r3, #15
 800553c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6859      	ldr	r1, [r3, #4]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	699a      	ldr	r2, [r3, #24]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800554c:	431a      	orrs	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005552:	431a      	orrs	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	430a      	orrs	r2, r1
 800555a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6899      	ldr	r1, [r3, #8]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	4b2b      	ldr	r3, [pc, #172]	@ (8005614 <HAL_SAI_Init+0x2e0>)
 8005568:	400b      	ands	r3, r1
 800556a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6899      	ldr	r1, [r3, #8]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005576:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800557c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8005582:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8005588:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800558e:	3b01      	subs	r3, #1
 8005590:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005592:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68d9      	ldr	r1, [r3, #12]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80055aa:	400b      	ands	r3, r1
 80055ac:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68d9      	ldr	r1, [r3, #12]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055bc:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055c2:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80055c4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ca:	3b01      	subs	r3, #1
 80055cc:	021b      	lsls	r3, r3, #8
 80055ce:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3720      	adds	r7, #32
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	40015404 	.word	0x40015404
 8005600:	40015424 	.word	0x40015424
 8005604:	40015400 	.word	0x40015400
 8005608:	40015800 	.word	0x40015800
 800560c:	cccccccd 	.word	0xcccccccd
 8005610:	ff05c010 	.word	0xff05c010
 8005614:	fff88000 	.word	0xfff88000

08005618 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005620:	2300      	movs	r3, #0
 8005622:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800562a:	2b01      	cmp	r3, #1
 800562c:	d101      	bne.n	8005632 <HAL_SAI_Abort+0x1a>
 800562e:	2302      	movs	r3, #2
 8005630:	e053      	b.n	80056da <HAL_SAI_Abort+0xc2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 fb34 	bl	8005ca8 <SAI_Disable>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005654:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005658:	d125      	bne.n	80056a6 <HAL_SAI_Abort+0x8e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005668:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b12      	cmp	r3, #18
 8005674:	d108      	bne.n	8005688 <HAL_SAI_Abort+0x70>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800567a:	2b00      	cmp	r3, #0
 800567c:	d004      	beq.n	8005688 <HAL_SAI_Abort+0x70>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005682:	4618      	mov	r0, r3
 8005684:	f7fc fcae 	bl	8001fe4 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b22      	cmp	r3, #34	@ 0x22
 8005692:	d108      	bne.n	80056a6 <HAL_SAI_Abort+0x8e>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005698:	2b00      	cmp	r3, #0
 800569a:	d004      	beq.n	80056a6 <HAL_SAI_Abort+0x8e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7fc fc9f 	bl	8001fe4 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2200      	movs	r2, #0
 80056ac:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80056b6:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f042 0208 	orr.w	r2, r2, #8
 80056c6:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
	...

080056e4 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 8192 	beq.w	8005a1e <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f003 0308 	and.w	r3, r3, #8
 8005718:	2b00      	cmp	r3, #0
 800571a:	d009      	beq.n	8005730 <HAL_SAI_IRQHandler+0x4c>
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	f003 0308 	and.w	r3, r3, #8
 8005722:	2b00      	cmp	r3, #0
 8005724:	d004      	beq.n	8005730 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	4798      	blx	r3
 800572e:	e176      	b.n	8005a1e <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d01e      	beq.n	8005778 <HAL_SAI_IRQHandler+0x94>
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b00      	cmp	r3, #0
 8005742:	d019      	beq.n	8005778 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2201      	movs	r2, #1
 800574a:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b22      	cmp	r3, #34	@ 0x22
 8005756:	d101      	bne.n	800575c <HAL_SAI_IRQHandler+0x78>
 8005758:	2301      	movs	r3, #1
 800575a:	e000      	b.n	800575e <HAL_SAI_IRQHandler+0x7a>
 800575c:	2302      	movs	r3, #2
 800575e:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	431a      	orrs	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 f95b 	bl	8005a2c <HAL_SAI_ErrorCallback>
 8005776:	e152      	b.n	8005a1e <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d011      	beq.n	80057a6 <HAL_SAI_IRQHandler+0xc2>
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00c      	beq.n	80057a6 <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2202      	movs	r2, #2
 8005792:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 8140 	beq.w	8005a1e <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057a2:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 80057a4:	e13b      	b.n	8005a1e <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f003 0320 	and.w	r3, r3, #32
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d055      	beq.n	800585c <HAL_SAI_IRQHandler+0x178>
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f003 0320 	and.w	r3, r3, #32
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d050      	beq.n	800585c <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2220      	movs	r2, #32
 80057c0:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057c8:	f043 0204 	orr.w	r2, r3, #4
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d038      	beq.n	800584e <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d016      	beq.n	8005812 <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057e8:	4a8f      	ldr	r2, [pc, #572]	@ (8005a28 <HAL_SAI_IRQHandler+0x344>)
 80057ea:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7fc fc35 	bl	8002060 <HAL_DMA_Abort_IT>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00a      	beq.n	8005812 <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005802:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f90d 	bl	8005a2c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005816:	2b00      	cmp	r3, #0
 8005818:	f000 80fc 	beq.w	8005a14 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005820:	4a81      	ldr	r2, [pc, #516]	@ (8005a28 <HAL_SAI_IRQHandler+0x344>)
 8005822:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005828:	4618      	mov	r0, r3
 800582a:	f7fc fc19 	bl	8002060 <HAL_DMA_Abort_IT>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 80ef 	beq.w	8005a14 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800583c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f8f0 	bl	8005a2c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800584c:	e0e2      	b.n	8005a14 <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7ff fee2 	bl	8005618 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 f8e9 	bl	8005a2c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800585a:	e0db      	b.n	8005a14 <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005862:	2b00      	cmp	r3, #0
 8005864:	d055      	beq.n	8005912 <HAL_SAI_IRQHandler+0x22e>
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800586c:	2b00      	cmp	r3, #0
 800586e:	d050      	beq.n	8005912 <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2240      	movs	r2, #64	@ 0x40
 8005876:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800587e:	f043 0208 	orr.w	r2, r3, #8
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d038      	beq.n	8005904 <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005896:	2b00      	cmp	r3, #0
 8005898:	d016      	beq.n	80058c8 <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800589e:	4a62      	ldr	r2, [pc, #392]	@ (8005a28 <HAL_SAI_IRQHandler+0x344>)
 80058a0:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fc fbda 	bl	8002060 <HAL_DMA_Abort_IT>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f8b2 	bl	8005a2c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 80a3 	beq.w	8005a18 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058d6:	4a54      	ldr	r2, [pc, #336]	@ (8005a28 <HAL_SAI_IRQHandler+0x344>)
 80058d8:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fc fbbe 	bl	8002060 <HAL_DMA_Abort_IT>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 8096 	beq.w	8005a18 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058f2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f895 	bl	8005a2c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005902:	e089      	b.n	8005a18 <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7ff fe87 	bl	8005618 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f88e 	bl	8005a2c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005910:	e082      	b.n	8005a18 <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b00      	cmp	r3, #0
 800591a:	d061      	beq.n	80059e0 <HAL_SAI_IRQHandler+0x2fc>
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f003 0304 	and.w	r3, r3, #4
 8005922:	2b00      	cmp	r3, #0
 8005924:	d05c      	beq.n	80059e0 <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2204      	movs	r2, #4
 800592c:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005934:	f043 0220 	orr.w	r2, r3, #32
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d036      	beq.n	80059b6 <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800594c:	2b00      	cmp	r3, #0
 800594e:	d016      	beq.n	800597e <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005954:	4a34      	ldr	r2, [pc, #208]	@ (8005a28 <HAL_SAI_IRQHandler+0x344>)
 8005956:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800595c:	4618      	mov	r0, r3
 800595e:	f7fc fb7f 	bl	8002060 <HAL_DMA_Abort_IT>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00a      	beq.n	800597e <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800596e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f857 	bl	8005a2c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005982:	2b00      	cmp	r3, #0
 8005984:	d04a      	beq.n	8005a1c <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800598a:	4a27      	ldr	r2, [pc, #156]	@ (8005a28 <HAL_SAI_IRQHandler+0x344>)
 800598c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005992:	4618      	mov	r0, r3
 8005994:	f7fc fb64 	bl	8002060 <HAL_DMA_Abort_IT>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d03e      	beq.n	8005a1c <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059a4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f83c 	bl	8005a2c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80059b4:	e032      	b.n	8005a1c <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2200      	movs	r2, #0
 80059bc:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80059c6:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 f827 	bl	8005a2c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80059de:	e01d      	b.n	8005a1c <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	f003 0310 	and.w	r3, r3, #16
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d019      	beq.n	8005a1e <HAL_SAI_IRQHandler+0x33a>
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	f003 0310 	and.w	r3, r3, #16
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d014      	beq.n	8005a1e <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2210      	movs	r2, #16
 80059fa:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a02:	f043 0210 	orr.w	r2, r3, #16
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 f80d 	bl	8005a2c <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8005a12:	e004      	b.n	8005a1e <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005a14:	bf00      	nop
 8005a16:	e002      	b.n	8005a1e <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005a18:	bf00      	nop
 8005a1a:	e000      	b.n	8005a1e <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005a1c:	bf00      	nop
}
 8005a1e:	bf00      	nop
 8005a20:	3718      	adds	r7, #24
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	08005d1d 	.word	0x08005d1d

08005a2c <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
 8005a4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <SAI_InitI2S+0x2e>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d103      	bne.n	8005a76 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005a74:	e002      	b.n	8005a7c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005a82:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005a8a:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e077      	b.n	8005b96 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d107      	bne.n	8005abc <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005ab8:	651a      	str	r2, [r3, #80]	@ 0x50
 8005aba:	e006      	b.n	8005aca <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005ac2:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b03      	cmp	r3, #3
 8005ace:	d84f      	bhi.n	8005b70 <SAI_InitI2S+0x130>
 8005ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ad8 <SAI_InitI2S+0x98>)
 8005ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad6:	bf00      	nop
 8005ad8:	08005ae9 	.word	0x08005ae9
 8005adc:	08005b0b 	.word	0x08005b0b
 8005ae0:	08005b2d 	.word	0x08005b2d
 8005ae4:	08005b4f 	.word	0x08005b4f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2280      	movs	r2, #128	@ 0x80
 8005aec:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	085b      	lsrs	r3, r3, #1
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	085b      	lsrs	r3, r3, #1
 8005afc:	011a      	lsls	r2, r3, #4
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2240      	movs	r2, #64	@ 0x40
 8005b06:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005b08:	e035      	b.n	8005b76 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2280      	movs	r2, #128	@ 0x80
 8005b0e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	085b      	lsrs	r3, r3, #1
 8005b14:	019a      	lsls	r2, r3, #6
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	085b      	lsrs	r3, r3, #1
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2280      	movs	r2, #128	@ 0x80
 8005b28:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005b2a:	e024      	b.n	8005b76 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	22c0      	movs	r2, #192	@ 0xc0
 8005b30:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	085b      	lsrs	r3, r3, #1
 8005b36:	019a      	lsls	r2, r3, #6
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	085b      	lsrs	r3, r3, #1
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2280      	movs	r2, #128	@ 0x80
 8005b4a:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005b4c:	e013      	b.n	8005b76 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	22e0      	movs	r2, #224	@ 0xe0
 8005b52:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	085b      	lsrs	r3, r3, #1
 8005b58:	019a      	lsls	r2, r3, #6
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	085b      	lsrs	r3, r3, #1
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2280      	movs	r2, #128	@ 0x80
 8005b6c:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005b6e:	e002      	b.n	8005b76 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	75fb      	strb	r3, [r7, #23]
      break;
 8005b74:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d10b      	bne.n	8005b94 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d102      	bne.n	8005b88 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2210      	movs	r2, #16
 8005b86:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d102      	bne.n	8005b94 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2208      	movs	r2, #8
 8005b92:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 8005b94:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	371c      	adds	r7, #28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop

08005ba4 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
 8005bb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <SAI_InitPCM+0x2e>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d103      	bne.n	8005bda <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005bd8:	e002      	b.n	8005be0 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005bec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005bf4:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005c08:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d103      	bne.n	8005c18 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2201      	movs	r2, #1
 8005c14:	645a      	str	r2, [r3, #68]	@ 0x44
 8005c16:	e002      	b.n	8005c1e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	220d      	movs	r2, #13
 8005c1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b03      	cmp	r3, #3
 8005c22:	d837      	bhi.n	8005c94 <SAI_InitPCM+0xf0>
 8005c24:	a201      	add	r2, pc, #4	@ (adr r2, 8005c2c <SAI_InitPCM+0x88>)
 8005c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2a:	bf00      	nop
 8005c2c:	08005c3d 	.word	0x08005c3d
 8005c30:	08005c53 	.word	0x08005c53
 8005c34:	08005c69 	.word	0x08005c69
 8005c38:	08005c7f 	.word	0x08005c7f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2280      	movs	r2, #128	@ 0x80
 8005c40:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	011a      	lsls	r2, r3, #4
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2240      	movs	r2, #64	@ 0x40
 8005c4e:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005c50:	e023      	b.n	8005c9a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2280      	movs	r2, #128	@ 0x80
 8005c56:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2280      	movs	r2, #128	@ 0x80
 8005c64:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005c66:	e018      	b.n	8005c9a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	22c0      	movs	r2, #192	@ 0xc0
 8005c6c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2280      	movs	r2, #128	@ 0x80
 8005c7a:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005c7c:	e00d      	b.n	8005c9a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	22e0      	movs	r2, #224	@ 0xe0
 8005c82:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2280      	movs	r2, #128	@ 0x80
 8005c90:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005c92:	e002      	b.n	8005c9a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	75fb      	strb	r3, [r7, #23]
      break;
 8005c98:	bf00      	nop
  }

  return status;
 8005c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	371c      	adds	r7, #28
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005cb0:	4b18      	ldr	r3, [pc, #96]	@ (8005d14 <SAI_Disable+0x6c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a18      	ldr	r2, [pc, #96]	@ (8005d18 <SAI_Disable+0x70>)
 8005cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cba:	0b1b      	lsrs	r3, r3, #12
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005cd2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10a      	bne.n	8005cf0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ce0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	72fb      	strb	r3, [r7, #11]
      break;
 8005cee:	e009      	b.n	8005d04 <SAI_Disable+0x5c>
    }
    count--;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1e7      	bne.n	8005cd4 <SAI_Disable+0x2c>

  return status;
 8005d04:	7afb      	ldrb	r3, [r7, #11]
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3714      	adds	r7, #20
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	20000000 	.word	0x20000000
 8005d18:	95cbec1b 	.word	0x95cbec1b

08005d1c <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d28:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005d38:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d4a:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d52:	2b20      	cmp	r3, #32
 8005d54:	d00a      	beq.n	8005d6c <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f7ff ffa6 	bl	8005ca8 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685a      	ldr	r2, [r3, #4]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 0208 	orr.w	r2, r2, #8
 8005d6a:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f7ff fe55 	bl	8005a2c <HAL_SAI_ErrorCallback>
#endif
}
 8005d82:	bf00      	nop
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b084      	sub	sp, #16
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e095      	b.n	8005ec8 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d108      	bne.n	8005db6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dac:	d009      	beq.n	8005dc2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	61da      	str	r2, [r3, #28]
 8005db4:	e005      	b.n	8005dc2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d106      	bne.n	8005de2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7fb f8a7 	bl	8000f30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2202      	movs	r2, #2
 8005de6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005df8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e02:	d902      	bls.n	8005e0a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e04:	2300      	movs	r3, #0
 8005e06:	60fb      	str	r3, [r7, #12]
 8005e08:	e002      	b.n	8005e10 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005e0e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005e18:	d007      	beq.n	8005e2a <HAL_SPI_Init+0xa0>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e22:	d002      	beq.n	8005e2a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005e3a:	431a      	orrs	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	f003 0302 	and.w	r3, r3, #2
 8005e44:	431a      	orrs	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e58:	431a      	orrs	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e62:	431a      	orrs	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e6c:	ea42 0103 	orr.w	r1, r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e74:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	0c1b      	lsrs	r3, r3, #16
 8005e86:	f003 0204 	and.w	r2, r3, #4
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8e:	f003 0310 	and.w	r3, r3, #16
 8005e92:	431a      	orrs	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e98:	f003 0308 	and.w	r3, r3, #8
 8005e9c:	431a      	orrs	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005ea6:	ea42 0103 	orr.w	r1, r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b088      	sub	sp, #32
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	603b      	str	r3, [r7, #0]
 8005edc:	4613      	mov	r3, r2
 8005ede:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ee0:	f7fb feda 	bl	8001c98 <HAL_GetTick>
 8005ee4:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005ee6:	88fb      	ldrh	r3, [r7, #6]
 8005ee8:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d001      	beq.n	8005efa <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005ef6:	2302      	movs	r3, #2
 8005ef8:	e15c      	b.n	80061b4 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d002      	beq.n	8005f06 <HAL_SPI_Transmit+0x36>
 8005f00:	88fb      	ldrh	r3, [r7, #6]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e154      	b.n	80061b4 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d101      	bne.n	8005f18 <HAL_SPI_Transmit+0x48>
 8005f14:	2302      	movs	r3, #2
 8005f16:	e14d      	b.n	80061b4 <HAL_SPI_Transmit+0x2e4>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2203      	movs	r2, #3
 8005f24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	88fa      	ldrh	r2, [r7, #6]
 8005f38:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	88fa      	ldrh	r2, [r7, #6]
 8005f3e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f6a:	d10f      	bne.n	8005f8c <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f8a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f96:	2b40      	cmp	r3, #64	@ 0x40
 8005f98:	d007      	beq.n	8005faa <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fa8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005fb2:	d952      	bls.n	800605a <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <HAL_SPI_Transmit+0xf2>
 8005fbc:	8b7b      	ldrh	r3, [r7, #26]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d145      	bne.n	800604e <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fc6:	881a      	ldrh	r2, [r3, #0]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd2:	1c9a      	adds	r2, r3, #2
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005fe6:	e032      	b.n	800604e <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d112      	bne.n	800601c <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ffa:	881a      	ldrh	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006006:	1c9a      	adds	r2, r3, #2
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006010:	b29b      	uxth	r3, r3
 8006012:	3b01      	subs	r3, #1
 8006014:	b29a      	uxth	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800601a:	e018      	b.n	800604e <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800601c:	f7fb fe3c 	bl	8001c98 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	429a      	cmp	r2, r3
 800602a:	d803      	bhi.n	8006034 <HAL_SPI_Transmit+0x164>
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006032:	d102      	bne.n	800603a <HAL_SPI_Transmit+0x16a>
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d109      	bne.n	800604e <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e0b2      	b.n	80061b4 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006052:	b29b      	uxth	r3, r3
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1c7      	bne.n	8005fe8 <HAL_SPI_Transmit+0x118>
 8006058:	e083      	b.n	8006162 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d002      	beq.n	8006068 <HAL_SPI_Transmit+0x198>
 8006062:	8b7b      	ldrh	r3, [r7, #26]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d177      	bne.n	8006158 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800606c:	b29b      	uxth	r3, r3
 800606e:	2b01      	cmp	r3, #1
 8006070:	d912      	bls.n	8006098 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006076:	881a      	ldrh	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006082:	1c9a      	adds	r2, r3, #2
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800608c:	b29b      	uxth	r3, r3
 800608e:	3b02      	subs	r3, #2
 8006090:	b29a      	uxth	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006096:	e05f      	b.n	8006158 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	330c      	adds	r3, #12
 80060a2:	7812      	ldrb	r2, [r2, #0]
 80060a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	3b01      	subs	r3, #1
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80060be:	e04b      	b.n	8006158 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d12b      	bne.n	8006126 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d912      	bls.n	80060fe <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060dc:	881a      	ldrh	r2, [r3, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e8:	1c9a      	adds	r2, r3, #2
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	3b02      	subs	r3, #2
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80060fc:	e02c      	b.n	8006158 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	330c      	adds	r3, #12
 8006108:	7812      	ldrb	r2, [r2, #0]
 800610a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006110:	1c5a      	adds	r2, r3, #1
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800611a:	b29b      	uxth	r3, r3
 800611c:	3b01      	subs	r3, #1
 800611e:	b29a      	uxth	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006124:	e018      	b.n	8006158 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006126:	f7fb fdb7 	bl	8001c98 <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	429a      	cmp	r2, r3
 8006134:	d803      	bhi.n	800613e <HAL_SPI_Transmit+0x26e>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800613c:	d102      	bne.n	8006144 <HAL_SPI_Transmit+0x274>
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d109      	bne.n	8006158 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e02d      	b.n	80061b4 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800615c:	b29b      	uxth	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1ae      	bne.n	80060c0 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006162:	69fa      	ldr	r2, [r7, #28]
 8006164:	6839      	ldr	r1, [r7, #0]
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f000 fa5a 	bl	8006620 <SPI_EndRxTxTransaction>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d002      	beq.n	8006178 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2220      	movs	r2, #32
 8006176:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10a      	bne.n	8006196 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006180:	2300      	movs	r3, #0
 8006182:	617b      	str	r3, [r7, #20]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	617b      	str	r3, [r7, #20]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	617b      	str	r3, [r7, #20]
 8006194:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e000      	b.n	80061b4 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80061b2:	2300      	movs	r3, #0
  }
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3720      	adds	r7, #32
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b088      	sub	sp, #32
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10e      	bne.n	80061fc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d009      	beq.n	80061fc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d004      	beq.n	80061fc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	4798      	blx	r3
    return;
 80061fa:	e0ce      	b.n	800639a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d009      	beq.n	800621a <HAL_SPI_IRQHandler+0x5e>
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800620c:	2b00      	cmp	r3, #0
 800620e:	d004      	beq.n	800621a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	4798      	blx	r3
    return;
 8006218:	e0bf      	b.n	800639a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	f003 0320 	and.w	r3, r3, #32
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10a      	bne.n	800623a <HAL_SPI_IRQHandler+0x7e>
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800622a:	2b00      	cmp	r3, #0
 800622c:	d105      	bne.n	800623a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006234:	2b00      	cmp	r3, #0
 8006236:	f000 80b0 	beq.w	800639a <HAL_SPI_IRQHandler+0x1de>
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	f003 0320 	and.w	r3, r3, #32
 8006240:	2b00      	cmp	r3, #0
 8006242:	f000 80aa 	beq.w	800639a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800624c:	2b00      	cmp	r3, #0
 800624e:	d023      	beq.n	8006298 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b03      	cmp	r3, #3
 800625a:	d011      	beq.n	8006280 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006260:	f043 0204 	orr.w	r2, r3, #4
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006268:	2300      	movs	r3, #0
 800626a:	617b      	str	r3, [r7, #20]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	617b      	str	r3, [r7, #20]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	617b      	str	r3, [r7, #20]
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	e00b      	b.n	8006298 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006280:	2300      	movs	r3, #0
 8006282:	613b      	str	r3, [r7, #16]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	613b      	str	r3, [r7, #16]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	613b      	str	r3, [r7, #16]
 8006294:	693b      	ldr	r3, [r7, #16]
        return;
 8006296:	e080      	b.n	800639a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	f003 0320 	and.w	r3, r3, #32
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d014      	beq.n	80062cc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062a6:	f043 0201 	orr.w	r2, r3, #1
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80062ae:	2300      	movs	r3, #0
 80062b0:	60fb      	str	r3, [r7, #12]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	60fb      	str	r3, [r7, #12]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062c8:	601a      	str	r2, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00c      	beq.n	80062f0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062da:	f043 0208 	orr.w	r2, r3, #8
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80062e2:	2300      	movs	r3, #0
 80062e4:	60bb      	str	r3, [r7, #8]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	60bb      	str	r3, [r7, #8]
 80062ee:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d04f      	beq.n	8006398 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006306:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d104      	bne.n	8006324 <HAL_SPI_IRQHandler+0x168>
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b00      	cmp	r3, #0
 8006322:	d034      	beq.n	800638e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f022 0203 	bic.w	r2, r2, #3
 8006332:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006338:	2b00      	cmp	r3, #0
 800633a:	d011      	beq.n	8006360 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006340:	4a17      	ldr	r2, [pc, #92]	@ (80063a0 <HAL_SPI_IRQHandler+0x1e4>)
 8006342:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006348:	4618      	mov	r0, r3
 800634a:	f7fb fe89 	bl	8002060 <HAL_DMA_Abort_IT>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d005      	beq.n	8006360 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006358:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006364:	2b00      	cmp	r3, #0
 8006366:	d016      	beq.n	8006396 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800636c:	4a0c      	ldr	r2, [pc, #48]	@ (80063a0 <HAL_SPI_IRQHandler+0x1e4>)
 800636e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006374:	4618      	mov	r0, r3
 8006376:	f7fb fe73 	bl	8002060 <HAL_DMA_Abort_IT>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00a      	beq.n	8006396 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006384:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800638c:	e003      	b.n	8006396 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f808 	bl	80063a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006394:	e000      	b.n	8006398 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006396:	bf00      	nop
    return;
 8006398:	bf00      	nop
  }
}
 800639a:	3720      	adds	r7, #32
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	080063b9 	.word	0x080063b9

080063a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f7ff ffe5 	bl	80063a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80063da:	bf00      	nop
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
	...

080063e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b088      	sub	sp, #32
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	603b      	str	r3, [r7, #0]
 80063f0:	4613      	mov	r3, r2
 80063f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063f4:	f7fb fc50 	bl	8001c98 <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063fc:	1a9b      	subs	r3, r3, r2
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	4413      	add	r3, r2
 8006402:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006404:	f7fb fc48 	bl	8001c98 <HAL_GetTick>
 8006408:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800640a:	4b39      	ldr	r3, [pc, #228]	@ (80064f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	015b      	lsls	r3, r3, #5
 8006410:	0d1b      	lsrs	r3, r3, #20
 8006412:	69fa      	ldr	r2, [r7, #28]
 8006414:	fb02 f303 	mul.w	r3, r2, r3
 8006418:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800641a:	e054      	b.n	80064c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006422:	d050      	beq.n	80064c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006424:	f7fb fc38 	bl	8001c98 <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	69fa      	ldr	r2, [r7, #28]
 8006430:	429a      	cmp	r2, r3
 8006432:	d902      	bls.n	800643a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d13d      	bne.n	80064b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006448:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006452:	d111      	bne.n	8006478 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800645c:	d004      	beq.n	8006468 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006466:	d107      	bne.n	8006478 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006476:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800647c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006480:	d10f      	bne.n	80064a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006490:	601a      	str	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e017      	b.n	80064e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d101      	bne.n	80064c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064bc:	2300      	movs	r3, #0
 80064be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	3b01      	subs	r3, #1
 80064c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	689a      	ldr	r2, [r3, #8]
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	4013      	ands	r3, r2
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	bf0c      	ite	eq
 80064d6:	2301      	moveq	r3, #1
 80064d8:	2300      	movne	r3, #0
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	461a      	mov	r2, r3
 80064de:	79fb      	ldrb	r3, [r7, #7]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d19b      	bne.n	800641c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3720      	adds	r7, #32
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	20000000 	.word	0x20000000

080064f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b08a      	sub	sp, #40	@ 0x28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
 8006500:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006502:	2300      	movs	r3, #0
 8006504:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006506:	f7fb fbc7 	bl	8001c98 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650e:	1a9b      	subs	r3, r3, r2
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	4413      	add	r3, r2
 8006514:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006516:	f7fb fbbf 	bl	8001c98 <HAL_GetTick>
 800651a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	330c      	adds	r3, #12
 8006522:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006524:	4b3d      	ldr	r3, [pc, #244]	@ (800661c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	4613      	mov	r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4413      	add	r3, r2
 800652e:	00da      	lsls	r2, r3, #3
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	0d1b      	lsrs	r3, r3, #20
 8006534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006536:	fb02 f303 	mul.w	r3, r2, r3
 800653a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800653c:	e060      	b.n	8006600 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006544:	d107      	bne.n	8006556 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d104      	bne.n	8006556 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	b2db      	uxtb	r3, r3
 8006552:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006554:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800655c:	d050      	beq.n	8006600 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800655e:	f7fb fb9b 	bl	8001c98 <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	6a3b      	ldr	r3, [r7, #32]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800656a:	429a      	cmp	r2, r3
 800656c:	d902      	bls.n	8006574 <SPI_WaitFifoStateUntilTimeout+0x80>
 800656e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006570:	2b00      	cmp	r3, #0
 8006572:	d13d      	bne.n	80065f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685a      	ldr	r2, [r3, #4]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006582:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800658c:	d111      	bne.n	80065b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006596:	d004      	beq.n	80065a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065a0:	d107      	bne.n	80065b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065ba:	d10f      	bne.n	80065dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065ca:	601a      	str	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e010      	b.n	8006612 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80065f6:	2300      	movs	r3, #0
 80065f8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	3b01      	subs	r3, #1
 80065fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689a      	ldr	r2, [r3, #8]
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	4013      	ands	r3, r2
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	429a      	cmp	r2, r3
 800660e:	d196      	bne.n	800653e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3728      	adds	r7, #40	@ 0x28
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	20000000 	.word	0x20000000

08006620 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af02      	add	r7, sp, #8
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2200      	movs	r2, #0
 8006634:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f7ff ff5b 	bl	80064f4 <SPI_WaitFifoStateUntilTimeout>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d007      	beq.n	8006654 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006648:	f043 0220 	orr.w	r2, r3, #32
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e027      	b.n	80066a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	2200      	movs	r2, #0
 800665c:	2180      	movs	r1, #128	@ 0x80
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f7ff fec0 	bl	80063e4 <SPI_WaitFlagStateUntilTimeout>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d007      	beq.n	800667a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800666e:	f043 0220 	orr.w	r2, r3, #32
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e014      	b.n	80066a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	2200      	movs	r2, #0
 8006682:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f7ff ff34 	bl	80064f4 <SPI_WaitFifoStateUntilTimeout>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d007      	beq.n	80066a2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006696:	f043 0220 	orr.w	r2, r3, #32
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e000      	b.n	80066a4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e049      	b.n	8006752 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d106      	bne.n	80066d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f841 	bl	800675a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	3304      	adds	r3, #4
 80066e8:	4619      	mov	r1, r3
 80066ea:	4610      	mov	r0, r2
 80066ec:	f000 f9e0 	bl	8006ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800675a:	b480      	push	{r7}
 800675c:	b083      	sub	sp, #12
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006762:	bf00      	nop
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
	...

08006770 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b01      	cmp	r3, #1
 8006782:	d001      	beq.n	8006788 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e04f      	b.n	8006828 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2202      	movs	r2, #2
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68da      	ldr	r2, [r3, #12]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f042 0201 	orr.w	r2, r2, #1
 800679e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a23      	ldr	r2, [pc, #140]	@ (8006834 <HAL_TIM_Base_Start_IT+0xc4>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d01d      	beq.n	80067e6 <HAL_TIM_Base_Start_IT+0x76>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067b2:	d018      	beq.n	80067e6 <HAL_TIM_Base_Start_IT+0x76>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a1f      	ldr	r2, [pc, #124]	@ (8006838 <HAL_TIM_Base_Start_IT+0xc8>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d013      	beq.n	80067e6 <HAL_TIM_Base_Start_IT+0x76>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a1e      	ldr	r2, [pc, #120]	@ (800683c <HAL_TIM_Base_Start_IT+0xcc>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d00e      	beq.n	80067e6 <HAL_TIM_Base_Start_IT+0x76>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a1c      	ldr	r2, [pc, #112]	@ (8006840 <HAL_TIM_Base_Start_IT+0xd0>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d009      	beq.n	80067e6 <HAL_TIM_Base_Start_IT+0x76>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a1b      	ldr	r2, [pc, #108]	@ (8006844 <HAL_TIM_Base_Start_IT+0xd4>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d004      	beq.n	80067e6 <HAL_TIM_Base_Start_IT+0x76>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a19      	ldr	r2, [pc, #100]	@ (8006848 <HAL_TIM_Base_Start_IT+0xd8>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d115      	bne.n	8006812 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	689a      	ldr	r2, [r3, #8]
 80067ec:	4b17      	ldr	r3, [pc, #92]	@ (800684c <HAL_TIM_Base_Start_IT+0xdc>)
 80067ee:	4013      	ands	r3, r2
 80067f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2b06      	cmp	r3, #6
 80067f6:	d015      	beq.n	8006824 <HAL_TIM_Base_Start_IT+0xb4>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067fe:	d011      	beq.n	8006824 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f042 0201 	orr.w	r2, r2, #1
 800680e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006810:	e008      	b.n	8006824 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f042 0201 	orr.w	r2, r2, #1
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	e000      	b.n	8006826 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006824:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3714      	adds	r7, #20
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	40012c00 	.word	0x40012c00
 8006838:	40000400 	.word	0x40000400
 800683c:	40000800 	.word	0x40000800
 8006840:	40000c00 	.word	0x40000c00
 8006844:	40013400 	.word	0x40013400
 8006848:	40014000 	.word	0x40014000
 800684c:	00010007 	.word	0x00010007

08006850 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d020      	beq.n	80068b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f003 0302 	and.w	r3, r3, #2
 8006878:	2b00      	cmp	r3, #0
 800687a:	d01b      	beq.n	80068b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f06f 0202 	mvn.w	r2, #2
 8006884:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	f003 0303 	and.w	r3, r3, #3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f8e9 	bl	8006a72 <HAL_TIM_IC_CaptureCallback>
 80068a0:	e005      	b.n	80068ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 f8db 	bl	8006a5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 f8ec 	bl	8006a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	f003 0304 	and.w	r3, r3, #4
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d020      	beq.n	8006900 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f003 0304 	and.w	r3, r3, #4
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d01b      	beq.n	8006900 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f06f 0204 	mvn.w	r2, #4
 80068d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2202      	movs	r2, #2
 80068d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f8c3 	bl	8006a72 <HAL_TIM_IC_CaptureCallback>
 80068ec:	e005      	b.n	80068fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f8b5 	bl	8006a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f8c6 	bl	8006a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f003 0308 	and.w	r3, r3, #8
 8006906:	2b00      	cmp	r3, #0
 8006908:	d020      	beq.n	800694c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f003 0308 	and.w	r3, r3, #8
 8006910:	2b00      	cmp	r3, #0
 8006912:	d01b      	beq.n	800694c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f06f 0208 	mvn.w	r2, #8
 800691c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2204      	movs	r2, #4
 8006922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	69db      	ldr	r3, [r3, #28]
 800692a:	f003 0303 	and.w	r3, r3, #3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d003      	beq.n	800693a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f89d 	bl	8006a72 <HAL_TIM_IC_CaptureCallback>
 8006938:	e005      	b.n	8006946 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f88f 	bl	8006a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f8a0 	bl	8006a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f003 0310 	and.w	r3, r3, #16
 8006952:	2b00      	cmp	r3, #0
 8006954:	d020      	beq.n	8006998 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f003 0310 	and.w	r3, r3, #16
 800695c:	2b00      	cmp	r3, #0
 800695e:	d01b      	beq.n	8006998 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f06f 0210 	mvn.w	r2, #16
 8006968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2208      	movs	r2, #8
 800696e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800697a:	2b00      	cmp	r3, #0
 800697c:	d003      	beq.n	8006986 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f877 	bl	8006a72 <HAL_TIM_IC_CaptureCallback>
 8006984:	e005      	b.n	8006992 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f869 	bl	8006a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 f87a 	bl	8006a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00c      	beq.n	80069bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d007      	beq.n	80069bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f06f 0201 	mvn.w	r2, #1
 80069b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7fa f920 	bl	8000bfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d104      	bne.n	80069d0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00c      	beq.n	80069ea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d007      	beq.n	80069ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80069e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 f913 	bl	8006c10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00c      	beq.n	8006a0e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d007      	beq.n	8006a0e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f90b 	bl	8006c24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00c      	beq.n	8006a32 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d007      	beq.n	8006a32 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 f834 	bl	8006a9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	f003 0320 	and.w	r3, r3, #32
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00c      	beq.n	8006a56 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f003 0320 	and.w	r3, r3, #32
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d007      	beq.n	8006a56 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f06f 0220 	mvn.w	r2, #32
 8006a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f8d3 	bl	8006bfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a56:	bf00      	nop
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b083      	sub	sp, #12
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a66:	bf00      	nop
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr

08006a72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a72:	b480      	push	{r7}
 8006a74:	b083      	sub	sp, #12
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a7a:	bf00      	nop
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a86:	b480      	push	{r7}
 8006a88:	b083      	sub	sp, #12
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a8e:	bf00      	nop
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b083      	sub	sp, #12
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006aa2:	bf00      	nop
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
	...

08006ab0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a46      	ldr	r2, [pc, #280]	@ (8006bdc <TIM_Base_SetConfig+0x12c>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d013      	beq.n	8006af0 <TIM_Base_SetConfig+0x40>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ace:	d00f      	beq.n	8006af0 <TIM_Base_SetConfig+0x40>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a43      	ldr	r2, [pc, #268]	@ (8006be0 <TIM_Base_SetConfig+0x130>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d00b      	beq.n	8006af0 <TIM_Base_SetConfig+0x40>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a42      	ldr	r2, [pc, #264]	@ (8006be4 <TIM_Base_SetConfig+0x134>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d007      	beq.n	8006af0 <TIM_Base_SetConfig+0x40>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a41      	ldr	r2, [pc, #260]	@ (8006be8 <TIM_Base_SetConfig+0x138>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d003      	beq.n	8006af0 <TIM_Base_SetConfig+0x40>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a40      	ldr	r2, [pc, #256]	@ (8006bec <TIM_Base_SetConfig+0x13c>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d108      	bne.n	8006b02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006af6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a35      	ldr	r2, [pc, #212]	@ (8006bdc <TIM_Base_SetConfig+0x12c>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d01f      	beq.n	8006b4a <TIM_Base_SetConfig+0x9a>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b10:	d01b      	beq.n	8006b4a <TIM_Base_SetConfig+0x9a>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a32      	ldr	r2, [pc, #200]	@ (8006be0 <TIM_Base_SetConfig+0x130>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d017      	beq.n	8006b4a <TIM_Base_SetConfig+0x9a>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a31      	ldr	r2, [pc, #196]	@ (8006be4 <TIM_Base_SetConfig+0x134>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d013      	beq.n	8006b4a <TIM_Base_SetConfig+0x9a>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a30      	ldr	r2, [pc, #192]	@ (8006be8 <TIM_Base_SetConfig+0x138>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d00f      	beq.n	8006b4a <TIM_Base_SetConfig+0x9a>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a2f      	ldr	r2, [pc, #188]	@ (8006bec <TIM_Base_SetConfig+0x13c>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d00b      	beq.n	8006b4a <TIM_Base_SetConfig+0x9a>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a2e      	ldr	r2, [pc, #184]	@ (8006bf0 <TIM_Base_SetConfig+0x140>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d007      	beq.n	8006b4a <TIM_Base_SetConfig+0x9a>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a2d      	ldr	r2, [pc, #180]	@ (8006bf4 <TIM_Base_SetConfig+0x144>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d003      	beq.n	8006b4a <TIM_Base_SetConfig+0x9a>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a2c      	ldr	r2, [pc, #176]	@ (8006bf8 <TIM_Base_SetConfig+0x148>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d108      	bne.n	8006b5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	689a      	ldr	r2, [r3, #8]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a16      	ldr	r2, [pc, #88]	@ (8006bdc <TIM_Base_SetConfig+0x12c>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d00f      	beq.n	8006ba8 <TIM_Base_SetConfig+0xf8>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a18      	ldr	r2, [pc, #96]	@ (8006bec <TIM_Base_SetConfig+0x13c>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d00b      	beq.n	8006ba8 <TIM_Base_SetConfig+0xf8>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a17      	ldr	r2, [pc, #92]	@ (8006bf0 <TIM_Base_SetConfig+0x140>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d007      	beq.n	8006ba8 <TIM_Base_SetConfig+0xf8>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a16      	ldr	r2, [pc, #88]	@ (8006bf4 <TIM_Base_SetConfig+0x144>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d003      	beq.n	8006ba8 <TIM_Base_SetConfig+0xf8>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a15      	ldr	r2, [pc, #84]	@ (8006bf8 <TIM_Base_SetConfig+0x148>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d103      	bne.n	8006bb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	691a      	ldr	r2, [r3, #16]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d105      	bne.n	8006bce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	f023 0201 	bic.w	r2, r3, #1
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	611a      	str	r2, [r3, #16]
  }
}
 8006bce:	bf00      	nop
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	40012c00 	.word	0x40012c00
 8006be0:	40000400 	.word	0x40000400
 8006be4:	40000800 	.word	0x40000800
 8006be8:	40000c00 	.word	0x40000c00
 8006bec:	40013400 	.word	0x40013400
 8006bf0:	40014000 	.word	0x40014000
 8006bf4:	40014400 	.word	0x40014400
 8006bf8:	40014800 	.word	0x40014800

08006bfc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c18:	bf00      	nop
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e040      	b.n	8006ccc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d106      	bne.n	8006c60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7fa fbb6 	bl	80013cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2224      	movs	r2, #36	@ 0x24
 8006c64:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f022 0201 	bic.w	r2, r2, #1
 8006c74:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d002      	beq.n	8006c84 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fedc 	bl	8007a3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 fc21 	bl	80074cc <UART_SetConfig>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d101      	bne.n	8006c94 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e01b      	b.n	8006ccc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	685a      	ldr	r2, [r3, #4]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ca2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689a      	ldr	r2, [r3, #8]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006cb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f042 0201 	orr.w	r2, r2, #1
 8006cc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 ff5b 	bl	8007b80 <UART_CheckIdleState>
 8006cca:	4603      	mov	r3, r0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3708      	adds	r7, #8
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b08a      	sub	sp, #40	@ 0x28
 8006cd8:	af02      	add	r7, sp, #8
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	603b      	str	r3, [r7, #0]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ce8:	2b20      	cmp	r3, #32
 8006cea:	d177      	bne.n	8006ddc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d002      	beq.n	8006cf8 <HAL_UART_Transmit+0x24>
 8006cf2:	88fb      	ldrh	r3, [r7, #6]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d101      	bne.n	8006cfc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e070      	b.n	8006dde <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2221      	movs	r2, #33	@ 0x21
 8006d08:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d0a:	f7fa ffc5 	bl	8001c98 <HAL_GetTick>
 8006d0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	88fa      	ldrh	r2, [r7, #6]
 8006d14:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	88fa      	ldrh	r2, [r7, #6]
 8006d1c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d28:	d108      	bne.n	8006d3c <HAL_UART_Transmit+0x68>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d104      	bne.n	8006d3c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006d32:	2300      	movs	r3, #0
 8006d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	61bb      	str	r3, [r7, #24]
 8006d3a:	e003      	b.n	8006d44 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d40:	2300      	movs	r3, #0
 8006d42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d44:	e02f      	b.n	8006da6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	2180      	movs	r1, #128	@ 0x80
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f000 ffbd 	bl	8007cd0 <UART_WaitOnFlagUntilTimeout>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d004      	beq.n	8006d66 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e03b      	b.n	8006dde <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10b      	bne.n	8006d84 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	881a      	ldrh	r2, [r3, #0]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d78:	b292      	uxth	r2, r2
 8006d7a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	3302      	adds	r3, #2
 8006d80:	61bb      	str	r3, [r7, #24]
 8006d82:	e007      	b.n	8006d94 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	781a      	ldrb	r2, [r3, #0]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	3301      	adds	r3, #1
 8006d92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1c9      	bne.n	8006d46 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	2200      	movs	r2, #0
 8006dba:	2140      	movs	r1, #64	@ 0x40
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f000 ff87 	bl	8007cd0 <UART_WaitOnFlagUntilTimeout>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d004      	beq.n	8006dd2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2220      	movs	r2, #32
 8006dcc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e005      	b.n	8006dde <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2220      	movs	r2, #32
 8006dd6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	e000      	b.n	8006dde <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006ddc:	2302      	movs	r3, #2
  }
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3720      	adds	r7, #32
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
	...

08006de8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b08a      	sub	sp, #40	@ 0x28
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	4613      	mov	r3, r2
 8006df4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dfc:	2b20      	cmp	r3, #32
 8006dfe:	d137      	bne.n	8006e70 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d002      	beq.n	8006e0c <HAL_UART_Receive_IT+0x24>
 8006e06:	88fb      	ldrh	r3, [r7, #6]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d101      	bne.n	8006e10 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e030      	b.n	8006e72 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a18      	ldr	r2, [pc, #96]	@ (8006e7c <HAL_UART_Receive_IT+0x94>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d01f      	beq.n	8006e60 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d018      	beq.n	8006e60 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	e853 3f00 	ldrex	r3, [r3]
 8006e3a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006e42:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	461a      	mov	r2, r3
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4c:	623b      	str	r3, [r7, #32]
 8006e4e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e50:	69f9      	ldr	r1, [r7, #28]
 8006e52:	6a3a      	ldr	r2, [r7, #32]
 8006e54:	e841 2300 	strex	r3, r2, [r1]
 8006e58:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1e6      	bne.n	8006e2e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e60:	88fb      	ldrh	r3, [r7, #6]
 8006e62:	461a      	mov	r2, r3
 8006e64:	68b9      	ldr	r1, [r7, #8]
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f000 ffa0 	bl	8007dac <UART_Start_Receive_IT>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	e000      	b.n	8006e72 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006e70:	2302      	movs	r3, #2
  }
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3728      	adds	r7, #40	@ 0x28
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	40008000 	.word	0x40008000

08006e80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b0ba      	sub	sp, #232	@ 0xe8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ea6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006eaa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006eae:	4013      	ands	r3, r2
 8006eb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006eb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d115      	bne.n	8006ee8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ec0:	f003 0320 	and.w	r3, r3, #32
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00f      	beq.n	8006ee8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ecc:	f003 0320 	and.w	r3, r3, #32
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d009      	beq.n	8006ee8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 82ca 	beq.w	8007472 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	4798      	blx	r3
      }
      return;
 8006ee6:	e2c4      	b.n	8007472 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006ee8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 8117 	beq.w	8007120 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d106      	bne.n	8006f0c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006efe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006f02:	4b85      	ldr	r3, [pc, #532]	@ (8007118 <HAL_UART_IRQHandler+0x298>)
 8006f04:	4013      	ands	r3, r2
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f000 810a 	beq.w	8007120 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f10:	f003 0301 	and.w	r3, r3, #1
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d011      	beq.n	8006f3c <HAL_UART_IRQHandler+0xbc>
 8006f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00b      	beq.n	8006f3c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f32:	f043 0201 	orr.w	r2, r3, #1
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f40:	f003 0302 	and.w	r3, r3, #2
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d011      	beq.n	8006f6c <HAL_UART_IRQHandler+0xec>
 8006f48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f4c:	f003 0301 	and.w	r3, r3, #1
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00b      	beq.n	8006f6c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2202      	movs	r2, #2
 8006f5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f62:	f043 0204 	orr.w	r2, r3, #4
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f70:	f003 0304 	and.w	r3, r3, #4
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d011      	beq.n	8006f9c <HAL_UART_IRQHandler+0x11c>
 8006f78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f7c:	f003 0301 	and.w	r3, r3, #1
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00b      	beq.n	8006f9c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2204      	movs	r2, #4
 8006f8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f92:	f043 0202 	orr.w	r2, r3, #2
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fa0:	f003 0308 	and.w	r3, r3, #8
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d017      	beq.n	8006fd8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fac:	f003 0320 	and.w	r3, r3, #32
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d105      	bne.n	8006fc0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fb8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00b      	beq.n	8006fd8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2208      	movs	r2, #8
 8006fc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fce:	f043 0208 	orr.w	r2, r3, #8
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d012      	beq.n	800700a <HAL_UART_IRQHandler+0x18a>
 8006fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fe8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00c      	beq.n	800700a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ff8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007000:	f043 0220 	orr.w	r2, r3, #32
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007010:	2b00      	cmp	r3, #0
 8007012:	f000 8230 	beq.w	8007476 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800701a:	f003 0320 	and.w	r3, r3, #32
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00d      	beq.n	800703e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007026:	f003 0320 	and.w	r3, r3, #32
 800702a:	2b00      	cmp	r3, #0
 800702c:	d007      	beq.n	800703e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007032:	2b00      	cmp	r3, #0
 8007034:	d003      	beq.n	800703e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007044:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007052:	2b40      	cmp	r3, #64	@ 0x40
 8007054:	d005      	beq.n	8007062 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007056:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800705a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800705e:	2b00      	cmp	r3, #0
 8007060:	d04f      	beq.n	8007102 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 ff68 	bl	8007f38 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007072:	2b40      	cmp	r3, #64	@ 0x40
 8007074:	d141      	bne.n	80070fa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	3308      	adds	r3, #8
 800707c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007080:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007084:	e853 3f00 	ldrex	r3, [r3]
 8007088:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800708c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007090:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007094:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	3308      	adds	r3, #8
 800709e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80070a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80070a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80070ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80070b2:	e841 2300 	strex	r3, r2, [r1]
 80070b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80070ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1d9      	bne.n	8007076 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d013      	beq.n	80070f2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070ce:	4a13      	ldr	r2, [pc, #76]	@ (800711c <HAL_UART_IRQHandler+0x29c>)
 80070d0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7fa ffc2 	bl	8002060 <HAL_DMA_Abort_IT>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d017      	beq.n	8007112 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80070ec:	4610      	mov	r0, r2
 80070ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070f0:	e00f      	b.n	8007112 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f9d4 	bl	80074a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070f8:	e00b      	b.n	8007112 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f9d0 	bl	80074a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007100:	e007      	b.n	8007112 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f9cc 	bl	80074a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007110:	e1b1      	b.n	8007476 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007112:	bf00      	nop
    return;
 8007114:	e1af      	b.n	8007476 <HAL_UART_IRQHandler+0x5f6>
 8007116:	bf00      	nop
 8007118:	04000120 	.word	0x04000120
 800711c:	08008001 	.word	0x08008001

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007124:	2b01      	cmp	r3, #1
 8007126:	f040 816a 	bne.w	80073fe <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800712a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800712e:	f003 0310 	and.w	r3, r3, #16
 8007132:	2b00      	cmp	r3, #0
 8007134:	f000 8163 	beq.w	80073fe <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800713c:	f003 0310 	and.w	r3, r3, #16
 8007140:	2b00      	cmp	r3, #0
 8007142:	f000 815c 	beq.w	80073fe <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2210      	movs	r2, #16
 800714c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007158:	2b40      	cmp	r3, #64	@ 0x40
 800715a:	f040 80d4 	bne.w	8007306 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800716a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800716e:	2b00      	cmp	r3, #0
 8007170:	f000 80ad 	beq.w	80072ce <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800717a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800717e:	429a      	cmp	r2, r3
 8007180:	f080 80a5 	bcs.w	80072ce <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800718a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0320 	and.w	r3, r3, #32
 800719a:	2b00      	cmp	r3, #0
 800719c:	f040 8086 	bne.w	80072ac <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80071ac:	e853 3f00 	ldrex	r3, [r3]
 80071b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80071b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80071b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	461a      	mov	r2, r3
 80071c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80071ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80071ce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80071d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80071da:	e841 2300 	strex	r3, r2, [r1]
 80071de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80071e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1da      	bne.n	80071a0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	3308      	adds	r3, #8
 80071f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80071f4:	e853 3f00 	ldrex	r3, [r3]
 80071f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80071fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071fc:	f023 0301 	bic.w	r3, r3, #1
 8007200:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	3308      	adds	r3, #8
 800720a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800720e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007212:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007214:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007216:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800721a:	e841 2300 	strex	r3, r2, [r1]
 800721e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007220:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1e1      	bne.n	80071ea <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	3308      	adds	r3, #8
 800722c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007230:	e853 3f00 	ldrex	r3, [r3]
 8007234:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007236:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007238:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800723c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	3308      	adds	r3, #8
 8007246:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800724a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800724c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007250:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007252:	e841 2300 	strex	r3, r2, [r1]
 8007256:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007258:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1e3      	bne.n	8007226 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2220      	movs	r2, #32
 8007262:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007272:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007274:	e853 3f00 	ldrex	r3, [r3]
 8007278:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800727a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800727c:	f023 0310 	bic.w	r3, r3, #16
 8007280:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	461a      	mov	r2, r3
 800728a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800728e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007290:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007292:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007294:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007296:	e841 2300 	strex	r3, r2, [r1]
 800729a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800729c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1e4      	bne.n	800726c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7fa fe9c 	bl	8001fe4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80072be:	b29b      	uxth	r3, r3
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	4619      	mov	r1, r3
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f8f4 	bl	80074b4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80072cc:	e0d5      	b.n	800747a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80072d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072d8:	429a      	cmp	r2, r3
 80072da:	f040 80ce 	bne.w	800747a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0320 	and.w	r3, r3, #32
 80072ea:	2b20      	cmp	r3, #32
 80072ec:	f040 80c5 	bne.w	800747a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2202      	movs	r2, #2
 80072f4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80072fc:	4619      	mov	r1, r3
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f8d8 	bl	80074b4 <HAL_UARTEx_RxEventCallback>
      return;
 8007304:	e0b9      	b.n	800747a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007312:	b29b      	uxth	r3, r3
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007320:	b29b      	uxth	r3, r3
 8007322:	2b00      	cmp	r3, #0
 8007324:	f000 80ab 	beq.w	800747e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8007328:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800732c:	2b00      	cmp	r3, #0
 800732e:	f000 80a6 	beq.w	800747e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800733a:	e853 3f00 	ldrex	r3, [r3]
 800733e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007342:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007346:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	461a      	mov	r2, r3
 8007350:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007354:	647b      	str	r3, [r7, #68]	@ 0x44
 8007356:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007358:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800735a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800735c:	e841 2300 	strex	r3, r2, [r1]
 8007360:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1e4      	bne.n	8007332 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	3308      	adds	r3, #8
 800736e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007372:	e853 3f00 	ldrex	r3, [r3]
 8007376:	623b      	str	r3, [r7, #32]
   return(result);
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	f023 0301 	bic.w	r3, r3, #1
 800737e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3308      	adds	r3, #8
 8007388:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800738c:	633a      	str	r2, [r7, #48]	@ 0x30
 800738e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007390:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007394:	e841 2300 	strex	r3, r2, [r1]
 8007398:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800739a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1e3      	bne.n	8007368 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2220      	movs	r2, #32
 80073a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	e853 3f00 	ldrex	r3, [r3]
 80073c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f023 0310 	bic.w	r3, r3, #16
 80073c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	461a      	mov	r2, r3
 80073d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80073d6:	61fb      	str	r3, [r7, #28]
 80073d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073da:	69b9      	ldr	r1, [r7, #24]
 80073dc:	69fa      	ldr	r2, [r7, #28]
 80073de:	e841 2300 	strex	r3, r2, [r1]
 80073e2:	617b      	str	r3, [r7, #20]
   return(result);
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1e4      	bne.n	80073b4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2202      	movs	r2, #2
 80073ee:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80073f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80073f4:	4619      	mov	r1, r3
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f85c 	bl	80074b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80073fc:	e03f      	b.n	800747e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80073fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007402:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00e      	beq.n	8007428 <HAL_UART_IRQHandler+0x5a8>
 800740a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800740e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d008      	beq.n	8007428 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800741e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 ffe9 	bl	80083f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007426:	e02d      	b.n	8007484 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800742c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00e      	beq.n	8007452 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800743c:	2b00      	cmp	r3, #0
 800743e:	d008      	beq.n	8007452 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007444:	2b00      	cmp	r3, #0
 8007446:	d01c      	beq.n	8007482 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	4798      	blx	r3
    }
    return;
 8007450:	e017      	b.n	8007482 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800745a:	2b00      	cmp	r3, #0
 800745c:	d012      	beq.n	8007484 <HAL_UART_IRQHandler+0x604>
 800745e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00c      	beq.n	8007484 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fdde 	bl	800802c <UART_EndTransmit_IT>
    return;
 8007470:	e008      	b.n	8007484 <HAL_UART_IRQHandler+0x604>
      return;
 8007472:	bf00      	nop
 8007474:	e006      	b.n	8007484 <HAL_UART_IRQHandler+0x604>
    return;
 8007476:	bf00      	nop
 8007478:	e004      	b.n	8007484 <HAL_UART_IRQHandler+0x604>
      return;
 800747a:	bf00      	nop
 800747c:	e002      	b.n	8007484 <HAL_UART_IRQHandler+0x604>
      return;
 800747e:	bf00      	nop
 8007480:	e000      	b.n	8007484 <HAL_UART_IRQHandler+0x604>
    return;
 8007482:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007484:	37e8      	adds	r7, #232	@ 0xe8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop

0800748c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007494:	bf00      	nop
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	460b      	mov	r3, r1
 80074be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074d0:	b08a      	sub	sp, #40	@ 0x28
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	689a      	ldr	r2, [r3, #8]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	431a      	orrs	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	695b      	ldr	r3, [r3, #20]
 80074ea:	431a      	orrs	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	69db      	ldr	r3, [r3, #28]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	4ba4      	ldr	r3, [pc, #656]	@ (800778c <UART_SetConfig+0x2c0>)
 80074fc:	4013      	ands	r3, r2
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	6812      	ldr	r2, [r2, #0]
 8007502:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007504:	430b      	orrs	r3, r1
 8007506:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	68da      	ldr	r2, [r3, #12]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	430a      	orrs	r2, r1
 800751c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a99      	ldr	r2, [pc, #612]	@ (8007790 <UART_SetConfig+0x2c4>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d004      	beq.n	8007538 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007534:	4313      	orrs	r3, r2
 8007536:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007548:	430a      	orrs	r2, r1
 800754a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a90      	ldr	r2, [pc, #576]	@ (8007794 <UART_SetConfig+0x2c8>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d126      	bne.n	80075a4 <UART_SetConfig+0xd8>
 8007556:	4b90      	ldr	r3, [pc, #576]	@ (8007798 <UART_SetConfig+0x2cc>)
 8007558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800755c:	f003 0303 	and.w	r3, r3, #3
 8007560:	2b03      	cmp	r3, #3
 8007562:	d81b      	bhi.n	800759c <UART_SetConfig+0xd0>
 8007564:	a201      	add	r2, pc, #4	@ (adr r2, 800756c <UART_SetConfig+0xa0>)
 8007566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756a:	bf00      	nop
 800756c:	0800757d 	.word	0x0800757d
 8007570:	0800758d 	.word	0x0800758d
 8007574:	08007585 	.word	0x08007585
 8007578:	08007595 	.word	0x08007595
 800757c:	2301      	movs	r3, #1
 800757e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007582:	e116      	b.n	80077b2 <UART_SetConfig+0x2e6>
 8007584:	2302      	movs	r3, #2
 8007586:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800758a:	e112      	b.n	80077b2 <UART_SetConfig+0x2e6>
 800758c:	2304      	movs	r3, #4
 800758e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007592:	e10e      	b.n	80077b2 <UART_SetConfig+0x2e6>
 8007594:	2308      	movs	r3, #8
 8007596:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800759a:	e10a      	b.n	80077b2 <UART_SetConfig+0x2e6>
 800759c:	2310      	movs	r3, #16
 800759e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075a2:	e106      	b.n	80077b2 <UART_SetConfig+0x2e6>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a7c      	ldr	r2, [pc, #496]	@ (800779c <UART_SetConfig+0x2d0>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d138      	bne.n	8007620 <UART_SetConfig+0x154>
 80075ae:	4b7a      	ldr	r3, [pc, #488]	@ (8007798 <UART_SetConfig+0x2cc>)
 80075b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075b4:	f003 030c 	and.w	r3, r3, #12
 80075b8:	2b0c      	cmp	r3, #12
 80075ba:	d82d      	bhi.n	8007618 <UART_SetConfig+0x14c>
 80075bc:	a201      	add	r2, pc, #4	@ (adr r2, 80075c4 <UART_SetConfig+0xf8>)
 80075be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c2:	bf00      	nop
 80075c4:	080075f9 	.word	0x080075f9
 80075c8:	08007619 	.word	0x08007619
 80075cc:	08007619 	.word	0x08007619
 80075d0:	08007619 	.word	0x08007619
 80075d4:	08007609 	.word	0x08007609
 80075d8:	08007619 	.word	0x08007619
 80075dc:	08007619 	.word	0x08007619
 80075e0:	08007619 	.word	0x08007619
 80075e4:	08007601 	.word	0x08007601
 80075e8:	08007619 	.word	0x08007619
 80075ec:	08007619 	.word	0x08007619
 80075f0:	08007619 	.word	0x08007619
 80075f4:	08007611 	.word	0x08007611
 80075f8:	2300      	movs	r3, #0
 80075fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075fe:	e0d8      	b.n	80077b2 <UART_SetConfig+0x2e6>
 8007600:	2302      	movs	r3, #2
 8007602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007606:	e0d4      	b.n	80077b2 <UART_SetConfig+0x2e6>
 8007608:	2304      	movs	r3, #4
 800760a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800760e:	e0d0      	b.n	80077b2 <UART_SetConfig+0x2e6>
 8007610:	2308      	movs	r3, #8
 8007612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007616:	e0cc      	b.n	80077b2 <UART_SetConfig+0x2e6>
 8007618:	2310      	movs	r3, #16
 800761a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800761e:	e0c8      	b.n	80077b2 <UART_SetConfig+0x2e6>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a5e      	ldr	r2, [pc, #376]	@ (80077a0 <UART_SetConfig+0x2d4>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d125      	bne.n	8007676 <UART_SetConfig+0x1aa>
 800762a:	4b5b      	ldr	r3, [pc, #364]	@ (8007798 <UART_SetConfig+0x2cc>)
 800762c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007630:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007634:	2b30      	cmp	r3, #48	@ 0x30
 8007636:	d016      	beq.n	8007666 <UART_SetConfig+0x19a>
 8007638:	2b30      	cmp	r3, #48	@ 0x30
 800763a:	d818      	bhi.n	800766e <UART_SetConfig+0x1a2>
 800763c:	2b20      	cmp	r3, #32
 800763e:	d00a      	beq.n	8007656 <UART_SetConfig+0x18a>
 8007640:	2b20      	cmp	r3, #32
 8007642:	d814      	bhi.n	800766e <UART_SetConfig+0x1a2>
 8007644:	2b00      	cmp	r3, #0
 8007646:	d002      	beq.n	800764e <UART_SetConfig+0x182>
 8007648:	2b10      	cmp	r3, #16
 800764a:	d008      	beq.n	800765e <UART_SetConfig+0x192>
 800764c:	e00f      	b.n	800766e <UART_SetConfig+0x1a2>
 800764e:	2300      	movs	r3, #0
 8007650:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007654:	e0ad      	b.n	80077b2 <UART_SetConfig+0x2e6>
 8007656:	2302      	movs	r3, #2
 8007658:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800765c:	e0a9      	b.n	80077b2 <UART_SetConfig+0x2e6>
 800765e:	2304      	movs	r3, #4
 8007660:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007664:	e0a5      	b.n	80077b2 <UART_SetConfig+0x2e6>
 8007666:	2308      	movs	r3, #8
 8007668:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800766c:	e0a1      	b.n	80077b2 <UART_SetConfig+0x2e6>
 800766e:	2310      	movs	r3, #16
 8007670:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007674:	e09d      	b.n	80077b2 <UART_SetConfig+0x2e6>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a4a      	ldr	r2, [pc, #296]	@ (80077a4 <UART_SetConfig+0x2d8>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d125      	bne.n	80076cc <UART_SetConfig+0x200>
 8007680:	4b45      	ldr	r3, [pc, #276]	@ (8007798 <UART_SetConfig+0x2cc>)
 8007682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007686:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800768a:	2bc0      	cmp	r3, #192	@ 0xc0
 800768c:	d016      	beq.n	80076bc <UART_SetConfig+0x1f0>
 800768e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007690:	d818      	bhi.n	80076c4 <UART_SetConfig+0x1f8>
 8007692:	2b80      	cmp	r3, #128	@ 0x80
 8007694:	d00a      	beq.n	80076ac <UART_SetConfig+0x1e0>
 8007696:	2b80      	cmp	r3, #128	@ 0x80
 8007698:	d814      	bhi.n	80076c4 <UART_SetConfig+0x1f8>
 800769a:	2b00      	cmp	r3, #0
 800769c:	d002      	beq.n	80076a4 <UART_SetConfig+0x1d8>
 800769e:	2b40      	cmp	r3, #64	@ 0x40
 80076a0:	d008      	beq.n	80076b4 <UART_SetConfig+0x1e8>
 80076a2:	e00f      	b.n	80076c4 <UART_SetConfig+0x1f8>
 80076a4:	2300      	movs	r3, #0
 80076a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076aa:	e082      	b.n	80077b2 <UART_SetConfig+0x2e6>
 80076ac:	2302      	movs	r3, #2
 80076ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076b2:	e07e      	b.n	80077b2 <UART_SetConfig+0x2e6>
 80076b4:	2304      	movs	r3, #4
 80076b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076ba:	e07a      	b.n	80077b2 <UART_SetConfig+0x2e6>
 80076bc:	2308      	movs	r3, #8
 80076be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076c2:	e076      	b.n	80077b2 <UART_SetConfig+0x2e6>
 80076c4:	2310      	movs	r3, #16
 80076c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076ca:	e072      	b.n	80077b2 <UART_SetConfig+0x2e6>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a35      	ldr	r2, [pc, #212]	@ (80077a8 <UART_SetConfig+0x2dc>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d12a      	bne.n	800772c <UART_SetConfig+0x260>
 80076d6:	4b30      	ldr	r3, [pc, #192]	@ (8007798 <UART_SetConfig+0x2cc>)
 80076d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076e4:	d01a      	beq.n	800771c <UART_SetConfig+0x250>
 80076e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076ea:	d81b      	bhi.n	8007724 <UART_SetConfig+0x258>
 80076ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076f0:	d00c      	beq.n	800770c <UART_SetConfig+0x240>
 80076f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076f6:	d815      	bhi.n	8007724 <UART_SetConfig+0x258>
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d003      	beq.n	8007704 <UART_SetConfig+0x238>
 80076fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007700:	d008      	beq.n	8007714 <UART_SetConfig+0x248>
 8007702:	e00f      	b.n	8007724 <UART_SetConfig+0x258>
 8007704:	2300      	movs	r3, #0
 8007706:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800770a:	e052      	b.n	80077b2 <UART_SetConfig+0x2e6>
 800770c:	2302      	movs	r3, #2
 800770e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007712:	e04e      	b.n	80077b2 <UART_SetConfig+0x2e6>
 8007714:	2304      	movs	r3, #4
 8007716:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800771a:	e04a      	b.n	80077b2 <UART_SetConfig+0x2e6>
 800771c:	2308      	movs	r3, #8
 800771e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007722:	e046      	b.n	80077b2 <UART_SetConfig+0x2e6>
 8007724:	2310      	movs	r3, #16
 8007726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800772a:	e042      	b.n	80077b2 <UART_SetConfig+0x2e6>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a17      	ldr	r2, [pc, #92]	@ (8007790 <UART_SetConfig+0x2c4>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d13a      	bne.n	80077ac <UART_SetConfig+0x2e0>
 8007736:	4b18      	ldr	r3, [pc, #96]	@ (8007798 <UART_SetConfig+0x2cc>)
 8007738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800773c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007740:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007744:	d01a      	beq.n	800777c <UART_SetConfig+0x2b0>
 8007746:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800774a:	d81b      	bhi.n	8007784 <UART_SetConfig+0x2b8>
 800774c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007750:	d00c      	beq.n	800776c <UART_SetConfig+0x2a0>
 8007752:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007756:	d815      	bhi.n	8007784 <UART_SetConfig+0x2b8>
 8007758:	2b00      	cmp	r3, #0
 800775a:	d003      	beq.n	8007764 <UART_SetConfig+0x298>
 800775c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007760:	d008      	beq.n	8007774 <UART_SetConfig+0x2a8>
 8007762:	e00f      	b.n	8007784 <UART_SetConfig+0x2b8>
 8007764:	2300      	movs	r3, #0
 8007766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800776a:	e022      	b.n	80077b2 <UART_SetConfig+0x2e6>
 800776c:	2302      	movs	r3, #2
 800776e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007772:	e01e      	b.n	80077b2 <UART_SetConfig+0x2e6>
 8007774:	2304      	movs	r3, #4
 8007776:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800777a:	e01a      	b.n	80077b2 <UART_SetConfig+0x2e6>
 800777c:	2308      	movs	r3, #8
 800777e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007782:	e016      	b.n	80077b2 <UART_SetConfig+0x2e6>
 8007784:	2310      	movs	r3, #16
 8007786:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800778a:	e012      	b.n	80077b2 <UART_SetConfig+0x2e6>
 800778c:	efff69f3 	.word	0xefff69f3
 8007790:	40008000 	.word	0x40008000
 8007794:	40013800 	.word	0x40013800
 8007798:	40021000 	.word	0x40021000
 800779c:	40004400 	.word	0x40004400
 80077a0:	40004800 	.word	0x40004800
 80077a4:	40004c00 	.word	0x40004c00
 80077a8:	40005000 	.word	0x40005000
 80077ac:	2310      	movs	r3, #16
 80077ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a9f      	ldr	r2, [pc, #636]	@ (8007a34 <UART_SetConfig+0x568>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d17a      	bne.n	80078b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80077c0:	2b08      	cmp	r3, #8
 80077c2:	d824      	bhi.n	800780e <UART_SetConfig+0x342>
 80077c4:	a201      	add	r2, pc, #4	@ (adr r2, 80077cc <UART_SetConfig+0x300>)
 80077c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ca:	bf00      	nop
 80077cc:	080077f1 	.word	0x080077f1
 80077d0:	0800780f 	.word	0x0800780f
 80077d4:	080077f9 	.word	0x080077f9
 80077d8:	0800780f 	.word	0x0800780f
 80077dc:	080077ff 	.word	0x080077ff
 80077e0:	0800780f 	.word	0x0800780f
 80077e4:	0800780f 	.word	0x0800780f
 80077e8:	0800780f 	.word	0x0800780f
 80077ec:	08007807 	.word	0x08007807
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077f0:	f7fc f996 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 80077f4:	61f8      	str	r0, [r7, #28]
        break;
 80077f6:	e010      	b.n	800781a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077f8:	4b8f      	ldr	r3, [pc, #572]	@ (8007a38 <UART_SetConfig+0x56c>)
 80077fa:	61fb      	str	r3, [r7, #28]
        break;
 80077fc:	e00d      	b.n	800781a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077fe:	f7fc f8f7 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 8007802:	61f8      	str	r0, [r7, #28]
        break;
 8007804:	e009      	b.n	800781a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007806:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800780a:	61fb      	str	r3, [r7, #28]
        break;
 800780c:	e005      	b.n	800781a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800780e:	2300      	movs	r3, #0
 8007810:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007818:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	2b00      	cmp	r3, #0
 800781e:	f000 80fb 	beq.w	8007a18 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	685a      	ldr	r2, [r3, #4]
 8007826:	4613      	mov	r3, r2
 8007828:	005b      	lsls	r3, r3, #1
 800782a:	4413      	add	r3, r2
 800782c:	69fa      	ldr	r2, [r7, #28]
 800782e:	429a      	cmp	r2, r3
 8007830:	d305      	bcc.n	800783e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007838:	69fa      	ldr	r2, [r7, #28]
 800783a:	429a      	cmp	r2, r3
 800783c:	d903      	bls.n	8007846 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007844:	e0e8      	b.n	8007a18 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	2200      	movs	r2, #0
 800784a:	461c      	mov	r4, r3
 800784c:	4615      	mov	r5, r2
 800784e:	f04f 0200 	mov.w	r2, #0
 8007852:	f04f 0300 	mov.w	r3, #0
 8007856:	022b      	lsls	r3, r5, #8
 8007858:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800785c:	0222      	lsls	r2, r4, #8
 800785e:	68f9      	ldr	r1, [r7, #12]
 8007860:	6849      	ldr	r1, [r1, #4]
 8007862:	0849      	lsrs	r1, r1, #1
 8007864:	2000      	movs	r0, #0
 8007866:	4688      	mov	r8, r1
 8007868:	4681      	mov	r9, r0
 800786a:	eb12 0a08 	adds.w	sl, r2, r8
 800786e:	eb43 0b09 	adc.w	fp, r3, r9
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	603b      	str	r3, [r7, #0]
 800787a:	607a      	str	r2, [r7, #4]
 800787c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007880:	4650      	mov	r0, sl
 8007882:	4659      	mov	r1, fp
 8007884:	f7f8 fcf4 	bl	8000270 <__aeabi_uldivmod>
 8007888:	4602      	mov	r2, r0
 800788a:	460b      	mov	r3, r1
 800788c:	4613      	mov	r3, r2
 800788e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007896:	d308      	bcc.n	80078aa <UART_SetConfig+0x3de>
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800789e:	d204      	bcs.n	80078aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	69ba      	ldr	r2, [r7, #24]
 80078a6:	60da      	str	r2, [r3, #12]
 80078a8:	e0b6      	b.n	8007a18 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80078b0:	e0b2      	b.n	8007a18 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	69db      	ldr	r3, [r3, #28]
 80078b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078ba:	d15e      	bne.n	800797a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80078bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80078c0:	2b08      	cmp	r3, #8
 80078c2:	d828      	bhi.n	8007916 <UART_SetConfig+0x44a>
 80078c4:	a201      	add	r2, pc, #4	@ (adr r2, 80078cc <UART_SetConfig+0x400>)
 80078c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ca:	bf00      	nop
 80078cc:	080078f1 	.word	0x080078f1
 80078d0:	080078f9 	.word	0x080078f9
 80078d4:	08007901 	.word	0x08007901
 80078d8:	08007917 	.word	0x08007917
 80078dc:	08007907 	.word	0x08007907
 80078e0:	08007917 	.word	0x08007917
 80078e4:	08007917 	.word	0x08007917
 80078e8:	08007917 	.word	0x08007917
 80078ec:	0800790f 	.word	0x0800790f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078f0:	f7fc f916 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 80078f4:	61f8      	str	r0, [r7, #28]
        break;
 80078f6:	e014      	b.n	8007922 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078f8:	f7fc f928 	bl	8003b4c <HAL_RCC_GetPCLK2Freq>
 80078fc:	61f8      	str	r0, [r7, #28]
        break;
 80078fe:	e010      	b.n	8007922 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007900:	4b4d      	ldr	r3, [pc, #308]	@ (8007a38 <UART_SetConfig+0x56c>)
 8007902:	61fb      	str	r3, [r7, #28]
        break;
 8007904:	e00d      	b.n	8007922 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007906:	f7fc f873 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 800790a:	61f8      	str	r0, [r7, #28]
        break;
 800790c:	e009      	b.n	8007922 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800790e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007912:	61fb      	str	r3, [r7, #28]
        break;
 8007914:	e005      	b.n	8007922 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007916:	2300      	movs	r3, #0
 8007918:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007920:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d077      	beq.n	8007a18 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	005a      	lsls	r2, r3, #1
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	085b      	lsrs	r3, r3, #1
 8007932:	441a      	add	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	fbb2 f3f3 	udiv	r3, r2, r3
 800793c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	2b0f      	cmp	r3, #15
 8007942:	d916      	bls.n	8007972 <UART_SetConfig+0x4a6>
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800794a:	d212      	bcs.n	8007972 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	b29b      	uxth	r3, r3
 8007950:	f023 030f 	bic.w	r3, r3, #15
 8007954:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	085b      	lsrs	r3, r3, #1
 800795a:	b29b      	uxth	r3, r3
 800795c:	f003 0307 	and.w	r3, r3, #7
 8007960:	b29a      	uxth	r2, r3
 8007962:	8afb      	ldrh	r3, [r7, #22]
 8007964:	4313      	orrs	r3, r2
 8007966:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	8afa      	ldrh	r2, [r7, #22]
 800796e:	60da      	str	r2, [r3, #12]
 8007970:	e052      	b.n	8007a18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007978:	e04e      	b.n	8007a18 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800797a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800797e:	2b08      	cmp	r3, #8
 8007980:	d827      	bhi.n	80079d2 <UART_SetConfig+0x506>
 8007982:	a201      	add	r2, pc, #4	@ (adr r2, 8007988 <UART_SetConfig+0x4bc>)
 8007984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007988:	080079ad 	.word	0x080079ad
 800798c:	080079b5 	.word	0x080079b5
 8007990:	080079bd 	.word	0x080079bd
 8007994:	080079d3 	.word	0x080079d3
 8007998:	080079c3 	.word	0x080079c3
 800799c:	080079d3 	.word	0x080079d3
 80079a0:	080079d3 	.word	0x080079d3
 80079a4:	080079d3 	.word	0x080079d3
 80079a8:	080079cb 	.word	0x080079cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079ac:	f7fc f8b8 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 80079b0:	61f8      	str	r0, [r7, #28]
        break;
 80079b2:	e014      	b.n	80079de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079b4:	f7fc f8ca 	bl	8003b4c <HAL_RCC_GetPCLK2Freq>
 80079b8:	61f8      	str	r0, [r7, #28]
        break;
 80079ba:	e010      	b.n	80079de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079bc:	4b1e      	ldr	r3, [pc, #120]	@ (8007a38 <UART_SetConfig+0x56c>)
 80079be:	61fb      	str	r3, [r7, #28]
        break;
 80079c0:	e00d      	b.n	80079de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079c2:	f7fc f815 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 80079c6:	61f8      	str	r0, [r7, #28]
        break;
 80079c8:	e009      	b.n	80079de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079ce:	61fb      	str	r3, [r7, #28]
        break;
 80079d0:	e005      	b.n	80079de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80079d2:	2300      	movs	r3, #0
 80079d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80079dc:	bf00      	nop
    }

    if (pclk != 0U)
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d019      	beq.n	8007a18 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	085a      	lsrs	r2, r3, #1
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	441a      	add	r2, r3
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	2b0f      	cmp	r3, #15
 80079fc:	d909      	bls.n	8007a12 <UART_SetConfig+0x546>
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a04:	d205      	bcs.n	8007a12 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	60da      	str	r2, [r3, #12]
 8007a10:	e002      	b.n	8007a18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007a24:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3728      	adds	r7, #40	@ 0x28
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a32:	bf00      	nop
 8007a34:	40008000 	.word	0x40008000
 8007a38:	00f42400 	.word	0x00f42400

08007a3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a48:	f003 0308 	and.w	r3, r3, #8
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00a      	beq.n	8007a66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	430a      	orrs	r2, r1
 8007a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00a      	beq.n	8007a88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	430a      	orrs	r2, r1
 8007a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a8c:	f003 0302 	and.w	r3, r3, #2
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00a      	beq.n	8007aaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	430a      	orrs	r2, r1
 8007aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aae:	f003 0304 	and.w	r3, r3, #4
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00a      	beq.n	8007acc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	430a      	orrs	r2, r1
 8007aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad0:	f003 0310 	and.w	r3, r3, #16
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00a      	beq.n	8007aee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	430a      	orrs	r2, r1
 8007aec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af2:	f003 0320 	and.w	r3, r3, #32
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00a      	beq.n	8007b10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	430a      	orrs	r2, r1
 8007b0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d01a      	beq.n	8007b52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	430a      	orrs	r2, r1
 8007b30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b3a:	d10a      	bne.n	8007b52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	430a      	orrs	r2, r1
 8007b50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00a      	beq.n	8007b74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	430a      	orrs	r2, r1
 8007b72:	605a      	str	r2, [r3, #4]
  }
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b098      	sub	sp, #96	@ 0x60
 8007b84:	af02      	add	r7, sp, #8
 8007b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b90:	f7fa f882 	bl	8001c98 <HAL_GetTick>
 8007b94:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0308 	and.w	r3, r3, #8
 8007ba0:	2b08      	cmp	r3, #8
 8007ba2:	d12e      	bne.n	8007c02 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ba4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bac:	2200      	movs	r2, #0
 8007bae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f88c 	bl	8007cd0 <UART_WaitOnFlagUntilTimeout>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d021      	beq.n	8007c02 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc6:	e853 3f00 	ldrex	r3, [r3]
 8007bca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007bd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	461a      	mov	r2, r3
 8007bda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bde:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007be2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007be4:	e841 2300 	strex	r3, r2, [r1]
 8007be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007bea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1e6      	bne.n	8007bbe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2220      	movs	r2, #32
 8007bf4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	e062      	b.n	8007cc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 0304 	and.w	r3, r3, #4
 8007c0c:	2b04      	cmp	r3, #4
 8007c0e:	d149      	bne.n	8007ca4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f856 	bl	8007cd0 <UART_WaitOnFlagUntilTimeout>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d03c      	beq.n	8007ca4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c32:	e853 3f00 	ldrex	r3, [r3]
 8007c36:	623b      	str	r3, [r7, #32]
   return(result);
 8007c38:	6a3b      	ldr	r3, [r7, #32]
 8007c3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	461a      	mov	r2, r3
 8007c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c48:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c50:	e841 2300 	strex	r3, r2, [r1]
 8007c54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1e6      	bne.n	8007c2a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	3308      	adds	r3, #8
 8007c62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	e853 3f00 	ldrex	r3, [r3]
 8007c6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f023 0301 	bic.w	r3, r3, #1
 8007c72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3308      	adds	r3, #8
 8007c7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c7c:	61fa      	str	r2, [r7, #28]
 8007c7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c80:	69b9      	ldr	r1, [r7, #24]
 8007c82:	69fa      	ldr	r2, [r7, #28]
 8007c84:	e841 2300 	strex	r3, r2, [r1]
 8007c88:	617b      	str	r3, [r7, #20]
   return(result);
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1e5      	bne.n	8007c5c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2220      	movs	r2, #32
 8007c94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	e011      	b.n	8007cc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2220      	movs	r2, #32
 8007ca8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2220      	movs	r2, #32
 8007cae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3758      	adds	r7, #88	@ 0x58
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	603b      	str	r3, [r7, #0]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ce0:	e04f      	b.n	8007d82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ce8:	d04b      	beq.n	8007d82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cea:	f7f9 ffd5 	bl	8001c98 <HAL_GetTick>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	69ba      	ldr	r2, [r7, #24]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d302      	bcc.n	8007d00 <UART_WaitOnFlagUntilTimeout+0x30>
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d101      	bne.n	8007d04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d00:	2303      	movs	r3, #3
 8007d02:	e04e      	b.n	8007da2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 0304 	and.w	r3, r3, #4
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d037      	beq.n	8007d82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	2b80      	cmp	r3, #128	@ 0x80
 8007d16:	d034      	beq.n	8007d82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	2b40      	cmp	r3, #64	@ 0x40
 8007d1c:	d031      	beq.n	8007d82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	69db      	ldr	r3, [r3, #28]
 8007d24:	f003 0308 	and.w	r3, r3, #8
 8007d28:	2b08      	cmp	r3, #8
 8007d2a:	d110      	bne.n	8007d4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2208      	movs	r2, #8
 8007d32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f000 f8ff 	bl	8007f38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2208      	movs	r2, #8
 8007d3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e029      	b.n	8007da2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	69db      	ldr	r3, [r3, #28]
 8007d54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d5c:	d111      	bne.n	8007d82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f000 f8e5 	bl	8007f38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2220      	movs	r2, #32
 8007d72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	e00f      	b.n	8007da2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	69da      	ldr	r2, [r3, #28]
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	bf0c      	ite	eq
 8007d92:	2301      	moveq	r3, #1
 8007d94:	2300      	movne	r3, #0
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	461a      	mov	r2, r3
 8007d9a:	79fb      	ldrb	r3, [r7, #7]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d0a0      	beq.n	8007ce2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
	...

08007dac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b097      	sub	sp, #92	@ 0x5c
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	4613      	mov	r3, r2
 8007db8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	68ba      	ldr	r2, [r7, #8]
 8007dbe:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	88fa      	ldrh	r2, [r7, #6]
 8007dc4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	88fa      	ldrh	r2, [r7, #6]
 8007dcc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dde:	d10e      	bne.n	8007dfe <UART_Start_Receive_IT+0x52>
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d105      	bne.n	8007df4 <UART_Start_Receive_IT+0x48>
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007dee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007df2:	e02d      	b.n	8007e50 <UART_Start_Receive_IT+0xa4>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	22ff      	movs	r2, #255	@ 0xff
 8007df8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007dfc:	e028      	b.n	8007e50 <UART_Start_Receive_IT+0xa4>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10d      	bne.n	8007e22 <UART_Start_Receive_IT+0x76>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d104      	bne.n	8007e18 <UART_Start_Receive_IT+0x6c>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	22ff      	movs	r2, #255	@ 0xff
 8007e12:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007e16:	e01b      	b.n	8007e50 <UART_Start_Receive_IT+0xa4>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	227f      	movs	r2, #127	@ 0x7f
 8007e1c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007e20:	e016      	b.n	8007e50 <UART_Start_Receive_IT+0xa4>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e2a:	d10d      	bne.n	8007e48 <UART_Start_Receive_IT+0x9c>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d104      	bne.n	8007e3e <UART_Start_Receive_IT+0x92>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	227f      	movs	r2, #127	@ 0x7f
 8007e38:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007e3c:	e008      	b.n	8007e50 <UART_Start_Receive_IT+0xa4>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	223f      	movs	r2, #63	@ 0x3f
 8007e42:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007e46:	e003      	b.n	8007e50 <UART_Start_Receive_IT+0xa4>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2222      	movs	r2, #34	@ 0x22
 8007e5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	3308      	adds	r3, #8
 8007e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e6a:	e853 3f00 	ldrex	r3, [r3]
 8007e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e72:	f043 0301 	orr.w	r3, r3, #1
 8007e76:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	3308      	adds	r3, #8
 8007e7e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007e80:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007e82:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e84:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007e86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e88:	e841 2300 	strex	r3, r2, [r1]
 8007e8c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007e8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1e5      	bne.n	8007e60 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e9c:	d107      	bne.n	8007eae <UART_Start_Receive_IT+0x102>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d103      	bne.n	8007eae <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	4a21      	ldr	r2, [pc, #132]	@ (8007f30 <UART_Start_Receive_IT+0x184>)
 8007eaa:	669a      	str	r2, [r3, #104]	@ 0x68
 8007eac:	e002      	b.n	8007eb4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	4a20      	ldr	r2, [pc, #128]	@ (8007f34 <UART_Start_Receive_IT+0x188>)
 8007eb2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d019      	beq.n	8007ef0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec4:	e853 3f00 	ldrex	r3, [r3]
 8007ec8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ecc:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007ed0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007eda:	637b      	str	r3, [r7, #52]	@ 0x34
 8007edc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ede:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007ee0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ee2:	e841 2300 	strex	r3, r2, [r1]
 8007ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1e6      	bne.n	8007ebc <UART_Start_Receive_IT+0x110>
 8007eee:	e018      	b.n	8007f22 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	e853 3f00 	ldrex	r3, [r3]
 8007efc:	613b      	str	r3, [r7, #16]
   return(result);
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	f043 0320 	orr.w	r3, r3, #32
 8007f04:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f0e:	623b      	str	r3, [r7, #32]
 8007f10:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f12:	69f9      	ldr	r1, [r7, #28]
 8007f14:	6a3a      	ldr	r2, [r7, #32]
 8007f16:	e841 2300 	strex	r3, r2, [r1]
 8007f1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1e6      	bne.n	8007ef0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	375c      	adds	r7, #92	@ 0x5c
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr
 8007f30:	0800823d 	.word	0x0800823d
 8007f34:	08008081 	.word	0x08008081

08007f38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b095      	sub	sp, #84	@ 0x54
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f48:	e853 3f00 	ldrex	r3, [r3]
 8007f4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f60:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f66:	e841 2300 	strex	r3, r2, [r1]
 8007f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1e6      	bne.n	8007f40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	3308      	adds	r3, #8
 8007f78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7a:	6a3b      	ldr	r3, [r7, #32]
 8007f7c:	e853 3f00 	ldrex	r3, [r3]
 8007f80:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	f023 0301 	bic.w	r3, r3, #1
 8007f88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	3308      	adds	r3, #8
 8007f90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f9a:	e841 2300 	strex	r3, r2, [r1]
 8007f9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1e5      	bne.n	8007f72 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d118      	bne.n	8007fe0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	e853 3f00 	ldrex	r3, [r3]
 8007fba:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	f023 0310 	bic.w	r3, r3, #16
 8007fc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	461a      	mov	r2, r3
 8007fca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fcc:	61bb      	str	r3, [r7, #24]
 8007fce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd0:	6979      	ldr	r1, [r7, #20]
 8007fd2:	69ba      	ldr	r2, [r7, #24]
 8007fd4:	e841 2300 	strex	r3, r2, [r1]
 8007fd8:	613b      	str	r3, [r7, #16]
   return(result);
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1e6      	bne.n	8007fae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2220      	movs	r2, #32
 8007fe4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007ff4:	bf00      	nop
 8007ff6:	3754      	adds	r7, #84	@ 0x54
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800800c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2200      	movs	r2, #0
 8008012:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2200      	movs	r2, #0
 800801a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f7ff fa3e 	bl	80074a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008024:	bf00      	nop
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b088      	sub	sp, #32
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	e853 3f00 	ldrex	r3, [r3]
 8008040:	60bb      	str	r3, [r7, #8]
   return(result);
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008048:	61fb      	str	r3, [r7, #28]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	461a      	mov	r2, r3
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	61bb      	str	r3, [r7, #24]
 8008054:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008056:	6979      	ldr	r1, [r7, #20]
 8008058:	69ba      	ldr	r2, [r7, #24]
 800805a:	e841 2300 	strex	r3, r2, [r1]
 800805e:	613b      	str	r3, [r7, #16]
   return(result);
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1e6      	bne.n	8008034 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2220      	movs	r2, #32
 800806a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7ff fa0a 	bl	800748c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008078:	bf00      	nop
 800807a:	3720      	adds	r7, #32
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b09c      	sub	sp, #112	@ 0x70
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800808e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008098:	2b22      	cmp	r3, #34	@ 0x22
 800809a:	f040 80be 	bne.w	800821a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80080a4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80080a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80080ac:	b2d9      	uxtb	r1, r3
 80080ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80080b2:	b2da      	uxtb	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080b8:	400a      	ands	r2, r1
 80080ba:	b2d2      	uxtb	r2, r2
 80080bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080c2:	1c5a      	adds	r2, r3, #1
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	3b01      	subs	r3, #1
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f040 80a3 	bne.w	800822e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080f0:	e853 3f00 	ldrex	r3, [r3]
 80080f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80080f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	461a      	mov	r2, r3
 8008104:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008106:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008108:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800810c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800810e:	e841 2300 	strex	r3, r2, [r1]
 8008112:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008114:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008116:	2b00      	cmp	r3, #0
 8008118:	d1e6      	bne.n	80080e8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	3308      	adds	r3, #8
 8008120:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008124:	e853 3f00 	ldrex	r3, [r3]
 8008128:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800812a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800812c:	f023 0301 	bic.w	r3, r3, #1
 8008130:	667b      	str	r3, [r7, #100]	@ 0x64
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	3308      	adds	r3, #8
 8008138:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800813a:	647a      	str	r2, [r7, #68]	@ 0x44
 800813c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008140:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008142:	e841 2300 	strex	r3, r2, [r1]
 8008146:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1e5      	bne.n	800811a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2220      	movs	r2, #32
 8008152:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a34      	ldr	r2, [pc, #208]	@ (8008238 <UART_RxISR_8BIT+0x1b8>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d01f      	beq.n	80081ac <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008176:	2b00      	cmp	r3, #0
 8008178:	d018      	beq.n	80081ac <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008182:	e853 3f00 	ldrex	r3, [r3]
 8008186:	623b      	str	r3, [r7, #32]
   return(result);
 8008188:	6a3b      	ldr	r3, [r7, #32]
 800818a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800818e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	461a      	mov	r2, r3
 8008196:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008198:	633b      	str	r3, [r7, #48]	@ 0x30
 800819a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800819e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081a0:	e841 2300 	strex	r3, r2, [r1]
 80081a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80081a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1e6      	bne.n	800817a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d12e      	bne.n	8008212 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	e853 3f00 	ldrex	r3, [r3]
 80081c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f023 0310 	bic.w	r3, r3, #16
 80081ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	461a      	mov	r2, r3
 80081d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80081d8:	61fb      	str	r3, [r7, #28]
 80081da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081dc:	69b9      	ldr	r1, [r7, #24]
 80081de:	69fa      	ldr	r2, [r7, #28]
 80081e0:	e841 2300 	strex	r3, r2, [r1]
 80081e4:	617b      	str	r3, [r7, #20]
   return(result);
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1e6      	bne.n	80081ba <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	69db      	ldr	r3, [r3, #28]
 80081f2:	f003 0310 	and.w	r3, r3, #16
 80081f6:	2b10      	cmp	r3, #16
 80081f8:	d103      	bne.n	8008202 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2210      	movs	r2, #16
 8008200:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008208:	4619      	mov	r1, r3
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7ff f952 	bl	80074b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008210:	e00d      	b.n	800822e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f7f8 fb6a 	bl	80008ec <HAL_UART_RxCpltCallback>
}
 8008218:	e009      	b.n	800822e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	8b1b      	ldrh	r3, [r3, #24]
 8008220:	b29a      	uxth	r2, r3
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f042 0208 	orr.w	r2, r2, #8
 800822a:	b292      	uxth	r2, r2
 800822c:	831a      	strh	r2, [r3, #24]
}
 800822e:	bf00      	nop
 8008230:	3770      	adds	r7, #112	@ 0x70
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	40008000 	.word	0x40008000

0800823c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b09c      	sub	sp, #112	@ 0x70
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800824a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008254:	2b22      	cmp	r3, #34	@ 0x22
 8008256:	f040 80be 	bne.w	80083d6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008260:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008268:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800826a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800826e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008272:	4013      	ands	r3, r2
 8008274:	b29a      	uxth	r2, r3
 8008276:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008278:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800827e:	1c9a      	adds	r2, r3, #2
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800828a:	b29b      	uxth	r3, r3
 800828c:	3b01      	subs	r3, #1
 800828e:	b29a      	uxth	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800829c:	b29b      	uxth	r3, r3
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f040 80a3 	bne.w	80083ea <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082ac:	e853 3f00 	ldrex	r3, [r3]
 80082b0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80082b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	461a      	mov	r2, r3
 80082c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80082c4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80082c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80082ca:	e841 2300 	strex	r3, r2, [r1]
 80082ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80082d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1e6      	bne.n	80082a4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	3308      	adds	r3, #8
 80082dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082e0:	e853 3f00 	ldrex	r3, [r3]
 80082e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80082e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e8:	f023 0301 	bic.w	r3, r3, #1
 80082ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	3308      	adds	r3, #8
 80082f4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80082f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80082f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80082fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80082fe:	e841 2300 	strex	r3, r2, [r1]
 8008302:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1e5      	bne.n	80082d6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2220      	movs	r2, #32
 800830e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a34      	ldr	r2, [pc, #208]	@ (80083f4 <UART_RxISR_16BIT+0x1b8>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d01f      	beq.n	8008368 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008332:	2b00      	cmp	r3, #0
 8008334:	d018      	beq.n	8008368 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833c:	6a3b      	ldr	r3, [r7, #32]
 800833e:	e853 3f00 	ldrex	r3, [r3]
 8008342:	61fb      	str	r3, [r7, #28]
   return(result);
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800834a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	461a      	mov	r2, r3
 8008352:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008354:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008356:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008358:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800835a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800835c:	e841 2300 	strex	r3, r2, [r1]
 8008360:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008364:	2b00      	cmp	r3, #0
 8008366:	d1e6      	bne.n	8008336 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800836c:	2b01      	cmp	r3, #1
 800836e:	d12e      	bne.n	80083ce <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	e853 3f00 	ldrex	r3, [r3]
 8008382:	60bb      	str	r3, [r7, #8]
   return(result);
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	f023 0310 	bic.w	r3, r3, #16
 800838a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	461a      	mov	r2, r3
 8008392:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008394:	61bb      	str	r3, [r7, #24]
 8008396:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008398:	6979      	ldr	r1, [r7, #20]
 800839a:	69ba      	ldr	r2, [r7, #24]
 800839c:	e841 2300 	strex	r3, r2, [r1]
 80083a0:	613b      	str	r3, [r7, #16]
   return(result);
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d1e6      	bne.n	8008376 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	69db      	ldr	r3, [r3, #28]
 80083ae:	f003 0310 	and.w	r3, r3, #16
 80083b2:	2b10      	cmp	r3, #16
 80083b4:	d103      	bne.n	80083be <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2210      	movs	r2, #16
 80083bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80083c4:	4619      	mov	r1, r3
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f7ff f874 	bl	80074b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80083cc:	e00d      	b.n	80083ea <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7f8 fa8c 	bl	80008ec <HAL_UART_RxCpltCallback>
}
 80083d4:	e009      	b.n	80083ea <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	8b1b      	ldrh	r3, [r3, #24]
 80083dc:	b29a      	uxth	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f042 0208 	orr.w	r2, r2, #8
 80083e6:	b292      	uxth	r2, r2
 80083e8:	831a      	strh	r2, [r3, #24]
}
 80083ea:	bf00      	nop
 80083ec:	3770      	adds	r7, #112	@ 0x70
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	40008000 	.word	0x40008000

080083f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008400:	bf00      	nop
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800840c:	b480      	push	{r7}
 800840e:	b085      	sub	sp, #20
 8008410:	af00      	add	r7, sp, #0
 8008412:	4603      	mov	r3, r0
 8008414:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008416:	2300      	movs	r3, #0
 8008418:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800841a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800841e:	2b84      	cmp	r3, #132	@ 0x84
 8008420:	d005      	beq.n	800842e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008422:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	4413      	add	r3, r2
 800842a:	3303      	adds	r3, #3
 800842c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800842e:	68fb      	ldr	r3, [r7, #12]
}
 8008430:	4618      	mov	r0, r3
 8008432:	3714      	adds	r7, #20
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008440:	f000 fde2 	bl	8009008 <vTaskStartScheduler>
  
  return osOK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	bd80      	pop	{r7, pc}

0800844a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800844a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800844c:	b089      	sub	sp, #36	@ 0x24
 800844e:	af04      	add	r7, sp, #16
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	695b      	ldr	r3, [r3, #20]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d020      	beq.n	800849e <osThreadCreate+0x54>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d01c      	beq.n	800849e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	685c      	ldr	r4, [r3, #4]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	691e      	ldr	r6, [r3, #16]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008476:	4618      	mov	r0, r3
 8008478:	f7ff ffc8 	bl	800840c <makeFreeRtosPriority>
 800847c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	695b      	ldr	r3, [r3, #20]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008486:	9202      	str	r2, [sp, #8]
 8008488:	9301      	str	r3, [sp, #4]
 800848a:	9100      	str	r1, [sp, #0]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	4632      	mov	r2, r6
 8008490:	4629      	mov	r1, r5
 8008492:	4620      	mov	r0, r4
 8008494:	f000 fbd2 	bl	8008c3c <xTaskCreateStatic>
 8008498:	4603      	mov	r3, r0
 800849a:	60fb      	str	r3, [r7, #12]
 800849c:	e01c      	b.n	80084d8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	685c      	ldr	r4, [r3, #4]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80084aa:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7ff ffaa 	bl	800840c <makeFreeRtosPriority>
 80084b8:	4602      	mov	r2, r0
 80084ba:	f107 030c 	add.w	r3, r7, #12
 80084be:	9301      	str	r3, [sp, #4]
 80084c0:	9200      	str	r2, [sp, #0]
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	4632      	mov	r2, r6
 80084c6:	4629      	mov	r1, r5
 80084c8:	4620      	mov	r0, r4
 80084ca:	f000 fc17 	bl	8008cfc <xTaskCreate>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d001      	beq.n	80084d8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80084d4:	2300      	movs	r3, #0
 80084d6:	e000      	b.n	80084da <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80084d8:	68fb      	ldr	r3, [r7, #12]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3714      	adds	r7, #20
 80084de:	46bd      	mov	sp, r7
 80084e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080084e2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b084      	sub	sp, #16
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d001      	beq.n	80084f8 <osDelay+0x16>
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	e000      	b.n	80084fa <osDelay+0x18>
 80084f8:	2301      	movs	r3, #1
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 fd4e 	bl	8008f9c <vTaskDelay>
  
  return osOK;
 8008500:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008502:	4618      	mov	r0, r3
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800850a:	b480      	push	{r7}
 800850c:	b083      	sub	sp, #12
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f103 0208 	add.w	r2, r3, #8
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008522:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f103 0208 	add.w	r2, r3, #8
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f103 0208 	add.w	r2, r3, #8
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800853e:	bf00      	nop
 8008540:	370c      	adds	r7, #12
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800854a:	b480      	push	{r7}
 800854c:	b083      	sub	sp, #12
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008558:	bf00      	nop
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	689a      	ldr	r2, [r3, #8]
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	683a      	ldr	r2, [r7, #0]
 8008588:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	683a      	ldr	r2, [r7, #0]
 800858e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	1c5a      	adds	r2, r3, #1
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	601a      	str	r2, [r3, #0]
}
 80085a0:	bf00      	nop
 80085a2:	3714      	adds	r7, #20
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80085c2:	d103      	bne.n	80085cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	60fb      	str	r3, [r7, #12]
 80085ca:	e00c      	b.n	80085e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	3308      	adds	r3, #8
 80085d0:	60fb      	str	r3, [r7, #12]
 80085d2:	e002      	b.n	80085da <vListInsert+0x2e>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	60fb      	str	r3, [r7, #12]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	68ba      	ldr	r2, [r7, #8]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d2f6      	bcs.n	80085d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	685a      	ldr	r2, [r3, #4]
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	683a      	ldr	r2, [r7, #0]
 80085f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	683a      	ldr	r2, [r7, #0]
 8008600:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	1c5a      	adds	r2, r3, #1
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	601a      	str	r2, [r3, #0]
}
 8008612:	bf00      	nop
 8008614:	3714      	adds	r7, #20
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr

0800861e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800861e:	b480      	push	{r7}
 8008620:	b085      	sub	sp, #20
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	6892      	ldr	r2, [r2, #8]
 8008634:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	6852      	ldr	r2, [r2, #4]
 800863e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	429a      	cmp	r2, r3
 8008648:	d103      	bne.n	8008652 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	689a      	ldr	r2, [r3, #8]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	1e5a      	subs	r2, r3, #1
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
}
 8008666:	4618      	mov	r0, r3
 8008668:	3714      	adds	r7, #20
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr
	...

08008674 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d10b      	bne.n	80086a0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800868c:	f383 8811 	msr	BASEPRI, r3
 8008690:	f3bf 8f6f 	isb	sy
 8008694:	f3bf 8f4f 	dsb	sy
 8008698:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800869a:	bf00      	nop
 800869c:	bf00      	nop
 800869e:	e7fd      	b.n	800869c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80086a0:	f001 fba2 	bl	8009de8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086ac:	68f9      	ldr	r1, [r7, #12]
 80086ae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80086b0:	fb01 f303 	mul.w	r3, r1, r3
 80086b4:	441a      	add	r2, r3
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2200      	movs	r2, #0
 80086be:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086d0:	3b01      	subs	r3, #1
 80086d2:	68f9      	ldr	r1, [r7, #12]
 80086d4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80086d6:	fb01 f303 	mul.w	r3, r1, r3
 80086da:	441a      	add	r2, r3
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	22ff      	movs	r2, #255	@ 0xff
 80086e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	22ff      	movs	r2, #255	@ 0xff
 80086ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d114      	bne.n	8008720 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d01a      	beq.n	8008734 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	3310      	adds	r3, #16
 8008702:	4618      	mov	r0, r3
 8008704:	f000 feda 	bl	80094bc <xTaskRemoveFromEventList>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d012      	beq.n	8008734 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800870e:	4b0d      	ldr	r3, [pc, #52]	@ (8008744 <xQueueGenericReset+0xd0>)
 8008710:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008714:	601a      	str	r2, [r3, #0]
 8008716:	f3bf 8f4f 	dsb	sy
 800871a:	f3bf 8f6f 	isb	sy
 800871e:	e009      	b.n	8008734 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	3310      	adds	r3, #16
 8008724:	4618      	mov	r0, r3
 8008726:	f7ff fef0 	bl	800850a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	3324      	adds	r3, #36	@ 0x24
 800872e:	4618      	mov	r0, r3
 8008730:	f7ff feeb 	bl	800850a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008734:	f001 fb8a 	bl	8009e4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008738:	2301      	movs	r3, #1
}
 800873a:	4618      	mov	r0, r3
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	e000ed04 	.word	0xe000ed04

08008748 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008748:	b580      	push	{r7, lr}
 800874a:	b08a      	sub	sp, #40	@ 0x28
 800874c:	af02      	add	r7, sp, #8
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	4613      	mov	r3, r2
 8008754:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10b      	bne.n	8008774 <xQueueGenericCreate+0x2c>
	__asm volatile
 800875c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008760:	f383 8811 	msr	BASEPRI, r3
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	613b      	str	r3, [r7, #16]
}
 800876e:	bf00      	nop
 8008770:	bf00      	nop
 8008772:	e7fd      	b.n	8008770 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	68ba      	ldr	r2, [r7, #8]
 8008778:	fb02 f303 	mul.w	r3, r2, r3
 800877c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	3348      	adds	r3, #72	@ 0x48
 8008782:	4618      	mov	r0, r3
 8008784:	f001 fc52 	bl	800a02c <pvPortMalloc>
 8008788:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d011      	beq.n	80087b4 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	3348      	adds	r3, #72	@ 0x48
 8008798:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087a2:	79fa      	ldrb	r2, [r7, #7]
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	9300      	str	r3, [sp, #0]
 80087a8:	4613      	mov	r3, r2
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	68b9      	ldr	r1, [r7, #8]
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f000 f805 	bl	80087be <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80087b4:	69bb      	ldr	r3, [r7, #24]
	}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3720      	adds	r7, #32
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b084      	sub	sp, #16
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	60f8      	str	r0, [r7, #12]
 80087c6:	60b9      	str	r1, [r7, #8]
 80087c8:	607a      	str	r2, [r7, #4]
 80087ca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d103      	bne.n	80087da <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	69ba      	ldr	r2, [r7, #24]
 80087d6:	601a      	str	r2, [r3, #0]
 80087d8:	e002      	b.n	80087e0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	68fa      	ldr	r2, [r7, #12]
 80087e4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80087ec:	2101      	movs	r1, #1
 80087ee:	69b8      	ldr	r0, [r7, #24]
 80087f0:	f7ff ff40 	bl	8008674 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80087f4:	bf00      	nop
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b08e      	sub	sp, #56	@ 0x38
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800880a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880c:	2b00      	cmp	r3, #0
 800880e:	d10b      	bne.n	8008828 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008814:	f383 8811 	msr	BASEPRI, r3
 8008818:	f3bf 8f6f 	isb	sy
 800881c:	f3bf 8f4f 	dsb	sy
 8008820:	623b      	str	r3, [r7, #32]
}
 8008822:	bf00      	nop
 8008824:	bf00      	nop
 8008826:	e7fd      	b.n	8008824 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00b      	beq.n	8008848 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8008830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008834:	f383 8811 	msr	BASEPRI, r3
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	f3bf 8f4f 	dsb	sy
 8008840:	61fb      	str	r3, [r7, #28]
}
 8008842:	bf00      	nop
 8008844:	bf00      	nop
 8008846:	e7fd      	b.n	8008844 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d103      	bne.n	8008858 <xQueueGiveFromISR+0x5c>
 8008850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d101      	bne.n	800885c <xQueueGiveFromISR+0x60>
 8008858:	2301      	movs	r3, #1
 800885a:	e000      	b.n	800885e <xQueueGiveFromISR+0x62>
 800885c:	2300      	movs	r3, #0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10b      	bne.n	800887a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8008862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008866:	f383 8811 	msr	BASEPRI, r3
 800886a:	f3bf 8f6f 	isb	sy
 800886e:	f3bf 8f4f 	dsb	sy
 8008872:	61bb      	str	r3, [r7, #24]
}
 8008874:	bf00      	nop
 8008876:	bf00      	nop
 8008878:	e7fd      	b.n	8008876 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800887a:	f001 fb95 	bl	8009fa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800887e:	f3ef 8211 	mrs	r2, BASEPRI
 8008882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008886:	f383 8811 	msr	BASEPRI, r3
 800888a:	f3bf 8f6f 	isb	sy
 800888e:	f3bf 8f4f 	dsb	sy
 8008892:	617a      	str	r2, [r7, #20]
 8008894:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008896:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008898:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800889a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800889e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80088a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d22b      	bcs.n	8008902 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80088aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80088b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b6:	1c5a      	adds	r2, r3, #1
 80088b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ba:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80088bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80088c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088c4:	d112      	bne.n	80088ec <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d016      	beq.n	80088fc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d0:	3324      	adds	r3, #36	@ 0x24
 80088d2:	4618      	mov	r0, r3
 80088d4:	f000 fdf2 	bl	80094bc <xTaskRemoveFromEventList>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00e      	beq.n	80088fc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d00b      	beq.n	80088fc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	2201      	movs	r2, #1
 80088e8:	601a      	str	r2, [r3, #0]
 80088ea:	e007      	b.n	80088fc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80088ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088f0:	3301      	adds	r3, #1
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	b25a      	sxtb	r2, r3
 80088f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80088fc:	2301      	movs	r3, #1
 80088fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008900:	e001      	b.n	8008906 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008902:	2300      	movs	r3, #0
 8008904:	637b      	str	r3, [r7, #52]	@ 0x34
 8008906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008908:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008910:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008914:	4618      	mov	r0, r3
 8008916:	3738      	adds	r7, #56	@ 0x38
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b08e      	sub	sp, #56	@ 0x38
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008926:	2300      	movs	r3, #0
 8008928:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800892e:	2300      	movs	r3, #0
 8008930:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008934:	2b00      	cmp	r3, #0
 8008936:	d10b      	bne.n	8008950 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800893c:	f383 8811 	msr	BASEPRI, r3
 8008940:	f3bf 8f6f 	isb	sy
 8008944:	f3bf 8f4f 	dsb	sy
 8008948:	623b      	str	r3, [r7, #32]
}
 800894a:	bf00      	nop
 800894c:	bf00      	nop
 800894e:	e7fd      	b.n	800894c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00b      	beq.n	8008970 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800895c:	f383 8811 	msr	BASEPRI, r3
 8008960:	f3bf 8f6f 	isb	sy
 8008964:	f3bf 8f4f 	dsb	sy
 8008968:	61fb      	str	r3, [r7, #28]
}
 800896a:	bf00      	nop
 800896c:	bf00      	nop
 800896e:	e7fd      	b.n	800896c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008970:	f000 ff6a 	bl	8009848 <xTaskGetSchedulerState>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d102      	bne.n	8008980 <xQueueSemaphoreTake+0x64>
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d101      	bne.n	8008984 <xQueueSemaphoreTake+0x68>
 8008980:	2301      	movs	r3, #1
 8008982:	e000      	b.n	8008986 <xQueueSemaphoreTake+0x6a>
 8008984:	2300      	movs	r3, #0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d10b      	bne.n	80089a2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800898a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800898e:	f383 8811 	msr	BASEPRI, r3
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	61bb      	str	r3, [r7, #24]
}
 800899c:	bf00      	nop
 800899e:	bf00      	nop
 80089a0:	e7fd      	b.n	800899e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089a2:	f001 fa21 	bl	8009de8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80089a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089aa:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80089ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d024      	beq.n	80089fc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80089b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b4:	1e5a      	subs	r2, r3, #1
 80089b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d104      	bne.n	80089cc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80089c2:	f001 f865 	bl	8009a90 <pvTaskIncrementMutexHeldCount>
 80089c6:	4602      	mov	r2, r0
 80089c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ca:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00f      	beq.n	80089f4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d6:	3310      	adds	r3, #16
 80089d8:	4618      	mov	r0, r3
 80089da:	f000 fd6f 	bl	80094bc <xTaskRemoveFromEventList>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d007      	beq.n	80089f4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80089e4:	4b54      	ldr	r3, [pc, #336]	@ (8008b38 <xQueueSemaphoreTake+0x21c>)
 80089e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089ea:	601a      	str	r2, [r3, #0]
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80089f4:	f001 fa2a 	bl	8009e4c <vPortExitCritical>
				return pdPASS;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e098      	b.n	8008b2e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d112      	bne.n	8008a28 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d00b      	beq.n	8008a20 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a0c:	f383 8811 	msr	BASEPRI, r3
 8008a10:	f3bf 8f6f 	isb	sy
 8008a14:	f3bf 8f4f 	dsb	sy
 8008a18:	617b      	str	r3, [r7, #20]
}
 8008a1a:	bf00      	nop
 8008a1c:	bf00      	nop
 8008a1e:	e7fd      	b.n	8008a1c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008a20:	f001 fa14 	bl	8009e4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a24:	2300      	movs	r3, #0
 8008a26:	e082      	b.n	8008b2e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d106      	bne.n	8008a3c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a2e:	f107 030c 	add.w	r3, r7, #12
 8008a32:	4618      	mov	r0, r3
 8008a34:	f000 fda6 	bl	8009584 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a3c:	f001 fa06 	bl	8009e4c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a40:	f000 fb4c 	bl	80090dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a44:	f001 f9d0 	bl	8009de8 <vPortEnterCritical>
 8008a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a4a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a4e:	b25b      	sxtb	r3, r3
 8008a50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a54:	d103      	bne.n	8008a5e <xQueueSemaphoreTake+0x142>
 8008a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a64:	b25b      	sxtb	r3, r3
 8008a66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a6a:	d103      	bne.n	8008a74 <xQueueSemaphoreTake+0x158>
 8008a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a74:	f001 f9ea 	bl	8009e4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a78:	463a      	mov	r2, r7
 8008a7a:	f107 030c 	add.w	r3, r7, #12
 8008a7e:	4611      	mov	r1, r2
 8008a80:	4618      	mov	r0, r3
 8008a82:	f000 fd95 	bl	80095b0 <xTaskCheckForTimeOut>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d132      	bne.n	8008af2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a8c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008a8e:	f000 f8bf 	bl	8008c10 <prvIsQueueEmpty>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d026      	beq.n	8008ae6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d109      	bne.n	8008ab4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008aa0:	f001 f9a2 	bl	8009de8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f000 feeb 	bl	8009884 <xTaskPriorityInherit>
 8008aae:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008ab0:	f001 f9cc 	bl	8009e4c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab6:	3324      	adds	r3, #36	@ 0x24
 8008ab8:	683a      	ldr	r2, [r7, #0]
 8008aba:	4611      	mov	r1, r2
 8008abc:	4618      	mov	r0, r3
 8008abe:	f000 fcd7 	bl	8009470 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ac2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008ac4:	f000 f852 	bl	8008b6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ac8:	f000 fb16 	bl	80090f8 <xTaskResumeAll>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	f47f af67 	bne.w	80089a2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008ad4:	4b18      	ldr	r3, [pc, #96]	@ (8008b38 <xQueueSemaphoreTake+0x21c>)
 8008ad6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ada:	601a      	str	r2, [r3, #0]
 8008adc:	f3bf 8f4f 	dsb	sy
 8008ae0:	f3bf 8f6f 	isb	sy
 8008ae4:	e75d      	b.n	80089a2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008ae6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008ae8:	f000 f840 	bl	8008b6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008aec:	f000 fb04 	bl	80090f8 <xTaskResumeAll>
 8008af0:	e757      	b.n	80089a2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008af2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008af4:	f000 f83a 	bl	8008b6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008af8:	f000 fafe 	bl	80090f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008afc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008afe:	f000 f887 	bl	8008c10 <prvIsQueueEmpty>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f43f af4c 	beq.w	80089a2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00d      	beq.n	8008b2c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008b10:	f001 f96a 	bl	8009de8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008b14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b16:	f000 f811 	bl	8008b3c <prvGetDisinheritPriorityAfterTimeout>
 8008b1a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008b22:	4618      	mov	r0, r3
 8008b24:	f000 ff24 	bl	8009970 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008b28:	f001 f990 	bl	8009e4c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3738      	adds	r7, #56	@ 0x38
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	e000ed04 	.word	0xe000ed04

08008b3c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d006      	beq.n	8008b5a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f1c3 0307 	rsb	r3, r3, #7
 8008b56:	60fb      	str	r3, [r7, #12]
 8008b58:	e001      	b.n	8008b5e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
	}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3714      	adds	r7, #20
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008b74:	f001 f938 	bl	8009de8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b80:	e011      	b.n	8008ba6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d012      	beq.n	8008bb0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	3324      	adds	r3, #36	@ 0x24
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f000 fc94 	bl	80094bc <xTaskRemoveFromEventList>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d001      	beq.n	8008b9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008b9a:	f000 fd6d 	bl	8009678 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008b9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	dce9      	bgt.n	8008b82 <prvUnlockQueue+0x16>
 8008bae:	e000      	b.n	8008bb2 <prvUnlockQueue+0x46>
					break;
 8008bb0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	22ff      	movs	r2, #255	@ 0xff
 8008bb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008bba:	f001 f947 	bl	8009e4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008bbe:	f001 f913 	bl	8009de8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008bc8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008bca:	e011      	b.n	8008bf0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d012      	beq.n	8008bfa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	3310      	adds	r3, #16
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f000 fc6f 	bl	80094bc <xTaskRemoveFromEventList>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d001      	beq.n	8008be8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008be4:	f000 fd48 	bl	8009678 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008be8:	7bbb      	ldrb	r3, [r7, #14]
 8008bea:	3b01      	subs	r3, #1
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008bf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	dce9      	bgt.n	8008bcc <prvUnlockQueue+0x60>
 8008bf8:	e000      	b.n	8008bfc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008bfa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	22ff      	movs	r2, #255	@ 0xff
 8008c00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008c04:	f001 f922 	bl	8009e4c <vPortExitCritical>
}
 8008c08:	bf00      	nop
 8008c0a:	3710      	adds	r7, #16
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c18:	f001 f8e6 	bl	8009de8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d102      	bne.n	8008c2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008c24:	2301      	movs	r3, #1
 8008c26:	60fb      	str	r3, [r7, #12]
 8008c28:	e001      	b.n	8008c2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c2e:	f001 f90d 	bl	8009e4c <vPortExitCritical>

	return xReturn;
 8008c32:	68fb      	ldr	r3, [r7, #12]
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b08e      	sub	sp, #56	@ 0x38
 8008c40:	af04      	add	r7, sp, #16
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	607a      	str	r2, [r7, #4]
 8008c48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008c4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d10b      	bne.n	8008c68 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c54:	f383 8811 	msr	BASEPRI, r3
 8008c58:	f3bf 8f6f 	isb	sy
 8008c5c:	f3bf 8f4f 	dsb	sy
 8008c60:	623b      	str	r3, [r7, #32]
}
 8008c62:	bf00      	nop
 8008c64:	bf00      	nop
 8008c66:	e7fd      	b.n	8008c64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d10b      	bne.n	8008c86 <xTaskCreateStatic+0x4a>
	__asm volatile
 8008c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c72:	f383 8811 	msr	BASEPRI, r3
 8008c76:	f3bf 8f6f 	isb	sy
 8008c7a:	f3bf 8f4f 	dsb	sy
 8008c7e:	61fb      	str	r3, [r7, #28]
}
 8008c80:	bf00      	nop
 8008c82:	bf00      	nop
 8008c84:	e7fd      	b.n	8008c82 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008c86:	23a0      	movs	r3, #160	@ 0xa0
 8008c88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	2ba0      	cmp	r3, #160	@ 0xa0
 8008c8e:	d00b      	beq.n	8008ca8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	61bb      	str	r3, [r7, #24]
}
 8008ca2:	bf00      	nop
 8008ca4:	bf00      	nop
 8008ca6:	e7fd      	b.n	8008ca4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008ca8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d01e      	beq.n	8008cee <xTaskCreateStatic+0xb2>
 8008cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d01b      	beq.n	8008cee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008cbe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc2:	2202      	movs	r2, #2
 8008cc4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008cc8:	2300      	movs	r3, #0
 8008cca:	9303      	str	r3, [sp, #12]
 8008ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cce:	9302      	str	r3, [sp, #8]
 8008cd0:	f107 0314 	add.w	r3, r7, #20
 8008cd4:	9301      	str	r3, [sp, #4]
 8008cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	68b9      	ldr	r1, [r7, #8]
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f000 f851 	bl	8008d88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ce6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008ce8:	f000 f8ee 	bl	8008ec8 <prvAddNewTaskToReadyList>
 8008cec:	e001      	b.n	8008cf2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008cf2:	697b      	ldr	r3, [r7, #20]
	}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3728      	adds	r7, #40	@ 0x28
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b08c      	sub	sp, #48	@ 0x30
 8008d00:	af04      	add	r7, sp, #16
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	603b      	str	r3, [r7, #0]
 8008d08:	4613      	mov	r3, r2
 8008d0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008d0c:	88fb      	ldrh	r3, [r7, #6]
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4618      	mov	r0, r3
 8008d12:	f001 f98b 	bl	800a02c <pvPortMalloc>
 8008d16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00e      	beq.n	8008d3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008d1e:	20a0      	movs	r0, #160	@ 0xa0
 8008d20:	f001 f984 	bl	800a02c <pvPortMalloc>
 8008d24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d003      	beq.n	8008d34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	697a      	ldr	r2, [r7, #20]
 8008d30:	631a      	str	r2, [r3, #48]	@ 0x30
 8008d32:	e005      	b.n	8008d40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008d34:	6978      	ldr	r0, [r7, #20]
 8008d36:	f001 fa47 	bl	800a1c8 <vPortFree>
 8008d3a:	e001      	b.n	8008d40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d017      	beq.n	8008d76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008d4e:	88fa      	ldrh	r2, [r7, #6]
 8008d50:	2300      	movs	r3, #0
 8008d52:	9303      	str	r3, [sp, #12]
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	9302      	str	r3, [sp, #8]
 8008d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d5a:	9301      	str	r3, [sp, #4]
 8008d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d5e:	9300      	str	r3, [sp, #0]
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	68b9      	ldr	r1, [r7, #8]
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f000 f80f 	bl	8008d88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d6a:	69f8      	ldr	r0, [r7, #28]
 8008d6c:	f000 f8ac 	bl	8008ec8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008d70:	2301      	movs	r3, #1
 8008d72:	61bb      	str	r3, [r7, #24]
 8008d74:	e002      	b.n	8008d7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008d7c:	69bb      	ldr	r3, [r7, #24]
	}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3720      	adds	r7, #32
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
	...

08008d88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b088      	sub	sp, #32
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	607a      	str	r2, [r7, #4]
 8008d94:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008da0:	3b01      	subs	r3, #1
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	4413      	add	r3, r2
 8008da6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	f023 0307 	bic.w	r3, r3, #7
 8008dae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	f003 0307 	and.w	r3, r3, #7
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00b      	beq.n	8008dd2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8008dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dbe:	f383 8811 	msr	BASEPRI, r3
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	617b      	str	r3, [r7, #20]
}
 8008dcc:	bf00      	nop
 8008dce:	bf00      	nop
 8008dd0:	e7fd      	b.n	8008dce <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d01f      	beq.n	8008e18 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008dd8:	2300      	movs	r3, #0
 8008dda:	61fb      	str	r3, [r7, #28]
 8008ddc:	e012      	b.n	8008e04 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	4413      	add	r3, r2
 8008de4:	7819      	ldrb	r1, [r3, #0]
 8008de6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	4413      	add	r3, r2
 8008dec:	3334      	adds	r3, #52	@ 0x34
 8008dee:	460a      	mov	r2, r1
 8008df0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008df2:	68ba      	ldr	r2, [r7, #8]
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	4413      	add	r3, r2
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d006      	beq.n	8008e0c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008dfe:	69fb      	ldr	r3, [r7, #28]
 8008e00:	3301      	adds	r3, #1
 8008e02:	61fb      	str	r3, [r7, #28]
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	2b0f      	cmp	r3, #15
 8008e08:	d9e9      	bls.n	8008dde <prvInitialiseNewTask+0x56>
 8008e0a:	e000      	b.n	8008e0e <prvInitialiseNewTask+0x86>
			{
				break;
 8008e0c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e10:	2200      	movs	r2, #0
 8008e12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008e16:	e003      	b.n	8008e20 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e22:	2b06      	cmp	r3, #6
 8008e24:	d901      	bls.n	8008e2a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008e26:	2306      	movs	r3, #6
 8008e28:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e2e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e34:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e38:	2200      	movs	r2, #0
 8008e3a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e3e:	3304      	adds	r3, #4
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7ff fb82 	bl	800854a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e48:	3318      	adds	r3, #24
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7ff fb7d 	bl	800854a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e54:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e58:	f1c3 0207 	rsb	r2, r3, #7
 8008e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e5e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e64:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e78:	334c      	adds	r3, #76	@ 0x4c
 8008e7a:	224c      	movs	r2, #76	@ 0x4c
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f001 fd88 	bl	800a994 <memset>
 8008e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e86:	4a0d      	ldr	r2, [pc, #52]	@ (8008ebc <prvInitialiseNewTask+0x134>)
 8008e88:	651a      	str	r2, [r3, #80]	@ 0x50
 8008e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e8c:	4a0c      	ldr	r2, [pc, #48]	@ (8008ec0 <prvInitialiseNewTask+0x138>)
 8008e8e:	655a      	str	r2, [r3, #84]	@ 0x54
 8008e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e92:	4a0c      	ldr	r2, [pc, #48]	@ (8008ec4 <prvInitialiseNewTask+0x13c>)
 8008e94:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e96:	683a      	ldr	r2, [r7, #0]
 8008e98:	68f9      	ldr	r1, [r7, #12]
 8008e9a:	69b8      	ldr	r0, [r7, #24]
 8008e9c:	f000 fe72 	bl	8009b84 <pxPortInitialiseStack>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d002      	beq.n	8008eb2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008eb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008eb2:	bf00      	nop
 8008eb4:	3720      	adds	r7, #32
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	20005944 	.word	0x20005944
 8008ec0:	200059ac 	.word	0x200059ac
 8008ec4:	20005a14 	.word	0x20005a14

08008ec8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008ed0:	f000 ff8a 	bl	8009de8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ed4:	4b2a      	ldr	r3, [pc, #168]	@ (8008f80 <prvAddNewTaskToReadyList+0xb8>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	4a29      	ldr	r2, [pc, #164]	@ (8008f80 <prvAddNewTaskToReadyList+0xb8>)
 8008edc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008ede:	4b29      	ldr	r3, [pc, #164]	@ (8008f84 <prvAddNewTaskToReadyList+0xbc>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d109      	bne.n	8008efa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008ee6:	4a27      	ldr	r2, [pc, #156]	@ (8008f84 <prvAddNewTaskToReadyList+0xbc>)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008eec:	4b24      	ldr	r3, [pc, #144]	@ (8008f80 <prvAddNewTaskToReadyList+0xb8>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d110      	bne.n	8008f16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ef4:	f000 fbe4 	bl	80096c0 <prvInitialiseTaskLists>
 8008ef8:	e00d      	b.n	8008f16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008efa:	4b23      	ldr	r3, [pc, #140]	@ (8008f88 <prvAddNewTaskToReadyList+0xc0>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d109      	bne.n	8008f16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f02:	4b20      	ldr	r3, [pc, #128]	@ (8008f84 <prvAddNewTaskToReadyList+0xbc>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d802      	bhi.n	8008f16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f10:	4a1c      	ldr	r2, [pc, #112]	@ (8008f84 <prvAddNewTaskToReadyList+0xbc>)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f16:	4b1d      	ldr	r3, [pc, #116]	@ (8008f8c <prvAddNewTaskToReadyList+0xc4>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8008f8c <prvAddNewTaskToReadyList+0xc4>)
 8008f1e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f24:	2201      	movs	r2, #1
 8008f26:	409a      	lsls	r2, r3
 8008f28:	4b19      	ldr	r3, [pc, #100]	@ (8008f90 <prvAddNewTaskToReadyList+0xc8>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	4a18      	ldr	r2, [pc, #96]	@ (8008f90 <prvAddNewTaskToReadyList+0xc8>)
 8008f30:	6013      	str	r3, [r2, #0]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f36:	4613      	mov	r3, r2
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	4413      	add	r3, r2
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	4a15      	ldr	r2, [pc, #84]	@ (8008f94 <prvAddNewTaskToReadyList+0xcc>)
 8008f40:	441a      	add	r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	3304      	adds	r3, #4
 8008f46:	4619      	mov	r1, r3
 8008f48:	4610      	mov	r0, r2
 8008f4a:	f7ff fb0b 	bl	8008564 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008f4e:	f000 ff7d 	bl	8009e4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008f52:	4b0d      	ldr	r3, [pc, #52]	@ (8008f88 <prvAddNewTaskToReadyList+0xc0>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00e      	beq.n	8008f78 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8008f84 <prvAddNewTaskToReadyList+0xbc>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d207      	bcs.n	8008f78 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f68:	4b0b      	ldr	r3, [pc, #44]	@ (8008f98 <prvAddNewTaskToReadyList+0xd0>)
 8008f6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f6e:	601a      	str	r2, [r3, #0]
 8008f70:	f3bf 8f4f 	dsb	sy
 8008f74:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f78:	bf00      	nop
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	20000ad0 	.word	0x20000ad0
 8008f84:	200009d0 	.word	0x200009d0
 8008f88:	20000adc 	.word	0x20000adc
 8008f8c:	20000aec 	.word	0x20000aec
 8008f90:	20000ad8 	.word	0x20000ad8
 8008f94:	200009d4 	.word	0x200009d4
 8008f98:	e000ed04 	.word	0xe000ed04

08008f9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d018      	beq.n	8008fe0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008fae:	4b14      	ldr	r3, [pc, #80]	@ (8009000 <vTaskDelay+0x64>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00b      	beq.n	8008fce <vTaskDelay+0x32>
	__asm volatile
 8008fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fba:	f383 8811 	msr	BASEPRI, r3
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f3bf 8f4f 	dsb	sy
 8008fc6:	60bb      	str	r3, [r7, #8]
}
 8008fc8:	bf00      	nop
 8008fca:	bf00      	nop
 8008fcc:	e7fd      	b.n	8008fca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008fce:	f000 f885 	bl	80090dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 fd6f 	bl	8009ab8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008fda:	f000 f88d 	bl	80090f8 <xTaskResumeAll>
 8008fde:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d107      	bne.n	8008ff6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008fe6:	4b07      	ldr	r3, [pc, #28]	@ (8009004 <vTaskDelay+0x68>)
 8008fe8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fec:	601a      	str	r2, [r3, #0]
 8008fee:	f3bf 8f4f 	dsb	sy
 8008ff2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ff6:	bf00      	nop
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	20000af8 	.word	0x20000af8
 8009004:	e000ed04 	.word	0xe000ed04

08009008 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b08a      	sub	sp, #40	@ 0x28
 800900c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800900e:	2300      	movs	r3, #0
 8009010:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009012:	2300      	movs	r3, #0
 8009014:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009016:	463a      	mov	r2, r7
 8009018:	1d39      	adds	r1, r7, #4
 800901a:	f107 0308 	add.w	r3, r7, #8
 800901e:	4618      	mov	r0, r3
 8009020:	f7f7 fac4 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009024:	6839      	ldr	r1, [r7, #0]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	9202      	str	r2, [sp, #8]
 800902c:	9301      	str	r3, [sp, #4]
 800902e:	2300      	movs	r3, #0
 8009030:	9300      	str	r3, [sp, #0]
 8009032:	2300      	movs	r3, #0
 8009034:	460a      	mov	r2, r1
 8009036:	4921      	ldr	r1, [pc, #132]	@ (80090bc <vTaskStartScheduler+0xb4>)
 8009038:	4821      	ldr	r0, [pc, #132]	@ (80090c0 <vTaskStartScheduler+0xb8>)
 800903a:	f7ff fdff 	bl	8008c3c <xTaskCreateStatic>
 800903e:	4603      	mov	r3, r0
 8009040:	4a20      	ldr	r2, [pc, #128]	@ (80090c4 <vTaskStartScheduler+0xbc>)
 8009042:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009044:	4b1f      	ldr	r3, [pc, #124]	@ (80090c4 <vTaskStartScheduler+0xbc>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d002      	beq.n	8009052 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800904c:	2301      	movs	r3, #1
 800904e:	617b      	str	r3, [r7, #20]
 8009050:	e001      	b.n	8009056 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009052:	2300      	movs	r3, #0
 8009054:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	2b01      	cmp	r3, #1
 800905a:	d11b      	bne.n	8009094 <vTaskStartScheduler+0x8c>
	__asm volatile
 800905c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009060:	f383 8811 	msr	BASEPRI, r3
 8009064:	f3bf 8f6f 	isb	sy
 8009068:	f3bf 8f4f 	dsb	sy
 800906c:	613b      	str	r3, [r7, #16]
}
 800906e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009070:	4b15      	ldr	r3, [pc, #84]	@ (80090c8 <vTaskStartScheduler+0xc0>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	334c      	adds	r3, #76	@ 0x4c
 8009076:	4a15      	ldr	r2, [pc, #84]	@ (80090cc <vTaskStartScheduler+0xc4>)
 8009078:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800907a:	4b15      	ldr	r3, [pc, #84]	@ (80090d0 <vTaskStartScheduler+0xc8>)
 800907c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009080:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009082:	4b14      	ldr	r3, [pc, #80]	@ (80090d4 <vTaskStartScheduler+0xcc>)
 8009084:	2201      	movs	r2, #1
 8009086:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009088:	4b13      	ldr	r3, [pc, #76]	@ (80090d8 <vTaskStartScheduler+0xd0>)
 800908a:	2200      	movs	r2, #0
 800908c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800908e:	f000 fe07 	bl	8009ca0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009092:	e00f      	b.n	80090b4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800909a:	d10b      	bne.n	80090b4 <vTaskStartScheduler+0xac>
	__asm volatile
 800909c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090a0:	f383 8811 	msr	BASEPRI, r3
 80090a4:	f3bf 8f6f 	isb	sy
 80090a8:	f3bf 8f4f 	dsb	sy
 80090ac:	60fb      	str	r3, [r7, #12]
}
 80090ae:	bf00      	nop
 80090b0:	bf00      	nop
 80090b2:	e7fd      	b.n	80090b0 <vTaskStartScheduler+0xa8>
}
 80090b4:	bf00      	nop
 80090b6:	3718      	adds	r7, #24
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	0800bba0 	.word	0x0800bba0
 80090c0:	08009691 	.word	0x08009691
 80090c4:	20000af4 	.word	0x20000af4
 80090c8:	200009d0 	.word	0x200009d0
 80090cc:	20000024 	.word	0x20000024
 80090d0:	20000af0 	.word	0x20000af0
 80090d4:	20000adc 	.word	0x20000adc
 80090d8:	20000ad4 	.word	0x20000ad4

080090dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80090dc:	b480      	push	{r7}
 80090de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80090e0:	4b04      	ldr	r3, [pc, #16]	@ (80090f4 <vTaskSuspendAll+0x18>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	3301      	adds	r3, #1
 80090e6:	4a03      	ldr	r2, [pc, #12]	@ (80090f4 <vTaskSuspendAll+0x18>)
 80090e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80090ea:	bf00      	nop
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr
 80090f4:	20000af8 	.word	0x20000af8

080090f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80090fe:	2300      	movs	r3, #0
 8009100:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009102:	2300      	movs	r3, #0
 8009104:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009106:	4b42      	ldr	r3, [pc, #264]	@ (8009210 <xTaskResumeAll+0x118>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d10b      	bne.n	8009126 <xTaskResumeAll+0x2e>
	__asm volatile
 800910e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009112:	f383 8811 	msr	BASEPRI, r3
 8009116:	f3bf 8f6f 	isb	sy
 800911a:	f3bf 8f4f 	dsb	sy
 800911e:	603b      	str	r3, [r7, #0]
}
 8009120:	bf00      	nop
 8009122:	bf00      	nop
 8009124:	e7fd      	b.n	8009122 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009126:	f000 fe5f 	bl	8009de8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800912a:	4b39      	ldr	r3, [pc, #228]	@ (8009210 <xTaskResumeAll+0x118>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	3b01      	subs	r3, #1
 8009130:	4a37      	ldr	r2, [pc, #220]	@ (8009210 <xTaskResumeAll+0x118>)
 8009132:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009134:	4b36      	ldr	r3, [pc, #216]	@ (8009210 <xTaskResumeAll+0x118>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d161      	bne.n	8009200 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800913c:	4b35      	ldr	r3, [pc, #212]	@ (8009214 <xTaskResumeAll+0x11c>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d05d      	beq.n	8009200 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009144:	e02e      	b.n	80091a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009146:	4b34      	ldr	r3, [pc, #208]	@ (8009218 <xTaskResumeAll+0x120>)
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	3318      	adds	r3, #24
 8009152:	4618      	mov	r0, r3
 8009154:	f7ff fa63 	bl	800861e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	3304      	adds	r3, #4
 800915c:	4618      	mov	r0, r3
 800915e:	f7ff fa5e 	bl	800861e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009166:	2201      	movs	r2, #1
 8009168:	409a      	lsls	r2, r3
 800916a:	4b2c      	ldr	r3, [pc, #176]	@ (800921c <xTaskResumeAll+0x124>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4313      	orrs	r3, r2
 8009170:	4a2a      	ldr	r2, [pc, #168]	@ (800921c <xTaskResumeAll+0x124>)
 8009172:	6013      	str	r3, [r2, #0]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009178:	4613      	mov	r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	4413      	add	r3, r2
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	4a27      	ldr	r2, [pc, #156]	@ (8009220 <xTaskResumeAll+0x128>)
 8009182:	441a      	add	r2, r3
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	3304      	adds	r3, #4
 8009188:	4619      	mov	r1, r3
 800918a:	4610      	mov	r0, r2
 800918c:	f7ff f9ea 	bl	8008564 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009194:	4b23      	ldr	r3, [pc, #140]	@ (8009224 <xTaskResumeAll+0x12c>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800919a:	429a      	cmp	r2, r3
 800919c:	d302      	bcc.n	80091a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800919e:	4b22      	ldr	r3, [pc, #136]	@ (8009228 <xTaskResumeAll+0x130>)
 80091a0:	2201      	movs	r2, #1
 80091a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091a4:	4b1c      	ldr	r3, [pc, #112]	@ (8009218 <xTaskResumeAll+0x120>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d1cc      	bne.n	8009146 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d001      	beq.n	80091b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80091b2:	f000 fb29 	bl	8009808 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80091b6:	4b1d      	ldr	r3, [pc, #116]	@ (800922c <xTaskResumeAll+0x134>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d010      	beq.n	80091e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80091c2:	f000 f837 	bl	8009234 <xTaskIncrementTick>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d002      	beq.n	80091d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80091cc:	4b16      	ldr	r3, [pc, #88]	@ (8009228 <xTaskResumeAll+0x130>)
 80091ce:	2201      	movs	r2, #1
 80091d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	3b01      	subs	r3, #1
 80091d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d1f1      	bne.n	80091c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80091de:	4b13      	ldr	r3, [pc, #76]	@ (800922c <xTaskResumeAll+0x134>)
 80091e0:	2200      	movs	r2, #0
 80091e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80091e4:	4b10      	ldr	r3, [pc, #64]	@ (8009228 <xTaskResumeAll+0x130>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d009      	beq.n	8009200 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80091ec:	2301      	movs	r3, #1
 80091ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80091f0:	4b0f      	ldr	r3, [pc, #60]	@ (8009230 <xTaskResumeAll+0x138>)
 80091f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091f6:	601a      	str	r2, [r3, #0]
 80091f8:	f3bf 8f4f 	dsb	sy
 80091fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009200:	f000 fe24 	bl	8009e4c <vPortExitCritical>

	return xAlreadyYielded;
 8009204:	68bb      	ldr	r3, [r7, #8]
}
 8009206:	4618      	mov	r0, r3
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	20000af8 	.word	0x20000af8
 8009214:	20000ad0 	.word	0x20000ad0
 8009218:	20000a90 	.word	0x20000a90
 800921c:	20000ad8 	.word	0x20000ad8
 8009220:	200009d4 	.word	0x200009d4
 8009224:	200009d0 	.word	0x200009d0
 8009228:	20000ae4 	.word	0x20000ae4
 800922c:	20000ae0 	.word	0x20000ae0
 8009230:	e000ed04 	.word	0xe000ed04

08009234 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b086      	sub	sp, #24
 8009238:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800923a:	2300      	movs	r3, #0
 800923c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800923e:	4b4f      	ldr	r3, [pc, #316]	@ (800937c <xTaskIncrementTick+0x148>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	f040 808f 	bne.w	8009366 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009248:	4b4d      	ldr	r3, [pc, #308]	@ (8009380 <xTaskIncrementTick+0x14c>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	3301      	adds	r3, #1
 800924e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009250:	4a4b      	ldr	r2, [pc, #300]	@ (8009380 <xTaskIncrementTick+0x14c>)
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d121      	bne.n	80092a0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800925c:	4b49      	ldr	r3, [pc, #292]	@ (8009384 <xTaskIncrementTick+0x150>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00b      	beq.n	800927e <xTaskIncrementTick+0x4a>
	__asm volatile
 8009266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800926a:	f383 8811 	msr	BASEPRI, r3
 800926e:	f3bf 8f6f 	isb	sy
 8009272:	f3bf 8f4f 	dsb	sy
 8009276:	603b      	str	r3, [r7, #0]
}
 8009278:	bf00      	nop
 800927a:	bf00      	nop
 800927c:	e7fd      	b.n	800927a <xTaskIncrementTick+0x46>
 800927e:	4b41      	ldr	r3, [pc, #260]	@ (8009384 <xTaskIncrementTick+0x150>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	60fb      	str	r3, [r7, #12]
 8009284:	4b40      	ldr	r3, [pc, #256]	@ (8009388 <xTaskIncrementTick+0x154>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a3e      	ldr	r2, [pc, #248]	@ (8009384 <xTaskIncrementTick+0x150>)
 800928a:	6013      	str	r3, [r2, #0]
 800928c:	4a3e      	ldr	r2, [pc, #248]	@ (8009388 <xTaskIncrementTick+0x154>)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	6013      	str	r3, [r2, #0]
 8009292:	4b3e      	ldr	r3, [pc, #248]	@ (800938c <xTaskIncrementTick+0x158>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	3301      	adds	r3, #1
 8009298:	4a3c      	ldr	r2, [pc, #240]	@ (800938c <xTaskIncrementTick+0x158>)
 800929a:	6013      	str	r3, [r2, #0]
 800929c:	f000 fab4 	bl	8009808 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80092a0:	4b3b      	ldr	r3, [pc, #236]	@ (8009390 <xTaskIncrementTick+0x15c>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	693a      	ldr	r2, [r7, #16]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d348      	bcc.n	800933c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092aa:	4b36      	ldr	r3, [pc, #216]	@ (8009384 <xTaskIncrementTick+0x150>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d104      	bne.n	80092be <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092b4:	4b36      	ldr	r3, [pc, #216]	@ (8009390 <xTaskIncrementTick+0x15c>)
 80092b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80092ba:	601a      	str	r2, [r3, #0]
					break;
 80092bc:	e03e      	b.n	800933c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092be:	4b31      	ldr	r3, [pc, #196]	@ (8009384 <xTaskIncrementTick+0x150>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80092ce:	693a      	ldr	r2, [r7, #16]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d203      	bcs.n	80092de <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80092d6:	4a2e      	ldr	r2, [pc, #184]	@ (8009390 <xTaskIncrementTick+0x15c>)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80092dc:	e02e      	b.n	800933c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	3304      	adds	r3, #4
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7ff f99b 	bl	800861e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d004      	beq.n	80092fa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	3318      	adds	r3, #24
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7ff f992 	bl	800861e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092fe:	2201      	movs	r2, #1
 8009300:	409a      	lsls	r2, r3
 8009302:	4b24      	ldr	r3, [pc, #144]	@ (8009394 <xTaskIncrementTick+0x160>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4313      	orrs	r3, r2
 8009308:	4a22      	ldr	r2, [pc, #136]	@ (8009394 <xTaskIncrementTick+0x160>)
 800930a:	6013      	str	r3, [r2, #0]
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009310:	4613      	mov	r3, r2
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	4413      	add	r3, r2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	4a1f      	ldr	r2, [pc, #124]	@ (8009398 <xTaskIncrementTick+0x164>)
 800931a:	441a      	add	r2, r3
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	3304      	adds	r3, #4
 8009320:	4619      	mov	r1, r3
 8009322:	4610      	mov	r0, r2
 8009324:	f7ff f91e 	bl	8008564 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800932c:	4b1b      	ldr	r3, [pc, #108]	@ (800939c <xTaskIncrementTick+0x168>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009332:	429a      	cmp	r2, r3
 8009334:	d3b9      	bcc.n	80092aa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009336:	2301      	movs	r3, #1
 8009338:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800933a:	e7b6      	b.n	80092aa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800933c:	4b17      	ldr	r3, [pc, #92]	@ (800939c <xTaskIncrementTick+0x168>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009342:	4915      	ldr	r1, [pc, #84]	@ (8009398 <xTaskIncrementTick+0x164>)
 8009344:	4613      	mov	r3, r2
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	4413      	add	r3, r2
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	440b      	add	r3, r1
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2b01      	cmp	r3, #1
 8009352:	d901      	bls.n	8009358 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009354:	2301      	movs	r3, #1
 8009356:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009358:	4b11      	ldr	r3, [pc, #68]	@ (80093a0 <xTaskIncrementTick+0x16c>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d007      	beq.n	8009370 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009360:	2301      	movs	r3, #1
 8009362:	617b      	str	r3, [r7, #20]
 8009364:	e004      	b.n	8009370 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009366:	4b0f      	ldr	r3, [pc, #60]	@ (80093a4 <xTaskIncrementTick+0x170>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	3301      	adds	r3, #1
 800936c:	4a0d      	ldr	r2, [pc, #52]	@ (80093a4 <xTaskIncrementTick+0x170>)
 800936e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009370:	697b      	ldr	r3, [r7, #20]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3718      	adds	r7, #24
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	20000af8 	.word	0x20000af8
 8009380:	20000ad4 	.word	0x20000ad4
 8009384:	20000a88 	.word	0x20000a88
 8009388:	20000a8c 	.word	0x20000a8c
 800938c:	20000ae8 	.word	0x20000ae8
 8009390:	20000af0 	.word	0x20000af0
 8009394:	20000ad8 	.word	0x20000ad8
 8009398:	200009d4 	.word	0x200009d4
 800939c:	200009d0 	.word	0x200009d0
 80093a0:	20000ae4 	.word	0x20000ae4
 80093a4:	20000ae0 	.word	0x20000ae0

080093a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80093a8:	b480      	push	{r7}
 80093aa:	b087      	sub	sp, #28
 80093ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80093ae:	4b2a      	ldr	r3, [pc, #168]	@ (8009458 <vTaskSwitchContext+0xb0>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d003      	beq.n	80093be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80093b6:	4b29      	ldr	r3, [pc, #164]	@ (800945c <vTaskSwitchContext+0xb4>)
 80093b8:	2201      	movs	r2, #1
 80093ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80093bc:	e045      	b.n	800944a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80093be:	4b27      	ldr	r3, [pc, #156]	@ (800945c <vTaskSwitchContext+0xb4>)
 80093c0:	2200      	movs	r2, #0
 80093c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093c4:	4b26      	ldr	r3, [pc, #152]	@ (8009460 <vTaskSwitchContext+0xb8>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	fab3 f383 	clz	r3, r3
 80093d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80093d2:	7afb      	ldrb	r3, [r7, #11]
 80093d4:	f1c3 031f 	rsb	r3, r3, #31
 80093d8:	617b      	str	r3, [r7, #20]
 80093da:	4922      	ldr	r1, [pc, #136]	@ (8009464 <vTaskSwitchContext+0xbc>)
 80093dc:	697a      	ldr	r2, [r7, #20]
 80093de:	4613      	mov	r3, r2
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	4413      	add	r3, r2
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	440b      	add	r3, r1
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d10b      	bne.n	8009406 <vTaskSwitchContext+0x5e>
	__asm volatile
 80093ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093f2:	f383 8811 	msr	BASEPRI, r3
 80093f6:	f3bf 8f6f 	isb	sy
 80093fa:	f3bf 8f4f 	dsb	sy
 80093fe:	607b      	str	r3, [r7, #4]
}
 8009400:	bf00      	nop
 8009402:	bf00      	nop
 8009404:	e7fd      	b.n	8009402 <vTaskSwitchContext+0x5a>
 8009406:	697a      	ldr	r2, [r7, #20]
 8009408:	4613      	mov	r3, r2
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	4413      	add	r3, r2
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	4a14      	ldr	r2, [pc, #80]	@ (8009464 <vTaskSwitchContext+0xbc>)
 8009412:	4413      	add	r3, r2
 8009414:	613b      	str	r3, [r7, #16]
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	685a      	ldr	r2, [r3, #4]
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	605a      	str	r2, [r3, #4]
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	685a      	ldr	r2, [r3, #4]
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	3308      	adds	r3, #8
 8009428:	429a      	cmp	r2, r3
 800942a:	d104      	bne.n	8009436 <vTaskSwitchContext+0x8e>
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	685a      	ldr	r2, [r3, #4]
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	605a      	str	r2, [r3, #4]
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	4a0a      	ldr	r2, [pc, #40]	@ (8009468 <vTaskSwitchContext+0xc0>)
 800943e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009440:	4b09      	ldr	r3, [pc, #36]	@ (8009468 <vTaskSwitchContext+0xc0>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	334c      	adds	r3, #76	@ 0x4c
 8009446:	4a09      	ldr	r2, [pc, #36]	@ (800946c <vTaskSwitchContext+0xc4>)
 8009448:	6013      	str	r3, [r2, #0]
}
 800944a:	bf00      	nop
 800944c:	371c      	adds	r7, #28
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop
 8009458:	20000af8 	.word	0x20000af8
 800945c:	20000ae4 	.word	0x20000ae4
 8009460:	20000ad8 	.word	0x20000ad8
 8009464:	200009d4 	.word	0x200009d4
 8009468:	200009d0 	.word	0x200009d0
 800946c:	20000024 	.word	0x20000024

08009470 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d10b      	bne.n	8009498 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009484:	f383 8811 	msr	BASEPRI, r3
 8009488:	f3bf 8f6f 	isb	sy
 800948c:	f3bf 8f4f 	dsb	sy
 8009490:	60fb      	str	r3, [r7, #12]
}
 8009492:	bf00      	nop
 8009494:	bf00      	nop
 8009496:	e7fd      	b.n	8009494 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009498:	4b07      	ldr	r3, [pc, #28]	@ (80094b8 <vTaskPlaceOnEventList+0x48>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	3318      	adds	r3, #24
 800949e:	4619      	mov	r1, r3
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f7ff f883 	bl	80085ac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80094a6:	2101      	movs	r1, #1
 80094a8:	6838      	ldr	r0, [r7, #0]
 80094aa:	f000 fb05 	bl	8009ab8 <prvAddCurrentTaskToDelayedList>
}
 80094ae:	bf00      	nop
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	200009d0 	.word	0x200009d0

080094bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b086      	sub	sp, #24
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	68db      	ldr	r3, [r3, #12]
 80094ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d10b      	bne.n	80094ea <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80094d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094d6:	f383 8811 	msr	BASEPRI, r3
 80094da:	f3bf 8f6f 	isb	sy
 80094de:	f3bf 8f4f 	dsb	sy
 80094e2:	60fb      	str	r3, [r7, #12]
}
 80094e4:	bf00      	nop
 80094e6:	bf00      	nop
 80094e8:	e7fd      	b.n	80094e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	3318      	adds	r3, #24
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7ff f895 	bl	800861e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094f4:	4b1d      	ldr	r3, [pc, #116]	@ (800956c <xTaskRemoveFromEventList+0xb0>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d11c      	bne.n	8009536 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	3304      	adds	r3, #4
 8009500:	4618      	mov	r0, r3
 8009502:	f7ff f88c 	bl	800861e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800950a:	2201      	movs	r2, #1
 800950c:	409a      	lsls	r2, r3
 800950e:	4b18      	ldr	r3, [pc, #96]	@ (8009570 <xTaskRemoveFromEventList+0xb4>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4313      	orrs	r3, r2
 8009514:	4a16      	ldr	r2, [pc, #88]	@ (8009570 <xTaskRemoveFromEventList+0xb4>)
 8009516:	6013      	str	r3, [r2, #0]
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800951c:	4613      	mov	r3, r2
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	4413      	add	r3, r2
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	4a13      	ldr	r2, [pc, #76]	@ (8009574 <xTaskRemoveFromEventList+0xb8>)
 8009526:	441a      	add	r2, r3
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	3304      	adds	r3, #4
 800952c:	4619      	mov	r1, r3
 800952e:	4610      	mov	r0, r2
 8009530:	f7ff f818 	bl	8008564 <vListInsertEnd>
 8009534:	e005      	b.n	8009542 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	3318      	adds	r3, #24
 800953a:	4619      	mov	r1, r3
 800953c:	480e      	ldr	r0, [pc, #56]	@ (8009578 <xTaskRemoveFromEventList+0xbc>)
 800953e:	f7ff f811 	bl	8008564 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009546:	4b0d      	ldr	r3, [pc, #52]	@ (800957c <xTaskRemoveFromEventList+0xc0>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800954c:	429a      	cmp	r2, r3
 800954e:	d905      	bls.n	800955c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009550:	2301      	movs	r3, #1
 8009552:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009554:	4b0a      	ldr	r3, [pc, #40]	@ (8009580 <xTaskRemoveFromEventList+0xc4>)
 8009556:	2201      	movs	r2, #1
 8009558:	601a      	str	r2, [r3, #0]
 800955a:	e001      	b.n	8009560 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800955c:	2300      	movs	r3, #0
 800955e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009560:	697b      	ldr	r3, [r7, #20]
}
 8009562:	4618      	mov	r0, r3
 8009564:	3718      	adds	r7, #24
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	20000af8 	.word	0x20000af8
 8009570:	20000ad8 	.word	0x20000ad8
 8009574:	200009d4 	.word	0x200009d4
 8009578:	20000a90 	.word	0x20000a90
 800957c:	200009d0 	.word	0x200009d0
 8009580:	20000ae4 	.word	0x20000ae4

08009584 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800958c:	4b06      	ldr	r3, [pc, #24]	@ (80095a8 <vTaskInternalSetTimeOutState+0x24>)
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009594:	4b05      	ldr	r3, [pc, #20]	@ (80095ac <vTaskInternalSetTimeOutState+0x28>)
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	605a      	str	r2, [r3, #4]
}
 800959c:	bf00      	nop
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr
 80095a8:	20000ae8 	.word	0x20000ae8
 80095ac:	20000ad4 	.word	0x20000ad4

080095b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b088      	sub	sp, #32
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d10b      	bne.n	80095d8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80095c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c4:	f383 8811 	msr	BASEPRI, r3
 80095c8:	f3bf 8f6f 	isb	sy
 80095cc:	f3bf 8f4f 	dsb	sy
 80095d0:	613b      	str	r3, [r7, #16]
}
 80095d2:	bf00      	nop
 80095d4:	bf00      	nop
 80095d6:	e7fd      	b.n	80095d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d10b      	bne.n	80095f6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80095de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095e2:	f383 8811 	msr	BASEPRI, r3
 80095e6:	f3bf 8f6f 	isb	sy
 80095ea:	f3bf 8f4f 	dsb	sy
 80095ee:	60fb      	str	r3, [r7, #12]
}
 80095f0:	bf00      	nop
 80095f2:	bf00      	nop
 80095f4:	e7fd      	b.n	80095f2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80095f6:	f000 fbf7 	bl	8009de8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80095fa:	4b1d      	ldr	r3, [pc, #116]	@ (8009670 <xTaskCheckForTimeOut+0xc0>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	69ba      	ldr	r2, [r7, #24]
 8009606:	1ad3      	subs	r3, r2, r3
 8009608:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009612:	d102      	bne.n	800961a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009614:	2300      	movs	r3, #0
 8009616:	61fb      	str	r3, [r7, #28]
 8009618:	e023      	b.n	8009662 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	4b15      	ldr	r3, [pc, #84]	@ (8009674 <xTaskCheckForTimeOut+0xc4>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	429a      	cmp	r2, r3
 8009624:	d007      	beq.n	8009636 <xTaskCheckForTimeOut+0x86>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	69ba      	ldr	r2, [r7, #24]
 800962c:	429a      	cmp	r2, r3
 800962e:	d302      	bcc.n	8009636 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009630:	2301      	movs	r3, #1
 8009632:	61fb      	str	r3, [r7, #28]
 8009634:	e015      	b.n	8009662 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	697a      	ldr	r2, [r7, #20]
 800963c:	429a      	cmp	r2, r3
 800963e:	d20b      	bcs.n	8009658 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	1ad2      	subs	r2, r2, r3
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f7ff ff99 	bl	8009584 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009652:	2300      	movs	r3, #0
 8009654:	61fb      	str	r3, [r7, #28]
 8009656:	e004      	b.n	8009662 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	2200      	movs	r2, #0
 800965c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800965e:	2301      	movs	r3, #1
 8009660:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009662:	f000 fbf3 	bl	8009e4c <vPortExitCritical>

	return xReturn;
 8009666:	69fb      	ldr	r3, [r7, #28]
}
 8009668:	4618      	mov	r0, r3
 800966a:	3720      	adds	r7, #32
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}
 8009670:	20000ad4 	.word	0x20000ad4
 8009674:	20000ae8 	.word	0x20000ae8

08009678 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009678:	b480      	push	{r7}
 800967a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800967c:	4b03      	ldr	r3, [pc, #12]	@ (800968c <vTaskMissedYield+0x14>)
 800967e:	2201      	movs	r2, #1
 8009680:	601a      	str	r2, [r3, #0]
}
 8009682:	bf00      	nop
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	20000ae4 	.word	0x20000ae4

08009690 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009698:	f000 f852 	bl	8009740 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800969c:	4b06      	ldr	r3, [pc, #24]	@ (80096b8 <prvIdleTask+0x28>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d9f9      	bls.n	8009698 <prvIdleTask+0x8>
			{
				taskYIELD();
 80096a4:	4b05      	ldr	r3, [pc, #20]	@ (80096bc <prvIdleTask+0x2c>)
 80096a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096aa:	601a      	str	r2, [r3, #0]
 80096ac:	f3bf 8f4f 	dsb	sy
 80096b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80096b4:	e7f0      	b.n	8009698 <prvIdleTask+0x8>
 80096b6:	bf00      	nop
 80096b8:	200009d4 	.word	0x200009d4
 80096bc:	e000ed04 	.word	0xe000ed04

080096c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096c6:	2300      	movs	r3, #0
 80096c8:	607b      	str	r3, [r7, #4]
 80096ca:	e00c      	b.n	80096e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	4613      	mov	r3, r2
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	4413      	add	r3, r2
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4a12      	ldr	r2, [pc, #72]	@ (8009720 <prvInitialiseTaskLists+0x60>)
 80096d8:	4413      	add	r3, r2
 80096da:	4618      	mov	r0, r3
 80096dc:	f7fe ff15 	bl	800850a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	3301      	adds	r3, #1
 80096e4:	607b      	str	r3, [r7, #4]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2b06      	cmp	r3, #6
 80096ea:	d9ef      	bls.n	80096cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80096ec:	480d      	ldr	r0, [pc, #52]	@ (8009724 <prvInitialiseTaskLists+0x64>)
 80096ee:	f7fe ff0c 	bl	800850a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80096f2:	480d      	ldr	r0, [pc, #52]	@ (8009728 <prvInitialiseTaskLists+0x68>)
 80096f4:	f7fe ff09 	bl	800850a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80096f8:	480c      	ldr	r0, [pc, #48]	@ (800972c <prvInitialiseTaskLists+0x6c>)
 80096fa:	f7fe ff06 	bl	800850a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80096fe:	480c      	ldr	r0, [pc, #48]	@ (8009730 <prvInitialiseTaskLists+0x70>)
 8009700:	f7fe ff03 	bl	800850a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009704:	480b      	ldr	r0, [pc, #44]	@ (8009734 <prvInitialiseTaskLists+0x74>)
 8009706:	f7fe ff00 	bl	800850a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800970a:	4b0b      	ldr	r3, [pc, #44]	@ (8009738 <prvInitialiseTaskLists+0x78>)
 800970c:	4a05      	ldr	r2, [pc, #20]	@ (8009724 <prvInitialiseTaskLists+0x64>)
 800970e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009710:	4b0a      	ldr	r3, [pc, #40]	@ (800973c <prvInitialiseTaskLists+0x7c>)
 8009712:	4a05      	ldr	r2, [pc, #20]	@ (8009728 <prvInitialiseTaskLists+0x68>)
 8009714:	601a      	str	r2, [r3, #0]
}
 8009716:	bf00      	nop
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	200009d4 	.word	0x200009d4
 8009724:	20000a60 	.word	0x20000a60
 8009728:	20000a74 	.word	0x20000a74
 800972c:	20000a90 	.word	0x20000a90
 8009730:	20000aa4 	.word	0x20000aa4
 8009734:	20000abc 	.word	0x20000abc
 8009738:	20000a88 	.word	0x20000a88
 800973c:	20000a8c 	.word	0x20000a8c

08009740 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009746:	e019      	b.n	800977c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009748:	f000 fb4e 	bl	8009de8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800974c:	4b10      	ldr	r3, [pc, #64]	@ (8009790 <prvCheckTasksWaitingTermination+0x50>)
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	3304      	adds	r3, #4
 8009758:	4618      	mov	r0, r3
 800975a:	f7fe ff60 	bl	800861e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800975e:	4b0d      	ldr	r3, [pc, #52]	@ (8009794 <prvCheckTasksWaitingTermination+0x54>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	3b01      	subs	r3, #1
 8009764:	4a0b      	ldr	r2, [pc, #44]	@ (8009794 <prvCheckTasksWaitingTermination+0x54>)
 8009766:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009768:	4b0b      	ldr	r3, [pc, #44]	@ (8009798 <prvCheckTasksWaitingTermination+0x58>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	3b01      	subs	r3, #1
 800976e:	4a0a      	ldr	r2, [pc, #40]	@ (8009798 <prvCheckTasksWaitingTermination+0x58>)
 8009770:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009772:	f000 fb6b 	bl	8009e4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f810 	bl	800979c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800977c:	4b06      	ldr	r3, [pc, #24]	@ (8009798 <prvCheckTasksWaitingTermination+0x58>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d1e1      	bne.n	8009748 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009784:	bf00      	nop
 8009786:	bf00      	nop
 8009788:	3708      	adds	r7, #8
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	20000aa4 	.word	0x20000aa4
 8009794:	20000ad0 	.word	0x20000ad0
 8009798:	20000ab8 	.word	0x20000ab8

0800979c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	334c      	adds	r3, #76	@ 0x4c
 80097a8:	4618      	mov	r0, r3
 80097aa:	f001 f90b 	bl	800a9c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d108      	bne.n	80097ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097bc:	4618      	mov	r0, r3
 80097be:	f000 fd03 	bl	800a1c8 <vPortFree>
				vPortFree( pxTCB );
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 fd00 	bl	800a1c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80097c8:	e019      	b.n	80097fe <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d103      	bne.n	80097dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 fcf7 	bl	800a1c8 <vPortFree>
	}
 80097da:	e010      	b.n	80097fe <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	d00b      	beq.n	80097fe <prvDeleteTCB+0x62>
	__asm volatile
 80097e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ea:	f383 8811 	msr	BASEPRI, r3
 80097ee:	f3bf 8f6f 	isb	sy
 80097f2:	f3bf 8f4f 	dsb	sy
 80097f6:	60fb      	str	r3, [r7, #12]
}
 80097f8:	bf00      	nop
 80097fa:	bf00      	nop
 80097fc:	e7fd      	b.n	80097fa <prvDeleteTCB+0x5e>
	}
 80097fe:	bf00      	nop
 8009800:	3710      	adds	r7, #16
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
	...

08009808 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800980e:	4b0c      	ldr	r3, [pc, #48]	@ (8009840 <prvResetNextTaskUnblockTime+0x38>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d104      	bne.n	8009822 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009818:	4b0a      	ldr	r3, [pc, #40]	@ (8009844 <prvResetNextTaskUnblockTime+0x3c>)
 800981a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800981e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009820:	e008      	b.n	8009834 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009822:	4b07      	ldr	r3, [pc, #28]	@ (8009840 <prvResetNextTaskUnblockTime+0x38>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	4a04      	ldr	r2, [pc, #16]	@ (8009844 <prvResetNextTaskUnblockTime+0x3c>)
 8009832:	6013      	str	r3, [r2, #0]
}
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr
 8009840:	20000a88 	.word	0x20000a88
 8009844:	20000af0 	.word	0x20000af0

08009848 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800984e:	4b0b      	ldr	r3, [pc, #44]	@ (800987c <xTaskGetSchedulerState+0x34>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d102      	bne.n	800985c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009856:	2301      	movs	r3, #1
 8009858:	607b      	str	r3, [r7, #4]
 800985a:	e008      	b.n	800986e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800985c:	4b08      	ldr	r3, [pc, #32]	@ (8009880 <xTaskGetSchedulerState+0x38>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d102      	bne.n	800986a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009864:	2302      	movs	r3, #2
 8009866:	607b      	str	r3, [r7, #4]
 8009868:	e001      	b.n	800986e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800986a:	2300      	movs	r3, #0
 800986c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800986e:	687b      	ldr	r3, [r7, #4]
	}
 8009870:	4618      	mov	r0, r3
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr
 800987c:	20000adc 	.word	0x20000adc
 8009880:	20000af8 	.word	0x20000af8

08009884 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009890:	2300      	movs	r3, #0
 8009892:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d05e      	beq.n	8009958 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800989e:	4b31      	ldr	r3, [pc, #196]	@ (8009964 <xTaskPriorityInherit+0xe0>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d24e      	bcs.n	8009946 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	699b      	ldr	r3, [r3, #24]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	db06      	blt.n	80098be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098b0:	4b2c      	ldr	r3, [pc, #176]	@ (8009964 <xTaskPriorityInherit+0xe0>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098b6:	f1c3 0207 	rsb	r2, r3, #7
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	6959      	ldr	r1, [r3, #20]
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098c6:	4613      	mov	r3, r2
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	4413      	add	r3, r2
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	4a26      	ldr	r2, [pc, #152]	@ (8009968 <xTaskPriorityInherit+0xe4>)
 80098d0:	4413      	add	r3, r2
 80098d2:	4299      	cmp	r1, r3
 80098d4:	d12f      	bne.n	8009936 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	3304      	adds	r3, #4
 80098da:	4618      	mov	r0, r3
 80098dc:	f7fe fe9f 	bl	800861e <uxListRemove>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d10a      	bne.n	80098fc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ea:	2201      	movs	r2, #1
 80098ec:	fa02 f303 	lsl.w	r3, r2, r3
 80098f0:	43da      	mvns	r2, r3
 80098f2:	4b1e      	ldr	r3, [pc, #120]	@ (800996c <xTaskPriorityInherit+0xe8>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4013      	ands	r3, r2
 80098f8:	4a1c      	ldr	r2, [pc, #112]	@ (800996c <xTaskPriorityInherit+0xe8>)
 80098fa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80098fc:	4b19      	ldr	r3, [pc, #100]	@ (8009964 <xTaskPriorityInherit+0xe0>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800990a:	2201      	movs	r2, #1
 800990c:	409a      	lsls	r2, r3
 800990e:	4b17      	ldr	r3, [pc, #92]	@ (800996c <xTaskPriorityInherit+0xe8>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4313      	orrs	r3, r2
 8009914:	4a15      	ldr	r2, [pc, #84]	@ (800996c <xTaskPriorityInherit+0xe8>)
 8009916:	6013      	str	r3, [r2, #0]
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800991c:	4613      	mov	r3, r2
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	4413      	add	r3, r2
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	4a10      	ldr	r2, [pc, #64]	@ (8009968 <xTaskPriorityInherit+0xe4>)
 8009926:	441a      	add	r2, r3
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	3304      	adds	r3, #4
 800992c:	4619      	mov	r1, r3
 800992e:	4610      	mov	r0, r2
 8009930:	f7fe fe18 	bl	8008564 <vListInsertEnd>
 8009934:	e004      	b.n	8009940 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009936:	4b0b      	ldr	r3, [pc, #44]	@ (8009964 <xTaskPriorityInherit+0xe0>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009940:	2301      	movs	r3, #1
 8009942:	60fb      	str	r3, [r7, #12]
 8009944:	e008      	b.n	8009958 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800994a:	4b06      	ldr	r3, [pc, #24]	@ (8009964 <xTaskPriorityInherit+0xe0>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009950:	429a      	cmp	r2, r3
 8009952:	d201      	bcs.n	8009958 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009954:	2301      	movs	r3, #1
 8009956:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009958:	68fb      	ldr	r3, [r7, #12]
	}
 800995a:	4618      	mov	r0, r3
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	200009d0 	.word	0x200009d0
 8009968:	200009d4 	.word	0x200009d4
 800996c:	20000ad8 	.word	0x20000ad8

08009970 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009970:	b580      	push	{r7, lr}
 8009972:	b088      	sub	sp, #32
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800997e:	2301      	movs	r3, #1
 8009980:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d079      	beq.n	8009a7c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009988:	69bb      	ldr	r3, [r7, #24]
 800998a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800998c:	2b00      	cmp	r3, #0
 800998e:	d10b      	bne.n	80099a8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009994:	f383 8811 	msr	BASEPRI, r3
 8009998:	f3bf 8f6f 	isb	sy
 800999c:	f3bf 8f4f 	dsb	sy
 80099a0:	60fb      	str	r3, [r7, #12]
}
 80099a2:	bf00      	nop
 80099a4:	bf00      	nop
 80099a6:	e7fd      	b.n	80099a4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099ac:	683a      	ldr	r2, [r7, #0]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d902      	bls.n	80099b8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	61fb      	str	r3, [r7, #28]
 80099b6:	e002      	b.n	80099be <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80099b8:	69bb      	ldr	r3, [r7, #24]
 80099ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099bc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099c2:	69fa      	ldr	r2, [r7, #28]
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d059      	beq.n	8009a7c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80099cc:	697a      	ldr	r2, [r7, #20]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d154      	bne.n	8009a7c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80099d2:	4b2c      	ldr	r3, [pc, #176]	@ (8009a84 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	69ba      	ldr	r2, [r7, #24]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d10b      	bne.n	80099f4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80099dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e0:	f383 8811 	msr	BASEPRI, r3
 80099e4:	f3bf 8f6f 	isb	sy
 80099e8:	f3bf 8f4f 	dsb	sy
 80099ec:	60bb      	str	r3, [r7, #8]
}
 80099ee:	bf00      	nop
 80099f0:	bf00      	nop
 80099f2:	e7fd      	b.n	80099f0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80099f4:	69bb      	ldr	r3, [r7, #24]
 80099f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099f8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80099fa:	69bb      	ldr	r3, [r7, #24]
 80099fc:	69fa      	ldr	r2, [r7, #28]
 80099fe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009a00:	69bb      	ldr	r3, [r7, #24]
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	db04      	blt.n	8009a12 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	f1c3 0207 	rsb	r2, r3, #7
 8009a0e:	69bb      	ldr	r3, [r7, #24]
 8009a10:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	6959      	ldr	r1, [r3, #20]
 8009a16:	693a      	ldr	r2, [r7, #16]
 8009a18:	4613      	mov	r3, r2
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	4413      	add	r3, r2
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	4a19      	ldr	r2, [pc, #100]	@ (8009a88 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009a22:	4413      	add	r3, r2
 8009a24:	4299      	cmp	r1, r3
 8009a26:	d129      	bne.n	8009a7c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	3304      	adds	r3, #4
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7fe fdf6 	bl	800861e <uxListRemove>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d10a      	bne.n	8009a4e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009a38:	69bb      	ldr	r3, [r7, #24]
 8009a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a42:	43da      	mvns	r2, r3
 8009a44:	4b11      	ldr	r3, [pc, #68]	@ (8009a8c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4013      	ands	r3, r2
 8009a4a:	4a10      	ldr	r2, [pc, #64]	@ (8009a8c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009a4c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009a4e:	69bb      	ldr	r3, [r7, #24]
 8009a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a52:	2201      	movs	r2, #1
 8009a54:	409a      	lsls	r2, r3
 8009a56:	4b0d      	ldr	r3, [pc, #52]	@ (8009a8c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	4a0b      	ldr	r2, [pc, #44]	@ (8009a8c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009a5e:	6013      	str	r3, [r2, #0]
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a64:	4613      	mov	r3, r2
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	4413      	add	r3, r2
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	4a06      	ldr	r2, [pc, #24]	@ (8009a88 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009a6e:	441a      	add	r2, r3
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	3304      	adds	r3, #4
 8009a74:	4619      	mov	r1, r3
 8009a76:	4610      	mov	r0, r2
 8009a78:	f7fe fd74 	bl	8008564 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009a7c:	bf00      	nop
 8009a7e:	3720      	adds	r7, #32
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}
 8009a84:	200009d0 	.word	0x200009d0
 8009a88:	200009d4 	.word	0x200009d4
 8009a8c:	20000ad8 	.word	0x20000ad8

08009a90 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009a90:	b480      	push	{r7}
 8009a92:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009a94:	4b07      	ldr	r3, [pc, #28]	@ (8009ab4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d004      	beq.n	8009aa6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009a9c:	4b05      	ldr	r3, [pc, #20]	@ (8009ab4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009aa2:	3201      	adds	r2, #1
 8009aa4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8009aa6:	4b03      	ldr	r3, [pc, #12]	@ (8009ab4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
	}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr
 8009ab4:	200009d0 	.word	0x200009d0

08009ab8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b084      	sub	sp, #16
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009ac2:	4b29      	ldr	r3, [pc, #164]	@ (8009b68 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ac8:	4b28      	ldr	r3, [pc, #160]	@ (8009b6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	3304      	adds	r3, #4
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7fe fda5 	bl	800861e <uxListRemove>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d10b      	bne.n	8009af2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009ada:	4b24      	ldr	r3, [pc, #144]	@ (8009b6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ae6:	43da      	mvns	r2, r3
 8009ae8:	4b21      	ldr	r3, [pc, #132]	@ (8009b70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4013      	ands	r3, r2
 8009aee:	4a20      	ldr	r2, [pc, #128]	@ (8009b70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009af0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009af8:	d10a      	bne.n	8009b10 <prvAddCurrentTaskToDelayedList+0x58>
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d007      	beq.n	8009b10 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b00:	4b1a      	ldr	r3, [pc, #104]	@ (8009b6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	3304      	adds	r3, #4
 8009b06:	4619      	mov	r1, r3
 8009b08:	481a      	ldr	r0, [pc, #104]	@ (8009b74 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009b0a:	f7fe fd2b 	bl	8008564 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009b0e:	e026      	b.n	8009b5e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4413      	add	r3, r2
 8009b16:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009b18:	4b14      	ldr	r3, [pc, #80]	@ (8009b6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	68ba      	ldr	r2, [r7, #8]
 8009b1e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009b20:	68ba      	ldr	r2, [r7, #8]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d209      	bcs.n	8009b3c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b28:	4b13      	ldr	r3, [pc, #76]	@ (8009b78 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8009b6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	3304      	adds	r3, #4
 8009b32:	4619      	mov	r1, r3
 8009b34:	4610      	mov	r0, r2
 8009b36:	f7fe fd39 	bl	80085ac <vListInsert>
}
 8009b3a:	e010      	b.n	8009b5e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8009b7c <prvAddCurrentTaskToDelayedList+0xc4>)
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	4b0a      	ldr	r3, [pc, #40]	@ (8009b6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	3304      	adds	r3, #4
 8009b46:	4619      	mov	r1, r3
 8009b48:	4610      	mov	r0, r2
 8009b4a:	f7fe fd2f 	bl	80085ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8009b80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	68ba      	ldr	r2, [r7, #8]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d202      	bcs.n	8009b5e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009b58:	4a09      	ldr	r2, [pc, #36]	@ (8009b80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	6013      	str	r3, [r2, #0]
}
 8009b5e:	bf00      	nop
 8009b60:	3710      	adds	r7, #16
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	20000ad4 	.word	0x20000ad4
 8009b6c:	200009d0 	.word	0x200009d0
 8009b70:	20000ad8 	.word	0x20000ad8
 8009b74:	20000abc 	.word	0x20000abc
 8009b78:	20000a8c 	.word	0x20000a8c
 8009b7c:	20000a88 	.word	0x20000a88
 8009b80:	20000af0 	.word	0x20000af0

08009b84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b84:	b480      	push	{r7}
 8009b86:	b085      	sub	sp, #20
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	3b04      	subs	r3, #4
 8009b94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009b9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	3b04      	subs	r3, #4
 8009ba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	f023 0201 	bic.w	r2, r3, #1
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	3b04      	subs	r3, #4
 8009bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009bb4:	4a0c      	ldr	r2, [pc, #48]	@ (8009be8 <pxPortInitialiseStack+0x64>)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	3b14      	subs	r3, #20
 8009bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	3b04      	subs	r3, #4
 8009bca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f06f 0202 	mvn.w	r2, #2
 8009bd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	3b20      	subs	r3, #32
 8009bd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009bda:	68fb      	ldr	r3, [r7, #12]
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3714      	adds	r7, #20
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr
 8009be8:	08009bed 	.word	0x08009bed

08009bec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009bf6:	4b13      	ldr	r3, [pc, #76]	@ (8009c44 <prvTaskExitError+0x58>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009bfe:	d00b      	beq.n	8009c18 <prvTaskExitError+0x2c>
	__asm volatile
 8009c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c04:	f383 8811 	msr	BASEPRI, r3
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	60fb      	str	r3, [r7, #12]
}
 8009c12:	bf00      	nop
 8009c14:	bf00      	nop
 8009c16:	e7fd      	b.n	8009c14 <prvTaskExitError+0x28>
	__asm volatile
 8009c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c1c:	f383 8811 	msr	BASEPRI, r3
 8009c20:	f3bf 8f6f 	isb	sy
 8009c24:	f3bf 8f4f 	dsb	sy
 8009c28:	60bb      	str	r3, [r7, #8]
}
 8009c2a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009c2c:	bf00      	nop
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d0fc      	beq.n	8009c2e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009c34:	bf00      	nop
 8009c36:	bf00      	nop
 8009c38:	3714      	adds	r7, #20
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	20000014 	.word	0x20000014
	...

08009c50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c50:	4b07      	ldr	r3, [pc, #28]	@ (8009c70 <pxCurrentTCBConst2>)
 8009c52:	6819      	ldr	r1, [r3, #0]
 8009c54:	6808      	ldr	r0, [r1, #0]
 8009c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c5a:	f380 8809 	msr	PSP, r0
 8009c5e:	f3bf 8f6f 	isb	sy
 8009c62:	f04f 0000 	mov.w	r0, #0
 8009c66:	f380 8811 	msr	BASEPRI, r0
 8009c6a:	4770      	bx	lr
 8009c6c:	f3af 8000 	nop.w

08009c70 <pxCurrentTCBConst2>:
 8009c70:	200009d0 	.word	0x200009d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c74:	bf00      	nop
 8009c76:	bf00      	nop

08009c78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009c78:	4808      	ldr	r0, [pc, #32]	@ (8009c9c <prvPortStartFirstTask+0x24>)
 8009c7a:	6800      	ldr	r0, [r0, #0]
 8009c7c:	6800      	ldr	r0, [r0, #0]
 8009c7e:	f380 8808 	msr	MSP, r0
 8009c82:	f04f 0000 	mov.w	r0, #0
 8009c86:	f380 8814 	msr	CONTROL, r0
 8009c8a:	b662      	cpsie	i
 8009c8c:	b661      	cpsie	f
 8009c8e:	f3bf 8f4f 	dsb	sy
 8009c92:	f3bf 8f6f 	isb	sy
 8009c96:	df00      	svc	0
 8009c98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c9a:	bf00      	nop
 8009c9c:	e000ed08 	.word	0xe000ed08

08009ca0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b086      	sub	sp, #24
 8009ca4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009ca6:	4b47      	ldr	r3, [pc, #284]	@ (8009dc4 <xPortStartScheduler+0x124>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a47      	ldr	r2, [pc, #284]	@ (8009dc8 <xPortStartScheduler+0x128>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d10b      	bne.n	8009cc8 <xPortStartScheduler+0x28>
	__asm volatile
 8009cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cb4:	f383 8811 	msr	BASEPRI, r3
 8009cb8:	f3bf 8f6f 	isb	sy
 8009cbc:	f3bf 8f4f 	dsb	sy
 8009cc0:	613b      	str	r3, [r7, #16]
}
 8009cc2:	bf00      	nop
 8009cc4:	bf00      	nop
 8009cc6:	e7fd      	b.n	8009cc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009cc8:	4b3e      	ldr	r3, [pc, #248]	@ (8009dc4 <xPortStartScheduler+0x124>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a3f      	ldr	r2, [pc, #252]	@ (8009dcc <xPortStartScheduler+0x12c>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d10b      	bne.n	8009cea <xPortStartScheduler+0x4a>
	__asm volatile
 8009cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cd6:	f383 8811 	msr	BASEPRI, r3
 8009cda:	f3bf 8f6f 	isb	sy
 8009cde:	f3bf 8f4f 	dsb	sy
 8009ce2:	60fb      	str	r3, [r7, #12]
}
 8009ce4:	bf00      	nop
 8009ce6:	bf00      	nop
 8009ce8:	e7fd      	b.n	8009ce6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009cea:	4b39      	ldr	r3, [pc, #228]	@ (8009dd0 <xPortStartScheduler+0x130>)
 8009cec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	22ff      	movs	r2, #255	@ 0xff
 8009cfa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009d04:	78fb      	ldrb	r3, [r7, #3]
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009d0c:	b2da      	uxtb	r2, r3
 8009d0e:	4b31      	ldr	r3, [pc, #196]	@ (8009dd4 <xPortStartScheduler+0x134>)
 8009d10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009d12:	4b31      	ldr	r3, [pc, #196]	@ (8009dd8 <xPortStartScheduler+0x138>)
 8009d14:	2207      	movs	r2, #7
 8009d16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d18:	e009      	b.n	8009d2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009d1a:	4b2f      	ldr	r3, [pc, #188]	@ (8009dd8 <xPortStartScheduler+0x138>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	4a2d      	ldr	r2, [pc, #180]	@ (8009dd8 <xPortStartScheduler+0x138>)
 8009d22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009d24:	78fb      	ldrb	r3, [r7, #3]
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	005b      	lsls	r3, r3, #1
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d2e:	78fb      	ldrb	r3, [r7, #3]
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d36:	2b80      	cmp	r3, #128	@ 0x80
 8009d38:	d0ef      	beq.n	8009d1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d3a:	4b27      	ldr	r3, [pc, #156]	@ (8009dd8 <xPortStartScheduler+0x138>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f1c3 0307 	rsb	r3, r3, #7
 8009d42:	2b04      	cmp	r3, #4
 8009d44:	d00b      	beq.n	8009d5e <xPortStartScheduler+0xbe>
	__asm volatile
 8009d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d4a:	f383 8811 	msr	BASEPRI, r3
 8009d4e:	f3bf 8f6f 	isb	sy
 8009d52:	f3bf 8f4f 	dsb	sy
 8009d56:	60bb      	str	r3, [r7, #8]
}
 8009d58:	bf00      	nop
 8009d5a:	bf00      	nop
 8009d5c:	e7fd      	b.n	8009d5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8009dd8 <xPortStartScheduler+0x138>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	021b      	lsls	r3, r3, #8
 8009d64:	4a1c      	ldr	r2, [pc, #112]	@ (8009dd8 <xPortStartScheduler+0x138>)
 8009d66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009d68:	4b1b      	ldr	r3, [pc, #108]	@ (8009dd8 <xPortStartScheduler+0x138>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009d70:	4a19      	ldr	r2, [pc, #100]	@ (8009dd8 <xPortStartScheduler+0x138>)
 8009d72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	b2da      	uxtb	r2, r3
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009d7c:	4b17      	ldr	r3, [pc, #92]	@ (8009ddc <xPortStartScheduler+0x13c>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a16      	ldr	r2, [pc, #88]	@ (8009ddc <xPortStartScheduler+0x13c>)
 8009d82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009d86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009d88:	4b14      	ldr	r3, [pc, #80]	@ (8009ddc <xPortStartScheduler+0x13c>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a13      	ldr	r2, [pc, #76]	@ (8009ddc <xPortStartScheduler+0x13c>)
 8009d8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009d92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009d94:	f000 f8da 	bl	8009f4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009d98:	4b11      	ldr	r3, [pc, #68]	@ (8009de0 <xPortStartScheduler+0x140>)
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009d9e:	f000 f8f9 	bl	8009f94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009da2:	4b10      	ldr	r3, [pc, #64]	@ (8009de4 <xPortStartScheduler+0x144>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a0f      	ldr	r2, [pc, #60]	@ (8009de4 <xPortStartScheduler+0x144>)
 8009da8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009dac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009dae:	f7ff ff63 	bl	8009c78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009db2:	f7ff faf9 	bl	80093a8 <vTaskSwitchContext>
	prvTaskExitError();
 8009db6:	f7ff ff19 	bl	8009bec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3718      	adds	r7, #24
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	e000ed00 	.word	0xe000ed00
 8009dc8:	410fc271 	.word	0x410fc271
 8009dcc:	410fc270 	.word	0x410fc270
 8009dd0:	e000e400 	.word	0xe000e400
 8009dd4:	20000afc 	.word	0x20000afc
 8009dd8:	20000b00 	.word	0x20000b00
 8009ddc:	e000ed20 	.word	0xe000ed20
 8009de0:	20000014 	.word	0x20000014
 8009de4:	e000ef34 	.word	0xe000ef34

08009de8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
	__asm volatile
 8009dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009df2:	f383 8811 	msr	BASEPRI, r3
 8009df6:	f3bf 8f6f 	isb	sy
 8009dfa:	f3bf 8f4f 	dsb	sy
 8009dfe:	607b      	str	r3, [r7, #4]
}
 8009e00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009e02:	4b10      	ldr	r3, [pc, #64]	@ (8009e44 <vPortEnterCritical+0x5c>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	3301      	adds	r3, #1
 8009e08:	4a0e      	ldr	r2, [pc, #56]	@ (8009e44 <vPortEnterCritical+0x5c>)
 8009e0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8009e44 <vPortEnterCritical+0x5c>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d110      	bne.n	8009e36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009e14:	4b0c      	ldr	r3, [pc, #48]	@ (8009e48 <vPortEnterCritical+0x60>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00b      	beq.n	8009e36 <vPortEnterCritical+0x4e>
	__asm volatile
 8009e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e22:	f383 8811 	msr	BASEPRI, r3
 8009e26:	f3bf 8f6f 	isb	sy
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	603b      	str	r3, [r7, #0]
}
 8009e30:	bf00      	nop
 8009e32:	bf00      	nop
 8009e34:	e7fd      	b.n	8009e32 <vPortEnterCritical+0x4a>
	}
}
 8009e36:	bf00      	nop
 8009e38:	370c      	adds	r7, #12
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr
 8009e42:	bf00      	nop
 8009e44:	20000014 	.word	0x20000014
 8009e48:	e000ed04 	.word	0xe000ed04

08009e4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e52:	4b12      	ldr	r3, [pc, #72]	@ (8009e9c <vPortExitCritical+0x50>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d10b      	bne.n	8009e72 <vPortExitCritical+0x26>
	__asm volatile
 8009e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e5e:	f383 8811 	msr	BASEPRI, r3
 8009e62:	f3bf 8f6f 	isb	sy
 8009e66:	f3bf 8f4f 	dsb	sy
 8009e6a:	607b      	str	r3, [r7, #4]
}
 8009e6c:	bf00      	nop
 8009e6e:	bf00      	nop
 8009e70:	e7fd      	b.n	8009e6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009e72:	4b0a      	ldr	r3, [pc, #40]	@ (8009e9c <vPortExitCritical+0x50>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	3b01      	subs	r3, #1
 8009e78:	4a08      	ldr	r2, [pc, #32]	@ (8009e9c <vPortExitCritical+0x50>)
 8009e7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e7c:	4b07      	ldr	r3, [pc, #28]	@ (8009e9c <vPortExitCritical+0x50>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d105      	bne.n	8009e90 <vPortExitCritical+0x44>
 8009e84:	2300      	movs	r3, #0
 8009e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	f383 8811 	msr	BASEPRI, r3
}
 8009e8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e90:	bf00      	nop
 8009e92:	370c      	adds	r7, #12
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr
 8009e9c:	20000014 	.word	0x20000014

08009ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ea0:	f3ef 8009 	mrs	r0, PSP
 8009ea4:	f3bf 8f6f 	isb	sy
 8009ea8:	4b15      	ldr	r3, [pc, #84]	@ (8009f00 <pxCurrentTCBConst>)
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	f01e 0f10 	tst.w	lr, #16
 8009eb0:	bf08      	it	eq
 8009eb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009eb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eba:	6010      	str	r0, [r2, #0]
 8009ebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ec0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009ec4:	f380 8811 	msr	BASEPRI, r0
 8009ec8:	f3bf 8f4f 	dsb	sy
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	f7ff fa6a 	bl	80093a8 <vTaskSwitchContext>
 8009ed4:	f04f 0000 	mov.w	r0, #0
 8009ed8:	f380 8811 	msr	BASEPRI, r0
 8009edc:	bc09      	pop	{r0, r3}
 8009ede:	6819      	ldr	r1, [r3, #0]
 8009ee0:	6808      	ldr	r0, [r1, #0]
 8009ee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee6:	f01e 0f10 	tst.w	lr, #16
 8009eea:	bf08      	it	eq
 8009eec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ef0:	f380 8809 	msr	PSP, r0
 8009ef4:	f3bf 8f6f 	isb	sy
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	f3af 8000 	nop.w

08009f00 <pxCurrentTCBConst>:
 8009f00:	200009d0 	.word	0x200009d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009f04:	bf00      	nop
 8009f06:	bf00      	nop

08009f08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f12:	f383 8811 	msr	BASEPRI, r3
 8009f16:	f3bf 8f6f 	isb	sy
 8009f1a:	f3bf 8f4f 	dsb	sy
 8009f1e:	607b      	str	r3, [r7, #4]
}
 8009f20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009f22:	f7ff f987 	bl	8009234 <xTaskIncrementTick>
 8009f26:	4603      	mov	r3, r0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d003      	beq.n	8009f34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f2c:	4b06      	ldr	r3, [pc, #24]	@ (8009f48 <SysTick_Handler+0x40>)
 8009f2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f32:	601a      	str	r2, [r3, #0]
 8009f34:	2300      	movs	r3, #0
 8009f36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	f383 8811 	msr	BASEPRI, r3
}
 8009f3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009f40:	bf00      	nop
 8009f42:	3708      	adds	r7, #8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}
 8009f48:	e000ed04 	.word	0xe000ed04

08009f4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009f50:	4b0b      	ldr	r3, [pc, #44]	@ (8009f80 <vPortSetupTimerInterrupt+0x34>)
 8009f52:	2200      	movs	r2, #0
 8009f54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009f56:	4b0b      	ldr	r3, [pc, #44]	@ (8009f84 <vPortSetupTimerInterrupt+0x38>)
 8009f58:	2200      	movs	r2, #0
 8009f5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8009f88 <vPortSetupTimerInterrupt+0x3c>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a0a      	ldr	r2, [pc, #40]	@ (8009f8c <vPortSetupTimerInterrupt+0x40>)
 8009f62:	fba2 2303 	umull	r2, r3, r2, r3
 8009f66:	099b      	lsrs	r3, r3, #6
 8009f68:	4a09      	ldr	r2, [pc, #36]	@ (8009f90 <vPortSetupTimerInterrupt+0x44>)
 8009f6a:	3b01      	subs	r3, #1
 8009f6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009f6e:	4b04      	ldr	r3, [pc, #16]	@ (8009f80 <vPortSetupTimerInterrupt+0x34>)
 8009f70:	2207      	movs	r2, #7
 8009f72:	601a      	str	r2, [r3, #0]
}
 8009f74:	bf00      	nop
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop
 8009f80:	e000e010 	.word	0xe000e010
 8009f84:	e000e018 	.word	0xe000e018
 8009f88:	20000000 	.word	0x20000000
 8009f8c:	10624dd3 	.word	0x10624dd3
 8009f90:	e000e014 	.word	0xe000e014

08009f94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009f94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009fa4 <vPortEnableVFP+0x10>
 8009f98:	6801      	ldr	r1, [r0, #0]
 8009f9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009f9e:	6001      	str	r1, [r0, #0]
 8009fa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009fa2:	bf00      	nop
 8009fa4:	e000ed88 	.word	0xe000ed88

08009fa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009fa8:	b480      	push	{r7}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009fae:	f3ef 8305 	mrs	r3, IPSR
 8009fb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2b0f      	cmp	r3, #15
 8009fb8:	d915      	bls.n	8009fe6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009fba:	4a18      	ldr	r2, [pc, #96]	@ (800a01c <vPortValidateInterruptPriority+0x74>)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	4413      	add	r3, r2
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009fc4:	4b16      	ldr	r3, [pc, #88]	@ (800a020 <vPortValidateInterruptPriority+0x78>)
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	7afa      	ldrb	r2, [r7, #11]
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d20b      	bcs.n	8009fe6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fd2:	f383 8811 	msr	BASEPRI, r3
 8009fd6:	f3bf 8f6f 	isb	sy
 8009fda:	f3bf 8f4f 	dsb	sy
 8009fde:	607b      	str	r3, [r7, #4]
}
 8009fe0:	bf00      	nop
 8009fe2:	bf00      	nop
 8009fe4:	e7fd      	b.n	8009fe2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009fe6:	4b0f      	ldr	r3, [pc, #60]	@ (800a024 <vPortValidateInterruptPriority+0x7c>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009fee:	4b0e      	ldr	r3, [pc, #56]	@ (800a028 <vPortValidateInterruptPriority+0x80>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d90b      	bls.n	800a00e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ffa:	f383 8811 	msr	BASEPRI, r3
 8009ffe:	f3bf 8f6f 	isb	sy
 800a002:	f3bf 8f4f 	dsb	sy
 800a006:	603b      	str	r3, [r7, #0]
}
 800a008:	bf00      	nop
 800a00a:	bf00      	nop
 800a00c:	e7fd      	b.n	800a00a <vPortValidateInterruptPriority+0x62>
	}
 800a00e:	bf00      	nop
 800a010:	3714      	adds	r7, #20
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
 800a01a:	bf00      	nop
 800a01c:	e000e3f0 	.word	0xe000e3f0
 800a020:	20000afc 	.word	0x20000afc
 800a024:	e000ed0c 	.word	0xe000ed0c
 800a028:	20000b00 	.word	0x20000b00

0800a02c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b08a      	sub	sp, #40	@ 0x28
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a034:	2300      	movs	r3, #0
 800a036:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a038:	f7ff f850 	bl	80090dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a03c:	4b5c      	ldr	r3, [pc, #368]	@ (800a1b0 <pvPortMalloc+0x184>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d101      	bne.n	800a048 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a044:	f000 f924 	bl	800a290 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a048:	4b5a      	ldr	r3, [pc, #360]	@ (800a1b4 <pvPortMalloc+0x188>)
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4013      	ands	r3, r2
 800a050:	2b00      	cmp	r3, #0
 800a052:	f040 8095 	bne.w	800a180 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d01e      	beq.n	800a09a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a05c:	2208      	movs	r2, #8
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4413      	add	r3, r2
 800a062:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f003 0307 	and.w	r3, r3, #7
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d015      	beq.n	800a09a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f023 0307 	bic.w	r3, r3, #7
 800a074:	3308      	adds	r3, #8
 800a076:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f003 0307 	and.w	r3, r3, #7
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d00b      	beq.n	800a09a <pvPortMalloc+0x6e>
	__asm volatile
 800a082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a086:	f383 8811 	msr	BASEPRI, r3
 800a08a:	f3bf 8f6f 	isb	sy
 800a08e:	f3bf 8f4f 	dsb	sy
 800a092:	617b      	str	r3, [r7, #20]
}
 800a094:	bf00      	nop
 800a096:	bf00      	nop
 800a098:	e7fd      	b.n	800a096 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d06f      	beq.n	800a180 <pvPortMalloc+0x154>
 800a0a0:	4b45      	ldr	r3, [pc, #276]	@ (800a1b8 <pvPortMalloc+0x18c>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d86a      	bhi.n	800a180 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a0aa:	4b44      	ldr	r3, [pc, #272]	@ (800a1bc <pvPortMalloc+0x190>)
 800a0ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a0ae:	4b43      	ldr	r3, [pc, #268]	@ (800a1bc <pvPortMalloc+0x190>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0b4:	e004      	b.n	800a0c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d903      	bls.n	800a0d2 <pvPortMalloc+0xa6>
 800a0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d1f1      	bne.n	800a0b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a0d2:	4b37      	ldr	r3, [pc, #220]	@ (800a1b0 <pvPortMalloc+0x184>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d051      	beq.n	800a180 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a0dc:	6a3b      	ldr	r3, [r7, #32]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2208      	movs	r2, #8
 800a0e2:	4413      	add	r3, r2
 800a0e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	6a3b      	ldr	r3, [r7, #32]
 800a0ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f0:	685a      	ldr	r2, [r3, #4]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	1ad2      	subs	r2, r2, r3
 800a0f6:	2308      	movs	r3, #8
 800a0f8:	005b      	lsls	r3, r3, #1
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d920      	bls.n	800a140 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a0fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4413      	add	r3, r2
 800a104:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	f003 0307 	and.w	r3, r3, #7
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d00b      	beq.n	800a128 <pvPortMalloc+0xfc>
	__asm volatile
 800a110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a114:	f383 8811 	msr	BASEPRI, r3
 800a118:	f3bf 8f6f 	isb	sy
 800a11c:	f3bf 8f4f 	dsb	sy
 800a120:	613b      	str	r3, [r7, #16]
}
 800a122:	bf00      	nop
 800a124:	bf00      	nop
 800a126:	e7fd      	b.n	800a124 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12a:	685a      	ldr	r2, [r3, #4]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	1ad2      	subs	r2, r2, r3
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a13a:	69b8      	ldr	r0, [r7, #24]
 800a13c:	f000 f90a 	bl	800a354 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a140:	4b1d      	ldr	r3, [pc, #116]	@ (800a1b8 <pvPortMalloc+0x18c>)
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	1ad3      	subs	r3, r2, r3
 800a14a:	4a1b      	ldr	r2, [pc, #108]	@ (800a1b8 <pvPortMalloc+0x18c>)
 800a14c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a14e:	4b1a      	ldr	r3, [pc, #104]	@ (800a1b8 <pvPortMalloc+0x18c>)
 800a150:	681a      	ldr	r2, [r3, #0]
 800a152:	4b1b      	ldr	r3, [pc, #108]	@ (800a1c0 <pvPortMalloc+0x194>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	429a      	cmp	r2, r3
 800a158:	d203      	bcs.n	800a162 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a15a:	4b17      	ldr	r3, [pc, #92]	@ (800a1b8 <pvPortMalloc+0x18c>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a18      	ldr	r2, [pc, #96]	@ (800a1c0 <pvPortMalloc+0x194>)
 800a160:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a164:	685a      	ldr	r2, [r3, #4]
 800a166:	4b13      	ldr	r3, [pc, #76]	@ (800a1b4 <pvPortMalloc+0x188>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	431a      	orrs	r2, r3
 800a16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a16e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a172:	2200      	movs	r2, #0
 800a174:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a176:	4b13      	ldr	r3, [pc, #76]	@ (800a1c4 <pvPortMalloc+0x198>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	3301      	adds	r3, #1
 800a17c:	4a11      	ldr	r2, [pc, #68]	@ (800a1c4 <pvPortMalloc+0x198>)
 800a17e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a180:	f7fe ffba 	bl	80090f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	f003 0307 	and.w	r3, r3, #7
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00b      	beq.n	800a1a6 <pvPortMalloc+0x17a>
	__asm volatile
 800a18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a192:	f383 8811 	msr	BASEPRI, r3
 800a196:	f3bf 8f6f 	isb	sy
 800a19a:	f3bf 8f4f 	dsb	sy
 800a19e:	60fb      	str	r3, [r7, #12]
}
 800a1a0:	bf00      	nop
 800a1a2:	bf00      	nop
 800a1a4:	e7fd      	b.n	800a1a2 <pvPortMalloc+0x176>
	return pvReturn;
 800a1a6:	69fb      	ldr	r3, [r7, #28]
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3728      	adds	r7, #40	@ 0x28
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	2000592c 	.word	0x2000592c
 800a1b4:	20005940 	.word	0x20005940
 800a1b8:	20005930 	.word	0x20005930
 800a1bc:	20005924 	.word	0x20005924
 800a1c0:	20005934 	.word	0x20005934
 800a1c4:	20005938 	.word	0x20005938

0800a1c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b086      	sub	sp, #24
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d04f      	beq.n	800a27a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a1da:	2308      	movs	r3, #8
 800a1dc:	425b      	negs	r3, r3
 800a1de:	697a      	ldr	r2, [r7, #20]
 800a1e0:	4413      	add	r3, r2
 800a1e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	685a      	ldr	r2, [r3, #4]
 800a1ec:	4b25      	ldr	r3, [pc, #148]	@ (800a284 <vPortFree+0xbc>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4013      	ands	r3, r2
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d10b      	bne.n	800a20e <vPortFree+0x46>
	__asm volatile
 800a1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1fa:	f383 8811 	msr	BASEPRI, r3
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	f3bf 8f4f 	dsb	sy
 800a206:	60fb      	str	r3, [r7, #12]
}
 800a208:	bf00      	nop
 800a20a:	bf00      	nop
 800a20c:	e7fd      	b.n	800a20a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d00b      	beq.n	800a22e <vPortFree+0x66>
	__asm volatile
 800a216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a21a:	f383 8811 	msr	BASEPRI, r3
 800a21e:	f3bf 8f6f 	isb	sy
 800a222:	f3bf 8f4f 	dsb	sy
 800a226:	60bb      	str	r3, [r7, #8]
}
 800a228:	bf00      	nop
 800a22a:	bf00      	nop
 800a22c:	e7fd      	b.n	800a22a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	685a      	ldr	r2, [r3, #4]
 800a232:	4b14      	ldr	r3, [pc, #80]	@ (800a284 <vPortFree+0xbc>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4013      	ands	r3, r2
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d01e      	beq.n	800a27a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d11a      	bne.n	800a27a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	685a      	ldr	r2, [r3, #4]
 800a248:	4b0e      	ldr	r3, [pc, #56]	@ (800a284 <vPortFree+0xbc>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	43db      	mvns	r3, r3
 800a24e:	401a      	ands	r2, r3
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a254:	f7fe ff42 	bl	80090dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	685a      	ldr	r2, [r3, #4]
 800a25c:	4b0a      	ldr	r3, [pc, #40]	@ (800a288 <vPortFree+0xc0>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4413      	add	r3, r2
 800a262:	4a09      	ldr	r2, [pc, #36]	@ (800a288 <vPortFree+0xc0>)
 800a264:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a266:	6938      	ldr	r0, [r7, #16]
 800a268:	f000 f874 	bl	800a354 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a26c:	4b07      	ldr	r3, [pc, #28]	@ (800a28c <vPortFree+0xc4>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	3301      	adds	r3, #1
 800a272:	4a06      	ldr	r2, [pc, #24]	@ (800a28c <vPortFree+0xc4>)
 800a274:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a276:	f7fe ff3f 	bl	80090f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a27a:	bf00      	nop
 800a27c:	3718      	adds	r7, #24
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	20005940 	.word	0x20005940
 800a288:	20005930 	.word	0x20005930
 800a28c:	2000593c 	.word	0x2000593c

0800a290 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a290:	b480      	push	{r7}
 800a292:	b085      	sub	sp, #20
 800a294:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a296:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800a29a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a29c:	4b27      	ldr	r3, [pc, #156]	@ (800a33c <prvHeapInit+0xac>)
 800a29e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f003 0307 	and.w	r3, r3, #7
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d00c      	beq.n	800a2c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	3307      	adds	r3, #7
 800a2ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f023 0307 	bic.w	r3, r3, #7
 800a2b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a2b8:	68ba      	ldr	r2, [r7, #8]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	1ad3      	subs	r3, r2, r3
 800a2be:	4a1f      	ldr	r2, [pc, #124]	@ (800a33c <prvHeapInit+0xac>)
 800a2c0:	4413      	add	r3, r2
 800a2c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a2c8:	4a1d      	ldr	r2, [pc, #116]	@ (800a340 <prvHeapInit+0xb0>)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a2ce:	4b1c      	ldr	r3, [pc, #112]	@ (800a340 <prvHeapInit+0xb0>)
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	68ba      	ldr	r2, [r7, #8]
 800a2d8:	4413      	add	r3, r2
 800a2da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a2dc:	2208      	movs	r2, #8
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	1a9b      	subs	r3, r3, r2
 800a2e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f023 0307 	bic.w	r3, r3, #7
 800a2ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	4a15      	ldr	r2, [pc, #84]	@ (800a344 <prvHeapInit+0xb4>)
 800a2f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a2f2:	4b14      	ldr	r3, [pc, #80]	@ (800a344 <prvHeapInit+0xb4>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a2fa:	4b12      	ldr	r3, [pc, #72]	@ (800a344 <prvHeapInit+0xb4>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2200      	movs	r2, #0
 800a300:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	68fa      	ldr	r2, [r7, #12]
 800a30a:	1ad2      	subs	r2, r2, r3
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a310:	4b0c      	ldr	r3, [pc, #48]	@ (800a344 <prvHeapInit+0xb4>)
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	4a0a      	ldr	r2, [pc, #40]	@ (800a348 <prvHeapInit+0xb8>)
 800a31e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	4a09      	ldr	r2, [pc, #36]	@ (800a34c <prvHeapInit+0xbc>)
 800a326:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a328:	4b09      	ldr	r3, [pc, #36]	@ (800a350 <prvHeapInit+0xc0>)
 800a32a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a32e:	601a      	str	r2, [r3, #0]
}
 800a330:	bf00      	nop
 800a332:	3714      	adds	r7, #20
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr
 800a33c:	20000b04 	.word	0x20000b04
 800a340:	20005924 	.word	0x20005924
 800a344:	2000592c 	.word	0x2000592c
 800a348:	20005934 	.word	0x20005934
 800a34c:	20005930 	.word	0x20005930
 800a350:	20005940 	.word	0x20005940

0800a354 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a354:	b480      	push	{r7}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a35c:	4b28      	ldr	r3, [pc, #160]	@ (800a400 <prvInsertBlockIntoFreeList+0xac>)
 800a35e:	60fb      	str	r3, [r7, #12]
 800a360:	e002      	b.n	800a368 <prvInsertBlockIntoFreeList+0x14>
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	60fb      	str	r3, [r7, #12]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	429a      	cmp	r2, r3
 800a370:	d8f7      	bhi.n	800a362 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	68ba      	ldr	r2, [r7, #8]
 800a37c:	4413      	add	r3, r2
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	429a      	cmp	r2, r3
 800a382:	d108      	bne.n	800a396 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	685a      	ldr	r2, [r3, #4]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	441a      	add	r2, r3
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	68ba      	ldr	r2, [r7, #8]
 800a3a0:	441a      	add	r2, r3
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d118      	bne.n	800a3dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681a      	ldr	r2, [r3, #0]
 800a3ae:	4b15      	ldr	r3, [pc, #84]	@ (800a404 <prvInsertBlockIntoFreeList+0xb0>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d00d      	beq.n	800a3d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	685a      	ldr	r2, [r3, #4]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	441a      	add	r2, r3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	601a      	str	r2, [r3, #0]
 800a3d0:	e008      	b.n	800a3e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a3d2:	4b0c      	ldr	r3, [pc, #48]	@ (800a404 <prvInsertBlockIntoFreeList+0xb0>)
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	601a      	str	r2, [r3, #0]
 800a3da:	e003      	b.n	800a3e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a3e4:	68fa      	ldr	r2, [r7, #12]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d002      	beq.n	800a3f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3f2:	bf00      	nop
 800a3f4:	3714      	adds	r7, #20
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	20005924 	.word	0x20005924
 800a404:	2000592c 	.word	0x2000592c

0800a408 <atoi>:
 800a408:	220a      	movs	r2, #10
 800a40a:	2100      	movs	r1, #0
 800a40c:	f000 b87a 	b.w	800a504 <strtol>

0800a410 <_strtol_l.constprop.0>:
 800a410:	2b24      	cmp	r3, #36	@ 0x24
 800a412:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a416:	4686      	mov	lr, r0
 800a418:	4690      	mov	r8, r2
 800a41a:	d801      	bhi.n	800a420 <_strtol_l.constprop.0+0x10>
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d106      	bne.n	800a42e <_strtol_l.constprop.0+0x1e>
 800a420:	f000 fb5c 	bl	800aadc <__errno>
 800a424:	2316      	movs	r3, #22
 800a426:	6003      	str	r3, [r0, #0]
 800a428:	2000      	movs	r0, #0
 800a42a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a42e:	4834      	ldr	r0, [pc, #208]	@ (800a500 <_strtol_l.constprop.0+0xf0>)
 800a430:	460d      	mov	r5, r1
 800a432:	462a      	mov	r2, r5
 800a434:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a438:	5d06      	ldrb	r6, [r0, r4]
 800a43a:	f016 0608 	ands.w	r6, r6, #8
 800a43e:	d1f8      	bne.n	800a432 <_strtol_l.constprop.0+0x22>
 800a440:	2c2d      	cmp	r4, #45	@ 0x2d
 800a442:	d12d      	bne.n	800a4a0 <_strtol_l.constprop.0+0x90>
 800a444:	782c      	ldrb	r4, [r5, #0]
 800a446:	2601      	movs	r6, #1
 800a448:	1c95      	adds	r5, r2, #2
 800a44a:	f033 0210 	bics.w	r2, r3, #16
 800a44e:	d109      	bne.n	800a464 <_strtol_l.constprop.0+0x54>
 800a450:	2c30      	cmp	r4, #48	@ 0x30
 800a452:	d12a      	bne.n	800a4aa <_strtol_l.constprop.0+0x9a>
 800a454:	782a      	ldrb	r2, [r5, #0]
 800a456:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a45a:	2a58      	cmp	r2, #88	@ 0x58
 800a45c:	d125      	bne.n	800a4aa <_strtol_l.constprop.0+0x9a>
 800a45e:	786c      	ldrb	r4, [r5, #1]
 800a460:	2310      	movs	r3, #16
 800a462:	3502      	adds	r5, #2
 800a464:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a468:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800a46c:	2200      	movs	r2, #0
 800a46e:	fbbc f9f3 	udiv	r9, ip, r3
 800a472:	4610      	mov	r0, r2
 800a474:	fb03 ca19 	mls	sl, r3, r9, ip
 800a478:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a47c:	2f09      	cmp	r7, #9
 800a47e:	d81b      	bhi.n	800a4b8 <_strtol_l.constprop.0+0xa8>
 800a480:	463c      	mov	r4, r7
 800a482:	42a3      	cmp	r3, r4
 800a484:	dd27      	ble.n	800a4d6 <_strtol_l.constprop.0+0xc6>
 800a486:	1c57      	adds	r7, r2, #1
 800a488:	d007      	beq.n	800a49a <_strtol_l.constprop.0+0x8a>
 800a48a:	4581      	cmp	r9, r0
 800a48c:	d320      	bcc.n	800a4d0 <_strtol_l.constprop.0+0xc0>
 800a48e:	d101      	bne.n	800a494 <_strtol_l.constprop.0+0x84>
 800a490:	45a2      	cmp	sl, r4
 800a492:	db1d      	blt.n	800a4d0 <_strtol_l.constprop.0+0xc0>
 800a494:	fb00 4003 	mla	r0, r0, r3, r4
 800a498:	2201      	movs	r2, #1
 800a49a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a49e:	e7eb      	b.n	800a478 <_strtol_l.constprop.0+0x68>
 800a4a0:	2c2b      	cmp	r4, #43	@ 0x2b
 800a4a2:	bf04      	itt	eq
 800a4a4:	782c      	ldrbeq	r4, [r5, #0]
 800a4a6:	1c95      	addeq	r5, r2, #2
 800a4a8:	e7cf      	b.n	800a44a <_strtol_l.constprop.0+0x3a>
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d1da      	bne.n	800a464 <_strtol_l.constprop.0+0x54>
 800a4ae:	2c30      	cmp	r4, #48	@ 0x30
 800a4b0:	bf0c      	ite	eq
 800a4b2:	2308      	moveq	r3, #8
 800a4b4:	230a      	movne	r3, #10
 800a4b6:	e7d5      	b.n	800a464 <_strtol_l.constprop.0+0x54>
 800a4b8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a4bc:	2f19      	cmp	r7, #25
 800a4be:	d801      	bhi.n	800a4c4 <_strtol_l.constprop.0+0xb4>
 800a4c0:	3c37      	subs	r4, #55	@ 0x37
 800a4c2:	e7de      	b.n	800a482 <_strtol_l.constprop.0+0x72>
 800a4c4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a4c8:	2f19      	cmp	r7, #25
 800a4ca:	d804      	bhi.n	800a4d6 <_strtol_l.constprop.0+0xc6>
 800a4cc:	3c57      	subs	r4, #87	@ 0x57
 800a4ce:	e7d8      	b.n	800a482 <_strtol_l.constprop.0+0x72>
 800a4d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a4d4:	e7e1      	b.n	800a49a <_strtol_l.constprop.0+0x8a>
 800a4d6:	1c53      	adds	r3, r2, #1
 800a4d8:	d108      	bne.n	800a4ec <_strtol_l.constprop.0+0xdc>
 800a4da:	2322      	movs	r3, #34	@ 0x22
 800a4dc:	f8ce 3000 	str.w	r3, [lr]
 800a4e0:	4660      	mov	r0, ip
 800a4e2:	f1b8 0f00 	cmp.w	r8, #0
 800a4e6:	d0a0      	beq.n	800a42a <_strtol_l.constprop.0+0x1a>
 800a4e8:	1e69      	subs	r1, r5, #1
 800a4ea:	e006      	b.n	800a4fa <_strtol_l.constprop.0+0xea>
 800a4ec:	b106      	cbz	r6, 800a4f0 <_strtol_l.constprop.0+0xe0>
 800a4ee:	4240      	negs	r0, r0
 800a4f0:	f1b8 0f00 	cmp.w	r8, #0
 800a4f4:	d099      	beq.n	800a42a <_strtol_l.constprop.0+0x1a>
 800a4f6:	2a00      	cmp	r2, #0
 800a4f8:	d1f6      	bne.n	800a4e8 <_strtol_l.constprop.0+0xd8>
 800a4fa:	f8c8 1000 	str.w	r1, [r8]
 800a4fe:	e794      	b.n	800a42a <_strtol_l.constprop.0+0x1a>
 800a500:	0800bbf1 	.word	0x0800bbf1

0800a504 <strtol>:
 800a504:	4613      	mov	r3, r2
 800a506:	460a      	mov	r2, r1
 800a508:	4601      	mov	r1, r0
 800a50a:	4802      	ldr	r0, [pc, #8]	@ (800a514 <strtol+0x10>)
 800a50c:	6800      	ldr	r0, [r0, #0]
 800a50e:	f7ff bf7f 	b.w	800a410 <_strtol_l.constprop.0>
 800a512:	bf00      	nop
 800a514:	20000024 	.word	0x20000024

0800a518 <std>:
 800a518:	2300      	movs	r3, #0
 800a51a:	b510      	push	{r4, lr}
 800a51c:	4604      	mov	r4, r0
 800a51e:	e9c0 3300 	strd	r3, r3, [r0]
 800a522:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a526:	6083      	str	r3, [r0, #8]
 800a528:	8181      	strh	r1, [r0, #12]
 800a52a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a52c:	81c2      	strh	r2, [r0, #14]
 800a52e:	6183      	str	r3, [r0, #24]
 800a530:	4619      	mov	r1, r3
 800a532:	2208      	movs	r2, #8
 800a534:	305c      	adds	r0, #92	@ 0x5c
 800a536:	f000 fa2d 	bl	800a994 <memset>
 800a53a:	4b0d      	ldr	r3, [pc, #52]	@ (800a570 <std+0x58>)
 800a53c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a53e:	4b0d      	ldr	r3, [pc, #52]	@ (800a574 <std+0x5c>)
 800a540:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a542:	4b0d      	ldr	r3, [pc, #52]	@ (800a578 <std+0x60>)
 800a544:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a546:	4b0d      	ldr	r3, [pc, #52]	@ (800a57c <std+0x64>)
 800a548:	6323      	str	r3, [r4, #48]	@ 0x30
 800a54a:	4b0d      	ldr	r3, [pc, #52]	@ (800a580 <std+0x68>)
 800a54c:	6224      	str	r4, [r4, #32]
 800a54e:	429c      	cmp	r4, r3
 800a550:	d006      	beq.n	800a560 <std+0x48>
 800a552:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a556:	4294      	cmp	r4, r2
 800a558:	d002      	beq.n	800a560 <std+0x48>
 800a55a:	33d0      	adds	r3, #208	@ 0xd0
 800a55c:	429c      	cmp	r4, r3
 800a55e:	d105      	bne.n	800a56c <std+0x54>
 800a560:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a568:	f000 bae2 	b.w	800ab30 <__retarget_lock_init_recursive>
 800a56c:	bd10      	pop	{r4, pc}
 800a56e:	bf00      	nop
 800a570:	0800a7e5 	.word	0x0800a7e5
 800a574:	0800a807 	.word	0x0800a807
 800a578:	0800a83f 	.word	0x0800a83f
 800a57c:	0800a863 	.word	0x0800a863
 800a580:	20005944 	.word	0x20005944

0800a584 <stdio_exit_handler>:
 800a584:	4a02      	ldr	r2, [pc, #8]	@ (800a590 <stdio_exit_handler+0xc>)
 800a586:	4903      	ldr	r1, [pc, #12]	@ (800a594 <stdio_exit_handler+0x10>)
 800a588:	4803      	ldr	r0, [pc, #12]	@ (800a598 <stdio_exit_handler+0x14>)
 800a58a:	f000 b869 	b.w	800a660 <_fwalk_sglue>
 800a58e:	bf00      	nop
 800a590:	20000018 	.word	0x20000018
 800a594:	0800b69d 	.word	0x0800b69d
 800a598:	20000028 	.word	0x20000028

0800a59c <cleanup_stdio>:
 800a59c:	6841      	ldr	r1, [r0, #4]
 800a59e:	4b0c      	ldr	r3, [pc, #48]	@ (800a5d0 <cleanup_stdio+0x34>)
 800a5a0:	4299      	cmp	r1, r3
 800a5a2:	b510      	push	{r4, lr}
 800a5a4:	4604      	mov	r4, r0
 800a5a6:	d001      	beq.n	800a5ac <cleanup_stdio+0x10>
 800a5a8:	f001 f878 	bl	800b69c <_fflush_r>
 800a5ac:	68a1      	ldr	r1, [r4, #8]
 800a5ae:	4b09      	ldr	r3, [pc, #36]	@ (800a5d4 <cleanup_stdio+0x38>)
 800a5b0:	4299      	cmp	r1, r3
 800a5b2:	d002      	beq.n	800a5ba <cleanup_stdio+0x1e>
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	f001 f871 	bl	800b69c <_fflush_r>
 800a5ba:	68e1      	ldr	r1, [r4, #12]
 800a5bc:	4b06      	ldr	r3, [pc, #24]	@ (800a5d8 <cleanup_stdio+0x3c>)
 800a5be:	4299      	cmp	r1, r3
 800a5c0:	d004      	beq.n	800a5cc <cleanup_stdio+0x30>
 800a5c2:	4620      	mov	r0, r4
 800a5c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5c8:	f001 b868 	b.w	800b69c <_fflush_r>
 800a5cc:	bd10      	pop	{r4, pc}
 800a5ce:	bf00      	nop
 800a5d0:	20005944 	.word	0x20005944
 800a5d4:	200059ac 	.word	0x200059ac
 800a5d8:	20005a14 	.word	0x20005a14

0800a5dc <global_stdio_init.part.0>:
 800a5dc:	b510      	push	{r4, lr}
 800a5de:	4b0b      	ldr	r3, [pc, #44]	@ (800a60c <global_stdio_init.part.0+0x30>)
 800a5e0:	4c0b      	ldr	r4, [pc, #44]	@ (800a610 <global_stdio_init.part.0+0x34>)
 800a5e2:	4a0c      	ldr	r2, [pc, #48]	@ (800a614 <global_stdio_init.part.0+0x38>)
 800a5e4:	601a      	str	r2, [r3, #0]
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	2104      	movs	r1, #4
 800a5ec:	f7ff ff94 	bl	800a518 <std>
 800a5f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	2109      	movs	r1, #9
 800a5f8:	f7ff ff8e 	bl	800a518 <std>
 800a5fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a600:	2202      	movs	r2, #2
 800a602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a606:	2112      	movs	r1, #18
 800a608:	f7ff bf86 	b.w	800a518 <std>
 800a60c:	20005a7c 	.word	0x20005a7c
 800a610:	20005944 	.word	0x20005944
 800a614:	0800a585 	.word	0x0800a585

0800a618 <__sfp_lock_acquire>:
 800a618:	4801      	ldr	r0, [pc, #4]	@ (800a620 <__sfp_lock_acquire+0x8>)
 800a61a:	f000 ba8a 	b.w	800ab32 <__retarget_lock_acquire_recursive>
 800a61e:	bf00      	nop
 800a620:	20005a85 	.word	0x20005a85

0800a624 <__sfp_lock_release>:
 800a624:	4801      	ldr	r0, [pc, #4]	@ (800a62c <__sfp_lock_release+0x8>)
 800a626:	f000 ba85 	b.w	800ab34 <__retarget_lock_release_recursive>
 800a62a:	bf00      	nop
 800a62c:	20005a85 	.word	0x20005a85

0800a630 <__sinit>:
 800a630:	b510      	push	{r4, lr}
 800a632:	4604      	mov	r4, r0
 800a634:	f7ff fff0 	bl	800a618 <__sfp_lock_acquire>
 800a638:	6a23      	ldr	r3, [r4, #32]
 800a63a:	b11b      	cbz	r3, 800a644 <__sinit+0x14>
 800a63c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a640:	f7ff bff0 	b.w	800a624 <__sfp_lock_release>
 800a644:	4b04      	ldr	r3, [pc, #16]	@ (800a658 <__sinit+0x28>)
 800a646:	6223      	str	r3, [r4, #32]
 800a648:	4b04      	ldr	r3, [pc, #16]	@ (800a65c <__sinit+0x2c>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d1f5      	bne.n	800a63c <__sinit+0xc>
 800a650:	f7ff ffc4 	bl	800a5dc <global_stdio_init.part.0>
 800a654:	e7f2      	b.n	800a63c <__sinit+0xc>
 800a656:	bf00      	nop
 800a658:	0800a59d 	.word	0x0800a59d
 800a65c:	20005a7c 	.word	0x20005a7c

0800a660 <_fwalk_sglue>:
 800a660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a664:	4607      	mov	r7, r0
 800a666:	4688      	mov	r8, r1
 800a668:	4614      	mov	r4, r2
 800a66a:	2600      	movs	r6, #0
 800a66c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a670:	f1b9 0901 	subs.w	r9, r9, #1
 800a674:	d505      	bpl.n	800a682 <_fwalk_sglue+0x22>
 800a676:	6824      	ldr	r4, [r4, #0]
 800a678:	2c00      	cmp	r4, #0
 800a67a:	d1f7      	bne.n	800a66c <_fwalk_sglue+0xc>
 800a67c:	4630      	mov	r0, r6
 800a67e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a682:	89ab      	ldrh	r3, [r5, #12]
 800a684:	2b01      	cmp	r3, #1
 800a686:	d907      	bls.n	800a698 <_fwalk_sglue+0x38>
 800a688:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a68c:	3301      	adds	r3, #1
 800a68e:	d003      	beq.n	800a698 <_fwalk_sglue+0x38>
 800a690:	4629      	mov	r1, r5
 800a692:	4638      	mov	r0, r7
 800a694:	47c0      	blx	r8
 800a696:	4306      	orrs	r6, r0
 800a698:	3568      	adds	r5, #104	@ 0x68
 800a69a:	e7e9      	b.n	800a670 <_fwalk_sglue+0x10>

0800a69c <iprintf>:
 800a69c:	b40f      	push	{r0, r1, r2, r3}
 800a69e:	b507      	push	{r0, r1, r2, lr}
 800a6a0:	4906      	ldr	r1, [pc, #24]	@ (800a6bc <iprintf+0x20>)
 800a6a2:	ab04      	add	r3, sp, #16
 800a6a4:	6808      	ldr	r0, [r1, #0]
 800a6a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6aa:	6881      	ldr	r1, [r0, #8]
 800a6ac:	9301      	str	r3, [sp, #4]
 800a6ae:	f000 fccb 	bl	800b048 <_vfiprintf_r>
 800a6b2:	b003      	add	sp, #12
 800a6b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6b8:	b004      	add	sp, #16
 800a6ba:	4770      	bx	lr
 800a6bc:	20000024 	.word	0x20000024

0800a6c0 <_puts_r>:
 800a6c0:	6a03      	ldr	r3, [r0, #32]
 800a6c2:	b570      	push	{r4, r5, r6, lr}
 800a6c4:	6884      	ldr	r4, [r0, #8]
 800a6c6:	4605      	mov	r5, r0
 800a6c8:	460e      	mov	r6, r1
 800a6ca:	b90b      	cbnz	r3, 800a6d0 <_puts_r+0x10>
 800a6cc:	f7ff ffb0 	bl	800a630 <__sinit>
 800a6d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a6d2:	07db      	lsls	r3, r3, #31
 800a6d4:	d405      	bmi.n	800a6e2 <_puts_r+0x22>
 800a6d6:	89a3      	ldrh	r3, [r4, #12]
 800a6d8:	0598      	lsls	r0, r3, #22
 800a6da:	d402      	bmi.n	800a6e2 <_puts_r+0x22>
 800a6dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6de:	f000 fa28 	bl	800ab32 <__retarget_lock_acquire_recursive>
 800a6e2:	89a3      	ldrh	r3, [r4, #12]
 800a6e4:	0719      	lsls	r1, r3, #28
 800a6e6:	d502      	bpl.n	800a6ee <_puts_r+0x2e>
 800a6e8:	6923      	ldr	r3, [r4, #16]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d135      	bne.n	800a75a <_puts_r+0x9a>
 800a6ee:	4621      	mov	r1, r4
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	f000 f8f9 	bl	800a8e8 <__swsetup_r>
 800a6f6:	b380      	cbz	r0, 800a75a <_puts_r+0x9a>
 800a6f8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a6fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a6fe:	07da      	lsls	r2, r3, #31
 800a700:	d405      	bmi.n	800a70e <_puts_r+0x4e>
 800a702:	89a3      	ldrh	r3, [r4, #12]
 800a704:	059b      	lsls	r3, r3, #22
 800a706:	d402      	bmi.n	800a70e <_puts_r+0x4e>
 800a708:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a70a:	f000 fa13 	bl	800ab34 <__retarget_lock_release_recursive>
 800a70e:	4628      	mov	r0, r5
 800a710:	bd70      	pop	{r4, r5, r6, pc}
 800a712:	2b00      	cmp	r3, #0
 800a714:	da04      	bge.n	800a720 <_puts_r+0x60>
 800a716:	69a2      	ldr	r2, [r4, #24]
 800a718:	429a      	cmp	r2, r3
 800a71a:	dc17      	bgt.n	800a74c <_puts_r+0x8c>
 800a71c:	290a      	cmp	r1, #10
 800a71e:	d015      	beq.n	800a74c <_puts_r+0x8c>
 800a720:	6823      	ldr	r3, [r4, #0]
 800a722:	1c5a      	adds	r2, r3, #1
 800a724:	6022      	str	r2, [r4, #0]
 800a726:	7019      	strb	r1, [r3, #0]
 800a728:	68a3      	ldr	r3, [r4, #8]
 800a72a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a72e:	3b01      	subs	r3, #1
 800a730:	60a3      	str	r3, [r4, #8]
 800a732:	2900      	cmp	r1, #0
 800a734:	d1ed      	bne.n	800a712 <_puts_r+0x52>
 800a736:	2b00      	cmp	r3, #0
 800a738:	da11      	bge.n	800a75e <_puts_r+0x9e>
 800a73a:	4622      	mov	r2, r4
 800a73c:	210a      	movs	r1, #10
 800a73e:	4628      	mov	r0, r5
 800a740:	f000 f893 	bl	800a86a <__swbuf_r>
 800a744:	3001      	adds	r0, #1
 800a746:	d0d7      	beq.n	800a6f8 <_puts_r+0x38>
 800a748:	250a      	movs	r5, #10
 800a74a:	e7d7      	b.n	800a6fc <_puts_r+0x3c>
 800a74c:	4622      	mov	r2, r4
 800a74e:	4628      	mov	r0, r5
 800a750:	f000 f88b 	bl	800a86a <__swbuf_r>
 800a754:	3001      	adds	r0, #1
 800a756:	d1e7      	bne.n	800a728 <_puts_r+0x68>
 800a758:	e7ce      	b.n	800a6f8 <_puts_r+0x38>
 800a75a:	3e01      	subs	r6, #1
 800a75c:	e7e4      	b.n	800a728 <_puts_r+0x68>
 800a75e:	6823      	ldr	r3, [r4, #0]
 800a760:	1c5a      	adds	r2, r3, #1
 800a762:	6022      	str	r2, [r4, #0]
 800a764:	220a      	movs	r2, #10
 800a766:	701a      	strb	r2, [r3, #0]
 800a768:	e7ee      	b.n	800a748 <_puts_r+0x88>
	...

0800a76c <puts>:
 800a76c:	4b02      	ldr	r3, [pc, #8]	@ (800a778 <puts+0xc>)
 800a76e:	4601      	mov	r1, r0
 800a770:	6818      	ldr	r0, [r3, #0]
 800a772:	f7ff bfa5 	b.w	800a6c0 <_puts_r>
 800a776:	bf00      	nop
 800a778:	20000024 	.word	0x20000024

0800a77c <sniprintf>:
 800a77c:	b40c      	push	{r2, r3}
 800a77e:	b530      	push	{r4, r5, lr}
 800a780:	4b17      	ldr	r3, [pc, #92]	@ (800a7e0 <sniprintf+0x64>)
 800a782:	1e0c      	subs	r4, r1, #0
 800a784:	681d      	ldr	r5, [r3, #0]
 800a786:	b09d      	sub	sp, #116	@ 0x74
 800a788:	da08      	bge.n	800a79c <sniprintf+0x20>
 800a78a:	238b      	movs	r3, #139	@ 0x8b
 800a78c:	602b      	str	r3, [r5, #0]
 800a78e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a792:	b01d      	add	sp, #116	@ 0x74
 800a794:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a798:	b002      	add	sp, #8
 800a79a:	4770      	bx	lr
 800a79c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a7a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a7a4:	bf14      	ite	ne
 800a7a6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800a7aa:	4623      	moveq	r3, r4
 800a7ac:	9304      	str	r3, [sp, #16]
 800a7ae:	9307      	str	r3, [sp, #28]
 800a7b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a7b4:	9002      	str	r0, [sp, #8]
 800a7b6:	9006      	str	r0, [sp, #24]
 800a7b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a7bc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a7be:	ab21      	add	r3, sp, #132	@ 0x84
 800a7c0:	a902      	add	r1, sp, #8
 800a7c2:	4628      	mov	r0, r5
 800a7c4:	9301      	str	r3, [sp, #4]
 800a7c6:	f000 fb19 	bl	800adfc <_svfiprintf_r>
 800a7ca:	1c43      	adds	r3, r0, #1
 800a7cc:	bfbc      	itt	lt
 800a7ce:	238b      	movlt	r3, #139	@ 0x8b
 800a7d0:	602b      	strlt	r3, [r5, #0]
 800a7d2:	2c00      	cmp	r4, #0
 800a7d4:	d0dd      	beq.n	800a792 <sniprintf+0x16>
 800a7d6:	9b02      	ldr	r3, [sp, #8]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	701a      	strb	r2, [r3, #0]
 800a7dc:	e7d9      	b.n	800a792 <sniprintf+0x16>
 800a7de:	bf00      	nop
 800a7e0:	20000024 	.word	0x20000024

0800a7e4 <__sread>:
 800a7e4:	b510      	push	{r4, lr}
 800a7e6:	460c      	mov	r4, r1
 800a7e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7ec:	f000 f952 	bl	800aa94 <_read_r>
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	bfab      	itete	ge
 800a7f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a7f6:	89a3      	ldrhlt	r3, [r4, #12]
 800a7f8:	181b      	addge	r3, r3, r0
 800a7fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a7fe:	bfac      	ite	ge
 800a800:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a802:	81a3      	strhlt	r3, [r4, #12]
 800a804:	bd10      	pop	{r4, pc}

0800a806 <__swrite>:
 800a806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a80a:	461f      	mov	r7, r3
 800a80c:	898b      	ldrh	r3, [r1, #12]
 800a80e:	05db      	lsls	r3, r3, #23
 800a810:	4605      	mov	r5, r0
 800a812:	460c      	mov	r4, r1
 800a814:	4616      	mov	r6, r2
 800a816:	d505      	bpl.n	800a824 <__swrite+0x1e>
 800a818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a81c:	2302      	movs	r3, #2
 800a81e:	2200      	movs	r2, #0
 800a820:	f000 f926 	bl	800aa70 <_lseek_r>
 800a824:	89a3      	ldrh	r3, [r4, #12]
 800a826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a82a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a82e:	81a3      	strh	r3, [r4, #12]
 800a830:	4632      	mov	r2, r6
 800a832:	463b      	mov	r3, r7
 800a834:	4628      	mov	r0, r5
 800a836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a83a:	f000 b93d 	b.w	800aab8 <_write_r>

0800a83e <__sseek>:
 800a83e:	b510      	push	{r4, lr}
 800a840:	460c      	mov	r4, r1
 800a842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a846:	f000 f913 	bl	800aa70 <_lseek_r>
 800a84a:	1c43      	adds	r3, r0, #1
 800a84c:	89a3      	ldrh	r3, [r4, #12]
 800a84e:	bf15      	itete	ne
 800a850:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a852:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a856:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a85a:	81a3      	strheq	r3, [r4, #12]
 800a85c:	bf18      	it	ne
 800a85e:	81a3      	strhne	r3, [r4, #12]
 800a860:	bd10      	pop	{r4, pc}

0800a862 <__sclose>:
 800a862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a866:	f000 b89d 	b.w	800a9a4 <_close_r>

0800a86a <__swbuf_r>:
 800a86a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a86c:	460e      	mov	r6, r1
 800a86e:	4614      	mov	r4, r2
 800a870:	4605      	mov	r5, r0
 800a872:	b118      	cbz	r0, 800a87c <__swbuf_r+0x12>
 800a874:	6a03      	ldr	r3, [r0, #32]
 800a876:	b90b      	cbnz	r3, 800a87c <__swbuf_r+0x12>
 800a878:	f7ff feda 	bl	800a630 <__sinit>
 800a87c:	69a3      	ldr	r3, [r4, #24]
 800a87e:	60a3      	str	r3, [r4, #8]
 800a880:	89a3      	ldrh	r3, [r4, #12]
 800a882:	071a      	lsls	r2, r3, #28
 800a884:	d501      	bpl.n	800a88a <__swbuf_r+0x20>
 800a886:	6923      	ldr	r3, [r4, #16]
 800a888:	b943      	cbnz	r3, 800a89c <__swbuf_r+0x32>
 800a88a:	4621      	mov	r1, r4
 800a88c:	4628      	mov	r0, r5
 800a88e:	f000 f82b 	bl	800a8e8 <__swsetup_r>
 800a892:	b118      	cbz	r0, 800a89c <__swbuf_r+0x32>
 800a894:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a898:	4638      	mov	r0, r7
 800a89a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a89c:	6823      	ldr	r3, [r4, #0]
 800a89e:	6922      	ldr	r2, [r4, #16]
 800a8a0:	1a98      	subs	r0, r3, r2
 800a8a2:	6963      	ldr	r3, [r4, #20]
 800a8a4:	b2f6      	uxtb	r6, r6
 800a8a6:	4283      	cmp	r3, r0
 800a8a8:	4637      	mov	r7, r6
 800a8aa:	dc05      	bgt.n	800a8b8 <__swbuf_r+0x4e>
 800a8ac:	4621      	mov	r1, r4
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	f000 fef4 	bl	800b69c <_fflush_r>
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	d1ed      	bne.n	800a894 <__swbuf_r+0x2a>
 800a8b8:	68a3      	ldr	r3, [r4, #8]
 800a8ba:	3b01      	subs	r3, #1
 800a8bc:	60a3      	str	r3, [r4, #8]
 800a8be:	6823      	ldr	r3, [r4, #0]
 800a8c0:	1c5a      	adds	r2, r3, #1
 800a8c2:	6022      	str	r2, [r4, #0]
 800a8c4:	701e      	strb	r6, [r3, #0]
 800a8c6:	6962      	ldr	r2, [r4, #20]
 800a8c8:	1c43      	adds	r3, r0, #1
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d004      	beq.n	800a8d8 <__swbuf_r+0x6e>
 800a8ce:	89a3      	ldrh	r3, [r4, #12]
 800a8d0:	07db      	lsls	r3, r3, #31
 800a8d2:	d5e1      	bpl.n	800a898 <__swbuf_r+0x2e>
 800a8d4:	2e0a      	cmp	r6, #10
 800a8d6:	d1df      	bne.n	800a898 <__swbuf_r+0x2e>
 800a8d8:	4621      	mov	r1, r4
 800a8da:	4628      	mov	r0, r5
 800a8dc:	f000 fede 	bl	800b69c <_fflush_r>
 800a8e0:	2800      	cmp	r0, #0
 800a8e2:	d0d9      	beq.n	800a898 <__swbuf_r+0x2e>
 800a8e4:	e7d6      	b.n	800a894 <__swbuf_r+0x2a>
	...

0800a8e8 <__swsetup_r>:
 800a8e8:	b538      	push	{r3, r4, r5, lr}
 800a8ea:	4b29      	ldr	r3, [pc, #164]	@ (800a990 <__swsetup_r+0xa8>)
 800a8ec:	4605      	mov	r5, r0
 800a8ee:	6818      	ldr	r0, [r3, #0]
 800a8f0:	460c      	mov	r4, r1
 800a8f2:	b118      	cbz	r0, 800a8fc <__swsetup_r+0x14>
 800a8f4:	6a03      	ldr	r3, [r0, #32]
 800a8f6:	b90b      	cbnz	r3, 800a8fc <__swsetup_r+0x14>
 800a8f8:	f7ff fe9a 	bl	800a630 <__sinit>
 800a8fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a900:	0719      	lsls	r1, r3, #28
 800a902:	d422      	bmi.n	800a94a <__swsetup_r+0x62>
 800a904:	06da      	lsls	r2, r3, #27
 800a906:	d407      	bmi.n	800a918 <__swsetup_r+0x30>
 800a908:	2209      	movs	r2, #9
 800a90a:	602a      	str	r2, [r5, #0]
 800a90c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a910:	81a3      	strh	r3, [r4, #12]
 800a912:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a916:	e033      	b.n	800a980 <__swsetup_r+0x98>
 800a918:	0758      	lsls	r0, r3, #29
 800a91a:	d512      	bpl.n	800a942 <__swsetup_r+0x5a>
 800a91c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a91e:	b141      	cbz	r1, 800a932 <__swsetup_r+0x4a>
 800a920:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a924:	4299      	cmp	r1, r3
 800a926:	d002      	beq.n	800a92e <__swsetup_r+0x46>
 800a928:	4628      	mov	r0, r5
 800a92a:	f000 f913 	bl	800ab54 <_free_r>
 800a92e:	2300      	movs	r3, #0
 800a930:	6363      	str	r3, [r4, #52]	@ 0x34
 800a932:	89a3      	ldrh	r3, [r4, #12]
 800a934:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a938:	81a3      	strh	r3, [r4, #12]
 800a93a:	2300      	movs	r3, #0
 800a93c:	6063      	str	r3, [r4, #4]
 800a93e:	6923      	ldr	r3, [r4, #16]
 800a940:	6023      	str	r3, [r4, #0]
 800a942:	89a3      	ldrh	r3, [r4, #12]
 800a944:	f043 0308 	orr.w	r3, r3, #8
 800a948:	81a3      	strh	r3, [r4, #12]
 800a94a:	6923      	ldr	r3, [r4, #16]
 800a94c:	b94b      	cbnz	r3, 800a962 <__swsetup_r+0x7a>
 800a94e:	89a3      	ldrh	r3, [r4, #12]
 800a950:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a954:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a958:	d003      	beq.n	800a962 <__swsetup_r+0x7a>
 800a95a:	4621      	mov	r1, r4
 800a95c:	4628      	mov	r0, r5
 800a95e:	f000 feeb 	bl	800b738 <__smakebuf_r>
 800a962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a966:	f013 0201 	ands.w	r2, r3, #1
 800a96a:	d00a      	beq.n	800a982 <__swsetup_r+0x9a>
 800a96c:	2200      	movs	r2, #0
 800a96e:	60a2      	str	r2, [r4, #8]
 800a970:	6962      	ldr	r2, [r4, #20]
 800a972:	4252      	negs	r2, r2
 800a974:	61a2      	str	r2, [r4, #24]
 800a976:	6922      	ldr	r2, [r4, #16]
 800a978:	b942      	cbnz	r2, 800a98c <__swsetup_r+0xa4>
 800a97a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a97e:	d1c5      	bne.n	800a90c <__swsetup_r+0x24>
 800a980:	bd38      	pop	{r3, r4, r5, pc}
 800a982:	0799      	lsls	r1, r3, #30
 800a984:	bf58      	it	pl
 800a986:	6962      	ldrpl	r2, [r4, #20]
 800a988:	60a2      	str	r2, [r4, #8]
 800a98a:	e7f4      	b.n	800a976 <__swsetup_r+0x8e>
 800a98c:	2000      	movs	r0, #0
 800a98e:	e7f7      	b.n	800a980 <__swsetup_r+0x98>
 800a990:	20000024 	.word	0x20000024

0800a994 <memset>:
 800a994:	4402      	add	r2, r0
 800a996:	4603      	mov	r3, r0
 800a998:	4293      	cmp	r3, r2
 800a99a:	d100      	bne.n	800a99e <memset+0xa>
 800a99c:	4770      	bx	lr
 800a99e:	f803 1b01 	strb.w	r1, [r3], #1
 800a9a2:	e7f9      	b.n	800a998 <memset+0x4>

0800a9a4 <_close_r>:
 800a9a4:	b538      	push	{r3, r4, r5, lr}
 800a9a6:	4d06      	ldr	r5, [pc, #24]	@ (800a9c0 <_close_r+0x1c>)
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	4604      	mov	r4, r0
 800a9ac:	4608      	mov	r0, r1
 800a9ae:	602b      	str	r3, [r5, #0]
 800a9b0:	f7f6 fc5f 	bl	8001272 <_close>
 800a9b4:	1c43      	adds	r3, r0, #1
 800a9b6:	d102      	bne.n	800a9be <_close_r+0x1a>
 800a9b8:	682b      	ldr	r3, [r5, #0]
 800a9ba:	b103      	cbz	r3, 800a9be <_close_r+0x1a>
 800a9bc:	6023      	str	r3, [r4, #0]
 800a9be:	bd38      	pop	{r3, r4, r5, pc}
 800a9c0:	20005a80 	.word	0x20005a80

0800a9c4 <_reclaim_reent>:
 800a9c4:	4b29      	ldr	r3, [pc, #164]	@ (800aa6c <_reclaim_reent+0xa8>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4283      	cmp	r3, r0
 800a9ca:	b570      	push	{r4, r5, r6, lr}
 800a9cc:	4604      	mov	r4, r0
 800a9ce:	d04b      	beq.n	800aa68 <_reclaim_reent+0xa4>
 800a9d0:	69c3      	ldr	r3, [r0, #28]
 800a9d2:	b1ab      	cbz	r3, 800aa00 <_reclaim_reent+0x3c>
 800a9d4:	68db      	ldr	r3, [r3, #12]
 800a9d6:	b16b      	cbz	r3, 800a9f4 <_reclaim_reent+0x30>
 800a9d8:	2500      	movs	r5, #0
 800a9da:	69e3      	ldr	r3, [r4, #28]
 800a9dc:	68db      	ldr	r3, [r3, #12]
 800a9de:	5959      	ldr	r1, [r3, r5]
 800a9e0:	2900      	cmp	r1, #0
 800a9e2:	d13b      	bne.n	800aa5c <_reclaim_reent+0x98>
 800a9e4:	3504      	adds	r5, #4
 800a9e6:	2d80      	cmp	r5, #128	@ 0x80
 800a9e8:	d1f7      	bne.n	800a9da <_reclaim_reent+0x16>
 800a9ea:	69e3      	ldr	r3, [r4, #28]
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	68d9      	ldr	r1, [r3, #12]
 800a9f0:	f000 f8b0 	bl	800ab54 <_free_r>
 800a9f4:	69e3      	ldr	r3, [r4, #28]
 800a9f6:	6819      	ldr	r1, [r3, #0]
 800a9f8:	b111      	cbz	r1, 800aa00 <_reclaim_reent+0x3c>
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	f000 f8aa 	bl	800ab54 <_free_r>
 800aa00:	6961      	ldr	r1, [r4, #20]
 800aa02:	b111      	cbz	r1, 800aa0a <_reclaim_reent+0x46>
 800aa04:	4620      	mov	r0, r4
 800aa06:	f000 f8a5 	bl	800ab54 <_free_r>
 800aa0a:	69e1      	ldr	r1, [r4, #28]
 800aa0c:	b111      	cbz	r1, 800aa14 <_reclaim_reent+0x50>
 800aa0e:	4620      	mov	r0, r4
 800aa10:	f000 f8a0 	bl	800ab54 <_free_r>
 800aa14:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800aa16:	b111      	cbz	r1, 800aa1e <_reclaim_reent+0x5a>
 800aa18:	4620      	mov	r0, r4
 800aa1a:	f000 f89b 	bl	800ab54 <_free_r>
 800aa1e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa20:	b111      	cbz	r1, 800aa28 <_reclaim_reent+0x64>
 800aa22:	4620      	mov	r0, r4
 800aa24:	f000 f896 	bl	800ab54 <_free_r>
 800aa28:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800aa2a:	b111      	cbz	r1, 800aa32 <_reclaim_reent+0x6e>
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	f000 f891 	bl	800ab54 <_free_r>
 800aa32:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800aa34:	b111      	cbz	r1, 800aa3c <_reclaim_reent+0x78>
 800aa36:	4620      	mov	r0, r4
 800aa38:	f000 f88c 	bl	800ab54 <_free_r>
 800aa3c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800aa3e:	b111      	cbz	r1, 800aa46 <_reclaim_reent+0x82>
 800aa40:	4620      	mov	r0, r4
 800aa42:	f000 f887 	bl	800ab54 <_free_r>
 800aa46:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800aa48:	b111      	cbz	r1, 800aa50 <_reclaim_reent+0x8c>
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	f000 f882 	bl	800ab54 <_free_r>
 800aa50:	6a23      	ldr	r3, [r4, #32]
 800aa52:	b14b      	cbz	r3, 800aa68 <_reclaim_reent+0xa4>
 800aa54:	4620      	mov	r0, r4
 800aa56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aa5a:	4718      	bx	r3
 800aa5c:	680e      	ldr	r6, [r1, #0]
 800aa5e:	4620      	mov	r0, r4
 800aa60:	f000 f878 	bl	800ab54 <_free_r>
 800aa64:	4631      	mov	r1, r6
 800aa66:	e7bb      	b.n	800a9e0 <_reclaim_reent+0x1c>
 800aa68:	bd70      	pop	{r4, r5, r6, pc}
 800aa6a:	bf00      	nop
 800aa6c:	20000024 	.word	0x20000024

0800aa70 <_lseek_r>:
 800aa70:	b538      	push	{r3, r4, r5, lr}
 800aa72:	4d07      	ldr	r5, [pc, #28]	@ (800aa90 <_lseek_r+0x20>)
 800aa74:	4604      	mov	r4, r0
 800aa76:	4608      	mov	r0, r1
 800aa78:	4611      	mov	r1, r2
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	602a      	str	r2, [r5, #0]
 800aa7e:	461a      	mov	r2, r3
 800aa80:	f7f6 fc1e 	bl	80012c0 <_lseek>
 800aa84:	1c43      	adds	r3, r0, #1
 800aa86:	d102      	bne.n	800aa8e <_lseek_r+0x1e>
 800aa88:	682b      	ldr	r3, [r5, #0]
 800aa8a:	b103      	cbz	r3, 800aa8e <_lseek_r+0x1e>
 800aa8c:	6023      	str	r3, [r4, #0]
 800aa8e:	bd38      	pop	{r3, r4, r5, pc}
 800aa90:	20005a80 	.word	0x20005a80

0800aa94 <_read_r>:
 800aa94:	b538      	push	{r3, r4, r5, lr}
 800aa96:	4d07      	ldr	r5, [pc, #28]	@ (800aab4 <_read_r+0x20>)
 800aa98:	4604      	mov	r4, r0
 800aa9a:	4608      	mov	r0, r1
 800aa9c:	4611      	mov	r1, r2
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	602a      	str	r2, [r5, #0]
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	f7f6 fbac 	bl	8001200 <_read>
 800aaa8:	1c43      	adds	r3, r0, #1
 800aaaa:	d102      	bne.n	800aab2 <_read_r+0x1e>
 800aaac:	682b      	ldr	r3, [r5, #0]
 800aaae:	b103      	cbz	r3, 800aab2 <_read_r+0x1e>
 800aab0:	6023      	str	r3, [r4, #0]
 800aab2:	bd38      	pop	{r3, r4, r5, pc}
 800aab4:	20005a80 	.word	0x20005a80

0800aab8 <_write_r>:
 800aab8:	b538      	push	{r3, r4, r5, lr}
 800aaba:	4d07      	ldr	r5, [pc, #28]	@ (800aad8 <_write_r+0x20>)
 800aabc:	4604      	mov	r4, r0
 800aabe:	4608      	mov	r0, r1
 800aac0:	4611      	mov	r1, r2
 800aac2:	2200      	movs	r2, #0
 800aac4:	602a      	str	r2, [r5, #0]
 800aac6:	461a      	mov	r2, r3
 800aac8:	f7f6 fbb7 	bl	800123a <_write>
 800aacc:	1c43      	adds	r3, r0, #1
 800aace:	d102      	bne.n	800aad6 <_write_r+0x1e>
 800aad0:	682b      	ldr	r3, [r5, #0]
 800aad2:	b103      	cbz	r3, 800aad6 <_write_r+0x1e>
 800aad4:	6023      	str	r3, [r4, #0]
 800aad6:	bd38      	pop	{r3, r4, r5, pc}
 800aad8:	20005a80 	.word	0x20005a80

0800aadc <__errno>:
 800aadc:	4b01      	ldr	r3, [pc, #4]	@ (800aae4 <__errno+0x8>)
 800aade:	6818      	ldr	r0, [r3, #0]
 800aae0:	4770      	bx	lr
 800aae2:	bf00      	nop
 800aae4:	20000024 	.word	0x20000024

0800aae8 <__libc_init_array>:
 800aae8:	b570      	push	{r4, r5, r6, lr}
 800aaea:	4d0d      	ldr	r5, [pc, #52]	@ (800ab20 <__libc_init_array+0x38>)
 800aaec:	4c0d      	ldr	r4, [pc, #52]	@ (800ab24 <__libc_init_array+0x3c>)
 800aaee:	1b64      	subs	r4, r4, r5
 800aaf0:	10a4      	asrs	r4, r4, #2
 800aaf2:	2600      	movs	r6, #0
 800aaf4:	42a6      	cmp	r6, r4
 800aaf6:	d109      	bne.n	800ab0c <__libc_init_array+0x24>
 800aaf8:	4d0b      	ldr	r5, [pc, #44]	@ (800ab28 <__libc_init_array+0x40>)
 800aafa:	4c0c      	ldr	r4, [pc, #48]	@ (800ab2c <__libc_init_array+0x44>)
 800aafc:	f000 feda 	bl	800b8b4 <_init>
 800ab00:	1b64      	subs	r4, r4, r5
 800ab02:	10a4      	asrs	r4, r4, #2
 800ab04:	2600      	movs	r6, #0
 800ab06:	42a6      	cmp	r6, r4
 800ab08:	d105      	bne.n	800ab16 <__libc_init_array+0x2e>
 800ab0a:	bd70      	pop	{r4, r5, r6, pc}
 800ab0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab10:	4798      	blx	r3
 800ab12:	3601      	adds	r6, #1
 800ab14:	e7ee      	b.n	800aaf4 <__libc_init_array+0xc>
 800ab16:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab1a:	4798      	blx	r3
 800ab1c:	3601      	adds	r6, #1
 800ab1e:	e7f2      	b.n	800ab06 <__libc_init_array+0x1e>
 800ab20:	0800bd2c 	.word	0x0800bd2c
 800ab24:	0800bd2c 	.word	0x0800bd2c
 800ab28:	0800bd2c 	.word	0x0800bd2c
 800ab2c:	0800bd30 	.word	0x0800bd30

0800ab30 <__retarget_lock_init_recursive>:
 800ab30:	4770      	bx	lr

0800ab32 <__retarget_lock_acquire_recursive>:
 800ab32:	4770      	bx	lr

0800ab34 <__retarget_lock_release_recursive>:
 800ab34:	4770      	bx	lr

0800ab36 <memcpy>:
 800ab36:	440a      	add	r2, r1
 800ab38:	4291      	cmp	r1, r2
 800ab3a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ab3e:	d100      	bne.n	800ab42 <memcpy+0xc>
 800ab40:	4770      	bx	lr
 800ab42:	b510      	push	{r4, lr}
 800ab44:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab48:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab4c:	4291      	cmp	r1, r2
 800ab4e:	d1f9      	bne.n	800ab44 <memcpy+0xe>
 800ab50:	bd10      	pop	{r4, pc}
	...

0800ab54 <_free_r>:
 800ab54:	b538      	push	{r3, r4, r5, lr}
 800ab56:	4605      	mov	r5, r0
 800ab58:	2900      	cmp	r1, #0
 800ab5a:	d041      	beq.n	800abe0 <_free_r+0x8c>
 800ab5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab60:	1f0c      	subs	r4, r1, #4
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	bfb8      	it	lt
 800ab66:	18e4      	addlt	r4, r4, r3
 800ab68:	f000 f8e0 	bl	800ad2c <__malloc_lock>
 800ab6c:	4a1d      	ldr	r2, [pc, #116]	@ (800abe4 <_free_r+0x90>)
 800ab6e:	6813      	ldr	r3, [r2, #0]
 800ab70:	b933      	cbnz	r3, 800ab80 <_free_r+0x2c>
 800ab72:	6063      	str	r3, [r4, #4]
 800ab74:	6014      	str	r4, [r2, #0]
 800ab76:	4628      	mov	r0, r5
 800ab78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab7c:	f000 b8dc 	b.w	800ad38 <__malloc_unlock>
 800ab80:	42a3      	cmp	r3, r4
 800ab82:	d908      	bls.n	800ab96 <_free_r+0x42>
 800ab84:	6820      	ldr	r0, [r4, #0]
 800ab86:	1821      	adds	r1, r4, r0
 800ab88:	428b      	cmp	r3, r1
 800ab8a:	bf01      	itttt	eq
 800ab8c:	6819      	ldreq	r1, [r3, #0]
 800ab8e:	685b      	ldreq	r3, [r3, #4]
 800ab90:	1809      	addeq	r1, r1, r0
 800ab92:	6021      	streq	r1, [r4, #0]
 800ab94:	e7ed      	b.n	800ab72 <_free_r+0x1e>
 800ab96:	461a      	mov	r2, r3
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	b10b      	cbz	r3, 800aba0 <_free_r+0x4c>
 800ab9c:	42a3      	cmp	r3, r4
 800ab9e:	d9fa      	bls.n	800ab96 <_free_r+0x42>
 800aba0:	6811      	ldr	r1, [r2, #0]
 800aba2:	1850      	adds	r0, r2, r1
 800aba4:	42a0      	cmp	r0, r4
 800aba6:	d10b      	bne.n	800abc0 <_free_r+0x6c>
 800aba8:	6820      	ldr	r0, [r4, #0]
 800abaa:	4401      	add	r1, r0
 800abac:	1850      	adds	r0, r2, r1
 800abae:	4283      	cmp	r3, r0
 800abb0:	6011      	str	r1, [r2, #0]
 800abb2:	d1e0      	bne.n	800ab76 <_free_r+0x22>
 800abb4:	6818      	ldr	r0, [r3, #0]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	6053      	str	r3, [r2, #4]
 800abba:	4408      	add	r0, r1
 800abbc:	6010      	str	r0, [r2, #0]
 800abbe:	e7da      	b.n	800ab76 <_free_r+0x22>
 800abc0:	d902      	bls.n	800abc8 <_free_r+0x74>
 800abc2:	230c      	movs	r3, #12
 800abc4:	602b      	str	r3, [r5, #0]
 800abc6:	e7d6      	b.n	800ab76 <_free_r+0x22>
 800abc8:	6820      	ldr	r0, [r4, #0]
 800abca:	1821      	adds	r1, r4, r0
 800abcc:	428b      	cmp	r3, r1
 800abce:	bf04      	itt	eq
 800abd0:	6819      	ldreq	r1, [r3, #0]
 800abd2:	685b      	ldreq	r3, [r3, #4]
 800abd4:	6063      	str	r3, [r4, #4]
 800abd6:	bf04      	itt	eq
 800abd8:	1809      	addeq	r1, r1, r0
 800abda:	6021      	streq	r1, [r4, #0]
 800abdc:	6054      	str	r4, [r2, #4]
 800abde:	e7ca      	b.n	800ab76 <_free_r+0x22>
 800abe0:	bd38      	pop	{r3, r4, r5, pc}
 800abe2:	bf00      	nop
 800abe4:	20005a8c 	.word	0x20005a8c

0800abe8 <sbrk_aligned>:
 800abe8:	b570      	push	{r4, r5, r6, lr}
 800abea:	4e0f      	ldr	r6, [pc, #60]	@ (800ac28 <sbrk_aligned+0x40>)
 800abec:	460c      	mov	r4, r1
 800abee:	6831      	ldr	r1, [r6, #0]
 800abf0:	4605      	mov	r5, r0
 800abf2:	b911      	cbnz	r1, 800abfa <sbrk_aligned+0x12>
 800abf4:	f000 fe18 	bl	800b828 <_sbrk_r>
 800abf8:	6030      	str	r0, [r6, #0]
 800abfa:	4621      	mov	r1, r4
 800abfc:	4628      	mov	r0, r5
 800abfe:	f000 fe13 	bl	800b828 <_sbrk_r>
 800ac02:	1c43      	adds	r3, r0, #1
 800ac04:	d103      	bne.n	800ac0e <sbrk_aligned+0x26>
 800ac06:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	bd70      	pop	{r4, r5, r6, pc}
 800ac0e:	1cc4      	adds	r4, r0, #3
 800ac10:	f024 0403 	bic.w	r4, r4, #3
 800ac14:	42a0      	cmp	r0, r4
 800ac16:	d0f8      	beq.n	800ac0a <sbrk_aligned+0x22>
 800ac18:	1a21      	subs	r1, r4, r0
 800ac1a:	4628      	mov	r0, r5
 800ac1c:	f000 fe04 	bl	800b828 <_sbrk_r>
 800ac20:	3001      	adds	r0, #1
 800ac22:	d1f2      	bne.n	800ac0a <sbrk_aligned+0x22>
 800ac24:	e7ef      	b.n	800ac06 <sbrk_aligned+0x1e>
 800ac26:	bf00      	nop
 800ac28:	20005a88 	.word	0x20005a88

0800ac2c <_malloc_r>:
 800ac2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac30:	1ccd      	adds	r5, r1, #3
 800ac32:	f025 0503 	bic.w	r5, r5, #3
 800ac36:	3508      	adds	r5, #8
 800ac38:	2d0c      	cmp	r5, #12
 800ac3a:	bf38      	it	cc
 800ac3c:	250c      	movcc	r5, #12
 800ac3e:	2d00      	cmp	r5, #0
 800ac40:	4606      	mov	r6, r0
 800ac42:	db01      	blt.n	800ac48 <_malloc_r+0x1c>
 800ac44:	42a9      	cmp	r1, r5
 800ac46:	d904      	bls.n	800ac52 <_malloc_r+0x26>
 800ac48:	230c      	movs	r3, #12
 800ac4a:	6033      	str	r3, [r6, #0]
 800ac4c:	2000      	movs	r0, #0
 800ac4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ad28 <_malloc_r+0xfc>
 800ac56:	f000 f869 	bl	800ad2c <__malloc_lock>
 800ac5a:	f8d8 3000 	ldr.w	r3, [r8]
 800ac5e:	461c      	mov	r4, r3
 800ac60:	bb44      	cbnz	r4, 800acb4 <_malloc_r+0x88>
 800ac62:	4629      	mov	r1, r5
 800ac64:	4630      	mov	r0, r6
 800ac66:	f7ff ffbf 	bl	800abe8 <sbrk_aligned>
 800ac6a:	1c43      	adds	r3, r0, #1
 800ac6c:	4604      	mov	r4, r0
 800ac6e:	d158      	bne.n	800ad22 <_malloc_r+0xf6>
 800ac70:	f8d8 4000 	ldr.w	r4, [r8]
 800ac74:	4627      	mov	r7, r4
 800ac76:	2f00      	cmp	r7, #0
 800ac78:	d143      	bne.n	800ad02 <_malloc_r+0xd6>
 800ac7a:	2c00      	cmp	r4, #0
 800ac7c:	d04b      	beq.n	800ad16 <_malloc_r+0xea>
 800ac7e:	6823      	ldr	r3, [r4, #0]
 800ac80:	4639      	mov	r1, r7
 800ac82:	4630      	mov	r0, r6
 800ac84:	eb04 0903 	add.w	r9, r4, r3
 800ac88:	f000 fdce 	bl	800b828 <_sbrk_r>
 800ac8c:	4581      	cmp	r9, r0
 800ac8e:	d142      	bne.n	800ad16 <_malloc_r+0xea>
 800ac90:	6821      	ldr	r1, [r4, #0]
 800ac92:	1a6d      	subs	r5, r5, r1
 800ac94:	4629      	mov	r1, r5
 800ac96:	4630      	mov	r0, r6
 800ac98:	f7ff ffa6 	bl	800abe8 <sbrk_aligned>
 800ac9c:	3001      	adds	r0, #1
 800ac9e:	d03a      	beq.n	800ad16 <_malloc_r+0xea>
 800aca0:	6823      	ldr	r3, [r4, #0]
 800aca2:	442b      	add	r3, r5
 800aca4:	6023      	str	r3, [r4, #0]
 800aca6:	f8d8 3000 	ldr.w	r3, [r8]
 800acaa:	685a      	ldr	r2, [r3, #4]
 800acac:	bb62      	cbnz	r2, 800ad08 <_malloc_r+0xdc>
 800acae:	f8c8 7000 	str.w	r7, [r8]
 800acb2:	e00f      	b.n	800acd4 <_malloc_r+0xa8>
 800acb4:	6822      	ldr	r2, [r4, #0]
 800acb6:	1b52      	subs	r2, r2, r5
 800acb8:	d420      	bmi.n	800acfc <_malloc_r+0xd0>
 800acba:	2a0b      	cmp	r2, #11
 800acbc:	d917      	bls.n	800acee <_malloc_r+0xc2>
 800acbe:	1961      	adds	r1, r4, r5
 800acc0:	42a3      	cmp	r3, r4
 800acc2:	6025      	str	r5, [r4, #0]
 800acc4:	bf18      	it	ne
 800acc6:	6059      	strne	r1, [r3, #4]
 800acc8:	6863      	ldr	r3, [r4, #4]
 800acca:	bf08      	it	eq
 800accc:	f8c8 1000 	streq.w	r1, [r8]
 800acd0:	5162      	str	r2, [r4, r5]
 800acd2:	604b      	str	r3, [r1, #4]
 800acd4:	4630      	mov	r0, r6
 800acd6:	f000 f82f 	bl	800ad38 <__malloc_unlock>
 800acda:	f104 000b 	add.w	r0, r4, #11
 800acde:	1d23      	adds	r3, r4, #4
 800ace0:	f020 0007 	bic.w	r0, r0, #7
 800ace4:	1ac2      	subs	r2, r0, r3
 800ace6:	bf1c      	itt	ne
 800ace8:	1a1b      	subne	r3, r3, r0
 800acea:	50a3      	strne	r3, [r4, r2]
 800acec:	e7af      	b.n	800ac4e <_malloc_r+0x22>
 800acee:	6862      	ldr	r2, [r4, #4]
 800acf0:	42a3      	cmp	r3, r4
 800acf2:	bf0c      	ite	eq
 800acf4:	f8c8 2000 	streq.w	r2, [r8]
 800acf8:	605a      	strne	r2, [r3, #4]
 800acfa:	e7eb      	b.n	800acd4 <_malloc_r+0xa8>
 800acfc:	4623      	mov	r3, r4
 800acfe:	6864      	ldr	r4, [r4, #4]
 800ad00:	e7ae      	b.n	800ac60 <_malloc_r+0x34>
 800ad02:	463c      	mov	r4, r7
 800ad04:	687f      	ldr	r7, [r7, #4]
 800ad06:	e7b6      	b.n	800ac76 <_malloc_r+0x4a>
 800ad08:	461a      	mov	r2, r3
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	42a3      	cmp	r3, r4
 800ad0e:	d1fb      	bne.n	800ad08 <_malloc_r+0xdc>
 800ad10:	2300      	movs	r3, #0
 800ad12:	6053      	str	r3, [r2, #4]
 800ad14:	e7de      	b.n	800acd4 <_malloc_r+0xa8>
 800ad16:	230c      	movs	r3, #12
 800ad18:	6033      	str	r3, [r6, #0]
 800ad1a:	4630      	mov	r0, r6
 800ad1c:	f000 f80c 	bl	800ad38 <__malloc_unlock>
 800ad20:	e794      	b.n	800ac4c <_malloc_r+0x20>
 800ad22:	6005      	str	r5, [r0, #0]
 800ad24:	e7d6      	b.n	800acd4 <_malloc_r+0xa8>
 800ad26:	bf00      	nop
 800ad28:	20005a8c 	.word	0x20005a8c

0800ad2c <__malloc_lock>:
 800ad2c:	4801      	ldr	r0, [pc, #4]	@ (800ad34 <__malloc_lock+0x8>)
 800ad2e:	f7ff bf00 	b.w	800ab32 <__retarget_lock_acquire_recursive>
 800ad32:	bf00      	nop
 800ad34:	20005a84 	.word	0x20005a84

0800ad38 <__malloc_unlock>:
 800ad38:	4801      	ldr	r0, [pc, #4]	@ (800ad40 <__malloc_unlock+0x8>)
 800ad3a:	f7ff befb 	b.w	800ab34 <__retarget_lock_release_recursive>
 800ad3e:	bf00      	nop
 800ad40:	20005a84 	.word	0x20005a84

0800ad44 <__ssputs_r>:
 800ad44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad48:	688e      	ldr	r6, [r1, #8]
 800ad4a:	461f      	mov	r7, r3
 800ad4c:	42be      	cmp	r6, r7
 800ad4e:	680b      	ldr	r3, [r1, #0]
 800ad50:	4682      	mov	sl, r0
 800ad52:	460c      	mov	r4, r1
 800ad54:	4690      	mov	r8, r2
 800ad56:	d82d      	bhi.n	800adb4 <__ssputs_r+0x70>
 800ad58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ad60:	d026      	beq.n	800adb0 <__ssputs_r+0x6c>
 800ad62:	6965      	ldr	r5, [r4, #20]
 800ad64:	6909      	ldr	r1, [r1, #16]
 800ad66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad6a:	eba3 0901 	sub.w	r9, r3, r1
 800ad6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad72:	1c7b      	adds	r3, r7, #1
 800ad74:	444b      	add	r3, r9
 800ad76:	106d      	asrs	r5, r5, #1
 800ad78:	429d      	cmp	r5, r3
 800ad7a:	bf38      	it	cc
 800ad7c:	461d      	movcc	r5, r3
 800ad7e:	0553      	lsls	r3, r2, #21
 800ad80:	d527      	bpl.n	800add2 <__ssputs_r+0x8e>
 800ad82:	4629      	mov	r1, r5
 800ad84:	f7ff ff52 	bl	800ac2c <_malloc_r>
 800ad88:	4606      	mov	r6, r0
 800ad8a:	b360      	cbz	r0, 800ade6 <__ssputs_r+0xa2>
 800ad8c:	6921      	ldr	r1, [r4, #16]
 800ad8e:	464a      	mov	r2, r9
 800ad90:	f7ff fed1 	bl	800ab36 <memcpy>
 800ad94:	89a3      	ldrh	r3, [r4, #12]
 800ad96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ad9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad9e:	81a3      	strh	r3, [r4, #12]
 800ada0:	6126      	str	r6, [r4, #16]
 800ada2:	6165      	str	r5, [r4, #20]
 800ada4:	444e      	add	r6, r9
 800ada6:	eba5 0509 	sub.w	r5, r5, r9
 800adaa:	6026      	str	r6, [r4, #0]
 800adac:	60a5      	str	r5, [r4, #8]
 800adae:	463e      	mov	r6, r7
 800adb0:	42be      	cmp	r6, r7
 800adb2:	d900      	bls.n	800adb6 <__ssputs_r+0x72>
 800adb4:	463e      	mov	r6, r7
 800adb6:	6820      	ldr	r0, [r4, #0]
 800adb8:	4632      	mov	r2, r6
 800adba:	4641      	mov	r1, r8
 800adbc:	f000 fcf8 	bl	800b7b0 <memmove>
 800adc0:	68a3      	ldr	r3, [r4, #8]
 800adc2:	1b9b      	subs	r3, r3, r6
 800adc4:	60a3      	str	r3, [r4, #8]
 800adc6:	6823      	ldr	r3, [r4, #0]
 800adc8:	4433      	add	r3, r6
 800adca:	6023      	str	r3, [r4, #0]
 800adcc:	2000      	movs	r0, #0
 800adce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800add2:	462a      	mov	r2, r5
 800add4:	f000 fd38 	bl	800b848 <_realloc_r>
 800add8:	4606      	mov	r6, r0
 800adda:	2800      	cmp	r0, #0
 800addc:	d1e0      	bne.n	800ada0 <__ssputs_r+0x5c>
 800adde:	6921      	ldr	r1, [r4, #16]
 800ade0:	4650      	mov	r0, sl
 800ade2:	f7ff feb7 	bl	800ab54 <_free_r>
 800ade6:	230c      	movs	r3, #12
 800ade8:	f8ca 3000 	str.w	r3, [sl]
 800adec:	89a3      	ldrh	r3, [r4, #12]
 800adee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adf2:	81a3      	strh	r3, [r4, #12]
 800adf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800adf8:	e7e9      	b.n	800adce <__ssputs_r+0x8a>
	...

0800adfc <_svfiprintf_r>:
 800adfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae00:	4698      	mov	r8, r3
 800ae02:	898b      	ldrh	r3, [r1, #12]
 800ae04:	061b      	lsls	r3, r3, #24
 800ae06:	b09d      	sub	sp, #116	@ 0x74
 800ae08:	4607      	mov	r7, r0
 800ae0a:	460d      	mov	r5, r1
 800ae0c:	4614      	mov	r4, r2
 800ae0e:	d510      	bpl.n	800ae32 <_svfiprintf_r+0x36>
 800ae10:	690b      	ldr	r3, [r1, #16]
 800ae12:	b973      	cbnz	r3, 800ae32 <_svfiprintf_r+0x36>
 800ae14:	2140      	movs	r1, #64	@ 0x40
 800ae16:	f7ff ff09 	bl	800ac2c <_malloc_r>
 800ae1a:	6028      	str	r0, [r5, #0]
 800ae1c:	6128      	str	r0, [r5, #16]
 800ae1e:	b930      	cbnz	r0, 800ae2e <_svfiprintf_r+0x32>
 800ae20:	230c      	movs	r3, #12
 800ae22:	603b      	str	r3, [r7, #0]
 800ae24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae28:	b01d      	add	sp, #116	@ 0x74
 800ae2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae2e:	2340      	movs	r3, #64	@ 0x40
 800ae30:	616b      	str	r3, [r5, #20]
 800ae32:	2300      	movs	r3, #0
 800ae34:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae36:	2320      	movs	r3, #32
 800ae38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae40:	2330      	movs	r3, #48	@ 0x30
 800ae42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800afe0 <_svfiprintf_r+0x1e4>
 800ae46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae4a:	f04f 0901 	mov.w	r9, #1
 800ae4e:	4623      	mov	r3, r4
 800ae50:	469a      	mov	sl, r3
 800ae52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae56:	b10a      	cbz	r2, 800ae5c <_svfiprintf_r+0x60>
 800ae58:	2a25      	cmp	r2, #37	@ 0x25
 800ae5a:	d1f9      	bne.n	800ae50 <_svfiprintf_r+0x54>
 800ae5c:	ebba 0b04 	subs.w	fp, sl, r4
 800ae60:	d00b      	beq.n	800ae7a <_svfiprintf_r+0x7e>
 800ae62:	465b      	mov	r3, fp
 800ae64:	4622      	mov	r2, r4
 800ae66:	4629      	mov	r1, r5
 800ae68:	4638      	mov	r0, r7
 800ae6a:	f7ff ff6b 	bl	800ad44 <__ssputs_r>
 800ae6e:	3001      	adds	r0, #1
 800ae70:	f000 80a7 	beq.w	800afc2 <_svfiprintf_r+0x1c6>
 800ae74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae76:	445a      	add	r2, fp
 800ae78:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae7a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	f000 809f 	beq.w	800afc2 <_svfiprintf_r+0x1c6>
 800ae84:	2300      	movs	r3, #0
 800ae86:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ae8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae8e:	f10a 0a01 	add.w	sl, sl, #1
 800ae92:	9304      	str	r3, [sp, #16]
 800ae94:	9307      	str	r3, [sp, #28]
 800ae96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae9a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae9c:	4654      	mov	r4, sl
 800ae9e:	2205      	movs	r2, #5
 800aea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aea4:	484e      	ldr	r0, [pc, #312]	@ (800afe0 <_svfiprintf_r+0x1e4>)
 800aea6:	f7f5 f993 	bl	80001d0 <memchr>
 800aeaa:	9a04      	ldr	r2, [sp, #16]
 800aeac:	b9d8      	cbnz	r0, 800aee6 <_svfiprintf_r+0xea>
 800aeae:	06d0      	lsls	r0, r2, #27
 800aeb0:	bf44      	itt	mi
 800aeb2:	2320      	movmi	r3, #32
 800aeb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aeb8:	0711      	lsls	r1, r2, #28
 800aeba:	bf44      	itt	mi
 800aebc:	232b      	movmi	r3, #43	@ 0x2b
 800aebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aec2:	f89a 3000 	ldrb.w	r3, [sl]
 800aec6:	2b2a      	cmp	r3, #42	@ 0x2a
 800aec8:	d015      	beq.n	800aef6 <_svfiprintf_r+0xfa>
 800aeca:	9a07      	ldr	r2, [sp, #28]
 800aecc:	4654      	mov	r4, sl
 800aece:	2000      	movs	r0, #0
 800aed0:	f04f 0c0a 	mov.w	ip, #10
 800aed4:	4621      	mov	r1, r4
 800aed6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aeda:	3b30      	subs	r3, #48	@ 0x30
 800aedc:	2b09      	cmp	r3, #9
 800aede:	d94b      	bls.n	800af78 <_svfiprintf_r+0x17c>
 800aee0:	b1b0      	cbz	r0, 800af10 <_svfiprintf_r+0x114>
 800aee2:	9207      	str	r2, [sp, #28]
 800aee4:	e014      	b.n	800af10 <_svfiprintf_r+0x114>
 800aee6:	eba0 0308 	sub.w	r3, r0, r8
 800aeea:	fa09 f303 	lsl.w	r3, r9, r3
 800aeee:	4313      	orrs	r3, r2
 800aef0:	9304      	str	r3, [sp, #16]
 800aef2:	46a2      	mov	sl, r4
 800aef4:	e7d2      	b.n	800ae9c <_svfiprintf_r+0xa0>
 800aef6:	9b03      	ldr	r3, [sp, #12]
 800aef8:	1d19      	adds	r1, r3, #4
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	9103      	str	r1, [sp, #12]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	bfbb      	ittet	lt
 800af02:	425b      	neglt	r3, r3
 800af04:	f042 0202 	orrlt.w	r2, r2, #2
 800af08:	9307      	strge	r3, [sp, #28]
 800af0a:	9307      	strlt	r3, [sp, #28]
 800af0c:	bfb8      	it	lt
 800af0e:	9204      	strlt	r2, [sp, #16]
 800af10:	7823      	ldrb	r3, [r4, #0]
 800af12:	2b2e      	cmp	r3, #46	@ 0x2e
 800af14:	d10a      	bne.n	800af2c <_svfiprintf_r+0x130>
 800af16:	7863      	ldrb	r3, [r4, #1]
 800af18:	2b2a      	cmp	r3, #42	@ 0x2a
 800af1a:	d132      	bne.n	800af82 <_svfiprintf_r+0x186>
 800af1c:	9b03      	ldr	r3, [sp, #12]
 800af1e:	1d1a      	adds	r2, r3, #4
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	9203      	str	r2, [sp, #12]
 800af24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af28:	3402      	adds	r4, #2
 800af2a:	9305      	str	r3, [sp, #20]
 800af2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aff0 <_svfiprintf_r+0x1f4>
 800af30:	7821      	ldrb	r1, [r4, #0]
 800af32:	2203      	movs	r2, #3
 800af34:	4650      	mov	r0, sl
 800af36:	f7f5 f94b 	bl	80001d0 <memchr>
 800af3a:	b138      	cbz	r0, 800af4c <_svfiprintf_r+0x150>
 800af3c:	9b04      	ldr	r3, [sp, #16]
 800af3e:	eba0 000a 	sub.w	r0, r0, sl
 800af42:	2240      	movs	r2, #64	@ 0x40
 800af44:	4082      	lsls	r2, r0
 800af46:	4313      	orrs	r3, r2
 800af48:	3401      	adds	r4, #1
 800af4a:	9304      	str	r3, [sp, #16]
 800af4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af50:	4824      	ldr	r0, [pc, #144]	@ (800afe4 <_svfiprintf_r+0x1e8>)
 800af52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af56:	2206      	movs	r2, #6
 800af58:	f7f5 f93a 	bl	80001d0 <memchr>
 800af5c:	2800      	cmp	r0, #0
 800af5e:	d036      	beq.n	800afce <_svfiprintf_r+0x1d2>
 800af60:	4b21      	ldr	r3, [pc, #132]	@ (800afe8 <_svfiprintf_r+0x1ec>)
 800af62:	bb1b      	cbnz	r3, 800afac <_svfiprintf_r+0x1b0>
 800af64:	9b03      	ldr	r3, [sp, #12]
 800af66:	3307      	adds	r3, #7
 800af68:	f023 0307 	bic.w	r3, r3, #7
 800af6c:	3308      	adds	r3, #8
 800af6e:	9303      	str	r3, [sp, #12]
 800af70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af72:	4433      	add	r3, r6
 800af74:	9309      	str	r3, [sp, #36]	@ 0x24
 800af76:	e76a      	b.n	800ae4e <_svfiprintf_r+0x52>
 800af78:	fb0c 3202 	mla	r2, ip, r2, r3
 800af7c:	460c      	mov	r4, r1
 800af7e:	2001      	movs	r0, #1
 800af80:	e7a8      	b.n	800aed4 <_svfiprintf_r+0xd8>
 800af82:	2300      	movs	r3, #0
 800af84:	3401      	adds	r4, #1
 800af86:	9305      	str	r3, [sp, #20]
 800af88:	4619      	mov	r1, r3
 800af8a:	f04f 0c0a 	mov.w	ip, #10
 800af8e:	4620      	mov	r0, r4
 800af90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af94:	3a30      	subs	r2, #48	@ 0x30
 800af96:	2a09      	cmp	r2, #9
 800af98:	d903      	bls.n	800afa2 <_svfiprintf_r+0x1a6>
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d0c6      	beq.n	800af2c <_svfiprintf_r+0x130>
 800af9e:	9105      	str	r1, [sp, #20]
 800afa0:	e7c4      	b.n	800af2c <_svfiprintf_r+0x130>
 800afa2:	fb0c 2101 	mla	r1, ip, r1, r2
 800afa6:	4604      	mov	r4, r0
 800afa8:	2301      	movs	r3, #1
 800afaa:	e7f0      	b.n	800af8e <_svfiprintf_r+0x192>
 800afac:	ab03      	add	r3, sp, #12
 800afae:	9300      	str	r3, [sp, #0]
 800afb0:	462a      	mov	r2, r5
 800afb2:	4b0e      	ldr	r3, [pc, #56]	@ (800afec <_svfiprintf_r+0x1f0>)
 800afb4:	a904      	add	r1, sp, #16
 800afb6:	4638      	mov	r0, r7
 800afb8:	f3af 8000 	nop.w
 800afbc:	1c42      	adds	r2, r0, #1
 800afbe:	4606      	mov	r6, r0
 800afc0:	d1d6      	bne.n	800af70 <_svfiprintf_r+0x174>
 800afc2:	89ab      	ldrh	r3, [r5, #12]
 800afc4:	065b      	lsls	r3, r3, #25
 800afc6:	f53f af2d 	bmi.w	800ae24 <_svfiprintf_r+0x28>
 800afca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800afcc:	e72c      	b.n	800ae28 <_svfiprintf_r+0x2c>
 800afce:	ab03      	add	r3, sp, #12
 800afd0:	9300      	str	r3, [sp, #0]
 800afd2:	462a      	mov	r2, r5
 800afd4:	4b05      	ldr	r3, [pc, #20]	@ (800afec <_svfiprintf_r+0x1f0>)
 800afd6:	a904      	add	r1, sp, #16
 800afd8:	4638      	mov	r0, r7
 800afda:	f000 f9bb 	bl	800b354 <_printf_i>
 800afde:	e7ed      	b.n	800afbc <_svfiprintf_r+0x1c0>
 800afe0:	0800bcf1 	.word	0x0800bcf1
 800afe4:	0800bcfb 	.word	0x0800bcfb
 800afe8:	00000000 	.word	0x00000000
 800afec:	0800ad45 	.word	0x0800ad45
 800aff0:	0800bcf7 	.word	0x0800bcf7

0800aff4 <__sfputc_r>:
 800aff4:	6893      	ldr	r3, [r2, #8]
 800aff6:	3b01      	subs	r3, #1
 800aff8:	2b00      	cmp	r3, #0
 800affa:	b410      	push	{r4}
 800affc:	6093      	str	r3, [r2, #8]
 800affe:	da08      	bge.n	800b012 <__sfputc_r+0x1e>
 800b000:	6994      	ldr	r4, [r2, #24]
 800b002:	42a3      	cmp	r3, r4
 800b004:	db01      	blt.n	800b00a <__sfputc_r+0x16>
 800b006:	290a      	cmp	r1, #10
 800b008:	d103      	bne.n	800b012 <__sfputc_r+0x1e>
 800b00a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b00e:	f7ff bc2c 	b.w	800a86a <__swbuf_r>
 800b012:	6813      	ldr	r3, [r2, #0]
 800b014:	1c58      	adds	r0, r3, #1
 800b016:	6010      	str	r0, [r2, #0]
 800b018:	7019      	strb	r1, [r3, #0]
 800b01a:	4608      	mov	r0, r1
 800b01c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b020:	4770      	bx	lr

0800b022 <__sfputs_r>:
 800b022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b024:	4606      	mov	r6, r0
 800b026:	460f      	mov	r7, r1
 800b028:	4614      	mov	r4, r2
 800b02a:	18d5      	adds	r5, r2, r3
 800b02c:	42ac      	cmp	r4, r5
 800b02e:	d101      	bne.n	800b034 <__sfputs_r+0x12>
 800b030:	2000      	movs	r0, #0
 800b032:	e007      	b.n	800b044 <__sfputs_r+0x22>
 800b034:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b038:	463a      	mov	r2, r7
 800b03a:	4630      	mov	r0, r6
 800b03c:	f7ff ffda 	bl	800aff4 <__sfputc_r>
 800b040:	1c43      	adds	r3, r0, #1
 800b042:	d1f3      	bne.n	800b02c <__sfputs_r+0xa>
 800b044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b048 <_vfiprintf_r>:
 800b048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b04c:	460d      	mov	r5, r1
 800b04e:	b09d      	sub	sp, #116	@ 0x74
 800b050:	4614      	mov	r4, r2
 800b052:	4698      	mov	r8, r3
 800b054:	4606      	mov	r6, r0
 800b056:	b118      	cbz	r0, 800b060 <_vfiprintf_r+0x18>
 800b058:	6a03      	ldr	r3, [r0, #32]
 800b05a:	b90b      	cbnz	r3, 800b060 <_vfiprintf_r+0x18>
 800b05c:	f7ff fae8 	bl	800a630 <__sinit>
 800b060:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b062:	07d9      	lsls	r1, r3, #31
 800b064:	d405      	bmi.n	800b072 <_vfiprintf_r+0x2a>
 800b066:	89ab      	ldrh	r3, [r5, #12]
 800b068:	059a      	lsls	r2, r3, #22
 800b06a:	d402      	bmi.n	800b072 <_vfiprintf_r+0x2a>
 800b06c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b06e:	f7ff fd60 	bl	800ab32 <__retarget_lock_acquire_recursive>
 800b072:	89ab      	ldrh	r3, [r5, #12]
 800b074:	071b      	lsls	r3, r3, #28
 800b076:	d501      	bpl.n	800b07c <_vfiprintf_r+0x34>
 800b078:	692b      	ldr	r3, [r5, #16]
 800b07a:	b99b      	cbnz	r3, 800b0a4 <_vfiprintf_r+0x5c>
 800b07c:	4629      	mov	r1, r5
 800b07e:	4630      	mov	r0, r6
 800b080:	f7ff fc32 	bl	800a8e8 <__swsetup_r>
 800b084:	b170      	cbz	r0, 800b0a4 <_vfiprintf_r+0x5c>
 800b086:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b088:	07dc      	lsls	r4, r3, #31
 800b08a:	d504      	bpl.n	800b096 <_vfiprintf_r+0x4e>
 800b08c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b090:	b01d      	add	sp, #116	@ 0x74
 800b092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b096:	89ab      	ldrh	r3, [r5, #12]
 800b098:	0598      	lsls	r0, r3, #22
 800b09a:	d4f7      	bmi.n	800b08c <_vfiprintf_r+0x44>
 800b09c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b09e:	f7ff fd49 	bl	800ab34 <__retarget_lock_release_recursive>
 800b0a2:	e7f3      	b.n	800b08c <_vfiprintf_r+0x44>
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0a8:	2320      	movs	r3, #32
 800b0aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b0ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0b2:	2330      	movs	r3, #48	@ 0x30
 800b0b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b264 <_vfiprintf_r+0x21c>
 800b0b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b0bc:	f04f 0901 	mov.w	r9, #1
 800b0c0:	4623      	mov	r3, r4
 800b0c2:	469a      	mov	sl, r3
 800b0c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0c8:	b10a      	cbz	r2, 800b0ce <_vfiprintf_r+0x86>
 800b0ca:	2a25      	cmp	r2, #37	@ 0x25
 800b0cc:	d1f9      	bne.n	800b0c2 <_vfiprintf_r+0x7a>
 800b0ce:	ebba 0b04 	subs.w	fp, sl, r4
 800b0d2:	d00b      	beq.n	800b0ec <_vfiprintf_r+0xa4>
 800b0d4:	465b      	mov	r3, fp
 800b0d6:	4622      	mov	r2, r4
 800b0d8:	4629      	mov	r1, r5
 800b0da:	4630      	mov	r0, r6
 800b0dc:	f7ff ffa1 	bl	800b022 <__sfputs_r>
 800b0e0:	3001      	adds	r0, #1
 800b0e2:	f000 80a7 	beq.w	800b234 <_vfiprintf_r+0x1ec>
 800b0e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0e8:	445a      	add	r2, fp
 800b0ea:	9209      	str	r2, [sp, #36]	@ 0x24
 800b0ec:	f89a 3000 	ldrb.w	r3, [sl]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	f000 809f 	beq.w	800b234 <_vfiprintf_r+0x1ec>
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b0fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b100:	f10a 0a01 	add.w	sl, sl, #1
 800b104:	9304      	str	r3, [sp, #16]
 800b106:	9307      	str	r3, [sp, #28]
 800b108:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b10c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b10e:	4654      	mov	r4, sl
 800b110:	2205      	movs	r2, #5
 800b112:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b116:	4853      	ldr	r0, [pc, #332]	@ (800b264 <_vfiprintf_r+0x21c>)
 800b118:	f7f5 f85a 	bl	80001d0 <memchr>
 800b11c:	9a04      	ldr	r2, [sp, #16]
 800b11e:	b9d8      	cbnz	r0, 800b158 <_vfiprintf_r+0x110>
 800b120:	06d1      	lsls	r1, r2, #27
 800b122:	bf44      	itt	mi
 800b124:	2320      	movmi	r3, #32
 800b126:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b12a:	0713      	lsls	r3, r2, #28
 800b12c:	bf44      	itt	mi
 800b12e:	232b      	movmi	r3, #43	@ 0x2b
 800b130:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b134:	f89a 3000 	ldrb.w	r3, [sl]
 800b138:	2b2a      	cmp	r3, #42	@ 0x2a
 800b13a:	d015      	beq.n	800b168 <_vfiprintf_r+0x120>
 800b13c:	9a07      	ldr	r2, [sp, #28]
 800b13e:	4654      	mov	r4, sl
 800b140:	2000      	movs	r0, #0
 800b142:	f04f 0c0a 	mov.w	ip, #10
 800b146:	4621      	mov	r1, r4
 800b148:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b14c:	3b30      	subs	r3, #48	@ 0x30
 800b14e:	2b09      	cmp	r3, #9
 800b150:	d94b      	bls.n	800b1ea <_vfiprintf_r+0x1a2>
 800b152:	b1b0      	cbz	r0, 800b182 <_vfiprintf_r+0x13a>
 800b154:	9207      	str	r2, [sp, #28]
 800b156:	e014      	b.n	800b182 <_vfiprintf_r+0x13a>
 800b158:	eba0 0308 	sub.w	r3, r0, r8
 800b15c:	fa09 f303 	lsl.w	r3, r9, r3
 800b160:	4313      	orrs	r3, r2
 800b162:	9304      	str	r3, [sp, #16]
 800b164:	46a2      	mov	sl, r4
 800b166:	e7d2      	b.n	800b10e <_vfiprintf_r+0xc6>
 800b168:	9b03      	ldr	r3, [sp, #12]
 800b16a:	1d19      	adds	r1, r3, #4
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	9103      	str	r1, [sp, #12]
 800b170:	2b00      	cmp	r3, #0
 800b172:	bfbb      	ittet	lt
 800b174:	425b      	neglt	r3, r3
 800b176:	f042 0202 	orrlt.w	r2, r2, #2
 800b17a:	9307      	strge	r3, [sp, #28]
 800b17c:	9307      	strlt	r3, [sp, #28]
 800b17e:	bfb8      	it	lt
 800b180:	9204      	strlt	r2, [sp, #16]
 800b182:	7823      	ldrb	r3, [r4, #0]
 800b184:	2b2e      	cmp	r3, #46	@ 0x2e
 800b186:	d10a      	bne.n	800b19e <_vfiprintf_r+0x156>
 800b188:	7863      	ldrb	r3, [r4, #1]
 800b18a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b18c:	d132      	bne.n	800b1f4 <_vfiprintf_r+0x1ac>
 800b18e:	9b03      	ldr	r3, [sp, #12]
 800b190:	1d1a      	adds	r2, r3, #4
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	9203      	str	r2, [sp, #12]
 800b196:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b19a:	3402      	adds	r4, #2
 800b19c:	9305      	str	r3, [sp, #20]
 800b19e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b274 <_vfiprintf_r+0x22c>
 800b1a2:	7821      	ldrb	r1, [r4, #0]
 800b1a4:	2203      	movs	r2, #3
 800b1a6:	4650      	mov	r0, sl
 800b1a8:	f7f5 f812 	bl	80001d0 <memchr>
 800b1ac:	b138      	cbz	r0, 800b1be <_vfiprintf_r+0x176>
 800b1ae:	9b04      	ldr	r3, [sp, #16]
 800b1b0:	eba0 000a 	sub.w	r0, r0, sl
 800b1b4:	2240      	movs	r2, #64	@ 0x40
 800b1b6:	4082      	lsls	r2, r0
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	3401      	adds	r4, #1
 800b1bc:	9304      	str	r3, [sp, #16]
 800b1be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1c2:	4829      	ldr	r0, [pc, #164]	@ (800b268 <_vfiprintf_r+0x220>)
 800b1c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b1c8:	2206      	movs	r2, #6
 800b1ca:	f7f5 f801 	bl	80001d0 <memchr>
 800b1ce:	2800      	cmp	r0, #0
 800b1d0:	d03f      	beq.n	800b252 <_vfiprintf_r+0x20a>
 800b1d2:	4b26      	ldr	r3, [pc, #152]	@ (800b26c <_vfiprintf_r+0x224>)
 800b1d4:	bb1b      	cbnz	r3, 800b21e <_vfiprintf_r+0x1d6>
 800b1d6:	9b03      	ldr	r3, [sp, #12]
 800b1d8:	3307      	adds	r3, #7
 800b1da:	f023 0307 	bic.w	r3, r3, #7
 800b1de:	3308      	adds	r3, #8
 800b1e0:	9303      	str	r3, [sp, #12]
 800b1e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1e4:	443b      	add	r3, r7
 800b1e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1e8:	e76a      	b.n	800b0c0 <_vfiprintf_r+0x78>
 800b1ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1ee:	460c      	mov	r4, r1
 800b1f0:	2001      	movs	r0, #1
 800b1f2:	e7a8      	b.n	800b146 <_vfiprintf_r+0xfe>
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	3401      	adds	r4, #1
 800b1f8:	9305      	str	r3, [sp, #20]
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	f04f 0c0a 	mov.w	ip, #10
 800b200:	4620      	mov	r0, r4
 800b202:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b206:	3a30      	subs	r2, #48	@ 0x30
 800b208:	2a09      	cmp	r2, #9
 800b20a:	d903      	bls.n	800b214 <_vfiprintf_r+0x1cc>
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d0c6      	beq.n	800b19e <_vfiprintf_r+0x156>
 800b210:	9105      	str	r1, [sp, #20]
 800b212:	e7c4      	b.n	800b19e <_vfiprintf_r+0x156>
 800b214:	fb0c 2101 	mla	r1, ip, r1, r2
 800b218:	4604      	mov	r4, r0
 800b21a:	2301      	movs	r3, #1
 800b21c:	e7f0      	b.n	800b200 <_vfiprintf_r+0x1b8>
 800b21e:	ab03      	add	r3, sp, #12
 800b220:	9300      	str	r3, [sp, #0]
 800b222:	462a      	mov	r2, r5
 800b224:	4b12      	ldr	r3, [pc, #72]	@ (800b270 <_vfiprintf_r+0x228>)
 800b226:	a904      	add	r1, sp, #16
 800b228:	4630      	mov	r0, r6
 800b22a:	f3af 8000 	nop.w
 800b22e:	4607      	mov	r7, r0
 800b230:	1c78      	adds	r0, r7, #1
 800b232:	d1d6      	bne.n	800b1e2 <_vfiprintf_r+0x19a>
 800b234:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b236:	07d9      	lsls	r1, r3, #31
 800b238:	d405      	bmi.n	800b246 <_vfiprintf_r+0x1fe>
 800b23a:	89ab      	ldrh	r3, [r5, #12]
 800b23c:	059a      	lsls	r2, r3, #22
 800b23e:	d402      	bmi.n	800b246 <_vfiprintf_r+0x1fe>
 800b240:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b242:	f7ff fc77 	bl	800ab34 <__retarget_lock_release_recursive>
 800b246:	89ab      	ldrh	r3, [r5, #12]
 800b248:	065b      	lsls	r3, r3, #25
 800b24a:	f53f af1f 	bmi.w	800b08c <_vfiprintf_r+0x44>
 800b24e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b250:	e71e      	b.n	800b090 <_vfiprintf_r+0x48>
 800b252:	ab03      	add	r3, sp, #12
 800b254:	9300      	str	r3, [sp, #0]
 800b256:	462a      	mov	r2, r5
 800b258:	4b05      	ldr	r3, [pc, #20]	@ (800b270 <_vfiprintf_r+0x228>)
 800b25a:	a904      	add	r1, sp, #16
 800b25c:	4630      	mov	r0, r6
 800b25e:	f000 f879 	bl	800b354 <_printf_i>
 800b262:	e7e4      	b.n	800b22e <_vfiprintf_r+0x1e6>
 800b264:	0800bcf1 	.word	0x0800bcf1
 800b268:	0800bcfb 	.word	0x0800bcfb
 800b26c:	00000000 	.word	0x00000000
 800b270:	0800b023 	.word	0x0800b023
 800b274:	0800bcf7 	.word	0x0800bcf7

0800b278 <_printf_common>:
 800b278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b27c:	4616      	mov	r6, r2
 800b27e:	4698      	mov	r8, r3
 800b280:	688a      	ldr	r2, [r1, #8]
 800b282:	690b      	ldr	r3, [r1, #16]
 800b284:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b288:	4293      	cmp	r3, r2
 800b28a:	bfb8      	it	lt
 800b28c:	4613      	movlt	r3, r2
 800b28e:	6033      	str	r3, [r6, #0]
 800b290:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b294:	4607      	mov	r7, r0
 800b296:	460c      	mov	r4, r1
 800b298:	b10a      	cbz	r2, 800b29e <_printf_common+0x26>
 800b29a:	3301      	adds	r3, #1
 800b29c:	6033      	str	r3, [r6, #0]
 800b29e:	6823      	ldr	r3, [r4, #0]
 800b2a0:	0699      	lsls	r1, r3, #26
 800b2a2:	bf42      	ittt	mi
 800b2a4:	6833      	ldrmi	r3, [r6, #0]
 800b2a6:	3302      	addmi	r3, #2
 800b2a8:	6033      	strmi	r3, [r6, #0]
 800b2aa:	6825      	ldr	r5, [r4, #0]
 800b2ac:	f015 0506 	ands.w	r5, r5, #6
 800b2b0:	d106      	bne.n	800b2c0 <_printf_common+0x48>
 800b2b2:	f104 0a19 	add.w	sl, r4, #25
 800b2b6:	68e3      	ldr	r3, [r4, #12]
 800b2b8:	6832      	ldr	r2, [r6, #0]
 800b2ba:	1a9b      	subs	r3, r3, r2
 800b2bc:	42ab      	cmp	r3, r5
 800b2be:	dc26      	bgt.n	800b30e <_printf_common+0x96>
 800b2c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b2c4:	6822      	ldr	r2, [r4, #0]
 800b2c6:	3b00      	subs	r3, #0
 800b2c8:	bf18      	it	ne
 800b2ca:	2301      	movne	r3, #1
 800b2cc:	0692      	lsls	r2, r2, #26
 800b2ce:	d42b      	bmi.n	800b328 <_printf_common+0xb0>
 800b2d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b2d4:	4641      	mov	r1, r8
 800b2d6:	4638      	mov	r0, r7
 800b2d8:	47c8      	blx	r9
 800b2da:	3001      	adds	r0, #1
 800b2dc:	d01e      	beq.n	800b31c <_printf_common+0xa4>
 800b2de:	6823      	ldr	r3, [r4, #0]
 800b2e0:	6922      	ldr	r2, [r4, #16]
 800b2e2:	f003 0306 	and.w	r3, r3, #6
 800b2e6:	2b04      	cmp	r3, #4
 800b2e8:	bf02      	ittt	eq
 800b2ea:	68e5      	ldreq	r5, [r4, #12]
 800b2ec:	6833      	ldreq	r3, [r6, #0]
 800b2ee:	1aed      	subeq	r5, r5, r3
 800b2f0:	68a3      	ldr	r3, [r4, #8]
 800b2f2:	bf0c      	ite	eq
 800b2f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2f8:	2500      	movne	r5, #0
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	bfc4      	itt	gt
 800b2fe:	1a9b      	subgt	r3, r3, r2
 800b300:	18ed      	addgt	r5, r5, r3
 800b302:	2600      	movs	r6, #0
 800b304:	341a      	adds	r4, #26
 800b306:	42b5      	cmp	r5, r6
 800b308:	d11a      	bne.n	800b340 <_printf_common+0xc8>
 800b30a:	2000      	movs	r0, #0
 800b30c:	e008      	b.n	800b320 <_printf_common+0xa8>
 800b30e:	2301      	movs	r3, #1
 800b310:	4652      	mov	r2, sl
 800b312:	4641      	mov	r1, r8
 800b314:	4638      	mov	r0, r7
 800b316:	47c8      	blx	r9
 800b318:	3001      	adds	r0, #1
 800b31a:	d103      	bne.n	800b324 <_printf_common+0xac>
 800b31c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b324:	3501      	adds	r5, #1
 800b326:	e7c6      	b.n	800b2b6 <_printf_common+0x3e>
 800b328:	18e1      	adds	r1, r4, r3
 800b32a:	1c5a      	adds	r2, r3, #1
 800b32c:	2030      	movs	r0, #48	@ 0x30
 800b32e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b332:	4422      	add	r2, r4
 800b334:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b338:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b33c:	3302      	adds	r3, #2
 800b33e:	e7c7      	b.n	800b2d0 <_printf_common+0x58>
 800b340:	2301      	movs	r3, #1
 800b342:	4622      	mov	r2, r4
 800b344:	4641      	mov	r1, r8
 800b346:	4638      	mov	r0, r7
 800b348:	47c8      	blx	r9
 800b34a:	3001      	adds	r0, #1
 800b34c:	d0e6      	beq.n	800b31c <_printf_common+0xa4>
 800b34e:	3601      	adds	r6, #1
 800b350:	e7d9      	b.n	800b306 <_printf_common+0x8e>
	...

0800b354 <_printf_i>:
 800b354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b358:	7e0f      	ldrb	r7, [r1, #24]
 800b35a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b35c:	2f78      	cmp	r7, #120	@ 0x78
 800b35e:	4691      	mov	r9, r2
 800b360:	4680      	mov	r8, r0
 800b362:	460c      	mov	r4, r1
 800b364:	469a      	mov	sl, r3
 800b366:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b36a:	d807      	bhi.n	800b37c <_printf_i+0x28>
 800b36c:	2f62      	cmp	r7, #98	@ 0x62
 800b36e:	d80a      	bhi.n	800b386 <_printf_i+0x32>
 800b370:	2f00      	cmp	r7, #0
 800b372:	f000 80d2 	beq.w	800b51a <_printf_i+0x1c6>
 800b376:	2f58      	cmp	r7, #88	@ 0x58
 800b378:	f000 80b9 	beq.w	800b4ee <_printf_i+0x19a>
 800b37c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b380:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b384:	e03a      	b.n	800b3fc <_printf_i+0xa8>
 800b386:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b38a:	2b15      	cmp	r3, #21
 800b38c:	d8f6      	bhi.n	800b37c <_printf_i+0x28>
 800b38e:	a101      	add	r1, pc, #4	@ (adr r1, 800b394 <_printf_i+0x40>)
 800b390:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b394:	0800b3ed 	.word	0x0800b3ed
 800b398:	0800b401 	.word	0x0800b401
 800b39c:	0800b37d 	.word	0x0800b37d
 800b3a0:	0800b37d 	.word	0x0800b37d
 800b3a4:	0800b37d 	.word	0x0800b37d
 800b3a8:	0800b37d 	.word	0x0800b37d
 800b3ac:	0800b401 	.word	0x0800b401
 800b3b0:	0800b37d 	.word	0x0800b37d
 800b3b4:	0800b37d 	.word	0x0800b37d
 800b3b8:	0800b37d 	.word	0x0800b37d
 800b3bc:	0800b37d 	.word	0x0800b37d
 800b3c0:	0800b501 	.word	0x0800b501
 800b3c4:	0800b42b 	.word	0x0800b42b
 800b3c8:	0800b4bb 	.word	0x0800b4bb
 800b3cc:	0800b37d 	.word	0x0800b37d
 800b3d0:	0800b37d 	.word	0x0800b37d
 800b3d4:	0800b523 	.word	0x0800b523
 800b3d8:	0800b37d 	.word	0x0800b37d
 800b3dc:	0800b42b 	.word	0x0800b42b
 800b3e0:	0800b37d 	.word	0x0800b37d
 800b3e4:	0800b37d 	.word	0x0800b37d
 800b3e8:	0800b4c3 	.word	0x0800b4c3
 800b3ec:	6833      	ldr	r3, [r6, #0]
 800b3ee:	1d1a      	adds	r2, r3, #4
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	6032      	str	r2, [r6, #0]
 800b3f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	e09d      	b.n	800b53c <_printf_i+0x1e8>
 800b400:	6833      	ldr	r3, [r6, #0]
 800b402:	6820      	ldr	r0, [r4, #0]
 800b404:	1d19      	adds	r1, r3, #4
 800b406:	6031      	str	r1, [r6, #0]
 800b408:	0606      	lsls	r6, r0, #24
 800b40a:	d501      	bpl.n	800b410 <_printf_i+0xbc>
 800b40c:	681d      	ldr	r5, [r3, #0]
 800b40e:	e003      	b.n	800b418 <_printf_i+0xc4>
 800b410:	0645      	lsls	r5, r0, #25
 800b412:	d5fb      	bpl.n	800b40c <_printf_i+0xb8>
 800b414:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b418:	2d00      	cmp	r5, #0
 800b41a:	da03      	bge.n	800b424 <_printf_i+0xd0>
 800b41c:	232d      	movs	r3, #45	@ 0x2d
 800b41e:	426d      	negs	r5, r5
 800b420:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b424:	4859      	ldr	r0, [pc, #356]	@ (800b58c <_printf_i+0x238>)
 800b426:	230a      	movs	r3, #10
 800b428:	e011      	b.n	800b44e <_printf_i+0xfa>
 800b42a:	6821      	ldr	r1, [r4, #0]
 800b42c:	6833      	ldr	r3, [r6, #0]
 800b42e:	0608      	lsls	r0, r1, #24
 800b430:	f853 5b04 	ldr.w	r5, [r3], #4
 800b434:	d402      	bmi.n	800b43c <_printf_i+0xe8>
 800b436:	0649      	lsls	r1, r1, #25
 800b438:	bf48      	it	mi
 800b43a:	b2ad      	uxthmi	r5, r5
 800b43c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b43e:	4853      	ldr	r0, [pc, #332]	@ (800b58c <_printf_i+0x238>)
 800b440:	6033      	str	r3, [r6, #0]
 800b442:	bf14      	ite	ne
 800b444:	230a      	movne	r3, #10
 800b446:	2308      	moveq	r3, #8
 800b448:	2100      	movs	r1, #0
 800b44a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b44e:	6866      	ldr	r6, [r4, #4]
 800b450:	60a6      	str	r6, [r4, #8]
 800b452:	2e00      	cmp	r6, #0
 800b454:	bfa2      	ittt	ge
 800b456:	6821      	ldrge	r1, [r4, #0]
 800b458:	f021 0104 	bicge.w	r1, r1, #4
 800b45c:	6021      	strge	r1, [r4, #0]
 800b45e:	b90d      	cbnz	r5, 800b464 <_printf_i+0x110>
 800b460:	2e00      	cmp	r6, #0
 800b462:	d04b      	beq.n	800b4fc <_printf_i+0x1a8>
 800b464:	4616      	mov	r6, r2
 800b466:	fbb5 f1f3 	udiv	r1, r5, r3
 800b46a:	fb03 5711 	mls	r7, r3, r1, r5
 800b46e:	5dc7      	ldrb	r7, [r0, r7]
 800b470:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b474:	462f      	mov	r7, r5
 800b476:	42bb      	cmp	r3, r7
 800b478:	460d      	mov	r5, r1
 800b47a:	d9f4      	bls.n	800b466 <_printf_i+0x112>
 800b47c:	2b08      	cmp	r3, #8
 800b47e:	d10b      	bne.n	800b498 <_printf_i+0x144>
 800b480:	6823      	ldr	r3, [r4, #0]
 800b482:	07df      	lsls	r7, r3, #31
 800b484:	d508      	bpl.n	800b498 <_printf_i+0x144>
 800b486:	6923      	ldr	r3, [r4, #16]
 800b488:	6861      	ldr	r1, [r4, #4]
 800b48a:	4299      	cmp	r1, r3
 800b48c:	bfde      	ittt	le
 800b48e:	2330      	movle	r3, #48	@ 0x30
 800b490:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b494:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b498:	1b92      	subs	r2, r2, r6
 800b49a:	6122      	str	r2, [r4, #16]
 800b49c:	f8cd a000 	str.w	sl, [sp]
 800b4a0:	464b      	mov	r3, r9
 800b4a2:	aa03      	add	r2, sp, #12
 800b4a4:	4621      	mov	r1, r4
 800b4a6:	4640      	mov	r0, r8
 800b4a8:	f7ff fee6 	bl	800b278 <_printf_common>
 800b4ac:	3001      	adds	r0, #1
 800b4ae:	d14a      	bne.n	800b546 <_printf_i+0x1f2>
 800b4b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b4b4:	b004      	add	sp, #16
 800b4b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4ba:	6823      	ldr	r3, [r4, #0]
 800b4bc:	f043 0320 	orr.w	r3, r3, #32
 800b4c0:	6023      	str	r3, [r4, #0]
 800b4c2:	4833      	ldr	r0, [pc, #204]	@ (800b590 <_printf_i+0x23c>)
 800b4c4:	2778      	movs	r7, #120	@ 0x78
 800b4c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b4ca:	6823      	ldr	r3, [r4, #0]
 800b4cc:	6831      	ldr	r1, [r6, #0]
 800b4ce:	061f      	lsls	r7, r3, #24
 800b4d0:	f851 5b04 	ldr.w	r5, [r1], #4
 800b4d4:	d402      	bmi.n	800b4dc <_printf_i+0x188>
 800b4d6:	065f      	lsls	r7, r3, #25
 800b4d8:	bf48      	it	mi
 800b4da:	b2ad      	uxthmi	r5, r5
 800b4dc:	6031      	str	r1, [r6, #0]
 800b4de:	07d9      	lsls	r1, r3, #31
 800b4e0:	bf44      	itt	mi
 800b4e2:	f043 0320 	orrmi.w	r3, r3, #32
 800b4e6:	6023      	strmi	r3, [r4, #0]
 800b4e8:	b11d      	cbz	r5, 800b4f2 <_printf_i+0x19e>
 800b4ea:	2310      	movs	r3, #16
 800b4ec:	e7ac      	b.n	800b448 <_printf_i+0xf4>
 800b4ee:	4827      	ldr	r0, [pc, #156]	@ (800b58c <_printf_i+0x238>)
 800b4f0:	e7e9      	b.n	800b4c6 <_printf_i+0x172>
 800b4f2:	6823      	ldr	r3, [r4, #0]
 800b4f4:	f023 0320 	bic.w	r3, r3, #32
 800b4f8:	6023      	str	r3, [r4, #0]
 800b4fa:	e7f6      	b.n	800b4ea <_printf_i+0x196>
 800b4fc:	4616      	mov	r6, r2
 800b4fe:	e7bd      	b.n	800b47c <_printf_i+0x128>
 800b500:	6833      	ldr	r3, [r6, #0]
 800b502:	6825      	ldr	r5, [r4, #0]
 800b504:	6961      	ldr	r1, [r4, #20]
 800b506:	1d18      	adds	r0, r3, #4
 800b508:	6030      	str	r0, [r6, #0]
 800b50a:	062e      	lsls	r6, r5, #24
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	d501      	bpl.n	800b514 <_printf_i+0x1c0>
 800b510:	6019      	str	r1, [r3, #0]
 800b512:	e002      	b.n	800b51a <_printf_i+0x1c6>
 800b514:	0668      	lsls	r0, r5, #25
 800b516:	d5fb      	bpl.n	800b510 <_printf_i+0x1bc>
 800b518:	8019      	strh	r1, [r3, #0]
 800b51a:	2300      	movs	r3, #0
 800b51c:	6123      	str	r3, [r4, #16]
 800b51e:	4616      	mov	r6, r2
 800b520:	e7bc      	b.n	800b49c <_printf_i+0x148>
 800b522:	6833      	ldr	r3, [r6, #0]
 800b524:	1d1a      	adds	r2, r3, #4
 800b526:	6032      	str	r2, [r6, #0]
 800b528:	681e      	ldr	r6, [r3, #0]
 800b52a:	6862      	ldr	r2, [r4, #4]
 800b52c:	2100      	movs	r1, #0
 800b52e:	4630      	mov	r0, r6
 800b530:	f7f4 fe4e 	bl	80001d0 <memchr>
 800b534:	b108      	cbz	r0, 800b53a <_printf_i+0x1e6>
 800b536:	1b80      	subs	r0, r0, r6
 800b538:	6060      	str	r0, [r4, #4]
 800b53a:	6863      	ldr	r3, [r4, #4]
 800b53c:	6123      	str	r3, [r4, #16]
 800b53e:	2300      	movs	r3, #0
 800b540:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b544:	e7aa      	b.n	800b49c <_printf_i+0x148>
 800b546:	6923      	ldr	r3, [r4, #16]
 800b548:	4632      	mov	r2, r6
 800b54a:	4649      	mov	r1, r9
 800b54c:	4640      	mov	r0, r8
 800b54e:	47d0      	blx	sl
 800b550:	3001      	adds	r0, #1
 800b552:	d0ad      	beq.n	800b4b0 <_printf_i+0x15c>
 800b554:	6823      	ldr	r3, [r4, #0]
 800b556:	079b      	lsls	r3, r3, #30
 800b558:	d413      	bmi.n	800b582 <_printf_i+0x22e>
 800b55a:	68e0      	ldr	r0, [r4, #12]
 800b55c:	9b03      	ldr	r3, [sp, #12]
 800b55e:	4298      	cmp	r0, r3
 800b560:	bfb8      	it	lt
 800b562:	4618      	movlt	r0, r3
 800b564:	e7a6      	b.n	800b4b4 <_printf_i+0x160>
 800b566:	2301      	movs	r3, #1
 800b568:	4632      	mov	r2, r6
 800b56a:	4649      	mov	r1, r9
 800b56c:	4640      	mov	r0, r8
 800b56e:	47d0      	blx	sl
 800b570:	3001      	adds	r0, #1
 800b572:	d09d      	beq.n	800b4b0 <_printf_i+0x15c>
 800b574:	3501      	adds	r5, #1
 800b576:	68e3      	ldr	r3, [r4, #12]
 800b578:	9903      	ldr	r1, [sp, #12]
 800b57a:	1a5b      	subs	r3, r3, r1
 800b57c:	42ab      	cmp	r3, r5
 800b57e:	dcf2      	bgt.n	800b566 <_printf_i+0x212>
 800b580:	e7eb      	b.n	800b55a <_printf_i+0x206>
 800b582:	2500      	movs	r5, #0
 800b584:	f104 0619 	add.w	r6, r4, #25
 800b588:	e7f5      	b.n	800b576 <_printf_i+0x222>
 800b58a:	bf00      	nop
 800b58c:	0800bd02 	.word	0x0800bd02
 800b590:	0800bd13 	.word	0x0800bd13

0800b594 <__sflush_r>:
 800b594:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b59c:	0716      	lsls	r6, r2, #28
 800b59e:	4605      	mov	r5, r0
 800b5a0:	460c      	mov	r4, r1
 800b5a2:	d454      	bmi.n	800b64e <__sflush_r+0xba>
 800b5a4:	684b      	ldr	r3, [r1, #4]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	dc02      	bgt.n	800b5b0 <__sflush_r+0x1c>
 800b5aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	dd48      	ble.n	800b642 <__sflush_r+0xae>
 800b5b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b5b2:	2e00      	cmp	r6, #0
 800b5b4:	d045      	beq.n	800b642 <__sflush_r+0xae>
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b5bc:	682f      	ldr	r7, [r5, #0]
 800b5be:	6a21      	ldr	r1, [r4, #32]
 800b5c0:	602b      	str	r3, [r5, #0]
 800b5c2:	d030      	beq.n	800b626 <__sflush_r+0x92>
 800b5c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b5c6:	89a3      	ldrh	r3, [r4, #12]
 800b5c8:	0759      	lsls	r1, r3, #29
 800b5ca:	d505      	bpl.n	800b5d8 <__sflush_r+0x44>
 800b5cc:	6863      	ldr	r3, [r4, #4]
 800b5ce:	1ad2      	subs	r2, r2, r3
 800b5d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b5d2:	b10b      	cbz	r3, 800b5d8 <__sflush_r+0x44>
 800b5d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b5d6:	1ad2      	subs	r2, r2, r3
 800b5d8:	2300      	movs	r3, #0
 800b5da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b5dc:	6a21      	ldr	r1, [r4, #32]
 800b5de:	4628      	mov	r0, r5
 800b5e0:	47b0      	blx	r6
 800b5e2:	1c43      	adds	r3, r0, #1
 800b5e4:	89a3      	ldrh	r3, [r4, #12]
 800b5e6:	d106      	bne.n	800b5f6 <__sflush_r+0x62>
 800b5e8:	6829      	ldr	r1, [r5, #0]
 800b5ea:	291d      	cmp	r1, #29
 800b5ec:	d82b      	bhi.n	800b646 <__sflush_r+0xb2>
 800b5ee:	4a2a      	ldr	r2, [pc, #168]	@ (800b698 <__sflush_r+0x104>)
 800b5f0:	410a      	asrs	r2, r1
 800b5f2:	07d6      	lsls	r6, r2, #31
 800b5f4:	d427      	bmi.n	800b646 <__sflush_r+0xb2>
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	6062      	str	r2, [r4, #4]
 800b5fa:	04d9      	lsls	r1, r3, #19
 800b5fc:	6922      	ldr	r2, [r4, #16]
 800b5fe:	6022      	str	r2, [r4, #0]
 800b600:	d504      	bpl.n	800b60c <__sflush_r+0x78>
 800b602:	1c42      	adds	r2, r0, #1
 800b604:	d101      	bne.n	800b60a <__sflush_r+0x76>
 800b606:	682b      	ldr	r3, [r5, #0]
 800b608:	b903      	cbnz	r3, 800b60c <__sflush_r+0x78>
 800b60a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b60c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b60e:	602f      	str	r7, [r5, #0]
 800b610:	b1b9      	cbz	r1, 800b642 <__sflush_r+0xae>
 800b612:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b616:	4299      	cmp	r1, r3
 800b618:	d002      	beq.n	800b620 <__sflush_r+0x8c>
 800b61a:	4628      	mov	r0, r5
 800b61c:	f7ff fa9a 	bl	800ab54 <_free_r>
 800b620:	2300      	movs	r3, #0
 800b622:	6363      	str	r3, [r4, #52]	@ 0x34
 800b624:	e00d      	b.n	800b642 <__sflush_r+0xae>
 800b626:	2301      	movs	r3, #1
 800b628:	4628      	mov	r0, r5
 800b62a:	47b0      	blx	r6
 800b62c:	4602      	mov	r2, r0
 800b62e:	1c50      	adds	r0, r2, #1
 800b630:	d1c9      	bne.n	800b5c6 <__sflush_r+0x32>
 800b632:	682b      	ldr	r3, [r5, #0]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d0c6      	beq.n	800b5c6 <__sflush_r+0x32>
 800b638:	2b1d      	cmp	r3, #29
 800b63a:	d001      	beq.n	800b640 <__sflush_r+0xac>
 800b63c:	2b16      	cmp	r3, #22
 800b63e:	d11e      	bne.n	800b67e <__sflush_r+0xea>
 800b640:	602f      	str	r7, [r5, #0]
 800b642:	2000      	movs	r0, #0
 800b644:	e022      	b.n	800b68c <__sflush_r+0xf8>
 800b646:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b64a:	b21b      	sxth	r3, r3
 800b64c:	e01b      	b.n	800b686 <__sflush_r+0xf2>
 800b64e:	690f      	ldr	r7, [r1, #16]
 800b650:	2f00      	cmp	r7, #0
 800b652:	d0f6      	beq.n	800b642 <__sflush_r+0xae>
 800b654:	0793      	lsls	r3, r2, #30
 800b656:	680e      	ldr	r6, [r1, #0]
 800b658:	bf08      	it	eq
 800b65a:	694b      	ldreq	r3, [r1, #20]
 800b65c:	600f      	str	r7, [r1, #0]
 800b65e:	bf18      	it	ne
 800b660:	2300      	movne	r3, #0
 800b662:	eba6 0807 	sub.w	r8, r6, r7
 800b666:	608b      	str	r3, [r1, #8]
 800b668:	f1b8 0f00 	cmp.w	r8, #0
 800b66c:	dde9      	ble.n	800b642 <__sflush_r+0xae>
 800b66e:	6a21      	ldr	r1, [r4, #32]
 800b670:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b672:	4643      	mov	r3, r8
 800b674:	463a      	mov	r2, r7
 800b676:	4628      	mov	r0, r5
 800b678:	47b0      	blx	r6
 800b67a:	2800      	cmp	r0, #0
 800b67c:	dc08      	bgt.n	800b690 <__sflush_r+0xfc>
 800b67e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b682:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b686:	81a3      	strh	r3, [r4, #12]
 800b688:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b68c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b690:	4407      	add	r7, r0
 800b692:	eba8 0800 	sub.w	r8, r8, r0
 800b696:	e7e7      	b.n	800b668 <__sflush_r+0xd4>
 800b698:	dfbffffe 	.word	0xdfbffffe

0800b69c <_fflush_r>:
 800b69c:	b538      	push	{r3, r4, r5, lr}
 800b69e:	690b      	ldr	r3, [r1, #16]
 800b6a0:	4605      	mov	r5, r0
 800b6a2:	460c      	mov	r4, r1
 800b6a4:	b913      	cbnz	r3, 800b6ac <_fflush_r+0x10>
 800b6a6:	2500      	movs	r5, #0
 800b6a8:	4628      	mov	r0, r5
 800b6aa:	bd38      	pop	{r3, r4, r5, pc}
 800b6ac:	b118      	cbz	r0, 800b6b6 <_fflush_r+0x1a>
 800b6ae:	6a03      	ldr	r3, [r0, #32]
 800b6b0:	b90b      	cbnz	r3, 800b6b6 <_fflush_r+0x1a>
 800b6b2:	f7fe ffbd 	bl	800a630 <__sinit>
 800b6b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d0f3      	beq.n	800b6a6 <_fflush_r+0xa>
 800b6be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b6c0:	07d0      	lsls	r0, r2, #31
 800b6c2:	d404      	bmi.n	800b6ce <_fflush_r+0x32>
 800b6c4:	0599      	lsls	r1, r3, #22
 800b6c6:	d402      	bmi.n	800b6ce <_fflush_r+0x32>
 800b6c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6ca:	f7ff fa32 	bl	800ab32 <__retarget_lock_acquire_recursive>
 800b6ce:	4628      	mov	r0, r5
 800b6d0:	4621      	mov	r1, r4
 800b6d2:	f7ff ff5f 	bl	800b594 <__sflush_r>
 800b6d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b6d8:	07da      	lsls	r2, r3, #31
 800b6da:	4605      	mov	r5, r0
 800b6dc:	d4e4      	bmi.n	800b6a8 <_fflush_r+0xc>
 800b6de:	89a3      	ldrh	r3, [r4, #12]
 800b6e0:	059b      	lsls	r3, r3, #22
 800b6e2:	d4e1      	bmi.n	800b6a8 <_fflush_r+0xc>
 800b6e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6e6:	f7ff fa25 	bl	800ab34 <__retarget_lock_release_recursive>
 800b6ea:	e7dd      	b.n	800b6a8 <_fflush_r+0xc>

0800b6ec <__swhatbuf_r>:
 800b6ec:	b570      	push	{r4, r5, r6, lr}
 800b6ee:	460c      	mov	r4, r1
 800b6f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6f4:	2900      	cmp	r1, #0
 800b6f6:	b096      	sub	sp, #88	@ 0x58
 800b6f8:	4615      	mov	r5, r2
 800b6fa:	461e      	mov	r6, r3
 800b6fc:	da0d      	bge.n	800b71a <__swhatbuf_r+0x2e>
 800b6fe:	89a3      	ldrh	r3, [r4, #12]
 800b700:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b704:	f04f 0100 	mov.w	r1, #0
 800b708:	bf14      	ite	ne
 800b70a:	2340      	movne	r3, #64	@ 0x40
 800b70c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b710:	2000      	movs	r0, #0
 800b712:	6031      	str	r1, [r6, #0]
 800b714:	602b      	str	r3, [r5, #0]
 800b716:	b016      	add	sp, #88	@ 0x58
 800b718:	bd70      	pop	{r4, r5, r6, pc}
 800b71a:	466a      	mov	r2, sp
 800b71c:	f000 f862 	bl	800b7e4 <_fstat_r>
 800b720:	2800      	cmp	r0, #0
 800b722:	dbec      	blt.n	800b6fe <__swhatbuf_r+0x12>
 800b724:	9901      	ldr	r1, [sp, #4]
 800b726:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b72a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b72e:	4259      	negs	r1, r3
 800b730:	4159      	adcs	r1, r3
 800b732:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b736:	e7eb      	b.n	800b710 <__swhatbuf_r+0x24>

0800b738 <__smakebuf_r>:
 800b738:	898b      	ldrh	r3, [r1, #12]
 800b73a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b73c:	079d      	lsls	r5, r3, #30
 800b73e:	4606      	mov	r6, r0
 800b740:	460c      	mov	r4, r1
 800b742:	d507      	bpl.n	800b754 <__smakebuf_r+0x1c>
 800b744:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b748:	6023      	str	r3, [r4, #0]
 800b74a:	6123      	str	r3, [r4, #16]
 800b74c:	2301      	movs	r3, #1
 800b74e:	6163      	str	r3, [r4, #20]
 800b750:	b003      	add	sp, #12
 800b752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b754:	ab01      	add	r3, sp, #4
 800b756:	466a      	mov	r2, sp
 800b758:	f7ff ffc8 	bl	800b6ec <__swhatbuf_r>
 800b75c:	9f00      	ldr	r7, [sp, #0]
 800b75e:	4605      	mov	r5, r0
 800b760:	4639      	mov	r1, r7
 800b762:	4630      	mov	r0, r6
 800b764:	f7ff fa62 	bl	800ac2c <_malloc_r>
 800b768:	b948      	cbnz	r0, 800b77e <__smakebuf_r+0x46>
 800b76a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b76e:	059a      	lsls	r2, r3, #22
 800b770:	d4ee      	bmi.n	800b750 <__smakebuf_r+0x18>
 800b772:	f023 0303 	bic.w	r3, r3, #3
 800b776:	f043 0302 	orr.w	r3, r3, #2
 800b77a:	81a3      	strh	r3, [r4, #12]
 800b77c:	e7e2      	b.n	800b744 <__smakebuf_r+0xc>
 800b77e:	89a3      	ldrh	r3, [r4, #12]
 800b780:	6020      	str	r0, [r4, #0]
 800b782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b786:	81a3      	strh	r3, [r4, #12]
 800b788:	9b01      	ldr	r3, [sp, #4]
 800b78a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b78e:	b15b      	cbz	r3, 800b7a8 <__smakebuf_r+0x70>
 800b790:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b794:	4630      	mov	r0, r6
 800b796:	f000 f837 	bl	800b808 <_isatty_r>
 800b79a:	b128      	cbz	r0, 800b7a8 <__smakebuf_r+0x70>
 800b79c:	89a3      	ldrh	r3, [r4, #12]
 800b79e:	f023 0303 	bic.w	r3, r3, #3
 800b7a2:	f043 0301 	orr.w	r3, r3, #1
 800b7a6:	81a3      	strh	r3, [r4, #12]
 800b7a8:	89a3      	ldrh	r3, [r4, #12]
 800b7aa:	431d      	orrs	r5, r3
 800b7ac:	81a5      	strh	r5, [r4, #12]
 800b7ae:	e7cf      	b.n	800b750 <__smakebuf_r+0x18>

0800b7b0 <memmove>:
 800b7b0:	4288      	cmp	r0, r1
 800b7b2:	b510      	push	{r4, lr}
 800b7b4:	eb01 0402 	add.w	r4, r1, r2
 800b7b8:	d902      	bls.n	800b7c0 <memmove+0x10>
 800b7ba:	4284      	cmp	r4, r0
 800b7bc:	4623      	mov	r3, r4
 800b7be:	d807      	bhi.n	800b7d0 <memmove+0x20>
 800b7c0:	1e43      	subs	r3, r0, #1
 800b7c2:	42a1      	cmp	r1, r4
 800b7c4:	d008      	beq.n	800b7d8 <memmove+0x28>
 800b7c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b7ce:	e7f8      	b.n	800b7c2 <memmove+0x12>
 800b7d0:	4402      	add	r2, r0
 800b7d2:	4601      	mov	r1, r0
 800b7d4:	428a      	cmp	r2, r1
 800b7d6:	d100      	bne.n	800b7da <memmove+0x2a>
 800b7d8:	bd10      	pop	{r4, pc}
 800b7da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b7e2:	e7f7      	b.n	800b7d4 <memmove+0x24>

0800b7e4 <_fstat_r>:
 800b7e4:	b538      	push	{r3, r4, r5, lr}
 800b7e6:	4d07      	ldr	r5, [pc, #28]	@ (800b804 <_fstat_r+0x20>)
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	4604      	mov	r4, r0
 800b7ec:	4608      	mov	r0, r1
 800b7ee:	4611      	mov	r1, r2
 800b7f0:	602b      	str	r3, [r5, #0]
 800b7f2:	f7f5 fd4a 	bl	800128a <_fstat>
 800b7f6:	1c43      	adds	r3, r0, #1
 800b7f8:	d102      	bne.n	800b800 <_fstat_r+0x1c>
 800b7fa:	682b      	ldr	r3, [r5, #0]
 800b7fc:	b103      	cbz	r3, 800b800 <_fstat_r+0x1c>
 800b7fe:	6023      	str	r3, [r4, #0]
 800b800:	bd38      	pop	{r3, r4, r5, pc}
 800b802:	bf00      	nop
 800b804:	20005a80 	.word	0x20005a80

0800b808 <_isatty_r>:
 800b808:	b538      	push	{r3, r4, r5, lr}
 800b80a:	4d06      	ldr	r5, [pc, #24]	@ (800b824 <_isatty_r+0x1c>)
 800b80c:	2300      	movs	r3, #0
 800b80e:	4604      	mov	r4, r0
 800b810:	4608      	mov	r0, r1
 800b812:	602b      	str	r3, [r5, #0]
 800b814:	f7f5 fd49 	bl	80012aa <_isatty>
 800b818:	1c43      	adds	r3, r0, #1
 800b81a:	d102      	bne.n	800b822 <_isatty_r+0x1a>
 800b81c:	682b      	ldr	r3, [r5, #0]
 800b81e:	b103      	cbz	r3, 800b822 <_isatty_r+0x1a>
 800b820:	6023      	str	r3, [r4, #0]
 800b822:	bd38      	pop	{r3, r4, r5, pc}
 800b824:	20005a80 	.word	0x20005a80

0800b828 <_sbrk_r>:
 800b828:	b538      	push	{r3, r4, r5, lr}
 800b82a:	4d06      	ldr	r5, [pc, #24]	@ (800b844 <_sbrk_r+0x1c>)
 800b82c:	2300      	movs	r3, #0
 800b82e:	4604      	mov	r4, r0
 800b830:	4608      	mov	r0, r1
 800b832:	602b      	str	r3, [r5, #0]
 800b834:	f7f5 fd52 	bl	80012dc <_sbrk>
 800b838:	1c43      	adds	r3, r0, #1
 800b83a:	d102      	bne.n	800b842 <_sbrk_r+0x1a>
 800b83c:	682b      	ldr	r3, [r5, #0]
 800b83e:	b103      	cbz	r3, 800b842 <_sbrk_r+0x1a>
 800b840:	6023      	str	r3, [r4, #0]
 800b842:	bd38      	pop	{r3, r4, r5, pc}
 800b844:	20005a80 	.word	0x20005a80

0800b848 <_realloc_r>:
 800b848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b84c:	4680      	mov	r8, r0
 800b84e:	4615      	mov	r5, r2
 800b850:	460c      	mov	r4, r1
 800b852:	b921      	cbnz	r1, 800b85e <_realloc_r+0x16>
 800b854:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b858:	4611      	mov	r1, r2
 800b85a:	f7ff b9e7 	b.w	800ac2c <_malloc_r>
 800b85e:	b92a      	cbnz	r2, 800b86c <_realloc_r+0x24>
 800b860:	f7ff f978 	bl	800ab54 <_free_r>
 800b864:	2400      	movs	r4, #0
 800b866:	4620      	mov	r0, r4
 800b868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b86c:	f000 f81a 	bl	800b8a4 <_malloc_usable_size_r>
 800b870:	4285      	cmp	r5, r0
 800b872:	4606      	mov	r6, r0
 800b874:	d802      	bhi.n	800b87c <_realloc_r+0x34>
 800b876:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b87a:	d8f4      	bhi.n	800b866 <_realloc_r+0x1e>
 800b87c:	4629      	mov	r1, r5
 800b87e:	4640      	mov	r0, r8
 800b880:	f7ff f9d4 	bl	800ac2c <_malloc_r>
 800b884:	4607      	mov	r7, r0
 800b886:	2800      	cmp	r0, #0
 800b888:	d0ec      	beq.n	800b864 <_realloc_r+0x1c>
 800b88a:	42b5      	cmp	r5, r6
 800b88c:	462a      	mov	r2, r5
 800b88e:	4621      	mov	r1, r4
 800b890:	bf28      	it	cs
 800b892:	4632      	movcs	r2, r6
 800b894:	f7ff f94f 	bl	800ab36 <memcpy>
 800b898:	4621      	mov	r1, r4
 800b89a:	4640      	mov	r0, r8
 800b89c:	f7ff f95a 	bl	800ab54 <_free_r>
 800b8a0:	463c      	mov	r4, r7
 800b8a2:	e7e0      	b.n	800b866 <_realloc_r+0x1e>

0800b8a4 <_malloc_usable_size_r>:
 800b8a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8a8:	1f18      	subs	r0, r3, #4
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	bfbc      	itt	lt
 800b8ae:	580b      	ldrlt	r3, [r1, r0]
 800b8b0:	18c0      	addlt	r0, r0, r3
 800b8b2:	4770      	bx	lr

0800b8b4 <_init>:
 800b8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8b6:	bf00      	nop
 800b8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ba:	bc08      	pop	{r3}
 800b8bc:	469e      	mov	lr, r3
 800b8be:	4770      	bx	lr

0800b8c0 <_fini>:
 800b8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8c2:	bf00      	nop
 800b8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8c6:	bc08      	pop	{r3}
 800b8c8:	469e      	mov	lr, r3
 800b8ca:	4770      	bx	lr
